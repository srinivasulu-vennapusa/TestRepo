//
//  PastBilling.m
//  OmniRetailer
//
//  Created by Bangaru.Raju on 11/2/12.
//  Copyright 2012 __MyCompanyName__. All rights reserved.
//

#import "PastBilling.h"
#import <QuartzCore/QuartzCore.h>
#import "SalesServiceSvc.h"
#import "Global.h"
#import "math.h"
#import "DataBaseConnection.h"
#import "sqlite3.h"
#import "SKTCPSocket.h"
#import "SwipeControllerIpadViewController.h"
#import "BillingHome.h"
#import "ReturnItem.h"
#import "PopOverViewController.h"
#import "OmniRetailerViewController.h"
#import "OmniHomePage.h"
#import "ExchangingBillingHome.h"
#import "ExchangeItem.h"
//#import <MailCore/MailCore.h>
#import "SalesServiceSvc.h"
#import "ePOS-Print.h"
#import "DealsController.h"
#import "CustomerServiceSvc.h"
#import "DealServicesSvc.h"
#import "GiftCouponServicesSvc.h"
#import "GiftVoucherServices.h"
#import "LoyaltycardServiceSvc.h"
#import "WebServiceController.h"
#import "RequestHeader.h"
#import "KeychainItemWrapper.h"
#import "MemberServiceSvc.h"

//added by Srinivasulu on 19/06/2017....
//reason is used for starIO_print....

#import "OmniRetailerAppDelegate.h"

//#import "ModelCapability.h"

#import <StarIO/SMPort.h>

#import "Communication.h"
#import "ModelCapability.h"

//upto here on 19/06/2017....


BOOL getSaleId= NO;
int dataCount = 0;
int paymentDataCount = 0;
int previousBillItemsCount = 0;
NSString *billType = @"";
NSString *billUserName1 = @"";
NSString *billingCustomerName = @"";
NSString *billingChangeReturn = @"";
NSString *card_Number1 = @"";
NSString *amount_Paid = @"";
NSString *finalBillDue1 = @"0";

NSString *old_Bill_Id1 = @"";

NSString *pastBillStatus1 = @"";
#define SEND_TIMEOUT    10 * 1000
#define kLastConnectedBTv4DeviceName @"kLastConnectedBTv4DeviceName"

int returnTagId = 0;






float dealTempVal1 = 0.0f;

BOOL isBillSaved = false;

BOOL isPrint = false;
BOOL isScannerAdded  = FALSE;
BOOL isPrinterAdded = FALSE;

static sqlite3 *database = nil;
static sqlite3_stmt *selectStmt = nil;

@implementation UIPopoverController (iPhone)
+ (BOOL)_popoversDisabled {
    return NO;
}
@end

@implementation PastBilling
@synthesize pastBillField,aTimer;
@synthesize payTxt1, payTxt2;
@synthesize bgimage,spinner,loadingLabel,poc;
@synthesize soundFileURLRef,soundFileObject,popButton,myAppDelegate;
@synthesize lastConnectedBTv4DeviceName,mCardSaleData,mSettings,mCardSaleResults;
@synthesize phoneNo,emailId,amountView,amt,billingType,bluetoothManager,pastBillId;
@synthesize isPrinterConnected,isBillSummery;
//@synthesize pastBillId;

//added by Srinivasulu 24/04/2017 && 02/08/2017 && 09/08/2017....

@synthesize billStatusStr, billTypeStr,totalBillAmountStr, syncStatusStr,customerGstinStr;

//upto here on 24/04/2017 && 02/08/2017 && 09/08/2017....

#pragma -mark methods used at time of creating the instance of the viewController....
//I hope this methods may not be in use..

/**
 * @description  this method will be executed when This viewController instance is created using this view....
 * @date
 * @method       initWithNibName:-- bundle:--
 * @author
 * @param        NSString
 * @param        NSBundle
 * @param
 *
 * @return       id
 *
 * @modified By  Srinivasulu on 22/12/2017....
 * @reason       added the comment's....
 *
 * @verified By
 * @verified On
 *
 */

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

/**
 * @description  this method will be executed when This viewController instance is created using this view....
 * @date
 * @method       initWithBillType:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       id
 *
 * @modified By  Srinivasulu on 22/12/2017....
 * @reason       added the comment's....
 *
 * @verified By
 * @verified On
 *
 */

-(id) initWithBillType:(NSString *)typeOfBill{
    
    billType = [typeOfBill copy];
    
    return self;
}

/**
 * @description  this method will be executed when This viewController instance is created using this view....
 * @date
 * @method       initWithNewBill:-- oldBill:-- exchangedItems:---
 * @author
 * @param        NSString
 * @param        NSString
 * @param        NSMutableArray
 *
 * @return       id
 *
 * @modified By  Srinivasulu on 22/12/2017....
 * @reason       added the comment's....
 *
 * @verified By
 * @verified On
 *
 */

-(id) initWithNewBill:(NSString *)newBill oldBill:(NSString *)oldBill exchangedItems:(NSMutableArray *)exchangedItems{
    
    billType = [newBill copy];
    old_Bill_Id1 = [oldBill copy];
    
    finalItems = [[NSMutableArray alloc] init];
    
    for (int i = 0; i < exchangedItems.count; i++) {
        [finalItems addObject:exchangedItems[i]];
    }
    
    return self;
}

//- (void)dealloc
//{
//    [super dealloc];
//
//    [pastBillField release];
//    salesIdArray =nil;
//    [salesIdArray release];
//
//    selectedSalesIdArray =nil;
//    [selectedSalesIdArray release];
//
//    tempArrayItems  = nil;
//    [tempArrayItems release];
//
//
//    salesIdTable = nil;
//    selectedSaleIdTable = nil;
//    [salesIdTable release];
//    [selectedSaleIdTable release];
//
//    [scrollView release];
//
//    [aTimer release];
//    group = nil;
//    [group release];
//
//    payTxt1 = nil;
//    payTxt2 = nil;
//    [payTxt1 release];
//    [payTxt2 release];
//
//    cartItem = nil;
//    [cartItem release];
//
//    getSaleId = NO;
//
//
//    [paymentView release];
//    [smsView     release];
//    [mailView    release];
//    [printView   release];
//    [giftView    release];
//
//    curTax = nil;
//    [curTax release];
//
//    smsField.text = nil;
//    [smsField release];
//
//    [HUD release];
//
//    label22.text = nil;
//    [label22 release];
//
//}

#pragma  -mark start of ViewLifeCycle mehods....

/**
 * @description  it is one of ViewLifeCylce Method which will be executed first when class(view) is called..
 * @date
 * @method       ViewDidLoad
 * @author
 * @param
 * @param
 *
 * @return
 *
 * @modified By Srinivasulu on 22/12/2017....
 * @reason      added the comments and     .... not completed....
 *
 * @verified By
 * @verified On
 *
 */

// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad
{
    
    @try {
        [super viewDidLoad];
        
        if (printer) {
            
            [printer addObserver:self];
            isPrinterAdded = TRUE;
        }
        else {
            
            OmniRetailerViewController *controller = [[OmniRetailerViewController alloc] init];
            [controller initializePowaPeripherals];
            if (printer) {
                
                [printer addObserver:self];
                isPrinterAdded = TRUE;
            }
            
        }
        billingErrorStatus = FALSE;
        if ([billingType isEqualToString:@"pending"]) {
            
            if (scanner) {
                
                [scanner addObserver:self];
                [scanner setScannerAutoScan:YES];
            }
            else if (barcodeFlag_pendingbill){
                barcodeFlag_pendingbill = FALSE;
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"The barcode scanner is not connected" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
        }
        
        isPrinterConnected = FALSE;
        
        deletedTaxDic = [NSMutableDictionary new];
        
        foodCouponTypeStr = @"Sodexo";
        
        emailtext = [[UITextField alloc] init];
        phnotext = [[UITextField alloc]init];
        nametext = [[UITextField alloc]init];
        
        customerDetails = [[UILabel alloc] init] ;
        customerDetails.font = [UIFont italicSystemFontOfSize:20.0];
        customerDetails.textColor = [UIColor whiteColor];
        customerDetails.backgroundColor = [UIColor clearColor];
        customerDetails.hidden = NO;
        customerDetails.userInteractionEnabled = TRUE;
        UITapGestureRecognizer * sinleTap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(getCustomerDetailsDoorDel)];
        [customerDetails addGestureRecognizer:sinleTap];
        
        customerDetailsVal = [[UILabel alloc] init] ;
        customerDetailsVal.font = [UIFont boldSystemFontOfSize:14];
        customerDetailsVal.textColor = [UIColor whiteColor];
        customerDetailsVal.backgroundColor = [UIColor clearColor];
        customerDetailsVal.hidden = YES;
        
        
        // Audio Sound load url......
        version = [UIDevice currentDevice].systemVersion.floatValue;
        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"tap" withExtension: @"aif"];
        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject);
        
        [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];
        //    [[NSNotificationCenter defaultCenter] addObserver: self selector:@selector(deviceOrientationDidChange:) name: UIDeviceOrientationDidChangeNotification object: nil];
        
        currentOrientation = [UIDevice currentDevice].orientation;
        
        //added by Srinivasulu on 26/03/2018....
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad && !(currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight))
            currentOrientation = UIDeviceOrientationLandscapeRight;
        
        //upto here on 26/03/2018....
        
        
        cardPaymentSelection = @"POS";
        segmentIndex =0;
        
        if ([billingType isEqualToString:@"pending"]) {
            
            CheckWifi *wifi = [[CheckWifi alloc]init];
            BOOL status = [wifi checkWifi];
            if (status) {
                
                isOfflineService = FALSE;
            }
            else {
                isOfflineService = TRUE;
            }
            
            if (isOfflineService) {
                
                //changed Srinivauslu on 01/05/2017...
                
                //        self.titleLabel.text = @"PENDING BILL-OFFLINE";
                
                self.titleLabel.text = NSLocalizedString(@"pending_bill", nil);
                
                //upto here on 01/05/2017....
                
            }
            else {
                
                self.titleLabel.text = @"PENDING BILL";
            }
            
            [self.navigationItem setHidesBackButton:NO];
        }
        else {
            CheckWifi *wifi = [[CheckWifi alloc]init];
            BOOL status = [wifi checkWifi];
            if (status) {
                
                isOfflineService = FALSE;
            }
            else {
                
                isOfflineService = TRUE;
            }
            
            if (isOfflineService) {
                
                //cahnged Srinivauslu on 01/05/2017...
                
                
                //        self.titleLabel.text = @"PENDING BILL-OFFLINE";
                
                self.titleLabel.text = NSLocalizedString(@"pending_bill", nil);
                
                //upto here on 01/05/2017....
                
            }
            else {
                
                self.titleLabel.text = @"PAST BILLING";
                
            }
            [self.navigationItem setHidesBackButton:NO];
        }
        isBillSaved = false;
        isVoidedArray = [NSMutableArray new];
        cartTotalItems = [NSMutableArray new];
        
        billUserName1 = [user_name copy];
        
        billingCustomerName = [billCustomerName copy];
        
        billingChangeReturn = [billChangeReturn copy];
        
        giftNumber = @"";
        giftTypeString = @"";
        
        giftTypeTableView = [[UITableView alloc] init];
        //giftTypeTableView.backgroundColor = [UIColor whiteColor];
        giftTypeTableView.dataSource = self;
        giftTypeTableView.delegate = self;
        giftTypeTableView.bounces = FALSE;
        giftTypeTableView.backgroundColor = [UIColor whiteColor];
        giftTypeTableView.layer.cornerRadius = 3.0f;
        (giftTypeTableView.layer).borderWidth = 1.0f;
        
        
        //changed by Srinivasulu on 24/05/2017....
        
        //    giftTypeArrayList = [[NSMutableArray alloc] init];
        giftTypeArrayList = [[NSMutableOrderedSet alloc] init];
        
        //upto here on Srinivasulu on 24/05/2017....
        
        
        [giftTypeArrayList addObject:@"Gift Voucher"];
        [giftTypeArrayList addObject:@"Coupon"];
        [giftTypeArrayList addObject:@"Loyalty Card"];
        
        //Some GiftView Fields creation////
        giftType = [[UITextField alloc] init];
        giftType.borderStyle = UITextBorderStyleRoundedRect;
        giftType.textColor = [UIColor blackColor];
        giftType.font = [UIFont systemFontOfSize:18.0];
        giftType.backgroundColor = [UIColor clearColor];
        giftType.placeholder = @"select Type";
        giftType.text = @"";
        [giftType setEnabled:FALSE];
        giftType.tag = 0;
        giftType.hidden = YES;
        
        giftNo = [[CustomTextField alloc] init];
        giftNo.borderStyle = UITextBorderStyleRoundedRect;
        giftNo.textColor = [UIColor blackColor];
        giftNo.font = [UIFont systemFontOfSize:18.0];
        giftNo.backgroundColor = [UIColor clearColor];
        giftNo.text = @"";
        giftNo.hidden = YES;
        giftNo.placeholder = @"5 Digit Code";
        [giftNo awakeFromNib];
        
        giftAmt = [[CustomTextField alloc] init];
        giftAmt.borderStyle = UITextBorderStyleRoundedRect;
        giftAmt.textColor = [UIColor whiteColor];
        giftAmt.font = [UIFont systemFontOfSize:18.0];
        giftAmt.backgroundColor = [UIColor clearColor];
        giftAmt.text = @"0.0";
        giftAmt.userInteractionEnabled = NO;
        giftAmt.autocapitalizationType = UITextAutocapitalizationTypeNone;
        giftAmt.autocorrectionType = UITextAutocorrectionTypeNo;
        giftAmt.keyboardType = UIKeyboardTypeAlphabet;
        giftAmt.delegate = self;
        giftAmt.hidden = YES;
        [giftAmt awakeFromNib];
        
        
        //NSLog(@"%@",[billCustomerName copy]);
        
        //main view bakgroung setting...
        self.view.backgroundColor = [UIColor blackColor];
        
        giftView    = [[UIView alloc] init];
        (giftView.layer).borderWidth = 1.0f;
        (giftView.layer).cornerRadius = 8.0f;
        giftView.backgroundColor = [UIColor blackColor];
        giftView.layer.borderColor = [UIColor whiteColor].CGColor;
        giftView.hidden = TRUE;
        
        priceTable = [[UITableView alloc] init];
        priceTable.backgroundColor = [UIColor blackColor];
        priceTable.dataSource = self;
        priceTable.delegate = self;
        // [priceTable.layer setBorderWidth:1.0f];
        priceTable.layer.cornerRadius = 3;
        
        skListTable = [[UITableView alloc] init];
        skListTable.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        skListTable.dataSource = self;
        skListTable.delegate = self;
        (skListTable.layer).borderWidth = 1.0f;
        skListTable.layer.cornerRadius = 3;
        skListTable.layer.borderColor = [UIColor grayColor].CGColor;
        
        priceArr = [[NSMutableArray alloc]init];
        descArr = [[NSMutableArray alloc]init];
        
        closePriceViewBtn = [[UIButton alloc] init] ;
        [closePriceViewBtn addTarget:self action:@selector(closePriceView:) forControlEvents:UIControlEventTouchUpInside];
        closePriceViewBtn.tag = 11;
        
        UIImage *image = [UIImage imageNamed:@"delete.png"];
        [closePriceViewBtn setBackgroundImage:image    forState:UIControlStateNormal];
        
        
        priceView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
        priceView.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:1.0f];
        // priceView.hidden = YES;
        
        transparentView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
        transparentView.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:0.6f];
        transparentView.hidden = YES;
        
        descLabl = [[UILabel alloc]init];
        descLabl.text = @"Description";
        descLabl.layer.cornerRadius = 14;
        descLabl.textAlignment = NSTextAlignmentCenter;
        descLabl.layer.masksToBounds = YES;
        descLabl.font = [UIFont boldSystemFontOfSize:14.0];
        descLabl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
        descLabl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        descLabl.textColor = [UIColor whiteColor];
        
        mrpLbl = [[UILabel alloc]init];
        mrpLbl.text = @"MRP(RS)";
        mrpLbl.layer.cornerRadius = 14;
        mrpLbl.layer.masksToBounds = YES;
        mrpLbl.textAlignment = NSTextAlignmentCenter;
        mrpLbl.font = [UIFont boldSystemFontOfSize:14.0];
        mrpLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
        mrpLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        mrpLbl.textColor = [UIColor whiteColor];
        
        priceLabl = [[UILabel alloc]init];
        priceLabl.text = @"Price";
        priceLabl.layer.cornerRadius = 14;
        priceLabl.layer.masksToBounds = YES;
        priceLabl.textAlignment = NSTextAlignmentCenter;
        priceLabl.font = [UIFont boldSystemFontOfSize:14.0];
        priceLabl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
        priceLabl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        priceLabl.textColor = [UIColor whiteColor];
        
        
        //    popButton = [UIButton buttonWithType:UIButtonTypeCustom];
        //    [popButton setImage:[UIImage imageNamed:@"emails-letters.png"] forState:UIControlStateNormal];
        //    popButton.frame = CGRectMake(0, 0, 40.0, 40.0);
        //    [popButton addTarget:self action:@selector(popUpView) forControlEvents:UIControlEventTouchUpInside];
        
        //    sendButton =[[UIBarButtonItem alloc]init];
        //    sendButton.customView = popButton;
        //    sendButton.tintColor = [UIColor blackColor];
        
        cardDetailsView = [[UIView alloc] init];
        (cardDetailsView.layer).borderWidth = 1.0f;
        (cardDetailsView.layer).cornerRadius = 8.0f;
        cardDetailsView.hidden = TRUE;
        cardDetailsView.backgroundColor = [UIColor blackColor];
        cardDetailsView.layer.borderColor = [UIColor whiteColor].CGColor;
        cardDetailsView.tag = 88;
        
        cardInfoTxt = [[UITextField alloc] init];
        cardInfoTxt.borderStyle = UITextBorderStyleRoundedRect;
        cardInfoTxt.textColor = [UIColor blackColor];
        cardInfoTxt.font = [UIFont systemFontOfSize:18.0];
        cardInfoTxt.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        cardInfoTxt.text = @"";
        cardInfoTxt.delegate = self;
        cardInfoTxt.placeholder = @"Card Info";
        
        approvalCodeTxt = [[UITextField alloc] init];
        approvalCodeTxt.borderStyle = UITextBorderStyleRoundedRect;
        approvalCodeTxt.textColor = [UIColor blackColor];
        approvalCodeTxt.font = [UIFont systemFontOfSize:18.0];
        approvalCodeTxt.backgroundColor = [UIColor whiteColor];
        approvalCodeTxt.placeholder = @"Approval code";
        approvalCodeTxt.text = @"";
        
        //added by Srinivasulu on 21/11/2017....
        
        cradTypeTxt = [[UITextField alloc] init];
        cradTypeTxt.borderStyle = UITextBorderStyleRoundedRect;
        cradTypeTxt.textColor = [UIColor blackColor];
        cradTypeTxt.font = [UIFont systemFontOfSize:18.0];
        cradTypeTxt.backgroundColor = [UIColor whiteColor];
        cradTypeTxt.placeholder = NSLocalizedString(@"card_type", nil);
        cradTypeTxt.text = @"";
        
        
        //upto here on 21/11/2017....
        
        approvalCodeTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
        approvalCodeTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
        numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
        numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                                 [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
        [numberToolbar1 sizeToFit];
        approvalCodeTxt.inputAccessoryView = numberToolbar1;
        approvalCodeTxt.keyboardType = UIKeyboardTypeNumberPad;
        approvalCodeTxt.delegate = self;
        
        
        
        bankNameTxt = [[UITextField alloc] init];
        
        bankNameTxt.borderStyle = UITextBorderStyleRoundedRect;
        bankNameTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        bankNameTxt.returnKeyType = UIReturnKeyDone;
        bankNameTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
        bankNameTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
        //    phnotext.delegate = self;
        // phnotext.tag = 111;
        bankNameTxt.placeholder = @"Bank Name";
        bankNameTxt.text = @"";
        bankNameTxt.delegate = self;
        
        
        NSArray *segmentLabels = @[@"Billing Details",@"Payment Details",@"Return",@"Exchange"];
        //
        //            if ([billTypeStr caseInsensitiveCompare:NSLocalizedString(@"exchanged_bill", nil)] == NSOrderedSame) {
        //
        //            segmentLabels = [NSArray arrayWithObjects:@"Billing Details",@"Payment Details",@"Return",@"Exchange",NSLocalizedString(@"exchange_transfers", nil), nil];
        //        }
        
        
        mainSegmentedControl = [[UISegmentedControl alloc] initWithItems:segmentLabels];
        
        mainSegmentedControl.tintColor=[UIColor colorWithRed:145.0/255.0 green:145.0/255.0 blue:145.0/255.0 alpha:1.0];
        //        mainSegmentedControl.segmentedControlStyle = UISegmentedControlStyleBar;
        mainSegmentedControl.backgroundColor = [UIColor lightGrayColor];
        
        
        mainSegmentedControl.selectedSegmentIndex = 0;
        [mainSegmentedControl addTarget:self action:@selector(segmentAction1:) forControlEvents:UIControlEventValueChanged];
        
        // assigning a value to check the bill finished ..
        mainSegmentedControl.tag = 0;
        
        /** SearchBar Design */
        
        pastBillField = [[UITextField alloc] init];
        pastBillField.borderStyle = UITextBorderStyleRoundedRect;
        pastBillField.textColor = [UIColor blackColor];
        pastBillField.font = [UIFont systemFontOfSize:18.0];
        pastBillField.backgroundColor = [UIColor clearColor];
        pastBillField.clearButtonMode = UITextFieldViewModeWhileEditing;
        pastBillField.backgroundColor = [UIColor whiteColor];
        pastBillField.autocorrectionType = UITextAutocorrectionTypeNo;
        // pastBillField.backgroundColor = [UIColor whiteColor];
        pastBillField.returnKeyType = UIReturnKeyDone;
        pastBillField.placeholder  = @"Enter your BillId";
        [pastBillField addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        pastBillField.delegate = self;
        
        quickPayBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [quickPayBtn addTarget:self action:@selector(quickPayCall) forControlEvents:UIControlEventTouchUpInside];
        [quickPayBtn setTitle:@"Quick Pay"    forState:UIControlStateNormal];
        quickPayBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        quickPayBtn.titleLabel.textColor = [UIColor whiteColor];
        quickPayBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0f];
        quickPayBtn.backgroundColor = [UIColor grayColor];
        quickPayBtn.layer.cornerRadius = 20.0f;
        
        
        BillField = [[UITextField alloc] init];
        BillField.borderStyle = UITextBorderStyleRoundedRect;
        BillField.textColor = [UIColor blackColor];
        BillField.font = [UIFont systemFontOfSize:18.0];
        BillField.backgroundColor = [UIColor clearColor];
        BillField.clearButtonMode = UITextFieldViewModeWhileEditing;
        BillField.backgroundColor = [UIColor whiteColor];
        BillField.autocorrectionType = UITextAutocorrectionTypeNo;
        // pastBillField.backgroundColor = [UIColor whiteColor];
        BillField.returnKeyType = UIReturnKeyDone;
        BillField.placeholder  = @"Search item";
        [BillField addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        BillField.delegate = self;
        
        /** SearchBar image in same line*/
        barCodeImage = [[UIButton alloc] init];
        [barCodeImage setImage:[UIImage imageNamed:@"open_bill1.PNG"] forState:UIControlStateNormal];
        barCodeImage.backgroundColor = [UIColor clearColor];
        barCodeImage.layer.borderColor = [UIColor grayColor].CGColor;
        barCodeImage.layer.borderWidth = 1.0f;
        barCodeImage.layer.masksToBounds = YES;
        barCodeImage.layer.cornerRadius = 8.0f;
        [barCodeImage addTarget:self action:@selector(barCodeImageClicked:) forControlEvents:UIControlEventTouchDown];
        
        customerName = [[UILabel alloc] init] ;
        customerName.text = @"Customer Name";
        customerName.font = [UIFont boldSystemFontOfSize:14];
        customerName.textColor = [UIColor whiteColor];
        customerName.backgroundColor = [UIColor clearColor];
        customerName.hidden = YES;
        
        customerPhone = [[UILabel alloc] init] ;
        customerPhone.text = @"Customer Phone";
        customerPhone.font = [UIFont boldSystemFontOfSize:14];
        customerPhone.textColor = [UIColor whiteColor];
        customerPhone.backgroundColor = [UIColor clearColor];
        customerPhone.hidden = YES;
        
        paymentType = [[UILabel alloc] init] ;
        paymentType.text = @"Delivery Type";
        paymentType.font = [UIFont boldSystemFontOfSize:14];
        paymentType.textColor = [UIColor whiteColor];
        paymentType.backgroundColor = [UIColor clearColor];
        paymentType.hidden = YES;
        
        paymentTypeVal = [[UILabel alloc] init];
        // paymentTypeVal.text = @"Customer Name";
        paymentTypeVal.font = [UIFont boldSystemFontOfSize:14];
        paymentTypeVal.textColor = [UIColor whiteColor];
        paymentTypeVal.backgroundColor = [UIColor clearColor];
        paymentTypeVal.hidden = YES;
        
        bill_status = [[UILabel alloc] init] ;
        bill_status.text = @"Status";
        bill_status.font = [UIFont boldSystemFontOfSize:14];
        bill_status.textColor = [UIColor whiteColor];
        bill_status.backgroundColor = [UIColor clearColor];
        bill_status.hidden = YES;
        
        bill_status_val = [[UILabel alloc] init] ;
        bill_status_val.text = @"Customer Name";
        bill_status_val.font = [UIFont boldSystemFontOfSize:14];
        bill_status_val.textColor = [UIColor whiteColor];
        bill_status_val.backgroundColor = [UIColor clearColor];
        bill_status_val.hidden = YES;
        
        billID =[[UILabel alloc] init];
        billID.text = @"Bill ID";
        billID.font = [UIFont boldSystemFontOfSize:14];
        billID.textColor = [UIColor whiteColor];
        billID.backgroundColor = [UIColor clearColor];
        billID.hidden = YES;
        
        billDate = [[UILabel alloc] init] ;
        billDate.text = @"Bill Date";
        billDate.font = [UIFont boldSystemFontOfSize:14];
        billDate.textColor = [UIColor whiteColor];
        billDate.backgroundColor = [UIColor clearColor];
        billDate.hidden = YES;
        
        billDone = [[UILabel alloc] init] ;
        billDone.text = @"Bill Done By";
        billDone.font = [UIFont boldSystemFontOfSize:14];
        billDone.textColor = [UIColor whiteColor];
        billDone.backgroundColor = [UIColor clearColor];
        billDone.hidden = YES;
        
        customerNameValue = [[UILabel alloc] init] ;
        if ([billingCustomerName  isEqual: @""]) {
            
            customerNameValue.text = @"--";
        }
        else{
            customerNameValue.text = billingCustomerName;
        }
        //customerNameValue.text = billingCustomerName;
        customerNameValue.font = [UIFont systemFontOfSize:14];
        customerNameValue.textColor = [UIColor whiteColor];
        customerNameValue.backgroundColor = [UIColor clearColor];
        customerNameValue.hidden = YES;
        
        customerPhoneValue = [[UILabel alloc] init] ;
        customerPhoneValue.font = [UIFont systemFontOfSize:14];
        customerPhoneValue.textColor = [UIColor whiteColor];
        customerPhoneValue.backgroundColor = [UIColor clearColor];
        
        paymentTransactionArray = [[NSMutableArray alloc] init];
        
        
        billIDValue = [[UILabel alloc] init] ;
        billIDValue.text = pastBillField.text;
        billIDValue.font = [UIFont systemFontOfSize:14];
        billIDValue.textColor = [UIColor whiteColor];
        billIDValue.backgroundColor = [UIColor clearColor];
        billIDValue.hidden = YES;
        
        billDateValue = [[UILabel alloc] init] ;
        billDateValue.font = [UIFont systemFontOfSize:14];
        billDateValue.textColor = [UIColor whiteColor];
        billDateValue.backgroundColor = [UIColor clearColor];
        billDateValue.hidden = YES;
        
        billDoneValue = [[UILabel alloc] init] ;
        billDoneValue.font = [UIFont systemFontOfSize:14];
        billDoneValue.textColor = [UIColor whiteColor];
        billDoneValue.backgroundColor = [UIColor clearColor];
        billDoneValue.hidden = YES;
        
        curTax = [[UILabel alloc] init] ;
        transeId.hidden = YES;
        
        totalPaymentLbl = [[UILabel alloc] init];
        totalPaymentLbl.text = @"Total Paid";
        totalPaymentLbl.font = [UIFont boldSystemFontOfSize:16];
        totalPaymentLbl.textColor = [UIColor whiteColor];
        totalPaymentLbl.backgroundColor = [UIColor clearColor];
        totalPaymentLbl.hidden = NO;
        
        totalPaymentVal = [[UILabel alloc] init];
        totalPaymentVal.text = @"0.00";
        totalPaymentVal.font = [UIFont boldSystemFontOfSize:16];
        totalPaymentVal.textColor = [UIColor whiteColor];
        totalPaymentVal.backgroundColor = [UIColor clearColor];
        totalPaymentVal.hidden = NO;
        
        giftAmtLbl = [[UILabel alloc] init] ;
        giftAmtLbl.text = @"Gift Voucher/Coupon";
        giftAmtLbl.font = [UIFont boldSystemFontOfSize:14];
        giftAmtLbl.textColor = [UIColor whiteColor];
        giftAmtLbl.backgroundColor = [UIColor clearColor];
        giftAmtLbl.hidden = YES;
        
        giftVoucherTxt = [[UILabel alloc] init] ;
        giftVoucherTxt.text = @"0.00";
        giftVoucherTxt.font = [UIFont boldSystemFontOfSize:14];
        giftVoucherTxt.textColor = [UIColor whiteColor];
        giftVoucherTxt.backgroundColor = [UIColor clearColor];
        giftVoucherTxt.hidden = YES;
        
        /**table header labels */
        label_1 = [[UILabel alloc] init] ;
        label_1.text = @"Sku Id";
        label_1.layer.cornerRadius = 14;
        label_1.textAlignment = NSTextAlignmentCenter;
        label_1.layer.masksToBounds = YES;
        label_1.font = [UIFont boldSystemFontOfSize:14.0];
        label_1.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_1.textColor = [UIColor whiteColor];
        label_1.hidden = YES;
        
        label_2 = [[UILabel alloc] init] ;
        label_2.text = @"Item";
        label_2.layer.cornerRadius = 14;
        label_2.layer.masksToBounds = YES;
        label_2.textAlignment = NSTextAlignmentCenter;
        label_2.font = [UIFont boldSystemFontOfSize:14.0];
        label_2.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_2.textColor = [UIColor whiteColor];
        label_2.hidden = YES;
        
        label_3 = [[UILabel alloc] init] ;
        label_3.text = @"Price";
        label_3.layer.cornerRadius = 14;
        label_3.layer.masksToBounds = YES;
        label_3.textAlignment = NSTextAlignmentCenter;
        label_3.font = [UIFont boldSystemFontOfSize:14.0];
        label_3.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_3.textColor = [UIColor whiteColor];
        label_3.hidden = YES;
        
        label_4 = [[UILabel alloc] init];
        label_4.text = @"Qty";
        label_4.layer.cornerRadius = 14;
        label_4.layer.masksToBounds = YES;
        label_4.textAlignment = NSTextAlignmentCenter;
        label_4.font = [UIFont boldSystemFontOfSize:14.0];
        label_4.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];;
        label_4.textColor = [UIColor whiteColor];
        label_4.hidden = YES;
        
        label_5 = [[UILabel alloc] init] ;
        label_5.text = @"Total";
        label_5.layer.cornerRadius = 14;
        label_5.layer.masksToBounds = YES;
        label_5.textAlignment = NSTextAlignmentCenter;
        label_5.font = [UIFont boldSystemFontOfSize:14.0];
        label_5.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_5.textColor = [UIColor whiteColor];
        label_5.hidden = YES;
        
        itemDiscLbl = [[UILabel alloc] init] ;
        itemDiscLbl.text = @"Disc";
        itemDiscLbl.layer.cornerRadius = 14;
        itemDiscLbl.layer.masksToBounds = YES;
        itemDiscLbl.textAlignment = NSTextAlignmentCenter;
        itemDiscLbl.font = [UIFont boldSystemFontOfSize:14.0];
        itemDiscLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        itemDiscLbl.textColor = [UIColor whiteColor];
        itemDiscLbl.hidden = YES;
        
        label_6 = [[UILabel alloc] init] ;
        label_6.layer.cornerRadius = 14;
        label_6.textAlignment = NSTextAlignmentCenter;
        label_6.layer.masksToBounds = YES;
        label_6.font = [UIFont boldSystemFontOfSize:14.0];
        label_6.backgroundColor = [UIColor colorWithRed:0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_6.textColor = [UIColor whiteColor];
        label_6.hidden = NO;
        
        label_7 = [[UILabel alloc] init];
        label_7.layer.cornerRadius = 14;
        label_7.textAlignment = NSTextAlignmentCenter;
        label_7.layer.masksToBounds = YES;
        label_7.font = [UIFont boldSystemFontOfSize:14.0];
        label_7.backgroundColor = [UIColor colorWithRed:0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_7.textColor = [UIColor whiteColor];
        label_7.hidden = NO;
        
        
        label_8 = [[UILabel alloc] init] ;
        label_8.layer.cornerRadius = 14;
        label_8.numberOfLines = 2;
        label_8.textAlignment = NSTextAlignmentCenter;
        label_8.layer.masksToBounds = YES;
        label_8.font = [UIFont boldSystemFontOfSize:14.0];
        label_8.backgroundColor = [UIColor colorWithRed:0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_8.textColor = [UIColor whiteColor];
        label_8.hidden = NO;
        
        label_9 =[[UILabel alloc] init];
        label_9.layer.cornerRadius = 14;
        label_9.numberOfLines = 2;
        label_9.textAlignment = NSTextAlignmentCenter;
        label_9.layer.masksToBounds = YES;
        label_9.font = [UIFont boldSystemFontOfSize:14.0];
        label_9.backgroundColor = [UIColor colorWithRed:0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_9.textColor = [UIColor whiteColor];
        label_9.hidden = NO;
        
        label_10 = [[UILabel alloc] init] ;
        label_10.layer.cornerRadius = 14;
        label_10.numberOfLines = 2;
        label_10.textAlignment = NSTextAlignmentCenter;
        label_10.layer.masksToBounds = YES;
        label_10.font = [UIFont boldSystemFontOfSize:14.0];
        label_10.backgroundColor = [UIColor colorWithRed:0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_10.textColor = [UIColor whiteColor];
        label_10.hidden = NO;
        
        label_11 = [[UILabel alloc] init];
        label_11.text = @"Item";
        label_11.layer.cornerRadius = 14;
        label_11.numberOfLines = 2;
        label_11.textAlignment = NSTextAlignmentCenter;
        label_11.layer.masksToBounds = YES;
        label_11.font = [UIFont boldSystemFontOfSize:14.0];
        label_11.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_11.textColor = [UIColor whiteColor];
        label_11.hidden = NO;
        
        label_12 = [[UILabel alloc] init];
        label_12.text = @"Date";
        label_12.layer.cornerRadius = 14;
        label_12.numberOfLines = 2;
        label_12.textAlignment = NSTextAlignmentCenter;
        label_12.layer.masksToBounds = YES;
        label_12.font = [UIFont boldSystemFontOfSize:14.0];
        label_12.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_12.textColor = [UIColor whiteColor];
        label_12.hidden = NO;
        
        label_13 = [[UILabel alloc] init];
        label_13.text = @"Price";
        label_13.layer.cornerRadius = 14;
        label_13.numberOfLines = 2;
        label_13.textAlignment = NSTextAlignmentCenter;
        label_13.layer.masksToBounds = YES;
        label_13.font = [UIFont boldSystemFontOfSize:14.0];
        label_13.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_13.textColor = [UIColor whiteColor];
        label_13.hidden = NO;
        
        label_14 = [[UILabel alloc] init];
        label_14.text = @"Cost";
        label_14.layer.cornerRadius = 14;
        label_14.numberOfLines = 2;
        label_14.textAlignment = NSTextAlignmentCenter;
        label_14.layer.masksToBounds = YES;
        label_14.font = [UIFont boldSystemFontOfSize:14.0];
        label_14.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_14.textColor = [UIColor whiteColor];
        label_14.hidden = NO;
        
        label_15 = [[UILabel alloc] init];
        label_15.text = @"Qty";
        label_15.layer.cornerRadius = 14;
        label_15.numberOfLines = 2;
        label_15.textAlignment = NSTextAlignmentCenter;
        label_15.layer.masksToBounds = YES;
        label_15.font = [UIFont boldSystemFontOfSize:14.0];
        label_15.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_15.textColor = [UIColor whiteColor];
        label_15.hidden = NO;
        
        label_16 = [[UILabel alloc] init];
        label_16.text = @"SKU ID";
        label_16.layer.cornerRadius = 14;
        label_16.numberOfLines = 2;
        label_16.textAlignment = NSTextAlignmentCenter;
        label_16.layer.masksToBounds = YES;
        label_16.font = [UIFont boldSystemFontOfSize:14.0];
        label_16.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_16.textColor = [UIColor whiteColor];
        label_16.hidden = NO;
        
        label_17 = [[UILabel alloc] init];
        label_17.text = @"Date";
        label_17.layer.cornerRadius = 14;
        label_17.numberOfLines = 2;
        label_17.textAlignment = NSTextAlignmentCenter;
        label_17.layer.masksToBounds = YES;
        label_17.font = [UIFont boldSystemFontOfSize:14.0];
        label_17.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_17.textColor = [UIColor whiteColor];
        label_17.hidden = NO;
        
        label_18 =[[UILabel alloc] init];
        label_18.text = @"Price";
        label_18.layer.cornerRadius = 14;
        label_18.numberOfLines = 2;
        label_18.textAlignment = NSTextAlignmentCenter;
        label_18.layer.masksToBounds = YES;
        label_18.font = [UIFont boldSystemFontOfSize:14.0];
        label_18.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_18.textColor = [UIColor whiteColor];
        label_18.hidden = NO;
        
        label_19 = [[UILabel alloc] init];
        label_19.text = @"Cost";
        label_19.layer.cornerRadius = 14;
        label_19.numberOfLines = 2;
        label_19.textAlignment = NSTextAlignmentCenter;
        label_19.layer.masksToBounds = YES;
        label_19.font = [UIFont boldSystemFontOfSize:14.0];
        label_19.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_19.textColor = [UIColor whiteColor];
        label_19.hidden = NO;
        
        label_20 = [[UILabel alloc] init];
        label_20.text = @"Qty";
        label_20.layer.cornerRadius = 14;
        label_20.numberOfLines = 2;
        label_20.textAlignment = NSTextAlignmentCenter;
        label_20.layer.masksToBounds = YES;
        label_20.font = [UIFont boldSystemFontOfSize:14.0];
        label_20.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_20.textColor = [UIColor whiteColor];
        label_20.hidden = NO;
        
        subTotalBill =[[UILabel alloc] init];
        subTotalBill.text = @"SubTotal";
        subTotalBill.font = [UIFont boldSystemFontOfSize:14];
        subTotalBill.textColor = [UIColor whiteColor];
        subTotalBill.backgroundColor = [UIColor clearColor];
        subTotalBill.hidden = YES;
        
        taxlbl = [[UILabel alloc] init];
        taxlbl.text = @"Tax ";
        taxlbl.font = [UIFont boldSystemFontOfSize:14];
        taxlbl.textColor = [UIColor whiteColor];
        taxlbl.backgroundColor = [UIColor clearColor];
        taxlbl.hidden = YES;
        
        
        totalBill = [[UILabel alloc] init];
        totalBill.text = @"Total Bill";
        totalBill.font = [UIFont boldSystemFontOfSize:14];
        totalBill.textColor = [UIColor whiteColor];
        totalBill.backgroundColor = [UIColor clearColor];
        totalBill.hidden = YES;
        
        billDue = [[UILabel alloc] init];
        billDue.text = @"Bill Due";
        billDue.font = [UIFont boldSystemFontOfSize:14];
        billDue.textColor = [UIColor whiteColor];
        billDue.backgroundColor = [UIColor clearColor];
        billDue.hidden = YES;
        
        
        billDetails = [[UILabel alloc] init];
        billDetails.font = [UIFont boldSystemFontOfSize:16];
        billDetails.textColor = [UIColor whiteColor];
        billDetails.backgroundColor = [UIColor clearColor];
        billDetails.hidden = YES;
        
        transactionDetails =[[UILabel alloc] init];
        transactionDetails.font = [UIFont boldSystemFontOfSize:16];
        transactionDetails.textColor = [UIColor whiteColor];
        transactionDetails.backgroundColor = [UIColor clearColor];
        transactionDetails.hidden = NO;
        
        returnDetails =[[UILabel alloc] init];
        returnDetails.font = [UIFont boldSystemFontOfSize:16];
        returnDetails.textColor = [UIColor whiteColor];
        returnDetails.backgroundColor = [UIColor clearColor];
        returnDetails.hidden = NO;
        
        exchangeDetails = [[UILabel alloc] init];
        exchangeDetails.font = [UIFont boldSystemFontOfSize:16];
        exchangeDetails.textColor = [UIColor whiteColor];
        exchangeDetails.backgroundColor = [UIColor clearColor];
        exchangeDetails.hidden = NO;
        
        discount = [[UILabel alloc] init];
        discount.font = [UIFont boldSystemFontOfSize:14];
        discount.textColor = [UIColor whiteColor];
        discount.backgroundColor = [UIColor clearColor];
        discount.hidden = YES;
        
        //other discount labels...
        
        otherDiscLbl = [[UILabel alloc] init] ;
        otherDiscLbl.font = [UIFont systemFontOfSize:14];
        otherDiscLbl.textColor = [UIColor whiteColor];
        otherDiscLbl.backgroundColor = [UIColor clearColor];
        otherDiscLbl.hidden = NO;
        
        otherDiscVal = [[UILabel alloc] init] ;
        otherDiscVal.font = [UIFont systemFontOfSize:14];
        otherDiscVal.textColor = [UIColor whiteColor];
        otherDiscVal.backgroundColor = [UIColor clearColor];
        otherDiscVal.hidden = YES;
        
        
        openDetails = [[UIButton alloc] init];
        [openDetails addTarget:self action:@selector(openCloseView:) forControlEvents:UIControlEventTouchUpInside];
        [openDetails setBackgroundImage:[UIImage imageNamed:@"arrow_right.png"] forState:UIControlStateNormal];
        openDetails.hidden = YES;
        
        closeDetails = [[UIButton alloc] init];
        [closeDetails addTarget:self action:@selector(openCloseView:) forControlEvents:UIControlEventTouchUpInside];
        [closeDetails setBackgroundImage:[UIImage imageNamed:@"arrow_down.png"] forState:UIControlStateNormal];
        closeDetails.hidden = YES;
        
        
        // bottombar ..
        NSArray *segmentText1;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            float width = (self.view.frame.size.width + 4) / 11;
            
            UIImage * quickPayImg = [[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * cashPaylImg = [[UIImage imageNamed:@"pay_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * cardPayImg = [[UIImage imageNamed:@"card_pay@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * savePayImg = [[UIImage imageNamed:@"save_bill1-iPhone.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * otherPayImg = [[UIImage imageNamed:@"Bill_Coupens.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * giftCouponImg = [[UIImage imageNamed:@"gift_voucher@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * cerditPayImg = [[UIImage imageNamed:@"credit_note.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * sendSmsImg = [[UIImage imageNamed:@"sms_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * sendEmailImg = [[UIImage imageNamed:@"email_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * printBillImg = [[UIImage imageNamed:@"save_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            UIImage * newBillImg = [[UIImage imageNamed:@"new_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
            
            
            quickPayImg = [[self  imageFromImage:[UIImage imageNamed:@"FastBill.png"]
                            imageBackGroundColor:[UIColor blackColor]
                                          string:NSLocalizedString(@"quick_pay", nil)
                                           color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                            font:16
                                           width:width
                                          height:16
                                        fontType:TEXT_FONT_NAME
                                      imageWidth:40
                                     imageHeight:40] imageWithRenderingMode:
                           UIImageRenderingModeAlwaysOriginal];
            
            cashPaylImg = [[self  imageFromImage:[UIImage imageNamed:@"pay_bill@2x.png"]
                            imageBackGroundColor:[UIColor blackColor]
                                          string:NSLocalizedString(@"cash_pay", nil)
                                           color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                            font:16
                                           width:width
                                          height:16
                                        fontType:TEXT_FONT_NAME
                                      imageWidth:40
                                     imageHeight:40] imageWithRenderingMode:
                           UIImageRenderingModeAlwaysOriginal];
            
            cardPayImg = [[self  imageFromImage:[UIImage imageNamed:@"card_pay@2x.png"]
                           imageBackGroundColor:[UIColor blackColor]
                                         string:NSLocalizedString(@"card_pay", nil)
                                          color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                           font:16
                                          width:width
                                         height:16
                                       fontType:TEXT_FONT_NAME
                                     imageWidth:40
                                    imageHeight:40] imageWithRenderingMode:
                          UIImageRenderingModeAlwaysOriginal];
            
            savePayImg = [[self  imageFromImage:[UIImage imageNamed:@"save_bill1@2x.png"]
                           imageBackGroundColor:[UIColor blackColor]
                                         string:NSLocalizedString(@"save_bill", nil)
                                          color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                           font:16
                                          width:width
                                         height:16
                                       fontType:TEXT_FONT_NAME
                                     imageWidth:40
                                    imageHeight:40] imageWithRenderingMode:
                          UIImageRenderingModeAlwaysOriginal];
            
            otherPayImg = [[self  imageFromImage:[UIImage imageNamed:@"Bill_Coupens.png"]
                            imageBackGroundColor:[UIColor blackColor]
                                          string:NSLocalizedString(@"other_pay", nil)
                                           color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                            font:16
                                           width:width
                                          height:16
                                        fontType:TEXT_FONT_NAME
                                      imageWidth:40
                                     imageHeight:40] imageWithRenderingMode:
                           UIImageRenderingModeAlwaysOriginal];
            
            
            giftCouponImg = [[self  imageFromImage:[UIImage imageNamed:@"gift_voucher@2x.png"]
                              imageBackGroundColor:[UIColor blackColor]
                                            string:NSLocalizedString(@"gift_cpn", nil)
                                             color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                              font:16
                                             width:width
                                            height:16
                                          fontType:TEXT_FONT_NAME
                                        imageWidth:40
                                       imageHeight:40] imageWithRenderingMode:
                             UIImageRenderingModeAlwaysOriginal];
            
            cerditPayImg = [[self  imageFromImage:[UIImage imageNamed:@"credit_note.png"]
                             imageBackGroundColor:[UIColor blackColor]
                                           string:NSLocalizedString(@"credit_note", nil)
                                            color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                             font:16
                                            width:width
                                           height:16
                                         fontType:TEXT_FONT_NAME
                                       imageWidth:40
                                      imageHeight:40] imageWithRenderingMode:
                            UIImageRenderingModeAlwaysOriginal];
            
            sendSmsImg = [[self  imageFromImage:[UIImage imageNamed:@"sms_bill@2x.png"]
                           imageBackGroundColor:[UIColor blackColor]
                                         string:NSLocalizedString(@"send_sms", nil)
                                          color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                           font:16
                                          width:width
                                         height:16
                                       fontType:TEXT_FONT_NAME
                                     imageWidth:40
                                    imageHeight:40] imageWithRenderingMode:
                          UIImageRenderingModeAlwaysOriginal];
            
            sendEmailImg = [[self  imageFromImage:[UIImage imageNamed:@"email_bill@2x.png"]
                             imageBackGroundColor:[UIColor blackColor]
                                           string:NSLocalizedString(@"send_email", nil)
                                            color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                             font:16
                                            width:width
                                           height:16
                                         fontType:TEXT_FONT_NAME
                                       imageWidth:40
                                      imageHeight:40] imageWithRenderingMode:
                            UIImageRenderingModeAlwaysOriginal];
            
            printBillImg = [[self  imageFromImage:[UIImage imageNamed:@"save_bill@2x.png"]
                             imageBackGroundColor:[UIColor blackColor]
                                           string:NSLocalizedString(@"print_bill", nil)
                                            color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                             font:16
                                            width:width
                                           height:16
                                         fontType:TEXT_FONT_NAME
                                       imageWidth:40
                                      imageHeight:40] imageWithRenderingMode:
                            UIImageRenderingModeAlwaysOriginal];
            
            newBillImg = [[self  imageFromImage:[UIImage imageNamed:@"new_bill@2x.png"]
                           imageBackGroundColor:[UIColor blackColor]
                                         string:NSLocalizedString(@"new_bill", nil)
                                          color:[UIColor whiteColor]
                                           font:16
                                          width:width
                                         height:16
                                       fontType:TEXT_FONT_NAME
                                     imageWidth:40
                                    imageHeight:40] imageWithRenderingMode:
                          UIImageRenderingModeAlwaysOriginal];
            
            //            segmentText1 = [NSArray arrayWithObjects:
            //                            [[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            [[UIImage imageNamed:@"pay_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            [[UIImage imageNamed:@"card_pay@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            [[UIImage imageNamed:@"Bill_Coupens.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            [[UIImage imageNamed:@"gift_voucher@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            [[UIImage imageNamed:@"save_bill1-iPhone.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            [[UIImage imageNamed:@"credit_note.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            [[UIImage imageNamed:@"sms_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            [[UIImage imageNamed:@"email_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            [[UIImage imageNamed:@"save_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //                            //[UIImage imageNamed:@"gift_voucher@2x.png"],
            //
            //                            //addded on 17/04/2018....
            //                            [[UIImage imageNamed:@"new_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
            //
            //                            nil];
            
            
            segmentText1 = @[quickPayImg,cashPaylImg,cardPayImg,savePayImg,otherPayImg,giftCouponImg,cerditPayImg, sendSmsImg,sendEmailImg,printBillImg,newBillImg];
        }
        else{
            if (version >= 8.0) {
                segmentText1 = @[[[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                                 [[UIImage imageNamed:@"pay_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                                 [[UIImage imageNamed:@"card_pay@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                                 [[UIImage imageNamed:@"Bill_Coupens.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                                 [[UIImage imageNamed:@"gift_voucher@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                                 [[UIImage imageNamed:@"save_bill1-iPhone.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                                 [[UIImage imageNamed:@"sms_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                                 [[UIImage imageNamed:@"email_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                                 [[UIImage imageNamed:@"save_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                                 //[UIImage imageNamed:@"gift_voucher@2x.png"],
                                 //addded on 17/04/2018....
                                 [[UIImage imageNamed:@"new_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]];
            }
            else{
                segmentText1 = @[[UIImage imageNamed:@"pay_bill(30_30).png"],
                                 [UIImage imageNamed:@"card_bill(30_30).png"],
                                 [UIImage imageNamed:@"sms_bill-iPhone.png"],
                                 [UIImage imageNamed:@"email_bill(30_30)1.png"],
                                 [UIImage imageNamed:@"print_bill(30_30).png"]];
            }
            
        }
        //segmentedControl = [[UISegmentedControl alloc] initWithItems:[NSArray arrayWithObjects:                                                                  @"cash",@"sms",@"email",@"print",@"gift",                                                                  nil]];
        segmentedControl = [[UISegmentedControl alloc] initWithItems:segmentText1];
        
        segmentedControl.tintColor=[UIColor clearColor];
        //segmentedControl.autoresizingMask = UIViewAutoresizingFlexibleWidth;
        //        segmentedControl.segmentedControlStyle = UISegmentedControlStyleBar;
        segmentedControl.backgroundColor = [UIColor blackColor];
        [segmentedControl addTarget:self action:@selector(segmentAction:) forControlEvents:UIControlEventValueChanged];
        // assigning a value to check the bill finished ..
        segmentedControl.tag = 0;
        
        
        
        phoneNumberText = [[CustomTextField alloc] init];
        
        phoneNumberText.borderStyle = UITextBorderStyleRoundedRect;
        phoneNumberText.autocorrectionType = UITextAutocorrectionTypeNo;
        phoneNumberText.keyboardType = UIKeyboardTypeDefault;
        phoneNumberText.returnKeyType = UIReturnKeyDone;
        phoneNumberText.clearButtonMode = UITextFieldViewModeWhileEditing;
        phoneNumberText.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
        phoneNumberText.delegate = self;
        phoneNumberText.placeholder = @"Phone Number";
        phoneNumberText.hidden = NO;
        
        // intialize the View for segmeneted controller ..
        
        paymentView = [[UIView alloc] init];
        smsView     = [[UIView alloc] init];
        mailView    = [[UIView alloc] init];
        printView   = [[UIView alloc] init];
        
        (paymentView.layer).borderWidth = 1.0f;
        (smsView.layer).borderWidth = 1.0f;
        (mailView.layer).borderWidth = 1.0f;
        (printView.layer).borderWidth = 1.0f;
        (giftView.layer).borderWidth = 1.0f;
        
        (paymentView.layer).cornerRadius = 4.0f;
        (smsView.layer).cornerRadius = 4.0f;
        (mailView.layer).cornerRadius = 4.0f;
        (printView.layer).cornerRadius = 4.0f;
        (giftView.layer).cornerRadius = 4.0f;
        
        paymentView.backgroundColor = [UIColor whiteColor];
        smsView.backgroundColor = [UIColor whiteColor];
        mailView.backgroundColor = [UIColor whiteColor];
        printView.backgroundColor = [UIColor whiteColor];
        
        paymentView.hidden = TRUE;
        smsView.hidden = TRUE;
        mailView.hidden = TRUE;
        printView.hidden = TRUE;
        giftView.hidden = TRUE;
        
        // Intializing drop down table ..
        salesIdTable = [[UITableView alloc] init];
        salesIdTable.layer.borderWidth = 1.0;
        salesIdTable.layer.cornerRadius = 4.0;
        salesIdTable.layer.borderColor = [UIColor grayColor].CGColor;
        salesIdTable.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        salesIdTable.dataSource = self;
        salesIdTable.delegate = self;
        salesIdTable.hidden = YES;
        
        /** UIScrollView Design */
        
        billingScrollView = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        billingScrollView.backgroundColor = [UIColor clearColor];
        billingScrollView.bounces = FALSE;
        billingScrollView.hidden = NO;
        billingScrollView.scrollEnabled = FALSE;
        
        
        paymentScrollView = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        paymentScrollView.backgroundColor = [UIColor clearColor];
        paymentScrollView.bounces = FALSE;
        paymentScrollView.hidden = YES;
        paymentScrollView.scrollEnabled = FALSE;
        
        exchangeScrollView = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        exchangeScrollView.backgroundColor = [UIColor clearColor];
        exchangeScrollView.bounces = FALSE;
        exchangeScrollView.hidden = YES;
        
        returnScrollView = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        returnScrollView.backgroundColor = [UIColor clearColor];
        returnScrollView.bounces = FALSE;
        returnScrollView.hidden = YES;
        returnScrollView.scrollEnabled = NO;
        
        
        scrollView = [[UIScrollView alloc] init];
        scrollView.bounces = FALSE;    scrollView.hidden = YES;
        scrollView.backgroundColor = [UIColor clearColor];
        
        selectedSaleIdTable = [[UITableView alloc] init];
        selectedSaleIdTable.hidden = YES;
        selectedSaleIdTable.backgroundColor = [UIColor clearColor];
        selectedSaleIdTable.layer.borderColor = [UIColor grayColor].CGColor;
        
        //selectedSaleIdTable.layer.borderWidth = 1.0f;
        selectedSaleIdTable.bounces = TRUE;
        selectedSaleIdTable.dataSource = self;
        selectedSaleIdTable.delegate = self;
        
        scrollView1 = [[UIScrollView alloc] init];
        scrollView1.bounces = FALSE;
        scrollView1.hidden = NO;
        scrollView1.backgroundColor = [UIColor clearColor];
        
        paymentDetailsTable = [[UITableView alloc] init];
        paymentDetailsTable.backgroundColor = [UIColor clearColor];
        paymentDetailsTable.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
        paymentDetailsTable.layer.borderColor = [UIColor grayColor].CGColor;
        
        //selectedSaleIdTable.layer.borderWidth = 1.0f;
        paymentDetailsTable.bounces = FALSE;
        paymentDetailsTable.dataSource = self;
        paymentDetailsTable.delegate = self;
        
        scrollView2 = [[UIScrollView alloc] init];
        scrollView2.bounces = FALSE;
        scrollView2.hidden = NO;
        scrollView2.backgroundColor = [UIColor clearColor];
        
        returnDetailsTable = [[UITableView alloc] init];
        returnDetailsTable.backgroundColor = [UIColor clearColor];
        returnDetailsTable.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
        returnDetailsTable.layer.borderColor = [UIColor grayColor].CGColor;
        
        //selectedSaleIdTable.layer.borderWidth = 1.0f;
        returnDetailsTable.bounces = FALSE;
        returnDetailsTable.dataSource = self;
        returnDetailsTable.delegate = self;
        
        scrollView3 = [[UIScrollView alloc] init];
        scrollView3.bounces = FALSE;
        scrollView3.hidden = NO;
        scrollView3.backgroundColor = [UIColor clearColor];
        
        changeStatusBtn = [[UIButton alloc] init] ;
        [changeStatusBtn setBackgroundImage:[UIImage imageNamed:@"BillStatus.png"] forState:UIControlStateNormal];
        [changeStatusBtn addTarget:self action:@selector(changeDoorDelStatus) forControlEvents:UIControlEventTouchUpInside];
        changeStatusBtn.tag = 11;
        
        exchangeDetailsTable = [[UITableView alloc] init];
        exchangeDetailsTable.backgroundColor = [UIColor clearColor];
        exchangeDetailsTable.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
        exchangeDetailsTable.layer.borderColor = [UIColor grayColor].CGColor;
        
        //selectedSaleIdTable.layer.borderWidth = 1.0f;
        exchangeDetailsTable.bounces = FALSE;
        exchangeDetailsTable.dataSource = self;
        exchangeDetailsTable.delegate = self;
        
        // Override point for customization after application launch
        NSArray *options =@[@"   Pay Cash"];
        
        group =[[MIRadioButtonGroup alloc] initWithFrame:CGRectMake(5, 50, 150, 120) andOptions:options andColumns:1];
        
        
        //Initialize filteredSkuArrayList ....
        filteredSkuArrayList = [[NSMutableArray alloc] init];
        cartItem = [[NSMutableArray alloc] init];
        availQtyArr = [[NSMutableArray alloc]init];
        giftVoucherArr = [[NSMutableArray alloc] init];
        
        
        //added by Srinivasulu on 24/03/2018....
        
        billEnterRemarksLbl = [[UILabel alloc] init] ;
        billEnterRemarksLbl.text = NSLocalizedString(@"remarks", nil);
        billEnterRemarksLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
        billEnterRemarksLbl.backgroundColor = [UIColor clearColor];
        billEnterRemarksLbl.textColor = [UIColor whiteColor];
        
        billRemarksTextView = [[UITextView alloc] init];
        billRemarksTextView.layer.borderColor = [UIColor grayColor].CGColor;
        billRemarksTextView.layer.borderWidth = 2.0f;
        billRemarksTextView.layer.cornerRadius = 10.0f;
        billRemarksTextView.textColor = [UIColor whiteColor];
        billRemarksTextView.backgroundColor = [UIColor clearColor];
        billRemarksTextView.userInteractionEnabled = NO;
        
        //upto here on 24/03/2018....
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            //topbar.frame = CGRectMake(0, 0, 320, 31);
            //        img.frame = CGRectMake(0, 0, 778, 50);
            //        label.font = [UIFont boldSystemFontOfSize:25];
            //        label.frame = CGRectMake(10, 5, 240, 40);
            
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                
                mainBackbutton.frame = CGRectMake(710.0, 5.0, 40.0, 40.0);
                
                pastBillField.font = [UIFont boldSystemFontOfSize:20];
                pastBillField.frame = CGRectMake(430,90, 540, 40);
                //            quickPayBtn.frame = CGRectMake(750.0, 65, 250.0, 40.0);
                
                BillField.frame = CGRectMake(450, 0, 480, 40);
                BillField.font = [UIFont boldSystemFontOfSize:20];
                
                //                billingScrollView.backgroundColor = [UIColor redColor];
                //changed by Srinivasulu due to remarks field adjustment...
                //                billingScrollView.frame = CGRectMake(0, 90, self.view.frame.size.width,550);
                billingScrollView.frame = CGRectMake(0, 60, self.view.frame.size.width,580);
                billingScrollView.contentSize = CGSizeMake(self.view.frame.size.width, 1000.0);
                
                paymentScrollView.frame = CGRectMake(0, 70, self.view.frame.size.width, 800);
                paymentScrollView.contentSize = CGSizeMake(self.view.frame.size.width, 1000.0);
                
                
                exchangeScrollView.frame = CGRectMake(550, 80, self.view.frame.size.width, 800.0);
                exchangeScrollView.contentSize = CGSizeMake(self.view.frame.size.width,1000);
                //  exchangeScrollView.backgroundColor = [UIColor purpleColor];
                
                returnScrollView.frame = CGRectMake(550, 80, self.view.frame.size.width, 300);
                returnScrollView.contentSize = CGSizeMake(self.view.frame.size.width,1000);
                
                
                billDetails.frame = CGRectMake(320, 0, 300, 30);
                billDetails.font = [UIFont boldSystemFontOfSize:25];
                
                customerName.font = [UIFont boldSystemFontOfSize:18];
                customerName.frame = CGRectMake(billingScrollView.frame.origin.x+20, 0, 180, 28);
                
                customerNameValue.font = [UIFont boldSystemFontOfSize:18];
                customerNameValue.frame = CGRectMake(240, customerName.frame.origin.y, 300, customerName.frame.size.height);
                
                customerPhone.font = [UIFont boldSystemFontOfSize:20];
                customerPhone.frame = CGRectMake( 20, customerName.frame.origin.y+customerName.frame.size.height, 180, customerName.frame.size.height);
                
                customerPhoneValue.font = [UIFont boldSystemFontOfSize:20];
                customerPhoneValue.frame = CGRectMake(240,customerPhone.frame.origin.y, 300, customerName.frame.size.height);
                
                
                billID.font = [UIFont boldSystemFontOfSize:18];
                billID.frame = CGRectMake(20,customerPhone.frame.origin.y+customerPhone.frame.size.height,180, customerName.frame.size.height);
                
                billIDValue.font = [UIFont boldSystemFontOfSize:18];
                billIDValue.frame = CGRectMake(240,billID.frame.origin.y,300, customerName.frame.size.height);
                
                
                billDate.font = [UIFont boldSystemFontOfSize:18];
                billDate.frame = CGRectMake(20,billID.frame.origin.y + billID.frame.size.height,180, customerName.frame.size.height);
                
                
                billDateValue.font = [UIFont boldSystemFontOfSize:18];
                billDateValue.frame = CGRectMake(240,billDate.frame.origin.y,300, customerName.frame.size.height);
                
                
                
                billDone.font = [UIFont boldSystemFontOfSize:18];
                billDone.frame = CGRectMake(20,billDate.frame.origin.y+billDate.frame.size.height,180, customerName.frame.size.height);
                
                billDoneValue.font = [UIFont boldSystemFontOfSize:18];
                billDoneValue.frame = CGRectMake(240,billDone.frame.origin.y,220, customerName.frame.size.height);
                
                paymentType.font = [UIFont boldSystemFontOfSize:18];
                paymentType.frame = CGRectMake(20,billDone.frame.origin.y+billDone.frame.size.height,180, customerName.frame.size.height);
                
                paymentTypeVal.font = [UIFont boldSystemFontOfSize:18];
                paymentTypeVal.frame = CGRectMake(240,paymentType.frame.origin.y,220, customerName.frame.size.height);
                
                bill_status.font = [UIFont boldSystemFontOfSize:18];
                bill_status.frame = CGRectMake(20,paymentType.frame.origin.y+paymentType.frame.size.height,180, customerName.frame.size.height);
                
                bill_status_val.font = [UIFont boldSystemFontOfSize:18];
                bill_status_val.frame = CGRectMake(240,bill_status.frame.origin.y,220, customerName.frame.size.height);
                //
                
#pragma mark end of labels frame 1:
                
                changeStatusBtn.frame = CGRectMake(240, bill_status.frame.origin.y+bill_status.frame.size.height, 50, 35);
                customerDetails.frame = CGRectMake(20,bill_status.frame.origin.y+bill_status.frame.size.height,220, customerName.frame.size.height);
                customerDetailsVal.frame = CGRectMake(240,bill_status.frame.origin.y+bill_status.frame.size.height,220, customerName.frame.size.height);
                
                
                label_1.font = [UIFont boldSystemFontOfSize:18];
                label_1.frame = CGRectMake(pastBillField.frame.origin.x, pastBillField.frame.origin.y+pastBillField.frame.size.height+15, 90, 40);
                label_1.layer.cornerRadius = 10;
                
                label_2.font = [UIFont boldSystemFontOfSize:18];
                label_2.frame = CGRectMake(label_1.frame.origin.x+label_1.frame.size.width+2, label_1.frame.origin.y, 90, 40);
                label_2.layer.cornerRadius = 10;
                
                label_3.font = [UIFont boldSystemFontOfSize:18];
                label_3.frame = CGRectMake(label_2.frame.origin.x+label_2.frame.size.width+2, label_1.frame.origin.y, 90, 40);
                label_3.layer.cornerRadius = 10;
                
                label_4.font = [UIFont boldSystemFontOfSize:18];
                label_4.frame = CGRectMake(label_3.frame.origin.x+label_3.frame.size.width+2, label_1.frame.origin.y, 80, 40);
                label_4.layer.cornerRadius = 10;
                
                itemDiscLbl.font = [UIFont boldSystemFontOfSize:18];
                itemDiscLbl.frame = CGRectMake(label_4.frame.origin.x+label_4.frame.size.width+2, label_1.frame.origin.y, 90, 40);
                itemDiscLbl.layer.cornerRadius = 10;
                
                label_5.font = [UIFont boldSystemFontOfSize:18];
                label_5.frame = CGRectMake(itemDiscLbl.frame.origin.x+itemDiscLbl.frame.size.width+2, label_1.frame.origin.y, 90, 40);
                label_5.layer.cornerRadius = 10;
                
                
                
                label_6.frame = CGRectMake(22, 90, 150, 30);
                label_6.font = [UIFont boldSystemFontOfSize:18];
                label_6.layer.cornerRadius = 10;
                
                label_7.frame = CGRectMake(182, 90, 150, 30);
                label_7.font = [UIFont boldSystemFontOfSize:18];
                label_7.layer.cornerRadius = 10;
                
                label_8.frame = CGRectMake(342, 90, 150, 30);
                label_8.font = [UIFont boldSystemFontOfSize:18];
                label_8.layer.cornerRadius = 10;
                
                label_9.frame = CGRectMake(502, 90, 150, 30);
                label_9.font = [UIFont boldSystemFontOfSize:18];
                label_9.layer.cornerRadius = 10;
                
                label_10.frame = CGRectMake(662, 90, 150, 30);
                label_10.font = [UIFont boldSystemFontOfSize:18];
                label_10.layer.cornerRadius = 10;
                
                label_11.font = [UIFont boldSystemFontOfSize:18];
                label_11.frame = CGRectMake(0, 40, 90, 30);
                label_11.layer.cornerRadius = 10;
                
                
                label_12.font = [UIFont boldSystemFontOfSize:18];
                label_12.frame = CGRectMake(95, 40, 90, 30);
                label_12.layer.cornerRadius = 10;
                
                label_13.font = [UIFont boldSystemFontOfSize:18];
                label_13.frame = CGRectMake(190, 40, 90, 30);
                label_13.layer.cornerRadius = 10;
                
                label_14.font = [UIFont boldSystemFontOfSize:18];
                label_14.frame = CGRectMake(380, 40, 90, 30);
                label_14.layer.cornerRadius = 10;
                
                label_15.font = [UIFont boldSystemFontOfSize:18];
                label_15.frame = CGRectMake(285, 40, 90, 30);
                label_15.layer.cornerRadius = 10;
                
                
                label_16.font = [UIFont boldSystemFontOfSize:18];
                label_16.frame = CGRectMake(0, 40, 90, 30);
                label_16.layer.cornerRadius = 10;
                
                
                label_17.font = [UIFont boldSystemFontOfSize:18];
                label_17.frame = CGRectMake(95, 40, 90, 30);
                label_17.layer.cornerRadius = 10;
                
                label_18.font = [UIFont boldSystemFontOfSize:18];
                label_18.frame = CGRectMake(190, 40, 90, 30);
                label_18.layer.cornerRadius = 10;
                
                label_19.font = [UIFont boldSystemFontOfSize:18];
                label_19.frame = CGRectMake(380, 40, 90, 30);
                label_19.layer.cornerRadius = 10;
                
                label_20.font = [UIFont boldSystemFontOfSize:18];
                label_20.frame = CGRectMake(285, 40, 90, 30);
                label_20.layer.cornerRadius = 10;
                
                
                
#pragma mark gift:
                
                giftAmtLbl.frame = CGRectMake(20,customerDetails.frame.origin.y+customerDetails.frame.size.height+10,220, customerName.frame.size.height);
                giftAmtLbl.font = [UIFont boldSystemFontOfSize:18];
                
                giftVoucherTxt.frame = CGRectMake(240,giftAmtLbl.frame.origin.y ,220, customerName.frame.size.height);
                giftVoucherTxt.font = [UIFont boldSystemFontOfSize:18];
                
                discount.frame = CGRectMake(20,giftAmtLbl.frame.origin.y+giftAmtLbl.frame.size.height,220, customerName.frame.size.height);
                discount.font = [UIFont boldSystemFontOfSize:18];
                
                subTotalBill.frame = CGRectMake(20,discount.frame.origin.y+discount.frame.size.height,180, customerName.frame.size.height);
                subTotalBill.font = [UIFont boldSystemFontOfSize:18];
                
                //changed by Srinivasulu on 11/08/2017....
                
                taxlbl.frame = CGRectMake(20,subTotalBill.frame.origin.y+subTotalBill.frame.size.height, 180, 70);
                taxlbl.font = [UIFont boldSystemFontOfSize:18];
                
                totalBill.font = [UIFont boldSystemFontOfSize:18];
                totalBill.frame = CGRectMake(20,taxlbl.frame.origin.y+taxlbl.frame.size.height,180, customerName.frame.size.height);
                
                transactionDetails.frame = CGRectMake(300.0, 30.0, 300.0, 30.0);
                transactionDetails.font = [UIFont boldSystemFontOfSize:25];
                
                
                returnDetails.frame = CGRectMake(170, 0, 200.0, 30);
                returnDetails.font = [UIFont boldSystemFontOfSize:25];
                
                //changed by Srinivasulu on 16/10/2017.....
                //                exchangeDetails.frame = CGRectMake( 550,60, 200.0, 50.0);
                exchangeDetails.frame = CGRectMake( 170, 0, 260.0, 30);
                
                //upto here on 16/10/2017....
                
                exchangeDetails.font = [UIFont boldSystemFontOfSize:25];
                
                
                mainSegmentedControl.frame = CGRectMake( -2, 0, self.view.frame.size.width + 10, 60);
                mainSegmentedControl.tintColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
                mainSegmentedControl.backgroundColor = [UIColor clearColor];
                NSDictionary *attributes = @{UITextAttributeFont: [UIFont boldSystemFontOfSize:20],UITextAttributeTextColor: [UIColor whiteColor]};
                [mainSegmentedControl setTitleTextAttributes:attributes forState:UIControlStateNormal];
                
                segmentedControl.backgroundColor = [UIColor blackColor];
                segmentedControl.frame = CGRectMake(-6,650,self.view.frame.size.width+20,40);
                
                
                scrollView.frame = CGRectMake(450, 90, 778, 350);
                scrollView.contentSize = CGSizeMake(778, 500);
                
                scrollView1.frame = CGRectMake(0, 150, self.view.frame.size.width-100, 300);
                scrollView1.contentSize = CGSizeMake(self.view.frame.size.width-100, 500);
                
                
                scrollView2.frame = CGRectMake(0, 80, 800, 120);
                scrollView2.contentSize = CGSizeMake(800, 500);
                
                scrollView3.frame = CGRectMake(0, 80, 800, 120);
                scrollView3.contentSize = CGSizeMake(800, 500);
                
                paymentDetailsTable.frame = CGRectMake(12, 0, self.view.frame.size.width-100, 300);
                totalPaymentLbl.frame = CGRectMake(150, 510, 150, 30);
                totalPaymentLbl.font =  [UIFont boldSystemFontOfSize:20];
                totalPaymentVal.frame = CGRectMake(720, 510, 200, 30);
                totalPaymentVal.font =  [UIFont boldSystemFontOfSize:20];
                
#pragma mark selectedSalesId table frame for the iPad
                
                //            modified by bhargav:
                selectedSaleIdTable.frame = CGRectMake(pastBillField.frame.origin.x, label_1.frame.origin.y+label_1.frame.size.height+5, 750, 350);
                
#pragma mark salesId table frame for the iPad:
                //            modified by bhargav:
                salesIdTable.frame = CGRectMake(pastBillField.frame.origin.x, pastBillField.frame.origin.y+pastBillField.frame.size.height+5, pastBillField.frame.size.width, 200);
                //
                returnDetailsTable.frame = CGRectMake(0, 0, scrollView2.frame.size.width-80, scrollView2.frame.size.height);
                exchangeDetailsTable.frame = CGRectMake(0, 0, scrollView3.frame.size.width-80, scrollView3.frame.size.height);
                
                group.frame = CGRectMake(20, 100, 758, 340);
                
                priceView.frame = CGRectMake(280, 30, 480,400);
                priceView.layer.borderColor = [UIColor whiteColor].CGColor;
                priceView.layer.borderWidth = 1.0;
                descLabl.frame = CGRectMake(30, 5, 250, 30);
                descLabl.font = [UIFont systemFontOfSize:20.0];
                priceLabl.frame = CGRectMake(300, 5, 180, 30);
                priceLabl.font = [UIFont systemFontOfSize:20.0];
                transparentView.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
                priceTable.frame = CGRectMake(0, 40, 480, 400);
                closePriceViewBtn.frame = CGRectMake(770, 0, 40, 40);
                giftTypeTableView.frame = CGRectMake(300, 110, 300, 160);
                
                priceView.frame = CGRectMake(200, 30, 550,400);
                priceView.layer.borderColor = [UIColor whiteColor].CGColor;
                priceView.layer.borderWidth = 1.0;
                descLabl.frame = CGRectMake(30, 5, 200, 30);
                mrpLbl.frame = CGRectMake(280.0, 5, 120, 30);
                priceLabl.frame = CGRectMake(410.0, 5, 120, 30);
                transparentView.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
                priceTable.frame = CGRectMake(0, 40, 550, 400);
                closePriceViewBtn.frame = CGRectMake(770, 0, 40, 40);
                
                
                //added by Srinivasulu on 24/03/2018....
                
                otherDiscLbl.frame = CGRectMake(20,totalBill.frame.origin.y+totalBill.frame.size.height,150, customerName.frame.size.height);
                otherDiscLbl.font = [UIFont boldSystemFontOfSize:18];
                
                otherDiscVal.frame = CGRectMake(240,otherDiscLbl.frame.origin.y,150, customerName.frame.size.height);
                otherDiscVal.font = [UIFont boldSystemFontOfSize:18];
                
                
                billDue.font = [UIFont boldSystemFontOfSize:18];
                billDue.frame = CGRectMake(20,otherDiscLbl.frame.origin.y+otherDiscLbl.frame.size.height,180, customerName.frame.size.height);
                
                
                billDueValue.font = [UIFont boldSystemFontOfSize:18];
                billDueValue.frame = CGRectMake(240,billDue.frame.origin.y,150, customerName.frame.size.height);
                
                billEnterRemarksLbl.font = [UIFont boldSystemFontOfSize:18];
                billEnterRemarksLbl.frame = CGRectMake( billDue.frame.origin.x, billDue.frame.origin.y + billDue.frame.size.height, billDue.frame.size.width, billDue.frame.size.height);
                
                billRemarksTextView.font = [UIFont boldSystemFontOfSize:18];
                billRemarksTextView.frame = CGRectMake( billEnterRemarksLbl.frame.origin.x, billEnterRemarksLbl.frame.origin.y + billEnterRemarksLbl.frame.size.height, billEnterRemarksLbl.frame.size.width  * 2, billingScrollView.frame.size.height - (billEnterRemarksLbl.frame.origin.y + billEnterRemarksLbl.frame.size.height));
                
                //upto here on 24/03/2018....
            }
            else {
                mainBackbutton.frame = CGRectMake(710.0, 5.0, 40.0, 40.0);
                
                
                pastBillField.font = [UIFont boldSystemFontOfSize:30];
                pastBillField.frame = CGRectMake(160, 65, 360, 52);
                
                billingScrollView.frame = CGRectMake(0, 127.0, 778, 800.0);
                billingScrollView.contentSize = CGSizeMake(778, 1000.0);
                paymentScrollView.frame = CGRectMake(0, 70, 778, 800);
                paymentScrollView.contentSize = CGSizeMake(778, 1000.0);
                exchangeScrollView.frame = CGRectMake(0, 70, 778, 800.0);
                exchangeScrollView.contentSize = CGSizeMake(778,1000);
                returnScrollView.frame = CGRectMake(0, 590, 778, 300);
                returnScrollView.contentSize = CGSizeMake(778,1000);
                
                
                
                customerName.font = [UIFont boldSystemFontOfSize:20];
                customerName.frame = CGRectMake(20,0, 180, 50);
                customerNameValue.font = [UIFont boldSystemFontOfSize:20];
                customerNameValue.frame = CGRectMake(300, 0, 300, 50);
                
                customerPhone.font = [UIFont boldSystemFontOfSize:20];
                customerPhone.frame = CGRectMake(20,35, 180, 50);
                customerPhoneValue.font = [UIFont boldSystemFontOfSize:20];
                customerPhoneValue.frame = CGRectMake(300,35, 300, 50);
                
                billID.font = [UIFont boldSystemFontOfSize:20];
                billID.frame = CGRectMake(20,75,180,50);
                billDate.font = [UIFont boldSystemFontOfSize:20];
                billDate.frame = CGRectMake(20,115,180,50);
                billDone.font = [UIFont boldSystemFontOfSize:20];
                billDone.frame = CGRectMake(20,155,180,50);
                billDetails.frame = CGRectMake(300.0, 275, 300, 50);
                billDetails.font = [UIFont boldSystemFontOfSize:25];
                billIDValue.font = [UIFont boldSystemFontOfSize:20];
                billIDValue.frame = CGRectMake(300,75,300,50);
                billDateValue.font = [UIFont boldSystemFontOfSize:20];
                billDateValue.frame = CGRectMake(300,115,300,50);
                billDoneValue.font = [UIFont boldSystemFontOfSize:20];
                billDoneValue.frame = CGRectMake(300,155,220,50);
                paymentType.font = [UIFont boldSystemFontOfSize:20];
                paymentType.frame = CGRectMake(20,195,180,50);
                bill_status.font = [UIFont boldSystemFontOfSize:20];
                bill_status.frame = CGRectMake(20,235,180,50);
                paymentTypeVal.font = [UIFont boldSystemFontOfSize:20];
                paymentTypeVal.frame = CGRectMake(300,195,220,50);
                bill_status_val.font = [UIFont boldSystemFontOfSize:20];
                bill_status_val.frame = CGRectMake(300,235,220,50);
                
                
                label_1.font = [UIFont boldSystemFontOfSize:22];
                label_1.frame = CGRectMake(22, 340, 140, 55);
                label_2.font = [UIFont boldSystemFontOfSize:22];
                label_2.frame = CGRectMake(164, 340, 140, 55);
                label_3.font = [UIFont boldSystemFontOfSize:22];
                label_3.frame = CGRectMake(306, 340, 140, 55);
                label_4.font = [UIFont boldSystemFontOfSize:22];
                label_4.frame = CGRectMake(448, 340, 140, 55);
                label_5.font = [UIFont boldSystemFontOfSize:22];
                label_5.frame = CGRectMake(590, 340, 140, 55);
                label_6.frame = CGRectMake(22, 90, 140, 55);
                label_6.font = [UIFont boldSystemFontOfSize:22];
                label_7.frame = CGRectMake(164, 90, 140, 55);
                label_7.font = [UIFont boldSystemFontOfSize:22];
                label_8.frame = CGRectMake(306, 90, 140, 55);
                label_8.font = [UIFont boldSystemFontOfSize:22];
                label_9.frame = CGRectMake(448, 90, 140, 55);
                label_9.font = [UIFont boldSystemFontOfSize:22];
                label_10.frame = CGRectMake(590, 90, 140, 55);
                label_10.font = [UIFont boldSystemFontOfSize:22];
                label_11.frame = CGRectMake(22, 60, 140, 55);
                label_11.font = [UIFont boldSystemFontOfSize:22];
                label_12.frame = CGRectMake(164, 60, 140,  55);
                label_12.font = [UIFont boldSystemFontOfSize:22];
                label_13.frame = CGRectMake(306, 60, 140,  55);
                label_13.font = [UIFont boldSystemFontOfSize:22];
                label_14.frame = CGRectMake(448, 60, 140,  55);
                label_14.font = [UIFont boldSystemFontOfSize:22];
                label_15.frame = CGRectMake(590, 60, 140,  55);
                label_15.font = [UIFont boldSystemFontOfSize:22];
                label_16.frame = CGRectMake(22,120, 140,  55);
                label_16.font = [UIFont boldSystemFontOfSize:22];
                label_17.frame = CGRectMake(164, 120, 140,  55);
                label_17.font = [UIFont boldSystemFontOfSize:22];
                label_18.frame = CGRectMake(306, 120, 140,  55);
                label_18.font = [UIFont boldSystemFontOfSize:22];
                label_19.frame = CGRectMake(448, 120, 140,  55);
                label_19.font = [UIFont boldSystemFontOfSize:22];
                label_20.frame = CGRectMake(590, 120, 140,  55);
                label_20.font = [UIFont boldSystemFontOfSize:22];
                
                discount.frame = CGRectMake(20,510,220,50);
                discount.font = [UIFont boldSystemFontOfSize:20];
                subTotalBill.frame = CGRectMake(20,550,180,50);
                subTotalBill.font = [UIFont boldSystemFontOfSize:20];
                taxlbl.frame = CGRectMake(20,590,180,50);
                taxlbl.font = [UIFont boldSystemFontOfSize:20];
                totalBill.font = [UIFont boldSystemFontOfSize:20];
                totalBill.frame = CGRectMake(20,630,180,50);
                billDue.font = [UIFont boldSystemFontOfSize:20];
                billDue.frame = CGRectMake(20,670,180,50);
                
                transactionDetails.frame = CGRectMake(300.0, 30.0, 300.0, 30.0);
                transactionDetails.font = [UIFont boldSystemFontOfSize:25];
                returnDetails.frame = CGRectMake(300, 0, 200.0, 50.0);
                returnDetails.font = [UIFont boldSystemFontOfSize:25];
                exchangeDetails.frame = CGRectMake(300,60, 260, 50.0);
                exchangeDetails.font = [UIFont boldSystemFontOfSize:25];
                
                
                mainSegmentedControl.frame = CGRectMake(-2, 0, self.view.frame.size.width, 60);
                mainSegmentedControl.tintColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
                mainSegmentedControl.backgroundColor = [UIColor clearColor];
                NSDictionary *attributes = @{UITextAttributeFont: [UIFont boldSystemFontOfSize:18],UITextAttributeTextColor: [UIColor whiteColor]};
                [mainSegmentedControl setTitleTextAttributes:attributes forState:UIControlStateNormal];
                
                segmentedControl.backgroundColor = [UIColor blackColor];
                segmentedControl.frame = CGRectMake(-6,900,self.view.frame.size.width,60);
                salesIdTable.frame = CGRectMake(165, 117, 360, 400);
                scrollView.frame = CGRectMake(0, 400, 778, 100);
                scrollView.contentSize = CGSizeMake(778, 500);
                scrollView1.frame = CGRectMake(0, 150, 778, 300);
                scrollView1.contentSize = CGSizeMake(778, 500);
                scrollView2.frame = CGRectMake(0, 125, 800, 300);
                scrollView2.contentSize = CGSizeMake(800, 500);
                scrollView3.frame = CGRectMake(0, 180, 800, 300);
                scrollView3.contentSize = CGSizeMake(800, 500);
                paymentDetailsTable.frame = CGRectMake(12, 0, 750, 300);
                totalPaymentLbl.frame = CGRectMake(60, 310, 150, 30);
                totalPaymentLbl.font =  [UIFont boldSystemFontOfSize:20];
                totalPaymentVal.frame = CGRectMake(600, 310, 200, 30);
                totalPaymentVal.font =  [UIFont boldSystemFontOfSize:20];
                
                selectedSaleIdTable.frame = CGRectMake(12, 0, 750, 150);
                returnDetailsTable.frame = CGRectMake(12, 0, scrollView2.frame.size.width-80, scrollView2.frame.size.height);
                exchangeDetailsTable.frame = CGRectMake(12, 0, scrollView3.frame.size.width-80, scrollView3.frame.size.height);
                
                
                group.frame = CGRectMake(20, 100, 758, 340);
                giftTypeTableView.frame = CGRectMake(300, 155, 300, 160);
                
            }
            
        }
        else {
            if (version >= 8.0) {
                mainBackbutton.frame = CGRectMake(285.0, 2.0, 27.0, 27.0);
                pastBillField.frame = CGRectMake(40, 57, 213, 35);
                // barCodeImage.frame = CGRectMake(256.0f, 54.0f, 40.0f, 40.0f);
                
                billingScrollView.frame = CGRectMake(0, 100, 778, 370);
                billingScrollView.contentSize = CGSizeMake(778, 700);
                paymentScrollView.frame = CGRectMake(0, 40, 778, 370);
                paymentScrollView.contentSize = CGSizeMake(778, 700);
                exchangeScrollView.frame = CGRectMake(0, 40, 778, 450.0);
                exchangeScrollView.contentSize = CGSizeMake(778, 700);
                returnScrollView.frame = CGRectMake(0, 40, 778, 450.0);
                returnScrollView.contentSize = CGSizeMake(778, 700);
                customerName.frame = CGRectMake(15, 10, 120, 30);
                billID.frame = CGRectMake(15,37,120,30);;
                billDetails.frame = CGRectMake(100.0, 125.0, 200.0, 30.0);
                
                transactionDetails.frame = CGRectMake(90.0, 10.0, 200.0, 30.0);
                returnDetails.frame = CGRectMake(100.0, 10.0, 200.0, 30.0);
                exchangeDetails.frame = CGRectMake(100.0, 10.0, 200.0, 30.0);
                billDate.frame = CGRectMake(15,64,120,30);
                billDone.frame =  CGRectMake(15,91,120,30);
                customerNameValue.frame = CGRectMake(155, 10, 150, 30);
                
                billIDValue.frame = CGRectMake(155,37,150,30);
                billDateValue.frame = CGRectMake(155,64,150,30);
                billDoneValue.frame = CGRectMake(155,91,150,30);
                label_1.frame = CGRectMake(12, 120.0, 58, 30);
                label_2.frame = CGRectMake(71, 120.0, 58, 30);
                label_3.frame = CGRectMake(130, 120.0, 58, 30);
                label_4.frame = CGRectMake(189, 120.0, 58, 30);
                label_5.frame = CGRectMake(248, 120.0, 58, 30);
                label_6.frame = CGRectMake(12, 45.0, 58, 30);
                label_7.frame = CGRectMake(71, 45.0, 58, 30);
                label_8.frame = CGRectMake(130, 45.0, 58, 30);
                label_9.frame = CGRectMake(189, 45.0, 58, 30);
                label_10.frame = CGRectMake(248, 45.0, 58, 30);
                label_11.frame = CGRectMake(12, 220.0, 58, 30);
                label_12.frame = CGRectMake(71, 220.0, 58, 30);
                label_13.frame = CGRectMake(130, 220.0, 58, 30);
                label_14.frame = CGRectMake(189, 220.0, 58, 30);
                label_15.frame = CGRectMake(248, 220.0, 58, 30);
                label_16.frame = CGRectMake(12, 220.0, 58, 30);
                label_17.frame = CGRectMake(71, 220.0, 58, 30);
                label_18.frame = CGRectMake(130, 220.0, 58, 30);
                label_19.frame = CGRectMake(189, 220.0, 58, 30);
                label_20.frame = CGRectMake(248, 220.0, 58, 30);
                
                discount.frame = CGRectMake(15, 240, 200, 20);
                subTotalBill.frame = CGRectMake(15,265,120,20);
                taxlbl.frame = CGRectMake(15,290,277,20);
                totalBill.frame = CGRectMake(15,315,120,20);
                billDue.frame = CGRectMake(15,340,277,20);
                
                
                mainSegmentedControl.backgroundColor = [UIColor clearColor];
                mainSegmentedControl.frame = CGRectMake(-2, 0.0, 324, 47);
                segmentedControl.frame = CGRectMake(-2,(self.view.frame.size.height-110),324,47);
                salesIdTable.frame = CGRectMake(41, 92, 211, 250);
                //scrollView.frame = CGRectMake(0, 229, 320, 129);
                // scrollView.contentSize = CGSizeMake(320, 129);
                scrollView.frame = CGRectMake(0, 155, 320, 80);
                scrollView.contentSize = CGSizeMake(320, 150);
                scrollView1.frame = CGRectMake(0, 80, 320, 200);
                scrollView1.contentSize = CGSizeMake(320, 230);
                scrollView2.frame = CGRectMake(0, 255.0, 320, 100);
                scrollView2.contentSize = CGSizeMake(320, 150);
                scrollView3.frame = CGRectMake(0, 255.0, 320, 100);
                scrollView3.contentSize = CGSizeMake(320, 150);
                selectedSaleIdTable.frame = CGRectMake(12, 155, 293, 100);
                paymentDetailsTable.frame = CGRectMake(12, 0, 293, 200);
                
                returnDetailsTable.frame = CGRectMake(12, 0, 293, 100);
                exchangeDetailsTable.frame = CGRectMake(12, 0, 293, 100);
                giftTypeTableView.frame = CGRectMake(90, 81, 161, 175);
                
            }
            else{
                mainBackbutton.frame = CGRectMake(285.0, 2.0, 27.0, 27.0);
                pastBillField.frame = CGRectMake(40, 57, 213, 35);
                // barCodeImage.frame = CGRectMake(256.0f, 54.0f, 40.0f, 40.0f);
                
                billingScrollView.frame = CGRectMake(0, 100, 778, 370);
                billingScrollView.contentSize = CGSizeMake(778, 700);
                paymentScrollView.frame = CGRectMake(0, 40, 778, 370);
                paymentScrollView.contentSize = CGSizeMake(778, 700);
                exchangeScrollView.frame = CGRectMake(0, 40, 778, 450.0);
                exchangeScrollView.contentSize = CGSizeMake(778, 700);
                returnScrollView.frame = CGRectMake(0, 40, 778, 450.0);
                returnScrollView.contentSize = CGSizeMake(778, 700);
                customerName.frame = CGRectMake(15, 10, 120, 30);
                billID.frame = CGRectMake(15,37,120,30);;
                billDetails.frame = CGRectMake(100.0, 125.0, 200.0, 30.0);
                
                transactionDetails.frame = CGRectMake(90.0, 10.0, 200.0, 30.0);
                returnDetails.frame = CGRectMake(100.0, 10.0, 200.0, 30.0);
                exchangeDetails.frame = CGRectMake(90.0, 185.0, 200.0, 30.0);
                billDate.frame = CGRectMake(15,64,120,30);
                billDone.frame =  CGRectMake(15,91,120,30);
                
                customerNameValue.frame = CGRectMake(155, 10, 150, 30);
                
                billIDValue.frame = CGRectMake(155,37,150,30);
                billDateValue.frame = CGRectMake(155,64,150,30);
                billDoneValue.frame = CGRectMake(155,91,150,30);
                label_1.frame = CGRectMake(12, 160.0, 58, 30);
                label_2.frame = CGRectMake(71, 160.0, 58, 30);
                label_3.frame = CGRectMake(130, 160.0, 58, 30);
                label_4.frame = CGRectMake(189, 160.0, 58, 30);
                label_5.frame = CGRectMake(248, 160.0, 58, 30);
                label_6.frame = CGRectMake(12, 45.0, 58, 30);
                label_7.frame = CGRectMake(71, 45.0, 58, 30);
                label_8.frame = CGRectMake(130, 45.0, 58, 30);
                label_9.frame = CGRectMake(189, 45.0, 58, 30);
                label_10.frame = CGRectMake(248, 45.0, 58, 30);
                label_11.frame = CGRectMake(12, 45.0, 58, 30);
                label_12.frame = CGRectMake(71, 45.0, 58, 30);
                label_13.frame = CGRectMake(130, 45.0, 58, 30);
                label_14.frame = CGRectMake(189, 45.0, 58, 30);
                label_15.frame = CGRectMake(248, 45.0, 58, 30);
                label_16.frame = CGRectMake(12, 220.0, 58, 30);
                label_17.frame = CGRectMake(71, 220.0, 58, 30);
                label_18.frame = CGRectMake(130, 220.0, 58, 30);
                label_19.frame = CGRectMake(189, 220.0, 58, 30);
                label_20.frame = CGRectMake(248, 220.0, 58, 30);
                
                discount.frame = CGRectMake(15, 340, 200, 20);
                discount.backgroundColor = [UIColor clearColor];
                subTotalBill.frame = CGRectMake(15,367,120,20);
                subTotalBill.backgroundColor = [UIColor clearColor];
                taxlbl.frame = CGRectMake(15,394,277,20);
                taxlbl.backgroundColor = [UIColor clearColor];
                totalBill.frame = CGRectMake(15,421,120,20);
                totalBill.backgroundColor = [UIColor clearColor];
                billDue.frame = CGRectMake(15,448,277,20);
                billDue.backgroundColor = [UIColor clearColor];
                
                mainSegmentedControl.frame = CGRectMake(-2, 0.0, 324, 47);
                segmentedControl.frame = CGRectMake(-2,370,324,47);
                salesIdTable.frame = CGRectMake(41, 92, 211, 250);
                //scrollView.frame = CGRectMake(0, 229, 320, 129);
                // scrollView.contentSize = CGSizeMake(320, 129);
                scrollView.frame = CGRectMake(0, 195, 320, 100);
                scrollView.contentSize = CGSizeMake(320, 150);
                scrollView1.frame = CGRectMake(0, 80, 320, 200);
                scrollView1.contentSize = CGSizeMake(320, 230);
                scrollView2.frame = CGRectMake(0, 80, 320, 100);
                scrollView2.contentSize = CGSizeMake(320, 150);
                scrollView3.frame = CGRectMake(0, 80, 320, 100);
                scrollView3.contentSize = CGSizeMake(320, 150);
                selectedSaleIdTable.frame = CGRectMake(12, 0, 293, 100);
                paymentDetailsTable.frame = CGRectMake(12, 0, 293, 200);
                returnDetailsTable.frame = CGRectMake(12, 0, 293, 100);
                exchangeDetailsTable.frame = CGRectMake(12, 0, 293, 100);
                giftTypeTableView.frame = CGRectMake(90, 81, 161, 175);
                
            }
            
            
        }
        
        //[topbar addSubview:img];
        //    [self.view addSubview:img];
        //    [self.view addSubview:label];
        [self.view addSubview:mainBackbutton];
        [billingScrollView addSubview:pastBillField];
        [self.view addSubview:quickPayBtn];
        [self.view addSubview:barCodeImage];
        //    if ([billingType isEqualToString:@"pending"]) {
        //
        //        [billingScrollView addSubview:BillField];
        //        [billingScrollView addSubview:skListTable];
        //    }
        [billingScrollView addSubview:customerName];
        [billingScrollView addSubview:billID];
        [billingScrollView addSubview:billDate];
        [billingScrollView addSubview:billDone];
        
        [billingScrollView addSubview:customerPhone];
        [billingScrollView addSubview:customerPhoneValue];
        
        [billingScrollView addSubview:customerNameValue];
        [billingScrollView addSubview:billIDValue];
        [billingScrollView addSubview:billDateValue];
        [billingScrollView addSubview:billDoneValue];
        [billingScrollView addSubview:paymentType];
        [billingScrollView addSubview:paymentTypeVal];
        [billingScrollView addSubview:bill_status];
        [billingScrollView addSubview:bill_status_val];
        [billingScrollView addSubview:label_1];
        [billingScrollView addSubview:curTax];
        [billingScrollView addSubview:label_2];
        [billingScrollView addSubview:label_3];
        [billingScrollView addSubview:label_4];
        [billingScrollView addSubview:label_5];
        [billingScrollView addSubview:itemDiscLbl];
        [paymentScrollView addSubview:totalPaymentLbl];
        [paymentScrollView addSubview:totalPaymentVal];
        [paymentScrollView addSubview:label_6];
        [paymentScrollView addSubview:label_7];
        [paymentScrollView addSubview:label_8];
        [paymentScrollView addSubview:label_9];
        [paymentScrollView addSubview:label_10];
        [billingScrollView addSubview:discount];
        [billingScrollView addSubview:subTotalBill];
        [billingScrollView addSubview:taxlbl];
        [billingScrollView addSubview:totalBill];
        [billingScrollView addSubview:billDue];
        [billingScrollView addSubview:giftVoucherTxt];
        [billingScrollView addSubview:giftAmtLbl];
        
        //added by Srinivasulu on 24/03/2018....
        
        [billingScrollView addSubview:billEnterRemarksLbl];
        [billingScrollView addSubview:billRemarksTextView];
        
        //upto here on 24/03/2018....
        
        //    [exchangeScrollView addSubview:returnDetails];
        [returnScrollView addSubview:returnDetails];
        [returnScrollView addSubview:label_11];
        [returnScrollView addSubview:label_12];
        [returnScrollView addSubview:label_13];
        [returnScrollView addSubview:label_14];
        [returnScrollView addSubview:label_15];
        
        
        //    [exchangeScrollView addSubview:exchangeDetails];
        [exchangeScrollView addSubview:exchangeDetails];
        [exchangeScrollView addSubview:label_16];
        [exchangeScrollView addSubview:label_17];
        [exchangeScrollView addSubview:label_18];
        [exchangeScrollView addSubview:label_19];
        [exchangeScrollView addSubview:label_20];
        
        [billingScrollView addSubview:salesIdTable];
        [billingScrollView addSubview:scrollView];
        [billingScrollView addSubview:selectedSaleIdTable];
        //    [billingScrollView addSubview:billDetails];
        [paymentScrollView addSubview:transactionDetails];
        [billingScrollView addSubview:scrollView];
        [scrollView1 addSubview:paymentDetailsTable];
        [paymentScrollView addSubview:scrollView1];
        [returnScrollView addSubview:scrollView2];
        [scrollView2 addSubview:returnDetailsTable];
        [exchangeScrollView addSubview:scrollView3];
        [scrollView3 addSubview:exchangeDetailsTable];
        
        [self.view addSubview:billingScrollView];
        [self.view addSubview:paymentScrollView];
        [self.view addSubview:exchangeScrollView];
        [self.view addSubview:mainSegmentedControl];
        [self.view addSubview:segmentedControl];
        
        denominationDic = [[NSMutableDictionary alloc]init];
        returnDenominationDic = [[NSMutableDictionary alloc]init];
        
        dealDataItems = [[NSMutableArray alloc] init];
        offerDic = [[NSMutableDictionary alloc]init];
        isVegetable = [NSMutableArray new];
        editedPriceArr = [NSMutableArray new];
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
            if(version >= 8.0) {
                descLabl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
                priceLabl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
                priceView.frame = CGRectMake(10, 140.0, self.view.frame.size.width, self.view.frame.size.height);
                priceLabl.frame = CGRectMake(140.0, 5, 100, 30);
                descLabl.frame = CGRectMake(30, 5, 100, 30);
                closePriceViewBtn.frame = CGRectMake(250.0, 140.0, 40, 40);
                transparentView.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
                priceTable.frame = CGRectMake(20, 40, 220, 200);
            }
            else {
                descLabl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
                priceLabl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
                priceView.frame = CGRectMake(10, 50.0, self.view.frame.size.width, self.view.frame.size.height);
                priceLabl.frame = CGRectMake(140.0, 5, 100, 30);
                descLabl.frame = CGRectMake(30, 5, 100, 30);
                closePriceViewBtn.frame = CGRectMake(250.0, 50.0, 40, 40);
                transparentView.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
                priceTable.frame = CGRectMake(20, 40, 220, 200);
            }
        }
        
        [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(checkPrinetrStatus) userInfo:self repeats:YES];
        
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        if (![[defaults valueForKey:kPrinting] boolValue]) {
            
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:9];
        }
        
        if (![[defaults valueForKey:kReturnAvailable] boolValue]) {
            
            [mainSegmentedControl setEnabled:FALSE forSegmentAtIndex:2];
            
        }
        else if(![[defaults valueForKey:kReturnMode] isKindOfClass:[NSNull class]]){
            
            returnMode = [[defaults valueForKey:kReturnMode] copy];
            
            //added by Srinivasulu on 24/05/2017....
            
            selectedReturnModeStr  = [[defaults valueForKey:kReturnMode] copy];
            
            //upto here on 24/05/2017....
        }
        
        if (![[defaults valueForKey:kExchange] boolValue]) {
            
            [mainSegmentedControl setEnabled:FALSE forSegmentAtIndex:3];
            
        }
        
        if (!isFoodCouponsAvail && !isOfflineService) {
            
            [segmentedControl setEnabled:false forSegmentAtIndex:5];
        }
        
        
        
        //added by Srinivasulu on 15/06/2017....
        /*Creation of UITableView used in the popUps*/
        
        //reasonTbl Creation...
        reasonTbl = [[UITableView alloc] init];
        reasonTbl.layer.borderWidth = 1.0;
        reasonTbl.layer.cornerRadius = 4.0;
        reasonTbl.layer.borderColor = [UIColor grayColor].CGColor;
        reasonTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        reasonTbl.dataSource = self;
        reasonTbl.delegate = self;
        
        
        //added by Srinivasulu on 21/07/2017....
        
        if(billTypeStr != nil)
            self.titleLabel.text = billTypeStr;
        
        //denominstaionsTypeTbl table creation....
        denominstaionsTypeTbl = [[UITableView alloc] init];
        denominstaionsTypeTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        denominstaionsTypeTbl.dataSource = self;
        denominstaionsTypeTbl.delegate = self;
        (denominstaionsTypeTbl.layer).borderWidth = 1.0f;
        denominstaionsTypeTbl.layer.cornerRadius = 3;
        denominstaionsTypeTbl.layer.borderColor = [UIColor grayColor].CGColor;
        
        
        perviousPaymentTransantionView = [[UIView alloc] init];
        perviousPaymentTransantionView.backgroundColor = [UIColor clearColor];
        perviousPaymentTransantionView.hidden = YES;
        
        [perviousPaymentTransantionView addSubview:totalPaymentLbl];
        [perviousPaymentTransantionView addSubview:totalPaymentVal];
        [perviousPaymentTransantionView addSubview:label_6];
        [perviousPaymentTransantionView addSubview:label_7];
        [perviousPaymentTransantionView addSubview:label_8];
        [perviousPaymentTransantionView addSubview:label_9];
        [perviousPaymentTransantionView addSubview:label_10];
        [perviousPaymentTransantionView addSubview:transactionDetails];
        [perviousPaymentTransantionView addSubview:paymentDetailsTable];
        
        
        [self.view addSubview:perviousPaymentTransantionView];
        
        
        totalPaymentVal.textAlignment = NSTextAlignmentCenter;
        
        
        perviousPaymentTransantionView.frame = CGRectMake( 0, mainSegmentedControl.frame.origin.y + mainSegmentedControl.frame.size.height, self.view.frame.size.width, segmentedControl.frame.origin.y - (mainSegmentedControl.frame.origin.y + mainSegmentedControl.frame.size.height));
        
        transactionDetails.frame = CGRectMake( 10, 10, 450, 40);
        
        label_6.frame = CGRectMake( transactionDetails.frame.origin.x, transactionDetails.frame.origin.y + transactionDetails.frame.size.height, 220, 35);
        label_7.frame = CGRectMake( label_6.frame.origin.x + label_6.frame.size.width + 2, label_6.frame.origin.y, 100, label_6.frame.size.height);
        label_8.frame = CGRectMake( label_7.frame.origin.x + label_7.frame.size.width + 2, label_6.frame.origin.y, 180, label_6.frame.size.height);
        label_9.frame = CGRectMake( label_8.frame.origin.x + label_8.frame.size.width + 2, label_6.frame.origin.y, 140, label_6.frame.size.height);
        label_10.frame = CGRectMake( label_9.frame.origin.x + label_9.frame.size.width + 2, label_6.frame.origin.y, 120, label_6.frame.size.height);
        
        label_6.layer.cornerRadius = 5;
        label_7.layer.cornerRadius = 5;
        label_8.layer.cornerRadius = 5;
        label_9.layer.cornerRadius = 5;
        label_10.layer.cornerRadius = 5;
        
        totalPaymentVal.frame = CGRectMake( label_10.frame.origin.x, perviousPaymentTransantionView.frame.size.height - ( 10 +label_6.frame.size.height), label_10.frame.size.width, label_6.frame.size.height);
        
        totalPaymentLbl.frame = CGRectMake( totalPaymentVal.frame.origin.x - 120, totalPaymentVal.frame.origin.y, 120, totalPaymentLbl.frame.size.height);
        
        paymentDetailsTable.frame = CGRectMake( 0, label_6.frame.origin.y + label_6.frame.size.height + 10, label_10.frame.origin.x + label_10.frame.size.width, totalPaymentLbl.frame.origin.y - (label_6.frame.origin.y + label_6.frame.size.height + 10));
        
        customerDetails.text = NSLocalizedString(@"customer_details_>>>", nil);
        customerDetailsVal.text = @"";
        
        
        billDetails.text = NSLocalizedString(@"billing_details", nil);
        transactionDetails.text = NSLocalizedString(@"payment_details", nil);
        returnDetails.text = NSLocalizedString(@"return_details", nil);
        exchangeDetails.text = NSLocalizedString(@"exchange_details", nil);
        discount.text = NSLocalizedString(@"deal_or_offers", nil);
        otherDiscLbl.text = NSLocalizedString(@"other_discounts", nil);
        
        label_6.text = NSLocalizedString(@"txn_id", nil);
        label_7.text = NSLocalizedString(@"date", nil);
        label_8.text = NSLocalizedString(@"pay_mode", nil);
        label_9.text = NSLocalizedString(@"card_type", nil);
        label_10.text = NSLocalizedString(@"amount", nil);
        
        //upto here on 21/07/2017....
        
        
        
        //added by Srinivasulu on 24/03/2018....
        
        NSArray* tempVCA = (self.navigationController).viewControllers;
        
        
        for(UIViewController *tempVC in tempVCA)
        {
            
            if([tempVC isKindOfClass:[BillingHome class]])
            {
                
                [tempVC removeFromParentViewController];
            }
            
        }
        
        //upto here on 24/03/2018....
        
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description it is one of ViewLifeCylce Method which will be executed after execution of viewDidLoad.......
 * @date
 * @method      viewWillAppear
 * @author
 * @param       BOOL
 * @param
 *
 * @return      void
 *
 * @modified By Srinivasulu on 22/12/2017....
 * @reason      added the comments and     .... not completed.... offline service calls.
 *
 * @verified By
 * @verified On
 *
 */

// Implement viewWillAppear....
- (void) viewWillAppear:(BOOL)animated {
    
    @try {
        isCustomrDetailDoorDelCall =  false; // added by roja on 17/10/2019...
        
        giftVoucherArr = [[NSMutableArray alloc] init];
        
        //ProgressBar creation...
        HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
        [self.navigationController.view addSubview:HUD];
        // Regiser for HUD callbacks so we can remove it from the window at the right time
        HUD.delegate = self;
        HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
        HUD.mode = MBProgressHUDModeCustomView;
        // Show the HUD
        [HUD show:YES];
        [HUD setHidden:YES];
        
        if(swipe_Status.length >= 1) {
            UIButton *x;
            payTxt2.text = swipe_Status;
            [self continuePay:x];
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  it is one of ViewLifeCylce Method which will be executed after execution of viewWillAppear.......
 * @date
 * @method       viewDidAppear
 * @author
 * @param
 * @param
 *
 * @return
 *
 * @modified By Srinivasulu on 22/12/2017....
 * @reason      added the comments and     .... not completed.... offline service calls.
 *
 * @verified By
 * @verified On
 *
 */

-(void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:YES];
    giftVoucherArr = [[NSMutableArray alloc] init];
    tempArrayItems = [[NSMutableArray alloc] init];
    orderShipmentCharges = 0;
    
    @try {
        if (billTypeStatus) {
            
            
            pastBillField.text = billType;
            
            NSString *value = [pastBillField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            
            if ((pastBillField.text).length >= 2 && !(value.length == 0)) {
                
                //ProgressBar higthlighted...
                [HUD setHidden:NO];
                
                NSString *saleId2 = pastBillField.text;
                
                // web services calling....
                // Create the service
                //            SDZSalesService* service = [SDZSalesService service];
                //            service.logging = YES;
                //
                //            // Returns NSString*.
                //            [service getBillingDetails:self action:@selector(getBillingDetailsHandler:) saleID: saleId2];
                
                if (!isOfflineService) {
                    
                    WebServiceController *service = [[WebServiceController alloc] init];
                    service.getBillsDelegate = self;
                    [service getBillDetails:saleId2];
                }
                
                else {
                    
                    offline = [[OfflineBillingServices alloc]init];
                    NSMutableDictionary * json = [offline openBill:pastBillField.text];
                    if (json.count>0) {
                        
                        [self getBillingDetailsHandler:json];
                        
                    }
                    else {
                        [HUD setHidden:YES];
                        
                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Bill not available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                    }
                    
                }
                
                billTypeStatus = FALSE;
            }
            
            
            
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
    
    //added on 19/11/2016.......
    
    @try {
        
        
        if(pastBillId.length > 0){
            
            pastBillField.text = pastBillId;
            salesIdTable.hidden = YES;
            [self barCodeImageClicked:self];
            tempExchangeItems = nil;
            tempReturnItems = nil;
            selectedItems = nil;
            
        }
    }
    @catch (NSException *exception) {
    }
    @finally {
        
    }
    
    //up to here on 19/11/2016
    
    //    CATransition * animation = [CATransition animation];
    //    [animation setDelegate:self];
    //    [animation setDuration:2.0f];
    //    [animation setTimingFunction:UIViewAnimationCurveEaseInOut];
    //    [animation setType:@"rippleEffect" ];
    //    [billingScrollView.layer addAnimation:animation forKey:NULL];
}

#pragma -mark end of ViewLifeCylce Methods....

/**
 * @description  it will be executed when memory warning is receiveds.......
 * @date
 * @method       didReceiveMemoryWarning
 * @author
 * @param
 * @param
 *
 * @return
 *
 * @modified By Srinivasulu on 13/06/2017....
 * @reason      added the comments and     .... not completed....
 *
 * @verified By
 * @verified On
 *
 */

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma -mark method used to navigate to otherViewController....

/**
 * @description  In this method BillingDetails. screen creation and framing will be there.....
 * @date         22/12/2017....
 * @method       goHomePage
 * @author       Srinivasulu
 * @param
 * @param
 *
 * @return      void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)formBillDetailsView{
    
    
}

#pragma -mark method used to navigate to otherViewController....

/**
 * @description  this method is used to navingate to homepage....
 * @date
 * @method       goHomePage
 * @author
 * @param
 * @param
 *
 * @return      void
 *
 * @modified By Srinivasulu on 22/12/2017....
 * @reason      added the comments and     .... not completed....
 *
 * @verified By
 * @verified On
 *
 */

- (void) goHomePage {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    //[self.navigationController popViewControllerAnimated:YES];
    [UIView  transitionWithView:self.navigationController.view duration:0.8  options:UIViewAnimationOptionTransitionFlipFromRight
                     animations:^(void) {
                         BOOL oldState = [UIView areAnimationsEnabled];
                         [UIView setAnimationsEnabled:NO];
                         [self.navigationController popViewControllerAnimated:YES];
                         [UIView setAnimationsEnabled:oldState];
                     }
                     completion:nil];
}

#pragma -mark end of the methods clean up code written by Srinivasulu on 22/12/2017....




- (void)quickPayCall {
    [self populatePaymentView:@"QUICKCASH"];
}

-(void)checkPrinetrStatus {
    if (!isPrinterAdded && printer!=nil) {
        
        [printer addObserver:self];
    }
    
}
- (void)deviceOrientationDidChange:(NSNotification *)notification {
    
    @try {
        
        UIDeviceOrientation orientation = [UIDevice currentDevice].orientation;
        
        if ((UIDeviceOrientationIsPortrait(orientation) ||UIDeviceOrientationIsPortrait(orientation)) ||
            (UIDeviceOrientationIsLandscape(orientation) || UIDeviceOrientationIsLandscape(orientation))) {
            //still saving the current orientation
            currentOrientation = orientation;
        }
        
        //added by Srinivasulu on 26/03/2018....
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad && !(currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight))
            currentOrientation = UIDeviceOrientationLandscapeRight;
        
        //upto here on 26/03/2018....
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            //topbar.frame = CGRectMake(0, 0, 320, 31);
            //        img.frame = CGRectMake(0, 0, 778, 50);
            //        label.font = [UIFont boldSystemFontOfSize:25];
            //        label.frame = CGRectMake(10, 5, 240, 40);
            
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                
                mainBackbutton.frame = CGRectMake(710.0, 5.0, 40.0, 40.0);
                
                pastBillField.font = [UIFont boldSystemFontOfSize:20];
                pastBillField.frame = CGRectMake(350, 65, 300, 40);
                
                billingScrollView.frame = CGRectMake(0, 127.0, self.view.frame.size.width,550);
                billingScrollView.contentSize = CGSizeMake(778, 1000.0);
                
                paymentScrollView.frame = CGRectMake(0, 70, 778, 800);
                paymentScrollView.contentSize = CGSizeMake(778, 1000.0);
                
                exchangeScrollView.frame = CGRectMake(550, 50, 778, 800.0);
                exchangeScrollView.contentSize = CGSizeMake(778,1000);
                //  exchangeScrollView.backgroundColor = [UIColor purpleColor];
                
                returnScrollView.frame = CGRectMake(550, 10, 778, 300);
                returnScrollView.contentSize = CGSizeMake(778,1000);
                
                
                billDetails.frame = CGRectMake(320, 0, 300, 30);
                billDetails.font = [UIFont boldSystemFontOfSize:25];
                
                customerName.font = [UIFont boldSystemFontOfSize:18];
                customerName.frame = CGRectMake(20,40, 180, 30);
                customerNameValue.font = [UIFont boldSystemFontOfSize:18];
                customerNameValue.frame = CGRectMake(240, 40, 300, 30);
                
                customerPhone.font = [UIFont boldSystemFontOfSize:20];
                customerPhone.frame = CGRectMake(20,75, 180, 30);
                customerPhoneValue.font = [UIFont boldSystemFontOfSize:20];
                customerPhoneValue.frame = CGRectMake(240,75, 300, 30);
                
                billID.font = [UIFont boldSystemFontOfSize:18];
                billID.frame = CGRectMake(20,115,180,30);
                billDate.font = [UIFont boldSystemFontOfSize:18];
                billDate.frame = CGRectMake(20,155,180,30);
                billDone.font = [UIFont boldSystemFontOfSize:18];
                billDone.frame = CGRectMake(20,195,180,30);
                
                billIDValue.font = [UIFont boldSystemFontOfSize:18];
                billIDValue.frame = CGRectMake(240,115,300,30);
                billDateValue.font = [UIFont boldSystemFontOfSize:18];
                billDateValue.frame = CGRectMake(240,155,300,30);
                billDoneValue.font = [UIFont boldSystemFontOfSize:18];
                billDoneValue.frame = CGRectMake(240,195,220,30);
                paymentType.font = [UIFont boldSystemFontOfSize:18];
                paymentType.frame = CGRectMake(20,230,180,30);
                bill_status.font = [UIFont boldSystemFontOfSize:18];
                bill_status.frame = CGRectMake(20,270,180,30);
                paymentTypeVal.font = [UIFont boldSystemFontOfSize:18];
                paymentTypeVal.frame = CGRectMake(240,230,220,30);
                bill_status_val.font = [UIFont boldSystemFontOfSize:18];
                bill_status_val.frame = CGRectMake(240,270,220,30);
                
                
                
                
                label_1.font = [UIFont boldSystemFontOfSize:18];
                label_1.frame = CGRectMake(500, 40, 90, 30);
                label_1.layer.cornerRadius = 10;
                
                label_2.font = [UIFont boldSystemFontOfSize:18];
                label_2.frame = CGRectMake(600, 40, 90, 30);
                label_2.layer.cornerRadius = 10;
                
                label_3.font = [UIFont boldSystemFontOfSize:18];
                label_3.frame = CGRectMake(700, 40, 90, 30);
                label_3.layer.cornerRadius = 10;
                
                label_4.font = [UIFont boldSystemFontOfSize:18];
                label_4.frame = CGRectMake(800, 40, 90, 30);
                label_4.layer.cornerRadius = 10;
                
                label_5.font = [UIFont boldSystemFontOfSize:18];
                label_5.frame = CGRectMake(900, 40, 90, 30);
                label_5.layer.cornerRadius = 10;
                
                
                
                label_6.frame = CGRectMake(22, 90, 140, 55);
                label_6.font = [UIFont boldSystemFontOfSize:18];
                label_7.frame = CGRectMake(164, 90, 140, 55);
                label_7.font = [UIFont boldSystemFontOfSize:18];
                label_8.frame = CGRectMake(306, 90, 140, 55);
                label_8.font = [UIFont boldSystemFontOfSize:18];
                label_9.frame = CGRectMake(448, 90, 140, 55);
                label_9.font = [UIFont boldSystemFontOfSize:18];
                label_10.frame = CGRectMake(590, 90, 140, 55);
                label_10.font = [UIFont boldSystemFontOfSize:18];
                
                label_11.font = [UIFont boldSystemFontOfSize:18];
                label_11.frame = CGRectMake(0, 40, 90, 30);
                label_11.layer.cornerRadius = 10;
                
                
                label_12.font = [UIFont boldSystemFontOfSize:18];
                label_12.frame = CGRectMake(95, 40, 90, 30);
                label_12.layer.cornerRadius = 10;
                
                label_13.font = [UIFont boldSystemFontOfSize:18];
                label_13.frame = CGRectMake(190, 40, 90, 30);
                label_13.layer.cornerRadius = 10;
                
                label_14.font = [UIFont boldSystemFontOfSize:18];
                label_14.frame = CGRectMake(285, 40, 90, 30);
                label_14.layer.cornerRadius = 10;
                
                label_15.font = [UIFont boldSystemFontOfSize:18];
                label_15.frame = CGRectMake(380, 40, 90, 30);
                label_15.layer.cornerRadius = 10;
                
                
                label_16.font = [UIFont boldSystemFontOfSize:18];
                label_16.frame = CGRectMake(0, 80, 90, 30);
                label_16.layer.cornerRadius = 10;
                
                
                label_17.font = [UIFont boldSystemFontOfSize:18];
                label_17.frame = CGRectMake(95, 80, 90, 30);
                label_17.layer.cornerRadius = 10;
                
                label_18.font = [UIFont boldSystemFontOfSize:18];
                label_18.frame = CGRectMake(190, 80, 90, 30);
                label_18.layer.cornerRadius = 10;
                
                label_19.font = [UIFont boldSystemFontOfSize:18];
                label_19.frame = CGRectMake(285, 80, 90, 30);
                label_19.layer.cornerRadius = 10;
                
                label_20.font = [UIFont boldSystemFontOfSize:18];
                label_20.frame = CGRectMake(380, 80, 90, 30);
                label_20.layer.cornerRadius = 10;
                
                discount.frame = CGRectMake(490,350,220,30);
                discount.font = [UIFont boldSystemFontOfSize:18];
                subTotalBill.frame = CGRectMake(490,380,180,30);
                subTotalBill.font = [UIFont boldSystemFontOfSize:18];
                taxlbl.frame = CGRectMake(490,410,180,30);
                taxlbl.font = [UIFont boldSystemFontOfSize:18];
                totalBill.font = [UIFont boldSystemFontOfSize:18];
                totalBill.frame = CGRectMake(490,440,180,30);
                billDue.font = [UIFont boldSystemFontOfSize:18];
                billDue.frame = CGRectMake(490,470,180,30);
                
                
                discountValue.frame = CGRectMake(900,350,150,30);
                discountValue.font = [UIFont boldSystemFontOfSize:18];
                subTotalBillValue.frame = CGRectMake(900,380,150,30);
                subTotalBillValue.font = [UIFont boldSystemFontOfSize:18];
                taxlblValue.frame = CGRectMake(900,410,150,30);
                taxlblValue.font = [UIFont boldSystemFontOfSize:18];
                
                totalBillValue.font = [UIFont boldSystemFontOfSize:18];
                totalBillValue.frame = CGRectMake(900,440,150,30);
                billDueValue.font = [UIFont boldSystemFontOfSize:18];
                billDueValue.frame = CGRectMake(900,460,150,30);
                
                
                transactionDetails.frame = CGRectMake(300.0, 30.0, 300.0, 30.0);
                transactionDetails.font = [UIFont boldSystemFontOfSize:25];
                
                
                returnDetails.frame = CGRectMake(170, 0, 200.0, 30);
                returnDetails.font = [UIFont boldSystemFontOfSize:25];
                
                exchangeDetails.frame = CGRectMake(50,0, 200.0, 50.0);
                exchangeDetails.font = [UIFont boldSystemFontOfSize:25];
                
                
                mainSegmentedControl.frame = CGRectMake(-2, 0, self.view.frame.size.width+20, 60);
                mainSegmentedControl.tintColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
                mainSegmentedControl.backgroundColor = [UIColor clearColor];
                NSDictionary *attributes = @{UITextAttributeFont: [UIFont boldSystemFontOfSize:18],UITextAttributeTextColor: [UIColor whiteColor]};
                [mainSegmentedControl setTitleTextAttributes:attributes forState:UIControlStateNormal];
                
                segmentedControl.backgroundColor = [UIColor blackColor];
                
                //commented and changed by Srinivasulu on 12/04/2018....
                
                //                segmentedControl.frame = CGRectMake(-6,650,self.view.frame.size.width+20,60);
                segmentedControl.frame = CGRectMake( -1,650,self.view.frame.size.width + 2,60);
                
                //upto here on 12/04/2018....
                
                salesIdTable.frame = CGRectMake(350, 100, 300, 200);
                
                scrollView.frame = CGRectMake(490, 80, 778, 380);
                scrollView.contentSize = CGSizeMake(778, 500);
                
                scrollView1.frame = CGRectMake(0, 150, 778, 300);
                scrollView1.contentSize = CGSizeMake(778, 500);
                
                scrollView2.frame = CGRectMake(0, 80, 800, 300);
                scrollView2.contentSize = CGSizeMake(800, 500);
                
                scrollView3.frame = CGRectMake(0, 80, 800, 300);
                scrollView3.contentSize = CGSizeMake(800, 500);
                
                paymentDetailsTable.frame = CGRectMake(12, 0, 750, 300);
                totalPaymentLbl.frame = CGRectMake(60, 310, 150, 30);
                totalPaymentLbl.font =  [UIFont boldSystemFontOfSize:20];
                totalPaymentVal.frame = CGRectMake(600, 310, 200, 30);
                totalPaymentVal.font =  [UIFont boldSystemFontOfSize:20];
                
                selectedSaleIdTable.frame = CGRectMake(12, 0, 750, 250);
                returnDetailsTable.frame = CGRectMake(0, 0, scrollView2.frame.size.width-80, scrollView2.frame.size.height);
                exchangeDetailsTable.frame = CGRectMake(0, 0, scrollView3.frame.size.width-80, scrollView3.frame.size.height);
                
                
                group.frame = CGRectMake(20, 100, 758, 340);
                
                
            }
            else {
                mainBackbutton.frame = CGRectMake(710.0, 5.0, 40.0, 40.0);
                
                
                pastBillField.font = [UIFont boldSystemFontOfSize:30];
                pastBillField.frame = CGRectMake(160, 65, 360, 52);
                
                billingScrollView.frame = CGRectMake(0, 127.0, 778, 800.0);
                billingScrollView.contentSize = CGSizeMake(778, 1000.0);
                paymentScrollView.frame = CGRectMake(0, 70, 778, 800);
                paymentScrollView.contentSize = CGSizeMake(778, 1000.0);
                exchangeScrollView.frame = CGRectMake(0, 590, 778, 800.0);
                exchangeScrollView.contentSize = CGSizeMake(778,1000);
                returnScrollView.frame = CGRectMake(0, 590, 778, 300);
                returnScrollView.contentSize = CGSizeMake(778,1000);
                
                
                
                customerName.font = [UIFont boldSystemFontOfSize:20];
                customerName.frame = CGRectMake(20,0, 180, 50);
                customerNameValue.font = [UIFont boldSystemFontOfSize:20];
                customerNameValue.frame = CGRectMake(300, 0, 300, 50);
                
                customerPhone.font = [UIFont boldSystemFontOfSize:20];
                customerPhone.frame = CGRectMake(20,35, 180, 50);
                customerPhoneValue.font = [UIFont boldSystemFontOfSize:20];
                customerPhoneValue.frame = CGRectMake(300,35, 300, 50);
                
                billID.font = [UIFont boldSystemFontOfSize:20];
                billID.frame = CGRectMake(20,75,180,50);
                billDate.font = [UIFont boldSystemFontOfSize:20];
                billDate.frame = CGRectMake(20,115,180,50);
                billDone.font = [UIFont boldSystemFontOfSize:20];
                billDone.frame = CGRectMake(20,155,180,50);
                billDetails.frame = CGRectMake(300.0, 275, 300, 50);
                billDetails.font = [UIFont boldSystemFontOfSize:25];
                billIDValue.font = [UIFont boldSystemFontOfSize:20];
                billIDValue.frame = CGRectMake(300,75,300,50);
                billDateValue.font = [UIFont boldSystemFontOfSize:20];
                billDateValue.frame = CGRectMake(300,115,300,50);
                billDoneValue.font = [UIFont boldSystemFontOfSize:20];
                billDoneValue.frame = CGRectMake(300,155,220,50);
                paymentType.font = [UIFont boldSystemFontOfSize:20];
                paymentType.frame = CGRectMake(20,195,180,50);
                bill_status.font = [UIFont boldSystemFontOfSize:20];
                bill_status.frame = CGRectMake(20,235,180,50);
                paymentTypeVal.font = [UIFont boldSystemFontOfSize:20];
                paymentTypeVal.frame = CGRectMake(300,195,220,50);
                bill_status_val.font = [UIFont boldSystemFontOfSize:20];
                bill_status_val.frame = CGRectMake(300,235,220,50);
                
                
                label_1.font = [UIFont boldSystemFontOfSize:22];
                label_1.frame = CGRectMake(22, 340, 140, 55);
                label_2.font = [UIFont boldSystemFontOfSize:22];
                label_2.frame = CGRectMake(164, 340, 140, 55);
                label_3.font = [UIFont boldSystemFontOfSize:22];
                label_3.frame = CGRectMake(306, 340, 140, 55);
                label_4.font = [UIFont boldSystemFontOfSize:22];
                label_4.frame = CGRectMake(448, 340, 140, 55);
                label_5.font = [UIFont boldSystemFontOfSize:22];
                label_5.frame = CGRectMake(590, 340, 140, 55);
                label_6.frame = CGRectMake(22, 90, 140, 55);
                label_6.font = [UIFont boldSystemFontOfSize:22];
                label_7.frame = CGRectMake(164, 90, 140, 55);
                label_7.font = [UIFont boldSystemFontOfSize:22];
                label_8.frame = CGRectMake(306, 90, 140, 55);
                label_8.font = [UIFont boldSystemFontOfSize:22];
                label_9.frame = CGRectMake(448, 90, 140, 55);
                label_9.font = [UIFont boldSystemFontOfSize:22];
                label_10.frame = CGRectMake(590, 90, 140, 55);
                label_10.font = [UIFont boldSystemFontOfSize:22];
                
                label_11.frame = CGRectMake(22, 60, 140, 55);
                label_11.font = [UIFont boldSystemFontOfSize:22];
                label_12.frame = CGRectMake(164, 60, 140,  55);
                label_12.font = [UIFont boldSystemFontOfSize:22];
                label_13.frame = CGRectMake(306, 60, 140,  55);
                label_13.font = [UIFont boldSystemFontOfSize:22];
                label_14.frame = CGRectMake(448, 60, 140,  55);
                label_14.font = [UIFont boldSystemFontOfSize:22];
                label_15.frame = CGRectMake(590, 60, 140,  55);
                label_15.font = [UIFont boldSystemFontOfSize:22];
                
                label_16.frame = CGRectMake(22,60, 140,  55);
                label_16.font = [UIFont boldSystemFontOfSize:22];
                label_17.frame = CGRectMake(164, 60, 140,  55);
                label_17.font = [UIFont boldSystemFontOfSize:22];
                label_18.frame = CGRectMake(306, 60, 140,  55);
                label_18.font = [UIFont boldSystemFontOfSize:22];
                label_19.frame = CGRectMake(448, 60, 140,  55);
                label_19.font = [UIFont boldSystemFontOfSize:22];
                label_20.frame = CGRectMake(590, 60, 140,  55);
                label_20.font = [UIFont boldSystemFontOfSize:22];
                
                discount.frame = CGRectMake(20,510,220,50);
                discount.font = [UIFont boldSystemFontOfSize:20];
                subTotalBill.frame = CGRectMake(20,550,180,50);
                subTotalBill.font = [UIFont boldSystemFontOfSize:20];
                taxlbl.frame = CGRectMake(20,590,180,50);
                taxlbl.font = [UIFont boldSystemFontOfSize:20];
                totalBill.font = [UIFont boldSystemFontOfSize:20];
                totalBill.frame = CGRectMake(20,630,180,50);
                billDue.font = [UIFont boldSystemFontOfSize:20];
                billDue.frame = CGRectMake(20,670,180,50);
                
                discountValue.frame = CGRectMake(600,510,150,50);
                discountValue.font = [UIFont boldSystemFontOfSize:20];
                subTotalBillValue.frame = CGRectMake(600,550,150,50);
                subTotalBillValue.font = [UIFont boldSystemFontOfSize:20];
                taxlblValue.frame = CGRectMake(600,590,150,50);
                taxlblValue.font = [UIFont boldSystemFontOfSize:20];
                totalBillValue.font = [UIFont boldSystemFontOfSize:20];
                totalBillValue.frame = CGRectMake(600,630,150,50);
                billDueValue.font = [UIFont boldSystemFontOfSize:20];
                billDueValue.frame = CGRectMake(600,670,150,50);
                
                transactionDetails.frame = CGRectMake(300.0, 30.0, 300.0, 30.0);
                transactionDetails.font = [UIFont boldSystemFontOfSize:25];
                returnDetails.frame = CGRectMake(300, 0, 200.0, 50.0);
                returnDetails.font = [UIFont boldSystemFontOfSize:25];
                exchangeDetails.frame = CGRectMake(300,0, 200.0, 50.0);
                exchangeDetails.font = [UIFont boldSystemFontOfSize:25];
                
                
                mainSegmentedControl.frame = CGRectMake(-2, 0, self.view.frame.size.width, 60);
                mainSegmentedControl.tintColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
                mainSegmentedControl.backgroundColor = [UIColor clearColor];
                NSDictionary *attributes = @{UITextAttributeFont: [UIFont boldSystemFontOfSize:18],UITextAttributeTextColor: [UIColor whiteColor]};
                [mainSegmentedControl setTitleTextAttributes:attributes forState:UIControlStateNormal];
                
                segmentedControl.backgroundColor = [UIColor blackColor];
                segmentedControl.frame = CGRectMake(-6,900,self.view.frame.size.width,60);
                salesIdTable.frame = CGRectMake(165, 117, 360, 400);
                scrollView.frame = CGRectMake(0, 400, 778, 100);
                scrollView.contentSize = CGSizeMake(778, 500);
                scrollView1.frame = CGRectMake(0, 150, 778, 300);
                scrollView1.contentSize = CGSizeMake(778, 500);
                scrollView2.frame = CGRectMake(0, 125, 800, 300);
                scrollView2.contentSize = CGSizeMake(800, 500);
                scrollView3.frame = CGRectMake(0, 125, 800, 300);
                scrollView3.contentSize = CGSizeMake(800, 500);
                paymentDetailsTable.frame = CGRectMake(12, 0, 750, 300);
                totalPaymentLbl.frame = CGRectMake(60, 310, 150, 30);
                totalPaymentLbl.font =  [UIFont boldSystemFontOfSize:20];
                totalPaymentVal.frame = CGRectMake(600, 310, 200, 30);
                totalPaymentVal.font =  [UIFont boldSystemFontOfSize:20];
                
                selectedSaleIdTable.frame = CGRectMake(12, 0, 750, 150);
                returnDetailsTable.frame = CGRectMake(12, 0, scrollView2.frame.size.width-80, scrollView2.frame.size.height);
                exchangeDetailsTable.frame = CGRectMake(12, 0, scrollView3.frame.size.width-80, scrollView3.frame.size.height);
                
                
                group.frame = CGRectMake(20, 100, 758, 340);
                
            }
            
        }
        
        [selectedSaleIdTable reloadData];
        if (mainSegmentedControl.selectedSegmentIndex == 2) {
            
            // [self populateReturnView];
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                    
                    returnView.frame = CGRectMake(0, 70, self.view.frame.size.width,self.view.frame.size.height-200);
                    
                    returnBillID.frame = CGRectMake(80, 5.0, 120.0, 30);
                    returnBillIDValue.frame = CGRectMake(230, 5.0, 250, 30.0);
                    returnBillID.font = [UIFont boldSystemFontOfSize:25];
                    returnBillIDValue.font = [UIFont boldSystemFontOfSize:22];
                    
                    label_1.font = [UIFont systemFontOfSize:18];
                    label_1.frame = CGRectMake(10, 50, 90, 30);
                    label_2.font = [UIFont systemFontOfSize:18];
                    label_2.frame = CGRectMake(105, 50, 90, 30);
                    label_3.font = [UIFont systemFontOfSize:18];
                    label_3.frame = CGRectMake(200, 50, 100, 30);
                    label_4.font = [UIFont systemFontOfSize:18];
                    label_4.frame = CGRectMake(305, 50, 100, 30);
                    label_5.font = [UIFont systemFontOfSize:18];
                    label_5.frame = CGRectMake(410, 50, 90, 30);
                    
                    itemScroll.frame = CGRectMake(0, 90, 550,170);
                    itemScroll.contentSize = CGSizeMake(778, 500);
                    itemTable.frame = CGRectMake(0.0, 0, 550, 170);
                    
                    deals.frame = CGRectMake(35.0, 280, 180, 30.0);
                    deals.font = [UIFont systemFontOfSize:18];
                    deals_value.frame = CGRectMake(380,280, 120.0, 30.0);
                    deals_value.font = [UIFont systemFontOfSize:18];
                    
                    subtotal.frame = CGRectMake(35.0, 310, 120.0, 30.0);
                    subtotal.font = [UIFont systemFontOfSize:18];
                    subtotal_value.frame = CGRectMake(380,310, 120.0, 30.0);
                    subtotal_value.font = [UIFont systemFontOfSize:18];
                    
                    total_Bill.frame = CGRectMake(35.0, 340, 120.0, 30.0);
                    total_Bill.font = [UIFont systemFontOfSize:18];
                    total_Bill_Value.frame = CGRectMake(380,340, 120.0, 30.0);
                    total_Bill_Value.font = [UIFont systemFontOfSize:18];
                    
                    returningTotalBill.frame = CGRectMake(35.0, 380, 240.0, 40.0);
                    returningTotalBill.font = [UIFont systemFontOfSize:18];
                    returningTotalBillValue.frame = CGRectMake(380,380, 120.0, 30.0);
                    returningTotalBillValue.font =[UIFont systemFontOfSize:18];
                    reason.frame = CGRectMake(35.0, 420, 120.0, 30);
                    reason.font = [UIFont systemFontOfSize:18];
                    
                    // reasonTextField.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"Enter your reason" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.8]}];
                    submitButton.frame = CGRectMake(360, 590, 200.0, 40);
                    submitButton.titleLabel.font = [UIFont systemFontOfSize:25.0];
                    
                    
                    
                    //added by Srinivasulu on 17/04/2017....
                    //                returnView.contentSize = CGSizeMake(778, 800);
                    
                    
                    itemScroll.contentSize = CGSizeMake( itemScroll.frame.size.width, itemTable.frame.size.height);
                    
                    //                returnView.contentSize = CGSizeMake( returnView.frame.size.width, returnView.contentSize.height);
                    
                    returnView.contentSize = CGSizeMake( returnView.frame.size.width, submitButton.frame.origin.y - (segmentedControl.frame.origin.y + segmentedControl.frame.size.height));
                    
                    
                    //upot here on  17/04/2017....
                    
                    
                    
                }
                else {
                    returnView.frame = CGRectMake(0, 70, self.view.frame.size.width,self.view.frame.size.height-230);
                    returnView.contentSize = CGSizeMake(778, 800);
                    
                    returnBillID.frame = CGRectMake(250.0, 5.0, 120.0, 30);
                    returnBillIDValue.frame = CGRectMake(400.0, 5.0, 250, 30.0);
                    returnBillID.font = [UIFont boldSystemFontOfSize:25];
                    returnBillIDValue.font = [UIFont boldSystemFontOfSize:22];
                    label_1.font = [UIFont systemFontOfSize:25.0];
                    label_1.frame = CGRectMake(10, 50, 140, 55);
                    label_2.font = [UIFont systemFontOfSize:25.0];
                    label_2.frame = CGRectMake(154, 50, 140, 55);
                    label_3.font = [UIFont systemFontOfSize:25.0];
                    label_3.frame = CGRectMake(296, 50, 140, 55);
                    label_4.font = [UIFont systemFontOfSize:25.0];
                    label_4.frame = CGRectMake(438, 50, 140, 55);
                    label_5.font = [UIFont systemFontOfSize:25.0];
                    label_5.frame = CGRectMake(580, 50, 120, 55);
                    itemScroll.frame = CGRectMake(0, 120, self.view.frame.size.width,130);
                    itemScroll.contentSize = CGSizeMake(778, 500);
                    itemTable.frame = CGRectMake(0.0, 0, itemScroll.frame.size.width, 130);
                    
                    deals.frame = CGRectMake(35.0, 280, 180, 30.0);
                    deals.font = [UIFont systemFontOfSize:22];
                    deals_value.frame = CGRectMake(610,280, 120.0, 30.0);
                    deals_value.font = [UIFont systemFontOfSize:22];
                    
                    subtotal.frame = CGRectMake(35.0, 320, 120.0, 30.0);
                    subtotal.font = [UIFont systemFontOfSize:22];
                    subtotal_value.frame = CGRectMake(610,320, 120.0, 30.0);
                    subtotal_value.font = [UIFont systemFontOfSize:22];
                    
                    total_Bill.frame = CGRectMake(35.0, 360, 120.0, 30.0);
                    total_Bill.font = [UIFont systemFontOfSize:22];
                    total_Bill_Value.frame = CGRectMake(610,360, 120.0, 30.0);
                    total_Bill_Value.font = [UIFont systemFontOfSize:22];
                    
                    returningTotalBill.frame = CGRectMake(35.0, 400, 240.0, 40.0);
                    returningTotalBill.font = [UIFont systemFontOfSize:22];
                    returningTotalBillValue.frame = CGRectMake(610,400, 120.0, 30.0);
                    returningTotalBillValue.font =[UIFont systemFontOfSize:22];
                    reason.frame = CGRectMake(35.0, 440, 120.0, 30);
                    reason.font = [UIFont systemFontOfSize:22];
                    
                    // reasonTextField.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"Enter your reason" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.8]}];
                    submitButton.frame = CGRectMake(280.0, 840, 200.0, 50.0);
                    submitButton.titleLabel.font = [UIFont systemFontOfSize:25.0];
                }
                
            }
            
            [itemTable reloadData];
            [returnDetailsTable reloadData];
            
        }
        if (mainSegmentedControl.selectedSegmentIndex == 3) {
            //
            //[self populateReturnView];
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                
                if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                    
                    exchangeView.frame = CGRectMake(0, 70, self.view.frame.size.width,self.view.frame.size.height-200);
                    exchangeView.contentSize = CGSizeMake(778, 800);
                    
                    exchgBillID.frame = CGRectMake(80, 5.0, 120.0, 30);
                    exchgBillIDValue.frame = CGRectMake(230, 5.0, 250, 30.0);
                    exchgBillID.font = [UIFont boldSystemFontOfSize:25];
                    exchgBillIDValue.font = [UIFont boldSystemFontOfSize:22];
                    
                    label_1.font = [UIFont systemFontOfSize:18];
                    label_1.frame = CGRectMake(10, 50, 90, 30);
                    label_2.font = [UIFont systemFontOfSize:18];
                    label_2.frame = CGRectMake(105, 50, 90, 30);
                    label_3.font = [UIFont systemFontOfSize:18];
                    label_3.frame = CGRectMake(200, 50, 100, 30);
                    label_4.font = [UIFont systemFontOfSize:18];
                    label_4.frame = CGRectMake(305, 50, 100, 30);
                    label_5.font = [UIFont systemFontOfSize:18];
                    label_5.frame = CGRectMake(410, 50, 90, 30);
                    
                    itemExchScroll.frame = CGRectMake(0, 90, 550,170);
                    itemExchScroll.contentSize = CGSizeMake(778, 500);
                    itemTableExchg.frame = CGRectMake(0.0, 0, 550, 170);
                    
                    deals.frame = CGRectMake(35.0, 280, 180, 30.0);
                    deals.font = [UIFont systemFontOfSize:18];
                    deals_value.frame = CGRectMake(380,280, 120.0, 30.0);
                    deals_value.font = [UIFont systemFontOfSize:18];
                    
                    subtotal.frame = CGRectMake(35.0, 310, 120.0, 30.0);
                    subtotal.font = [UIFont systemFontOfSize:18];
                    subtotal_value.frame = CGRectMake(380,310, 120.0, 30.0);
                    subtotal_value.font = [UIFont systemFontOfSize:18];
                    
                    total_Bill.frame = CGRectMake(35.0, 340, 120.0, 30.0);
                    total_Bill.font = [UIFont systemFontOfSize:18];
                    total_Bill_Value.frame = CGRectMake(380,340, 120.0, 30.0);
                    total_Bill_Value.font = [UIFont systemFontOfSize:18];
                    
                    returningTotalBill.frame = CGRectMake(35.0, 380, 240.0, 40.0);
                    returningTotalBill.font = [UIFont systemFontOfSize:18];
                    exchangeTotalBillValue.frame = CGRectMake(380,380, 120.0, 30.0);
                    exchangeTotalBillValue.font =[UIFont systemFontOfSize:18];
                    reason.frame = CGRectMake(35.0, 420, 120.0, 30);
                    reason.font = [UIFont systemFontOfSize:18];
                    
                    
                    // reasonTextField.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"Enter your reason" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.8]}];
                    submitButton.frame = CGRectMake(360, 590, 200.0, 40);
                    submitButton.titleLabel.font = [UIFont systemFontOfSize:25.0];
                }
                else {
                    exchangeView.frame = CGRectMake(0, 70, self.view.frame.size.width,self.view.frame.size.height-230);
                    exchangeView.contentSize = CGSizeMake(778, 800);
                    
                    exchgBillID.frame = CGRectMake(250.0, 5.0, 120.0, 30);
                    exchgBillIDValue.frame = CGRectMake(400.0, 5.0, 250, 30.0);
                    exchgBillID.font = [UIFont boldSystemFontOfSize:25];
                    exchgBillIDValue.font = [UIFont boldSystemFontOfSize:22];
                    label_1.font = [UIFont systemFontOfSize:25.0];
                    label_1.frame = CGRectMake(10, 50, 140, 55);
                    label_2.font = [UIFont systemFontOfSize:25.0];
                    label_2.frame = CGRectMake(154, 50, 140, 55);
                    label_3.font = [UIFont systemFontOfSize:25.0];
                    label_3.frame = CGRectMake(296, 50, 140, 55);
                    label_4.font = [UIFont systemFontOfSize:25.0];
                    label_4.frame = CGRectMake(438, 50, 140, 55);
                    label_5.font = [UIFont systemFontOfSize:25.0];
                    label_5.frame = CGRectMake(580, 50, 120, 55);
                    itemExchScroll.frame = CGRectMake(0, 120, self.view.frame.size.width,130);
                    itemExchScroll.contentSize = CGSizeMake(778, 500);
                    itemTableExchg.frame = CGRectMake(0.0, 0, itemScroll.frame.size.width, 130);
                    
                    deals.frame = CGRectMake(35.0, 280, 180, 30.0);
                    deals.font = [UIFont systemFontOfSize:22];
                    deals_value.frame = CGRectMake(610,280, 120.0, 30.0);
                    deals_value.font = [UIFont systemFontOfSize:22];
                    
                    subtotal.frame = CGRectMake(35.0, 320, 120.0, 30.0);
                    subtotal.font = [UIFont systemFontOfSize:22];
                    subtotal_value.frame = CGRectMake(610,320, 120.0, 30.0);
                    subtotal_value.font = [UIFont systemFontOfSize:22];
                    
                    total_Bill.frame = CGRectMake(35.0, 360, 120.0, 30.0);
                    total_Bill.font = [UIFont systemFontOfSize:22];
                    total_Bill_Value.frame = CGRectMake(610,360, 120.0, 30.0);
                    total_Bill_Value.font = [UIFont systemFontOfSize:22];
                    
                    returningTotalBill.frame = CGRectMake(35.0, 400, 240.0, 40.0);
                    returningTotalBill.font = [UIFont systemFontOfSize:22];
                    exchangeTotalBillValue.frame = CGRectMake(610,400, 120.0, 30.0);
                    exchangeTotalBillValue.font =[UIFont systemFontOfSize:22];
                    reason.frame = CGRectMake(35.0, 440, 120.0, 30);
                    reason.font = [UIFont systemFontOfSize:22];
                    
                    // reasonTextField.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"Enter your reason" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.8]}];
                    submitButton.frame = CGRectMake(280.0, 840, 200.0, 50.0);
                    submitButton.titleLabel.font = [UIFont systemFontOfSize:25.0];
                }
                
            }
        }
        
        [itemTableExchg reloadData];
        [exchangeDetailsTable reloadData];
        
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
    }
    @finally {
        
        
    }
    //    [self populateExchangeView];
    //    [self populateReturnView];
    
}

#pragma -mark billDetailsDelegates

-(void)getBillDetailsSuccesResponse:(NSDictionary *)successDictionary{
    
    [self getBillingDetailsHandler:[successDictionary mutableCopy]];
}
-(void)getBillsFailureResponse:(NSString *)failureString {
    [HUD setHidden:YES];
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:failureString message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
    [alert show];
}
-(void)popUpView {
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    //[popButton setEnabled:FALSE];
    
    PopOverViewController *popOverViewController = [[PopOverViewController alloc] init];
    
    UIView *categoriesView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 160.0, 200.0)];
    categoriesView.opaque = NO;
    categoriesView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
    categoriesView.layer.borderColor = [UIColor lightGrayColor].CGColor;
    categoriesView.layer.borderWidth = 2.0f;
    [categoriesView setHidden:NO];
    CGFloat top = 0.0;
    
    NSMutableArray *folderStructure = [[NSMutableArray alloc] init];
    [folderStructure addObject:@"Home"];
    [folderStructure addObject:@"New Billing"];
    [folderStructure addObject:@"Return Item"];
    [folderStructure addObject:@"Exchange Item"];
    [folderStructure addObject:@"Logout"];
    
    for (int i = 0; i < folderStructure.count; i++) {
        UIButton *upload = [[UIButton alloc] init];
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            categoriesView.frame = CGRectMake(0, 0, 230, 250);
            upload.frame = CGRectMake(-25, top, 280.0, 50.0);
        }
        else{
            upload.titleLabel.font = [UIFont systemFontOfSize:15.0f];
            upload.frame = CGRectMake(0.0, top, 160.0, 50.0);
        }
        upload.backgroundColor = [UIColor clearColor];
        upload.tag = i;
        [upload setTitle:folderStructure[i] forState:UIControlStateNormal];
        [upload setTitleColor:[UIColor darkGrayColor] forState:UIControlStateNormal];
        [upload addTarget:self action:@selector(buttonClicked1:) forControlEvents:UIControlEventTouchUpInside];
        upload.layer.borderWidth = 0.5f;
        upload.layer.borderColor = [UIColor grayColor].CGColor;
        top = top+50.0;
        [categoriesView addSubview:upload];
    }
    
    popOverViewController.view = categoriesView;
    
    
    if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
        popOverViewController.preferredContentSize =  CGSizeMake(categoriesView.frame.size.width, categoriesView.frame.size.height);
        
        UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:popOverViewController];
        
        [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        
        self.popOver = popover;
    }
    else {
        
        if (version >= 8.0) {
            
            //         popOverViewController.preferredContentSize = CGSizeMake(100.0, 150.0);
            //         UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:popOverViewController];
            //          [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            //         self.popOver = popover;
            
            action = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:nil destructiveButtonTitle:nil otherButtonTitles:@"Home",@"New Billing",@"Return Item",@"Exchange Item",@"Logout",@"Cancel", nil];
            [action showFromBarButtonItem:sendButton animated:YES];
        }
        else {
            popOverViewController.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:popOverViewController];
            // popover.contentViewController.view.alpha = 0.0;
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            self.popOver = popover;
        }
    }
    
    
}

-(void) buttonClicked1:(UIButton*)sender
{
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    //[popButton setEnabled:YES];
    
    [self.popOver dismissPopoverAnimated:YES];
    if (sender.tag == 0) {
        
        [self.popOver dismissPopoverAnimated:YES];
        OmniHomePage *home = [[OmniHomePage alloc] init] ;
        [self.navigationController pushViewController:home animated:YES];
    }
    else if (sender.tag == 1) {
        
        [self.popOver dismissPopoverAnimated:YES];
        
        self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
        self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil];
        
        BillingHome *bh = [[BillingHome alloc] init] ;
        [self.navigationController pushViewController:bh animated:YES];
    }
    else if (sender.tag == 2){
        
        CheckWifi *wifi = [[CheckWifi alloc]init];
        BOOL status = [wifi checkWifi];
        
        if (status) {
            
            [self.popOver dismissPopoverAnimated:YES];
            NSString *value = [billIDValue.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            if (value.length == 0) {
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Please provide bill id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if (due != 0.0){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Please clear the bill due" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if (tempReturnDetails.count > 0 || tempExchangeDetails.count > 0){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Exchange/Return already done for this bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if (tempReturnDetails.count > 0 && tempExchangeDetails.count > 0){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Exchange/Return already done for this bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else{
                self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
                self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil] ;
                
                ReturnItem *bh = [[ReturnItem alloc] initWithBillType:value returningItems:tempArrayItems totalBill:totalBillValue.text billStatus:pastBillStatus1 deals:discount.text subtotal: subTotalBillValue.text];
                [self.navigationController pushViewController:bh animated:YES];
                //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"This feature is not available for this edition" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //            [alert show];
                //            [alert release];
            }
        }
        else {
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
        }
    }
    else if (sender.tag == 3){
        CheckWifi *wifi = [[CheckWifi alloc]init];
        BOOL status = [wifi checkWifi];
        
        if (status) {
            [self.popOver dismissPopoverAnimated:YES];
            NSString *value = [billIDValue.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            if (value.length == 0) {
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Please provide bill id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if (due != 0.0){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Please clear the bill due" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if (tempReturnDetails.count > 0 || tempExchangeDetails.count > 0){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Exchange/Return already done for this bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if (tempReturnDetails.count > 0 && tempExchangeDetails.count > 0){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Exchange/Return already done for this bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else{
                
                self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
                self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil] ;
                
                ExchangeItem *bh = [[ExchangeItem alloc] initWithBillType:value exchangingItems:tempArrayItems totalBill:totalBillValue.text billStatus:pastBillStatus1] ;
                [self.navigationController pushViewController:bh animated:YES];
                
                //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"This feature is not available for this edition" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //            [alert show];
                //            [alert release];
            }
        }
        else {
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
        }
    }
    else{
        [self.popOver dismissPopoverAnimated:YES];
        OmniHomePage *omniRetailerViewController = [[OmniHomePage alloc] init];
        [omniRetailerViewController logOut];
    }
}

-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {
    
    if (buttonIndex == 0) {
        
        AudioServicesPlaySystemSound (soundFileObject);
        [action dismissWithClickedButtonIndex:0 animated:YES];
        OmniHomePage *home = [[OmniHomePage alloc] init] ;
        [self.navigationController pushViewController:home animated:YES];
    }
    else if (buttonIndex == 1) {
        
        //Play Audio for button touch....
        
        AudioServicesPlaySystemSound (soundFileObject);
        
        [action dismissWithClickedButtonIndex:0 animated:YES];
        
        self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
        self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil] ;
        
        BillingHome *bh = [[BillingHome alloc] init] ;
        [self.navigationController pushViewController:bh animated:YES];
    }
    else if (buttonIndex == 2){
        [action dismissWithClickedButtonIndex:0 animated:YES];
        NSString *value = [pastBillField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        if (value.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Please provide bill id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else if (due != 0.0){
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Please clear the bill due" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else if (tempReturnDetails.count > 0 || tempExchangeDetails.count > 0){
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Exchange/Return already done for this bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else if (tempReturnDetails.count > 0 && tempExchangeDetails.count > 0){
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Exchange/Return already done for this bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else{
            self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
            self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil] ;
            
            ReturnItem *bh = [[ReturnItem alloc] initWithBillType:pastBillField.text returningItems:tempArrayItems totalBill:totalBillValue.text billStatus:pastBillStatus1 deals:discountValue.text subtotal:subTotalBillValue.text] ;
            [self.navigationController pushViewController:bh animated:YES];
        }
    }
    else if (buttonIndex== 3){
        [action dismissWithClickedButtonIndex:0 animated:YES];
        NSString *value = [pastBillField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        if (value.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Please provide bill id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else if (due != 0.0){
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Please clear the bill due" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else if (tempReturnDetails.count > 0 || tempExchangeDetails.count > 0){
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Exchange/Return already done for this bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else if (tempReturnDetails.count > 0 && tempExchangeDetails.count > 0){
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sorry" message:@"Exchange/Return already done for this bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else{
            self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
            self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil] ;
            
            ExchangeItem *bh = [[ExchangeItem alloc] initWithBillType:pastBillField.text exchangingItems:tempArrayItems totalBill:totalBillValue.text billStatus:pastBillStatus1] ;
            [self.navigationController pushViewController:bh animated:YES];
        }
    }
    else if(buttonIndex == 4){
        [action dismissWithClickedButtonIndex:0 animated:YES];
        AudioServicesPlaySystemSound (soundFileObject);
        OmniHomePage *omniRetailerViewController = [[OmniHomePage alloc] init];
        [omniRetailerViewController logOut];
    }
    else {
        [action dismissWithClickedButtonIndex:0 animated:YES];
        
    }
    
}



-(void)popoverControllerDidDismissPopover:(UIPopoverController *)popoverController {
    self.popOver = nil;
}


// TextFieldDidChange handler...


- (void)getSearchedProductDetails:(NSString *)searchString {
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
        
        
        NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%%%@%%' or item_name LIKE '%%%@%%' or description LIKE '%%%@%%' or ean LIKE '%%%@%%' LIMIT 30",searchString,searchString,searchString,searchString];
        const char *sqlStatement = query.UTF8String;
        
        
        if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
            //                        int count = sqlite3_column_count(selectStmt);
            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                
                NSString  *skuId = @((char *)sqlite3_column_text(selectStmt, 0));
                NSString  *name = @((char *)sqlite3_column_text(selectStmt, 12));
                NSString  *description = @((char *)sqlite3_column_text(selectStmt, 2));
                NSString  *price = @((char *)sqlite3_column_text(selectStmt,10));
                NSString  *ean = @((char *)sqlite3_column_text(selectStmt, 1));
                
                NSMutableDictionary *searchResult = [[NSMutableDictionary alloc]init];
                
                searchResult[@"skuID"] = skuId;
                searchResult[@"description"] = description;
                searchResult[@"name"] = name;
                searchResult[@"price"] = price;
                searchResult[@"ean"] = ean;
                
                [tempSkuArrayList addObject:searchResult];
                
                
            }
            sqlite3_finalize(selectStmt);
        }
        else {
            NSLog(@"%s",sqlite3_errmsg(database)) ;
        }
        
        NSLog(@"%@",tempSkuArrayList);
    }
    sqlite3_close(database);
    
}

-(void)getSearchedProductsFromEAN:(NSString *)searchString {
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
        
        
        NSString *query = [NSString stringWithFormat:@"select * from sku_eans where ean LIKE '%%%@%%' LIMIT 30",searchString];
        const char *sqlStatement = query.UTF8String;
        
        
        if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
            //                        int count = sqlite3_column_count(selectStmt);
            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                
                NSString  *skuId = @((char *)sqlite3_column_text(selectStmt, 1));
                [self getSearchedProductDetails:skuId];
            }
            sqlite3_finalize(selectStmt);
        }
        else {
            NSLog(@"%s",sqlite3_errmsg(database)) ;
        }
        
    }
    sqlite3_close(database);
}

-(void)changeQuantity:(UIButton *)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    [qtyFeild resignFirstResponder];
    cartTable.userInteractionEnabled = TRUE;
    segmentedControl.userInteractionEnabled = TRUE;
    BillField.userInteractionEnabled = TRUE;
    
    BOOL shouldCallOffers = YES;
    
    NSString *value = [qtyFeild.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    // PhoNumber validation...
    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
    BOOL isNumber = [decimalTest evaluateWithObject:qtyFeild.text];
    int qty = value.intValue;
    
    if(value.length == 0 || !isNumber){
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Quantity in Number." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
        qtyFeild.text = NO;
    }
    else if((qtyFeild.text).intValue==0){
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Valid Quantity." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
        qtyFeild.text = nil;
    }
    else{
        
        @try {
            
            //
            //
            NSDictionary *cartItemDic = cartTotalItems[tagid];
            NSString *skuid =  [cartItemDic valueForKey:SKU_ID];
            discountValue.text = @"0.0";
            
            
            
            // replace the cart array by new values ..
            float price = 0.0;
            
            float unitPrice = ([[cartItemDic valueForKey:ITEM_TOTAL_PRICE] floatValue] / [[cartItemDic valueForKey:QUANTITY] intValue]);
            
            NSInteger positionCount;
            int i = 0;
            for (NSDictionary *dictionary in tempArrayItems) {
                if ([[dictionary valueForKey:SKU_ID] isEqualToString:skuid] && [[dictionary valueForKey:ITEMUNITPRICE] floatValue] == unitPrice) {
                    positionCount = i;
                }
                i++;
            }
            
            //             positionCount = [tempArrayItems indexOfObject:[cartTotalItems objectAtIndex:tagid]];
            
            NSDictionary *temp = tempArrayItems[positionCount];
            
            [qty1 setTitle:[NSString stringWithFormat:@"%d",(qtyFeild.text).intValue] forState:UIControlStateNormal] ;
            
            NSMutableDictionary *itemDetailsDic = [NSMutableDictionary new];
            [itemDetailsDic setValue:[temp valueForKey:SKU_ID] forKey:SKU_ID];
            [itemDetailsDic setValue:[temp valueForKey:ITEM_NAME] forKey:ITEM_NAME];
            [itemDetailsDic setValue:qty1.titleLabel.text forKey:QUANTITY];
            [itemDetailsDic setValue:[temp valueForKey:ITEMUNITPRICE] forKey:ITEMUNITPRICE];
            [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",([[temp valueForKey:ITEMUNITPRICE] floatValue] * (qty1.titleLabel.text).intValue)] forKey:ITEM_TOTAL_PRICE];
            [itemDetailsDic setValue:[temp valueForKey:TAX_CODE] forKey:TAX_CODE];
            [itemDetailsDic setValue:[temp valueForKey:TAX_RATE] forKey:TAX_RATE];
            [itemDetailsDic setValue:[temp valueForKey:AVAIL_QTY] forKey:AVAIL_QTY];
            [itemDetailsDic setValue:[temp valueForKey:PLU_CODE] forKey:PLU_CODE];
            [itemDetailsDic setValue:[temp valueForKey:EDITED_PRICE] forKey:EDITED_PRICE];
            [itemDetailsDic setValue:[temp valueForKey:MRP_Price] forKey:MRP_Price];
            [itemDetailsDic setValue:[temp valueForKey:ITEM_DISCOUNT] forKey:ITEM_DISCOUNT];
            [itemDetailsDic setValue:@([[temp valueForKey:ITEM_OFFER_PRICE] floatValue]) forKey:ITEM_OFFER_PRICE];
            [itemDetailsDic setValue:@([[temp valueForKey:ITEM_DEAL_PRICE] floatValue]) forKey:ITEM_DEAL_PRICE];
            
            
            tempArrayItems[positionCount] = itemDetailsDic;
            cartTotalItems[tagid] = itemDetailsDic;
            cartItemDetails[positionCount] = qty1.titleLabel.text;
            
            for (int i=0; i<tempArrayItems.count; i++) {
                NSDictionary *itemDic = tempArrayItems[i];
                DealsController *_dealsController = [[DealsController alloc] init];
                NSDictionary *dealSkuids_ = _dealsController.productData;
                
                for (int d=0 ; d<dealSkuids_.allKeys.count; d++) {
                    
                    if ([[itemDic valueForKey:SKU_ID] isEqualToString:dealSkuids_.allKeys[d]] && (qty == [[dealSkuids_ valueForKey:[itemDic valueForKey:SKU_ID]][1] intValue])) {
                        
                        shouldCallOffers = NO;
                        
                    }
                    
                }
                price = price + ([[itemDic valueForKey:ITEM_TOTAL_PRICE] floatValue]);
            }
            NSDictionary *arr = tempArrayItems[positionCount];
            [HUD setHidden:NO];
            if (!isOfflineService) {
                
                [self callOffersForScanning:skuid qty:[NSString stringWithFormat:@"%d",qty] total:[NSString stringWithFormat:@"%.2f",price] itemPrice:[NSString stringWithFormat:@"%.02f",[[arr valueForKey:ITEM_TOTAL_PRICE] floatValue]]];
                
            }
            else {
                [HUD setHidden:YES];
                
                offline = [[OfflineBillingServices alloc]init];
                NSDictionary *json = [offline applyDealsAndOffers:skuid qty:qty1.titleLabel.text total:[[NSString stringWithFormat:@"%.2f",price] copy] itemPrice:[NSString stringWithFormat:@"%.02f",[[arr valueForKey:ITEM_TOTAL_PRICE] floatValue]]];
                [self applyDealsOffline:json sku_id:selected_SKID];
            }
            
            qtyChangeDisplyView.hidden = YES;
            
            
            [selectedSaleIdTable reloadData];
            
            [self updateValues];
            [self updateItemScanTime];
            
            [HUD setHidden:YES];
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"exception %@",exception);
        }
        
    }
}
- (IBAction)quantityCancel:(id)sender {
    
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    @try {
        
        [segmentedControl setUserInteractionEnabled:YES];
        qtyChangeDisplyView.hidden = YES;
        selectedSaleIdTable.userInteractionEnabled = TRUE;
        
        BillField.userInteractionEnabled = TRUE;
        
        [selectedSaleIdTable reloadData];
    }
    @catch (NSException *exception) {
        
        
    }
    
}
-(void)callSkuIdService:(NSString *)searchString startIndex:(NSString *)start_index {
    
    CheckWifi *wifi = [[CheckWifi alloc]init];
    
    BOOL status = [wifi checkWifi];
    
    if (status) {
        
        
        [HUD setHidden:NO];
        tempSkuArrayList = [[NSMutableArray alloc]init];
        @try {
            NSArray *keys = @[@"requestHeader",@"startIndex",@"searchCriteria",@"storeLocation"];
            NSArray *objects = @[[RequestHeader getRequestHeader],@"-1",searchString,presentLocation];
            
            NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            
            NSError * err;
            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
            NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            //            getSkuid.searchCriteria = salesReportJsonString;
            //
            if (tempSkuArrayList.count!=0) {
                [tempSkuArrayList removeAllObjects];
            }
            //
            WebServiceController *serviceController = [WebServiceController new];
            serviceController.searchProductDelegate = self;
            [serviceController searchProductsWithData:salesReportJsonString];
            
            
            //            SkuServiceSoapBindingResponse *response = [skuService searchProductsUsingParameters:getSkuid];
            //            if (![response isKindOfClass:[NSError class]]) {
            //
            //                NSArray *responseBodyParts = response.bodyParts;
            //                for (id bodyPart in responseBodyParts) {
            //                    if ([bodyPart isKindOfClass:[SkuServiceSvc_searchProductsResponse class]]) {
            //                        SkuServiceSvc_searchProductsResponse *body = (SkuServiceSvc_searchProductsResponse *)bodyPart;
            //                        printf("\nresponse=%s",[body.return_ UTF8String]);
            //                        NSError *e;
            //                        NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
            //                                                                             options: NSJSONReadingMutableContainers
            //                                                                               error: &e];
            //                        [HUD setHidden:YES];
            //
            //                        NSArray *list = [JSON objectForKey:@"productsList"];
            //
            //                        [tempSkuArrayList addObjectsFromArray:list];
            //                    }
            //                }
            //            }
            //            else {
            //
            //                [HUD setHidden:YES];
            //            }
            
        }
        @catch (NSException *exception) {
            
            [HUD setHidden:YES];
            
            //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"No data found" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //        [alert show];
            
        }
    }
    else {
        
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Please enable wi-fi or mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alertView show];
    }
}

#pragma mark - Search Products Service Reposnse Delegates

- (void)searchProductsSuccessResponse:(NSDictionary *)successDictionary {
    
    [HUD setHidden:YES];
    [tempSkuArrayList removeAllObjects];
    //
    if (![successDictionary[@"productsList"] isKindOfClass:[NSNull class]]) {
        NSArray *list = successDictionary[@"productsList"];
        [tempSkuArrayList addObjectsFromArray:list];
    }
    for (NSDictionary *product in tempSkuArrayList)
    {
        NSComparisonResult result;
        if ([product[@"productId"] length]!=0) {
            
            if (!([product[@"productId"] rangeOfString:BillField.text options:NSCaseInsensitiveSearch].location == NSNotFound))
            {
                result = [product[@"productId"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, (BillField.text).length)];
                if (result == NSOrderedSame)
                {
                    [skListArr addObject:product[@"productId"]];
                    if (!isOfflineService) {
                        
                        [filteredPriceArr addObject:[product[@"price"] stringValue]];
                        
                    }
                    else {
                        [filteredPriceArr addObject:product[@"price"] ];
                        
                    }                            [skuArrayList addObject:product];
                }
            }
        }
        
        if (!([product[@"description"] rangeOfString:BillField.text options:NSCaseInsensitiveSearch].location == NSNotFound)) {
            
            [skListArr addObject:product[@"description"]];
            if (!isOfflineService) {
                
                [filteredPriceArr addObject:[product[@"price"] stringValue]];
                
            }
            else {
                [filteredPriceArr addObject:product[@"price"] ];
                
            }
            [skuArrayList addObject:product];
            
            
            
        }
        if (product[@"ean"]!=nil || [product[@"ean"] rangeOfString:BillField.text options:NSCaseInsensitiveSearch].location != NSNotFound) {
            if (![skListArr containsObject:product[@"description"]]) {
                [skListArr addObject:product[@"description"]];
                if (!isOfflineService) {
                    
                    [filteredPriceArr addObject:[product[@"price"] stringValue]];
                    
                }
                else {
                    [filteredPriceArr addObject:product[@"price"] ];
                    
                }
                [skuArrayList addObject:product];
                
            }
            
        }
        else {
            
            // [filteredSkuArrayList addObject:[product objectForKey:@"skuID"]];
            
            
            result = [product[@"skuID"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, (BillField.text).length)];
            
            if (result == NSOrderedSame)
            {
                [skListArr addObject:product[@"skuID"]];
                [filteredPriceArr addObject:product[@"price"] ];
                [skuArrayList addObject:product];
                
            }
        }
        
        
    }
    
    //[newBillField setEnabled:FALSE];
    
    if (skListArr.count > 0) {
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                
                skListTable.frame = CGRectMake(450, 40, 480,240);
                
            }
            else {
                skListTable.frame = CGRectMake(175, 100, 480,240);
                
            }
        }
        else {
            if (version >= 8.0) {
                skListTable.frame = CGRectMake(40, 145, 180,180);
            }
            else{
                skListTable.frame = CGRectMake(20, 75, 213,100);
            }
        }
        
        if (skListArr.count > 5) {
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                    
                    skListTable.frame = CGRectMake(450, 40, 480,450);
                    
                }
                else {
                    skListTable.frame = CGRectMake(175, 100, 480,450);
                    
                }
            }
            else {
                if (version >= 8.0) {
                    skListTable.frame = CGRectMake(40, 145, 180,180);
                }
                else{
                    skListTable.frame = CGRectMake(20, 75, 213,130);
                }
            }
        }
        skListTable.hidden = NO;
        [billingScrollView bringSubviewToFront:skListTable];
        [skListTable reloadData];
    }
    else {
        
        skListTable.hidden = YES;
        
    }
    
}
- (void)searchProductsErrorResponse {
    [HUD setHidden:YES];
    
}


// Handle the response from getExistedSaleID.
- (void) getExistedSaleIDHandler: (NSDictionary *) value {
    
    @try {
        NSArray *temp = value[@"billIds"];
        
        if (temp.count > 0 ){
            salesIdArray = nil;
            salesIdArray = [[NSMutableArray alloc] init];
            
            
            salesIdArray = [temp copy];
            
            filteredSkuArrayList = nil;
            filteredSkuArrayList = salesIdArray;
            
            if (filteredSkuArrayList.count>0) {
                
                salesIdTable.hidden = NO;
                [billingScrollView bringSubviewToFront:salesIdTable];
                
                [salesIdTable reloadData];
            }
            
            
        }
        else{
            
            [HUD setHidden:YES];
            
            //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"No Data found" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            //        [alert show];
            //        [alert release];
            [salesIdTable setHidden:YES];
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

// BarCodeImageClicked handler....

- (IBAction)barCodeImageClicked:(id)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
    }
    else{
        changeReturnLabel.hidden = YES;
        changeReturnLabelValue.hidden = YES;
    }
    [cartItem removeAllObjects];
    [tempPaymentDetails removeAllObjects];
    [tempReturnDetails removeAllObjects];
    [tempExchangeDetails removeAllObjects];
    salesIdTable.hidden = YES;
    [pastBillField resignFirstResponder];
    billingScrollView.hidden = NO;
    
    NSString *value = [pastBillField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    if ((pastBillField.text).length >= 2 && value.length != 0) {
        
        //ProgressBar higthlighted...
        [HUD setHidden:NO];
        
        NSString *saleId2 = pastBillField.text;
        
        if (!isOfflineService) {
            
            WebServiceController *service = [[WebServiceController alloc] init];
            service.getBillsDelegate = self;
            [service getBillDetails:saleId2];
            //            SalesServiceSoapBinding *service = [[SalesServiceSvc SalesServiceSoapBinding] retain];
            //            SalesServiceSvc_getBillingDetails *aparams = [[SalesServiceSvc_getBillingDetails alloc] init];
            //
            //            NSString *time = [NSDateFormatter localizedStringFromDate:[NSDate date] dateStyle:NSDateFormatterShortStyle timeStyle:NSDateFormatterFullStyle];
            //            NSArray *str = [time componentsSeparatedByString:@" "];
            //            NSString *date = [[[str objectAtIndex:0] componentsSeparatedByString:@","] objectAtIndex:0];
            //
            //            NSArray *headerKeys = [NSArray arrayWithObjects:@"accessKey", @"customerId",@"applicationName",@"userName",@"correlationId",@"dateTime", nil];
            //
            //            NSArray *headerObjects = [NSArray arrayWithObjects:custID,custID,@"Store Mobile APP",mail_,@"-",date, nil];
            //            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:headerObjects forKeys:headerKeys];
            //
            //            NSError * err_;
            //            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
            //            NSString * requestHeaderString_ = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
            //
            //            NSArray *keys = [NSArray arrayWithObjects:@"billId",@"requestHeader", nil];
            //            NSArray *objects = [NSArray arrayWithObjects:saleId2,requestHeaderString_, nil];
            //
            //            NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            //
            //            NSError * err;
            //            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
            //            NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            //            aparams.saleID = salesReportJsonString;
            //
            //            @try {
            //
            //                SalesServiceSoapBindingResponse *response = [service getBillingDetailsUsingParameters:(SalesServiceSvc_getBillingDetails *)aparams];
            //
            //                NSArray *responseBodyParts = response.bodyParts;
            //
            //                for (id bodyPart in responseBodyParts) {
            //                    if ([bodyPart isKindOfClass:[SalesServiceSvc_getBillingDetailsResponse class]]) {
            //                        SalesServiceSvc_getBillingDetailsResponse *body = (SalesServiceSvc_getBillingDetailsResponse *)bodyPart;
            //                        printf("\nresponse=%s",[body.return_ UTF8String]);
            //
            //                        [self getBillingDetailsHandler:body.return_];
            //                    }
            //                }
            //            }
            //            @catch (NSException *exception) {
            //
            //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Failed to get Details" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            //                [alert show];
            //                [alert release];
            //            }
        }
        else{
            
            offline = [[OfflineBillingServices alloc]init];
            NSMutableDictionary *json = [offline openBill:pastBillField.text];
            [self getBillingDetailsHandler:json];
            
        }
        
        
    }
    else{
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Please Enter Bill Id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
}

BOOL blinkStatus;
// Handle the response from getBillingDetails.

- (void) getBillingDetailsHandler:(NSMutableDictionary *)bill_details {
    
    
    // Handle errors
    
    cartItemDetails = [[NSMutableArray alloc]init];
    cartTotalItems = [NSMutableArray new];
    taxArr = [[NSMutableArray alloc]init];
    itemCampaigns = [NSMutableArray new];
    
    subTotalBillValue.text = nil;
    subTotalBillValue.backgroundColor = [UIColor clearColor];
    subTotalBillValue.hidden = YES;
    discountValue.text = nil;
    discountValue.backgroundColor = [UIColor clearColor];
    discountValue.hidden = YES;
    taxlblValue.text = nil;
    taxlblValue.backgroundColor = [UIColor clearColor];
    taxlblValue.hidden = YES;
    
    
    totalBillValue.text = nil;
    totalBillValue.backgroundColor = [UIColor clearColor];
    totalBillValue.hidden = YES;
    billDueValue.text = nil;
    billDueValue.backgroundColor = [UIColor clearColor];
    billDueValue.hidden = YES;
    giftAmtLbl.hidden = NO;
    giftVoucherTxt.hidden = NO;
    
    otherDiscVal.hidden = NO;
    
    [HUD setHidden:YES];
    
    // if ([result length] > 21) {
    
    getSaleId = YES;
    
    //NSLog(@"%@",result);
    
    @try {
        
        //added by Srinivasulu on 02/06/2017 && 03/05/2018....
        salesOrderIdStr = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:ORDER_ID] defaultReturn:@""];
        
        
        printFormatMapObj = [NSMutableDictionary new];
        //bill_details
        
        if(([bill_details.allKeys containsObject:PRINT_RESPONSE]) && (! [[bill_details valueForKey:PRINT_RESPONSE]  isKindOfClass:[NSNull class]])){
            
            if(([[[bill_details valueForKey:PRINT_RESPONSE] allKeys] containsObject:PRINT_FOMAT_MAP_OBJ]) && (! [[[bill_details valueForKey:PRINT_RESPONSE] valueForKey:PRINT_FOMAT_MAP_OBJ]  isKindOfClass:[NSNull class]])){
                
                printFormatMapObj = [[[bill_details valueForKey:PRINT_RESPONSE] valueForKey:PRINT_FOMAT_MAP_OBJ] mutableCopy];
            }
            
            
            if(([[[bill_details valueForKey:PRINT_RESPONSE] allKeys] containsObject:SEQUENCE_OF_OBJECT]) && (! [[[bill_details valueForKey:PRINT_RESPONSE] valueForKey:SEQUENCE_OF_OBJECT]  isKindOfClass:[NSNull class]])){
                
                printFormatMapObj[SEQUENCE_OF_OBJECT] = [[bill_details valueForKey:PRINT_RESPONSE] valueForKey:SEQUENCE_OF_OBJECT];
            }
            
        }
        //upto here on 02/06/2017....
        
        //upto here on 02/06/2017....
        
        //added by Srinivasulu on 22/08/2017....
        
        customerGstinStr = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:CUSTOMER_GSTIN] defaultReturn:@""];
        
        //upto here on 22/08/2017....
        
        //added by Srinivasulu on 22/04/2017....
        customerObj = [NSMutableDictionary new];
        
        if(([bill_details.allKeys containsObject:@"customerObj"]) && (! [[bill_details valueForKey:@"customerObj"]  isKindOfClass:[NSNull class]])){
            customerObj = [[bill_details valueForKey:@"customerObj"] mutableCopy];
        }
        
        if(([bill_details.allKeys containsObject:@"status"]) && (! [[bill_details valueForKey:@"status"]  isKindOfClass:[NSNull class]])){
            billStatusStr = [bill_details valueForKey:@"status"];
        }
        
        
        
        //upto here on 22/04/2017....
        
        
        NSDictionary *JSON;
        JSON = bill_details;
        
        //added by Srinivaulu on
        offlineBillDeatilsInfoDic = [JSON mutableCopy];
        
        //        NSLog(@"%@",JSON);
        
        
        //added by Srinivasulu on 20/09/2017....
        
        @try {
            counterIdStr = @"";
            serialBillIdStr = @"";
            
            counterIdStr = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:@"counterId"]  defaultReturn:@""];
            serialBillIdStr = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:@"serialBillId"]  defaultReturn:@""];
            
            if(isOfflineService  && (serialBillIdStr.length <= 4)  && isCustomerBillId){
                
                NSString * locStr = storeCodeStr;
                NSString * localCounterIdStr = counterIdStr;
                
                NSString * dateStr = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:@"bill_date"]  defaultReturn:@""];
                
                if(locStr.length > 3)
                    locStr = [NSString stringWithFormat:@"%@",[locStr substringWithRange:NSMakeRange(0, 3)]];
                
                if(localCounterIdStr.length > 2)
                    localCounterIdStr = [NSString stringWithFormat:@"%@",[localCounterIdStr substringWithRange:NSMakeRange(0, 2)]];
                
                NSString * printDateStr = @"";
                
                if(dateStr.length){
                    
                    if([dateStr componentsSeparatedByString:@" "]){
                        NSString * str = [dateStr componentsSeparatedByString:@" "][0];
                        
                        NSArray * temp = [str componentsSeparatedByString:@"/"];
                        
                        
                        for(int i = 0; i < (temp.count - 1); i++){
                            
                            NSString *  tempStr = temp[i];
                            
                            printDateStr = [NSString stringWithFormat:@"%@%@", printDateStr, tempStr];
                        }
                        
                        if(temp.count){
                            
                            NSString *  tempStr = temp.lastObject;
                            
                            if(tempStr.length >= 4)
                                tempStr = [tempStr substringFromIndex:tempStr.length - 2];
                            
                            //                            tempStr = [NSString stringWithFormat:@"%@",[tempStr substringWithRange:NSMakeRange(2, 4)]];
                            
                            printDateStr = [NSString stringWithFormat:@"%@%@", printDateStr, tempStr];
                            
                        }
                        
                        
                        
                    }
                }
                
                serialBillIdStr =  [NSString stringWithFormat:@"%@%@%@%@%@",locStr,localCounterIdStr,printDateStr,@"/",serialBillIdStr];
                
            }
            
        } @catch (NSException *exception) {
            
        }
        
        //upto here on 20/09/2017....
        
        
//        NSLog(@"%@",JSON[@"billReturnItems"]);
//        NSLog(@"%@",JSON[@"billExchangedItems"]);
        tempExchangeDetails = [[NSMutableArray alloc] init];
        tempReturnDetails = [[NSMutableArray alloc] init];
        
        originalBillId = [[JSON valueForKey:@"billId"] copy];
        
        if ([JSON[@"dueAmount"] floatValue] > 0) {
            billingType = @"pending";
            [BillField setHidden:NO];
        }
        else {
            billingType = @"completed";
        }
        if ([billingType isEqualToString:@"pending"]) {
            
            [billingScrollView addSubview:BillField];
            [billingScrollView addSubview:skListTable];
            [billingScrollView addSubview:transparentView];
            if (scanner) {
                [scanner addObserver:self];
                isScannerAdded = TRUE;
            }
        }
        else {
            
            if (isScannerAdded) {
                [scanner removeObserver:self];
            }
        }
        if (((NSArray *)JSON[@"billReturnItems"]).count>0) {
            NSMutableArray *tempArray = [JSON[@"billReturnItems"]  mutableCopy];
            [tempReturnDetails addObjectsFromArray:tempArray];
        }
        if (((NSArray *)JSON[@"billExchangedItems"]).count>0){
            
            NSMutableArray * tempArray = [JSON[@"billExchangedItems"]  mutableCopy];
            //            [tempExchangeDetails addObjectsFromArray:tempArray];
            
            exchangedItemsArr = [NSMutableArray new];
            
            for(NSDictionary * dic in tempArray){
                
                if([originalBillId caseInsensitiveCompare:[self checkGivenValueIsNullOrNil:[dic valueForKey:@"exchanged_bill_id"]  defaultReturn:@""]] == NSOrderedSame){
                    
                    [exchangedItemsArr addObject:dic];
                }
                else{
                    
                    [tempExchangeDetails addObject:dic];
                }
                
            }
            
            
            
            if(exchangedItemsArr.count){
                
                
                
                NSArray * segmentLabels = @[NSLocalizedString(@"billing_details", nil),NSLocalizedString(@"payment_details", nil),NSLocalizedString(@"return", nil),NSLocalizedString(@"exchange", nil),NSLocalizedString(@"exchange_transfers", nil)];
                
                
                CGRect rect =     CGRectMake( mainSegmentedControl.frame.origin.x, mainSegmentedControl.frame.origin.y, mainSegmentedControl.frame.size.width, mainSegmentedControl.frame.size.height);
                [mainSegmentedControl removeFromSuperview];
                //creation of topMostSegment.... // bottombar....
                mainSegmentedControl = [[UISegmentedControl alloc] initWithItems:segmentLabels];
                mainSegmentedControl.tintColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
                mainSegmentedControl.backgroundColor = [UIColor clearColor];
                NSDictionary *attributes = @{NSFontAttributeName: [UIFont fontWithName:TEXT_FONT_NAME size:18.0f],NSForegroundColorAttributeName: [UIColor whiteColor]};
                [mainSegmentedControl setTitleTextAttributes:attributes forState:UIControlStateNormal];
                
                mainSegmentedControl.backgroundColor = [UIColor clearColor];
                mainSegmentedControl.selectedSegmentIndex = 0;
                [mainSegmentedControl addTarget:self action:@selector(segmentAction1:) forControlEvents:UIControlEventValueChanged];
                
                // assigning a value to check the bill finished ..
                mainSegmentedControl.tag = 0;
                
                [self.view addSubview:mainSegmentedControl];
                mainSegmentedControl.frame = rect;
                
            }
            
            
        }
        
        tempArrayItems = [[NSMutableArray alloc] init];
        tempPaymentDetails = [[NSMutableArray alloc] init];
        billID.hidden = NO;
        billDate.hidden = NO;
        billDone.hidden = NO;
        
        due = [JSON[@"dueAmount"] floatValue];
        
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        [defaults setObject:[JSON valueForKey:SCAN_START_TIME] forKey:SCAN_START_TIME];
        [defaults setObject:[JSON valueForKey:SCAN_END_TIME] forKey:SCAN_END_TIME];
        
        if (changeReturnStatus) {
            
            changeReturnLabel = [[UILabel alloc] init];
            changeReturnLabel.text = @"Change Return";
            changeReturnLabel.font = [UIFont boldSystemFontOfSize:14];
            changeReturnLabel.textColor = [UIColor whiteColor];
            changeReturnLabel.backgroundColor = [UIColor clearColor];
            
            changeReturnLabelValue = [[UILabel alloc] init];
            changeReturnLabelValue.text = billingChangeReturn;
            changeReturnLabelValue.font = [UIFont systemFontOfSize:14];
            changeReturnLabelValue.textColor = [UIColor whiteColor];
            changeReturnLabelValue.backgroundColor = [UIColor clearColor];
            if ([JSON[@"dueAmount"] floatValue] > 0.0) {
                changeReturnLabel.hidden = YES;
                changeReturnLabelValue.hidden = YES;
            }
            else{
                changeReturnLabel.hidden = NO;
                changeReturnLabelValue.hidden = NO;
                [billingScrollView addSubview:changeReturnLabel];
                [billingScrollView addSubview:changeReturnLabelValue];
            }
            changeReturnStatus = FALSE;
        }
        
        cartTotalItems = [NSMutableArray new];
        float changeTotal = 0.0;
        NSArray *transArray = JSON[@"billingTransactions"];
        tempPaymentDetails = [[NSMutableArray alloc] initWithArray:transArray];
        for (int i=0; i<tempPaymentDetails.count; i++) {
            
            NSDictionary *dic = tempPaymentDetails[i];
            appCode = [[dic valueForKey:APPROVAL_CODE] copy];
            
            bankName = [[dic valueForKey:CARD_INFO] copy];
            changeTotal = changeTotal+[[dic valueForKey:CHANGE_RETURN] floatValue];
        }
        
        totalChangeReturnStr = [[NSString stringWithFormat:@"%.2f",changeTotal] copy];
        
        NSArray *itemArray = JSON[@"billItems"];
        
        if (![JSON[kItemCampigns] isKindOfClass:[NSNull class]]) {
            
            for (NSDictionary *dic in JSON[kItemCampigns]) {
                
                NSMutableDictionary *temp = [dic mutableCopy];
                [temp removeObjectForKey:@"date"];
                [itemCampaigns addObject:temp];
            }
            // itemCampaigns = [[JSON objectForKey:kItemCampigns] mutableCopy];
        }
        
        if ([JSON.allKeys containsObject:@"employeeSaleId"] && ![JSON[@"employeeSaleId"] isKindOfClass:[NSNull class]]) {
            
            salesPersonIdStr = [JSON[@"employeeSaleId"] copy];
        }
        else {
            salesPersonIdStr = @"";
        }
        previousBillItemsCount = 0;
        
        float itemDisc = 0;
        
        for (NSDictionary *dic in itemArray) {
            NSMutableDictionary *itemDic = [NSMutableDictionary new];
            [itemDic setValue:[dic valueForKey:SKU_ID] forKey:SKU_ID];
            [itemDic setValue:[dic valueForKey:ITEM_NAME] forKey:ITEM_NAME];
            [itemDic setValue:[dic valueForKey:QUANTITY] forKey:QUANTITY];
            
            
            
            
            
            //  if (!isOfflineService) {
            
            if ([[dic valueForKey:EDITED_PRICE] floatValue] > 0) {
                
                [itemDic setValue:[NSString stringWithFormat:@"%.2f",([[dic valueForKey:EDITED_PRICE] floatValue] * [[dic valueForKey:QUANTITY] floatValue])] forKey:ITEM_TOTAL_PRICE];
                
                //            if (!isOfflineService) {
                [itemDic setValue:[NSString stringWithFormat:@"%.2f",[[dic valueForKey:EDITED_PRICE] floatValue]] forKey:ITEMUNITPRICE];
                
            }
            
            //added by Srinivasulu on 04/07/2017....
            //reason in offline print issue is there.....
            
            else if ([[dic valueForKey:ITEMUNITPRICE] floatValue] > 0) {
                
                [itemDic setValue:[NSString stringWithFormat:@"%.2f",([[dic valueForKey:ITEMUNITPRICE] floatValue] * [[dic valueForKey:QUANTITY] floatValue])] forKey:ITEM_TOTAL_PRICE];
                
                //            if (!isOfflineService) {
                [itemDic setValue:[NSString stringWithFormat:@"%.2f",[[dic valueForKey:ITEMUNITPRICE] floatValue]] forKey:ITEMUNITPRICE];
            }
            
            //upot here on 04/07/2017....
            else {
                
                [itemDic setValue:[NSString stringWithFormat:@"%.2f",([[dic valueForKey:MRP_Price] floatValue] * [[dic valueForKey:QUANTITY] floatValue])] forKey:ITEM_TOTAL_PRICE];
                [itemDic setValue:[NSString stringWithFormat:@"%.2f",[[dic valueForKey:MRP_Price] floatValue]] forKey:ITEMUNITPRICE];
                
                
            }
            
            //            }
            //            else {
            //                [itemDic setValue:[NSString stringWithFormat:@"%.2f",([[dic valueForKey:ITEM_TOTAL_PRICE] floatValue] / [[dic valueForKey:QUANTITY] floatValue])] forKey:ITEMUNITPRICE];
            //
            //                [itemDic setValue:[NSString stringWithFormat:@"%.2f",[[dic valueForKey:ITEM_TOTAL_PRICE] floatValue]] forKey:ITEM_TOTAL_PRICE];
            //
            //            }
            [itemDic setValue:[dic valueForKey:TAX_CODE] forKey:TAX_CODE];
            [itemDic setValue:[dic valueForKey:TAX_RATE] forKey:TAX_RATE];
            [itemDic setValue:[dic valueForKey:AVAIL_QTY] forKey:AVAIL_QTY];
            [itemDic setValue:[dic valueForKey:PLU_CODE] forKey:PLU_CODE];
            [itemDic setValue:[dic valueForKey:EDITED_PRICE] forKey:EDITED_PRICE];
            [itemDic setValue:[dic valueForKey:MRP_Price] forKey:MRP_Price];
            [itemDic setValue:[dic valueForKey:ITEM_DISCOUNT] forKey:ITEM_DISCOUNT];
            [itemDic setValue:@([[dic valueForKey:ITEM_OFFER_PRICE] floatValue]) forKey:ITEM_OFFER_PRICE];
            [itemDic setValue:@([[dic valueForKey:ITEM_DEAL_PRICE] floatValue]) forKey:ITEM_DEAL_PRICE];
            [itemDic setValue:[dic valueForKey:DISCOUNT_PRICE_3] forKey:DISCOUNT_PRICE_3];
            [itemDic setValue:[dic valueForKey:@"itemScanCode"] forKey:@"itemScanCode"];
            [itemDic setValue:[dic valueForKey:@"promoItemFlag"] forKey:@"promoItemFlag"];
            if([dic.allKeys containsObject:kItemDept] && ![[dic valueForKey:kItemDept] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kItemDept] forKey:kItemDept];
                
            }
            else {
                [itemDic setValue:@"" forKey:kItemDept];
                
            }
            
            if([dic.allKeys containsObject:kItemSubDept] && ![[dic valueForKey:kItemSubDept] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kItemSubDept] forKey:kItemSubDept];
                
            }
            
            else {
                [itemDic setValue:@"" forKey:kItemSubDept];
                
            }
            if([dic.allKeys containsObject:kItemSpecificEmplId] && ![[dic valueForKey:kItemSpecificEmplId] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kItemSpecificEmplId] forKey:kItemSpecificEmplId];
                
            }
            
            else {
                [itemDic setValue:@"" forKey:kItemSpecificEmplId];
                
            }
            
            if([dic.allKeys containsObject:kItemSpecificEmplName] && ![[dic valueForKey:kItemSpecificEmplName] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kItemSpecificEmplName] forKey:kItemSpecificEmplName];
                
            }
            
            else {
                [itemDic setValue:@"" forKey:kItemSpecificEmplName];
                
            }
            
            if([dic.allKeys containsObject:kProductCategory] && ![[dic valueForKey:kProductCategory] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kProductCategory] forKey:kProductCategory];
                
            }
            else {
                [itemDic setValue:@"" forKey:kProductCategory];
                
            }
            if([dic.allKeys containsObject:kProductSubCategory] && ![[dic valueForKey:kProductSubCategory] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kProductSubCategory] forKey:kProductSubCategory];
                
            }
            else {
                [itemDic setValue:@"" forKey:kProductSubCategory];
                
            }
            
            
            //added by Srinivasulu on 11/05/2017...
            
            
            
            
            if (([dic.allKeys containsObject:SECTION] && ![dic[SECTION] isKindOfClass:[NSNull class]])) {
                
                itemDic[SECTION] = dic[SECTION];
            }
            else{
                
                [itemDic setValue:@"" forKey:SECTION];
                
            }
            
            //added by Srinivasulu on 15/06/2017....
            
            [itemDic setValue:[self checkGivenValueIsNullOrNil:dic[REASON] defaultReturn:@""] forKey:REASON];
            
            //upto here on 15/06/2017....
            
            //added by Srinivasulu on 27/06/2017 && 29/08/2018....
            
            if (([dic.allKeys containsObject:HSN_CODE] && ![dic[HSN_CODE] isKindOfClass:[NSNull class]])) {
                
                itemDic[HSN_CODE] = dic[HSN_CODE];
            }
            
            if (([dic.allKeys containsObject:Pack_Size] && ![dic[Pack_Size] isKindOfClass:[NSNull class]])) {
                
                itemDic[Pack_Size] = dic[Pack_Size];
            }
            
            if (([dic.allKeys containsObject:EXPIRY_DATE] && ![dic[EXPIRY_DATE] isKindOfClass:[NSNull class]])) {
                
                itemDic[EXPIRY_DATE] = dic[EXPIRY_DATE];
            }
           
            //added by Srinivasulu on 21/08/2017 && 29/08/2018....
            
            if (([dic.allKeys containsObject:EDIT_PRICE_REASON] && ![dic[EDIT_PRICE_REASON] isKindOfClass:[NSNull class]])) {
                
                itemDic[EDIT_PRICE_REASON] = dic[EDIT_PRICE_REASON];
            }
            
            //upto here on 21/08/2017....
            
            
            //added by Srinivasulu on 12/08/2017....
            
            if (([dic.allKeys containsObject:PRODUCT_CLASS] && ![dic[PRODUCT_CLASS] isKindOfClass:[NSNull class]])) {
                
                itemDic[PRODUCT_CLASS] = dic[PRODUCT_CLASS];
            }
            
            if (([dic.allKeys containsObject:PRODUCT_SUB_CLASS] && ![dic[PRODUCT_SUB_CLASS] isKindOfClass:[NSNull class]])) {
                
                itemDic[PRODUCT_SUB_CLASS] = dic[PRODUCT_SUB_CLASS];
            }
            
            if (([dic.allKeys containsObject:STYLE_RANGE] && ![dic[STYLE_RANGE] isKindOfClass:[NSNull class]])) {
                
                itemDic[STYLE_RANGE] = dic[STYLE_RANGE];
            }
            
            if (([dic.allKeys containsObject:STYLE] && ![dic[STYLE] isKindOfClass:[NSNull class]])) {
                
                itemDic[STYLE] = dic[STYLE];
            }
            //upot here on 12/08/2017....
            //added by Srinivasulu on 12/07/2017....
            
            if (([dic.allKeys containsObject:TAX_INCLUSIVE] && ![dic[TAX_INCLUSIVE] isKindOfClass:[NSNull class]])) {
                
                itemDic[TAX_INCLUSIVE] = dic[TAX_INCLUSIVE];
                
            }
            else
                itemDic[TAX_INCLUSIVE] = @YES;
            
            
            //upto here on 12/07/2017....
            
            //added by Srinivasulu on 25/07/2017....
            //ITEM_DISCOUNT
            
            
            
            float billedItemPrice = [[itemDic valueForKey:ITEM_TOTAL_PRICE] floatValue] - [[itemDic valueForKey:ITEM_DISCOUNT] floatValue];
            
            
            
            if (([dic.allKeys containsObject:@"discountPrice"] && ![dic[@"discountPrice"] isKindOfClass:[NSNull class]])) {
                
                itemDic[@"discountPrice"] = dic[@"discountPrice"];
                billedItemPrice -=  [dic[@"discountPrice"] floatValue];
            }
            
            
            if([[self checkGivenValueIsNullOrNil:[dic valueForKey:ITEM_TOTAL_PRICE] defaultReturn:@"0.00"]  floatValue] > billedItemPrice){
                
                billedItemPrice = [[dic valueForKey:ITEM_TOTAL_PRICE] floatValue];
                //                [itemDic setValue:[NSString stringWithFormat:@"%.2f",[[dic valueForKey:ITEM_TOTAL_PRICE] floatValue]] forKey:ITEM_TOTAL_PRICE];
            }
            
            //added by Srinivasulu on 31/07/2017....
            
            if (([dic.allKeys containsObject:@"taxCost"] && ![dic[@"taxCost"] isKindOfClass:[NSNull class]])) {
                
                itemDic[@"taxCost"] = dic[@"taxCost"];
            }
            
            
            billedItemPrice = billedItemPrice / [[dic valueForKey:QUANTITY] floatValue];
            
            
            itemDic[BILLED_ITEM_UNIT_PRICE] = [NSString stringWithFormat:@"%.2f", billedItemPrice];
            
            //ITEM_TOTAL_PRICE -------  ITEM_DISCOUNT ----- @"discountPrice"
            
            
            
            //upot here on 31/07/2017.....
            
            
            //upot here on 25/07/2017.....
            
            //upto here on 27/06/2017....
            
            //newly added keys....
            //added by Srinivasulu on 05/07/2017....
            
            if (([dic.allKeys containsObject:COLOR] && ![dic[COLOR] isKindOfClass:[NSNull class]])) {
                
                itemDic[COLOR] = dic[COLOR];
            }
            
            if (([dic.allKeys containsObject:SIZE] && ![dic[SIZE] isKindOfClass:[NSNull class]])) {
                
                itemDic[SIZE] = dic[SIZE];
            }
            
            if (([dic.allKeys containsObject:PRODUCT_RANGE] && ![dic[PRODUCT_RANGE] isKindOfClass:[NSNull class]])) {
                
                itemDic[PRODUCT_RANGE] = dic[PRODUCT_RANGE];
            }
            
            if (([dic.allKeys containsObject:kMeasureRange] && ![dic[kMeasureRange] isKindOfClass:[NSNull class]])) {//MEASUREMENT_RANGE
                
                itemDic[kMeasureRange] = dic[kMeasureRange];
            }
            
            if (([dic.allKeys containsObject:ITEM_CATEGORY] && ![dic[ITEM_CATEGORY] isKindOfClass:[NSNull class]])) {
                
                itemDic[ITEM_CATEGORY] = dic[ITEM_CATEGORY];
            }
            
            if (([dic.allKeys containsObject:kProductBrand] && ![dic[kProductBrand] isKindOfClass:[NSNull class]])) {//kBrand
                
                itemDic[kProductBrand] = dic[kProductBrand];
            }
            
            if (([dic.allKeys containsObject:MODEL] && ![dic[MODEL] isKindOfClass:[NSNull class]])) {
                
                itemDic[MODEL] = dic[MODEL];
            }
            
            if (([dic.allKeys containsObject:SELL_UOM] && ![dic[SELL_UOM] isKindOfClass:[NSNull class]])) {
                
                itemDic[SELL_UOM] = dic[SELL_UOM];
            }
            
            //upto here on 05/07/2017....
            
            //added by Srinivasulu on 07/07/2017....
            
            if (([dic.allKeys containsObject:STYLE] && ![dic[STYLE] isKindOfClass:[NSNull class]])) {
                
                itemDic[STYLE] = dic[STYLE];
            }
            
            if (([dic.allKeys containsObject:PATTERN] && ![dic[PATTERN] isKindOfClass:[NSNull class]])) {//kBrand
                
                itemDic[PATTERN] = dic[PATTERN];
            }
            
            if (([dic.allKeys containsObject:BATCH] && ![dic[BATCH] isKindOfClass:[NSNull class]])) {
                
                itemDic[BATCH] = dic[BATCH];
            }
            
            if (([dic.allKeys containsObject:UTILITY] && ![dic[UTILITY] isKindOfClass:[NSNull class]])) {
                
                itemDic[UTILITY] = dic[UTILITY];
            }
            
            //upot here on 07/07/2017....
            
            
            //upto here on 11/05/2017....
            
            
            if([dic.allKeys containsObject:kProductRange] && ![[dic valueForKey:kProductRange] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kProductRange] forKey:kProductRange];
                
            }
            else {
                [itemDic setValue:@"" forKey:kProductRange];
                
            }
            
            if([dic.allKeys containsObject:kMeasureRange] && ![[dic valueForKey:kMeasureRange] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kMeasureRange] forKey:kMeasureRange];
                
            }
            else {
                [itemDic setValue:@"" forKey:kMeasureRange];
                
            }
            if([dic.allKeys containsObject:kBrand] && ![[dic valueForKey:kBrand] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kBrand] forKey:kBrand];
                
            }
            else {
                [itemDic setValue:@"" forKey:kBrand];
                
            }
            if([dic.allKeys containsObject:kProductModel] && ![[dic valueForKey:kProductModel] isKindOfClass:[NSNull class]]) {
                
                [itemDic setValue:[dic valueForKey:kProductModel] forKey:kProductModel];
                
            }
            else {
                [itemDic setValue:@"" forKey:kProductModel];
                
            }
            [itemDic setValue:[dic valueForKey:kIsManuFacturedItem] forKey:kIsManuFacturedItem];
            [itemDic setValue:[dic valueForKey:kPackagedType] forKey:kPackagedType];
            
            //addingitem discounts...
            
            if ([dic.allKeys containsObject:ITEM_DISCOUNT] && ![[dic valueForKey:ITEM_DISCOUNT] isKindOfClass:[NSNull class]]) {
                itemDisc += [[dic valueForKey:ITEM_DISCOUNT] floatValue];
            }
            
            previousBillItemsCount = previousBillItemsCount + [[dic valueForKey:QUANTITY] intValue];
            [cartTotalItems addObject:itemDic];
            [tempArrayItems addObject:itemDic];
            
        }
        if (((NSArray *)[bill_details valueForKey:@"denominations"]).count > 0) {
            denominations = [[NSMutableArray alloc] initWithArray:[bill_details valueForKey:@"denominations"]];
        }
        paymentDataCount = (int)tempPaymentDetails.count;
        
        for (int i = 0; i < cartTotalItems.count; i++) {
            
            NSDictionary *temp = cartTotalItems[i];
            if (!isOfflineService) {
                [cartItemDetails addObject:[[temp valueForKey:QUANTITY] stringValue]];
                NSArray *taxDetailsArr = [JSON valueForKey:BILL_ITEM_TAXES];
                finalTaxDetailsArr = [[NSMutableArray alloc] initWithArray:taxDetailsArr];
                NSMutableArray *taxArr_ = [NSMutableArray new];
                for (NSDictionary *taxDic in taxDetailsArr) {
                    if ([[taxDic valueForKey:@"sku_id"] isEqualToString:[temp valueForKey:SKU_ID]] && [[taxDic valueForKey:@"plu_code"] isEqualToString:[temp valueForKey:PLU_CODE]]) {
                        
                        NSMutableDictionary *finalTaxDic = [NSMutableDictionary new];
                        if (![[taxDic valueForKey:@"tax_category"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[taxDic valueForKey:@"tax_category"] forKey:@"taxCategory"];
                        }
                        else {
                            [finalTaxDic setValue:@"" forKey:@"taxCategory"];
                        }
                        if (![[taxDic valueForKey:@"tax_code"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[taxDic valueForKey:@"tax_code"] forKey:@"taxCode"];
                        }
                        else {
                            [finalTaxDic setValue:@"" forKey:@"taxCode"];
                        }
                        if (![[taxDic valueForKey:@"tax_rate"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[NSString stringWithFormat:@"%.2f",[[taxDic valueForKey:@"tax_rate"] floatValue]] forKey:@"taxRate"];
                        }
                        else {
                            [finalTaxDic setValue:@"" forKey:@"taxRate"];
                        }
                        if (![[taxDic valueForKey:@"tax_type"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[taxDic valueForKey:@"tax_type"] forKey:@"taxType"];
                        }
                        else {
                            [finalTaxDic setValue:@"" forKey:@"taxType"];
                        }
                        
                        //added by Srinivasulu on 12/07/2017......
                        
                        if (![[taxDic valueForKey:@"plu_code"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[taxDic valueForKey:@"plu_code"] forKey:@"plu_code"];
                        }
                        else {
                            [finalTaxDic setValue:@"" forKey:@"plu_code"];
                        }
                        
                        if (![[taxDic valueForKey:@"sku_id"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[taxDic valueForKey:@"sku_id"] forKey:@"sku_id"];
                        }
                        else {
                            [finalTaxDic setValue:@"" forKey:@"sku_id"];
                        }
                        
                        if (![[taxDic valueForKey:@"tax_value"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[taxDic valueForKey:@"tax_value"] forKey:@"tax_value"];
                        }
                        else {
                            [finalTaxDic setValue:@"0.00" forKey:@"tax_value"];
                        }
                        
                        //upto here on 12/07/2017....
                        
                        
                        [taxArr_ addObject:finalTaxDic];
                    }
                    
                }
                [taxArr addObject:taxArr_];
                [isVoidedArray addObject:@NO];
            }
            else {
                [cartItemDetails addObject:[temp valueForKey:QUANTITY]];
                NSArray *taxDetailsArr = [JSON valueForKey:BILL_ITEM_TAXES];
                NSMutableArray *taxArr_ = [NSMutableArray new];
                for (NSDictionary *taxDic in taxDetailsArr) {
                    if ([[taxDic valueForKey:@"sku_id"] isEqualToString:[temp valueForKey:SKU_ID]] && [[taxDic valueForKey:@"plu_code"] isEqualToString:[temp valueForKey:PLU_CODE]]) {
                        
                        NSMutableDictionary *finalTaxDic = [NSMutableDictionary new];
                        [finalTaxDic setValue:[taxDic valueForKey:@"tax_category"] forKey:@"taxCategory"];
                        [finalTaxDic setValue:[taxDic valueForKey:@"tax_code"] forKey:@"taxCode"];
                        [finalTaxDic setValue:[NSString stringWithFormat:@"%.2f",[[taxDic valueForKey:@"tax_rate"] floatValue]] forKey:@"taxRate"];
                        [finalTaxDic setValue:[taxDic valueForKey:@"tax_type"] forKey:@"taxType"];
                        
                        //added by Srinivasulu on 12/07/2017......
                        
                        
                        if (![[taxDic valueForKey:@"plu_code"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[taxDic valueForKey:@"plu_code"] forKey:@"plu_code"];
                        }
                        else {
                            [finalTaxDic setValue:@"" forKey:@"plu_code"];
                        }
                        
                        if (![[taxDic valueForKey:@"sku_id"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[taxDic valueForKey:@"sku_id"] forKey:@"sku_id"];
                        }
                        else {
                            [finalTaxDic setValue:@"" forKey:@"sku_id"];
                        }
                        
                        if (![[taxDic valueForKey:@"tax_value"] isKindOfClass:[NSNull class]]) {
                            [finalTaxDic setValue:[taxDic valueForKey:@"tax_value"] forKey:@"tax_value"];
                        }
                        else {
                            [finalTaxDic setValue:@"0.00" forKey:@"tax_value"];
                        }
                        
                        //upto here on 12/07/2017....
                        
                        [taxArr_ addObject:finalTaxDic];
                    }
                    
                }
                [taxArr addObject:taxArr_];
                [isVoidedArray addObject:@NO];
            }
        }
        
        dataCount = (int)cartTotalItems.count;
        float totalDiscount = 0.0;
        float voucherCouponDisc = 0.0;
        float finalSubTotal = 0.0;
        for (NSDictionary *transDic in transArray) {
            if ([[transDic valueForKey:MODE_OF_PAY] isEqualToString:GIFT_VOUCHER]) {
                voucherCouponDisc += [[transDic valueForKey:PAID_AMT] floatValue];
            }
            else if ([[transDic valueForKey:MODE_OF_PAY] isEqualToString:COUPON]) {
                voucherCouponDisc += [[transDic valueForKey:PAID_AMT] floatValue];
            }
            else if ([[transDic valueForKey:MODE_OF_PAY] isEqualToString:LOYALTY_POINTS]) {
                voucherCouponDisc += [[transDic valueForKey:PAID_AMT] floatValue];
            }
        }
        if (![JSON[TOTAL_BILL_DISCOUNT] isKindOfClass:[NSNull class]]) {
            
            totalDiscount = [JSON[TOTAL_BILL_DISCOUNT] floatValue];
            
        }
        
        finalSubTotal = ([JSON[TOTAL_BILL_AMT] floatValue] - [JSON[@"tax"] floatValue]);
        
        billIDValue.text = pastBillField.text;
        customerPhone.hidden = NO;
        if (![JSON[MOBILE_NO] isKindOfClass:[NSNull class]]) {
            
            customerPhoneValue.text = [self checkGivenValueIsNullOrNil:JSON[MOBILE_NO] defaultReturn:@""];
        }
        else {
            
            customerPhoneValue.text = @"--";
        }
        
        if([customerPhoneValue.text  isEqualToString:@""]){
            
            customerPhoneValue.text = @"--";
            //            customerPhoneValue.textAlignment = NSTextAlignmentCenter;
        }
        
        billDateValue.text = JSON[@"bill_date"];
        billDoneValue.text = JSON[CASHIER_ID];
        //mpaymentValue.text = [temp objectAtIndex:1];
        
        pastBillStatus1 = [[JSON valueForKey:BILL_STATUS] copy];
        
        if (![[JSON valueForKey:BILL_STATUS] isEqualToString:@"NO"]) {
            
            
            //changed by srinivasulu on 25/04/2017.....
            
            
            if (!([[JSON valueForKey:BILL_STATUS] rangeOfString:@"CB"].location == NSNotFound)) {
                
                
                if (isOfflineService) {
                    
                    //                        self.titleLabel.text = @"CREDIT BILL-OFFLINE";
                    self.titleLabel.text = @"CREDIT BILL";
                    
                    
                }
                else {
                    
                    self.titleLabel.text = @"CREDIT BILL";
                    
                }
                
                
                bill_status_val.text = [[JSON valueForKey:BILL_STATUS] componentsSeparatedByString:@"-"].lastObject;
                
                if (!([[JSON valueForKey:BILL_STATUS] rangeOfString:@"TA"].location == NSNotFound))
                    paymentTypeVal.text = @"Take Away";
                else
                    paymentTypeVal.text = @"Door Delivery";
                
            }
            //added by Srinivasulu on 30/01/2018....
            
            else if (!([[JSON valueForKey:@"status"] rangeOfString:@"RE"].location == NSNotFound)){
                
                paymentTypeVal.text = @"Return Bill";
                bill_status_val.text = [JSON valueForKey:BILL_STATUS];
            }
            
            //upto here on 30/01/2017....
            else if (!([[JSON valueForKey:BILL_STATUS] rangeOfString:@"TA"].location == NSNotFound)) {
                paymentTypeVal.text = @"Take Away";
                //upto here on 25/04/2017....
                
                //changed by Srinivasulu on 21/04/2017....
                //reason credit bill added on 21/04/2017....
                
                
                //                bill_status_val.text = [[[JSON valueForKey:BILL_STATUS] componentsSeparatedByString:@"-"] objectAtIndex:1];
                bill_status_val.text = [[JSON valueForKey:BILL_STATUS] componentsSeparatedByString:@"-"].lastObject;
                
                //upto here on 21/04/2017...
            }
            else if (!([[JSON valueForKey:@"status"] rangeOfString:@"HD"].location == NSNotFound)){
                
                paymentTypeVal.text = @"Door Delivery";
                bill_status_val.text = [[JSON valueForKey:BILL_STATUS] componentsSeparatedByString:@"-"][2];
            }
            else {
                
                paymentTypeVal.text = @"Take Away";
                bill_status_val.text = [[JSON valueForKey:BILL_STATUS] componentsSeparatedByString:@"-"][2];
            }
        }
        else {
            paymentTypeVal.text = @"NA";
            bill_status_val.text = @"NA";
        }
        
        if ([JSON valueForKey:PRINT_COUNT]!=nil || [[JSON valueForKey:PRINT_COUNT] length]!=0) {
            
            printCount = [JSON valueForKey:PRINT_COUNT];
        }
        
        if (![[JSON valueForKey:OTHER_DISCOUNT] isKindOfClass:[NSNull class]]) {
            
            otherDiscVal.text = [NSString stringWithFormat:@"%.2f",[[JSON valueForKey:OTHER_DISCOUNT] floatValue]];
        }
        else {
            
            otherDiscVal.text = @"0.00";
        }
        
        
        
        
        
        
        
        billIDValue.hidden = NO;
        billDateValue.hidden = NO;
        billDoneValue.hidden = NO;
        
        customerName.hidden = NO;
        customerNameValue.hidden = NO;
        billDetails.hidden = NO;
        transactionDetails.hidden = NO;
        openDetails.hidden = NO;
        paymentType.hidden = NO;
        paymentTypeVal.hidden = NO;
        bill_status.hidden = NO;
        bill_status_val.hidden = NO;
        label_1.hidden = NO;
        label_2.hidden = NO;
        label_3.hidden = NO;
        label_4.hidden = NO;
        label_5.hidden = NO;
        itemDiscLbl.hidden = NO;
        
        selectedSaleIdTable.hidden = NO;
        scrollView1.hidden = NO;
        
        [selectedSaleIdTable reloadData];
        [paymentDetailsTable reloadData];
        float total = 0.0;
        @try {
            
            for (int i=0; i<tempPaymentDetails.count; i++) {
                
                NSDictionary *temp3 = tempPaymentDetails[i];
                
                //added by Srinivasulu on 31/03/2018....
                if(![[self checkGivenValueIsNullOrNil:[temp3 valueForKey:TRANSACTION_TYPE_FLAG] defaultReturn:@"0"] integerValue])
                    total = total+[[temp3 valueForKey:@"paidAmount"] floatValue];
                
            }
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        }
        
        //commented and changed by Srinivasulu on 13/10/2017....
        //now other discount is also distributed among the items based on there price ratio.... and bug no 3714...
        
        //        totalDiscount = totalDiscount - ([otherDiscVal.text floatValue] + itemDisc);
        totalDiscount = totalDiscount -  itemDisc;
        
        //upto here on 13/10/2017...
        
        
        //added by Srinivasulu on 14/06/2017 && 24/03/2018....
        //reason to solve the bug no 3145....
        
        if(totalDiscount < 0)
            totalDiscount = -totalDiscount;
        
        billRemarksTextView.text = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:kComments] defaultReturn:@""];
        
        //upto here on 14/06/2017 && 24/03/2018....
        
        totalPaymentVal.text = [NSString stringWithFormat:@"%.2f",total];
        subTotalBill.hidden = NO;
        taxlbl.hidden = NO;
        totalBill.hidden = NO;
        billDue.hidden = NO;
        discount.hidden = NO;
        
        discountValue = [[UILabel alloc] init];
        discountValue.text = [NSString stringWithFormat:@"%.02f",totalDiscount];
        discountValue.font = [UIFont systemFontOfSize:14];
        discountValue.textColor = [UIColor whiteColor];
        discountValue.textAlignment = NSTextAlignmentLeft;
        discountValue.backgroundColor = [UIColor clearColor];
        
        giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",voucherCouponDisc];
        
        subTotalBillValue = [[UILabel alloc] init];
        //        subTotalBillValue.text = [NSString stringWithFormat:@"%.1f",[[temp1 objectAtIndex:4] floatValue]+[[temp1 objectAtIndex:5] floatValue]-[[temp1 objectAtIndex:11] floatValue]];
        subTotalBillValue.text = [NSString stringWithFormat:@"%.2f",(finalSubTotal)];
        if ((subTotalBillValue.text).floatValue<0) {
            
            subTotalBillValue.text = @"0.00";
        }
        //subTotalBillValue = [temp1 objectAtIndex:4];
        //subTotalBillValue = [tempArrayItems objectAtIndex:2];
        subTotalBillValue.font = [UIFont systemFontOfSize:14];
        subTotalBillValue.textColor = [UIColor whiteColor];
        subTotalBillValue.textAlignment = NSTextAlignmentLeft;
        subTotalBillValue.backgroundColor = [UIColor clearColor];
        
        
        taxlblValue = [[UILabel alloc] init];
        taxlblValue.text = [NSString stringWithFormat:@"%.2f",[JSON[@"tax"] floatValue]];
        //            if (!isOfflineService) {
        //                taxlblValue.text = [[JSON objectForKey:@"tax"] stringValue];
        //            }
        //            else {
        //                taxlblValue.text = [JSON objectForKey:@"tax"];
        //            }
        taxlblValue.font = [UIFont systemFontOfSize:14];
        taxlblValue.textColor = [UIColor whiteColor];
        taxlblValue.textAlignment = NSTextAlignmentLeft;
        taxlblValue.backgroundColor = [UIColor clearColor];
        
        totalBillValue = [[UILabel alloc] init];
        //        totalBillValue.text = [NSString stringWithFormat:@"%.1f",[[temp1 objectAtIndex:4] floatValue]+[[temp1 objectAtIndex:5] floatValue]];
        
        
        totalBillValue.text = [NSString stringWithFormat:@"%.2f",[JSON[@"totalPrice"] floatValue]];
        
        
        //totalBillValue.text = [temp1 objectAtIndex:4];
        //totalBillValue.text = [tempArrayItems objectAtIndex:2];
        totalBillValue.font = [UIFont systemFontOfSize:14];
        totalBillValue.textColor = [UIColor whiteColor];
        totalBillValue.textAlignment = NSTextAlignmentLeft;
        totalBillValue.backgroundColor = [UIColor clearColor];
        
        
        //added by Srinivasulu on 03/04/2017....
        
        if([JSON.allKeys containsObject:BILL_AMOUNT] && (![[JSON valueForKey:BILL_AMOUNT] isKindOfClass:[NSNull class]]))
            totalBillAmountStr = [NSString stringWithFormat:@"%.2f",[JSON[BILL_AMOUNT] floatValue]];
        else
            totalBillAmountStr = [totalBillValue.text copy];
        
        
        //upto here on 03/04/2017....
        
        
        
        if ([JSON[@"dueAmount"] doubleValue] == 0) {
            billingType = nil;
            [BillField setHidden:YES];
        }
        else if ([billingType.lowercaseString isEqualToString:@"completed"]){
            [BillField setHidden:YES];
        }
        billDueValue = [[UILabel alloc] init];
        billDueValue.text = [NSString stringWithFormat:@"%.2f",[JSON[@"dueAmount"] floatValue]];
        
        billDueValue.font = [UIFont systemFontOfSize:14];
        billDueValue.textColor = [UIColor whiteColor];
        billDueValue.textAlignment = NSTextAlignmentLeft;
        billDueValue.backgroundColor = [UIColor clearColor];
        if ((billDueValue.text).floatValue>0) {
            billDueValue.alpha = 0;
            
            [UIView animateWithDuration:0.2 delay:0.5 options:UIViewAnimationOptionRepeat | UIViewAnimationOptionAutoreverse animations:^{
                billDueValue.alpha = 1;
            } completion:nil];
        }
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                
                otherDiscLbl.frame = CGRectMake(20,totalBill.frame.origin.y+totalBill.frame.size.height,150, customerName.frame.size.height);
                otherDiscLbl.font = [UIFont boldSystemFontOfSize:18];
                
                otherDiscVal.frame = CGRectMake(240,otherDiscLbl.frame.origin.y,150, customerName.frame.size.height);
                otherDiscVal.font = [UIFont boldSystemFontOfSize:18];
                
                discountValue.frame = CGRectMake(240,discount.frame.origin.y,150, customerName.frame.size.height);
                discountValue.font = [UIFont boldSystemFontOfSize:18];
                
                subTotalBillValue.frame = CGRectMake(240,subTotalBill.frame.origin.y,150, customerName.frame.size.height);
                subTotalBillValue.font = [UIFont boldSystemFontOfSize:18];
                
                //            subTotalBill,taxlbl,totalBill
                
                
                taxlblValue.frame = CGRectMake(240,taxlbl.frame.origin.y,150, 70);
                taxlblValue.font = [UIFont boldSystemFontOfSize:18];
                
                totalBillValue.font = [UIFont boldSystemFontOfSize:18];
                totalBillValue.frame = CGRectMake(240,totalBill.frame.origin.y,150, customerName.frame.size.height);
                
                billDue.font = [UIFont boldSystemFontOfSize:18];
                billDue.frame = CGRectMake(20,otherDiscLbl.frame.origin.y+otherDiscLbl.frame.size.height,180, customerName.frame.size.height);
                
                
                billDueValue.font = [UIFont boldSystemFontOfSize:18];
                billDueValue.frame = CGRectMake(240,billDue.frame.origin.y,150, customerName.frame.size.height);
                
                //added by Srinivasulu on 24/03/2018....
                
                billEnterRemarksLbl.frame = CGRectMake( billDue.frame.origin.x, billDue.frame.origin.y + billDue.frame.size.height, billDue.frame.size.width, billDue.frame.size.height);
                
                
                billRemarksTextView.frame = CGRectMake( billEnterRemarksLbl.frame.origin.x, billEnterRemarksLbl.frame.origin.y + billEnterRemarksLbl.frame.size.height, billEnterRemarksLbl.frame.size.width  * 2, billingScrollView.frame.size.height - (billEnterRemarksLbl.frame.origin.y + billEnterRemarksLbl.frame.size.height));
                
                //upto here on 24/03/2018....
            }
            else {
                discountValue.frame = CGRectMake(600,510,150,50);
                discountValue.font = [UIFont boldSystemFontOfSize:20];
                subTotalBillValue.frame = CGRectMake(600,550,150,50);
                subTotalBillValue.font = [UIFont boldSystemFontOfSize:20];
                taxlblValue.frame = CGRectMake(600,590,150,50);
                taxlblValue.font = [UIFont boldSystemFontOfSize:20];
                totalBillValue.font = [UIFont boldSystemFontOfSize:20];
                totalBillValue.frame = CGRectMake(600,630,150,50);
                billDueValue.font = [UIFont boldSystemFontOfSize:20];
                billDueValue.frame = CGRectMake(600,670,150,50);
            }
            
        }
        else {
            if(version >= 8.0){
                discountValue.frame = CGRectMake(245,240,65,20);
                subTotalBillValue.frame = CGRectMake(245,265,65,20);
                taxlblValue.frame = CGRectMake(245,290,65,20);
                totalBillValue.frame = CGRectMake(245,315,65,20);
                billDueValue.frame = CGRectMake(245,340.0,65,20);
                changeReturnLabel.frame = CGRectMake(15, 470.0, 120, 30);
                changeReturnLabelValue.frame = CGRectMake(250, 470.0, 65, 20);
            }
            else {
                discountValue.frame = CGRectMake(245,340,65,20);
                subTotalBillValue.frame = CGRectMake(245,367,65,20);
                taxlblValue.frame = CGRectMake(245,394,65,20);
                totalBillValue.frame = CGRectMake(245,421,65,20);
                billDueValue.frame = CGRectMake(245,450,65,20);
                changeReturnLabel.frame = CGRectMake(15, 470.0, 120, 30);
                changeReturnLabelValue.frame = CGRectMake(250, 470.0, 65, 20);
            }
        }
        [billingScrollView addSubview:otherDiscLbl];
        [billingScrollView addSubview:otherDiscVal];
        [billingScrollView addSubview:discountValue];
        [billingScrollView addSubview:subTotalBillValue];
        [billingScrollView addSubview:taxlblValue];
        [billingScrollView addSubview:totalBillValue];
        [billingScrollView addSubview:billDueValue];
        [priceView addSubview:priceLabl];
        [priceView addSubview:descLabl];
        [priceView addSubview:mrpLbl];
        [priceView addSubview:priceTable];
        [transparentView addSubview:priceView];
        [transparentView addSubview:closePriceViewBtn];
        [billingScrollView addSubview:transparentView];
        //        }
        if (isOfflineService) {
            
            customerNameValue.text = [JSON valueForKey:CUSTOMER_NAME];
        }
        
        //added by Srinivasulu on 29/06/2017....
        
        
        customerNameValue.text = [self checkGivenValueIsNullOrNil:[JSON valueForKey:CUSTOMER_NAME] defaultReturn:@"--"];
        
        if([customerNameValue.text  isEqualToString:@""]){
            
            customerNameValue.text = @"--";
            //            customerName.textAlignment = NSTextAlignmentCenter;
        }
        //upot here on 29/06/2017....
        
        
        if ([bill_status_val.text caseInsensitiveCompare:@"completed"]==NSOrderedSame || [bill_status_val.text caseInsensitiveCompare:@"returned"]==NSOrderedSame || [bill_status_val.text caseInsensitiveCompare:@"exchanged"]==NSOrderedSame || [bill_status_val.text caseInsensitiveCompare:@"tobedelivered"]==NSOrderedSame || [bill_status_val.text caseInsensitiveCompare:@"delivered"]==NSOrderedSame || [(bill_status_val.text).lowercaseString containsString:@"items"] ) {
            
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:1];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:2];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:3];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:5];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:6];
            
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            if (![[defaults valueForKey:kPrinting] boolValue]) {
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:10];
            }
        }
        //added by Srinivasulu on 17/04/2018...
        else{
            
            [segmentedControl removeSegmentAtIndex:10 animated:YES];
        }
        
       
        //upto here on 17/04/2018....
        
        if ([bill_status_val.text caseInsensitiveCompare:@"cancelled"]==NSOrderedSame) {
            [segmentedControl setEnabled:FALSE];
            [mainSegmentedControl setEnabled:FALSE forSegmentAtIndex:1];
            [mainSegmentedControl setEnabled:FALSE forSegmentAtIndex:2];
            [mainSegmentedControl setEnabled:FALSE forSegmentAtIndex:3];
            [BillField setHidden:YES];
            billingType = @"cancelled";
        }
        if (segmentIndex == 2) {
            
            [returnView removeFromSuperview];
            [self segmentAction1:mainSegmentedControl];
            
            returningTotalBillValue.text=@"";
            //            subtotal_value.text = @"";
            //            total_Bill_Value.text = @"";
        }
        if ([paymentTypeVal.text isEqualToString:@"Door Delivery"]) {
            
            [billingScrollView addSubview:customerDetails];
        }
        if ([bill_status_val.text isEqualToString:@"ToBeDelivered"]) {
            changeStatusBtn.hidden = NO;
            
            [billingScrollView addSubview:changeStatusBtn];
        }
        else {
            changeStatusBtn.hidden = YES;
        }
        
        if(!isOfflineService) {
            
            //added on 2/7/16 by sonali for roles implementation..
            
            appDoc = @"";
            
            if ([bill_status_val.text caseInsensitiveCompare:@"completed"]==NSOrderedSame || [bill_status_val.text caseInsensitiveCompare:@"returned"]==NSOrderedSame || [bill_status_val.text caseInsensitiveCompare:@"exchanged"]==NSOrderedSame){
                
                appDoc = @"NewBill";
            }
            else if ([bill_status_val.text caseInsensitiveCompare:@"tobedelivered"]==NSOrderedSame || [bill_status_val.text caseInsensitiveCompare:@"delivered"]==NSOrderedSame ) {
                
                appDoc = @"HomeDeliveryBill";
                
                int accessVal = [WebServiceUtility checkAccessPermissionsFor:@"HomeDeliveryBill"subFlow:@"HomeDeliveryBill" mainFlow:@"Billing"];
                if (accessVal == kReadVal || accessVal == kAcessDenied) {
                    
                    [changeStatusBtn setEnabled:FALSE];
                }
                
            }
            else if ([bill_status_val.text caseInsensitiveCompare:@"cancelled"]==NSOrderedSame) {
                appDoc = @"CancelledBill";
            }
            else {
                appDoc = @"PendigBill";
            }
            
            BillingHome *billingHome = [[BillingHome alloc] init];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:3];

            if (![billingHome isSegmentAcessible:@"Quick Pay" appDocument:appDoc]) {
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
            }
            if (![billingHome isSegmentAcessible:@"Cash Payment" appDocument:appDoc]) {
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:1];
            }
            if (![billingHome isSegmentAcessible:@"Card Payment" appDocument:appDoc]) {
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:2];
            }
            if (![billingHome isSegmentAcessible:@"Food Coupons" appDocument:appDoc]) {
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
            }
            if (![billingHome isSegmentAcessible:@"Gift Vouchers" appDocument:appDoc] && ![billingHome isSegmentAcessible:@"Loyalty Cards" appDocument:appDoc] && ![billingHome isSegmentAcessible:@"Discount Coupons" appDocument:appDoc]) {
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:5];
            }
            else {
                if ([billingHome isSegmentAcessible:@"Gift Vouchers" appDocument:appDoc]) {
                    [giftTypeArrayList addObject:@"Gift Voucher"];
                }
                if ([billingHome isSegmentAcessible:@"Loyalty Cards" appDocument:appDoc]) {
                    [giftTypeArrayList addObject:@"Loyalty Card"];
                }
                if ([billingHome isSegmentAcessible:@"Discount Coupons" appDocument:appDoc]) {
                    [giftTypeArrayList addObject:@"Coupon"];
                }
            }
            //        if (![billingHome isSegmentAcessible:@"Credit Note" appDocument:appDoc]) {
            //
            //            [segmentedControl setEnabled:FALSE forSegmentAtIndex:6];
            //        }
            
            if (![billingHome isSegmentAcessible:@"SMS" appDocument:appDoc]) {
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:7];
            }
            if (![billingHome isSegmentAcessible:@"Email" appDocument:appDoc]) {
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:8];
            }
            if ([WebServiceUtility checkAccessibilityFor:@"Print" appDocument:appDoc] == kAcessDenied) {
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:9];
            }
        }
        
        if (isBillSummery) {
            
            [segmentedControl setEnabled:false];
            [mainSegmentedControl setEnabled:false forSegmentAtIndex:2];
            [mainSegmentedControl setEnabled:false forSegmentAtIndex:3];
            pastBillField.userInteractionEnabled = false;
            BillField.hidden = true;
        }
        
        if (!exchangeScrollView.hidden) {
            segmentIndex = 0;
            mainSegmentedControl.selectedSegmentIndex = 0;
            [self segmentAction1:mainSegmentedControl];
        }
        BillField.hidden = true;
        
        
        //added by Srinivasulu on 07/08/2017 && 09/08/2017 && 28/06/2018....
        
        if ( isOfflineService ) {
            
            syncStatusStr = [bill_details valueForKey:SYNC_STATUS];
            
            
            BOOL allowReturn = true;
            
            if(isOfflineService && [[bill_details valueForKey:SYNC_STATUS] isEqualToString:SUCCESS])
                allowReturn = false;
            
            else if(isOfflineService && [[bill_details valueForKey:SYNC_STATUS] isEqualToString:ERROR])
                allowReturn = false;
            if(!allowReturn){
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:1];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:2];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:3];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:5];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:6];
            }
            
        }
        
        orderShipmentCharges = [[self checkGivenValueIsNullOrNil:[bill_details valueForKey:SHIPPING_CHARGES] defaultReturn:@"0.00"] floatValue];
        
        //upto here on 07/08/2017 && 09/08/2017 && 03/05/2018 && 28/06/2018....
        
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"No Data Found" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
        pastBillField.text = @"";
        
    }
    @finally{
        
        
        
        //added by Srinivasulu on 21/07/2017....
        
        if(billTypeStr != nil)
            self.titleLabel.text = billTypeStr;
        
        
        //upto here on 21/07/2017....
        
    }
    
    
    @try {
        //taxTitle
        
        //chaning by srinivasulu on  03/08/2017....
        
        if(taxDetailsScrollView == nil){
            
            taxDetailsScrollView = [[UIScrollView alloc] init];
            [billingScrollView addSubview:taxDetailsScrollView];
            
            [taxDetailsScrollView addSubview:taxlbl];
            [taxDetailsScrollView addSubview:taxlblValue];
        }
        
        //upto here on 03/08/2017....
        
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
            }
            else{
            }
            
            //            subtotal.frame = CGRectMake(10.0, 340, 120.0, 30.0);
            //            subtotal.font = [UIFont systemFontOfSize:18];
            //            subtotal_value.frame = CGRectMake(380,340, 120.0, 30.0);
            //            subtotal_value.font = [UIFont systemFontOfSize:18];
            
            //            taxDetailsScrollView.frame = CGRectMake( taxlbl.frame.origin.x, taxlbl.frame.origin.y, taxlbl.frame.size.width + taxlblValue.frame.size.width, taxlbl.frame.size.height);
            if(taxDetailsScrollView.frame.origin.x != 20)
                //                taxDetailsScrollView.frame = CGRectMake( 20, 370, taxlbl.frame.size.width + taxlblValue.frame.size.width, taxlbl.frame.size.height);
                taxDetailsScrollView.frame = CGRectMake( 20, taxlbl.frame.origin.y, taxlbl.frame.size.width + taxlblValue.frame.size.width, taxlbl.frame.size.height);
            
            
            taxlbl.frame = CGRectMake( 0, 0, taxlbl.frame.size.width, taxlbl.frame.size.height);
            taxlblValue.frame = CGRectMake( 220, 0, taxlbl.frame.size.width, taxlbl.frame.size.height);
            
            taxlbl.hidden = YES;
            taxlblValue.hidden = YES;
            
        }
        else{
            
            
        }
        
        taxDispalyArr = [NSMutableArray new];
        
        
        for(NSDictionary * dic  in [bill_details valueForKey:@"billingItemTaxes"]){
            int i;
            BOOL isNewTax = true;
            NSMutableDictionary * existingDic;
            
            for(i = 0; i < taxDispalyArr.count; i++){
                
                existingDic  = [taxDispalyArr[i] mutableCopy];
                
                if([[existingDic valueForKey:@"tax_code"] isEqualToString:[dic valueForKey:@"tax_code"]]){
                    
                    existingDic[@"tax_value"] = [NSString stringWithFormat:@"%.2f",([[self checkGivenValueIsNullOrNil:[dic valueForKey:@"tax_value"]  defaultReturn:@"0.00"] floatValue] + [[self checkGivenValueIsNullOrNil:[existingDic valueForKey:@"tax_value"]  defaultReturn:@"0.00"] floatValue] ) ];
                    
                    
                    
                    isNewTax = false;
                    break;
                }
                
            }
            
            if(isNewTax){
                NSMutableDictionary * taxDic = [NSMutableDictionary new];
                
                taxDic[@"tax_code"] = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"tax_code"]  defaultReturn:@"--"];
                taxDic[@"tax_value"] = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"tax_value"]  defaultReturn:@"0.00"];
                
                [taxDispalyArr addObject:taxDic];
            }
            else{
                
                taxDispalyArr[i] = existingDic;
            }
            
            
            
        }
        
        
        
        //        if([taxDispalyArr count])
        [self addLabelsToScrollView:taxDispalyArr];
        //             else
        //                  [self addLabelsToScrollView:nil];
        
        //it has to be removed written by Srinivasulu on 03/07/2017....
        
        if(![[bill_details valueForKey:@"billingItemTaxes"] count]){
            //        taxlbl.frame = CGRectMake( 0, 0, taxlbl.frame.size.width, taxlbl.frame.size.height);
            taxlblValue.frame = CGRectMake( giftVoucherTxt.frame.size.width, 0, taxlbl.frame.size.width, taxlbl.frame.size.height);
            
        }
        
        //upto here on 03/07/2017....
        
    } @catch (NSException *exception) {
        
    }
    
    //upto here on 30/06/2017....
    
    
    //            [self printMessage];
}

//-(void)blink{
//    if(blinkStatus == NO){
//        paymentDetails.textColor = [UIColor clearColor];
//        blinkStatus = YES;
//    }else {
//        paymentDetails.textColor = [UIColor blackColor];
//        blinkStatus = NO;
//    }
//}

/** SaleIdTable  Implementation started...  */

-(void)closePriceView:(UIButton *)sender {
    transparentView.hidden = YES;
}

#pragma -mark getBillIds delegate
-(void)getBillIdsSuccessResponse:(NSDictionary *)successDic{
    
    @try {
        [self getExistedSaleIDHandler:successDic];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

#pragma mark Table view methods

// Customize the number of rows in the table view.
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    
    if (tableView == salesIdTable) {
        return filteredSkuArrayList.count;
    }
    else if (tableView == skListTable) {
        return skListArr.count;
    }
    else if (tableView == returnDetailsTable){
        if (tempReturnDetails.count) {
            return tempReturnDetails.count;
        }
        //commentd by Sy
        //return 2;
        return 0;
        
        
    }
    else if (tableView == exchangeDetailsTable){
        if (tempExchangeDetails.count) {
            
            return tempExchangeDetails.count;
            
        }
        //commentd by Sy
        //return 2;
        return 0;
        
        
        
        
    }
    else if (tableView == paymentDetailsTable) {
        if (paymentDataCount != 0) {
            
            return  paymentDataCount;
            
        }
        //commentd by Sy
        //return 2;
        return 0;
        
        
    }
    else if (tableView == priceTable) {
        return priceDic.count;
    }
    else if (tableView == giftTypeTableView) {
        return giftTypeArrayList.count;
    }
    else if (tableView == couponDeatails) {
        
        return couponArr.count;
    }
    else if (tableView == couponType){
        
        return cupon_type.count;
    }
    else if (tableView == valueTable){
        
        return value_arr.count;
    }
    
    
    //added by Srinvasulu on 15/06/2017....
    
    else if (tableView == reasonTbl){
        
        return returnReasonsArr.count;
    }
    else if(tableView == denominstaionsTypeTbl){
        
        return denominationsTypeArr.count;
    }
    else if(tableView == cardTypesTbl){
        
        return cardTypesArr.count;
    }
    
    else if(tableView == otherPaymentsDetailsTbl){
        
        return otherPaymentsDeatilsArr.count;
    }
    
    else if(tableView == otherPaymentsOptionsTbl){
        
        return otherPaymentsOptionsArr.count;
    }
    else if(tableView == currentBilledItemsTbl){
        
        return cartTotalItems.count;
    }
    else if(tableView == exchangedBilledItemsTbl){
        
        return exchangedItemsArr.count;
    }
    
    //upto here on 15/06/2017....
    
    
    else{
        return cartTotalItems.count;
    }
    
    
}
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        if (tableView == selectedSaleIdTable || tableView == returnDetailsTable || tableView == exchangeDetailsTable) {
            
            if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                
                return 40;
                
            }
            
            
            else {
                return 60;
                
            }
        }
        else  if (tableView == itemTable || tableView == itemTableExchg) {
            
            if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                
                return 40;
                
            }
            else {
                return 60;
                
            }
        }
        if (tableView == priceTable) {
            
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                
                return 60.0;
                
            }
            else {
                return 66.0;
                
            }
            
        }
        
        //added by Srinvasulu on 15/06/2017....
        
        else if (tableView == reasonTbl){
            
            return 50;
        }
        else if(tableView == denominstaionsTypeTbl){
            
            return 40;
        }
        
        else if(tableView == cardTypesTbl){
            
            return 40;
        }
        else if(tableView == otherPaymentsDetailsTbl){
            
            return 40;
        }
        else if(tableView == otherPaymentsOptionsTbl){
            
            return 40;
        }
        else if(tableView == currentBilledItemsTbl){
            
            return 40;
        }
        else if(tableView == exchangedBilledItemsTbl){
            
            return 40;
        }
        //upto here on 15/06/2017....
        
        else {
            if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                
                return 40;
                
            }
            else {
                return 60;
                
            }
        }
    }
    else {
        return 33; //I put some padding on it.
    }
    
}

// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    
    if (tableView == selectedSaleIdTable) {
        
        tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        //tableView.separatorColor = [UIColor clearColor];
    }
    
    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    
    cell.selectionStyle = UITableViewCellEditingStyleNone;
    
    if ((cell.contentView).subviews){
        for (UIView *subview in (cell.contentView).subviews) {
            [subview removeFromSuperview];
        }
    }
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] ;
        cell.frame = CGRectZero;
    }
    
    // Set up the cell...
    if (tableView == salesIdTable) {
        
        @try {
            
            cell.textLabel.text = filteredSkuArrayList[indexPath.row];
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception.name);
        }
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            cell.textLabel.font = [UIFont boldSystemFontOfSize:18];
        }
        else{
            cell.textLabel.font = [UIFont boldSystemFontOfSize:18];
        }
        
    }
    else if (tableView == priceTable) {
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        @try {
            
            NSDictionary *dic = priceDic[indexPath.row];
            
            UILabel *skid = [[UILabel alloc] init] ;
            skid.layer.borderWidth = 1.5;
            skid.font = [UIFont systemFontOfSize:13.0];
            skid.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:13];
            skid.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            skid.backgroundColor = [UIColor blackColor];
            skid.textColor = [UIColor whiteColor];
            skid.text = [dic valueForKey:@"description"];
            skid.textAlignment=NSTextAlignmentCenter;
            //            skid.adjustsFontSizeToFitWidth = YES;
            
            
            UILabel *mrpPrice = [[UILabel alloc] init] ;
            mrpPrice.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            mrpPrice.layer.borderWidth = 1.5;
            mrpPrice.backgroundColor = [UIColor blackColor];
            mrpPrice.text = [NSString stringWithFormat:@"%.2f",[[dic valueForKey:@"salePrice"] floatValue]];
            mrpPrice.textAlignment = NSTextAlignmentCenter;
            mrpPrice.numberOfLines = 2;
            mrpPrice.textColor = [UIColor whiteColor];
            
            UILabel *name = [[UILabel alloc] init] ;
            name.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            name.layer.borderWidth = 1.5;
            name.backgroundColor = [UIColor blackColor];
            name.text = [NSString stringWithFormat:@"%.2f",[[dic valueForKey:@"price"] floatValue]];
            name.textAlignment = NSTextAlignmentCenter;
            name.numberOfLines = 2;
            name.textColor = [UIColor whiteColor];
            // name.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                    
                    skid.font = [UIFont systemFontOfSize:22];
                    skid.frame = CGRectMake(0, 0, 280, 60);
                    mrpPrice.font = [UIFont systemFontOfSize:22];
                    mrpPrice.frame = CGRectMake(280, 0, 130, 60);
                    
                    name.font = [UIFont systemFontOfSize:22];
                    name.frame = CGRectMake(410, 0, 130, 60);
                }
                else {
                    //skid.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:22];
                    skid.font = [UIFont fontWithName:@"Helvetica" size:22];
                    skid.frame = CGRectMake(5, 0, 125, 56);
                    name.font = [UIFont fontWithName:@"Helvetica" size:18];
                    name.frame = CGRectMake(130, 0, 125, 56);
                    
                }
                
                
            }
            else {
                
                skid.frame = CGRectMake(5, 0, 58, 34);
                name.frame = CGRectMake(62, 0, 58, 34);
                
                
            }
            
            hlcell.backgroundColor = [UIColor clearColor];
            [hlcell.contentView addSubview:skid];
            [hlcell.contentView addSubview:name];
            [hlcell.contentView addSubview:mrpPrice];
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        }
        @finally {
            
            
        }
        return hlcell;
        
        
    }
    
    else if (tableView == giftTypeTableView) {
        
        tableView.separatorColor = [UIColor blackColor];
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            hlcell.textLabel.font = [UIFont boldSystemFontOfSize:25];
        }
        else{
            hlcell.textLabel.font = [UIFont systemFontOfSize:17];
        }
        hlcell.backgroundColor = [UIColor whiteColor];
        @try {
            
            hlcell.textLabel.text = giftTypeArrayList[indexPath.row];
            giftTypeString = giftTypeArrayList[indexPath.row];
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        }
        
        
        return hlcell;
        
    }
    else if (tableView == couponType){
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID];
            hlcell.accessoryType = UITableViewCellAccessoryNone;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                hlcell.textLabel.font = [UIFont boldSystemFontOfSize:25];
            }
        }
        
        hlcell.textLabel.text = cupon_type[indexPath.row];
        hlcell.textLabel.textColor = [UIColor blackColor];
        return hlcell;
    }
    else if (tableView == couponDeatails) {
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID];
            hlcell.accessoryType = UITableViewCellAccessoryNone;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                hlcell.textLabel.font = [UIFont boldSystemFontOfSize:25];
            }
        }
        
        
        //name.adjustsFontSizeToFitWidth = YES;
        
        UILabel *lbltype = [[UILabel alloc] init];
        lbltype.layer.borderWidth = 1.5;
        lbltype.font = [UIFont systemFontOfSize:13.0];
        lbltype.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        lbltype.backgroundColor = [UIColor blackColor];
        lbltype.text = [couponArr[indexPath.row] componentsSeparatedByString:@"#"][0];
        lbltype.textColor = [UIColor whiteColor];
        lbltype.textAlignment=NSTextAlignmentCenter;
        lbltype.adjustsFontSizeToFitWidth = YES;
        
        UILabel *cidLbl = [[UILabel alloc] init];
        cidLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        cidLbl.layer.borderWidth = 1.5;
        cidLbl.backgroundColor = [UIColor blackColor];
        cidLbl.text = [couponArr[indexPath.row] componentsSeparatedByString:@"#"][1];
        cidLbl.textAlignment = NSTextAlignmentCenter;
        cidLbl.numberOfLines = 2;
        cidLbl.textColor = [UIColor whiteColor];
        cidLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
        
        [couponIdArr addObject:cidLbl.text];
        //name.adjustsFontSizeToFitWidth = YES;
        
        UILabel *cvalLbl = [[UILabel alloc] init];
        cvalLbl.layer.borderWidth = 1.5;
        cvalLbl.font = [UIFont systemFontOfSize:13.0];
        cvalLbl.layer.borderColor =[[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        cvalLbl.backgroundColor = [UIColor blackColor];
        cvalLbl.text = [couponArr[indexPath.row] componentsSeparatedByString:@"#"][2];
        cvalLbl.textColor = [UIColor whiteColor];
        cvalLbl.textAlignment=NSTextAlignmentCenter;
        cvalLbl.adjustsFontSizeToFitWidth = YES;
        
        UILabel *qty = [[UILabel alloc] init];
        qty.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        qty.layer.borderWidth = 1.5;
        qty.backgroundColor = [UIColor blackColor];
        qty.text = [couponArr[indexPath.row] componentsSeparatedByString:@"#"][3];
        qty.textAlignment = NSTextAlignmentCenter;
        qty.numberOfLines = 2;
        qty.textColor = [UIColor whiteColor];
        qty.font = [UIFont fontWithName:@"Helvetica" size:12];
        
        UILabel *total = [[UILabel alloc] init];
        total.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        total.layer.borderWidth = 1.5;
        total.backgroundColor = [UIColor blackColor];
        total.text = [NSString stringWithFormat:@"%.2f",[couponArr[indexPath.row] componentsSeparatedByString:@"#"][3].intValue*[couponArr[indexPath.row] componentsSeparatedByString:@"#"][2].floatValue];
        total.textAlignment = NSTextAlignmentCenter;
        total.numberOfLines = 2;
        total.textColor = [UIColor whiteColor];
        total.font = [UIFont fontWithName:@"Helvetica" size:12];
        
        UIButton *delrowbtn = [[UIButton alloc] init];
        [delrowbtn setImage:[UIImage imageNamed:@"delete.png"] forState:UIControlStateNormal];
        [delrowbtn addTarget:self action:@selector(delCoupon:) forControlEvents:UIControlEventTouchUpInside];
        delrowbtn.tag = indexPath.row;
        delrowbtn.backgroundColor = [UIColor clearColor];
        
        hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            //skid.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:22];
            lbltype.font = [UIFont fontWithName:@"Helvetica" size:22];
            lbltype.frame = CGRectMake(0, 0, 130, 45);
            cidLbl.font = [UIFont fontWithName:@"Helvetica" size:21];
            cidLbl.frame = CGRectMake(130, 0, 220, 45);
            cvalLbl.font = [UIFont fontWithName:@"Helvetica" size:22];
            cvalLbl.frame = CGRectMake(340, 0, 120, 45);
            qty.font = [UIFont fontWithName:@"Helvetica" size:22];
            qty.frame = CGRectMake(450, 0, 120, 45);
            total.font = [UIFont fontWithName:@"Helvetica" size:22];
            total.frame = CGRectMake(560, 0, 120, 45);
            delrowbtn.frame = CGRectMake(680, 10 , 40, 40);
            
        }
        else {
            
            // sno.frame = CGRectMake(5, 0, 58, 34);
            lbltype.frame = CGRectMake(0, 0, 40, 34);
            cidLbl.frame = CGRectMake(50, 0, 60, 34);
            cvalLbl.frame = CGRectMake(110, 0, 40, 34);
            qty.frame = CGRectMake(150, 0, 40,34);
            total.frame = CGRectMake(190, 0, 60, 34);
            delrowbtn.frame = CGRectMake(260, 3 , 25, 25);
            
        }
        
        [hlcell addSubview:qty];
        [hlcell addSubview:lbltype];
        [hlcell addSubview:cidLbl];
        [hlcell addSubview:cvalLbl];
        [hlcell addSubview:total];
        [hlcell addSubview:delrowbtn];
        hlcell.backgroundColor = [UIColor clearColor];
        
        [couponValArr addObject:cvalLbl.text];
        [couponTotalArr addObject:total.text];
        
        return hlcell;
    }
    else if (tableView == valueTable) {
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID];
            hlcell.accessoryType = UITableViewCellAccessoryNone;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                hlcell.textLabel.font = [UIFont boldSystemFontOfSize:25];
            }
        }
        
        hlcell.textLabel.text = value_arr[indexPath.row];
        hlcell.textLabel.textColor = [UIColor blackColor];
        return hlcell;
    }
    
    else if (tableView == skListTable){
        
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        @try {
            
            //  NSDictionary *dic = [priceDic objectAtIndex:indexPath.row];
            
            UILabel *skid = [[UILabel alloc] init] ;
            skid.layer.borderWidth = 1.5;
            skid.font = [UIFont systemFontOfSize:13.0];
            skid.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:13];
            skid.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            skid.backgroundColor = [UIColor whiteColor];
            skid.textColor = [UIColor blackColor];
            skid.text = skuArrayList[indexPath.row][@"description"];
            skid.textAlignment=NSTextAlignmentLeft;
            
            
            UILabel *name = [[UILabel alloc] init] ;
            name.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            name.layer.borderWidth = 1.5;
            name.backgroundColor = [UIColor whiteColor];
            name.text = [NSString stringWithFormat:@" %.2f",[filteredPriceArr[indexPath.row] floatValue]];
            name.textAlignment = NSTextAlignmentCenter;
            name.numberOfLines = 2;
            name.textColor = [UIColor blackColor];
            
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                    
                    skid.font = [UIFont systemFontOfSize:18];
                    skid.frame = CGRectMake(0, 0, 280, 50);
                    name.font = [UIFont systemFontOfSize:18];
                    name.frame = CGRectMake(280, 0, 200, 50);
                }
                else {
                    //skid.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:22];
                    skid.font = [UIFont fontWithName:@"Helvetica" size:22];
                    skid.frame = CGRectMake(5, 0, 125, 56);
                    name.font = [UIFont fontWithName:@"Helvetica" size:18];
                    name.frame = CGRectMake(130, 0, 125, 56);
                    
                }
                
                
            }
            else {
                
                skid.frame = CGRectMake(5, 0, 58, 34);
                name.frame = CGRectMake(62, 0, 58, 34);
                
                
            }
            
            hlcell.backgroundColor = [UIColor clearColor];
            [hlcell.contentView addSubview:skid];
            [hlcell.contentView addSubview:name];
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        }
        
        return hlcell;
        
        
        
    }
    else if(tableView == paymentDetailsTable){
        tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        @try {
            
            NSDictionary *temp3 = tempPaymentDetails[indexPath.row];
            
            UILabel *label111 = [[UILabel alloc] init];
            label111.font = [UIFont systemFontOfSize:13.0];
            label111.layer.borderWidth = 1.5;
            label111.backgroundColor = [UIColor blackColor];
            label111.textAlignment = NSTextAlignmentCenter;
            label111.numberOfLines = 2;
            label111.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            label111.lineBreakMode = NSLineBreakByWordWrapping;
            label111.textColor = [UIColor whiteColor];
            label111.text = [temp3 valueForKey:TRANSACTION_ID];
            
            UILabel *label222 = [[UILabel alloc] init];
            label222.font = [UIFont systemFontOfSize:13.0];
            label222.layer.borderWidth = 1.5;
            label222.backgroundColor = [UIColor blackColor];
            label222.textAlignment = NSTextAlignmentCenter;
            label222.numberOfLines = 2;
            label222.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            label222.lineBreakMode = NSLineBreakByWordWrapping;
            label222.textColor = [UIColor whiteColor];
            label222.text = [temp3 valueForKey:@"dateTime"];
            
            UILabel *label33 = [[UILabel alloc] init];
            label33.font = [UIFont systemFontOfSize:13.0];
            label33.layer.borderWidth = 1.5;
            label33.backgroundColor = [UIColor blackColor];
            label33.textAlignment = NSTextAlignmentCenter;
            label33.textColor = [UIColor whiteColor];
            label33.numberOfLines = 2;
            label33.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            label33.textAlignment = NSTextAlignmentCenter;
            label33.text = [temp3 valueForKey:MODE_OF_PAY];
            
            UILabel *label44 = [[UILabel alloc] init];
            label44.font = [UIFont systemFontOfSize:13.0];
            label44.layer.borderWidth = 1.5;
            label44.backgroundColor = [UIColor blackColor];
            label44.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            label44.textAlignment = NSTextAlignmentCenter;
            label44.textColor = [UIColor whiteColor];
            if (![[temp3 valueForKey:CARD_TYPE] isKindOfClass:[NSNull class]]) {
                if ([[temp3 valueForKey:CARD_TYPE] isEqualToString:@""] || [[temp3 valueForKey:CARD_TYPE] isEqualToString:@"<null>"]) {
                    label44.text = @"N/A";
                }
                else{
                    label44.text = [temp3 valueForKey:CARD_TYPE];
                }
                
            }
            else {
                label44.text = @"N/A";
            }
            if (isOfflineService) {
                
                //                label111.text = [temp3 objectAtIndex:1];
                //                label33.text = [temp3 objectAtIndex:0];
                
            }
            
            UILabel *label55 = [[UILabel alloc] init];
            label55.font = [UIFont systemFontOfSize:13.0];
            label55.layer.borderWidth = 1.5;
            label55.backgroundColor = [UIColor blackColor];
            label55.textColor = [UIColor whiteColor];
            label55.textAlignment = NSTextAlignmentCenter;
            label55.numberOfLines = 2;
            label55.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            label55.textAlignment = NSTextAlignmentCenter;
            label55.text = [NSString stringWithFormat:@"%.2f",[[temp3 valueForKey:PAID_AMT] floatValue]];
            //            NSString *str1 = [NSString stringWithFormat:@"%d",[[tempArrayItems objectAtIndex:(indexPath.row*5)+4] intValue]*[[tempArrayItems objectAtIndex:(indexPath.row*5)+3] intValue]];
            //            label5.text = str1;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                {
                    
                    if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                        
                        
                        
                        //                        label111.font = [UIFont systemFontOfSize:18];
                        //                        label111.frame = CGRectMake(0, 0, 160, 40);
                        //                        label222.font = [UIFont systemFontOfSize:18];
                        //                        label222.frame = CGRectMake(160, 0, 180, 40);
                        //                        label33.font = [UIFont systemFontOfSize:18];
                        //                        label33.frame = CGRectMake(340, 0, 150, 40);
                        //                        label44.font = [UIFont systemFontOfSize:18];
                        //                        label44.frame = CGRectMake(490, 0, 150, 40);
                        //                        label55.font = [UIFont systemFontOfSize:18];
                        //                        label55.frame = CGRectMake(640, 0, 150, 40);
                        
                        label111.frame = CGRectMake( label_6.frame.origin.x, 0, label_6.frame.size.width + 2, 40);
                        label222.frame = CGRectMake( label_7.frame.origin.x, 0, label_7.frame.size.width + 2, 40);
                        label33.frame = CGRectMake( label_8.frame.origin.x, 0, label_8.frame.size.width + 2, 40);
                        label44.frame = CGRectMake( label_9.frame.origin.x, 0, label_9.frame.size.width + 2, 40);
                        label55.frame = CGRectMake( label_10.frame.origin.x, 0, label_10.frame.size.width, 40);
                        
                        
                        label111.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
                        label222.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
                        label33.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
                        label44.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
                        label55.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
                        
                    }
                    else {
                        label111.font = [UIFont systemFontOfSize:20];
                        label111.frame = CGRectMake(10, 0, 144, 56);
                        label222.font = [UIFont systemFontOfSize:20];
                        label222.frame = CGRectMake(152, 0, 144, 56);
                        label33.font = [UIFont systemFontOfSize:20];
                        label33.frame = CGRectMake(290, 0, 144, 56);
                        label44.font = [UIFont systemFontOfSize:20];
                        label44.frame = CGRectMake(434, 0, 144, 56);
                        label55.font = [UIFont systemFontOfSize:20];
                        label55.frame = CGRectMake(575, 0, 144, 56);
                    }
                }
                
            }
            else {
                label111.frame = CGRectMake(0, 0, 63, 34);
                label222.frame = CGRectMake(62, 0, 62, 34);
                label33.frame = CGRectMake(123, 0, 57, 34);
                label44.frame = CGRectMake(179, 0, 58, 34);
                label55.frame = CGRectMake(236, 0, 57, 34);
            }
            
            //            NSString *str = [NSString stringWithFormat:@"%@#%@#%@#%@#%@#%@",label1.text,label2.text,label3.text,label4.text,label5.text,[tempArrayItems objectAtIndex:(indexPath.row*5)+1]];
            //            [cartItem addObject:str];
            cell.backgroundColor = [UIColor clearColor];
            [cell.contentView addSubview:label111];
            [cell.contentView addSubview:label222];
            [cell.contentView addSubview:label33];
            [cell.contentView addSubview:label44];
            [cell.contentView addSubview:label55];
            
            cell.selectionStyle = UITableViewCellSelectionStyleNone;
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception.name);
        }
        
        
    }
    else if (tableView == returnDetailsTable){
        tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        @try {
            
            if (tempReturnDetails.count) {
                NSDictionary *temp = tempReturnDetails[indexPath.row];
                
                UILabel *label11 = [[UILabel alloc] init];
                label11.font = [UIFont systemFontOfSize:13.0];
                label11.layer.borderWidth = 1.5;
                label11.backgroundColor = [UIColor blackColor];
                label11.textColor = [UIColor whiteColor];
                label11.textAlignment = NSTextAlignmentCenter;
                label11.numberOfLines = 2;
                label11.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label11.lineBreakMode = NSLineBreakByWordWrapping;
                
                UILabel *label222 = [[UILabel alloc] init];
                label222.font = [UIFont systemFontOfSize:13.0];
                label222.layer.borderWidth = 1.5;
                label222.backgroundColor = [UIColor blackColor];
                label222.textColor = [UIColor whiteColor];
                label222.textAlignment = NSTextAlignmentCenter;
                label222.numberOfLines = 2;
                label222.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label222.lineBreakMode = NSLineBreakByWordWrapping;
                
                UILabel *label33 = [[UILabel alloc] init];
                label33.font = [UIFont systemFontOfSize:13.0];
                label33.layer.borderWidth = 1.5;
                label33.backgroundColor = [UIColor blackColor];
                label33.textColor = [UIColor whiteColor];
                label33.textAlignment = NSTextAlignmentCenter;
                label33.numberOfLines = 2;
                label33.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label33.textAlignment = NSTextAlignmentCenter;
                
                UILabel *label44 = [[UILabel alloc] init];
                label44.font = [UIFont systemFontOfSize:13.0];
                label44.layer.borderWidth = 1.5;
                label44.backgroundColor = [UIColor blackColor];
                label44.textColor = [UIColor whiteColor];
                label44.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label44.textAlignment = NSTextAlignmentCenter;
                
                
                
                
                UILabel *label55 = [[UILabel alloc] init];
                label55.font = [UIFont systemFontOfSize:13.0];
                label55.layer.borderWidth = 1.5;
                label55.backgroundColor = [UIColor blackColor];
                label55.textColor = [UIColor whiteColor];
                label55.textAlignment = NSTextAlignmentCenter;
                label55.numberOfLines = 2;
                label55.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label55.textAlignment = NSTextAlignmentCenter;
                //            NSString *str1 = [NSString stringWithFormat:@"%d",[[tempArrayItems objectAtIndex:(indexPath.row*5)+4] intValue]*[[tempArrayItems objectAtIndex:(indexPath.row*5)+3] intValue]];
                //            label5.text = str1;
                if (!isOfflineService) {
                    label11.text = temp[ITEM_NAME];
                    label222.text = temp[DATE_TIME];
                    label33.text = [NSString stringWithFormat:@"%.2f",[temp[ITEM_UNIT_PRICE] floatValue]] ;
                    label44.text = [NSString stringWithFormat:@"%.2f",[temp[COST] floatValue]] ;
                    label55.text = [NSString stringWithFormat:@"%.2f",[temp[QUANTITY] floatValue]];
                }
                else {
                    label11.text = temp[ITEM_NAME];
                    label222.text = temp[DATE_TIME];
                    label33.text = [NSString stringWithFormat:@"%.2f",[temp[ITEM_UNIT_PRICE] floatValue]];
                    label44.text = [NSString stringWithFormat:@"%.2f",[temp[COST] floatValue]];
                    label55.text = [NSString stringWithFormat:@"%.2f",[temp[QUANTITY] floatValue]];
                }
                
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                        
                        label11.font = [UIFont systemFontOfSize:18];
                        label11.frame = CGRectMake( label_11.frame.origin.x, 0, label_11.frame.size.width  + 1, 40);
                        label222.font = [UIFont systemFontOfSize:18];
                        label222.frame = CGRectMake( label_12.frame.origin.x - 1, 0, label_12.frame.size.width + 4, 40);
                        label33.font = [UIFont systemFontOfSize:18];
                        label33.frame = CGRectMake( label_13.frame.origin.x, 0, label_13.frame.size.width + 2, 40);
                        label44.font = [UIFont systemFontOfSize:18];
                        label44.frame = CGRectMake( label_14.frame.origin.x, 0, label_14.frame.size.width, 40);
                        label55.font = [UIFont systemFontOfSize:18];
                        label55.frame = CGRectMake( label_15.frame.origin.x, 0, label_15.frame.size.width + 2, 40);
                    }
                    else {
                        label11.font = [UIFont systemFontOfSize:20];
                        label11.frame = CGRectMake(10, 0, 144, 56);
                        label222.font = [UIFont systemFontOfSize:20];
                        label222.frame = CGRectMake(152, 0, 144, 56);
                        label33.font = [UIFont systemFontOfSize:20];
                        label33.frame = CGRectMake(290, 0, 144, 56);
                        label44.font = [UIFont systemFontOfSize:20];
                        label44.frame = CGRectMake(434, 0, 144, 56);
                        label55.font = [UIFont systemFontOfSize:20];
                        label55.frame = CGRectMake(575, 0, 144, 56);
                    }
                }
                else {
                    label11.frame = CGRectMake(0, 0, 63, 34);
                    label222.frame = CGRectMake(62, 0, 62, 34);
                    label33.frame = CGRectMake(123, 0, 57, 34);
                    label44.frame = CGRectMake(179, 0, 58, 34);
                    label55.frame = CGRectMake(236, 0, 57, 34);
                }
                
                //            NSString *str = [NSString stringWithFormat:@"%@#%@#%@#%@#%@#%@",label1.text,label2.text,label3.text,label4.text,label5.text,[tempArrayItems objectAtIndex:(indexPath.row*5)+1]];
                //            [cartItem addObject:str];
                cell.backgroundColor = [UIColor clearColor];
                [cell.contentView addSubview:label11];
                [cell.contentView addSubview:label222];
                [cell.contentView addSubview:label33];
                [cell.contentView addSubview:label44];
                [cell.contentView addSubview:label55];
                
            }
            else {
                UILabel *label11 = [[UILabel alloc] init];
                label11.font = [UIFont systemFontOfSize:13.0];
                label11.layer.borderWidth = 1.5;
                label11.backgroundColor = [UIColor blackColor];
                label11.textColor = [UIColor whiteColor];
                label11.textAlignment = NSTextAlignmentCenter;
                label11.numberOfLines = 2;
                label11.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label11.lineBreakMode = NSLineBreakByWordWrapping;
                label11.text = nil;
                
                UILabel *label222 = [[UILabel alloc] init];
                label222.font = [UIFont systemFontOfSize:13.0];
                label222.layer.borderWidth = 1.5;
                label222.backgroundColor = [UIColor blackColor];
                label222.textColor = [UIColor whiteColor];
                label222.textAlignment = NSTextAlignmentCenter;
                label222.numberOfLines = 2;
                label222.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label222.lineBreakMode = NSLineBreakByWordWrapping;
                label222.text = nil;
                
                UILabel *label33 = [[UILabel alloc] init];
                label33.font = [UIFont systemFontOfSize:13.0];
                label33.layer.borderWidth = 1.5;
                label33.backgroundColor = [UIColor blackColor];
                label33.textColor = [UIColor whiteColor];
                label33.textAlignment = NSTextAlignmentCenter;
                label33.numberOfLines = 2;
                label33.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label33.textAlignment = NSTextAlignmentCenter;
                label33.text = nil;
                
                UILabel *label44 = [[UILabel alloc] init];
                label44.font = [UIFont systemFontOfSize:13.0];
                label44.layer.borderWidth = 1.5;
                label44.backgroundColor = [UIColor blackColor];
                label44.textColor = [UIColor whiteColor];
                label44.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label44.textAlignment = NSTextAlignmentCenter;
                
                label44.text = nil;
                
                
                
                UILabel *label55 = [[UILabel alloc] init];
                label55.font = [UIFont systemFontOfSize:13.0];
                label55.layer.borderWidth = 1.5;
                label55.backgroundColor = [UIColor blackColor];
                label55.textColor = [UIColor whiteColor];
                label55.textAlignment = NSTextAlignmentCenter;
                label55.numberOfLines = 2;
                label55.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label55.textAlignment = NSTextAlignmentCenter;
                label55.text = nil;
                //            NSString *str1 = [NSString stringWithFormat:@"%d",[[tempArrayItems objectAtIndex:(indexPath.row*5)+4] intValue]*[[tempArrayItems objectAtIndex:(indexPath.row*5)+3] intValue]];
                //            label5.text = str1;
                
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                        
                        label11.font = [UIFont systemFontOfSize:18];
                        label11.frame = CGRectMake(0, 0, 90, 40);
                        label222.font = [UIFont systemFontOfSize:18];
                        label222.frame = CGRectMake(90, 0, 90, 40);
                        label33.font = [UIFont systemFontOfSize:18];
                        label33.frame = CGRectMake(180, 0, 100, 40);
                        label44.font = [UIFont systemFontOfSize:18];
                        label44.frame = CGRectMake(380, 0, 100, 40);
                        label55.font = [UIFont systemFontOfSize:18];
                        label55.frame = CGRectMake(280, 0, 100, 40);
                        
                        
                        
                        
                    }
                    else {
                        label11.font = [UIFont systemFontOfSize:20];
                        label11.frame = CGRectMake(10, 0, 144, 56);
                        label222.font = [UIFont systemFontOfSize:20];
                        label222.frame = CGRectMake(152, 0, 144, 56);
                        label33.font = [UIFont systemFontOfSize:20];
                        label33.frame = CGRectMake(290, 0, 144, 56);
                        label44.font = [UIFont systemFontOfSize:20];
                        label44.frame = CGRectMake(434, 0, 144, 56);
                        label55.font = [UIFont systemFontOfSize:20];
                        label55.frame = CGRectMake(575, 0, 144, 56);
                    }
                }
                else {
                    label11.frame = CGRectMake(0, 0, 63, 34);
                    label222.frame = CGRectMake(62, 0, 62, 34);
                    label33.frame = CGRectMake(123, 0, 57, 34);
                    label44.frame = CGRectMake(179, 0, 58, 34);
                    label55.frame = CGRectMake(236, 0, 57, 34);
                }
                
                //            NSString *str = [NSString stringWithFormat:@"%@#%@#%@#%@#%@#%@",label1.text,label2.text,label3.text,label4.text,label5.text,[tempArrayItems objectAtIndex:(indexPath.row*5)+1]];
                //            [cartItem addObject:str];
                cell.backgroundColor = [UIColor clearColor];
                [cell.contentView addSubview:label11];
                [cell.contentView addSubview:label222];
                [cell.contentView addSubview:label33];
                [cell.contentView addSubview:label44];
                [cell.contentView addSubview:label55];
                
            }
            
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception.name);
            
        }
        
    }
    else if (tableView == exchangeDetailsTable){
        tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        @try {
            
            if (tempExchangeDetails.count) {
                
                
                NSDictionary *temp = tempExchangeDetails[indexPath.row];
                UILabel *label11 = [[UILabel alloc] init];
                label11.font = [UIFont systemFontOfSize:13.0];
                label11.layer.borderWidth = 1.5;
                label11.backgroundColor = [UIColor blackColor];
                label11.textColor = [UIColor whiteColor];
                label11.textAlignment = NSTextAlignmentCenter;
                label11.numberOfLines = 2;
                label11.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor ;
                label11.lineBreakMode = NSLineBreakByWordWrapping;
                
                UILabel *label222 = [[UILabel alloc] init];
                label222.font = [UIFont systemFontOfSize:13.0];
                label222.layer.borderWidth = 1.5;
                label222.backgroundColor = [UIColor blackColor];
                label222.textColor = [UIColor whiteColor];
                label222.textAlignment = NSTextAlignmentCenter;
                label222.numberOfLines = 2;
                label222.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label222.lineBreakMode = NSLineBreakByWordWrapping;
                
                UILabel *label33 = [[UILabel alloc] init];
                label33.font = [UIFont systemFontOfSize:13.0];
                label33.layer.borderWidth = 1.5;
                label33.backgroundColor = [UIColor blackColor];
                label33.textColor = [UIColor whiteColor];
                label33.textAlignment = NSTextAlignmentCenter;
                label33.numberOfLines = 2;
                label33.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label33.textAlignment = NSTextAlignmentCenter;
                
                UILabel *label44 = [[UILabel alloc] init];
                label44.font = [UIFont systemFontOfSize:13.0];
                label44.layer.borderWidth = 1.5;
                label44.backgroundColor = [UIColor blackColor];
                label44.textColor = [UIColor whiteColor];
                label44.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label44.textAlignment = NSTextAlignmentCenter;
                
                
                UILabel *label55 = [[UILabel alloc] init];
                label55.font = [UIFont systemFontOfSize:13.0];
                label55.layer.borderWidth = 1.5;
                label55.backgroundColor = [UIColor blackColor];
                label55.textColor = [UIColor whiteColor];
                label55.textAlignment = NSTextAlignmentCenter;
                label55.numberOfLines = 2;
                label55.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label55.textAlignment = NSTextAlignmentCenter;
                //            NSString *str1 = [NSString stringWithFormat:@"%d",[[tempArrayItems objectAtIndex:(indexPath.row*5)+4] intValue]*[[tempArrayItems objectAtIndex:(indexPath.row*5)+3] intValue]];
                //            label5.text = str1;
                if (!isOfflineService) {
                    label11.text = temp[ITEM_NAME];
                    label222.text = temp[DATE_TIME];
                    label33.text = [NSString stringWithFormat:@"%.2f",[temp[ITEM_UNIT_PRICE] floatValue]] ;
                    label44.text = [NSString stringWithFormat:@"%.2f",[temp[COST] floatValue]] ;
                    label55.text = [NSString stringWithFormat:@"%.2f",[temp[QUANTITY] floatValue]];
                }
                else {
                    label11.text = temp[SKU_ID];
                    label222.text = temp[DATE_TIME];
                    label33.text = [NSString stringWithFormat:@"%.2f",[temp[ITEM_UNIT_PRICE] floatValue]];
                    label44.text = [NSString stringWithFormat:@"%.2f",[temp[COST] floatValue]];
                    label55.text = [NSString stringWithFormat:@"%.2f",[temp[QUANTITY] floatValue]];
                }
                
                
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                        
                        label11.font = [UIFont systemFontOfSize:18];
                        label11.frame = CGRectMake(0, 0, 90, 40);
                        label222.font = [UIFont systemFontOfSize:18];
                        label222.frame = CGRectMake(90, 0, 90, 40);
                        label33.font = [UIFont systemFontOfSize:18];
                        label33.frame = CGRectMake(180, 0, 100, 40);
                        label44.font = [UIFont systemFontOfSize:18];
                        label44.frame = CGRectMake(380, 0, 100, 40);
                        label55.font = [UIFont systemFontOfSize:18];
                        label55.frame = CGRectMake(280, 0, 100, 40);
                        
                        
                        label11.font = [UIFont systemFontOfSize:18];
                        label11.frame = CGRectMake( label_16.frame.origin.x, 0, label_16.frame.size.width + 1, 40);
                        label222.font = [UIFont systemFontOfSize:18];
                        label222.frame = CGRectMake( label_17.frame.origin.x - 1, 0, label_17.frame.size.width + 4, 40);
                        label33.font = [UIFont systemFontOfSize:18];
                        label33.frame = CGRectMake( label_18.frame.origin.x, 0, label_18.frame.size.width + 2, 40);
                        label44.font = [UIFont systemFontOfSize:18];
                        label44.frame = CGRectMake( label_19.frame.origin.x, 0, label_19.frame.size.width, 40);
                        label55.font = [UIFont systemFontOfSize:18];
                        label55.frame = CGRectMake( label_20.frame.origin.x, 0, label_20.frame.size.width + 2, 40);
                    }
                    else {
                        label11.font = [UIFont systemFontOfSize:20];
                        label11.frame = CGRectMake(10, 0, 144, 56);
                        label222.font = [UIFont systemFontOfSize:20];
                        label222.frame = CGRectMake(152, 0, 144, 56);
                        label33.font = [UIFont systemFontOfSize:20];
                        label33.frame = CGRectMake(290, 0, 144, 56);
                        label44.font = [UIFont systemFontOfSize:20];
                        label44.frame = CGRectMake(434, 0, 144, 56);
                        label55.font = [UIFont systemFontOfSize:20];
                        label55.frame = CGRectMake(575, 0, 144, 56);
                    }
                }
                else {
                    label11.frame = CGRectMake(0, 0, 63, 34);
                    label222.frame = CGRectMake(62, 0, 62, 34);
                    label33.frame = CGRectMake(123, 0, 57, 34);
                    label44.frame = CGRectMake(179, 0, 58, 34);
                    label55.frame = CGRectMake(236, 0, 57, 34);
                }
                
                cell.backgroundColor = [UIColor clearColor];
                [cell.contentView addSubview:label11];
                [cell.contentView addSubview:label222];
                [cell.contentView addSubview:label33];
                [cell.contentView addSubview:label44];
                [cell.contentView addSubview:label55];
                
            }
            else {
                
                UILabel *label11 = [[UILabel alloc] init];
                label11.font = [UIFont systemFontOfSize:13.0];
                label11.layer.borderWidth = 1.5;
                label11.backgroundColor = [UIColor blackColor];
                label11.textColor = [UIColor whiteColor];
                label11.textAlignment = NSTextAlignmentCenter;
                label11.numberOfLines = 2;
                label11.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor ;
                label11.lineBreakMode = NSLineBreakByWordWrapping;
                label11.text = nil;
                
                UILabel *label222 = [[UILabel alloc] init];
                label222.font = [UIFont systemFontOfSize:13.0];
                label222.layer.borderWidth = 1.5;
                label222.backgroundColor = [UIColor blackColor];
                label222.textColor = [UIColor whiteColor];
                label222.textAlignment = NSTextAlignmentCenter;
                label222.numberOfLines = 2;
                label222.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label222.lineBreakMode = NSLineBreakByWordWrapping;
                label222.text = nil;
                
                UILabel *label33 = [[UILabel alloc] init];
                label33.font = [UIFont systemFontOfSize:13.0];
                label33.layer.borderWidth = 1.5;
                label33.backgroundColor = [UIColor blackColor];
                label33.textColor = [UIColor whiteColor];
                label33.textAlignment = NSTextAlignmentCenter;
                label33.numberOfLines = 2;
                label33.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label33.textAlignment = NSTextAlignmentCenter;
                label33.text = nil;
                
                UILabel *label44 = [[UILabel alloc] init];
                label44.font = [UIFont systemFontOfSize:13.0];
                label44.layer.borderWidth = 1.5;
                label44.backgroundColor = [UIColor blackColor];
                label44.textColor = [UIColor whiteColor];
                label44.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label44.textAlignment = NSTextAlignmentCenter;
                
                label44.text = nil;
                
                
                
                UILabel *label55 = [[UILabel alloc] init];
                label55.font = [UIFont systemFontOfSize:13.0];
                label55.layer.borderWidth = 1.5;
                label55.backgroundColor = [UIColor blackColor];
                label55.textColor = [UIColor whiteColor];
                label55.textAlignment = NSTextAlignmentCenter;
                label55.numberOfLines = 2;
                label55.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                label55.textAlignment = NSTextAlignmentCenter;
                label55.text =nil;
                //            NSString *str1 = [NSString stringWithFormat:@"%d",[[tempArrayItems objectAtIndex:(indexPath.row*5)+4] intValue]*[[tempArrayItems objectAtIndex:(indexPath.row*5)+3] intValue]];
                //            label5.text = str1;
                
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                        
                        label11.font = [UIFont systemFontOfSize:18];
                        label11.frame = CGRectMake(0, 0, 90, 40);
                        label222.font = [UIFont systemFontOfSize:18];
                        label222.frame = CGRectMake(90, 0, 90, 40);
                        label33.font = [UIFont systemFontOfSize:18];
                        label33.frame = CGRectMake(180, 0, 100, 40);
                        label44.font = [UIFont systemFontOfSize:18];
                        label44.frame = CGRectMake(280, 0, 100, 40);
                        label55.font = [UIFont systemFontOfSize:18];
                        label55.frame = CGRectMake(380, 0, 90, 40);
                    }
                    else {
                        label11.font = [UIFont systemFontOfSize:20];
                        label11.frame = CGRectMake(10, 0, 144, 56);
                        label222.font = [UIFont systemFontOfSize:20];
                        label222.frame = CGRectMake(152, 0, 144, 56);
                        label33.font = [UIFont systemFontOfSize:20];
                        label33.frame = CGRectMake(290, 0, 144, 56);
                        label44.font = [UIFont systemFontOfSize:20];
                        label44.frame = CGRectMake(434, 0, 144, 56);
                        label55.font = [UIFont systemFontOfSize:20];
                        label55.frame = CGRectMake(575, 0, 144, 56);
                    }
                }
                else {
                    label11.frame = CGRectMake(0, 0, 63, 34);
                    label222.frame = CGRectMake(62, 0, 62, 34);
                    label33.frame = CGRectMake(123, 0, 57, 34);
                    label44.frame = CGRectMake(179, 0, 58, 34);
                    label55.frame = CGRectMake(236, 0, 57, 34);
                }
                
                cell.backgroundColor = [UIColor clearColor];
                [cell.contentView addSubview:label11];
                [cell.contentView addSubview:label222];
                [cell.contentView addSubview:label33];
                [cell.contentView addSubview:label44];
                [cell.contentView addSubview:label55];
                
            }
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception.name);
        }
        
    }
    else if (tableView == itemTable || tableView == itemTableExchg) {
        tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        
        
        static NSString *CellIdentifier = @"Cell";
        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        
        off = [UIImage imageNamed:@"checkbox_off_background.png"];
        on  = [UIImage imageNamed:@"checkbox_on_background.png"];
        
        if ((cell.contentView).subviews){
            for (UIView *subview in (cell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        if (cell == nil) {
            cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
            cell.frame = CGRectZero;
        }
        
        cell.backgroundColor = [UIColor clearColor];
        NSDictionary *temp3;
        UIButton *editButton;
        NSMutableDictionary *temp= [[NSMutableDictionary alloc] init];
        NSMutableDictionary *temp1 = [[NSMutableDictionary alloc] init];
        // NSMutableArray *skuarr = [[NSMutableArray alloc]init];
        NSMutableDictionary *dic = [[NSMutableDictionary alloc]init];
        NSMutableDictionary *dic1 = [[NSMutableDictionary alloc]init];
        NSMutableDictionary *price_dic = [[NSMutableDictionary alloc]init];
        NSMutableDictionary *price_dic1 = [[NSMutableDictionary alloc]init];
        float returnqty = 0;
        float exchQty = 0;
        
        if (tableView == itemTable) {
            
            @try {
                
                temp3 = [tempReturnItems[indexPath.row] copy];
            }
            @catch (NSException *exception) {
                
            }
            
            
            editButton = [[UIButton alloc] init];
            [editButton setImage:[UIImage imageNamed:@"edit_button.png"] forState:UIControlStateNormal];
            editButton.backgroundColor = [UIColor clearColor];
            editButton.tag = indexPath.row;
            [editButton addTarget:self action:@selector(updatingItems:) forControlEvents:UIControlEventTouchUpInside];
            
        }
        else {
            @try {
                
                temp3 = [tempExchangeItems[indexPath.row] copy];
                
            }
            @catch (NSException *exception) {
                
                NSLog(@"%@",exception);
            }
            
            editButton = [[UIButton alloc] init];
            [editButton setImage:[UIImage imageNamed:@"edit_button.png"] forState:UIControlStateNormal];
            editButton.backgroundColor = [UIColor clearColor];
            editButton.tag = indexPath.row;
            [editButton addTarget:self action:@selector(updatingExchangeItems:) forControlEvents:UIControlEventTouchUpInside];
        }
        
        UILabel*label11 = [[UILabel alloc] init] ;
        label11.font = [UIFont systemFontOfSize:13.0];
        label11.layer.borderWidth = 1.5;
        label11.backgroundColor = [UIColor clearColor];
        label11.textAlignment = NSTextAlignmentCenter;
        label11.numberOfLines = 2;
        label11.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        label11.lineBreakMode = NSLineBreakByWordWrapping;
        //label11.text = [temp3 objectAtIndex:1];
        label11.textColor = [UIColor whiteColor];
        
        UILabel *label222 =[[UILabel alloc] init] ;
        label222.font = [UIFont systemFontOfSize:13.0];
        label222.layer.borderWidth = 1.5;
        label222.backgroundColor = [UIColor clearColor];
        label222.textAlignment = NSTextAlignmentCenter;
        label222.numberOfLines = 2;
        label222.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        label222.lineBreakMode = NSLineBreakByWordWrapping;
        // label222.text = [temp3 objectAtIndex:4];
        label222.textColor = [UIColor whiteColor];
        
        UILabel *label33 = [[UILabel alloc] init] ;
        label33.font = [UIFont systemFontOfSize:13.0];
        label33.layer.borderWidth = 1.5;
        label33.backgroundColor = [UIColor clearColor];
        label33.textAlignment = NSTextAlignmentCenter;
        label33.numberOfLines = 2;
        label33.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        label33.textAlignment = NSTextAlignmentCenter;
        // label33.text = [temp3 objectAtIndex:2];
        label33.textColor = [UIColor whiteColor];
        
        UILabel *label44 = [[UILabel alloc] init] ;
        label44.font = [UIFont systemFontOfSize:13.0];
        label44.layer.borderWidth = 1.5;
        label44.backgroundColor = [UIColor clearColor];
        label44.layer.borderColor =  [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        label44.textAlignment = NSTextAlignmentCenter;
        //  label44.text = [temp3 objectAtIndex:5];
        label44.textColor = [UIColor whiteColor];
        
        
        UILabel *label55 = [[UILabel alloc] init] ;
        label55.font = [UIFont systemFontOfSize:13.0];
        label55.layer.borderWidth = 1.5;
        label55.backgroundColor = [UIColor clearColor];
        label55.textAlignment = NSTextAlignmentCenter;
        label55.numberOfLines = 2;
        label55.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        label55.textAlignment = NSTextAlignmentCenter;
        // label55.text = [temp3 objectAtIndex:3];
        label55.textColor = [UIColor whiteColor];
        
        
        
        @try {
            
            if (!isOfflineService) {
                label11.text = [temp3 valueForKey:ITEM_NAME];
                label222.text = [temp3 valueForKey:ITEM_UNIT_PRICE];
                
                label33.text = [temp3 valueForKey:QUANTITY];
                
                label44.text = [temp3 valueForKey:RETURN_QUANTITY];
                
                label55.text = [NSString stringWithFormat:@"%.2f",((label33.text).floatValue * (label222.text).floatValue)];
            }
            else {
                label11.text = [temp3 valueForKey:ITEM_NAME];
                label222.text = [temp3 valueForKey:ITEM_UNIT_PRICE];
                label33.text = [temp3 valueForKey:QUANTITY];
                label44.text = [temp3 valueForKey:RETURN_QUANTITY];
                label55.text = [NSString stringWithFormat:@"%.2f",((label33.text).floatValue * (label222.text).floatValue)];
            }
            
            
            //--
            /*
             NSDictionary *temp = [tempReturnItems objectAtIndex:i];
             if ([[temp valueForKey:RETURN_QUANTITY]floatValue] > 0) {
             
             //added by Srinivasulu on 31/07/2017....
             if (([[temp  allKeys] containsObject:@"billedItemUnitPrice"] && ![[temp objectForKey:@"billedItemUnitPrice"] isKindOfClass:[NSNull class]])) {
             
             returningBill = returningBill + ([[temp valueForKey:@"billedItemUnitPrice"] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
             }
             
             */
            
            for (int i=0; i<tempReturnDetails.count; i++) {
                
                temp = tempReturnDetails[i];
                
                dic[[temp valueForKey:SKU_ID]] = [temp valueForKey:QUANTITY];
                
                price_dic[[temp valueForKey:SKU_ID]] = [NSString stringWithFormat:@"%.2f",[[temp valueForKey:ITEM_UNIT_PRICE] floatValue]];
                if ([[temp valueForKey:PLU_CODE] isEqualToString:[temp3 valueForKey:PLU_CODE]]) {
                    returnqty = returnqty + [[temp valueForKey:QUANTITY] floatValue];
                }
                
            }
            for (int i=0; i<tempExchangeDetails.count; i++) {
                
                temp1 = tempExchangeDetails[i];
                
                dic1[[temp1 valueForKey:SKU_ID]] = [temp1 valueForKey:QUANTITY];
                price_dic1[[temp1 valueForKey:SKU_ID]] = [NSString stringWithFormat:@"%.2f",[[temp1 valueForKey:ITEM_UNIT_PRICE] floatValue]];
                if ([[temp1 valueForKey:PLU_CODE] isEqualToString:[temp3 valueForKey:PLU_CODE]]) {
                    
                    exchQty = exchQty + [[temp1 valueForKey:QUANTITY] floatValue];
                }
                
            }
            
            
            
            //added by Srinivasulu on 20/11/2017....
            
            
            for(NSDictionary * tempReturnDic in tempReturnItems){
                
                if ([[tempReturnDic valueForKey:PLU_CODE] isEqualToString:[temp3 valueForKey:PLU_CODE]]) {
                    
                    returnqty = returnqty + [[self checkGivenValueIsNullOrNil:[tempReturnDic valueForKey:RETURN_QUANTITY] defaultReturn:@"0.00"] floatValue];
                }
            }
            
            for(NSDictionary * tempExchangeDic in tempExchangeItems){
                
                if ([[tempExchangeDic valueForKey:PLU_CODE] isEqualToString:[temp3 valueForKey:PLU_CODE]]) {
                    
                    exchQty = exchQty + [[self checkGivenValueIsNullOrNil:[tempExchangeDic valueForKey:RETURN_QUANTITY] defaultReturn:@"0.00"] floatValue];
                }
            }
            
            //added by Srinivasulu on 20/11/2017....
            
            
            //added by Srinivasulu on 09/10/2017....
            //reason complete returned quantites should be displayed irrespective to the there status.... raised the sir....
            
            //tempExchangeDetails --  tempReturnDetails
            
            if(tableView == itemTable){
                
                label44.text =  [NSString stringWithFormat:@"%.2f", returnqty];
            }
            else{
                
                label44.text = [NSString stringWithFormat:@"%.2f", exchQty];
            }
            
            //upto here on 09/10/2017....
            //this condition has to be changed....
            if (([dic.allKeys containsObject:[temp3 valueForKey:SKU_ID]] && ([price_dic.allValues containsObject:[temp3 valueForKey:ITEM_UNIT_PRICE]] || [price_dic.allValues containsObject:[temp3 valueForKey:BILLED_ITEM_UNIT_PRICE]])) || ([dic1.allKeys containsObject:[temp3 valueForKey:SKU_ID]] && ([price_dic1.allValues containsObject:[temp3 valueForKey:ITEM_UNIT_PRICE]] || [price_dic1.allValues containsObject:[temp3 valueForKey:BILLED_ITEM_UNIT_PRICE]]))) {
                
                if (([[temp3 valueForKey:QUANTITY] floatValue] - (returnqty + exchQty)) >= 0) {
                    
                    label33.text = [NSString stringWithFormat:@"%.2f",[[temp3 valueForKey:QUANTITY] floatValue] - (returnqty + exchQty)];
                }
                else {
                    
                    label33.text = @"0.00";
                }
                
                
                //added by Srinivasulu on 24/10/2017....
                
                label33.text = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[temp3 valueForKey:QUANTITY] defaultReturn:@"0.00"] floatValue]];
                
                //upto here on 24/10/2017....
                
                if ((returnqty + exchQty) == [[temp3 valueForKey:QUANTITY] floatValue]) {
                    
                    editButton.hidden = YES;
                }
                
            }
            else if ([[temp3 valueForKey:ITEM_OFFER_PRICE] floatValue] > 0 || [[temp3 valueForKey:ITEM_DEAL_PRICE] floatValue] > 0){
                
                editButton.hidden = YES;
            }
            else {
                
                label11.textColor = [UIColor whiteColor];
                editButton.hidden = NO;
            }
            
            label55.text = [NSString stringWithFormat:@"%.2f",((label33.text).floatValue * (label222.text).floatValue)];
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        }
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad){
            if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                
                label11.font = [UIFont systemFontOfSize:18];
                label11.frame = CGRectMake(10, 0, 90, 40);
                label222.font = [UIFont systemFontOfSize:18];
                label222.frame = CGRectMake(100, 0, 90, 40);
                label33.font = [UIFont systemFontOfSize:18];
                label33.frame = CGRectMake(190, 0, 100, 40);
                label44.font = [UIFont systemFontOfSize:18];
                label44.frame = CGRectMake(290, 0, 100, 40);
                label55.font = [UIFont systemFontOfSize:18];
                label55.frame = CGRectMake(390, 0, 90, 40);
                editButton.frame = CGRectMake(490, 0, 40, 40);
                
                
                
                //added by Srinivasulu on 17/04/2017....
                
                if (tableView == itemTable || tableView == itemTableExchg) {
                    
                    int extraWidth = 2;
                    if(tableView == itemTable)
                        extraWidth = 2;
                    
                    cell.selectionStyle = UITableViewCellSelectionStyleNone;
                    
                    label11.frame = CGRectMake(label_1.frame.origin.x, 0, label_1.frame.size.width + 2.5, 40);
                    label222.frame = CGRectMake( label11.frame.origin.x + label11.frame.size.width, 0, label_2.frame.size.width + extraWidth, label11.frame.size.height);
                    label33.frame = CGRectMake( label222.frame.origin.x + label222.frame.size.width, 0, label_3.frame.size.width + extraWidth, label11.frame.size.height);
                    label44.frame = CGRectMake( label33.frame.origin.x + label33.frame.size.width, 0, label_4.frame.size.width + extraWidth, label11.frame.size.height);
                    label55.frame = CGRectMake( label44.frame.origin.x + label44.frame.size.width, 0, label_5.frame.size.width + extraWidth, label11.frame.size.height);
                    editButton.frame = CGRectMake( label55.frame.origin.x + label55.frame.size.width, 0, 40, 40);
                    
                    
                }
                
                
                
                //upto here on 17/04/2017....
                
                
                
            }
            else {
                label11.font = [UIFont systemFontOfSize:20.0];
                label11.frame = CGRectMake(10, 0, 144, 56);
                label222.font = [UIFont systemFontOfSize:20.0];
                label222.frame = CGRectMake(154, 0, 144, 56);
                label33.font = [UIFont systemFontOfSize:20.0];
                label33.frame = CGRectMake(296, 0, 144, 56);
                label44.font = [UIFont systemFontOfSize:20.0];
                label44.frame = CGRectMake(438, 0, 144, 56);
                label55.font = [UIFont systemFontOfSize:20.0];
                label55.frame = CGRectMake(580, 0, 124, 56);
                editButton.frame = CGRectMake(710.0, 0, 50, 50);
            }
            
        }
        else {
            label11.frame = CGRectMake(5, 0, 58, 30);
            label222.frame = CGRectMake(63, 0, 58, 30);
            label33.frame = CGRectMake(122, 0, 58, 30);
            label44.frame = CGRectMake(181, 0, 58, 30);
            label55.frame = CGRectMake(239, 0, 50, 30);
            editButton.frame = CGRectMake(290.0, 0, 30.0, 30.0);
        }
        
        //            NSString *str = [NSString stringWithFormat:@"%@#%@#%@#%@#%@#%@",label1.text,label2.text,label3.text,label4.text,label5.text,[tempArrayItems objectAtIndex:(indexPath.row*5)+1]];
        //            [cartItem addObject:str];
        
        [cell.contentView addSubview:label11];
        [cell.contentView addSubview:label222];
        [cell.contentView addSubview:label33];
        [cell.contentView addSubview:label44];
        [cell.contentView addSubview:label55];
        [cell.contentView addSubview:editButton];
        cell.backgroundColor = [UIColor clearColor];
        cell.tag = indexPath.row;
        
        return cell;
    }
    
    
    //added by Srinvasulu on 15/06/2017....
    
    else if (tableView == reasonTbl){
        
        static NSString *CellIdentifier = @"ReasonCell";
        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        
        if ((cell.contentView).subviews){
            for (UIView *subview in (cell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        if (cell == nil) {
            cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
            cell.frame = CGRectZero;
        }
        
        @try {
            
            cell.textLabel.text = returnReasonsArr[indexPath.row];
            cell.textLabel.numberOfLines = 2;
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception.name);
        }
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            cell.textLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        }
        else{
            
            cell.textLabel.font = [UIFont boldSystemFontOfSize:18];
        }
        
        return cell;
        
    }
    else if(tableView == denominstaionsTypeTbl){
        
        @try {
            static NSString * CellIdentifier = @"denominstaionsTypeCell";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            
            hlcell.textLabel.text = @"";
            
            if([denominationsTypeArr[indexPath.row] isKindOfClass:[NSDictionary class]])
                hlcell.textLabel.text = [self checkGivenValueIsNullOrNil:[denominationsTypeArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
            
        }
        @catch (NSException *exception) {
            
        }
    }
    else if(tableView == cardTypesTbl){
        
        @try {
            static NSString * CellIdentifier = @"denominstaionsTypeCell";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            
            hlcell.textLabel.text = @"";
            
            if([cardTypesArr[indexPath.row] isKindOfClass:[NSDictionary class]])
                hlcell.textLabel.text = [self checkGivenValueIsNullOrNil:[cardTypesArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
            
        }
        @catch (NSException *exception) {
            
        }
    }
    else if(tableView == otherPaymentsOptionsTbl){
        
        @try {
            static NSString * CellIdentifier = @"otherPaymentsOptionsCell";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            
            hlcell.textLabel.text = @"";
            
            if([otherPaymentsOptionsArr[indexPath.row] isKindOfClass:[NSDictionary class]])
                hlcell.textLabel.text = [self checkGivenValueIsNullOrNil:[otherPaymentsOptionsArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
        }
        @catch (NSException *exception) {
            
        }
    }
    else if(tableView == otherPaymentsDetailsTbl){
        
        static NSString *hlCellID = @"otherPaymentCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        hlcell.backgroundColor = [UIColor clearColor];
        
        
        UILabel * billPaymentRefNoLbl;
        UILabel * billPaymentModeLbl;
        UILabel * billPaymentValueLbl;
        UILabel * billPaymentCountLbl;
        UILabel * billPaymentTotalLbl;
        
        UIButton * delrowbtn;
        
        
        billPaymentRefNoLbl = [[UILabel alloc] init];
        billPaymentRefNoLbl.backgroundColor = [UIColor clearColor];
        billPaymentRefNoLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentRefNoLbl.numberOfLines = 1;
        billPaymentRefNoLbl.layer.borderWidth = 1.5;
        billPaymentRefNoLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentRefNoLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentRefNoLbl.textColor = [UIColor whiteColor];
        
        billPaymentModeLbl = [[UILabel alloc] init];
        billPaymentModeLbl.backgroundColor = [UIColor clearColor];
        billPaymentModeLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentModeLbl.numberOfLines = 1;
        billPaymentModeLbl.layer.borderWidth = 1.5;
        billPaymentModeLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentModeLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentModeLbl.textColor = [UIColor whiteColor];
        
        billPaymentValueLbl = [[UILabel alloc] init];
        billPaymentValueLbl.backgroundColor = [UIColor clearColor];
        billPaymentValueLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentValueLbl.numberOfLines = 1;
        billPaymentValueLbl.layer.borderWidth = 1.5;
        billPaymentValueLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentValueLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentValueLbl.textColor = [UIColor whiteColor];
        
        billPaymentCountLbl = [[UILabel alloc] init];
        billPaymentCountLbl.backgroundColor = [UIColor clearColor];
        billPaymentCountLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentCountLbl.numberOfLines = 1;
        billPaymentCountLbl.layer.borderWidth = 1.5;
        billPaymentCountLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentCountLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentCountLbl.textColor = [UIColor whiteColor];
        
        billPaymentTotalLbl = [[UILabel alloc] init];
        billPaymentTotalLbl.backgroundColor = [UIColor clearColor];
        billPaymentTotalLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentTotalLbl.numberOfLines = 1;
        billPaymentTotalLbl.layer.borderWidth = 1.5;
        billPaymentTotalLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentTotalLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentTotalLbl.textColor = [UIColor whiteColor];
        
        delrowbtn = [[UIButton alloc] init];
        [delrowbtn setImage:[UIImage imageNamed:@"delete.png"] forState:UIControlStateNormal];
        [delrowbtn addTarget:self action:@selector(delTransactionFromOtherPaymentList:) forControlEvents:UIControlEventTouchUpInside];
        delrowbtn.tag = indexPath.row;
        delrowbtn.backgroundColor = [UIColor clearColor];
        
        //---
        
        [hlcell.contentView addSubview:billPaymentRefNoLbl];
        [hlcell.contentView addSubview:billPaymentModeLbl];
        [hlcell.contentView addSubview:billPaymentValueLbl];
        [hlcell.contentView addSubview:billPaymentCountLbl];
        [hlcell.contentView addSubview:billPaymentTotalLbl];
        [hlcell.contentView addSubview:delrowbtn];
        
        @try {
            
            
            if(otherPaymentsDeatilsArr.count > indexPath.row){
                
                NSDictionary * dic = otherPaymentsDeatilsArr[indexPath.row];
                
                billPaymentRefNoLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentType"] defaultReturn:@"--"];
                billPaymentModeLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentMode"] defaultReturn:@"--"];
                billPaymentValueLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentValue"] defaultReturn:@"--"];
                billPaymentCountLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentCount"] defaultReturn:@"--"];
                billPaymentTotalLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentTotal"] defaultReturn:@"--"];
            }
            
            
            
            
            
        } @catch (NSException *exception) {
            
        }
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:hlcell andSubViews:YES fontSize:14.0f cornerRadius:0.0];
            
            billPaymentRefNoLbl.frame = CGRectMake( paymentRefNoLbl.frame.origin.x, 0, paymentRefNoLbl.frame.size.width + 2, 40);
            
            billPaymentModeLbl.frame = CGRectMake( paymentModeLbl.frame.origin.x, 0, paymentModeLbl.frame.size.width + 2,40);
            
            billPaymentValueLbl.frame = CGRectMake( paymentValueLbl.frame.origin.x, 0, paymentValueLbl.frame.size.width + 2,40);
            
            billPaymentCountLbl.frame = CGRectMake( paymentCountLbl.frame.origin.x, 0, paymentCountLbl.frame.size.width + 2,40);
            
            billPaymentTotalLbl.frame = CGRectMake( paymentTotalLbl.frame.origin.x, 0, paymentTotalLbl.frame.size.width + 2,40);
            delrowbtn.frame = CGRectMake( billPaymentTotalLbl.frame.origin.x + billPaymentTotalLbl.frame.size.width + 4, 0, 40,40);
            
        }
        else{
            
            
        }
        
        return  hlcell;
        
    }
    else if(tableView == currentBilledItemsTbl){
        
        static NSString * hlCellID = @"currentBilledItemsTbl";
        
        UITableViewCell * hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView * subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        hlcell.backgroundColor = [UIColor clearColor];
        
        
        UILabel * currentBillItemLbl;
        UILabel * currentBillItemPriceLbl;
        UILabel * currentBillItemQtyLbl;
        UILabel * currentBillItemDiscountLbl;
        UILabel * currentBillItemTotalCostLbl;
        
        
        currentBillItemLbl = [[UILabel alloc] init];
        currentBillItemLbl.backgroundColor = [UIColor clearColor];
        currentBillItemLbl.textAlignment = NSTextAlignmentCenter;
        currentBillItemLbl.numberOfLines = 1;
        currentBillItemLbl.layer.borderWidth = 1;
        currentBillItemLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        currentBillItemLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        currentBillItemLbl.textColor = [UIColor whiteColor];
        
        currentBillItemPriceLbl = [[UILabel alloc] init];
        currentBillItemPriceLbl.backgroundColor = [UIColor clearColor];
        currentBillItemPriceLbl.textAlignment = NSTextAlignmentCenter;
        currentBillItemPriceLbl.numberOfLines = 1;
        currentBillItemPriceLbl.layer.borderWidth = 1;
        currentBillItemPriceLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        currentBillItemPriceLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        currentBillItemPriceLbl.textColor = [UIColor whiteColor];
        
        currentBillItemQtyLbl = [[UILabel alloc] init];
        currentBillItemQtyLbl.backgroundColor = [UIColor clearColor];
        currentBillItemQtyLbl.textAlignment = NSTextAlignmentCenter;
        currentBillItemQtyLbl.numberOfLines = 1;
        currentBillItemQtyLbl.layer.borderWidth = 1;
        currentBillItemQtyLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        currentBillItemQtyLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        currentBillItemQtyLbl.textColor = [UIColor whiteColor];
        
        currentBillItemDiscountLbl = [[UILabel alloc] init];
        currentBillItemDiscountLbl.backgroundColor = [UIColor clearColor];
        currentBillItemDiscountLbl.textAlignment = NSTextAlignmentCenter;
        currentBillItemDiscountLbl.numberOfLines = 1;
        currentBillItemDiscountLbl.layer.borderWidth = 1;
        currentBillItemDiscountLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        currentBillItemDiscountLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        currentBillItemDiscountLbl.textColor = [UIColor whiteColor];
        
        currentBillItemTotalCostLbl = [[UILabel alloc] init];
        currentBillItemTotalCostLbl.backgroundColor = [UIColor clearColor];
        currentBillItemTotalCostLbl.textAlignment = NSTextAlignmentCenter;
        currentBillItemTotalCostLbl.numberOfLines = 1;
        currentBillItemTotalCostLbl.layer.borderWidth = 1;
        currentBillItemTotalCostLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        currentBillItemTotalCostLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        currentBillItemTotalCostLbl.textColor = [UIColor whiteColor];
        
        
        
        [hlcell.contentView addSubview:currentBillItemLbl];
        [hlcell.contentView addSubview:currentBillItemPriceLbl];
        [hlcell.contentView addSubview:currentBillItemQtyLbl];
        [hlcell.contentView addSubview:currentBillItemDiscountLbl];
        [hlcell.contentView addSubview:currentBillItemTotalCostLbl];
        
        @try {
            
            if(cartTotalItems.count > indexPath.row){
                
                NSDictionary * dic = cartTotalItems[indexPath.row];
                
                currentBillItemLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:ITEM_NAME] defaultReturn:@"--"];
                currentBillItemPriceLbl.text  = [NSString stringWithFormat:@"%.02f",[[self checkGivenValueIsNullOrNil:[dic valueForKey:ITEMUNITPRICE] defaultReturn:@"0.00"] floatValue]];
                currentBillItemQtyLbl.text  = [NSString stringWithFormat:@"%.02f",[[self checkGivenValueIsNullOrNil:[dic valueForKey:QUANTITY] defaultReturn:@"0.00"] floatValue]];
                currentBillItemTotalCostLbl.text  = [NSString stringWithFormat:@"%.02f",[[self checkGivenValueIsNullOrNil:[dic valueForKey:ITEM_TOTAL_PRICE] defaultReturn:@"0.00"] floatValue]];
                currentBillItemDiscountLbl.text = @"0.00";
                
                if (!([dic valueForKey:ITEM_DISCOUNT] == nil && [[dic valueForKey:ITEM_DISCOUNT] isKindOfClass:[NSNull class]])) {
                    
                    currentBillItemDiscountLbl.text = [NSString stringWithFormat:@"%.2f",[[dic valueForKey:ITEM_DISCOUNT] floatValue]];
                    
                    float itemTotalPriceWithDisc = ([[dic valueForKey:ITEMUNITPRICE] floatValue] *  [[dic valueForKey:QUANTITY] floatValue]) - [[self checkGivenValueIsNullOrNil:[dic valueForKey:DISCOUNT_PRICE] defaultReturn:@"0.00"] floatValue];
                    
                    float fraction = [NSString stringWithFormat:@"%.2f",((otherDiscVal.text).floatValue / ((totalBillValue.text).floatValue + (otherDiscVal.text).floatValue))].floatValue;
                    if(((cellItemDiscLbl.text).floatValue - ( itemTotalPriceWithDisc * fraction)) >= 0){
                        
                        currentBillItemDiscountLbl.text = [NSString stringWithFormat:@"%.2f",((cellItemDiscLbl.text).floatValue - ( itemTotalPriceWithDisc * fraction))];
                    }
                    else{
                        
                        currentBillItemDiscountLbl.text = @"0.00";
                    }
                    
                }
                
                currentBillItemTotalCostLbl.text = [NSString stringWithFormat:@"%.2f",([[dic valueForKey:ITEM_TOTAL_PRICE] floatValue] - (cellItemDiscLbl.text).floatValue)];
            }
            
        } @catch (NSException *exception) {
            
        }
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:hlcell andSubViews:YES fontSize:16.0f cornerRadius:0.0];
            
            currentBillItemLbl.frame = CGRectMake( currentBilledItemLbl.frame.origin.x, 0, currentBilledItemLbl.frame.size.width + 2, 40);
            
            currentBillItemPriceLbl.frame = CGRectMake( currentBilledtemPriceLbl.frame.origin.x, 0, currentBilledtemPriceLbl.frame.size.width + 2,40);
            
            currentBillItemQtyLbl.frame = CGRectMake( currentBilledItemQtyLbl.frame.origin.x, 0, currentBilledItemQtyLbl.frame.size.width + 2,40);
            
            currentBillItemDiscountLbl.frame = CGRectMake( currentBilledItemDiscountLbl.frame.origin.x, 0, currentBilledItemDiscountLbl.frame.size.width + 2,40);
            
            currentBillItemTotalCostLbl.frame = CGRectMake( currentBilledItemTotalCostLbl.frame.origin.x, 0, currentBilledItemTotalCostLbl.frame.size.width + 2,40);
        }
        else{
            
            
        }
        
        hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
        return  hlcell;
        
    }
    else if(tableView == exchangedBilledItemsTbl){
        
        static NSString * hlCellID = @"exchangedBilledItemsCell";
        
        UITableViewCell * hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView * subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        hlcell.backgroundColor = [UIColor clearColor];
        
        UILabel * exchangedBillItemSkuidLbl;
        UILabel * exchangedBillItemLbl;
        UILabel * exchangedBillDateLbl;
        UILabel * exchangedBillItemPriceLbl;
        UILabel * exchangedBillItemQtyLbl;
        UILabel * exchangedBillItemTotalCostLbl;
        
        exchangedBillItemSkuidLbl = [[UILabel alloc] init];
        exchangedBillItemSkuidLbl.backgroundColor = [UIColor clearColor];
        exchangedBillItemSkuidLbl.textAlignment = NSTextAlignmentCenter;
        exchangedBillItemSkuidLbl.numberOfLines = 1;
        exchangedBillItemSkuidLbl.layer.borderWidth = 1;
        exchangedBillItemSkuidLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        exchangedBillItemSkuidLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        exchangedBillItemSkuidLbl.textColor = [UIColor whiteColor];
        
        exchangedBillItemLbl = [[UILabel alloc] init];
        exchangedBillItemLbl.backgroundColor = [UIColor clearColor];
        exchangedBillItemLbl.textAlignment = NSTextAlignmentCenter;
        exchangedBillItemLbl.numberOfLines = 1;
        exchangedBillItemLbl.layer.borderWidth = 1;
        exchangedBillItemLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        exchangedBillItemLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        exchangedBillItemLbl.textColor = [UIColor whiteColor];
        
        exchangedBillDateLbl = [[UILabel alloc] init];
        exchangedBillDateLbl.backgroundColor = [UIColor clearColor];
        exchangedBillDateLbl.textAlignment = NSTextAlignmentCenter;
        exchangedBillDateLbl.numberOfLines = 1;
        exchangedBillDateLbl.layer.borderWidth = 1;
        exchangedBillDateLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        exchangedBillDateLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        exchangedBillDateLbl.textColor = [UIColor whiteColor];
        
        exchangedBillItemPriceLbl = [[UILabel alloc] init];
        exchangedBillItemPriceLbl.backgroundColor = [UIColor clearColor];
        exchangedBillItemPriceLbl.textAlignment = NSTextAlignmentCenter;
        exchangedBillItemPriceLbl.numberOfLines = 1;
        exchangedBillItemPriceLbl.layer.borderWidth = 1;
        exchangedBillItemPriceLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        exchangedBillItemPriceLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        exchangedBillItemPriceLbl.textColor = [UIColor whiteColor];
        
        exchangedBillItemQtyLbl = [[UILabel alloc] init];
        exchangedBillItemQtyLbl.backgroundColor = [UIColor clearColor];
        exchangedBillItemQtyLbl.textAlignment = NSTextAlignmentCenter;
        exchangedBillItemQtyLbl.numberOfLines = 1;
        exchangedBillItemQtyLbl.layer.borderWidth = 1;
        exchangedBillItemQtyLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        exchangedBillItemQtyLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        exchangedBillItemQtyLbl.textColor = [UIColor whiteColor];
        
        exchangedBillItemTotalCostLbl = [[UILabel alloc] init];
        exchangedBillItemTotalCostLbl.backgroundColor = [UIColor clearColor];
        exchangedBillItemTotalCostLbl.textAlignment = NSTextAlignmentCenter;
        exchangedBillItemTotalCostLbl.numberOfLines = 1;
        exchangedBillItemTotalCostLbl.layer.borderWidth = 1.5;
        exchangedBillItemTotalCostLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        exchangedBillItemTotalCostLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        exchangedBillItemTotalCostLbl.textColor = [UIColor whiteColor];
        
        
        [hlcell.contentView addSubview:exchangedBillItemSkuidLbl];
        [hlcell.contentView addSubview:exchangedBillItemLbl];
        [hlcell.contentView addSubview:exchangedBillDateLbl];
        [hlcell.contentView addSubview:exchangedBillItemPriceLbl];
        [hlcell.contentView addSubview:exchangedBillItemQtyLbl];
        [hlcell.contentView addSubview:exchangedBillItemTotalCostLbl];
        
        @try {
            
            
            if(exchangedItemsArr.count > indexPath.row){
                
                
                NSDictionary * dic = exchangedItemsArr[indexPath.row];
                
                exchangedBillItemSkuidLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:SKU_ID] defaultReturn:@"--"];
                exchangedBillItemLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:ITEM_NAME] defaultReturn:@"--"];
                exchangedBillDateLbl.text  = [self checkGivenValueIsNullOrNil:[[dic valueForKey:DATE_TIME] componentsSeparatedByString:@" "][0] defaultReturn:@"--"];
                exchangedBillItemPriceLbl.text  = [NSString stringWithFormat:@"%.02f",[[self checkGivenValueIsNullOrNil:[dic valueForKey:ITEM_UNIT_PRICE] defaultReturn:@"0.00"] floatValue]];
                exchangedBillItemQtyLbl.text  = [NSString stringWithFormat:@"%.02f",[[self checkGivenValueIsNullOrNil:[dic valueForKey:QUANTITY] defaultReturn:@"0.00"] floatValue]];
                exchangedBillItemTotalCostLbl.text = [NSString stringWithFormat:@"%.02f",[[self checkGivenValueIsNullOrNil:[dic valueForKey:COST] defaultReturn:@"0.00"] floatValue]];
            }
            
        } @catch (NSException *exception) {
            
        }
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:hlcell andSubViews:YES fontSize:16.0f cornerRadius:0.0];
            
            exchangedBillItemSkuidLbl.frame = CGRectMake( 0, 0, exchangedItemSkuidLbl.frame.size.width + 2, 40);
            exchangedBillItemLbl.frame = CGRectMake( exchangedBillItemSkuidLbl.frame.origin.x + exchangedBillItemSkuidLbl.frame.size.width, 0, exchangedItemLbl.frame.size.width + 2, 40);
            
            exchangedBillDateLbl.frame = CGRectMake( exchangedBillItemLbl.frame.origin.x + exchangedBillItemLbl.frame.size.width, 0, exchangedDateLbl.frame.size.width + 2,40);
            
            exchangedBillItemPriceLbl.frame = CGRectMake( exchangedBillDateLbl.frame.origin.x + exchangedBillDateLbl.frame.size.width, 0, exchangedItemPriceLbl.frame.size.width + 2,40);
            
            exchangedBillItemQtyLbl.frame = CGRectMake(  exchangedBillItemPriceLbl.frame.origin.x + exchangedBillItemPriceLbl.frame.size.width, 0, exchangedItemQtyLbl.frame.size.width + 2,40);
            
            exchangedBillItemTotalCostLbl.frame = CGRectMake(  exchangedBillItemQtyLbl.frame.origin.x + exchangedBillItemQtyLbl.frame.size.width, 0, exchangedItemTotalCostLbl.frame.size.width,40);
        }
        else{
            
            
        }
        
        return  hlcell;
        
    }
    
    
    //upto here on 15/06/2017....
    else{
        @try {
            
            NSDictionary *temp3 = cartTotalItems[indexPath.row];
            // NSArray *temp3 = [tempArrayItems objectAtIndex:indexPath.row];
            BOOL status = FALSE;
            
            label1 = [[UILabel alloc] init];
            label1.font = [UIFont systemFontOfSize:13.0];
            label1.layer.borderWidth = 1.0;
            label1.backgroundColor = [UIColor blackColor];
            label1.textColor = [UIColor whiteColor];
            label1.textAlignment = NSTextAlignmentCenter;
            label1.numberOfLines = 2;
            label1.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            label1.lineBreakMode = NSLineBreakByWordWrapping;
            label1.text = [temp3 valueForKey:SKU_ID];
            
            for (int i = 0; i < dealDataItems.count; i++) {
                
                DealsController *_dealsController = dealDataItems[i];
                
                NSMutableArray *skuids = _dealsController.dealSkuId;
                if ([skuids containsObject:[temp3 valueForKey:SKU_ID]]) {
                    status = TRUE;
                }
            }
            // check for deals,offers on the skuid....
            
            if (dealDataItems.count!=0) {
                
                for (int i = 0; i < dealDataItems.count; i++) {
                    
                    DealsController *_dealsController = dealDataItems[i];
                    
                    NSMutableArray *skuids = [(_dealsController.productData).allKeys mutableCopy];
                    
                    //  NSArray *arr = [_dealsController.productData valueForKey:[skuids objectAtIndex:i]];
                    
                    for (int k=0; k<skuids.count; k++) {
                        
                        if ([skuids[k] containsString:[temp3 valueForKey:SKU_ID]]) {
                            label1.textColor = [UIColor orangeColor];
                            CABasicAnimation *basic=[CABasicAnimation animationWithKeyPath:@"transform"];
                            basic.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeScale(1.08, 1.08, 1.08)];
                            [basic setAutoreverses:YES];
                            [basic setRepeatCount:MAXFLOAT];
                            basic.duration = 0.35;
                            [label1.layer addAnimation:basic forKey:@"transform"];
                        }
                        
                    }
                }
                
            }
            if (offerDic.count!=0) {
                
                NSArray *skus = offerDic.allKeys;
                
                for (int i=0; i<skus.count; i++) {
                    
                    if ([skus[i] containsString:[temp3 valueForKey:SKU_ID]]) {
                        
                        label1.textColor = [UIColor greenColor];
                        CABasicAnimation *basic=[CABasicAnimation animationWithKeyPath:@"transform"];
                        basic.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeScale(1.08, 1.08, 1.08)];
                        [basic setAutoreverses:YES];
                        [basic setRepeatCount:MAXFLOAT];
                        basic.duration = 0.35;
                        [label1.layer addAnimation:basic forKey:@"transform"];
                    }
                }
            }
            
            
            label2 = [[UILabel alloc] init];
            label2.font = [UIFont systemFontOfSize:13.0];
            label2.layer.borderWidth = 1.0;
            label2.backgroundColor = [UIColor blackColor];
            label2.textColor = [UIColor whiteColor];
            label2.textAlignment = NSTextAlignmentCenter;
            label2.numberOfLines = 2;
            label2.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            label2.lineBreakMode = NSLineBreakByWordWrapping;
            label2.text = [temp3 valueForKey:ITEM_NAME];
            
            label3 = [[UILabel alloc] init];
            label3.font = [UIFont systemFontOfSize:13.0];
            label3.layer.borderWidth = 1.0;
            label3.backgroundColor = [UIColor blackColor];
            label3.textColor = [UIColor whiteColor];
            label3.textAlignment = NSTextAlignmentCenter;
            label3.numberOfLines = 2;
            label3.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            label3.textAlignment = NSTextAlignmentCenter;
            label3.text = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:ITEMUNITPRICE]floatValue])];
            
            priceButton = [[UIButton alloc] init] ;
            priceButton.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            priceButton.layer.borderWidth = 1.5;
            priceButton.titleLabel.font = [UIFont systemFontOfSize:13.0];
            priceButton.frame = CGRectMake(176, 0, 58, 34);
            priceButton.backgroundColor = [UIColor blackColor];
            
            priceButton.titleLabel.textColor = [UIColor whiteColor];
            [priceButton setTitle:[NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:ITEMUNITPRICE]floatValue])] forState:UIControlStateNormal] ;
            [priceButton addTarget:self action:@selector(populatePriceEditView:) forControlEvents:UIControlEventTouchUpInside];
            priceButton.tag = indexPath.row;
            priceButton.userInteractionEnabled = FALSE;
            
            
            qty1 = [[UIButton alloc] init] ;
            qty1.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            qty1.layer.borderWidth = 1.5;
            qty1.titleLabel.font = [UIFont systemFontOfSize:13.0];
            qty1.frame = CGRectMake(176, 0, 58, 34);
            qty1.backgroundColor = [UIColor blackColor];
            [qty1 setTitle:[NSString stringWithFormat:@"%.2f",[[temp3 valueForKey:QUANTITY] floatValue]] forState:UIControlStateNormal] ;
            qty1.titleLabel.textColor = [UIColor whiteColor];
            qty1.userInteractionEnabled = NO;
            if ([billingType isEqualToString:@"pending"]) {
                [qty1 addTarget:self action:@selector(populateQtyView:) forControlEvents:UIControlEventTouchUpInside];
                qty1.userInteractionEnabled = YES;
                
            }
            qty1.tag = indexPath.row;
            
            cellItemDiscLbl = [[UILabel alloc] init];
            cellItemDiscLbl.font = [UIFont systemFontOfSize:13.0];
            cellItemDiscLbl.layer.borderWidth = 1.0;
            cellItemDiscLbl.backgroundColor = [UIColor blackColor];
            cellItemDiscLbl.textColor = [UIColor whiteColor];
            cellItemDiscLbl.textAlignment = NSTextAlignmentCenter;
            cellItemDiscLbl.numberOfLines = 2;
            cellItemDiscLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            cellItemDiscLbl.textAlignment = NSTextAlignmentCenter;
            if ([temp3 valueForKey:ITEM_DISCOUNT] == nil || [[temp3 valueForKey:ITEM_DISCOUNT] isKindOfClass:[NSNull class]]) {
                cellItemDiscLbl.text = @"0.00";
            }
            else {
                
                
                
                cellItemDiscLbl.text = [NSString stringWithFormat:@"%.2f",[[temp3 valueForKey:ITEM_DISCOUNT] floatValue]];
                
                //added by Srinivasulu on 22/11/2017....
                //reason manual discount has to be removed....
                
                @try{
                    
                    float itemTotalPriceWithDisc = ([[temp3 valueForKey:ITEMUNITPRICE] floatValue] *  [[temp3 valueForKey:QUANTITY] floatValue]) - [[self checkGivenValueIsNullOrNil:[temp3 valueForKey:DISCOUNT_PRICE] defaultReturn:@"0.00"] floatValue];
                    
                    //                float fraction = ([otherDiscVal.text floatValue] / ([totalBillValue.text floatValue] + [otherDiscVal.text floatValue] )) * 100;
                    
                    NSString * discountFractionStr = [[NSString stringWithFormat:@"%f",((otherDiscVal.text).floatValue / ((totalBillValue.text).floatValue + (otherDiscVal.text).floatValue))] copy];
                    
                    float fraction = discountFractionStr.floatValue;
                    
                    //                    fraction = roundf((fraction + 1) * 100)/100;
                    //                    fraction = fraction - 1;
                    
                    fraction = fraction * 100;
                    
                    float priceBeforeOtherDisc = ([[temp3 valueForKey:BILLED_ITEM_UNIT_PRICE] floatValue] *  [[temp3 valueForKey:QUANTITY] floatValue]) * ( 100 / (100 - fraction));
                    
                    
                    
                    
                    if((itemTotalPriceWithDisc - priceBeforeOtherDisc) >= 0){
                        
                        cellItemDiscLbl.text = [NSString stringWithFormat:@"%.2f",(itemTotalPriceWithDisc - priceBeforeOtherDisc)];
                    }
                    else{
                        
                        cellItemDiscLbl.text = @"0.00";
                    }
                    
                    //upto here on 22/11/2017....
                    
                }
                @catch(NSException * exception){
                    
                    
                }
                
            }
            
            label5 = [[UILabel alloc] init];
            label5.font = [UIFont systemFontOfSize:13.0];
            label5.layer.borderWidth = 1.0;
            label5.backgroundColor = [UIColor blackColor];
            label5.textColor = [UIColor whiteColor];
            label5.textAlignment = NSTextAlignmentCenter;
            label5.numberOfLines = 2;
            label5.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            label5.textAlignment = NSTextAlignmentCenter;
            label5.text = [NSString stringWithFormat:@"%.2f",([[temp3 valueForKey:ITEM_TOTAL_PRICE] floatValue] - (cellItemDiscLbl.text).floatValue)];
            //            NSString *str1 = [NSString stringWithFormat:@"%d",[[tempArrayItems objectAtIndex:(indexPath.row*5)+4] intValue]*[[tempArrayItems objectAtIndex:(indexPath.row*5)+3] intValue]];
            //            label5.text = str1;
            if (![[temp3 valueForKey:EDITED_PRICE] isKindOfClass:[NSNull class]]) {
                if ([[temp3 valueForKey:EDITED_PRICE] floatValue] > 0.0) {
                    [priceButton setTitle:[NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:EDITED_PRICE]floatValue])] forState:UIControlStateNormal] ;
                    label5.text = [NSString stringWithFormat:@"%.2f",([[temp3 valueForKey:EDITED_PRICE] floatValue] * [[temp3 valueForKey:QUANTITY] floatValue]) - (cellItemDiscLbl.text).floatValue];
                }
            }
            
            UIButton *delrowbtn = [[UIButton alloc] init];
            [delrowbtn setImage:[UIImage imageNamed:@"delete.png"] forState:UIControlStateNormal];
            [delrowbtn addTarget:self action:@selector(delRow:) forControlEvents:UIControlEventTouchUpInside];
            delrowbtn.tag = indexPath.row;
            delrowbtn.backgroundColor = [UIColor clearColor];
            
            UIButton *userSpecificBtn = [[UIButton alloc] init];
            [userSpecificBtn setImage:[UIImage imageNamed:@"sales_person.png"] forState:UIControlStateNormal];
            [userSpecificBtn addTarget:self action:@selector(populateCustomerSpecific:) forControlEvents:UIControlEventTouchUpInside];
            userSpecificBtn.tag = indexPath.row;
            userSpecificBtn.backgroundColor = [UIColor clearColor];
            
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                    
                    
                    //                    changes made by bhargav ram on 16/11/2016
                    
                    label1.font = [UIFont systemFontOfSize:18];
                    label1.frame = CGRectMake(0, 0, label_1.frame.size.width+2, 40);
                    label2.font = [UIFont systemFontOfSize:18];
                    label2.frame = CGRectMake(label1.frame.origin.x+label1.frame.size.width, 0, label_2.frame.size.width+2, 40);
                    
                    //changed by Srinivasulu on 16/10/2017....
                    //reason is label_3 width will be changed when clicked on return or exchange view....
                    
                    priceButton.titleLabel.font = [UIFont systemFontOfSize:18];
                    //                    priceButton.frame = CGRectMake( label2.frame.origin.x + label2.frame.size.width, 0, label_3.frame.size.width, 40);
                    priceButton.frame = CGRectMake( label2.frame.origin.x + label2.frame.size.width, 0, 90, 40);
                    
                    qty1.titleLabel.font = [UIFont systemFontOfSize:18];
                    //                    qty1.frame = CGRectMake(priceButton.frame.origin.x+priceButton.frame.size.width, 0, label_4.frame.size.width+2, 40);
                    qty1.frame = CGRectMake(priceButton.frame.origin.x+priceButton.frame.size.width, 0, 82, 40);
                    
                    cellItemDiscLbl.font = [UIFont systemFontOfSize:18];
                    //                    cellItemDiscLbl.frame = CGRectMake(qty1.frame.origin.x+qty1.frame.size.width, 0, itemDiscLbl.frame.size.width, 40);
                    cellItemDiscLbl.frame = CGRectMake(qty1.frame.origin.x+qty1.frame.size.width, 0, 92, 40);
                    
                    label5.font = [UIFont systemFontOfSize:18];
                    //                    label5.frame = CGRectMake(cellItemDiscLbl.frame.origin.x+cellItemDiscLbl.frame.size.width, 0, label_5.frame.size.width, 40);
                    label5.frame = CGRectMake(cellItemDiscLbl.frame.origin.x+cellItemDiscLbl.frame.size.width, 0, 90, 40);
                    
                    userSpecificBtn.frame =  CGRectMake(label5.frame.origin.x+label5.frame.size.width,label5.frame.origin.y+4,35,35 );
                    //upto here on 16/10/2017....
                    
                    
                    
                    
                    //                    delrowbtn.frame = CGRectMake(cellItemDiscLbl.frame.origin.x+cellItemDiscLbl.frame.size.width, 0, 35, 35);
                    
                }
                else {
                    
                    label1.font = [UIFont systemFontOfSize:20.0];
                    label1.frame = CGRectMake(10, 0, 144, 56);
                    label2.font = [UIFont systemFontOfSize:20.0];
                    label2.frame = CGRectMake(152, 0, 144, 56);
                    priceButton.titleLabel.font = [UIFont systemFontOfSize:20.0];
                    priceButton.frame = CGRectMake(290, 0, 144, 56);
                    qty1.titleLabel.font = [UIFont systemFontOfSize:20.0];
                    qty1.frame = CGRectMake(434, 0, 144, 56);
                    label5.font = [UIFont systemFontOfSize:20.0];
                    label5.frame = CGRectMake(575, 0, 144, 56);
                }
                
            }
            else {
                
                label1.frame = CGRectMake(0, 0, 63, 34);
                label2.frame = CGRectMake(62, 0, 62, 34);
                priceButton.frame = CGRectMake(123, 0, 57, 34);
                label4.frame = CGRectMake(179, 0, 58, 34);
                label5.frame = CGRectMake(236, 0, 57, 34);
            }
            
            cell.backgroundColor = [UIColor clearColor];
            [cell.contentView addSubview:label1];
            [cell.contentView addSubview:label2];
            [cell.contentView addSubview:priceButton];
            [cell.contentView addSubview:qty1];
            [cell.contentView addSubview:label5];
            [cell.contentView addSubview:cellItemDiscLbl];
            
            //commented by Srinivasulu on 26/10/2017....
            //reason -- this value has to use for the salePerson mandatory field....
            //            if (isEmployeeSaleId) {
            [cell.contentView addSubview: userSpecificBtn];
            //            }
            
            
            if ([isVoidedArray[indexPath.row] boolValue]) {
                [delrowbtn setImage:[UIImage imageNamed:@"enable.png"] forState:UIControlStateNormal];
                label1.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                label2.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                label3.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                [qty1 setTitleColor:[[UIColor whiteColor] colorWithAlphaComponent:0.4f] forState:UIControlStateNormal];
                label5.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                [qty1 setUserInteractionEnabled:NO];
                [priceButton setUserInteractionEnabled:NO];
                [priceButton setTitleColor:[[UIColor whiteColor] colorWithAlphaComponent:0.4f] forState:UIControlStateNormal];
            }
            if ([isVegetable containsObject:[temp3 valueForKey:SKU_ID]]) {
                [qty1 setUserInteractionEnabled:NO];
                [priceButton setUserInteractionEnabled:NO];
            }
            if (![WebServiceUtility checkEditPriceEnabled]) {
                [priceButton setUserInteractionEnabled:NO];
            }
            
            if ([billingType isEqualToString:@"pending"]) {
                
                [cell.contentView addSubview:delrowbtn];
                priceButton.userInteractionEnabled = TRUE;
                
            }
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception.name);
            
        }
        
        
        cell.tag = indexPath.row;
        return cell;
        
    }
    return cell;
    
    
}

// select the row handler....
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    //    [super viewDidUnload];
    
    // cell background color...
    // UITableViewCell* theCell = [tableView cellForRowAtIndexPath:indexPath];
    // theCell.contentView.backgroundColor=[UIColor colorWithRed:255.0/255.0 green:232.0/255.0 blue:124.0/255.0 alpha:1.0];
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    if (tableView == salesIdTable){
        
        @try {
            
            pastBillField.text = filteredSkuArrayList[indexPath.row];
            salesIdTable.hidden = YES;
            [self barCodeImageClicked:self];
            tempExchangeItems = nil;
            tempReturnItems = nil;
            selectedItems = nil;
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
        }
        @finally {
            
            
        }
        
    }
    else if (tableView == skListTable){
        
        BillField.text = @"";
        [BillField resignFirstResponder];
        skListTable.hidden = YES;
        NSDictionary *json = skuArrayList[indexPath.row];
        selected_SKID = [[NSString stringWithFormat:@"%@",json[@"skuID"]] copy];
        
        [HUD setHidden:NO];
        
        if (!isOfflineService) {
            skListTable.frame = CGRectMake(skListTable.frame.origin.x, skListTable.frame.origin.y, skListTable.frame.size.width, 0);
            
            NSError * err_;
            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err_];
            NSString * requestHeaderString_ = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
            
            NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns"];
            NSArray *objects = @[selected_SKID,requestHeaderString_,presentLocation,[NSNumber numberWithBool:FALSE]];
            
            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            
            NSError * err;
            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
            NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            
            WebServiceController *webServiceController = [WebServiceController new];
            webServiceController.getSkuDetailsDelegate = self;
            [webServiceController getSkuDetailsWithData:salesReportJsonString];
            
            @try {
                
            }
            @catch (NSException *exception) {
                
                [HUD setHidden:YES];
                
            }
            
        }
        else {
            
            @try {
                
                offline = [[OfflineBillingServices alloc]init];
                priceDic = [[NSMutableArray alloc]init];
                NSDictionary *itemDic = [offline getProductDetails:[NSString stringWithFormat:@"%@",[json valueForKey:@"skuID"]] isEanSearch:NO];
                if (itemDic.count>0) {
                    
                    NSMutableArray *taxRate = [offline getTaxForSku:[NSString stringWithFormat:@"%@",[itemDic valueForKey:@"taxCode"]]];
                    
                    NSString *itemString = @"";
                    
                    priceDic = [offline getLocalPriceLists:[NSString stringWithFormat:@"%@",[json valueForKey:@"skuID"]]];
                    itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@",itemDic[@"description"],@"#",itemDic[@"description"],@"#",itemDic[@"quantity"],@"#",itemDic[@"price"], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
                    if (taxRate.count>0) {
                        
                        [taxArr addObject:taxRate];
                        itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[taxRate[0] valueForKey:@"taxRate"]];
                    }
                    else {
                        
                        [taxArr addObject:taxRate];
                        itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
                    }
                    
                    
                    if (priceDic.count >1) {
                        
                        [HUD setHidden:YES];
                        for (int i=0; i<priceDic.count; i++) {
                            NSString *tax_code = [itemString componentsSeparatedByString:@"#"][4];
                            NSString *desc = [itemString componentsSeparatedByString:@"#"][1];
                            NSMutableDictionary *dic = [priceDic[i] mutableCopy];
                            [dic setValue:tax_code forKey:@"taxCode"];
                            [dic setValue:taxRate forKey:@"tax"];
                            [dic setValue:desc forKey:@"description"];
                            priceDic[i] = dic;
                        }
                        transparentView.hidden = NO;
                        [priceTable reloadData];
                        SystemSoundID    soundFileObject1;
                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"popup_tune" withExtension: @"mp3"];
                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                        
                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                        AudioServicesPlaySystemSound (soundFileObject1);
                        
                        
                    }
                    else {
                        if(priceDic.count == 1) {
                            NSMutableDictionary *dic = [priceDic[0] mutableCopy];
                            itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@",itemDic[@"description"],@"#",itemDic[@"description"],@"#",itemDic[@"quantity"],@"#",dic[@"price"], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
                            if (taxRate.count>0) {
                                
                                //                                [taxArr addObject:taxRate];
                                itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[taxRate[0] valueForKey:@"taxRate"]];
                            }
                            else {
                                
                                //                                [taxArr addObject:taxRate];
                                itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
                            }
                            itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[dic valueForKey:PLU_CODE]];
                            itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[dic valueForKey:MRP]];
                        }
                        
                        //                        if ([[[itemString componentsSeparatedByString:@"#"] objectAtIndex:2] intValue]!=0) {
                        if (priceDic.count > 0) {
                            selected_desc = [itemString componentsSeparatedByString:@"#"][1];
                            selected_price = [[itemString componentsSeparatedByString:@"#"][3] copy];
                            [self getSkuDetailsHandler:itemString];
                            
                        }
                        else {
                            [HUD setHidden:YES];
                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            [alert show];
                            
                        }
                        //                        }
                        //                        else {
                        //
                        //                            [HUD setHidden:YES];
                        //                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        //                            [alert show];
                        //                        }
                    }
                }
                else {
                    
                    [HUD setHidden:YES];
                    UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
                
            }
            @catch (NSException *exception) {
                NSLog(@"%@",exception);
                [HUD setHidden:YES];
                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            
            
        }
        
        
    }
    else if (tableView == priceTable) {
        
        NSDictionary *JSON = priceDic[indexPath.row];
        
        if (!isOfflineService) {
            if ([JSON[@"quantity"] floatValue] > 0) {
                @try {
                    NSArray *tempTaxArr = [JSON valueForKey:@"tax"];
                    NSString *itemString = @"";
                    if (tempTaxArr.count > 0) {
                        itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",JSON[@"description"],@"#",JSON[@"description"],@"#",JSON[@"quantity"],@"#",JSON[@"price"], @"#", [NSString stringWithFormat:@"%@",[JSON[@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[JSON[@"tax"][0] valueForKey:@"taxRate"] doubleValue]],@"#",[JSON valueForKey:PLU_CODE],@"#",[JSON valueForKey:@"salePrice"]];
                        
                    }
                    else {
                        itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",JSON[@"description"],@"#",JSON[@"description"],@"#",JSON[@"quantity"],@"#",JSON[@"price"], @"#", [NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00],@"#",[JSON valueForKey:PLU_CODE],@"#",[JSON valueForKey:@"salePrice"]];
                        
                    }
                    selected_SKID = [[NSString stringWithFormat:@"%@",JSON[@"skuId"]] copy];
                    selected_desc = [[NSString stringWithFormat:@"%@",JSON[@"description"]] copy];
                    selected_price = [[NSString stringWithFormat:@"%@",JSON[@"price"]] copy];
                    
                    if (!isOfflineService) {
                        
                        [taxArr addObject:[JSON valueForKey:@"tax"]];
                        
                        
                    }
                    [self getSkuDetailsHandler:itemString];
                    transparentView.hidden = YES;
                    [HUD setHidden:YES];
                }
                @catch (NSException *exception) {
                    
                    NSLog(@"%@",exception);
                    
                }
            }
            else {
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Stock not available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            
        }
        else {
            @try {
                NSArray *tempTaxArr = [JSON valueForKey:@"tax"];
                NSString *itemString = @"";
                if (tempTaxArr.count > 0) {
                    itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",JSON[@"description"],@"#",JSON[@"description"],@"#",JSON[@"quantity"],@"#",JSON[@"price"], @"#", [NSString stringWithFormat:@"%@",[JSON[@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[JSON[@"tax"][0] valueForKey:@"taxRate"] doubleValue]],@"#",[JSON valueForKey:PLU_CODE],@"#",[JSON valueForKey:MRP]];
                    
                }
                else {
                    itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",JSON[@"description"],@"#",JSON[@"description"],@"#",JSON[@"quantity"],@"#",JSON[@"price"], @"#", [NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00],@"#",[JSON valueForKey:PLU_CODE],@"#",[JSON valueForKey:MRP]];
                    
                }
                selected_SKID = [[NSString stringWithFormat:@"%@",JSON[@"skuId"]] copy];
                selected_desc = [[NSString stringWithFormat:@"%@",JSON[@"description"]] copy];
                selected_price = [[NSString stringWithFormat:@"%@",JSON[@"price"]] copy];
                
                if (!isOfflineService) {
                    
                    [taxArr addObject:[JSON valueForKey:@"tax"]];
                    
                }
                [self getSkuDetailsHandler:itemString];
                transparentView.hidden = YES;
                [HUD setHidden:YES];
            }
            @catch (NSException *exception) {
                
                NSLog(@"%@",exception);
                
            }
        }
        
    }
    
    else if (tableView == giftTypeTableView) {
        
        if([giftTypeArrayList[indexPath.row] isEqualToString:@"Loyalty Card"]){
            giftTypeString = @"loyaltycard";
            giftScannerBtn.tag = 2;
        }
        else if([giftTypeArrayList[indexPath.row] isEqualToString:@"Coupon"]){
            giftTypeString = @"coupon";
            giftScannerBtn.tag = 1;
            
        }
        else{
            giftTypeString = @"giftvoucher";
            giftScannerBtn.tag = 3;
            
        }
        giftType.text = giftTypeArrayList[indexPath.row];
        giftType.backgroundColor = [UIColor whiteColor];
        giftView.tag = indexPath.row;
        [giftTypeTableView setHidden:YES];
        [editPricePopOver dismissPopoverAnimated:YES];
        giftTypeBtn.tag = 0;
        [self showgiftView];
    }
    else if (tableView == couponType) {
        
        selectCouponType.text = cupon_type[indexPath.row];
        giftView.tag = indexPath.row;
        if ([cupon_type[indexPath.row] isEqualToString:@"Sodexo Coupons"]) {
            
            foodCouponTypeStr = @"Sodexo";
        }
        else {
            foodCouponTypeStr = @"Ticket";
        }
        [couponType setHidden:YES];
        
    }
    
    else if (tableView == valueTable) {
        
        couponValue.text = value_arr[indexPath.row];
        couponView.tag = indexPath.row;
        
        [valueTable setHidden:YES];
        valueBtn.tag = 0;
        couponQty.text = @"1";
        
    }
    
    //added by Srinvasulu on 15/06/2017....
    
    else if (tableView == reasonTbl){
        @try {
            [catPopOver dismissPopoverAnimated:YES];
            
            
            returnReasonTxt.text = returnReasonsArr[indexPath.row];
            
            
        } @catch (NSException *exception) {
            
        }
        
    }
    else if(tableView == denominstaionsTypeTbl){
        
        @try {
            
            [catPopOver dismissPopoverAnimated:YES];
            
            denominationTypeTxt.text = [self checkGivenValueIsNullOrNil:[denominationsTypeArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            currencyCodeStr = denominationTypeTxt.text;
            
            if(denominstaionsTypeTbl.tag == 2){
                if(billPaymentTendeInfoDic.allKeys.count)
                    [billPaymentTendeInfoDic removeAllObjects];
                
                billPaymentTendeInfoDic = [denominationsTypeArr[indexPath.row] mutableCopy];
            }
            
            if(denominstaionsTypeTbl.tag == 2){
                
                if ([denominationView isDescendantOfView:self.view])
                    [denominationView removeFromSuperview];
                
                [self populateDenominations];
            }
            else{
                
                if ([returnDenominationView isDescendantOfView:self.view])
                    [returnDenominationView removeFromSuperview];
                
                [self populateReturnDenominationViewDynamically];
            }
            
        }
        @catch(NSException * exception){
            
        }
    }
    
    else if(tableView == cardTypesTbl){
        
        @try {
            
            [catPopOver dismissPopoverAnimated:YES];
            
            cradTypeTxt.text = [self checkGivenValueIsNullOrNil:[cardTypesArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            //added by srinivasulu on 24/11/2017....
            
            if(billPaymentTendeInfoDic.allKeys.count)
                [billPaymentTendeInfoDic removeAllObjects];
            
            billPaymentTendeInfoDic = [cardTypesArr[indexPath.row] mutableCopy];
            
            //upto here on 24/11/2017....
        }
        @catch(NSException * exception){
            
        }
    }
    else if(tableView == otherPaymentsOptionsTbl){
        
        @try {
            
            [catPopOver dismissPopoverAnimated:YES];
            
            otherPaymentTypeTxt.text = [self checkGivenValueIsNullOrNil:[otherPaymentsOptionsArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            //added by srinivasulu on 24/11/2017....
            
            if(billPaymentTendeInfoDic.allKeys.count)
                [billPaymentTendeInfoDic removeAllObjects];
            
            billPaymentTendeInfoDic = [otherPaymentsOptionsArr[indexPath.row] mutableCopy];
            
            //upto here on 24/11/2017....
            
        }
        @catch(NSException * exception){
            
        }
    }
    //upto here on 15/06/2017....
    
    
    
    
}

-(void)populatePriceEditView:(UIButton*)sender {
    
    PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
    
    UIView *editPriceView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 375, 300)];
    editPriceView.opaque = NO;
    editPriceView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
    editPriceView.layer.borderColor = [UIColor lightGrayColor].CGColor;
    editPriceView.layer.borderWidth = 2.0f;
    [editPriceView setHidden:NO];
    NSUInteger positionCount = [tempArrayItems indexOfObject:cartTotalItems[sender.tag]];
    
    NSDictionary *itemDetailsDic = tempArrayItems[positionCount];
    @try {
        UIImageView *img  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
        
        UILabel *editPriceLbl = [[UILabel alloc] init];
        editPriceLbl.textColor = [UIColor blackColor];
        editPriceLbl.font = [UIFont boldSystemFontOfSize:18.0];
        editPriceLbl.text  = @"EDIT PRICE";
        editPriceLbl.textAlignment = NSTextAlignmentCenter;
        
        UILabel *itemNameLbl = [[UILabel alloc] init];
        itemNameLbl.textColor = [UIColor blackColor];
        itemNameLbl.font = [UIFont boldSystemFontOfSize:22.0];
        itemNameLbl.textAlignment = NSTextAlignmentCenter;
        itemNameLbl.text  = [NSString stringWithFormat:@"%@",[itemDetailsDic valueForKey:ITEM_NAME]];
        
        
        
        UILabel *actualPriceLbl = [[UILabel alloc] init];
        actualPriceLbl.textColor = [UIColor blackColor];
        actualPriceLbl.font = [UIFont boldSystemFontOfSize:20.0];
        actualPriceLbl.text  = @"Actual Price";
        
        UILabel *actualPriceVal = [[UILabel alloc] init];
        actualPriceVal.textColor = [UIColor blackColor];
        actualPriceVal.font = [UIFont boldSystemFontOfSize:20.0];
        actualPriceVal.text  = [NSString stringWithFormat:@"%.2f",[[itemDetailsDic valueForKey:ITEMUNITPRICE] floatValue]];
        
        UILabel *newPriceLbl = [[UILabel alloc] init];
        newPriceLbl.textColor = [UIColor blackColor];
        newPriceLbl.font = [UIFont boldSystemFontOfSize:18.0];
        newPriceLbl.text  = @"New Price";
        
        newPriceField = [[UITextField alloc] init];
        newPriceField.borderStyle = UITextBorderStyleRoundedRect;
        newPriceField.textColor = [UIColor blackColor];
        newPriceField.placeholder = @"Enter Price";
        //NumberKeyBoard hidden....
        UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
        numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
        numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                                 [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
        [numberToolbar1 sizeToFit];
        newPriceField.keyboardType = UIKeyboardTypeNumberPad;
        newPriceField.text = sender.titleLabel.text;
        newPriceField.font = [UIFont systemFontOfSize:17.0];
        newPriceField.backgroundColor = [UIColor whiteColor];
        newPriceField.autocorrectionType = UITextAutocorrectionTypeNo;
        //qtyFeild.keyboardType = UIKeyboardTypeDefault;
        newPriceField.clearButtonMode = UITextFieldViewModeWhileEditing;
        newPriceField.returnKeyType = UIReturnKeyDone;
        newPriceField.delegate = self;
        [newPriceField selectAll:nil];
        [newPriceField becomeFirstResponder];
        
        /** ok Button for edit price view....*/
        okEditPriceButton = [UIButton buttonWithType:UIButtonTypeCustom];
        //[okButton setImage:[UIImage imageNamed:@"OK.png"] forState:UIControlStateNormal];
        [okEditPriceButton addTarget:self
                              action:@selector(okEditPricePressed:) forControlEvents:UIControlEventTouchDown];
        [okEditPriceButton setTitle:@"OK" forState:UIControlStateNormal];
        okEditPriceButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
        okEditPriceButton.backgroundColor = [UIColor grayColor];
        okEditPriceButton.tag = sender.tag;
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                img.frame = CGRectMake(0, 0, 375, 50);
                editPriceLbl.frame =  CGRectMake(0, 10, 375, 30);
                editPriceLbl.font = [UIFont boldSystemFontOfSize:25.0];
                itemNameLbl.frame =  CGRectMake(0, 60, 375, 30);
                
                actualPriceLbl.frame =  CGRectMake(10, 110, 150, 30);
                actualPriceVal.frame =  CGRectMake(180.0, 110, 200, 30);
                newPriceLbl.frame =  CGRectMake(10, 160.0, 150, 30);
                newPriceField.frame = CGRectMake(180.0, 150.0, 150, 50);
                newPriceField.font = [UIFont systemFontOfSize:20.0];
                
                
                okEditPriceButton.frame = CGRectMake(100, 235, 165, 45);
                okEditPriceButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                okEditPriceButton.layer.cornerRadius = 20.0f;
                
            }
        }
        [editPriceView addSubview:img];
        [editPriceView addSubview:editPriceLbl];
        [editPriceView addSubview:itemNameLbl];
        [editPriceView addSubview:actualPriceLbl];
        [editPriceView addSubview:actualPriceVal];
        [editPriceView addSubview:newPriceLbl];
        [editPriceView addSubview:newPriceField];
        [editPriceView addSubview:okEditPriceButton];
        
        customerInfoPopUp.view = editPriceView;
        
        NSIndexPath *selectedRow = [NSIndexPath indexPathForRow:sender.tag inSection:0];
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            customerInfoPopUp.preferredContentSize =  CGSizeMake(editPriceView.frame.size.width, editPriceView.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            
            [popover presentPopoverFromRect:priceButton.frame inView:[selectedSaleIdTable cellForRowAtIndexPath:selectedRow] permittedArrowDirections:UIPopoverArrowDirectionRight animated:YES];
            
            editPricePopOver= popover;
            
        }
        
        else {
            
            customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            // popover.contentViewController.view.alpha = 0.0;
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            editPricePopOver = popover;
            
        }
        
    }
    @catch (NSException *exception) {
        [editPricePopOver dismissPopoverAnimated:YES];
        NSLog(@"%@",exception.name);
    }
    @finally {
    }
}


//get sku details.......


- (void) getSkuDetailsHandler: (NSString *) value {
    
    if([value isKindOfClass:[NSError class]]) {
        //NSLog(@"%@", value);
        return;
    }
    
    // Do something with the NSString* result
    NSString* result = (NSString*)value;
    
    float totalAmt = 0.00;
    
    BOOL shouldCallOffers = YES;
    BOOL voidedItemStatus = NO;
    if (result.length > 0) {
        
        int qty = 0;
        
        @try {
            
            BOOL state = FALSE;
            for (int i = 0; i < cartTotalItems.count; i++) {
                NSDictionary *itemDic = cartTotalItems[i];
                NSString *desc = itemDic[ITEM_NAME];
                NSString *price = [NSString stringWithFormat:@"%.2f",([itemDic[ITEMUNITPRICE] floatValue])];
                if ([desc isEqualToString:selected_desc] && [price isEqualToString:[NSString stringWithFormat:@"%.2f",selected_price.floatValue]]) {
                    
                    qty = [itemDic[QUANTITY] intValue];
                    
                    if (!isOfflineService) {
                        if(qty >= [result componentsSeparatedByString:@"#"][2].intValue){
                            
                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Message" message:@"Quantity Should be Less than or Equal to  Availble Quantity" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            [alert show];
                            
                        }
                        else {
                            
                            state = TRUE;
                            NSArray *arr = [result componentsSeparatedByString:@"#"];
                            BOOL exists = NO;
                            int positionOfResult;
                            for (int j = 0; j < tempArrayItems.count; j++) {
                                NSDictionary *array = tempArrayItems[j];
                                NSString *skuid = [NSString stringWithFormat:@"%@",[array valueForKey:SKU_ID]];
                                NSString *description = [array valueForKey:ITEM_NAME];
                                NSString *price_ = [NSString stringWithFormat:@"%.2f",([[array valueForKey:ITEMUNITPRICE] floatValue])];
                                if ([skuid isEqualToString:selected_SKID] && [description isEqualToString:desc] && [price_ isEqualToString:price]) {
                                    exists = YES;
                                    positionOfResult = j;
                                }
                            }
                            if (!exists) {
                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                                [alert show];
                                [HUD setHidden:YES];
                                return;
                            }
                            int quantity = ++qty;
                            NSString *price = [NSString stringWithFormat:@"%.2f",(quantity * [arr[3] floatValue])];
                            
                            result = [NSString stringWithFormat:@"%@%@%@%@%d%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",quantity,@"#",price,@"#",arr[4],@"#", arr[5], @"#", arr[2]];
                            NSMutableDictionary *itemDetailsDic = [NSMutableDictionary new];
                            [itemDetailsDic setValue:selected_SKID forKey:SKU_ID];
                            [itemDetailsDic setValue:arr[0] forKey:ITEM_NAME];
                            [itemDetailsDic setValue:[NSString stringWithFormat:@"%d",quantity] forKey:QUANTITY];
                            [itemDetailsDic setValue:price forKey:ITEM_TOTAL_PRICE];
                            [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",[arr[3] floatValue]] forKey:ITEMUNITPRICE];
                            [itemDetailsDic setValue:arr[4] forKey:TAX_CODE];
                            [itemDetailsDic setValue:arr[5] forKey:TAX_RATE];
                            [itemDetailsDic setValue:arr[2] forKey:AVAIL_QTY];
                            [itemDetailsDic setValue:arr[6] forKey:PLU_CODE];
                            [itemDetailsDic setValue:[itemDic valueForKey:EDITED_PRICE] forKey:EDITED_PRICE];
                            [itemDetailsDic setValue:arr[7] forKey:MRP_Price];
                            
                            if (exists) {
                                tempArrayItems[positionOfResult] = itemDetailsDic;
                                cartItemDetails[positionOfResult] = [NSString stringWithFormat:@"%d",qty];
                            }
                            else {
                                [tempArrayItems addObject:itemDetailsDic];
                                [cartItemDetails addObject:[NSString stringWithFormat:@"%d",qty]];
                            }
                            cartTotalItems[i] = itemDetailsDic;
                            isVoidedArray[i] = @NO;
                        }
                    }
                    else {
                        
                        state = TRUE;
                        NSArray *arr = [result componentsSeparatedByString:@"#"];
                        BOOL exists = NO;
                        int positionOfResult;
                        for (int j = 0; j < tempArrayItems.count; j++) {
                            NSDictionary *array = tempArrayItems[j];
                            NSString *skuid = [NSString stringWithFormat:@"%@",[array valueForKey:SKU_ID]];
                            NSString *description = [array valueForKey:ITEM_NAME];
                            NSString *price_ = [NSString stringWithFormat:@"%.2f",([[array valueForKey:ITEMUNITPRICE] floatValue])];
                            if ([skuid isEqualToString:selected_SKID] && [description isEqualToString:desc] && [price_ isEqualToString:price]) {
                                exists = YES;
                                positionOfResult = j;
                            }
                        }
                        if (!exists) {
                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            [alert show];
                            [HUD setHidden:YES];
                            return;
                        }
                        int quantity = ++qty;
                        NSString *price = [NSString stringWithFormat:@"%.2f",(quantity * [arr[3] floatValue])];
                        
                        result = [NSString stringWithFormat:@"%@%@%@%@%d%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",quantity,@"#",price,@"#",arr[4],@"#", arr[5], @"#", arr[2]];
                        NSMutableDictionary *itemDetailsDic = [NSMutableDictionary new];
                        [itemDetailsDic setValue:selected_SKID forKey:SKU_ID];
                        [itemDetailsDic setValue:arr[0] forKey:ITEM_NAME];
                        [itemDetailsDic setValue:[NSString stringWithFormat:@"%d",quantity] forKey:QUANTITY];
                        [itemDetailsDic setValue:price forKey:ITEM_TOTAL_PRICE];
                        [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",[arr[3] floatValue]] forKey:ITEMUNITPRICE];
                        [itemDetailsDic setValue:arr[4] forKey:TAX_CODE];
                        [itemDetailsDic setValue:arr[5] forKey:TAX_RATE];
                        [itemDetailsDic setValue:arr[2] forKey:AVAIL_QTY];
                        [itemDetailsDic setValue:arr[6] forKey:PLU_CODE];
                        [itemDetailsDic setValue:[itemDic valueForKey:EDITED_PRICE] forKey:EDITED_PRICE];
                        [itemDetailsDic setValue:arr[7] forKey:MRP_Price];
                        
                        if (exists) {
                            tempArrayItems[positionOfResult] = itemDetailsDic;
                            cartItemDetails[positionOfResult] = [NSString stringWithFormat:@"%d",qty];
                        }
                        else {
                            [tempArrayItems addObject:itemDetailsDic];
                            [cartItemDetails addObject:[NSString stringWithFormat:@"%d",qty]];
                        }
                        cartTotalItems[i] = itemDetailsDic;
                        isVoidedArray[i] = @NO;
                    }
                }
                
            }
            
            for (int j = 0; j < tempArrayItems.count; j ++) {
                DealsController *_dealsController = [[DealsController alloc] init];
                NSDictionary *dealSkuids_ = _dealsController.productData;
                NSDictionary *itemDic = tempArrayItems[j];
                for (int d=0 ; d<dealSkuids_.allKeys.count; d++) {
                    
                    if ([[itemDic valueForKey:SKU_ID] isEqualToString:dealSkuids_.allKeys[d]] && (qty == [[dealSkuids_ valueForKey:[itemDic valueForKey:SKU_ID]][1] intValue])) {
                        
                        shouldCallOffers = NO;
                        
                    }
                    
                }
                
                totalAmt = totalAmt + ([[itemDic valueForKey:ITEM_TOTAL_PRICE] floatValue]);
                
            }
            
            
            //  [selectedSaleIdTable reloadData];
            
            NSArray *arr = [result componentsSeparatedByString:@"#"];
            
            NSString *unitPrice;
            
            if (qty == 0) {
                
                @try {
                    
                    unitPrice = arr[4];
                    
                }
                @catch (NSException *exception) {
                    
                    NSLog(@"exception occured %@",exception.name);
                    
                }
                
                //NSArray *item = [result componentsSeparatedByString:@"#"];
                if (selected_SKID != nil) {
                    [cartItemDetails addObject:@"1"];
                }
                else {
                    [cartItemDetails addObject:arr[3]];
                }
                NSMutableDictionary *itemDetailsDic = [NSMutableDictionary new];
                if (selected_SKID != nil) {
                    result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",@"1",@"#",arr[3], @"#", arr[4], @"#", arr[5],@"#",arr[2]];
                    [itemDetailsDic setValue:selected_SKID forKey:SKU_ID];
                    [itemDetailsDic setValue:arr[0] forKey:ITEM_NAME];
                    [itemDetailsDic setValue:@"1" forKey:QUANTITY];
                    [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",[arr[3] floatValue]] forKey:ITEMUNITPRICE];
                    [itemDetailsDic setValue:arr[3] forKey:ITEM_TOTAL_PRICE];
                    [itemDetailsDic setValue:arr[4] forKey:TAX_CODE];
                    [itemDetailsDic setValue:arr[5] forKey:TAX_RATE];
                    [itemDetailsDic setValue:arr[2] forKey:AVAIL_QTY];
                    [itemDetailsDic setValue:arr[6] forKey:PLU_CODE];
                    [itemDetailsDic setValue:@"0.0" forKey:EDITED_PRICE];
                    [itemDetailsDic setValue:arr[7] forKey:MRP_Price];
                } else {
                    selected_SKID = [NSString stringWithFormat:@"%@",arr[0]];
                    selected_price = [NSString stringWithFormat:@"%.2f",([arr[4] floatValue] / [arr[3] intValue])];
                    [itemDetailsDic setValue:selected_SKID forKey:SKU_ID];
                    [itemDetailsDic setValue:arr[1] forKey:ITEM_NAME];
                    [itemDetailsDic setValue:arr[3] forKey:QUANTITY];
                    [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",([arr[4] floatValue] / [arr[3] intValue])] forKey:ITEMUNITPRICE];
                    [itemDetailsDic setValue:arr[4] forKey:ITEM_TOTAL_PRICE];
                    [itemDetailsDic setValue:arr[5] forKey:TAX_CODE];
                    [itemDetailsDic setValue:arr[6] forKey:TAX_RATE];
                    [itemDetailsDic setValue:arr[7] forKey:AVAIL_QTY];
                    [itemDetailsDic setValue:arr[8] forKey:PLU_CODE];
                    [itemDetailsDic setValue:arr[9] forKey:EDITED_PRICE];
                    [itemDetailsDic setValue:arr[10] forKey:MRP_Price];
                    voidedItemStatus = YES;
                }
                [tempArrayItems addObject:itemDetailsDic];
                
                NSMutableArray *skuArr = [NSMutableArray new];
                NSMutableArray *itemArr = [NSMutableArray new];
                
                for (NSDictionary *dic in cartTotalItems) {
                    [skuArr addObject:[dic valueForKey:SKU_ID]];
                    [itemArr addObject:[dic valueForKey:ITEMUNITPRICE]];
                }
                
                if (!([skuArr containsObject:selected_SKID] && [itemArr containsObject:selected_price])) {
                    [isVoidedArray addObject:@NO];
                    [cartTotalItems addObject:itemDetailsDic];
                    
                }
                
                
                DealsController *_dealsController = [[DealsController alloc] init];
                NSDictionary *dealSkuids_ = _dealsController.productData;
                
                for (int d=0 ; d<dealSkuids_.allKeys.count; d++) {
                    
                    if ([[result componentsSeparatedByString:@"#"][0] isEqualToString:dealSkuids_.allKeys[d]]) {
                        
                        shouldCallOffers = NO;
                        
                    }
                }
                if (shouldCallOffers) {
                    if (!isOfflineService) {
                        if (voidedItemStatus) {
                            [self callOffersForScanning:selected_SKID qty:arr[3] total:[NSString stringWithFormat:@"%.2f",totalAmt+unitPrice.floatValue] itemPrice:[NSString stringWithFormat:@"%.2f",unitPrice.floatValue]];
                        }
                        else {
                            [self callOffersForScanning:selected_SKID qty:@"1" total:[NSString stringWithFormat:@"%.2f",totalAmt+unitPrice.floatValue] itemPrice:unitPrice];
                        }
                    }
                    else {
                        // before reloading the data reset the subtotal textfield
                        subtotal_value.text = @"";
                        selectedSaleIdTable.hidden = NO;
                        
                        // continous camera to scan ..
                        
                        SystemSoundID    soundFileObject1;
                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                        
                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                        AudioServicesPlaySystemSound (soundFileObject1);
                        
                        offline = [[OfflineBillingServices alloc] init];
                        NSDictionary *json;
                        if (voidedItemStatus) {
                            json =[offline applyDealsAndOffers:selected_SKID qty:arr[3] total:[NSString stringWithFormat:@"%.2f",totalAmt+unitPrice.floatValue] itemPrice:[NSString stringWithFormat:@"%.2f",unitPrice.floatValue]];
                        }
                        else {
                            json =[offline applyDealsAndOffers:selected_SKID qty:@"1" total:[NSString stringWithFormat:@"%.2f",totalAmt+unitPrice.floatValue] itemPrice:unitPrice];
                        }
                        [self applyDealsOffline:json sku_id:selected_SKID];
                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                            selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height);
                        }
                        else {
                            selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height + 30);
                        }
                        [selectedSaleIdTable reloadData];
                        [self updateValues];
                        [self updateItemScanTime];
                        [self goToBottom];
                    }
                    
                }
                else {
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height);
                    }
                    else {
                        selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height + 30);
                    }
                    [selectedSaleIdTable reloadData];
                    [self updateValues];
                    [self updateItemScanTime];
                    // before reloading the data reset the subtotal textfield
                    subtotal_value.text = @"";
                    selectedSaleIdTable.hidden = NO;
                    
                    // continous camera to scan ..
                    
                    SystemSoundID    soundFileObject1;
                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                    
                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                    AudioServicesPlaySystemSound (soundFileObject1);
                    
                }
            }
            else {
                
                if (shouldCallOffers) {
                    
                    if (!isOfflineService) {
                        
                        [self callOffersForScanning:selected_SKID qty:[NSString stringWithFormat:@"%d",qty] total:[NSString stringWithFormat:@"%.2f",totalAmt] itemPrice:[NSString stringWithFormat:@"%.02f", [arr[3] floatValue] * qty]];
                    }
                    else {
                        
                        offline = [[OfflineBillingServices alloc]init];
                        NSDictionary *json =  [offline applyDealsAndOffers:selected_SKID qty:[NSString stringWithFormat:@"%d",qty] total:[NSString stringWithFormat:@"%.2f",totalAmt] itemPrice:[[NSString stringWithFormat:@"%.02f", [arr[4] floatValue] * qty] copy]];
                        [self applyDealsOffline:json sku_id:selected_SKID];
                        
                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                            selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height);
                        }
                        else {
                            selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height + 30);
                        }
                        [selectedSaleIdTable reloadData];
                        [self updateValues];
                        [self updateItemScanTime];
                        [self goToBottom];
                        // before reloading the data reset the subtotal textfield
                        subtotal_value.text = @"";
                        selectedSaleIdTable.hidden = NO;
                        
                        // continous camera to scan ..
                        
                        SystemSoundID    soundFileObject1;
                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                        
                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                        AudioServicesPlaySystemSound (soundFileObject1);
                        
                    }
                }
                else {
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height);
                    }
                    else {
                        selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height + 30);
                    }
                    [selectedSaleIdTable reloadData];
                    [self updateValues];
                    [self updateItemScanTime];
                    // before reloading the data reset the subtotal textfield
                    subtotal_value.text = @"";
                    selectedSaleIdTable.hidden = NO;
                    
                    // continous camera to scan ..
                    
                    SystemSoundID    soundFileObject1;
                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                    
                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                    AudioServicesPlaySystemSound (soundFileObject1);
                    
                }
            }
        }
        @catch (NSException *exception) {
            
            [HUD setHidden:YES];
            
            NSLog(@"%@",exception);
            
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Invalid" message:@"Failed to get the product" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
    }
    
    else {
        
        SystemSoundID    soundFileObject1;
        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
        
        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
        AudioServicesPlaySystemSound (soundFileObject1);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Invalid" message:@"No Product or Failed to scan" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    //    }
    
    
    [HUD setHidden:YES];
    
}

-(void) callOffersForScanning:(NSString *)skuid qty:(NSString *)quantity total:(NSString *)total itemPrice:(NSString *)item_price{
    
    // [HUD setHidden:NO];
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    BOOL dealStatus = TRUE;
    dealSkuId = [skuid copy];
    //    DealServicesSoapBinding *deals_svc = [DealServicesSvc DealServicesSoapBinding];
    //    DealServicesSvc_applyDealsAndOffers *applyDeals = [[DealServicesSvc_applyDealsAndOffers alloc]init];
    
    
    //added by Srinivasulu on 18/09/2017....
    //added new key----(i.e.,LATEST_CAMPAIGNS) -- reason not updated in iOS....
    
    
    NSArray *loyaltyKeys = @[@"storeLocation",@"requestHeader",@"quantity",@"totalBillAmount",@"sku_id",@"item_total_price",@"phonenumber",@"purchaseChannel",LATEST_CAMPAIGNS];
    
    NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],quantity,total,skuid,item_price,customerPhoneValue.text,@"POS",@(applyLatestCampaigns)];
    NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
    
    NSError * err_;
    NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
    NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
    
    //    applyDeals.dealDetails = loyaltyString;
    
    
    @try {
        
        WebServiceController *serviceController = [WebServiceController new];
        serviceController.getDealsAndOffersDelegate = self;
        [serviceController getDealsAndOffersWithData:loyaltyString];
        
    }
    @catch (NSException *exception) {
        
        [HUD setHidden:YES];
        
    }
    
}
-(void)applyDealsOffline:(NSDictionary *)result sku_id:(NSString *)sku_id {
    
    if (result != nil && result!=(NSDictionary *)[NSNull null]) {
        
        NSArray *dealDetails = [result valueForKey:@"dealsList"];
        NSArray *offerList = [result valueForKey:@"offersList"];
        
        if (dealDetails.count != 0) {
            
            for (int i=0 ; i < dealDetails.count; i++) {
                
                NSDictionary *tempDic = dealDetails[i];
                
                if (!([[tempDic valueForKey:@"dealCategory"] rangeOfString:@"turn"].location == NSNotFound)) {
                    
                    turnOverDealVal = [[NSMutableArray alloc]init];
                    
                    NSArray *arr = [tempDic valueForKey:@"rangeList"];
                    
                    NSDictionary *dealItem = arr[0];
                    [turnOverDealVal addObject:[tempDic valueForKey:@"dealSkus"] ];
                    [turnOverDealVal addObject:[dealItem valueForKey:@"dealQuantity"] ];
                    turnOverDealDes = [dealItem valueForKey:@"description"];
                }
                else {
                    NSArray *arr = [tempDic valueForKey:@"rangeList"];
                    // for (int i=0; i<[arr count]; i++) {
                    
                    NSDictionary *dealDic = arr[0];
                    
                    DealsController *_dealsController = [[DealsController alloc] init];
                    
                    dealItemsCount = [[NSMutableArray alloc] init];
                    dealSkuids = [[NSMutableArray alloc] init];
                    dealSkuCount = [[NSMutableArray alloc] init];
                    sellSkuIds = [[NSMutableArray alloc] init];
                    NSMutableDictionary *dealDesc = [[NSMutableDictionary alloc]init];
                    NSMutableArray *temp = [[NSMutableArray alloc]init];
                    
                    
                    
                    if (dealDataItems.count) {
                        for(int j=0;j<dealDataItems.count;j++) {
                            
                            _dealsController = dealDataItems[j];
                            NSMutableDictionary *dealDicController = _dealsController.productData;
                            
                            for (int i=0; i<dealDicController.allKeys.count; i++) {
                                
                                NSArray *itemArr = [dealDicController valueForKey:sku_id];
                                
                                if (itemArr.count!=0) {
                                    if ([itemArr containsObject:sku_id]) {
                                        [dealDataItems removeObjectAtIndex:j];
                                    }
                                }
                            }
                            
                            _dealsController = [[DealsController alloc] init];
                            
                            [temp addObject:[dealDic valueForKey:@"minimumPurchaseQuantity_float"]];
                            [temp addObject:[dealDic valueForKey:@"dealQuantity"]];
                            [temp addObject:[tempDic valueForKey:@"dealSkus"]];
                            [temp addObject:[dealDic valueForKey:@"description"]];
                            
                            dealItemsCount = [temp copy];
                            [dealDesc setValue:dealItemsCount forKey:sku_id];
                            [dealSkuids  addObject:[dealDetails valueForKey:@"dealSkus"]];
                            _dealsController.productData = dealDesc;
                            [dealDataItems addObject:_dealsController];
                        }
                        
                    }
                    else {
                        [temp addObject:[dealDic valueForKey:@"minimumPurchaseQuantity_float"]];
                        [temp addObject:[dealDic valueForKey:@"dealQuantity"]];
                        [temp addObject:[tempDic valueForKey:@"dealSkus"]];
                        [temp addObject:[dealDic valueForKey:@"description"]];
                        
                        dealItemsCount = [temp copy];
                        
                        [dealDesc setValue:dealItemsCount forKey:sku_id];
                        
                        
                        [dealSkuids  addObject:[dealDetails valueForKey:@"dealSkus"]];
                        
                        
                        
                        _dealsController.productData = dealDesc;
                        [dealDataItems addObject:_dealsController];
                        
                    }
                    //                    if (dealStatus) {
                    //
                    //                        [temp addObject:[dealDic valueForKey:@"minimumPurchaseQuantity_float"]];
                    //                        [temp addObject:[dealDic valueForKey:@"dealQuantity"]];
                    //                        [temp addObject:[tempDic valueForKey:@"dealSkus"]];
                    //                        [temp addObject:[dealDic valueForKey:@"description"]];
                    //
                    //                        dealItemsCount = [temp copy];
                    //
                    //                        [dealDesc setValue:dealItemsCount forKey:sku_id];
                    //
                    //
                    //                        [dealSkuids  addObject:[dealDetails valueForKey:@"dealSkus"]];
                    //
                    //
                    //
                    //                        _dealsController.productData = dealDesc;
                    //                        [dealDataItems addObject:_dealsController];
                    //                    }
                }
                //                    }
            }
        }
        if (offerList.count!=0) {
            
            for (int i=0; i<offerList.count; i++) {
                
                NSDictionary *tempDic = offerList[i];
                
                if (!([[tempDic valueForKey:@"offerCategory"] rangeOfString:@"turn"].location == NSNotFound)) {
                    
                    
                    NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
                    
                    NSDictionary *offerValue = arr[0];
                    turnOverDis = [[offerValue valueForKey:@"rewardValue"] copy] ;
                    
                    offerDescStr = [offerValue valueForKey:@"description"];
                }
                else {
                    
                    // turnOverDis = @"";
                    
                    NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
                    
                    NSDictionary *offerDetails = arr[0];
                    NSArray *temp = @[[offerDetails valueForKey:@"rewardValue"] ,[offerDetails valueForKey:@"description"]];
                    offerDic[[tempDic valueForKey:@"sellSkuids"]] = temp;
                    
                }
                
            }
        }
    }
    
}
-(void)updateValues {
    
    // [otherDiscountTxt setEnabled:TRUE];
    selectedSaleIdTable.userInteractionEnabled = YES;
    
    
    totalBillValue.text = @"0.00";
    taxlblValue.text = @"0.00";
    subTotalBillValue.text = @"0.00";
    
    discountValue.text = @"0.00";
    //        giftVoucherTxt.text = @"0.00";
    //    totalVal.text = @"0.00";
    NSString *deal_skuid;
    NSString *unit_price;
    NSString *qty;
    float totalPaidAmt = 0.0f;
    @try {
        
        if (tempArrayItems.count != 0 ) {
            float dealOfferAmount = 0.0f;
            
            for (int i=0; i<tempPaymentDetails.count; i++) {
                
                NSDictionary *temp3 = tempPaymentDetails[i];
                totalPaidAmt = totalPaidAmt+[[temp3 valueForKey:PAID_AMT] floatValue];
                
            }
            
            for (int j = 0; j < cartItemDetails.count; j++) {
                dealOfferAmount = 0.0f;
                NSDictionary *temp = tempArrayItems[j];
                deal_skuid = [temp valueForKey:SKU_ID];
                qty = [temp valueForKey:QUANTITY];
                unit_price = [NSString stringWithFormat:@"%.2f",[[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]/qty.intValue];
                if ([[temp valueForKey:EDITED_PRICE] floatValue] == 0) {
                    totalBillValue.text = [NSString stringWithFormat:@"%.2f",((totalBillValue.text).floatValue + ([[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]))];
                }
                else {
                    totalBillValue.text = [NSString stringWithFormat:@"%.2f",((totalBillValue.text).floatValue + ([[temp valueForKey:EDITED_PRICE] floatValue] * [cartItemDetails[j] intValue]))];
                }
                billDueValue.text = [NSString stringWithFormat:@"%.2f",(totalBillValue.text).floatValue- totalPaidAmt];
                if ((billDueValue.text).floatValue<0) {
                    
                    billDueValue.text = @"0.00";
                }
                if ((billDueValue.text).floatValue==0) {
                    [billDueValue.layer removeAllAnimations];
                    
                }
                else {
                    billDueValue.alpha = 0;
                    
                    [UIView animateWithDuration:0.2 delay:0.5 options:UIViewAnimationOptionRepeat | UIViewAnimationOptionAutoreverse animations:^{
                        billDueValue.alpha = 1;
                    } completion:nil];
                }
                
                if (dealDataItems.count!=0) {                   //applying deals....
                    
                    for (int i = 0; i < dealDataItems.count; i++) {
                        
                        DealsController *_dealsController = dealDataItems[i];
                        
                        NSMutableArray *skuids = [(_dealsController.productData).allKeys mutableCopy];
                        
                        for (int i=0; i < skuids.count; i++) {
                            
                            NSArray *arr = [_dealsController.productData valueForKey:skuids[i]];
                            
                            if ([arr[2] containsString:deal_skuid]) {
                                if ([skuids[i] isEqualToString:deal_skuid]) {
                                    
                                    if (qty.intValue >= ([arr[0] intValue]+[arr[1] intValue])) {
                                        
                                        
                                        if (qty.intValue%([arr[0] intValue]+[arr[1] intValue]) == 0) {
                                            
                                            if (qty.intValue == ([arr[0] intValue]+[arr[1] intValue])) {
                                                discountValue.text = [NSString stringWithFormat:@"%.2f",(discountValue.text).floatValue+[arr[1] integerValue] * unit_price.floatValue];
                                                dealOfferAmount = ([arr[1] integerValue] * unit_price.floatValue);
                                                dealTempVal1 = (discountValue.text).floatValue;
                                                
                                            }
                                            else {
                                                discountValue.text = [NSString stringWithFormat:@"%.2f",(discountValue.text).floatValue+([arr[1] integerValue]*(qty.intValue/([arr[0] intValue]+[arr[1] intValue]))) * unit_price.floatValue];
                                                dealOfferAmount = ([arr[1] integerValue]*(qty.intValue/([arr[0] intValue]+[arr[1] intValue]))) * unit_price.floatValue;
                                                dealTempVal1 = (discountValue.text).floatValue;
                                                
                                            }
                                            
                                        }
                                        else {
                                            
                                            discountValue.text = [NSString stringWithFormat:@"%.2f",(discountValue.text).floatValue+dealTempVal1];
                                        }
                                        
                                    }
                                    
                                }
                                else {
                                    discountValue.text = [NSString stringWithFormat:@"%.2f",(discountValue.text).floatValue+[arr[1] integerValue] * unit_price.floatValue];
                                    dealOfferAmount = ([arr[1] integerValue] * unit_price.floatValue);
                                }
                                
                            }
                            
                            
                        }
                        
                    }
                }
                
                if (offerDic.count>0) {                          //applying offers
                    
                    NSArray *skus = offerDic.allKeys;
                    
                    for (int i=0; i<skus.count; i++) {
                        
                        if ([skus[i] containsString:deal_skuid]) {
                            
                            NSLog(@"%@%@",[offerDic valueForKey:deal_skuid],discountValue.text);
                            
                            discountValue.text = [NSString stringWithFormat:@"%.2f",(discountValue.text).floatValue+[[offerDic valueForKey:skus[i]][0] floatValue]];
                            NSLog(@"%@",discountValue.text);
                            dealOfferAmount = [[offerDic valueForKey:skus[i]][0] floatValue];
                        }
                        
                    }
                    
                }
                
                if (turnOverDealVal.count!=0) {              //checking turn-over deal
                    
                    if ([turnOverDealVal[0] containsString:deal_skuid]) {
                        
                        discountValue.text = [NSString stringWithFormat:@"%.2f",(discountValue.text).floatValue+[turnOverDealVal[1] integerValue] * unit_price.floatValue];
                        
                        NSLog(@" deals val is %@",discountValue.text);
                        
                        
                    }
                    
                }
                
                unit_price = [NSString stringWithFormat:@"%.2f",(unit_price.floatValue * qty.intValue) - dealOfferAmount];
                
                
                float taxValue = 0.0f;
                NSArray *taxDicArr = taxArr[j];
                for (NSDictionary *taxDic in taxDicArr) {
                    if ([[[taxDic valueForKey:@"taxType"] lowercaseString] isEqualToString:@"percentage"]) {
                        taxValue += ((unit_price.floatValue -(unit_price.floatValue/(100+[[taxDic valueForKey:@"taxRate"] floatValue])*100)));
                    }
                    else{
                        taxValue += ([[taxDic valueForKey:@"taxRate"] floatValue]*qty.intValue);
                        
                    }
                    
                }
                if (taxValue<0) {
                    
                    taxlblValue.text = @"0.00";
                }
                else {
                    
                    taxlblValue.text = [NSString stringWithFormat:@"%.2f",(taxlblValue.text).floatValue+taxValue];
                }
            }
            if (turnOverDis.length!=0) {         //applying tirn-over discount if any ....
                discountValue.text = [NSString stringWithFormat:@"%.2f",(discountValue.text).floatValue+turnOverDis.floatValue];
                
            }
            
            
            
            NSString *dealValue = discountValue.text;
            if (dealValue.length > 0 && dealValue != NULL) {
                totalBillValue.text = [NSString stringWithFormat:@"%.02f",((totalBillValue.text).floatValue - dealValue.floatValue)];
                billDueValue.text = [NSString stringWithFormat:@"%.02f",((billDueValue.text).floatValue - dealValue.floatValue)];
            }
            
            
            //            if ([giftVoucherTxt.text floatValue]>0) {
            //
            //                if ([giftVoucherTxt.text floatValue]<[totalBillValue.text floatValue]) {
            //
            //                    totalBillValue.text = [NSString stringWithFormat:@"%.2f",[totalBillValue.text floatValue]-[giftVoucherTxt.text floatValue]];
            //                }
            //
            //            }
            //
            subTotalBillValue.text = [NSString stringWithFormat:@"%.02f",((totalBillValue.text).floatValue - (taxlblValue.text).floatValue)];
            
            if ((subTotalBillValue.text).floatValue<0) {
                
                subTotalBillValue.text = @"0.00";
            }
            
            
            
        }
        
        else{
            totalBillValue.text = @"0.0";
            taxlblValue.text = @"0.0";
            subTotalBillValue.text = @"0.0";
            billDueValue.text = @"0.0";
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    
}
- (void) delRow:(id) sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    //    BOOL status = false;
    //    float totalDiscount = 0.0f;
    @try {
        
        [HUD setHidden:NO];
        NSDictionary *itemDic= cartTotalItems[[sender tag]];
        NSString *skuid =  [itemDic valueForKey:SKU_ID];
        float price =  [[itemDic valueForKey:ITEMUNITPRICE] floatValue];
        // dealoroffersTxt.text = @"0.0";
        if (![isVoidedArray[[sender tag]] boolValue]) {
            NSInteger positionCount;
            int i = 0;
            for (NSDictionary *dictionary in tempArrayItems) {
                if ([[dictionary valueForKey:SKU_ID] isEqualToString:skuid] && [[dictionary valueForKey:ITEMUNITPRICE] floatValue] == price) {
                    positionCount = i;
                }
                i++;
            }
            
            //            NSInteger positionCount = [tempArrayItems indexOfObject:[cartTotalItems objectAtIndex:[sender tag]]];
            [tempArrayItems removeObjectAtIndex:positionCount];
            isVoidedArray[[sender tag]] = @YES;
            [cartItemDetails removeObjectAtIndex:positionCount];
            [deletedTaxDic setValue:taxArr[positionCount] forKey:skuid];
            [taxArr removeObjectAtIndex:positionCount];
            
            float totalAmount1 = 0.00;
            
            for (int i=0; i < tempArrayItems.count; i++) {
                NSDictionary *itemTempDic= tempArrayItems[i];
                
                if (![turnOverDealVal containsObject:[itemTempDic valueForKey:SKU_ID]]) {
                    totalAmount1 = totalAmount1 + ([[itemTempDic valueForKey:ITEM_TOTAL_PRICE] floatValue]);
                }
            }
            
            if (dealDataItems.count!=0) {                   //removing deals....
                
                for (int i = 0; i < dealDataItems.count; i++) {
                    
                    DealsController *_dealsController = dealDataItems[i];
                    NSDictionary *dealDicController = _dealsController.productData;
                    
                    for (int j=0; j<dealDicController.allKeys.count; j++) {
                        
                        NSArray *itemArr = [dealDicController valueForKey:skuid];
                        
                        if (itemArr.count!=0) {
                            if ([itemArr containsObject:skuid]) {
                                [dealDataItems removeObjectAtIndex:i];
                            }
                        }
                    }
                }
            }
            if (((NSArray *)[offerDic valueForKey:skuid]).count!=0) {
                
                [offerDic removeObjectForKey:skuid];
                
            }
            [turnOverDealVal removeAllObjects];
            turnOverDis = @"";
            [self callOffersForScanning:skuid qty:@"0" total:[NSString stringWithFormat:@"%.2f",totalAmount1] itemPrice:@"0"];
            totalBillValue.text = @"";
            selectedSaleIdTable.hidden = NO;
            [selectedSaleIdTable reloadData];
            //   otherDiscountTxt.text = @"0.00";
            [HUD setHidden:YES];
            [self updateValues];
            [self updateItemScanTime];
            
            if (tempArrayItems.count == 0) {
                
                [self updateValues];
                [self updateItemScanTime];
                [offerItems removeAllObjects];
            }
        }
        else {
            NSDictionary *itemDic = cartTotalItems[[sender tag]];
            NSString *itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",[itemDic valueForKey:@"sku_id"],@"#",itemDic[ITEM_NAME],@"#",itemDic[ITEM_NAME],@"#",itemDic[QUANTITY],@"#",itemDic[ITEM_TOTAL_PRICE], @"#", [NSString stringWithFormat:@"%d",[itemDic[TAX_CODE] intValue]], @"#", [NSString stringWithFormat:@"%@",itemDic[TAX_RATE]],@"#",[itemDic valueForKey:AVAIL_QTY], @"#", [itemDic valueForKey:PLU_CODE] ,@"#",[itemDic valueForKey:EDITED_PRICE],@"#",[itemDic valueForKey:MRP_Price]];
            selected_SKID = nil;
            selected_desc = nil;
            isVoidedArray[[sender tag]] = @NO;
            NSDictionary *prodArr = cartTotalItems[[sender tag]];
            
            //            NSMutableArray *temptaxArr = [taxArr mutableCopy];
            //            [taxArr removeAllObjects];
            //            int taxPosition = 0;
            //            for(int i = 0 ; i < ([temptaxArr count] + 1); i++){
            //                if (i == [sender tag]) {
            //                    [taxArr addObject:[deletedTaxDic valueForKey:[prodArr valueForKey:SKU_ID]]];
            //                }
            //                else{
            //                    [taxArr addObject:[temptaxArr objectAtIndex:taxPosition]];
            //                    taxPosition++;
            //                }
            //            }
            
            [taxArr addObject:[deletedTaxDic valueForKey:[prodArr valueForKey:SKU_ID]]];
            
            
            [self getSkuDetailsHandler:itemString];
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    
    
    
}


- (void)updateItemScanTime {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    NSString *currentDate = [WebServiceUtility getCurrentDate];
    int presentItemQty = 0;
    for (NSDictionary *itemDic in tempArrayItems) {
        presentItemQty = presentItemQty + [[itemDic valueForKey:QUANTITY] intValue];
    }
    
    if ((previousBillItemsCount + 1) == presentItemQty || previousBillItemsCount == presentItemQty) {
        [defaults setValue:currentDate forKey:SCAN_START_TIME];
        [defaults setValue:currentDate forKey:SCAN_END_TIME];
    }
    else {
        [defaults setValue:currentDate forKey:SCAN_END_TIME];
    }
    [defaults synchronize];
    
}

#pragma mark - Get SKU Details Service Reposnse Delegates

- (void)getSkuDetailsSuccessResponse:(NSDictionary *)successDictionary
{
    if (successDictionary.count!=0) {
        
        if ([[[successDictionary valueForKey:@"responseHeader"] valueForKey:@"responseCode"] intValue] == 0) {
            
            if (![[successDictionary valueForKey:@"skuLists"] isKindOfClass:[NSNull class]]) {
                
                if (((NSArray *)[successDictionary valueForKey:@"skuLists"]).count>0) {
                    
                    priceDic = [[NSMutableArray alloc]init];
                    
                    NSArray *price_arr = [successDictionary valueForKey:@"skuLists"];
                    for (int i=0; i<price_arr.count; i++) {
                        
                        NSDictionary *json = price_arr[i];
                        [priceDic addObject:json];
                    }
                    if (((NSArray *)[successDictionary valueForKey:@"skuLists"]).count>1) {
                        
                        
                        if (priceDic.count>0) {
                            [HUD setHidden:YES];
                            transparentView.hidden = NO;
                            [priceTable reloadData];
                            SystemSoundID    soundFileObject1;
                            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"popup_tune" withExtension: @"mp3"];
                            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                            
                            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                            AudioServicesPlaySystemSound (soundFileObject1);
                        }
                    }
                    else {
                        
                        //                        if ([[[priceDic objectAtIndex:0] objectForKey:@"quantity"] floatValue] > 0) {
                        NSArray *tempTaxArr = [priceDic[0] valueForKey:@"tax"];
                        NSString *itemString = @"";
                        if (tempTaxArr.count > 0) {
                            itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",priceDic[0][@"quantity"],@"#",priceDic[0][@"price"], @"#", [NSString stringWithFormat:@"%@",[priceDic[0][@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[priceDic[0][@"tax"][0] valueForKey:@"taxRate"] doubleValue]],@"#",[priceDic[0] valueForKey:PLU_CODE],@"#",[priceDic[0] valueForKey:@"salePrice"]];
                            
                        }
                        else {
                            itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",priceDic[0][@"quantity"],@"#",priceDic[0][@"price"], @"#", [NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00],@"#",[priceDic[0] valueForKey:PLU_CODE],@"#",[priceDic[0] valueForKey:@"salePrice"]];
                            
                        }
                        selected_desc = [[NSString stringWithFormat:@"%@",priceDic[0][@"description"]] copy];
                        selected_price = [[NSString stringWithFormat:@"%@",[priceDic[0][@"price"] stringValue]] copy];
                        selected_SKID = [NSString stringWithFormat:@"%@",priceDic[0][@"skuId"]];
                        [taxArr addObject:priceDic[0][@"tax"]];
                        [self getSkuDetailsHandler:itemString];
                        //                        }
                        //                        else{
                        //                            [HUD setHidden:YES];
                        //                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        //                            [alert show];
                        //                        }
                    }
                    
                }
            }
            
            else  if ([successDictionary[@"quantity"] floatValue] > 0) {
                NSString *itemString = [NSString stringWithFormat:@"%@%@%@%@%@",successDictionary[@"description"],@"#",successDictionary[@"price"],@"#",successDictionary[@"quantity"]];
                
                selected_desc = [[NSString stringWithFormat:@"%@",successDictionary[@"description"]] copy];
                [taxArr addObject:successDictionary[@"tax"]];
                
                [self getSkuDetailsHandler:itemString];
            }
            
        }
        
        else{
            [HUD setHidden:YES];
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:[NSString stringWithFormat:@"%@",[[successDictionary valueForKey:@"responseHeader"] valueForKey:@"responseMessage"]] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    
    else {
        
        [HUD setHidden:YES];
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Failed To Get Response" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
}

- (void)getSkuDetailsErrorResponse:(NSString *)failureString {
    [HUD setHidden:YES];
    UIAlertView * alert=  [[UIAlertView alloc] initWithTitle:failureString message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alert show];
    
}

#pragma mark End of Get SKU Details Service Reposnse Delegates -

#pragma mark - Get Deals And Offers Service Reposnse Delegates

- (void)getDealsAndOffersSuccessResponse:(NSDictionary *)successDictionary {
    [HUD setHidden:YES];
    @try {
        if (successDictionary != nil) {
            if (successDictionary.count>0 && successDictionary!=(NSDictionary *)[NSNull null]) {
                
                if (!([[successDictionary valueForKey:@"dealsList"] isKindOfClass:[NSNull class]]) && !([[successDictionary valueForKey:@"offersList"] isKindOfClass:[NSNull class]])) {
                    
                    NSArray *dealDetails = [successDictionary valueForKey:@"dealsList"];
                    NSArray *offerList = [successDictionary valueForKey:@"offersList"];
                    
                    if (dealDetails.count != 0) {
                        
                        for (int i=0 ; i < dealDetails.count; i++) {
                            
                            NSDictionary *tempDic = dealDetails[i];
                            
                            if (!([[tempDic valueForKey:@"dealCategory"] rangeOfString:@"turn"].location == NSNotFound)) {
                                
                                turnOverDealVal = [[NSMutableArray alloc]init];
                                
                                NSArray *arr = [tempDic valueForKey:@"rangeList"];
                                
                                NSDictionary *dealItem = arr[0];
                                [turnOverDealVal addObject:[tempDic valueForKey:@"dealSkus"] ];
                                [turnOverDealVal addObject:[[dealItem valueForKey:@"dealQuantity_float"] stringValue]];
                                turnOverDealDes = [dealItem valueForKey:@"description"];
                            }
                            else {
                                NSArray *arr = [tempDic valueForKey:@"rangeList"];
                                // for (int i=0; i<[arr count]; i++) {
                                
                                NSDictionary *dealDic = arr[0];
                                
                                DealsController *_dealsController = [[DealsController alloc] init];
                                
                                dealItemsCount = [[NSMutableArray alloc] init];
                                dealSkuids = [[NSMutableArray alloc] init];
                                dealSkuCount = [[NSMutableArray alloc] init];
                                sellSkuIds = [[NSMutableArray alloc] init];
                                NSMutableDictionary *dealDesc = [[NSMutableDictionary alloc]init];
                                NSMutableArray *temp = [[NSMutableArray alloc]init];
                                
                                if (dealDataItems.count) {
                                    for(int j=0;j<dealDataItems.count;j++) {
                                        
                                        _dealsController = dealDataItems[j];
                                        NSMutableDictionary *dealDicController = _dealsController.productData;
                                        
                                        for (int i=0; i<dealDicController.allKeys.count; i++) {
                                            
                                            NSArray *itemArr = [dealDicController valueForKey:dealSkuId];
                                            
                                            if (itemArr.count!=0) {
                                                if ([itemArr containsObject:dealSkuId]) {
                                                    [dealDataItems removeObjectAtIndex:j];
                                                }
                                            }
                                        }
                                        [temp addObject:[[dealDic valueForKey:@"minimumPurchaseQuantity_float"]stringValue]];
                                        [temp addObject:[[dealDic valueForKey:@"dealQuantity_float"]stringValue]];
                                        [temp addObject:[tempDic valueForKey:@"dealSkus"]];
                                        [temp addObject:[dealDic valueForKey:@"description"]];
                                        
                                        dealItemsCount = [temp copy];
                                        [dealDesc setValue:dealItemsCount forKey:dealSkuId];
                                        [dealSkuids  addObject:[dealDetails valueForKey:@"dealSkus"]];
                                        _dealsController.productData = dealDesc;
                                        [dealDataItems addObject:_dealsController];
                                    }
                                    
                                }
                                else {
                                    [temp addObject:[[dealDic valueForKey:@"minimumPurchaseQuantity_float"]stringValue]];
                                    [temp addObject:[[dealDic valueForKey:@"dealQuantity_float"]stringValue]];
                                    [temp addObject:[tempDic valueForKey:@"dealSkus"]];
                                    [temp addObject:[dealDic valueForKey:@"description"]];
                                    
                                    dealItemsCount = [temp copy];
                                    
                                    [dealDesc setValue:dealItemsCount forKey:dealSkuId];
                                    
                                    
                                    [dealSkuids  addObject:[dealDetails valueForKey:@"dealSkus"]];
                                    
                                    
                                    
                                    _dealsController.productData = dealDesc;
                                    [dealDataItems addObject:_dealsController];
                                    
                                }
                            }
                        }
                    }
                    if (offerList.count!=0) {
                        
                        for (int i=0; i<offerList.count; i++) {
                            
                            NSDictionary *tempDic = offerList[i];
                            
                            if (!([[tempDic valueForKey:@"offerCategory"] rangeOfString:@"turn"].location == NSNotFound)) {
                                
                                
                                NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
                                
                                NSDictionary *offerValue = arr[0];
                                turnOverDis = [[[offerValue valueForKey:@"rewardValue"] stringValue] copy];
                                
                                offerDescStr = [offerValue valueForKey:@"description"];
                            }
                            else {
                                
                                // turnOverDis = @"";
                                
                                NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
                                if (arr.count > 0) {
                                    NSDictionary *offerDetails = arr[0];
                                    NSArray *temp = @[[[offerDetails valueForKey:@"rewardValue"] stringValue],[offerDetails valueForKey:@"description"]];
                                    offerDic[[tempDic valueForKey:@"sellSkuids"]] = temp;
                                    
                                }
                            }
                        }
                    }
                }
            }
        }
        
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception.name);
    }
    @finally {
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height );
        }
        else {
            selectedSaleIdTable.frame = CGRectMake(selectedSaleIdTable.frame.origin.x, selectedSaleIdTable.frame.origin.y, selectedSaleIdTable.frame.size.width, selectedSaleIdTable.frame.size.height + 30);
        }
        [selectedSaleIdTable reloadData];
        [self updateValues];
        [self updateItemScanTime];
        [self goToBottom];
        // before reloading the data reset the subtotal textfield
        subtotal_value.text = @"";
        selectedSaleIdTable.hidden = NO;
        
        // continous camera to scan ..
        
        SystemSoundID    soundFileObject1;
        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
        
        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
        AudioServicesPlaySystemSound (soundFileObject1);
    }
}
- (void)getDealsAndOffersErrorResponse {
    [HUD setHidden:YES];
}


- (void)showCreditNoteView:(NSString *)paymentType_ {
    
    if ([(self.view).subviews containsObject:couponView]){
        for (UIView *subview in couponView.subviews) {
            [subview removeFromSuperview];
        }
        [couponView setHidden:YES];
    }
    
    paymentView.userInteractionEnabled = TRUE;
    
    //    [self setSiblings:paymentView enabled:FALSE];
    
    paymentScrollView = [UIScrollView new];
    paymentScrollView.backgroundColor = [UIColor clearColor];
    paymentScrollView.bounces = NO;
    paymentScrollView.scrollEnabled = NO;
    
    paymentView.backgroundColor = [UIColor blackColor];
    paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
    
    
    label = [[UILabel alloc] init] ;
    label.text = @"    Credit Note Payment";
    label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
    label.alpha = 0.8f;
    label.textAlignment = NSTextAlignmentLeft;
    label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label.textColor = [UIColor whiteColor];
    
    
    
    // close button to close the view ..
    backbutton = [[UIButton alloc] init] ;
    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    backbutton.tag = 11;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
    
    billLabel = [[UILabel alloc] init] ;
    billLabel.text = @"Net Pay ";
    billLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billLabel.backgroundColor = [UIColor clearColor];
    billLabel.textColor = [UIColor whiteColor];
    
    creditNoteLbl = [[UILabel alloc] init] ;
    creditNoteLbl.text = @"Credit Note ID ";
    creditNoteLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    creditNoteLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    creditNoteLbl.backgroundColor = [UIColor clearColor];
    creditNoteLbl.textColor = [UIColor whiteColor];
    
    creditNoteTotalLbl = [[UILabel alloc] init] ;
    creditNoteTotalLbl.text = @"CN Total :";
    creditNoteTotalLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    creditNoteTotalLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    creditNoteTotalLbl.backgroundColor = [UIColor clearColor];
    creditNoteTotalLbl.textColor = [UIColor whiteColor];
    
    creditNoteBalLbl = [[UILabel alloc] init] ;
    creditNoteBalLbl.text = @"CN Balance :";
    creditNoteBalLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    creditNoteBalLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    creditNoteBalLbl.backgroundColor = [UIColor clearColor];
    creditNoteBalLbl.textColor = [UIColor whiteColor];
    
    creditNoteStatusLbl = [[UILabel alloc] init] ;
    creditNoteStatusLbl.text = @"CN Status :";
    creditNoteStatusLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    creditNoteStatusLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    creditNoteStatusLbl.backgroundColor = [UIColor clearColor];
    creditNoteStatusLbl.textColor = [UIColor whiteColor];
    
    paidLbl = [[UILabel alloc] init] ;
    paidLbl.text = @"Paid Cash ";
    paidLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    paidLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    paidLbl.backgroundColor = [UIColor clearColor];
    paidLbl.textColor = [UIColor whiteColor];
    
    billStatusLabel = [[UILabel alloc] init] ;
    billStatusLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billStatusLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billStatusLabel.backgroundColor = [UIColor clearColor];
    billStatusLabel.textColor = [UIColor whiteColor];
    billStatusLabel.hidden = YES;
    
    billStatusLabelValue = [[UILabel alloc] init] ;
    billStatusLabelValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billStatusLabelValue.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billStatusLabelValue.backgroundColor = [UIColor clearColor];
    billStatusLabelValue.textColor = [UIColor whiteColor];
    billStatusLabelValue.hidden = YES;
    
    payTxt1 = [[UITextField alloc] init];
    payTxt1.borderStyle = UITextBorderStyleRoundedRect;
    payTxt1.textColor = [UIColor blackColor];
    payTxt1.font = [UIFont systemFontOfSize:18.0];
    payTxt1.backgroundColor = [UIColor whiteColor];
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    payTxt1.text = billDueValue.text;
    [payTxt1 setEnabled:FALSE];
    
    payTxt2 = [[UITextField alloc] init];
    payTxt2.borderStyle = UITextBorderStyleRoundedRect;
    payTxt2.textColor = [UIColor blackColor];
    payTxt2.font = [UIFont systemFontOfSize:18.0];
    payTxt2.backgroundColor = [UIColor whiteColor];
    payTxt2.text = paidVal.text;
    if ((changeReturnVal.text).floatValue>0 || paidVal == nil) {
        payTxt2.text = billDueValue.text;
    }
    payTxt2.clearButtonMode = UITextFieldViewModeWhileEditing;
    payTxt2.autocorrectionType = UITextAutocorrectionTypeNo;
    [payTxt2 addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
    numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                             [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar1 sizeToFit];
    payTxt2.inputAccessoryView = numberToolbar1;
    payTxt2.keyboardType = UIKeyboardTypeNumberPad;
    payTxt2.delegate = self;
    
    
    
    phnotext = [[UITextField alloc] init];
    
    phnotext.borderStyle = UITextBorderStyleRoundedRect;
    phnotext.autocorrectionType = UITextAutocorrectionTypeNo;
    phnotext.keyboardType = UIKeyboardTypeNumberPad;
    phnotext.returnKeyType = UIReturnKeyDone;
    phnotext.clearButtonMode = UITextFieldViewModeWhileEditing;
    phnotext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    [phnotext addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    //    phnotext.delegate = self;
    // phnotext.tag = 111;
    phnotext.placeholder = @"Phone Number";
    phnotext.delegate = self;
    phnotext.text = @"";
    
    phonelbl = [[UILabel alloc] init] ;
    
    phonelbl.text= @"Phone";
    phonelbl.textColor = [UIColor whiteColor];
    phonelbl.backgroundColor = [UIColor clearColor];
    
    emaillbl = [[UILabel alloc] init] ;
    
    emaillbl.text= @"Email";
    emaillbl.textColor = [UIColor whiteColor];
    emaillbl.backgroundColor = [UIColor clearColor];
    
    namelbl = [[UILabel alloc] init] ;
    
    namelbl.text= @"Name ";
    namelbl.textColor = [UIColor whiteColor];
    namelbl.backgroundColor = [UIColor clearColor];
    
    
    emailtext = [[UITextField alloc] init];
    emailtext.borderStyle = UITextBorderStyleRoundedRect;
    emailtext.autocorrectionType = UITextAutocorrectionTypeNo;
    emailtext.keyboardType = UIKeyboardTypeEmailAddress;
    emailtext.returnKeyType = UIReturnKeyDone;
    emailtext.clearButtonMode = UITextFieldViewModeWhileEditing;
    emailtext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    emailtext.delegate = self;
    emailtext.placeholder = @"Customer Mail ID";
    emailtext.autocapitalizationType = UITextAutocapitalizationTypeNone;
    emailtext.text  = @"";
    
    
    nametext = [[UITextField alloc] init];
    
    nametext.borderStyle = UITextBorderStyleRoundedRect;
    nametext.autocorrectionType = UITextAutocorrectionTypeNo;
    nametext.keyboardType = UIKeyboardTypeDefault;
    nametext.returnKeyType = UIReturnKeyDone;
    nametext.clearButtonMode = UITextFieldViewModeWhileEditing;
    nametext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    nametext.placeholder = @"Customer Name";
    nametext.delegate = self;
    nametext.text = @"";
    
    creditNoteTxt = [[UITextField alloc] init];
    
    creditNoteTxt.borderStyle = UITextBorderStyleRoundedRect;
    creditNoteTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    creditNoteTxt.keyboardType = UIKeyboardTypeDefault;
    creditNoteTxt.returnKeyType = UIReturnKeyDone;
    creditNoteTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    creditNoteTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    creditNoteTxt.placeholder = @"Credit Note ID";
    creditNoteTxt.delegate = self;
    creditNoteTxt.text = @"";
    
    
    payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    // pay the cash button to continue the transaction ..
    [payBtn addTarget:self action:@selector(continueCreditNotepay) forControlEvents:UIControlEventTouchUpInside];
    [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
    payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    payBtn.titleLabel.textColor = [UIColor whiteColor];
    payBtn.backgroundColor = [UIColor grayColor];
    
    streettext = [[UITextField alloc] init];
    streettext.borderStyle = UITextBorderStyleRoundedRect;
    streettext.autocorrectionType = UITextAutocorrectionTypeNo;
    streettext.keyboardType = UIKeyboardTypeDefault;
    streettext.returnKeyType = UIReturnKeyDone;
    streettext.clearButtonMode = UITextFieldViewModeWhileEditing;
    streettext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    streettext.delegate = self;
    streettext.placeholder = @"Enter street";
    locltytext = [[UITextField alloc] init];
    
    locltytext.borderStyle = UITextBorderStyleRoundedRect;
    locltytext.autocorrectionType = UITextAutocorrectionTypeNo;
    locltytext.keyboardType = UIKeyboardTypeDefault;
    locltytext.returnKeyType = UIReturnKeyDone;
    locltytext.clearButtonMode = UITextFieldViewModeWhileEditing;
    locltytext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    locltytext.delegate = self;
    locltytext.placeholder = @"Enter locality";
    citytext = [[UITextField alloc] init];
    
    citytext.borderStyle = UITextBorderStyleRoundedRect;
    citytext.autocorrectionType = UITextAutocorrectionTypeNo;
    citytext.keyboardType = UIKeyboardTypeDefault;
    citytext.returnKeyType = UIReturnKeyDone;
    citytext.clearButtonMode = UITextFieldViewModeWhileEditing;
    citytext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    citytext.delegate = self;
    citytext.placeholder = @"Enter city";
    
    pintext = [[UITextField alloc] init];
    
    pintext.borderStyle = UITextBorderStyleRoundedRect;
    pintext.autocorrectionType = UITextAutocorrectionTypeNo;
    pintext.keyboardType = UIKeyboardTypeNumberPad;
    pintext.returnKeyType = UIReturnKeyDone;
    pintext.clearButtonMode = UITextFieldViewModeWhileEditing;
    pintext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    pintext.delegate = self;
    pintext.placeholder = @"Enter pin";
    
    streetlbl = [[UILabel alloc] init] ;
    
    streetlbl.text= @"Street";
    streetlbl.textColor = [UIColor whiteColor];
    streetlbl.backgroundColor = [UIColor clearColor];
    [paymentScrollView addSubview:streetlbl];
    
    localitylbl = [[UILabel alloc] init] ;
    
    localitylbl.text= @"Locality";
    localitylbl.textColor = [UIColor whiteColor];
    localitylbl.backgroundColor = [UIColor clearColor];
    [paymentScrollView addSubview:localitylbl];
    
    citylbl = [[UILabel alloc] init] ;
    
    citylbl.text= @"City";
    citylbl.backgroundColor = [UIColor clearColor];
    citylbl.textColor = [UIColor whiteColor];
    [paymentScrollView addSubview:citylbl];
    
    pinlbl = [[UILabel alloc] init] ;
    
    pinlbl.text= @"PIN";
    pinlbl.textColor = [UIColor whiteColor];
    pinlbl.backgroundColor = [UIColor clearColor] ;
    [paymentScrollView addSubview:pinlbl];
    
    //changed by Srinivasulu on 03/05/2017....
    
    nametext.placeholder = @"First Name";
    
    citylbl.text= @"Landmark";
    pinlbl.text= @"City / PIN";
    
    
    
    lastNameTxt = [[UITextField alloc] init];
    lastNameTxt.borderStyle = UITextBorderStyleRoundedRect;
    lastNameTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    lastNameTxt.keyboardType = UIKeyboardTypeEmailAddress;
    lastNameTxt.returnKeyType = UIReturnKeyDone;
    lastNameTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    lastNameTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    lastNameTxt.delegate = self;
    lastNameTxt.placeholder = @"Last Name";
    lastNameTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    
    doorNoTxt = [[UITextField alloc] init];
    doorNoTxt.borderStyle = UITextBorderStyleRoundedRect;
    doorNoTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    doorNoTxt.keyboardType = UIKeyboardTypeEmailAddress;
    doorNoTxt.returnKeyType = UIReturnKeyDone;
    doorNoTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    doorNoTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    doorNoTxt.delegate = self;
    doorNoTxt.placeholder = @"Door No";
    doorNoTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    landMarkTxt = [[UITextField alloc] init];
    landMarkTxt.borderStyle = UITextBorderStyleRoundedRect;
    landMarkTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    landMarkTxt.keyboardType = UIKeyboardTypeEmailAddress;
    landMarkTxt.returnKeyType = UIReturnKeyDone;
    landMarkTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    landMarkTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    landMarkTxt.delegate = self;
    landMarkTxt.placeholder = @"Landmark";
    landMarkTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    
    [paymentScrollView addSubview:lastNameTxt];
    [paymentScrollView addSubview:doorNoTxt];
    [paymentScrollView addSubview:landMarkTxt];
    
    //upto here on 04/05/2017....
    
    
    
    [paymentScrollView addSubview:streettext];
    
    
    [paymentScrollView addSubview:locltytext];
    
    
    [paymentScrollView addSubview:citytext];
    
    [paymentScrollView addSubview:pintext];
    UIButton *back;
    if ([paymentType_ isKindOfClass:[NSString class]]) {
        if ([paymentType_ isEqualToString:@"CARD"]) {
            label.text = @"    Card Payment";
            
            payTxt2.text = billDueValue.text;
            
            
            
            [payTxt2 setUserInteractionEnabled:TRUE];
            
            cardradioBtn1 = [[UIButton alloc] init] ;
            [cardradioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
            cardradioBtn1.backgroundColor = [UIColor clearColor];
            cardradioBtn1.layer.masksToBounds = YES;
            cardradioBtn1.layer.cornerRadius = 5.0f;
            cardradioBtn1.tag = 0;
            cardradioBtn1.hidden = NO;
            [cardradioBtn1 addTarget:self action:@selector(cardRadioAction:) forControlEvents:UIControlEventTouchUpInside];
            
            cardradioBtn2 = [[UIButton alloc] init] ;
            [cardradioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
            //cancelOrder.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            cardradioBtn2.backgroundColor = [UIColor clearColor];
            cardradioBtn2.layer.masksToBounds = YES;
            cardradioBtn2.layer.cornerRadius = 5.0f;
            cardradioBtn2.tag = 1;
            cardradioBtn2.hidden = NO;
            [cardradioBtn2 addTarget:self action:@selector(cardRadioAction:) forControlEvents:UIControlEventTouchUpInside];
            cardradioBtn2.userInteractionEnabled = YES;
            
            
            UILabel *takeAway = [[UILabel alloc] init] ;
            takeAway.text = @"Mobile POS";
            takeAway.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
            takeAway.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
            takeAway.backgroundColor = [UIColor clearColor];
            takeAway.hidden = NO;
            takeAway.textColor = [UIColor whiteColor];
            
            UILabel *doorDel = [[UILabel alloc] init] ;
            doorDel.text = @"POS";
            doorDel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
            doorDel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
            doorDel.backgroundColor = [UIColor clearColor];
            doorDel.textColor = [UIColor whiteColor];
            doorDel.hidden = NO;
            
            
            payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            
            // pay the cash button to continue the transaction ..
            if([cardPaymentSelection isEqualToString:@"POS"]) {
                
                [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
                [payBtn setTitle:@"Continue" forState:UIControlStateNormal];
            }
            else {
                [payBtn addTarget:self action:@selector(cardPaymentCall) forControlEvents:UIControlEventTouchUpInside];
            }
            [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
            payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            payBtn.titleLabel.textColor = [UIColor whiteColor];
            payBtn.backgroundColor = [UIColor grayColor];
            type_Of_Payment = [[NSMutableString alloc] initWithString:@"Credit/Debit"];
            
            CheckWifi *wifi = [[CheckWifi alloc]init];
            BOOL status = [wifi checkWifi];
            if (!status) {
                
                cardradioBtn2.userInteractionEnabled = NO;
            }
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                cardradioBtn1.frame = CGRectMake(15,100, 30, 30);
                takeAway.frame = CGRectMake(450, 95, 200, 40);
                takeAway.font = [UIFont systemFontOfSize:25.0];
                cardradioBtn2.frame = CGRectMake(400, 100, 30, 30);
                doorDel.frame =  CGRectMake(60, 95, 150, 40);
                doorDel.font = [UIFont systemFontOfSize:25.0];
            }
            
            [paymentView addSubview:cardradioBtn1];
            [paymentView addSubview:takeAway];
            [paymentView addSubview:cardradioBtn2];
            [paymentView addSubview:doorDel];
        }
        else if ([paymentType_ isEqualToString:@"Food Coupons"]) {
            if ([paymentType_ isEqualToString:@"Food Coupons"]) {
                
                [payTxt2 setUserInteractionEnabled:FALSE];
                
            }
            
            label.text = @"    Coupon Payment";
            payTxt2.text = [NSString stringWithFormat:@"%.2f",(totalCoupValue.text).floatValue];
            
        }
        
        else if ([paymentType_ isEqualToString:@"CASH"] || [paymentType_ isEqualToString:@"QUICKCASH"]) {
            type_Of_Payment = [[NSMutableString alloc] initWithString:@"Cash"];
            back = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            [back addTarget:self action:@selector(backToDenominatio) forControlEvents:UIControlEventTouchUpInside];
            [back setTitle:@"Back"    forState:UIControlStateNormal];
            back.titleLabel.textAlignment = NSTextAlignmentCenter;
            back.titleLabel.textColor = [UIColor whiteColor];
            back.backgroundColor = [UIColor grayColor];
            
            payTxt2.userInteractionEnabled = NO;
            if ([paymentType_ isEqualToString:@"QUICKCASH"]) {
                payTxt2.userInteractionEnabled = YES;
            }
            if ((payTxt1.text).floatValue-(payTxt2.text).floatValue<0) {
                finalBillDue1 = @"0.00";
                
            }
            else {
                finalBillDue1 = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
                
            }
        }
        else if (paymentType_.length==0) {
            
            payTxt1.userInteractionEnabled = NO;
            payTxt2.userInteractionEnabled = TRUE;
            payTxt2.text = @"0.00";
        }
        
    }
    else {
        type_Of_Payment = [[NSMutableString alloc] initWithString:@"Cash"];
        
        payTxt2.userInteractionEnabled = NO;
        if ((payTxt1.text).floatValue-(payTxt2.text).floatValue<0) {
            finalBillDue1 = @"0.00";
            
        }
        else {
            finalBillDue1 = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
            
        }
        back = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [back addTarget:self action:@selector(backToDenomination) forControlEvents:UIControlEventTouchUpInside];
        [back setTitle:@"Back"    forState:UIControlStateNormal];
        back.titleLabel.textAlignment = NSTextAlignmentCenter;
        back.titleLabel.textColor = [UIColor whiteColor];
        back.backgroundColor = [UIColor grayColor];
    }
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            paymentScrollView.frame = CGRectMake(0.0, 0.0, 800.0, 600.0);
            paymentScrollView.contentSize = CGSizeMake(800.0, 700.0);
            paymentView.frame = CGRectMake(100, 80, 800, 600.0);
            payBtn.frame = CGRectMake(150.0, 520.0, 500, 60.0);
            label.frame = CGRectMake(0, 0, 800, 70);
            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
            
            label.font = [UIFont systemFontOfSize:25];
            
            billStatusLabel.font = [UIFont systemFontOfSize:20];
            billStatusLabel.frame = CGRectMake(15,260,120,30);
            billStatusLabelValue.font = [UIFont systemFontOfSize:20];
            billStatusLabelValue.frame = CGRectMake(210,260,160,30);
            creditNoteLbl.font = [UIFont systemFontOfSize:20];
            creditNoteLbl.frame = CGRectMake(15, 100.0, 140.0, 30);
            creditNoteTotalLbl.font = [UIFont systemFontOfSize:20];
            creditNoteTotalLbl.frame = CGRectMake(400, 80.0, 180.0, 30);
            creditNoteBalLbl.font = [UIFont systemFontOfSize:20];
            creditNoteBalLbl.frame = CGRectMake(590.0, 80.0, 200.0, 30);
            creditNoteStatusLbl.font = [UIFont systemFontOfSize:20];
            creditNoteStatusLbl.frame = CGRectMake(400, 120.0, 250.0, 30);
            creditNoteTotalLbl.textColor = [UIColor greenColor];
            creditNoteBalLbl.textColor = [UIColor greenColor];
            creditNoteStatusLbl.textColor = [UIColor greenColor];
            billLabel.font = [UIFont systemFontOfSize:20];
            billLabel.frame = CGRectMake(15, 160.0, 120, 30);
            paidLbl.font = [UIFont systemFontOfSize:20];
            paidLbl.frame = CGRectMake(15, 230.0, 120, 30);
            
            phonelbl.font = [UIFont systemFontOfSize:20];
            phonelbl.frame = CGRectMake(15, 300, 120, 30);
            emaillbl.font = [UIFont systemFontOfSize:20];
            emaillbl.frame = CGRectMake(15, 370, 120, 30);
            namelbl.font = [UIFont systemFontOfSize:20];
            namelbl.frame = CGRectMake(15, 440, 120, 30);
            
            payTxt1.font = [UIFont systemFontOfSize:20];
            payTxt1.frame = CGRectMake(160, 160, 200, 40);
            payTxt2.font = [UIFont systemFontOfSize:20];
            payTxt2.frame = CGRectMake(160, 230, 200, 40);
            phnotext.frame = CGRectMake(160.0, 300, 200, 40);
            phnotext.font = [UIFont systemFontOfSize:20];
            emailtext.frame = CGRectMake(160.0, 370, 200, 40);
            emailtext.font = [UIFont systemFontOfSize:20.0];
            nametext.frame = CGRectMake(160, 440, 200, 40);
            nametext.font = [UIFont systemFontOfSize:20];
            creditNoteTxt.frame = CGRectMake(160, 90, 200, 40);
            creditNoteTxt.font = [UIFont systemFontOfSize:20];
            
            streetlbl.font = [UIFont systemFontOfSize:20.0];
            streetlbl.frame = CGRectMake(400, 160, 120, 30);
            localitylbl.font = [UIFont systemFontOfSize:20.0];
            localitylbl.frame = CGRectMake(400, 230, 120, 30);
            citylbl.font = [UIFont systemFontOfSize:20.0];
            citylbl.frame = CGRectMake(400, 300, 120, 30);
            pinlbl.font = [UIFont systemFontOfSize:20.0];
            pinlbl.frame = CGRectMake(400, 370, 120, 30);
            
            streettext.font = [UIFont systemFontOfSize:20];
            streettext.frame = CGRectMake(530, 160, 200, 40);
            locltytext.font = [UIFont systemFontOfSize:20];
            locltytext.frame = CGRectMake(530, 230, 200, 40);
            citytext.frame = CGRectMake(530, 300, 200.0, 40);
            citytext.font = [UIFont systemFontOfSize:20];
            pintext.frame = CGRectMake(530, 370, 200.0, 40);
            pintext.font = [UIFont systemFontOfSize:20.0];
            
            
            if ([paymentType isKindOfClass:[NSString class]]) {
                if ([paymentType_ isEqualToString:@"CARD"]) {
                    paymentScrollView.frame = CGRectMake(0.0, 135, 800.0, 450.0);
                    paymentScrollView.contentSize = CGSizeMake(800.0, 650.0);
                    paymentView.frame = CGRectMake(100, 80, 800, 600);
                    
                    payBtn.frame = CGRectMake(150.0, 390, 500, 50.0);
                    label.frame = CGRectMake(0, 0, 800, 80);
                    backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                    
                    label.font = [UIFont systemFontOfSize:25];
                    
                    billStatusLabel.font = [UIFont systemFontOfSize:20];
                    billStatusLabel.frame = CGRectMake(15,140,120,30);
                    billStatusLabelValue.font = [UIFont systemFontOfSize:20];
                    billStatusLabelValue.frame = CGRectMake(160,140,160,30);
                    billLabel.font = [UIFont systemFontOfSize:20];
                    billLabel.frame = CGRectMake(15, 30, 120, 30);
                    paidLbl.font = [UIFont systemFontOfSize:20];
                    paidLbl.frame = CGRectMake(15, 100, 120, 30);
                    
                    phonelbl.font = [UIFont systemFontOfSize:20];
                    phonelbl.frame = CGRectMake(15, 170, 120, 30);
                    emaillbl.font = [UIFont systemFontOfSize:20];
                    emaillbl.frame = CGRectMake(15, 240, 120, 30);
                    namelbl.font = [UIFont systemFontOfSize:20];
                    namelbl.frame = CGRectMake(15, 310, 120, 30);
                    
                    payTxt1.font = [UIFont systemFontOfSize:20];
                    payTxt1.frame = CGRectMake(160, 30, 200, 40);
                    payTxt2.font = [UIFont systemFontOfSize:20];
                    payTxt2.frame = CGRectMake(160, 100, 200, 40);
                    phnotext.frame = CGRectMake(160.0, 170, 200, 40);
                    phnotext.font = [UIFont systemFontOfSize:20];
                    emailtext.frame = CGRectMake(160.0, 240, 200, 40);
                    emailtext.font = [UIFont systemFontOfSize:20.0];
                    nametext.frame = CGRectMake(160, 310, 200, 40);
                    nametext.font = [UIFont systemFontOfSize:20];
                    
                    streetlbl.font = [UIFont systemFontOfSize:20.0];
                    streetlbl.frame = CGRectMake(400, 30, 120, 30);
                    localitylbl.font = [UIFont systemFontOfSize:20.0];
                    localitylbl.frame = CGRectMake(400, 100, 120, 30);
                    citylbl.font = [UIFont systemFontOfSize:20.0];
                    citylbl.frame = CGRectMake(400, 170, 120, 30);
                    pinlbl.font = [UIFont systemFontOfSize:20.0];
                    pinlbl.frame = CGRectMake(400, 240, 120, 30);
                    
                    streettext.font = [UIFont systemFontOfSize:20];
                    streettext.frame = CGRectMake(530, 30, 200, 40);
                    locltytext.font = [UIFont systemFontOfSize:20];
                    locltytext.frame = CGRectMake(530, 100, 200, 40);
                    citytext.frame = CGRectMake(530, 170, 200.0, 40);
                    citytext.font = [UIFont systemFontOfSize:20];
                    pintext.frame = CGRectMake(530, 240, 200.0, 40);
                    pintext.font = [UIFont systemFontOfSize:20.0];
                    
                }
            }
            
            
            
            payBtn.layer.cornerRadius = 10.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
            if ([paymentType isKindOfClass:[UIButton class]]) {
                back.layer.cornerRadius = 10.0;
                back.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                payBtn.frame = CGRectMake(450.0, 470, 250, 40.0);
                back.frame = CGRectMake(100.0, 470, 250.0, 40.0);
                [paymentScrollView addSubview:back];
            }
            
            else if ([paymentType_ caseInsensitiveCompare:@"cash"] == NSOrderedSame) {
                back.layer.cornerRadius = 10.0;
                back.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                payBtn.frame = CGRectMake(160.0, 470, 200, 50.0);
                back.frame = CGRectMake(450.0, 470, 200.0, 50.0);
                [paymentScrollView addSubview:back];
            }
            
            
            
            //changed by Srinivasulu on 02/05/2017....
            
            
            
            //            nametext.frame = CGRectMake( 500, payTxt1.frame.origin.y, 115, 40);
            //            nametext.font = [UIFont systemFontOfSize:20];
            //
            //            lastNameTxt.frame = CGRectMake( nametext.frame.origin.x + nametext.frame.size.width + 10, nametext.frame.origin.y, 150, nametext.frame.size.height);
            //            lastNameTxt.font = [UIFont systemFontOfSize:20];
            //
            //
            //            doorNoTxt.frame = CGRectMake( nametext.frame.origin.x, payTxt2.frame.origin.y, nametext.frame.size.width, nametext.frame.size.height);
            //            doorNoTxt.font = [UIFont systemFontOfSize:20];
            //            streettext.frame = CGRectMake( lastNameTxt.frame.origin.x, doorNoTxt.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            //            streettext.font = [UIFont systemFontOfSize:20];
            //
            //            locltytext.frame = CGRectMake( nametext.frame.origin.x, salesPersonId.frame.origin.y, (streettext.frame.origin.x +  streettext.frame.size.width) - doorNoTxt.frame.origin.x, nametext.frame.size.height);
            //            locltytext.font = [UIFont systemFontOfSize:20];
            //
            //            landMarkTxt.frame = CGRectMake( locltytext.frame.origin.x, phnotext.frame.origin.y , locltytext.frame.size.width, nametext.frame.size.height);
            //            landMarkTxt.font = [UIFont systemFontOfSize:20];
            //
            //
            //            citytext.frame = CGRectMake( nametext.frame.origin.x, emailtext.frame.origin.y, nametext.frame.size.width, nametext.frame.size.height);
            //            citytext.font = [UIFont systemFontOfSize:20];
            //            pintext.frame = CGRectMake( lastNameTxt.frame.origin.x, citytext.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            //            pintext.font = [UIFont systemFontOfSize:20];
            
            namelbl.frame = CGRectMake( 400, 160, 120, 30);
            streetlbl.frame = CGRectMake(400, 230, 120, 30);
            localitylbl.frame = CGRectMake(400, 300, 120, 30);
            citylbl.frame = CGRectMake(400, 370, 370, 30);
            pinlbl.frame = CGRectMake(400, 440, 120, 30);
            
            
            nametext.frame = CGRectMake( 500, 160, 115, 40);
            nametext.font = [UIFont systemFontOfSize:20];
            
            lastNameTxt.frame = CGRectMake( nametext.frame.origin.x + nametext.frame.size.width + 10, nametext.frame.origin.y, 150, nametext.frame.size.height);
            lastNameTxt.font = [UIFont systemFontOfSize:20];
            
            
            doorNoTxt.frame = CGRectMake( nametext.frame.origin.x, 230, nametext.frame.size.width, nametext.frame.size.height);
            doorNoTxt.font = [UIFont systemFontOfSize:20];
            streettext.frame = CGRectMake( lastNameTxt.frame.origin.x, doorNoTxt.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            streettext.font = [UIFont systemFontOfSize:20];
            
            locltytext.frame = CGRectMake( nametext.frame.origin.x, 300, (streettext.frame.origin.x +  streettext.frame.size.width) - doorNoTxt.frame.origin.x, nametext.frame.size.height);
            locltytext.font = [UIFont systemFontOfSize:20];
            
            landMarkTxt.frame = CGRectMake( locltytext.frame.origin.x, 370, locltytext.frame.size.width, nametext.frame.size.height);
            landMarkTxt.font = [UIFont systemFontOfSize:20];
            
            
            citytext.frame = CGRectMake( nametext.frame.origin.x, 440, nametext.frame.size.width, nametext.frame.size.height);
            citytext.font = [UIFont systemFontOfSize:20];
            pintext.frame = CGRectMake( lastNameTxt.frame.origin.x, citytext.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            pintext.font = [UIFont systemFontOfSize:20];
            
            
            
            
            //upto here on 04/05/2017.......
            
            
        }
        else {
            paymentView.frame = CGRectMake(20, 140, 730, 750.0);
            paymentScrollView.frame = CGRectMake(0.0, 0.0, 730.0, 750.0);
            paymentScrollView.contentSize = CGSizeMake(730.0, 850.0);
            payBtn.frame = CGRectMake(50.0, 680.0, 630.0, 60.0);
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            
            label.font = [UIFont systemFontOfSize:25];
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            billStatusLabel.font = [UIFont systemFontOfSize:25];
            billStatusLabel.frame = CGRectMake(15,220,220,45);
            billStatusLabelValue.font = [UIFont systemFontOfSize:25];
            billStatusLabelValue.frame = CGRectMake(210,220,160,45);
            billLabel.font = [UIFont systemFontOfSize:25];
            billLabel.frame = CGRectMake(15, 100.0, 160, 45);
            paidLbl.font = [UIFont systemFontOfSize:25];
            paidLbl.frame = CGRectMake(15, 170.0, 160, 45);
            phonelbl.font = [UIFont systemFontOfSize:25.0];
            phonelbl.frame = CGRectMake(15, 270.0, 160.0, 45);
            emaillbl.font = [UIFont systemFontOfSize:25.0];
            emaillbl.frame = CGRectMake(15, 340.0, 160.0, 45);
            namelbl.font = [UIFont systemFontOfSize:25.0];
            namelbl.frame = CGRectMake(15, 410.0, 160.0, 45);
            payTxt1.font = [UIFont systemFontOfSize:25];
            payTxt1.frame = CGRectMake(200, 100.0, 300, 45);
            payTxt2.font = [UIFont systemFontOfSize:25];
            payTxt2.frame = CGRectMake(200, 170.0, 300, 45);
            phnotext.frame = CGRectMake(200.0, 270.0, 300.0, 45);
            phnotext.font = [UIFont systemFontOfSize:25];
            emailtext.frame = CGRectMake(200.0, 340.0, 300.0, 45);
            emailtext.font = [UIFont systemFontOfSize:25.0];
            nametext.frame = CGRectMake(200.0, 410.0, 300.0, 45);
            nametext.font = [UIFont systemFontOfSize:25];
            
            streetlbl.font = [UIFont systemFontOfSize:25.0];
            streetlbl.frame = CGRectMake(15, 480.0, 160.0, 45);
            localitylbl.font = [UIFont systemFontOfSize:25.0];
            localitylbl.frame = CGRectMake(15, 550.0, 160.0, 45);
            citylbl.font = [UIFont systemFontOfSize:25.0];
            citylbl.frame = CGRectMake(15, 620.0, 160.0, 45);
            pinlbl.font = [UIFont systemFontOfSize:25.0];
            pinlbl.frame = CGRectMake(15, 690.0, 160.0, 45);
            
            streettext.font = [UIFont systemFontOfSize:25];
            streettext.frame = CGRectMake(200, 480.0, 300, 45);
            locltytext.font = [UIFont systemFontOfSize:25];
            locltytext.frame = CGRectMake(200, 550.0, 300, 45);
            citytext.frame = CGRectMake(200.0, 620.0, 300.0, 45);
            citytext.font = [UIFont systemFontOfSize:25];
            pintext.frame = CGRectMake(200.0, 690.0, 300.0, 45);
            pintext.font = [UIFont systemFontOfSize:25.0];
            
            
            payBtn.frame = CGRectMake(50.0, 755.0, 630.0, 50.0);
            payBtn.layer.cornerRadius = 25.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            paymentView.frame = CGRectMake(20, 140, 730, 820.0);
            
            
        }
        
        
        // img1.frame = CGRectMake(0, 0, 630, 460);
        
        
    }
    else {
        
        if (version >= 8.0 ) {
            paymentView.backgroundColor = [UIColor blackColor];
            paymentScrollView.frame = CGRectMake(0.0, 0.0, 300.0, 540.0);
            paymentScrollView.contentSize = CGSizeMake(300.0, 850.0);
            label.frame = CGRectMake(0, 0, 300, 40);
            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            billLabel.frame = CGRectMake(10, 50, 80, 30);
            paidLbl.frame = CGRectMake(10, 100, 120, 30);
            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
            payTxt1.frame = CGRectMake(140, 50, 150, 35);
            payTxt2.frame = CGRectMake(140, 100, 150, 35);
            //                                payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
            //                                payBtn.layer.cornerRadius = 15.0f;
            //                                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            phonelbl.frame = CGRectMake(10, 150.0, 160.0, 30);
            emaillbl.frame = CGRectMake(10, 195.0, 160.0, 30);
            namelbl.frame = CGRectMake(10,240.0, 160.0, 45);
            phnotext.frame = CGRectMake(140.0, 150.0, 150.0, 35);
            emailtext.frame = CGRectMake(140.0, 195.0, 150.0, 35);
            nametext.frame = CGRectMake(140.0, 240.0, 150.0, 35);
            
            streetlbl.frame = CGRectMake(10, 285, 160.0, 30);
            localitylbl.frame = CGRectMake(10, 330, 160.0, 30);
            citylbl.frame = CGRectMake(10, 375, 160.0, 35);
            pinlbl.frame = CGRectMake(10, 420, 160.0, 35);
            
            
            streetlbl.font = [UIFont systemFontOfSize:15];
            localitylbl.font = [UIFont systemFontOfSize:15];
            citylbl.font = [UIFont systemFontOfSize:15];
            pinlbl.font = [UIFont systemFontOfSize:15];
            
            streettext.font = [UIFont systemFontOfSize:15];
            streettext.frame = CGRectMake(140, 285, 150, 30);
            locltytext.font = [UIFont systemFontOfSize:15];
            locltytext.frame = CGRectMake(140, 330, 150, 30);
            citytext.frame = CGRectMake(140, 375, 150, 30);
            citytext.font = [UIFont systemFontOfSize:15];
            pintext.frame = CGRectMake(140, 420.0, 150, 30);
            pintext.font = [UIFont systemFontOfSize:15];
            
            payBtn.frame = CGRectMake(10.0, 455.0, 280.0, 30.0);
            payBtn.layer.cornerRadius = 15.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            paymentView.frame = CGRectMake(10, 70, 300, 540);
        }
        else{
            label.frame = CGRectMake(0, 0, 300, 40);
            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            billLabel.frame = CGRectMake(10, 50, 80, 30);
            paidLbl.frame = CGRectMake(10, 100, 120, 30);
            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
            payTxt1.frame = CGRectMake(140, 50, 150, 35);
            payTxt2.frame = CGRectMake(140, 100, 150, 35);
            payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
            payBtn.layer.cornerRadius = 15.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            paymentView.frame = CGRectMake(10, 70, 300, 240);
        }
        
    }
    [paymentScrollView addSubview:creditNoteLbl];
    [paymentScrollView addSubview:creditNoteTotalLbl];
    [paymentScrollView addSubview:creditNoteBalLbl];
    [paymentScrollView addSubview:creditNoteStatusLbl];
    [paymentScrollView addSubview:billLabel];
    [paymentScrollView addSubview:paidLbl];
    [paymentScrollView addSubview:billStatusLabel];
    [paymentScrollView addSubview:billStatusLabelValue];
    [paymentScrollView addSubview:payTxt1];
    [paymentScrollView addSubview:payTxt2];
    [paymentScrollView addSubview:phonelbl];
    [paymentScrollView addSubview:emaillbl];
    [paymentScrollView addSubview:namelbl];
    [paymentScrollView addSubview:phnotext];
    [paymentScrollView addSubview:emailtext];
    [paymentScrollView addSubview:creditNoteTxt];
    [paymentScrollView addSubview:nametext];
    [paymentScrollView addSubview:payBtn];
    
    [paymentView addSubview:paymentScrollView];
    [paymentView addSubview:label];
    [paymentView addSubview:backbutton];
    [self.view addSubview:paymentView];
    
    paymentView.hidden = NO;
    if ((customerPhoneValue.text).length >= 10) {
        phnotext.text = customerPhoneValue.text;
        [self getCustomerDetails];
    }
    
    //Changes done by Srinivasulu on 17/05/2018....
    //reaons -- Sir side remove animations. Commented and written the code....
    
    //    [UIView transitionFromView:denomination
    //                        toView:paymentView
    //                      duration:0.6
    //                       options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
    //                    completion:nil];
    
    if(denomination != nil)
        denomination.hidden = YES;
    paymentView.hidden = NO;
    //upto here on 17/05/2018....
}

- (void) continueCreditNotepay {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    
    //added by Srinivasulu on 17/03/2018....
    
    @try {
        
        for(NSDictionary * tempDic in paymentTransactionArray){
            
            if([[tempDic valueForKey:MODE_OF_PAY] isEqualToString:CREDIT_NOTE]){
                
                [paymentTransactionArray removeObject:tempDic];
            }
        }
        
    } @catch (NSException *exception) {
        
    }
    
    //upto here on 17/03/2018....
    
    if ((creditNoteTxt.text).length > 0 && [creditNoteStatusLbl.text containsString:@"Available"]) {
        
        if ((payTxt2.text).floatValue <= (payTxt1.text).floatValue) {
            NSString *phoneValue = [phnotext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            NSString *mailValue = [emailtext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            NSString *nameValue = [nametext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            
            type_Of_Payment = [[NSMutableString alloc] initWithString:@"Credit Note"];
            
            changeReturnStr = @"0.0";
            totalReceivedAmt = [payTxt2.text copy];
            NSMutableDictionary *transDic = [NSMutableDictionary new];
            [transDic setValue:@"Credit Note" forKey:@"modeOfPayment"];
            [transDic setValue:@"" forKey:@"cardType"];
            [transDic setValue:creditNoteTxt.text forKey:@"couponNumber"];
            [transDic setValue:payTxt2.text forKey:@"paidAmount"];
            [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
            [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
            [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
            
            [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
            [transDic setValue:changeReturnStr forKey:CHANGE_RETURN];
            [transDic setValue:totalReceivedAmt forKey:RECEIVED_AMOUNT];
            
            //added by Srinivasulu on 03/04/2018....
            
            [transDic setValue:CB forKey:TENDER_MODE];
            [transDic setValue:@"2" forKey:TENDER_KEY];
            
            //upto here on 03/04/2018....
            
            [paymentTransactionArray addObject:transDic];
            
            if ([paymentTypeVal.text isEqualToString:@"Door Delivery"]) {
                
                
                //changed by Srinivasulu  on 04/05/2017....
                
                //        if ([phoneValue length]>0 && [nameValue length]>0 && [streettext.text length]>0 && [locltytext.text length]>0 && [citytext.text length]>0) {
                
                if (phoneValue.length>0 && nameValue.length>0 && (streettext.text).length>0 && (locltytext.text).length>0 && (citytext.text).length>0 && (doorNoTxt.text).length > 0) {
                    
                    
                    
                    //upto here on 04/05/2017....
                    if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                        
                        [self setSiblings:paymentView enabled:TRUE];
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    else  if ((emailtext.text).length!=0) {
                        
                        if([self validateEmail:emailtext.text] == FALSE){
                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            [alert show];
                        }
                        else {
                            [self addCustomerDetails];
                            
                        }
                    }
                    else {
                        [self addCustomerDetails];
                    }
                    
                }
                
                else {
                    
                    if (phoneValue.length == 0) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter phone no" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                        
                    }
                    
                    //added by Srinivasulu on 04/05/2017....
                    
                    else if ((doorNoTxt.text).length == 0) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please, Enter Door No." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                        
                    }
                    
                    
                    //upto here on 04/05/2017....
                    
                    else if (nameValue.length == 0) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter user name" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    else if ((streettext.text).length == 0) {
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Pleaes enter street" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    else if ((locltytext.text).length == 0){
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter locality" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                    }
                    else if ((citytext.text).length == 0) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Plese enter city" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                    }
                    else  if (phoneValue.length == 0 && mailValue.length != 0 && nameValue.length != 0){
                        
                        [self setSiblings:paymentView enabled:FALSE];
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    else if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                        
                        [self setSiblings:paymentView enabled:TRUE];
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    
                    
                    else  if ((emailtext.text).length!=0) {
                        
                        if([self validateEmail:emailtext.text] == FALSE){
                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            [alert show];
                        }
                        else {
                            [self addCustomerDetails];
                        }
                    }
                }
                
                
            }
            else {
                
                if (phoneValue.length == 0 && mailValue.length == 0 && nameValue.length == 0) {
                    [self continuePay1];
                }
                else  if (phoneValue.length == 0 && mailValue.length != 0 && nameValue.length != 0){
                    
                    [self setSiblings:paymentView enabled:FALSE];
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                    
                }
                else if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                    
                    [self setSiblings:paymentView enabled:TRUE];
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                    
                }
                //    else if ([phoneValue length] != 0 && [mailValue length] == 0 && [nameValue length] != 0){
                //        [self setSiblings:paymentView enabled:FALSE];
                //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //        [alert show];
                //        [alert release];
                //
                //    }
                
                else  if ((emailtext.text).length!=0) {
                    
                    if([self validateEmail:emailtext.text] == FALSE){
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                    }
                    else {
                        [self addCustomerDetails];
                        
                    }
                }
                else {
                    [self addCustomerDetails];
                }
                
            }
            
        }
        else {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Credit Note Value exceeds total bill amount" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        
    }
    else {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please Provide Valid Credit Note" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}




- (void) segmentAction1: (id) sender  {
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    mainSegmentedControl = (UISegmentedControl *)sender;
    NSInteger index = mainSegmentedControl.selectedSegmentIndex;
    
    
    //[mainSegmentedControl setSelectedSegmentIndex:UISegmentedControlNoSegment];
    
    
    //added by Srinivasulu on  25/12/2017....
    
    exchangeTransfers.hidden = YES;
    exchDetailsView.hidden = YES;
    
    //upto here on  25/12/2017....
    
    switch (index) {
        case 0:
        {
            billingScrollView.hidden = NO;
            
            //changed by Srinivasulu on 21/12/2017....
            
            paymentScrollView.hidden = YES;
            perviousPaymentTransantionView.hidden = YES;
            
            //upto here on 21/12/2017....
            
            exchangeScrollView.hidden = YES;
            pastBillField.hidden = NO;
            quickPayBtn.hidden = NO;
            barCodeImage.hidden = NO;
            returnScrollView.hidden = YES;
            returnView.hidden = YES;
            submitButton.hidden = YES;
            exchangeView.hidden = YES;
            segmentedControl.enabled = YES;
            exchangeScrollView.hidden = YES;
            [returnDetailsView removeFromSuperview];
            [exchDetailsView removeFromSuperview];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:7];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:8];
            
            
            //added by Srinivasulu on 16/10/2017 && 25/12/2017....
            
            [cartTable reloadData];
            
            exchangeTransfers.hidden = YES;
            //upto here on 16/10/2017 && 25/12/2017....
            
            break;
        }
        case 1:
        {
            pastBillField.hidden = YES;
            quickPayBtn.hidden = YES;
            barCodeImage.hidden = YES;
            billingScrollView.hidden = YES;
            
            //changed by Srinivasulu on 21/12/2017....
            
            //            paymentScrollView.hidden = NO;
            paymentScrollView.hidden = YES;
            perviousPaymentTransantionView.hidden = NO;
            
            //upto here on 21/12/2017....
            
            
            exchangeScrollView.hidden = YES;
            salesIdTable.hidden = YES;
            returnScrollView.hidden = YES;
            returnView.hidden = YES;
            submitButton.hidden = YES;
            exchangeView.hidden = YES;
            segmentedControl.enabled = YES;
            
            exchangeScrollView.hidden = YES;
            exchangeView.hidden = YES;
            
            [returnDetailsView removeFromSuperview];
            [exchDetailsView removeFromSuperview];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:7];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:8];
            
            //added by Srinivasulu on 16/10/2017 && 25/12/2017....
            
            [cartTable reloadData];
            
            //upto here on 16/10/2017 && 25/12/2017....
            
            break;
        }
        case 2:
        {
            
            int accessStatus;
            
            if (!isOfflineService) {
                
                accessStatus = [WebServiceUtility checkAccessibilityFor:@"Return" appDocument:appDoc];
                
                if (accessStatus == kAcessDenied) {
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:NSLocalizedString(@"ACESS_DENIED", nil)] message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    return;
                }
                
            }
            
            //added by Srinivasulu on 30/01/2018....
            
            if (!([bill_status_val.text rangeOfString:@"RE"].location == NSNotFound)){
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"this_bill_can_not_be_returned", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
                [alert show];
                return;
            }
            
            //upto here on 30/01/2017....
            
            
            
            
            pastBillField.hidden = YES;
            quickPayBtn.hidden = YES;
            barCodeImage.hidden = YES;
            salesIdTable.hidden = YES;
            submitButton.hidden = YES;
            segmentedControl.enabled = NO;
            exchangeView.hidden = YES;
            exchangeScrollView.hidden = YES;
            returnDetailsView.hidden = NO;
            [exchDetailsView removeFromSuperview];
            
            NSString *value = [pastBillField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            if (value.length == 0) {
                
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = YES;
                returnScrollView.hidden = NO;
                exchangeView.hidden = YES;
                
                [returnDetailsTable reloadData];
            }
            else if ((billDueValue.text).floatValue > 0) {
                
                billingScrollView.hidden = YES;
                
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                
                exchangeScrollView.hidden = YES;
                returnScrollView.hidden = NO;
                exchangeView.hidden = YES;
                
                [returnDetailsTable reloadData];
                
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please clear the bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            else if ( tempExchangeDetails.count > 0){
                
                
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = YES;
                exchangeView.hidden = YES;
                
                returnScrollView.hidden = NO;
                [returnDetailsTable reloadData];
                
                if (!isOfflineService) {
                    if ( accessStatus == kReadVal) {
                        [self populateReturnView:FALSE];
                        
                    }
                    else {
                        [self populateReturnView:TRUE];
                    }
                }
                else {
                    [self populateReturnView:TRUE];
                }
                
                
            }
            
            
            else  if (tempReturnDetails.count > 0 ) {
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = YES;
                returnScrollView.hidden = NO;
                exchangeView.hidden = YES;
                [returnDetailsTable reloadData];
                if (accessStatus == kReadVal) {
                    [self populateReturnView:FALSE];
                    
                }
                else {
                    [self populateReturnView:TRUE];
                }
                [segmentedControl setEnabled:TRUE];
                [segmentedControl setUserInteractionEnabled:YES];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:7];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:8];
                [segmentedControl setEnabled:TRUE forSegmentAtIndex:9];
                
                if ([WebServiceUtility checkAccessibilityFor:@"Print" appDocument:appDoc] == kAcessDenied) {
                    
                    [segmentedControl setEnabled:FALSE forSegmentAtIndex:9];
                }
            }
            
            else if (tempReturnDetails.count == 0 ){
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = YES;
                pastBillField.hidden = YES;
                quickPayBtn.hidden = YES;
                returnScrollView.hidden = NO;
                //                returnView.hidden = NO;
                barCodeImage.hidden = YES;
                exchangeView.hidden = YES;
                
                
                [returnDetailsTable reloadData];
                
                if (accessStatus == kReadVal) {
                    [self populateReturnView:FALSE];
                    
                }
                else {
                    [self populateReturnView:TRUE];
                }
                
                //                ReturnItem *bh = [[ReturnItem alloc] initWithBillType:value returningItems:tempArrayItems totalBill:totalBillValue.text billStatus:pastBillStatus1 deals:discountValue.text subtotal: subTotalBillValue.text];
                //                [self.navigationController pushViewController:bh animated:YES];
                
                //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"This feature is not available for this edition" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //            [alert show];
                //            [alert release];
                
                //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"No Returned Items" delegate:self cancelButtonTitle:@"ok" otherButtonTitles:nil, nil];
                //                [alert show];
            }
            else{
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = YES;
                returnScrollView.hidden = YES;
                exchangeView.hidden = YES;
                
                [returnDetailsTable reloadData];
                //[exchangeDetailsTable reloadData];
            }
            
            //            }
            //            else {
            //
            //                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"This functionality is available with  internet connection only" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //                [alert show];
            //            }
            exchDetailsView.hidden = YES;
            
            break;
        }
        case 3: {
            
            int accessStatus = [WebServiceUtility checkAccessibilityFor:@"Exchange" appDocument:appDoc];
            if (!isOfflineService) {
                
                if (accessStatus == kAcessDenied) {
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:NSLocalizedString(@"ACESS_DENIED", nil)] message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    return;
                }
            }
            
            //added by Srinivasulu on 04/02/2018....
            
            if (!([bill_status_val.text rangeOfString:@"RE"].location == NSNotFound)){
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"this_bill_can_not_be_exchanged", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
                [alert show];
                return;
            }
            
            //upto here on 04/02/2017....
            //            if (!isOfflineService) {
            
            [returnDetailsView removeFromSuperview];
            exchDetailsView.hidden = NO;
            pastBillField.hidden = YES;
            quickPayBtn.hidden = YES;
            barCodeImage.hidden = YES;
            salesIdTable.hidden = YES;
            returnView.hidden = YES;
            submitButton.hidden = YES;
            segmentedControl.enabled = NO;
            
            returnScrollView.hidden = YES;
            returnView.hidden = YES;
            
            NSString *value = [pastBillField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            if (value.length == 0) {
                
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = YES;
                returnScrollView.hidden = YES;
                returnView.hidden = YES;
                [exchangeDetailsTable reloadData];
            }
            else if ((billDueValue.text).floatValue>0) {
                
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = YES;
                returnScrollView.hidden = NO;
                returnView.hidden = YES;
                [returnDetailsTable reloadData];
                
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please clear the bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            else if ( tempReturnDetails.count > 0){
                
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = NO;
                returnScrollView.hidden = YES;
                exchangeView.hidden = YES;
                [exchangeDetailsTable reloadData];
                
                if (!isOfflineService) {
                    
                    if (accessStatus == kReadVal) {
                        [self populateExchangeView:FALSE];
                    }
                    else {
                        [self populateExchangeView:TRUE];
                    }
                }
                else {
                    [self populateExchangeView:TRUE];
                }
            }
            else   if( tempExchangeDetails.count > 0){
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = NO;
                returnScrollView.hidden = YES;
                exchangeView.hidden = YES;
                
                if (!isOfflineService) {
                    
                    if (accessStatus == kReadVal) {
                        [self populateExchangeView:FALSE];
                    }
                    else {
                        [self populateExchangeView:TRUE];
                    }
                }
                else {
                    [self populateExchangeView:TRUE];
                }
                
                [exchangeDetailsTable reloadData];
            }
            else if ( tempExchangeDetails.count == 0){
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = NO;
                returnScrollView.hidden = YES;
                pastBillField.hidden = YES;
                quickPayBtn.hidden = YES;
                barCodeImage.hidden = YES;
                returnView.hidden = YES;
                [exchangeDetailsTable reloadData];
                
                //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"No Exchanged Items" delegate:self cancelButtonTitle:@"ok" otherButtonTitles:nil, nil];
                //                [alert show];
                
                if (!isOfflineService) {
                    
                    if (accessStatus == kReadVal) {
                        [self populateExchangeView:FALSE];
                    }
                    else {
                        [self populateExchangeView:TRUE];
                    }
                }
                else {
                    [self populateExchangeView:TRUE];
                }
                
                //                self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
                //                self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil] ;
                //
                //
                //                ExchangeItem *bh = [[ExchangeItem alloc] initWithBillType:value exchangingItems:tempArrayItems totalBill:totalBillValue.text billStatus:pastBillStatus1] ;
                //                [self.navigationController pushViewController:bh animated:YES];
            }
            else{
                billingScrollView.hidden = YES;
                
                //changed by Srinivasulu on 21/12/2017....
                
                paymentScrollView.hidden = YES;
                perviousPaymentTransantionView.hidden = YES;
                
                //upto here on 21/12/2017....
                
                exchangeScrollView.hidden = NO;
                returnScrollView.hidden = YES;
                returnView.hidden = YES;
                
                // [returnDetailsTable reloadData];
                [exchangeDetailsTable reloadData];
            }
            //            }
            //            else {
            //                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"This functionality is available with  internet connection only" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //                [alert show];
            //            }
            
            
            
            break;
        }
            //added by Srinivasulu on  25/12/2017....
        case 4:{
            
            billingScrollView.hidden = YES;
            paymentScrollView.hidden = YES;
            perviousPaymentTransantionView.hidden = YES;
            exchangeScrollView.hidden = YES;
            returnScrollView.hidden = YES;
            returnView.hidden = YES;
            returnDetailsView.hidden = YES;
            
            pastBillField.hidden = YES;
            quickPayBtn.hidden = YES;
            barCodeImage.hidden = YES;
            billingScrollView.hidden = YES;
            
            exchangeView.hidden = YES;
            
            exchangeScrollView.hidden = YES;
            salesIdTable.hidden = YES;
            returnScrollView.hidden = YES;
            returnView.hidden = YES;
            submitButton.hidden = YES;
            exchangeView.hidden = YES;
            segmentedControl.enabled = YES;
            pastBillField.hidden = YES;
            quickPayBtn.hidden = YES;
            barCodeImage.hidden = YES;
            billingScrollView.hidden = YES;
            
            exchDetailsView.hidden = YES;
            
            [self showExchangeTransfersiew];
            exchangeTransfers.hidden = NO;
            
        }
            
            //upto here on  25/12/2017....
            
            
    }
    
    
    if (isBillSummery) {
        
        [segmentedControl setEnabled:false];
        [mainSegmentedControl setEnabled:false forSegmentAtIndex:2];
        [mainSegmentedControl setEnabled:false forSegmentAtIndex:3];
        pastBillField.userInteractionEnabled = false;
        BillField.hidden = true;
    }
}

// Commented by roja on 17/10/2019.. // reason cardPaymentCall method contains SOAP Service call .. so taken new method with same(cardPaymentCall) method name which contains REST service call....
// At the time of converting SOAP call's to REST
//-(void)cardPaymentCall{
//
//
//    if((payTxt2.text).floatValue < minPayAmt) {
//
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:NSLocalizedString(@"min_payment_not_reached", nil), minPayAmt] message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil, nil];
//        [alert show];
//        return;
//    }
//    else if ((payTxt2.text).floatValue==0) {
//
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Paid amount cannot be zero" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//        [alert show];
//        return;
//    }
//
//
//    if ((payTxt2.text).floatValue >= (payTxt1.text).floatValue) {
//        finalBillDue1 = @"0.0";
//    }
//    else {
//        finalBillDue1 = [NSString stringWithFormat:@"%.2f",((payTxt1.text).floatValue - (payTxt2.text).floatValue)];
//    }
//
//
//    NSString *phoneValue = [phnotext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
//    //    NSString *nameValue = [nametext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
//    if ([cardPaymentSelection isEqualToString:@"Mobile POS"]) {
//        if (phoneValue.length == 0) {
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Phone Number is mandatory" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//            [alert show];
//        }
//        else  if ([paymentTypeVal.text isEqualToString:@"Door Delivery"]) {
//
//            if ((streettext.text).length == 0) {
//
//                [self setSiblings:paymentView enabled:FALSE];
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter the street" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [alert show];
//            }
//            else if ((locltytext.text).length == 0) {
//
//                [self setSiblings:paymentView enabled:FALSE];
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter localty." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [alert show];
//            }
//            else if ((citytext.text).length == 0) {
//
//                [self setSiblings:paymentView enabled:FALSE];
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter city." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [alert show];
//            }
//            else if ((pintext.text).length == 0){
//
//                [self setSiblings:paymentView enabled:FALSE];
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter pin." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [alert show];
//            }
//
//            else {
//
//                CustomerServiceSoapBinding *custBindng =  [CustomerServiceSvc CustomerServiceSoapBinding] ;
//                CustomerServiceSvc_createCustomer *aParameters = [[CustomerServiceSvc_createCustomer alloc] init];
//
//
//                NSArray *loyaltyKeys = @[@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city",@"requestHeader"];
//
//                NSArray *loyaltyObjects = @[phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text,[RequestHeader getRequestHeader]];
//                NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                NSError * err_;
//                NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
//                NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//                aParameters.customerDetails = loyaltyString;
//
//
//                CustomerServiceSoapBindingResponse *response = [custBindng createCustomerUsingParameters:(CustomerServiceSvc_createCustomer *)aParameters];
//                NSArray *responseBodyParts = response.bodyParts;
//                for (id bodyPart in responseBodyParts) {
//                    if ([bodyPart isKindOfClass:[CustomerServiceSvc_createCustomerResponse class]]) {
//                        CustomerServiceSvc_createCustomerResponse *body = (CustomerServiceSvc_createCustomerResponse *)bodyPart;
//                        // printf("\nresponse=%d",[body.createCustomerReturn UTF8String]);
//                        NSError *e;
//
//                        NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
//                                                                              options: NSJSONReadingMutableContainers
//                                                                                error: &e];
//                        BOOL result = [JSON1[@"status"] boolValue];
//                        if (result) {
//
//                            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
//                                                                                         queue:dispatch_get_main_queue()
//                                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
//                        }
//                        else {
//                            //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Customer Already Registered." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                            //                    [alert show];
//                            //                    [alert release];
//                            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
//                                                                                         queue:dispatch_get_main_queue()
//                                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
//                        }
//                        [HUD setHidden:YES];
//                    }
//                }
//
//            }
//        }
//        else{
//            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
//                                                                         queue:dispatch_get_main_queue()
//                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
//        }
//    }
//
//    else if ([cardPaymentSelection isEqualToString:@"POS"]){
//        if ((cardInfoTxt.text).length==0) {
//
//
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please provide card info" message:@"" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//            [alert show];
//
//        }
//        else {
//            finalBillDue1 = [NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue];
//            if (finalBillDue1<0) {
//
//                finalBillDue1 = @"0.00";
//            }
//            [self continuePay1];
//        }
//    }
//}


//cardPaymentCall method changed by roja on 17/10/2019.. // reason removed SOAP service call related code and  added REST service call code...
// At the time of converting SOAP call's to REST
-(void)cardPaymentCall{
    
    if((payTxt2.text).floatValue < minPayAmt) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:NSLocalizedString(@"min_payment_not_reached", nil), minPayAmt] message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil, nil];
        [alert show];
        return;
    }
    else if ((payTxt2.text).floatValue==0) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Paid amount cannot be zero" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        return;
    }
    
    
    if ((payTxt2.text).floatValue >= (payTxt1.text).floatValue) {
        finalBillDue1 = @"0.0";
    }
    else {
        finalBillDue1 = [NSString stringWithFormat:@"%.2f",((payTxt1.text).floatValue - (payTxt2.text).floatValue)];
    }
    
    
    NSString *phoneValue = [phnotext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    //    NSString *nameValue = [nametext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    if ([cardPaymentSelection isEqualToString:@"Mobile POS"]) {
        
        if (phoneValue.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Phone Number is mandatory" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else  if ([paymentTypeVal.text isEqualToString:@"Door Delivery"]) {
            
            if ((streettext.text).length == 0) {
                
                [self setSiblings:paymentView enabled:FALSE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter the street" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if ((locltytext.text).length == 0) {
                
                [self setSiblings:paymentView enabled:FALSE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter localty." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if ((citytext.text).length == 0) {
                
                [self setSiblings:paymentView enabled:FALSE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter city." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if ((pintext.text).length == 0){
                
                [self setSiblings:paymentView enabled:FALSE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter pin." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            
            else {
                
                [HUD setHidden:NO];

                NSArray *loyaltyKeys = @[@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city",@"requestHeader"];
                
                NSArray *loyaltyObjects = @[phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text,[RequestHeader getRequestHeader]];
                NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                
                NSError * err_;
                NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
                NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                
                WebServiceController * services =  [[WebServiceController alloc] init];
                services.customerServiceDelegate = self;
                [services createCustomer:loyaltyString];
                
            }
        }
        else{
            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
                                                                         queue:dispatch_get_main_queue()
                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
        }
    }
    
    else if ([cardPaymentSelection isEqualToString:@"POS"]){
        if ((cardInfoTxt.text).length==0) {
            
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please provide card info" message:@"" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
        }
        else {
            finalBillDue1 = [NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue];
            if (finalBillDue1<0) {
                
                finalBillDue1 = @"0.00";
            }
            [self continuePay1];
        }
    }
}

// added by Roja on 17/10/2019….
- (void)createCustomerSuccessResponse:(NSDictionary *)sucessDictionary{
    
    @try {
        
        BOOL result = [sucessDictionary[@"status"] boolValue];
        
        if (result) {
            
            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
                                                                         queue:dispatch_get_main_queue()
                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
        }
        else {
            //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Customer Already Registered." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            //                    [alert show];
            //                    [alert release];
            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
                                                                         queue:dispatch_get_main_queue()
                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

// added by Roja on 17/10/2019….
- (void)createCustomerErrorResponse:(NSString *)errorResponse{
    
    @try {
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}

-(IBAction)cardRadioAction:(id)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    if ((UIButton *)sender == cardradioBtn1 ) {
        
        // if (!menuStatus) {
        //            customerEmail.text = @"";
        //            customerPhNo.text = @"";
        //        }
        cardPaymentSelection = @"POS";
        [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
        [payBtn setTitle:@"Continue" forState:UIControlStateNormal];
        cardradioBtn1.tag = 1;
        [cardradioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        [cardradioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
    }
    else{
        cardPaymentSelection = @"Mobile POS";
        [payBtn addTarget:self action:@selector(cardPaymentCall) forControlEvents:UIControlEventTouchUpInside];
        cardradioBtn1.tag = 0;
        [cardradioBtn1 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        [cardradioBtn2 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        
        //Play Audio for button touch....
    }
}


-(void)onResponseMswipeControllerResults:(id)obj {
    
    [HUD setHidden:YES];
    
    if ([obj isKindOfClass:[MerchantSettings class]]) {
        
        MerchantSettings *result = (MerchantSettings *)obj;
        
        NSLog(@"%hhd%@%@",result.status,result.statusMsg,result.mSessionToken);
        
        settings = result;
        
        self.mSettings = settings ;
        
        if (result.status) {
            
            //            MSwipeViewController *viewcontroller = [[MSwipeViewController alloc]init];
            //            viewcontroller.mSettings = settings;
            //            viewcontroller.total = totalBillValue.text;
            //            viewcontroller.phone = phoneTxt.text;
            //            viewcontroller.email = emailTxt.text;
            //
            //            UINavigationController *nc = [[UINavigationController alloc] initWithRootViewController:viewcontroller];
            //            nc.navigationBar.tintColor = [UIColor colorWithRed:100.0/255.0 green:100.0/255.0 blue:100.0/255.0 alpha:1.0];
            //           // [self presentViewController:nc animated:YES completion:nil];
            //            [self.navigationController pushViewController:viewcontroller animated:YES];
            
            cardPayment = [[UIView alloc] init];
            cardPayment.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
            cardPayment.backgroundColor = [UIColor blackColor] ;
            
            mcardSaleData = [[CardSaleData alloc] init];
            
            
            swiperMsgs = [[NSMutableArray alloc] init];
            
            amountView = [[UIView alloc]init];
            
            
            UIView *view1 = [[UIView alloc]init];
            view1.layer.borderColor = [UIColor whiteColor].CGColor;
            view1.layer.borderWidth = 1.0f;
            view1.layer.cornerRadius = 10.0f;
            
            
            sale = [[UILabel alloc] init];
            sale.text = @"Sale";
            sale.font = [UIFont boldSystemFontOfSize:25.0];
            sale.textColor=[UIColor whiteColor];
            
            
            host1 = [[UILabel alloc] init];
            host1.textColor = [UIColor whiteColor];
            host1.font = [UIFont systemFontOfSize:22.0];
            host1.text  =@"    host offline";
            host1.textColor = [UIColor whiteColor];
            host1.layer.borderColor = [UIColor whiteColor].CGColor;
            host1.layer.borderWidth = 2.0f;
            
            inr = [[UILabel alloc] init];
            inr.textColor = [UIColor lightGrayColor];
            inr.font = [UIFont systemFontOfSize:18];
            inr.text  =@"inr";
            
            UILabel  *l1 = [[UILabel alloc] init];
            l1.font = [UIFont systemFontOfSize:18];
            l1.textColor = [UIColor grayColor];
            l1.text  =@"=";
            
            UILabel  *l2 = [[UILabel alloc] init];
            l2.font = [UIFont systemFontOfSize:18];
            l2.textColor = [UIColor grayColor];
            l2.text  =@"+91";
            
            amt = [[UILabel alloc] init];
            amt.textColor = [UIColor whiteColor];
            amt.font = [UIFont systemFontOfSize:22.0];
            amt.backgroundColor = [UIColor clearColor];
            amt.text = payTxt2.text;
            
            totalAmt1 = [[UILabel alloc]init];
            totalAmt1.font = [UIFont boldSystemFontOfSize:24.0];
            totalAmt1.textColor = [UIColor whiteColor];
            totalAmt1.backgroundColor = [UIColor clearColor];
            totalAmt1.text = payTxt2.text;
            
            
            phoneNo = [[UILabel alloc]init];
            phoneNo.font = [UIFont fontWithName:@"HelveticaNeueLTStd-LtCn" size:24.0];
            phoneNo.textColor = [UIColor whiteColor];
            phoneNo.text = self.phone;
            
            
            nextBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
            nextBtn.layer.borderColor = [UIColor whiteColor].CGColor;
            nextBtn.layer.cornerRadius = 10.0f;
            nextBtn.layer.borderWidth = 1.0f;
            [nextBtn setTitle:@"Next" forState:UIControlStateNormal];
            [nextBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            (nextBtn.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
            [nextBtn addTarget:self action:@selector(nextAction:) forControlEvents:UIControlEventTouchUpInside];
            
            
            cancelBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
            cancelBtn.layer.borderColor = [UIColor whiteColor].CGColor;
            cancelBtn.layer.cornerRadius = 10.0f;
            cancelBtn.layer.borderWidth = 1.0f;
            [cancelBtn setTitle:@"Cancel" forState:UIControlStateNormal];
            [cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            (cancelBtn.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
            [cancelBtn addTarget:self action:@selector(nextAction:) forControlEvents:UIControlEventTouchUpInside];
            
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                // headerView.frame = CGRectMake(10, 0, 200, 200);
                sale.frame = CGRectMake(25, 10, 200, 50);
                //  host1.frame = CGRectMake(self.view.frame.size.width-250, 20, 150, 30);
                inr.frame = CGRectMake(15, 90, 50, 30);
                amt.frame = CGRectMake(self.view.frame.size.width-200, 90, 200, 30);
                l1.frame = CGRectMake(15, 170, 60, 30);
                totalAmt1.frame = CGRectMake(self.view.frame.size.width-200, 170, 200, 30);
                l2.frame = CGRectMake(15, 230, 60, 30);
                phoneNo.frame = CGRectMake(self.view.frame.size.width-200, 230, 400, 30);
                nextBtn.frame = CGRectMake(120, 450, 210, 50);
                cancelBtn.frame = CGRectMake(400,450 , 210, 50);
                view1.frame = CGRectMake(0, 80,self.view.frame.size.width-50 , 300);
                amountView.frame = CGRectMake(10, 100, self.view.frame.size.width-50, 600);
                
                
            }
            
            [amountView addSubview:sale];
            // [amountView addSubview:host1];
            [view1 addSubview:inr];
            [view1 addSubview:amt];
            [view1 addSubview:l1];
            [view1 addSubview:totalAmt1];
            [view1 addSubview:l2];
            [view1 addSubview:phoneNo];
            [amountView addSubview:view1];
            [amountView addSubview:nextBtn];
            [amountView addSubview:cancelBtn];
            [cardPayment addSubview:amountView];
            self.lastConnectedBTv4DeviceName = (NSString *)[self getNSUserDefaultsObject:kLastConnectedBTv4DeviceName];
            
            [WisePadController sharedController].delegate = self;
            [self.view addSubview:cardPayment];
            
        }
        
        else {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:result.statusMsg delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
        }
    }
    
    else {
        
        
        
        [HUD setHidden:YES];
        
        if(processMode == HTTP_PROCESS_CARDSALE) // for the card sale
        {
            CardSaleResults *cardSaleResults = (CardSaleResults*) obj;
            mcardSaleResults = cardSaleResults;
            mcardSaleData.mDate = mcardSaleResults.mDate;
            mcardSaleData.mSwitchCardType = mcardSaleResults.mSwitchCardType;
            mcardSaleData.mTotAmount = payTxt2.text;
            mcardSaleData.mISEMVTrx = isEmvSwiper;
            mcardSaleData.mStanID = mcardSaleResults.mStanID;
            mcardSaleData.mAuthCode = mcardSaleResults.mAuthCode;
            mcardSaleData.mRRNo = mcardSaleResults.mRRNo;
            
            if(isEmvSwiper)
            {
                mcardSaleData.mEmvCardExpdate = mcardSaleResults.mEmvCardExpdate;
                
            }
            
            
            mcardSaleResults = cardSaleResults;
            
            
            
            //if the transaction failed
            if(!cardSaleResults.status)
            {
                
                //[mBtnSubmitCardDetails setEnabled :(true)] ;
                if(isEmvSwiper)
                    [[WisePadController sharedController] sendOnlineProcessResult:@""];
                
                processMode = ALERT_TRXCLOSE;
                
                //            [Constants showDialog : CARDSALE_DIALOG_MSG  msgTxt : cardSaleResults.statusMsg firstBtn: @"Ok" secondBtn : nil delegate: self];
                
                
            }
            else {
                
                if(!isEmvSwiper)
                {
                    //[mBtnSubmitCardDetails setEnabled :(true)] ;
                    
                    processMode = ALERT_TRXCLOSE;
                    
                    status_mswipe = mcardSaleResults.statusMsg;
                    
                    [cardDetails removeFromSuperview];
                    [self signatureView];
                    
                    
                    
                }else{
                    
                    mCardSale_TRXState = CardSale_TRXState_ApprovedOnline;
                    
                    NSString *tlvProcessResultData =  mcardSaleResults.mIssuerAuthCode;
                    
#ifdef IS_DEBUGGING_ON
                    NSString *temp_log_msg = [NSString stringWithFormat:@"The issuer Authenticate code  sendOnlineProcessResult data %@",tlvProcessResultData ] ;
                    Logs(log_tab, temp_log_msg,YES, YES);
#endif
                    
                    [[WisePadController sharedController] sendOnlineProcessResult :tlvProcessResultData];
                    
                    self.mstrEMVProcessTaskType = @"onlinesubmit";
                    
                    
                    // mEMVProcessTask = [NSTimer scheduledTimerWithTimeInterval:10.0 target:self selector:@selector(EMVProcessTask) userInfo:nil repeats:NO];
                    
                    // self.mEMVProcessProgressActivity = nil;
                    // MSProgressUIView *tempProgressView =  [[MSProgressUIView alloc]
                    // initWithProgText:@"please wait..." title:CARDSALE_DIALOG_MSG];
                    // self.mEMVProcessProgressActivity = tempProgressView;
                    //[tempProgressView release];
                    //  [appdelegate.window addSubview: mEMVProcessProgressActivity];
                    
                    [cardDetails removeFromSuperview];
                    
                    [self signatureView];
                    
                    
                }
                
                
            }
            
            
        }
        else if(processMode == HTTP_PROCESS_AUTOVOID){
            
            NSDictionary* arrReceipt = (NSDictionary*) obj;
            
            processMode = ALERT_TRXCLOSE;
            
            UIAlertView *alert   = [[UIAlertView alloc] initWithTitle:@"Sale" message:arrReceipt[@"statusMsg"] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
        }
        else{
            
            NSLog(@"signature");
            
            NSDictionary* arrReceipt = (NSDictionary*) obj;
            
            signature  = [[UIAlertView alloc] initWithTitle:@"Sale" message:arrReceipt[@"statusMsg"] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [signature show];
        }
        
        
    }
    
    
    
    //
    //    if (result.status) {
    //
    //        NSLog(@"%@",totalBillValue.text);
    //
    //        [[MswipeWisepadController sharedInstance]processCardSale_EMV:result.mMerchantId sessionToken:result.mSessionToken receipt:@"" phoneNo:@"9985341234" email:@"technolabs@gmail.com" notes:@"" amount:totalBillValue.text responsehadnler:self];
    //
    //    }
    
}

-(void)nextAction:(id)sender {
    
    if (sender == (UIButton *)nextBtn) {
        
        [amountView removeFromSuperview];
        
        //    UIBarButtonItem *temp_btnNavLeft = [[UIBarButtonItem alloc] initWithTitle:
        //                                        @"Back" style:UIBarButtonItemStyleBordered target:
        //                                        self action:@selector(onBackKeyAction:)];
        //
        //    [temp_btnNavLeft setTitleTextAttributes: [NSDictionary dictionaryWithObjectsAndKeys:[UIFont systemFontOfSize:22.0], NSFontAttributeName,
        //                                              [UIColor whiteColor], NSForegroundColorAttributeName,nil] forState: UIControlStateNormal];
        //    [self.navigationItem setLeftBarButtonItem:temp_btnNavLeft];
        
        
        transactionView = [[UIView alloc] init];
        
        UILabel *label1_ = [[UILabel alloc] init];
        label1_.textColor = [UIColor whiteColor];
        label1_.text  = [NSString stringWithFormat:@"%@%@",@"inr  ",payTxt2.text];
        label1_.font = [UIFont boldSystemFontOfSize:22.0];
        
        UILabel *label2_ = [[UILabel alloc] init];
        label2_.textColor = [UIColor lightGrayColor];
        label2_.text  = @"transaction total";
        
        
        info = [[UITextView alloc]init];
        info.backgroundColor = [UIColor clearColor];
        info.layer.cornerRadius = 10.0f;
        info.layer.borderColor = [UIColor whiteColor].CGColor;
        info.layer.borderWidth = 1.0f;
        info.font = [UIFont systemFontOfSize:20.0];
        info.textAlignment = NSTextAlignmentCenter;
        
        startBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
        startBtn.layer.borderColor = [UIColor grayColor].CGColor;
        startBtn.layer.cornerRadius = 10.0f;
        startBtn.layer.borderWidth = 1.0f;
        [startBtn setTitle:@"Start" forState:UIControlStateNormal];
        [startBtn setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];
        (startBtn.titleLabel).font = [UIFont fontWithName:@"HelveticaNeueLTStd-LtCn" size:22.0];
        [startBtn addTarget:self action:@selector(swipeCard:) forControlEvents:UIControlEventTouchUpInside];
        [startBtn setEnabled:NO];
        
        UILabel *label3_ = [[UILabel alloc] init];
        label3_.textColor = [UIColor lightGrayColor];
        label3_.font = [UIFont systemFontOfSize:22.0];
        label3_.text  = @"device connected";
        
        UILabel *label4_ = [[UILabel alloc] init];
        label4_.textColor = [UIColor lightGrayColor];
        label4_.font = [UIFont systemFontOfSize:22.0];
        label4_.text  = @"press start";
        
        UILabel *label5_ = [[UILabel alloc] init];
        label5_.textColor = [UIColor lightGrayColor];
        label5_.font = [UIFont systemFontOfSize:22.0];
        label5_.text  = @"initializing the swiper";
        
        UILabel *label6 = [[UILabel alloc] init];
        label6.textColor = [UIColor lightGrayColor];
        label6.font = [UIFont systemFontOfSize:22.0];
        label6.text  = @"please swipe/insert chip card";
        
        [swiperMsgs addObject:label3_];
        [swiperMsgs addObject:label4_];
        [swiperMsgs addObject:label5_];
        [swiperMsgs addObject:label6];
        
        cardDetails = [[UIView alloc] init];
        
        UILabel *details = [[UILabel alloc] init];
        details.textColor = [UIColor whiteColor];
        details.font = [UIFont systemFontOfSize:26.0];
        details.text = @"Card Details";
        
        card_holder = [[UILabel alloc] init];
        card_holder.textColor = [UIColor whiteColor];
        card_holder.font = [UIFont systemFontOfSize:24.0];
        
        amount1 = [[UILabel alloc] init];
        amount1.textColor = [UIColor whiteColor];
        amount1.font = [UIFont systemFontOfSize:24.0];
        amount1.text = payTxt2.text;
        
        expiry_date = [[UILabel alloc] init];
        expiry_date.textColor = [UIColor whiteColor];
        expiry_date.font = [UIFont systemFontOfSize:24.0];
        
        
        last_digits = [[UILabel alloc] init];
        last_digits.textColor = [UIColor whiteColor];
        last_digits.font = [UIFont systemFontOfSize:24.0];
        
        continue_transaction = [UIButton buttonWithType:UIButtonTypeRoundedRect];
        continue_transaction.layer.borderColor = [UIColor whiteColor].CGColor;
        continue_transaction.layer.cornerRadius = 10.0f;
        continue_transaction.layer.borderWidth = 1.0f;
        [continue_transaction setTitle:@"Proceed" forState:UIControlStateNormal];
        [continue_transaction setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        (continue_transaction.titleLabel).font = [UIFont fontWithName:@"HelveticaNeueLTStd-LtCn" size:24.0];
        [continue_transaction addTarget:self action:@selector(proceed_transaction:) forControlEvents:UIControlEventTouchUpInside];
        [continue_transaction setEnabled:YES];
        
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            transactionView.frame = CGRectMake(10, 100, self.view.frame.size.width, self.view.frame.size.height);
            cardDetails.frame = CGRectMake(10, 10, self.view.frame.size.width, self.view.frame.size.height);
            sale.frame = CGRectMake(10, 10, 50, 50);
            host1.frame = CGRectMake(self.view.frame.size.width-250, 10, 150, 30);
            label1_.frame = CGRectMake(10, 100, 400, 50);
            label2_.frame = CGRectMake(10, 130, 500, 50);
            info.frame = CGRectMake(50, 230, 580, 90);
            startBtn.frame = CGRectMake(250, 390, 220, 50);
            label3_.frame = CGRectMake(10, 470, 800, 50);
            label4_.frame = CGRectMake(10, 520, 800, 50);
            label5_.frame = CGRectMake(10, 590, 800, 50);
            label6.frame = CGRectMake(10, 660, 800, 50);
            
            details.frame = CGRectMake(self.view.frame.size.width/2, 5, 200, 60);
            card_holder.frame = CGRectMake(40,10 ,600, 300);
            amount1.frame = CGRectMake(40, 70, 600, 300);
            expiry_date.frame = CGRectMake(40, 220, 400, 150);
            last_digits.frame = CGRectMake(40, 230, 800, 300);
            continue_transaction.frame = CGRectMake(250, 550, 220, 60);
            
        }
        [cardDetails addSubview:details];
        [cardDetails addSubview:card_holder];
        [cardDetails addSubview:expiry_date];
        [cardDetails addSubview:amount1];
        [cardDetails addSubview:last_digits];
        [cardDetails addSubview:continue_transaction];
        
        [transactionView addSubview:sale];
        [transactionView addSubview:host1];
        [transactionView addSubview:label1_];
        [transactionView addSubview:label2_];
        [transactionView addSubview:info];
        [transactionView addSubview:startBtn];
        [transactionView addSubview:label3_];
        [transactionView addSubview:label4_];
        [transactionView addSubview:label5_];
        [transactionView addSubview:label6];
        [cardPayment addSubview:transactionView];
        
        
        [WisePadController sharedController].delegate = self;
        
        [self start];
    }
    else {
        
        [cardPayment removeFromSuperview];
        
    }
    
}

-(void)start {
    
    if (![[WisePadController sharedController] isDevicePresent])
    {
#ifdef IS_DEBUGGING_ON
        Logs(log_tab ,@"Device not present connecting to device in the back ground",true, true);
#endif
        
        //[NSThread detachNewThreadSelector:@selector(checkConnections) toTarget:self withObject:nil];
        [self checkConnections];
    }
    else{
        
        
        [self setWisePadStateSequnce :@"device connected" step:0];
        [self setWisePadResultsInfo:@"press start" localizedmsg:nil];
        
        //[mBtnSwipe setTitle:@"Start" forState:UIControlStateNormal];
        //        [mBtnSwipe setHidden:NO];
        //        [mBtnConnect setHidden:YES];
        
        
    }
    
}

-(BOOL)checkConnections
{
    //the ios pairing works differenlty, the paired list is not available, and the scanning
    //of the pairing is done internally in the sdk and are notify through the funcation.
    //onWisePadBTv4DeviceListRefresh
    
    NSMutableArray *deviceNameArray = [NSMutableArray array];
    [deviceNameArray addObject:@"WisePad"];
    [deviceNameArray addObject:@"WP"];
    [[WisePadController sharedController] scanBTv4:deviceNameArray];
    [self setWisePadResultsInfo:@"scanning..." localizedmsg:nil];
    mConnesctionState = WisePadConnectionState_scanning;
    NSString* txt =@"scanning devices";
    [self setWisePadStateSequnce :txt step:0];
    
    // [(UILabel*)[viewDeviceListPicker viewWithTag:(5)] setText:@"searching for devices..."];
    
    return YES;
}
-(void) showCreditDetailsScreen
{
    mCardSale_TRXState = CardSale_TRXState_Completed;
    
    NSString *card4digits=@"";
    
    int ilen1=(int)(mcardSaleData.mCreditCardNo).length;
    
    if(ilen1>=4)
        
        card4digits=[mcardSaleData.mCreditCardNo substringWithRange:NSMakeRange(ilen1-4, 4)];
    else
        card4digits=mcardSaleData.mCreditCardNo;
    
    card4digits = [self removeAlpaChars:card4digits];
    
    if(!isEmvSwiper)
    {
        
        if((mCardResults & MCRCardResults_AMEX_CARD) == MCRCardResults_AMEX_CARD)
        {
            // [Constants showAlertWithInputBox:self];
            
            
        }else{
            
            card_holder.text = [NSString stringWithFormat:@"%@",mcardSaleData.mCardHolderName];
            last_digits.text = [NSString stringWithFormat:@"**** **** **** %@",card4digits];
            expiry_date.text= [NSString stringWithFormat:@"%@/%@", [mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(0,2)],[mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(2,2)]];
            
            [transactionView removeFromSuperview];
            
            [cardPayment addSubview:cardDetails];
        }
        
    }else{
        
        card_holder.text = [NSString stringWithFormat:@"%@",mcardSaleData.mCardHolderName];
        last_digits.text = [NSString stringWithFormat:@"**** **** **** %@",card4digits];
        if ([mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(0,2)] != nil && [mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(2,2)] != nil) {
            expiry_date.text= [NSString stringWithFormat:@"%@/%@", [mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(0,2)],[mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(2,2)]];
            
        }
        else {
            expiry_date.text= @"xx/xx";
            
        }
        
        [transactionView removeFromSuperview];
        
        [cardPayment addSubview:cardDetails];
        
    }
    
}


-(NSString*) removeAlpaChars:(NSString*) st
{
    NSMutableString* stdigits = [[NSMutableString alloc] initWithCapacity:0];
    for(int ictr=0;ictr<st.length; ictr++)
    {
        
        if([st characterAtIndex:ictr] >= 48 &&[st characterAtIndex:ictr]<= 57)
        {
            [stdigits appendString:[st substringWithRange: NSMakeRange(ictr, 1)]];
            
        }
        
        
    }
    
    NSString* ststring = [NSString stringWithString: stdigits];
    //[stdigits release];
    return ststring;
    
}
-(void)onWisePadBTv4DeviceListRefresh:(NSArray *)foundDevices   {
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadBTv4DeviceListRefresh",YES, YES);
#endif
    
    
    if (foundDevices == nil || foundDevices.count==0)
    {
#ifdef IS_DEBUGGING_ON
        Logs(log_tab, @"onWisePadBTv4DeviceListRefresh no devices found",YES, YES);
#endif
        [self onWisePadBTv4ScanTimeout];
        return;
    }
#ifdef IS_DEBUGGING_ON
    NSString* temp_msg = [NSString stringWithFormat:@"onWisePadBTv4DeviceListRefresh devices found %@",foundDevices];
    Logs(log_tab, temp_msg,YES, YES);
#endif
    
    
    
    //this will connect to the last know device, as this function runs in parallel so
    //this could send us the other devcies which isn't the last know devcies,
    //and when the list is shown for selecting the devices on choosing the connect button
    //and if the devices is selected which is not the last connected device,
    //then the scanning stop since the connection process has been initiated, and at this time if this fucnation gets called then do not
    // try to connect since the connection process to the other devcie has already started.
    
    
    //    if(mConnesctionState != WisePadConnectionState_connecting && [[WisePadController sharedController] isDevicePresent] == NO )
    //    {
    //[[WisePadController sharedController] connectBTv4:(CBPeripheral *)[foundDevices objectAtIndex:0]];
    //NSString *lastConnectedBTv4DeviceName = (NSString *)[self getNSUserDefaultsObject:kLastConnectedBTv4DeviceName];
    
    
    NSString *foundDeviceName = @"";
    
    //if (lastConnectedBTv4DeviceName != nil && [lastConnectedBTv4DeviceName length] > 0){
    for (int i=0 ; i<foundDevices.count; i++) {
        foundDeviceName = ((CBPeripheral *)foundDevices[i]).name;
        
        lastConnectedBTv4DeviceName = foundDeviceName;
        
        if ([foundDeviceName isEqualToString:lastConnectedBTv4DeviceName]){
            
            
            [self setWisePadResultsInfo:@"device detected, connecting to the last connected wisepad." localizedmsg:nil];
            
            
            //if the viewDeviceListPicker is shown then removed it
            // [viewDeviceListPicker removeFromSuperview];
            
            mConnesctionState = WisePadConnectionState_connecting;
            NSString* txt =@"device connecting";
            [self setWisePadStateSequnce :txt step:0];
            
            
            [[WisePadController sharedController] connectBTv4:(CBPeripheral *)foundDevices[i] connectTimeout:60];
            break;
        }
    }
    //        }
    //  else{
    //            //[focusUITextField resignFirstResponder];
    //           // self.mPickDeviceListDataSourceArray =foundDevices;
    //            UIPickerView *pickApplication = (UIPickerView*)[viewDeviceListPicker viewWithTag:100];
    //            [pickApplication reloadAllComponents];
    //
    //            CGRect currentScreen = [[UIScreen mainScreen] bounds];
    //            viewDeviceListPicker.frame= currentScreen;
    //            UIView *viewData = [viewDeviceListPicker viewWithTag:1002];
    //            viewData.frame = CGRectMake(viewData.frame.origin.x, viewDeviceListPicker.frame.size.height/2 -  viewData.frame.size.height /2, viewData.frame.size.width,  viewData.frame.size.height);
    //            [appdelegate.window addSubview: viewDeviceListPicker];
    
    
    //}
    //    }
    
}
//once the devcie is connect save the devcie info in the user default so this
//can be used to search and fileter among the searched devcies and directly could be
//intiated the connection process
- (void)onWisePadBTv4Connected
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadBTv4Connected",YES, YES);
#endif
    
    
    [self setNSUserDefaultsObject:[NSString stringWithString:self.lastConnectedBTv4DeviceName] key:kLastConnectedBTv4DeviceName];
    
    // [self dismissDialog];
    
    
    [startBtn setEnabled: YES];
    [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    
    
    mCardSale_TRXState = CardSale_TRXState_Completed;
    mCardSale_TRXType = CardSale_TRXType_Online;
    
    //[mBtnSubmitCardDetails setEnabled :(true)];
    
    [self setWisePadResultsInfo:@"device connected." localizedmsg:nil];
    
    if([self.mstrEMVProcessTaskType isEqualToString:@"backbutton"] || [self.mstrEMVProcessTaskType isEqualToString:@"onlinesubmit"]
       || [self.mstrEMVProcessTaskType isEqualToString:@"closecardsale"])
    {
        //        if (mEMVProcessTask != nil)
        //        {
        //            [self EMVProcessTask];
        //        }
        
    }
    
    ((UILabel*) swiperMsgs[0]).text = @"device connected";
    //NSString* txt =@"Device connected";
    NSString* txt =((UILabel*) swiperMsgs[1]).text;
    [self setWisePadStateSequnce :txt step:1];
    
    host1.text = @"host online";
    
    // we delay the connected process to wait for about a sec so that internally the sdk prepares it self for the communications,
    // and then show up the start command and then
    mConnesctionState = WisePadConnectionState_connected;
    [startBtn setHidden:NO];
    [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    // [mBtnConnect setHidden:YES];
}

#pragma mark - NSUserDefaults
- (void)setNSUserDefaultsObject:(NSObject *)object key:(NSString *)key{
    //DebugLog(@"key: %@", key);
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setObject:object forKey:key];
    [defaults synchronize];
}

- (NSObject *)getNSUserDefaultsObject:(NSString *)key{
    //DebugLog(@"key: %@", key);
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    return [defaults objectForKey:key];
}

- (void) swipeCard : (id) sender
{
    
    if(mConnesctionState != WisePadConnectionState_connecting)
    {
        if (![[WisePadController sharedController] isDevicePresent])
        {
            
            processMode = DEVICE_LIST_DISPLAY;
            
            UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"wisePad not connected, please make sure the WisePad is switched on." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
            
        }
        else{
            
            NSString* txt =((UILabel*) swiperMsgs[2]).text;
            [self setWisePadStateSequnce :txt step:2];
            [self setWisePadResultsInfo:@"" localizedmsg:nil];
            
            mCardResults = MCRCardResults_SWIPERESULTSOK;
            mCardSale_TRXState = CardSale_TRXState_Processing;
            mCardSale_TRXType = CardSale_TRXType_Online;
            
#ifdef IS_DEBUGGING_ON
            Logs(log_tab ,@"********* Swiper IC-Card intialized ******************************************************",true, true);
#endif
            
            
            [startBtn setEnabled :NO];
            [startBtn setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];
            //[mBtnSwipeStop setEnabled :NO];
            
            
            [[WisePadController sharedController] checkCard];
        }
    }
    else{
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"connecting to  Wisepad, if it's taking longer than usual, please restart the WisePad and try re-connecting." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
        
    }
}


-(void)proceed_transaction:(id)sender {
    
    if(!isEmvSwiper)
        
        [self processCardSale_MCR];
    else
        [self processCardSale_EMV];
    
}

- (void)onWisePadReturnReversalData:(NSString *)tlv{
#ifdef IS_DEBUGGING_ON
    NSString* temp_msg = [NSString stringWithFormat:@"onReturnReversalData tlv data %@ %d",tlv,CardSale_TRXState_ApprovedOnline];
    Logs(log_tab, temp_msg,YES, YES);
#endif
    //[self dismissDialog];
    
    
    
    if(mCardSale_TRXState == CardSale_TRXState_ApprovedOnline)
        mCardSale_TRXType = CardSale_TRXType_Reversal;
    
    
}

- (void)onWisePadReturnBatchData:(NSString *)tlv{
#ifdef IS_DEBUGGING_ON
    NSString* temp_msg = [NSString stringWithFormat:@"onReturnBatchData tlv data %@",tlv];
    Logs(log_tab, temp_msg,YES, YES);
#endif
    
    //[self dismissDialog];
    // [mBtnSwipe setEnabled: YES];
    //[mBtnSubmitCardDetails setEnabled :(true)];
    
    NSDictionary* tlvDictionary = [[MswipeWisepadController sharedInstance] processOnReturnBatchData:tlv];
    mcardSaleData.mTSI = tlvDictionary[@"TSI"];
    mcardSaleData.mTVR = tlvDictionary[@"TVR"];
    
}

- (void)onWisePadReturnTransactionResult:(WisePadTransactionResult)result data:(NSDictionary *)data;
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onReturnTransactionResult",YES, YES);
#endif
    
    [[MswipeWisepadController sharedInstance] processOnReturnTransactionResult:result data:data];
    
    
    //if the transaction is approved online and for some reason the card has not sent a success message, and
    //the current screen is the details screen and not this error will not be shown to the user.
    //and this message should not be shown when auto reversal is goining on .
    bool notApproved = true;
    
    switch (result)
    {
        case WisePadTransactionResult_Approved:
            notApproved = false;
            
            [self setWisePadResultsInfo:nil localizedmsg:@"transaction_approved"];
            processMode = ALERT_TRXCLOSE;
            
            [cardDetails removeFromSuperview];
            
            [self signatureView];
            
            
            break;
        case WisePadTransactionResult_Terminated:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_terminated"];
            
            
            break;
        case WisePadTransactionResult_Declined:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_declined"];
            
            break;
        case WisePadTransactionResult_SetAmountCancelOrTimeout:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_cancel"];
            
            break;
        case WisePadTransactionResult_CapkFail:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_capk_fail"];
            
            break;
        case WisePadTransactionResult_NotIcc:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_not_icc"];
            break;
        case WisePadTransactionResult_SelectApplicationFail:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_app_fail"];
            break;
        case WisePadTransactionResult_TdkError:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_device_error"];
            
            break;
        case WisePadTransactionResult_ApplicationBlocked:
            [self setWisePadResultsError:@"application blocked" localizedmsg:nil];
            
            break;
        case WisePadTransactionResult_IccCardRemoved:{
            [self setWisePadResultsError:@"icc card removed" localizedmsg:nil];
            break;
        }
            
            
    }
#ifdef IS_DEBUGGING_ON
    // NSString* temp_msg = [NSString stringWithFormat:@"onReturnTransactionResult %@",int.text];
    Logs(log_tab, temp_msg,YES, YES);
#endif
    if(notApproved && mCardSale_TRXState == CardSale_TRXState_ApprovedOnline && mCardSale_TRXType!=CardSale_TRXType_Reversal)
    {
        processMode = ALERT_TRXCLOSE;
        NSString *temp_msg = [NSString stringWithFormat:@"approved online, card declined transaction reason,%@", info.text];
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:temp_msg delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
    }
    else {
        
        if (notApproved && mCardSale_TRXType==CardSale_TRXType_Reversal)
        {
            
            
            //if mReceiptEnabledForAutoVoid  is set to false at getway then do not do the auto reversal  and then straigh show the signature
            //and the trx status sent by the gateway
            if ([(mcardSaleResults.mReceiptEnabledForAutoVoid).lowercaseString isEqualToString:@("true")]) {
                //this will be called in the onTransaction result since to distinguish between offline decline when the card rejects it, and if the card
                //has been removed (for this the transaction is terminated where as for offline declined it says offline declined),
                // the tag that has to be sent is E1 for offline decline and E2 for fail back
                
                processMode = AUTO_REVERSAL_VOID;
                
                UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"approved online, card declined transaction, press ok for AutoReversal." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            else {
                
                
                processMode = ALERT_TRXCLOSE;
                //                [Constants showApprovedDialog:CARDSALE_DIALOG_MSG
                //                                       msgTxt:mCardSaleResults.statusMsg msgTxt1:mCardSaleData.mAuthCode  msgTxt3:mCardSaleData.mRRNo firstBtn:@"Ok" secondBtn:nil delegate:self dlgType:3];
                
                UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:mcardSaleResults.statusMsg delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            
        }
        
    }
    mCardSale_TRXState = CardSale_TRXState_Completed;
    
    
}

-(void) processCardSale_MCR
{
    processMode = HTTP_PROCESS_CARDSALE;
    @try
    {
        
        
        [[MswipeWisepadController sharedInstance] processCardSale_MCR:self.mSettings.mMerchantId
                                                         sessionToken:self.mSettings.mSessionToken receipt:@""
                                                              phoneNo:[NSString stringWithFormat:@"%@%@",@"+91",phnotext.text]
                                                                email:emailtext.text notes:@"" amount:payTxt2.text
                                                      amexCardPinCode:mcardSaleData.mAmexSecurityCode responsehadnler:self];
        
        [HUD setHidden:NO];
        HUD.labelText = @"processing transaction...";
        [cardDetails addSubview:HUD];
        
    }@catch (NSException *ex) {
        
        //        [Constants showDialog : CARDSALE_DIALOG_MSG  msgTxt : MSWIPE_ERROR_INENRYPTINGKEY firstBtn: @"Ok"
        //                    secondBtn : nil];
        continue_transaction.enabled = (true) ;
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"data encryption error. " delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    }
    
    
}
-(void) processCardSale_EMV
{
    
    processMode = HTTP_PROCESS_CARDSALE;
    
    @try
    {
        NSLog(@"%@%@ %@ %@ %@",self.mSettings.mMerchantId,self.mSettings.mSessionToken,self.email,phnotext.text,payTxt2.text);
        
        [[MswipeWisepadController sharedInstance] processCardSale_EMV:self.mSettings.mMerchantId
                                                         sessionToken:self.mSettings.mSessionToken receipt:@""
                                                              phoneNo:[NSString stringWithFormat:@"%@%@",@"+91",phnotext.text]
                                                                email:self.email notes:@"" amount:payTxt2.text responsehadnler:self];
        
        NSLog(@"%@",[NSString stringWithFormat:@"%@%@",@"+91 ",phoneNo.text]);
        
        HUD.labelText = @"processing transaction...";
        [HUD setHidden:NO];
        [cardDetails addSubview:HUD];
        
    }@catch (NSException *ex) {
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"data encryption error. " delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        continue_transaction.enabled = (true);
    }
    
    
    
}
-(void) setWisePadStateSequnce:(NSString*) txt step:(int) step
{
    for(int ictr =0 ; ictr<swiperMsgs.count; ictr++)
    {
        if(ictr == step)
        {
            ((UILabel*) swiperMsgs[step]).text = @"";
            ((UILabel*) swiperMsgs[step]).textColor = [UIColor whiteColor];
            ((UILabel*) swiperMsgs[step]).text = txt;
        }
        else{
            
            
            ((UILabel*) swiperMsgs[ictr]).textColor = [UIColor lightGrayColor];
        }
    }
    
}

-(void) setWisePadResultsInfo:(NSString*) txt localizedmsg :(NSString*)localizedmsg
{
    info.textColor =  [UIColor whiteColor];
    if(txt !=nil)
        info.text= txt;
    else if(localizedmsg!=nil)
        info.text = localizedmsg;
    
}



#pragma mark -
#pragma mark SwiperControllerDelegate


- (void)onWisePadWaitingForCard;
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWaitingForCard",YES, YES);
#endif
    
    
    NSString* txt =((UILabel*) swiperMsgs[3]).text;
    [self setWisePadStateSequnce :txt step:3];
    
    
    [self setWisePadResultsInfo:@"please insert or swipe card now." localizedmsg:nil];
    
}

- (void)onWisePadRequestInsertCard
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadRequestInsertCard",YES, YES);
#endif
    
    
    NSString* txt =((UILabel*) swiperMsgs[3]).text;
    [self setWisePadStateSequnce :txt step:3];
    
    [self setWisePadResultsInfo:@"please insert or swipe card now." localizedmsg:nil];
    
    
}
- (void)onWisePadRequestSetAmount
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onRequestSetAmount",YES, YES);
#endif
    //    [self dismissDialog];
    /*[NSArray arrayWithObjects:@"A", @"B", @"C", @"D", @"E",@"F", @"G", @"H", @"I", @"J",@"K", @"L", @"M", @"N", @"O",
     @"P", @"Q", @"R", @"S", @"T",@"U", @"V", @"W", @"X", @"Y",@"Z",@" ",@"Dirham",@"Dollar",@"Euro",
     @"IndianRupee",@"Pound",@"SaudiRiyal",@"SaudiRiyal2",@"Won",@"Yen",@"/.",@".",
     //New currency enum value may be added
     @"NULL", nil];
     */
    //here 30 is the currency code of rupees
    NSArray *amountCharArray = @[@30];
#ifdef IS_DEBUGGING_ON
    NSString *temp_log = [NSString stringWithFormat:@"onRequestSetAmount amount array%@",amountCharArray];
    Logs(log_tab, temp_log,YES, YES);
#endif
    
    //this is called before the check card is called
    [[WisePadController sharedController] setAmount:payTxt2.text
                                     cashbackAmount:@""
                                       currencyCode:@"0840"
                                    transactionType:WisePadTransactionType_Goods
                                 currencyCharacters:amountCharArray];
}
- (void)onWisePadReturnAmountConfirmResult:(BOOL)isConfirmed{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadReturnAmountConfirmResult",YES, YES);
#endif
    // TODO Auto-generated method stub
    if (isConfirmed) {
        
        [self setWisePadResultsInfo:@"amount confirmed" localizedmsg:nil];
        
        
        
    } else {
        //statusEditText.setText(getString(R.string.amount_canceled));
        
        [self setWisePadResultsInfo:@"amount cancelled" localizedmsg:nil];
        
        // mCardSale_TRXState = CardSale_TRXState_Completed;
        // [mBtnSwipe setEnabled: YES];
        //[mBtnSwipe setBackgroundColor: [UIColor blueColor]];
        //[mBtnSwipe titleLabel].textColor =[UIColor greenColor];
        
        
    }
    
}




- (void)onWisePadRequestPinEntry{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onRequestPinEntry",YES, YES);
#endif
    
    //[self dismissDialog];
    //[self dismissEMVOnlieProcessProgressActivity];
    
    
    if ((mCardResults  & MCRCardResults_PIN_REQUIRED)  == MCRCardResults_PIN_REQUIRED) {
        
        [self setWisePadResultsInfo:@"please enter PIN on WisePad or Press ENTER (green key) to bypass PIN." localizedmsg:nil];
        
    } else {
        [self setWisePadResultsInfo:@"enter pin" localizedmsg:nil];
        
    }
    
}

- (void)onWisePadReturnCheckCardResult:(WisePadCheckCardResult)result cardDataDict:(NSDictionary *)cardDataDict;
{
    //[self dismissDialog];
    // mCardSaleData = [[CardSaleData alloc] init];
    mCardResults = [[MswipeWisepadController sharedInstance] processMCRCardResults:result cardDataDict:cardDataDict];
    
    
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onReturnCheckCardResult",YES, YES);
#endif
    
    switch (result)
    {
            
        case WisePadCheckCardResult_NoCard:
            
            [self setWisePadResultsError:nil localizedmsg:@"no_card_detected"];
            
            
            mCardSale_TRXState = CardSale_TRXState_Completed;
            
            [startBtn setEnabled:YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            
            break;
        case WisePadCheckCardResult_InsertedCard:
            isEmvSwiper = YES;
            mcardSaleData.mISEMVTrx = YES;
            [self setWisePadResultsInfo:@"IC card inserted, please wait..." localizedmsg:nil];
            
            [startBtn setEnabled: NO];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            //            [startBtn setBackgroundColor: [UIColor grayColor]];
            [[WisePadController sharedController] startEmv:WisePadEmvOption_Start];
            break;
        case WisePadCheckCardResult_NotIccCard:
            [self setWisePadResultsError:nil localizedmsg:@"card_inserted"];
            
            mCardSale_TRXState = CardSale_TRXState_Completed;
            
            [startBtn setEnabled:YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            break;
        case WisePadCheckCardResult_BadSwipe:
            
            [self setWisePadResultsError:nil localizedmsg:@"bad_swipe"];
            mCardSale_TRXState = CardSale_TRXState_Completed;
            [startBtn setEnabled:YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            break;
        case WisePadCheckCardResult_SwipedCard:
        case WisePadCheckCardResult_OnlyTrack2:
        {
            isEmvSwiper = NO;
            mcardSaleData.mISEMVTrx = NO;
            
            mcardSaleData.mSno= cardDataDict[@"ksn"];
            mcardSaleData.mCreditCardNo= cardDataDict[@"maskedPAN"];
            mcardSaleData.mCardHolderName=cardDataDict[@"cardholderName"];
            
            if((mcardSaleData.mCardHolderName).length <=0)
            {
                mcardSaleData.mCardHolderName = @"XXXX-XXXX";
            }
            else{
                NSRange pos = [mcardSaleData.mCardHolderName rangeOfString:@"^"];
                if(pos.length>0)
                {
                    @try{
                        mcardSaleData.mCardHolderName = [mcardSaleData.mCardHolderName substringWithRange:pos];
                    }@catch(NSException *ex){
                        
                    }
                }
                
            }
            NSString *tempString=cardDataDict[@"expiryDate"];
            if(tempString.length==5)
            {
                mcardSaleData.mExpiryDate=[tempString substringWithRange : NSMakeRange(3,2)];
                mcardSaleData.mExpiryDate= [NSString stringWithFormat:@"%@%@", mcardSaleData.mExpiryDate,[tempString substringWithRange : NSMakeRange(0,2)]];
                
            }
            else if(tempString.length==4){
                
                mcardSaleData.mExpiryDate=[tempString substringWithRange : NSMakeRange(2,2)];
                mcardSaleData.mExpiryDate= [NSString stringWithFormat:@"%@%@", mcardSaleData.mExpiryDate,[tempString substringWithRange : NSMakeRange(0,2)]];
                
            }
            else{
                mcardSaleData.mExpiryDate=tempString;
            }
            
            
            if(mCardResults == MCRCardResults_BAD_SWIPE)
            {
                mCardSale_TRXState = CardSale_TRXState_Completed;
                info.textColor = [UIColor redColor];
                info.text =  @"Bad swipe.";
                [startBtn setEnabled : YES];
                [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
                //[mBtnSwipe setBackgroundColor: [UIColor blueColor]];
                return;
                
            }
            
            if(mCardResults == MCRCardResults_USE_CHIPCARD)
            {
                processMode = FALL_BACK;
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sale" message:@"please use Chip card." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
                
                [startBtn setEnabled : YES];
                [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
                
                return;
            }
            
            if((mCardResults & MCRCardResults_PIN_REQUIRED) == MCRCardResults_PIN_REQUIRED)
            {
                [[WisePadController sharedController] startPinEntry];
                
            }
            else{
                
                [self showCreditDetailsScreen];
                
            }
            
        }
            break;
        case WisePadCheckCardResult_NoResponse:
            
            [self setWisePadResultsError:nil localizedmsg:@"card_no_response"];
            
            mCardSale_TRXState = CardSale_TRXState_Completed;
            [startBtn setEnabled: YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            
            
            break;
            
        case WisePadCheckCardResult_MagHeadFail:
            
            [self setWisePadResultsError:nil localizedmsg:@"use_icc_card"];
            
            mCardSale_TRXState = CardSale_TRXState_Completed;
            
            [startBtn setEnabled:YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            
            break;
        default:
            [self setWisePadResultsError:@"hardware error, please try again." localizedmsg:nil];
            mCardSale_TRXState = CardSale_TRXState_Completed;
            [startBtn setEnabled: YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            
            break;
            
    }
}

- (void)onWisePadReturnPinEntryResult:(WisePadPinEntryResult)result epb:(NSString *)epb ksn:(NSString *)ksn{
    
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadReturnPinEntryResult",YES, YES);
#endif
    // [self dismissDialog];
    [[MswipeWisepadController sharedInstance] processPinEntryResult:result epb:epb ksn:ksn];
    
    switch (result) {
        case WisePadPinEntryResult_PinEntered:
        {
            
            [self setWisePadResultsInfo:@"pin entered" localizedmsg:nil];
            
            if ((mCardResults & MCRCardResults_PIN_REQUIRED) == MCRCardResults_PIN_REQUIRED)
            {
                [self showCreditDetailsScreen];
                
            }
            
            
            break;
        }
        case WisePadPinEntryResult_Cancel:
            
            [self setWisePadResultsError:@"cancel" localizedmsg:nil];
            
            break;
        case WisePadPinEntryResult_Timeout:
            [self setWisePadResultsError:@"timeout" localizedmsg:nil];
            
            break;
        case WisePadPinEntryResult_KeyError:
            [self setWisePadResultsError:@"hey error" localizedmsg:nil];
            
            break;
            
            //case WisePadPinEntryResult_NoPinOrWrongPinLength:
            //    resultString = @"NoPinOrWrongPinLength";
            //    break;
        case WisePadPinEntryResult_ByPass:
            [self setWisePadResultsError:@"pin bypass" localizedmsg:nil];
            
            break;
        case WisePadPinEntryResult_NoPin:
            [self setWisePadResultsError:@"no pin" localizedmsg:nil];
            
            if ((mCardResults & MCRCardResults_PIN_REQUIRED) == MCRCardResults_PIN_REQUIRED)
            {
                [self showCreditDetailsScreen];
            }
            break;
        case WisePadPinEntryResult_WrongPinLength:
            [self setWisePadResultsError:@"wrong pin length" localizedmsg:nil];
            
            break;
            
        case WisePadPinEntryResult_IncorrectPin:
            [self setWisePadResultsError:@"incorrect PIN" localizedmsg:nil];
            
            break;
            
        default:
            break;
    }
    
    if (result != WisePadPinEntryResult_PinEntered) {
        mCardSale_TRXState = CardSale_TRXState_Completed;
        [startBtn setEnabled: YES];
        [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        
        //[mBtnSwipe setBackgroundColor: [UIColor blueColor]];
        //[mBtnSwipe titleLabel].textColor =[UIColor greenColor];
        
        // [self dismissDialog ];
        //[self dismissEMVOnlieProcessProgressActivity];
    }
}

-(void) setWisePadResultsError:(NSString*) txt localizedmsg :(NSString*)localizedmsg
{
    info.textColor =  [UIColor whiteColor];
    if(txt !=nil)
        info.text= txt;
    else if(localizedmsg!=nil)
        info.text =NSLocalizedString(localizedmsg, @"");
    
}
-(void)onWisePadReturnEmvCardDataResult:(NSString *)tlv {
    
    NSLog(@"%@",tlv);
    
}
- (void)onWisePadRequestCheckServerConnectivity{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onRequestCheckServerConnectivity",YES, YES);
#endif
    //    [self dismissDialog];
    [[WisePadController sharedController] sendServerConnectivity:YES];
}

- (void)onWisePadRequestFinalConfirm{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onRequestFinalConfirm",YES, YES);
#endif
    //    [self dismissDialog];
    
    [[WisePadController sharedController] sendFinalConfirmResult:YES];
    
    
}

- (void)onWisePadRequestOnlineProcess:(NSString *)tlv{
    
    [startBtn setEnabled: YES];
    NSDictionary* tlvDictionary = [[MswipeWisepadController sharedInstance] processOnRequestOnlineProcess:tlv];
    if(tlvDictionary ==nil || tlvDictionary.count == 0)
    {
        
        startBtn.enabled = (true);
    }
    else{
        
        mcardSaleData.mCardHolderName = tlvDictionary[@"cardHolderName"];
        
        mcardSaleData.mAppIdentifier = tlvDictionary[@"appIdentifier"]; // the universal app would send the
        
        mcardSaleData.mTSI = tlvDictionary[@"TSI"];
        
        mcardSaleData.mTVR = tlvDictionary[@"TVR"];
        
        mcardSaleData.mCertif = tlvDictionary[@"certif"]; // the universal app would send the
        
        mcardSaleData.mApplicationName = tlvDictionary[@"applicationName"]; // the universal app would send the
        
        mcardSaleData.mCreditCardNo = tlvDictionary[@"creditCardNo"]; // the universal app would send the
        
        mcardSaleData.mCardHolderName = tlvDictionary[@"cardHolderName"]; // the universal app would send the
        
        mcardSaleData.mExpiryDate = tlvDictionary[@"expiryDate"]; // the universal app would send the
        
        [self showCreditDetailsScreen];
        
        
    }
    
    
    
}

-(void) processAutoVoid
{
    @try
    {
        processMode = HTTP_PROCESS_AUTOVOID;
        [[MswipeWisepadController sharedInstance] processReversalSale:self.mSettings.mMerchantId
                                                         sessionToken:self.mSettings.mSessionToken
                                                            trxAmount:payTxt2.text trxDate:mcardSaleResults.mDate
                                                               stanid:mcardSaleResults.mStanID F055tag:mcardSaleResults.mF055tag
                                                      responsehadnler:self];
        
        
        HUD.labelText = @"processing auto void trx...";
        
        [cardDetails addSubview:HUD];
        
    }@catch (NSException *ex) {
        processMode = ALERT_TRXCLOSE;
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"data encryption error." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    }
    
    
}

-(void)signatureView {
    
    [cardDetails setHidden:YES];
    if ([cardPayment.subviews containsObject:receipt_view]) {
        
        [receipt_view removeFromSuperview];
    }
    
    signature_view = [[UIImageView alloc] init];
    signature_view.layer.borderColor = [UIColor whiteColor].CGColor;
    signature_view.layer.borderWidth = 1.0f;
    signature_view.layer.cornerRadius = 10.0f;
    
    buttonView = [[UIView alloc] init];
    
    receipt_view = [[UIView alloc] init];
    
    NSString *last4Digits = @"";
    
    int ilen= (int)(mcardSaleData.mCreditCardNo).length;
    if(ilen>=4)
        last4Digits = [mcardSaleData.mCreditCardNo substringFromIndex: ilen-4];
    else
        last4Digits = mcardSaleData.mCreditCardNo;
    
    
    UILabel *label1_ = [[UILabel alloc] init];
    label1_.textColor = [UIColor whiteColor];
    label1_.font = [UIFont boldSystemFontOfSize:24.0];
    label1_.text = status_mswipe;
    
    UILabel *label2_ = [[UILabel alloc] init];
    label2_.textColor = [UIColor grayColor];
    label2_.font = [UIFont systemFontOfSize:22.0];
    label2_.text = @"card transaction status";
    
    UILabel *label3_ = [[UILabel alloc] init];
    label3_.textColor = [UIColor whiteColor];
    label3_.font = [UIFont boldSystemFontOfSize:24.0];
    label3_.text = mcardSaleData.mAuthCode;
    
    UILabel *label4_ = [[UILabel alloc] init];
    label4_.textColor = [UIColor grayColor];
    label4_.font = [UIFont systemFontOfSize:22.0];
    label4_.text = @"authorisation code";
    
    UILabel *label5_ = [[UILabel alloc] init];
    label5_.textColor = [UIColor whiteColor];
    label5_.font = [UIFont boldSystemFontOfSize:24.0];
    label5_.text = mcardSaleData.mRRNo;
    
    UILabel *label6 = [[UILabel alloc] init];
    label6.textColor = [UIColor grayColor];
    label6.font = [UIFont systemFontOfSize:22.0];
    label6.text = @"receipt retrieval no.";
    
    UIButton   *okBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    okBtn.layer.borderColor = [UIColor whiteColor].CGColor;
    okBtn.layer.cornerRadius = 10.0f;
    okBtn.layer.borderWidth = 1.0f;
    [okBtn setTitle:@"OK" forState:UIControlStateNormal];
    [okBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    (okBtn.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
    [okBtn addTarget:self action:@selector(okButtonPressed1:) forControlEvents:UIControlEventTouchUpInside];
    
    clearSign = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    clearSign.layer.borderColor = [UIColor whiteColor].CGColor;
    clearSign.layer.cornerRadius = 10.0f;
    clearSign.layer.borderWidth = 1.0f;
    [clearSign setTitle:@"Clear" forState:UIControlStateNormal];
    [clearSign setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    (clearSign.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
    [clearSign addTarget:self action:@selector(clearSign:) forControlEvents:UIControlEventTouchUpInside];
    
    signSubmit = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    signSubmit.layer.borderColor = [UIColor whiteColor].CGColor;
    signSubmit.layer.cornerRadius = 10.0f;
    signSubmit.layer.borderWidth = 1.0f;
    [signSubmit setTitle:@"Submit" forState:UIControlStateNormal];
    [signSubmit setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    (signSubmit.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
    [signSubmit addTarget:self action:@selector(submitSignature:) forControlEvents:UIControlEventTouchUpInside];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        receipt_view.frame = CGRectMake(0, 10, self.view.frame.size.width, 600);
        sale.frame = CGRectMake(20, 10, 100, 60);
        label1_.frame = CGRectMake(20, 70, 500, 70);
        label2_.frame = CGRectMake(20, 130, 500, 40);
        label3_.frame = CGRectMake(20, 160, 500, 70);
        label4_.frame = CGRectMake(20, 210, 500, 50);
        label5_.frame = CGRectMake(20, 240, 500, 70);
        label6.frame = CGRectMake(20, 290, 500, 50);
        okBtn.frame = CGRectMake(230, 440, 250, 35);
        
        buttonView.frame = CGRectMake(20, 250, 500, 400);
        clearSign.frame = CGRectMake(150, 150, 120, 30);
        signSubmit.frame = CGRectMake(370, 150, 120, 30);
        
        
        
    }
    [receipt_view addSubview:sale];
    [receipt_view addSubview:label1_];
    [receipt_view addSubview:label2_];
    [receipt_view addSubview:label3_];
    [receipt_view addSubview:label4_];
    [receipt_view addSubview:label5_];
    [receipt_view addSubview:label6];
    [receipt_view addSubview:okBtn];
    [cardPayment addSubview:receipt_view];
    [buttonView addSubview:clearSign];
    [buttonView addSubview:signSubmit];
    
    
}
-(void)okButtonPressed1 :(id)sender {
    if ([cardPayment.subviews containsObject:receipt_view]) {
        
        [receipt_view removeFromSuperview];
        receipt_view.hidden = YES;
    }
    receipt_view.hidden = YES;
    [receipt_view removeFromSuperview];
    
    signView = [[QImageView alloc]initWithFrame:CGRectMake(20, 100, self.view.frame.size.width-100, 200)];
    signView.layer.borderColor = [UIColor whiteColor].CGColor;
    signView.layer.borderWidth = 1.0f;
    signView.layer.cornerRadius = 10.0f;
    
    
    
    [cardPayment addSubview:signView];
    [cardPayment addSubview:buttonView];
    
    signView.userInteractionEnabled = YES;
    
}
-(void)clearSign:(id)sender {
    
    // mSignature = [[TouchTrackerView alloc] init];
    
    [signView clear];
    
}

-(void)submitSignature:(id)sender {
    
    
    if(signView.signatureDrawn)
    {
        // add image data
        NSData *signatureData = signView.renderImageData;
        @try
        {
            
            
            [[MswipeWisepadController sharedInstance]  processSignature:self.mSettings.mMerchantId
                                                           sessionToken:self.mSettings.mSessionToken signatureData:signatureData
                                                           creditCardNo:mcardSaleData.mCreditCardNo standId:mcardSaleData.mStanID trxAmount:payTxt2.text
                                                                    TSI:mcardSaleData.mTSI TVR:mcardSaleData.mTVR responsehadnler:self];
            // self.navigationController.navigationBar.hidden = YES;
            
            
            HUD.labelText = @"Processing signature...";
            [self.view addSubview:HUD];
            
        }
        @catch (NSException *ex) {
            
            UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"receipt needs to be signed to proceed. " delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
        }
        
        
        
        
        
    }else{
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"receipt needs to be signed to proceed. " delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
    }
    
}


// Action for the buttons on segmented control ..
- (void) segmentAction: (id) sender  {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    segmentedControl = (UISegmentedControl *)sender;
    mainsegmentIndex = (int)segmentedControl.selectedSegmentIndex;
    
    finalBillDue1 = @"0.00";
    
    segmentedControl.selectedSegmentIndex = UISegmentedControlNoSegment;
    //    NSString *str = billDueValue.text;
    isReturnDenom = false;
    
    switch (mainsegmentIndex) {
            
        case 0: {
//            if (cartItem.count == 0) {
//                
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                [alert show];
//            }
//            else {
                
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                
                if (!([[defaults valueForKey:DENOMNINATION_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:DENOMNINATION_OPTIONS] == nil)) {
                    
                    for(NSDictionary * payDic in [defaults valueForKey:DENOMNINATION_OPTIONS]){
                        
                        if([[payDic valueForKey:TENDER_NAME] caseInsensitiveCompare:INR] == NSOrderedSame){
                            
                            if(billPaymentTendeInfoDic.allKeys.count)
                                [billPaymentTendeInfoDic removeAllObjects];
                            
                            billPaymentTendeInfoDic = [payDic mutableCopy];
                            break;
                        }
                    }
                    
                    if( (billPaymentTendeInfoDic == nil ) && [[defaults valueForKey:DENOMNINATION_OPTIONS] count] &&  !billPaymentTendeInfoDic.allKeys.count)
                        billPaymentTendeInfoDic = [[defaults valueForKey:DENOMNINATION_OPTIONS][0] mutableCopy];
                }
                
                [self quickPayCall];
//            }
            break;
        }
        case 1:
        {
            
            if ((pastBillField.text).length == 0){
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please submit bill id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            
            
            else if([bill_status_val.text caseInsensitiveCompare:@"completed"] == NSOrderedSame)
                
            {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Bill completed" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            
            
            else if(tempArrayItems.count == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Add items to cart" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            //            else if (([bill_status_val.text caseInsensitiveCompare:@"pending"] == NSOrderedSame || !([bill_status_val.text caseInsensitiveCompare:@"draft"] == NSOrderedSame))  && ([totalPaymentVal.text floatValue]>[totalBillValue.text floatValue])){
            //
            //
            //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Paid amount exceeds the total bill amount" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //                [alert show];
            //
            //            }
            else  {
                
                
                [self setSiblings:paymentView enabled:FALSE];
                
                type_Of_Payment = [[NSMutableString alloc] initWithString:@"Cash"];
                
                // [self populateDenominationView];
                
                [self populateDenominations];
                
                label.text = @"    Cash Payment";
                
                if ((phnotext.text).length>0) {
                    
                    [self getCustomerDetails];
                    
                }
                
            }
            
            break;
        }
        case 2:{
            
            if ((pastBillField.text).length == 0){
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please submit bill id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            else if(tempArrayItems.count == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Add items to cart" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            
            else if([bill_status_val.text caseInsensitiveCompare:@"completed"] == NSOrderedSame)
                
            {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Bill completed" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            //               else if (([bill_status_val.text caseInsensitiveCompare:@"pending"] == NSOrderedSame || !([bill_status_val.text caseInsensitiveCompare:@"draft"] == NSOrderedSame))  && ([totalPaymentVal.text floatValue]>[totalBillValue.text floatValue])){
            //
            //
            //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Paid amount exceeds the total bill amount" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //                    [alert show];
            //
            //                }
            else {
                
                paymentView.backgroundColor = [UIColor blackColor];
                paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
                paymentView.layer.borderWidth = 0.8f;
                type_Of_Payment = [[NSMutableString alloc] initWithString:@"Credit/Debit"];
                // header ..
                [self populatePaymentView:@"CARD"];
                label.text = @"    Card Payment";
                
                
            }
            
            break;
        }
        case 3:{
            
            
            break;
        }
        case 4:{
            
            //changed by srinivasulu on 25/11/2017.....
            
            [self showOtherPaymentsView];
            
            //            cupon_type = [[NSMutableArray alloc] init];
            //            [cupon_type addObject:@"Sodexo Coupons"];
            //            [cupon_type addObject:@"Ticket Restaurant"];
            //
            //            value_arr = [[NSMutableArray alloc] initWithObjects:@"5",@"10",@"15",@"17",@"20",@"25",@"30",@"35",@"40",@"45",@"50",@"100",@"151",@"250",@"500", nil];
            //            foodCouponTypeStr = @"Sodexo";
            //            couponArr = [[NSMutableArray alloc] init];
            //            couponValArr = [[NSMutableArray alloc] init];
            //            couponIdArr = [[NSMutableArray alloc] init];
            //            couponTotalArr = [[NSMutableArray alloc] init];
            //
            //            couponView    = [[UIView alloc] init];
            //            [couponView.layer setBorderWidth:1.0f];
            //            [couponView.layer setCornerRadius:8.0f];
            //            couponView.backgroundColor = [UIColor blackColor];
            //            couponView.tag = 33;
            //
            //            if ([pastBillField.text length] == 0){
            //
            //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please submit bill id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //                [alert show];
            //
            //            }
            //            else  if ([tempArrayItems count] == 0) {
            //
            //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //                [alert show];
            //
            //            }
            //
            //            else if([bill_status_val.text caseInsensitiveCompare:@"completed"] == NSOrderedSame)
            //            {
            //
            //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Bill completed" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //                [alert show];
            //
            //            }
            //            //                else if ([bill_status_val.text caseInsensitiveCompare:@"pending"] == NSOrderedSame && ([totalPaymentVal.text floatValue]>[totalBillValue.text floatValue])){
            //            //
            //            //
            //            //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Paid amount exceeds the total bill amount" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //            //                    [alert show];
            //            //
            //            //                }
            //            else {
            //
            //                // disable the backgroud view ..
            //                [self setSiblings:couponView enabled:FALSE];
            //
            //                type_Of_Payment = [[NSMutableString alloc] initWithString:@"Food Coupons"];
            //
            //                payTxt2 = [[UITextField alloc] init];
            //
            //                label = [[UILabel alloc] init];
            //                label.text = @"    Coupon Payment";
            //                label.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:18];
            //                label.alpha = 0.8f;
            //                label.textAlignment = NSTextAlignmentLeft;
            //                label.backgroundColor = [UIColor whiteColor];
            //                label.textColor = [UIColor blackColor];
            //
            //                // close button to close the view ..
            //                backbutton = [[UIButton alloc] init];
            //                [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
            //                backbutton.tag = 20;
            //
            //                UIImage *image = [UIImage imageNamed:@"delete.png"];
            //                [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
            //
            //                UIButton *giftOkBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            //                [giftOkBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
            //                giftOkBtn.tag = 21;
            //                [giftOkBtn setTitle:@"Continue"    forState:UIControlStateNormal];
            //                giftOkBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            //                giftOkBtn.titleLabel.textColor = [UIColor whiteColor];
            //                giftOkBtn.backgroundColor = [UIColor grayColor];
            //
            //                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            //
            //                    // img1.frame = CGRectMake(0, 0, 630, 460);
            //                    label.font = [UIFont systemFontOfSize:25];
            //                    label.frame = CGRectMake(0, 0, 750, 60);
            //                    backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            //                    giftOkBtn.frame = CGRectMake(200.0, 620, 300.0, 40.0);
            //                    giftOkBtn.layer.cornerRadius = 22.0f;
            //                    giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            //                    couponView.layer.borderColor = [UIColor whiteColor].CGColor;
            //                    couponView.layer.borderWidth = 1.5f;
            //                    couponView.frame = CGRectMake(150, 10, 750, 680);
            //
            //                }
            //                else {
            //
            //                    if (version >= 8.0 ) {
            //                        label.frame = CGRectMake(0, 0, 300, 40);
            //                        backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            //                        couponView.layer.borderColor = [UIColor whiteColor].CGColor;
            //                        couponView.layer.borderWidth = 1.0f;
            //                        couponView.frame = CGRectMake(10, 10, 300, 450.0);
            //                        giftOkBtn.frame = CGRectMake(80.0, 390.0, 150.0, 35);
            //                        giftOkBtn.layer.cornerRadius = 18;
            //                        giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:18.0];
            //                    }
            //                    else{
            //                        label.frame = CGRectMake(0, 0, 300, 40);
            //                        backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            //
            //                        giftOkBtn.frame = CGRectMake(80.0, 320, 150.0, 35);
            //                        giftOkBtn.layer.cornerRadius = 18;
            //                        giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:18.0];
            //
            //                        couponView.frame = CGRectMake(10, 10, 350, 350);
            //                    }
            //
            //                }
            //
            //                //[paymentView addSubview:img1];
            //                [couponView addSubview:label];
            //                [couponView addSubview:backbutton];
            //                [couponView addSubview:giftOkBtn];
            //                [self.view addSubview:couponView];
            //
            //                couponView.hidden = NO;
            //
            //                [self couponsView];
            //
            //            }
            
            
            
            break;
        }
        case 5:{
            CheckWifi *wifi = [[CheckWifi alloc]init];
            BOOL status = [wifi checkWifi];
            
            if(isOfflineService || !status){
                
                
                float y_position = BillField.frame.origin.y + BillField.frame.size.height;
                
                
                NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"message", nil),@"\n",NSLocalizedString(@"this_feature_can_only_be_used_with_internet_connectivity", nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
                
            }
            else if (giftView.hidden) {
                
                
                if (tempArrayItems.count == 0) {
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                else   if (tempArrayItems.count == 0) {
                    
                    
                    giftView.backgroundColor = [UIColor blackColor];
                    giftView.layer.borderColor = [UIColor whiteColor].CGColor;
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Add items to cart" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                    
                }
                else if([bill_status_val.text caseInsensitiveCompare:@"completed"] == NSOrderedSame)
                {
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Bill completed" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                //                    else if ([bill_status_val.text caseInsensitiveCompare:@"pending"] == NSOrderedSame && ([totalPaymentVal.text floatValue]>[totalBillValue.text floatValue])){
                //
                //
                //                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Paid amount exceeds the total bill amount" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                //                        [alert show];
                //
                //                    }
                else {
                    
                    [self formAndViewGiftView:nil];
                    
                    //                        // disable the backgroud view ..
                    //                        [self setSiblings:giftView enabled:FALSE];
                    //                        giftView.backgroundColor = [UIColor blackColor];
                    //                        giftView.layer.borderColor = [UIColor whiteColor].CGColor;
                    //
                    //                        //                    UIImageView *headerimg  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
                    //                        //
                    //                        //                    UIImageView *icon = [[[UIImageView alloc] initWithImage:[UIImage imageNamed:@"gift_voucher.png"]] autorelease];
                    //                        //                    icon.backgroundColor = [UIColor clearColor];
                    //
                    //                        loyaltyScrollView = [[UIScrollView alloc] init];
                    //                        loyaltyScrollView.hidden = NO;
                    //                        loyaltyScrollView.backgroundColor = [UIColor clearColor];
                    //                        loyaltyScrollView.bounces = FALSE;
                    //                        loyaltyScrollView.scrollEnabled = YES;
                    //
                    //
                    //                        // close button to close the view ..
                    //                        backbutton = [[UIButton alloc] init] ;
                    //                        [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
                    //                        backbutton.tag = 22;
                    //
                    //                        UIImage *image = [UIImage imageNamed:@"delete.png"];
                    //                        [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
                    //
                    //                        //                    giftType.text= @"";
                    //
                    //                        UILabel *heading = [[UILabel alloc] init] ;
                    //                        heading.text = @"Gift Voucher / Coupon / \n Loyalty Card";
                    //                        //                    heading.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                        heading.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:0.8];
                    //                        heading.textColor = [UIColor blackColor];
                    //                        heading.textAlignment = NSTextAlignmentCenter;
                    //                        heading.numberOfLines = 2;
                    //
                    //
                    //                        UILabel *type = [[UILabel alloc] init] ;
                    //                        type.text = @"Type ";
                    //                        type.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                        type.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14];
                    //                        type.backgroundColor = [UIColor clearColor];
                    //                        type.textColor = [UIColor whiteColor];
                    //
                    //                        /*UILabel *label2 = [[[UILabel alloc] initWithFrame:CGRectMake(10, 95, 120, 35)] autorelease];
                    //                         label2.text = @"Number :";
                    //                         label2.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                         label2.backgroundColor = [UIColor clearColor];
                    //                         label2.textColor = [UIColor blackColor];
                    //                         [giftView addSubview:label2];*/
                    //
                    //                        UILabel *validFromLbl = [[UILabel alloc] init] ;
                    //                        validFromLbl.text = @"Valid From ";
                    //                        validFromLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                        validFromLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14];
                    //                        validFromLbl.backgroundColor = [UIColor clearColor];
                    //                        validFromLbl.textColor = [UIColor whiteColor];
                    //
                    //                        UILabel *validToLbl = [[UILabel alloc] init] ;
                    //                        validToLbl.text = @"Valid To ";
                    //                        validToLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                        validToLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14];
                    //                        validToLbl.backgroundColor = [UIColor clearColor];
                    //                        validToLbl.textColor = [UIColor whiteColor];
                    //
                    //                        giftNoLbl = [[UILabel alloc] init] ;
                    //                        giftNoLbl.text = @"Voucher Id ";
                    //                        giftNoLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                        giftNoLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14];
                    //                        giftNoLbl.backgroundColor = [UIColor clearColor];
                    //                        giftNoLbl.textColor = [UIColor whiteColor];
                    //
                    //                        cardID = [[UILabel alloc] init] ;
                    //                        cardID.text = @"Voucher Code ";
                    //                        cardID.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                        cardID.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14];
                    //                        cardID.backgroundColor = [UIColor clearColor];
                    //                        cardID.textColor = [UIColor whiteColor];
                    //
                    //                        amtLabel = [[UILabel alloc] init] ;
                    //                        amtLabel.text = @"Available Cash ";
                    //                        amtLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                        amtLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14];
                    //                        amtLabel.backgroundColor = [UIColor clearColor];
                    //                        amtLabel.textColor = [UIColor whiteColor];
                    //
                    //                        giftAmt.textColor = [UIColor whiteColor];
                    //
                    //
                    //
                    //
                    //                        giftTypeBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
                    //                        UIImage *buttonImageDD1 = [UIImage imageNamed:@"combo.png"];
                    //                        [giftTypeBtn setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
                    //                        [giftTypeBtn addTarget:self
                    //                                        action:@selector(giftContinue:) forControlEvents:UIControlEventTouchDown];
                    //                        giftTypeBtn.titleLabel.textColor = [UIColor blackColor];
                    //                        giftTypeBtn.tag = 0;
                    //
                    //
                    //                        giftNo.autocapitalizationType = UITextAutocapitalizationTypeNone;
                    //                        giftNo.autocorrectionType = UITextAutocorrectionTypeNo;
                    //                        giftNo.keyboardType = UIKeyboardTypeAlphabet;
                    //                        giftNo.delegate = self;
                    //                        //                    giftNo.backgroundColor = [UIColor whiteColor];
                    //
                    //                        giftID = [[CustomTextField alloc] init];
                    //                        giftID.borderStyle = UITextBorderStyleRoundedRect;
                    //                        giftID.textColor = [UIColor blackColor];
                    //                        giftID.font = [UIFont systemFontOfSize:18.0];
                    //                        giftID.backgroundColor = [UIColor whiteColor];
                    //                        giftID.text = @"";
                    //                        giftID.autocapitalizationType = UITextAutocapitalizationTypeNone;
                    //                        giftID.autocorrectionType = UITextAutocorrectionTypeNo;
                    //                        giftID.keyboardType = UIKeyboardTypeAlphabet;
                    //                        giftID.delegate = self;
                    //                        giftID.placeholder = @"16 Digit Code";
                    //                        [giftID awakeFromNib];
                    //
                    //                        giftValidFrom = [[CustomTextField alloc] init];
                    //                        giftValidFrom.borderStyle = UITextBorderStyleRoundedRect;
                    //                        giftValidFrom.textColor = [UIColor blackColor];
                    //                        giftValidFrom.font = [UIFont systemFontOfSize:18.0];
                    //                        giftValidFrom.backgroundColor = [UIColor whiteColor];
                    //                        giftValidFrom.text = @"";
                    //                        giftValidFrom.autocapitalizationType = UITextAutocapitalizationTypeNone;
                    //                        giftValidFrom.autocorrectionType = UITextAutocorrectionTypeNo;
                    //                        giftValidFrom.keyboardType = UIKeyboardTypeAlphabet;
                    //                        giftValidFrom.delegate = self;
                    //                        [giftValidFrom awakeFromNib];
                    //
                    //                        giftValidTo = [[CustomTextField alloc] init];
                    //                        giftValidTo.borderStyle = UITextBorderStyleRoundedRect;
                    //                        giftValidTo.textColor = [UIColor blackColor];
                    //                        giftValidTo.font = [UIFont systemFontOfSize:18.0];
                    //                        giftValidTo.backgroundColor = [UIColor whiteColor];
                    //                        giftValidTo.text = @"";
                    //                        giftValidTo.autocapitalizationType = UITextAutocapitalizationTypeNone;
                    //                        giftValidTo.autocorrectionType = UITextAutocorrectionTypeNo;
                    //                        giftValidTo.keyboardType = UIKeyboardTypeAlphabet;
                    //                        giftValidTo.delegate = self;
                    //                        [giftValidTo awakeFromNib];
                    //
                    //                        // scanner button . .
                    //                        giftSearchBtn = [[UIButton alloc] init];
                    //                        [giftSearchBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
                    //                        giftSearchBtn.tag = 3;
                    //                        [giftSearchBtn setImage:[UIImage imageNamed:@"search.png"]    forState:UIControlStateNormal];
                    //                        giftSearchBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
                    //                        giftSearchBtn.titleLabel.textColor = [UIColor blackColor];
                    //
                    //                        UIButton *giftOkBtn = [UIButton buttonWithType:UIButtonTypeCustom];
                    //                        [giftOkBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
                    //                        giftOkBtn.tag = 1;
                    //                        [giftOkBtn setTitle:@"OK"    forState:UIControlStateNormal];
                    //                        giftOkBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
                    //                        giftOkBtn.titleLabel.textColor = [UIColor whiteColor];
                    //                        giftOkBtn.backgroundColor = [UIColor grayColor];
                    //
                    //                        UIButton *giftCancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
                    //                        [giftCancelBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
                    //                        giftCancelBtn.tag = 2;
                    //                        [giftCancelBtn setTitle:@"Cancel"    forState:UIControlStateNormal];
                    //                        giftCancelBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
                    //                        giftCancelBtn.titleLabel.textColor = [UIColor whiteColor];
                    //                        giftCancelBtn.backgroundColor = [UIColor grayColor];
                    //
                    //                        // these are extra fields for loyalty card ..
                    //                        avai_points_label = [[UILabel alloc] init];
                    //                        avai_points_label.text = @"Avail Points ";
                    //                        avai_points_label.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                        avai_points_label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14];
                    //                        avai_points_label.backgroundColor = [UIColor clearColor];
                    //                        avai_points_label.textColor = [UIColor whiteColor];
                    //
                    //
                    //                        recash_label = [[UILabel alloc] init];
                    //                        recash_label.text = @"Encashing Amount ";
                    //                        recash_label.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
                    //                        recash_label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14];
                    //                        recash_label.backgroundColor = [UIColor clearColor];
                    //                        recash_label.textColor = [UIColor whiteColor];
                    //
                    //                        avai_points = [[CustomTextField alloc] init];
                    //                        avai_points.borderStyle = UITextBorderStyleRoundedRect;
                    //                        avai_points.textColor = [UIColor blackColor];
                    //                        avai_points.font = [UIFont systemFontOfSize:18.0];
                    //                        avai_points.backgroundColor = [UIColor whiteColor];
                    //                        avai_points.text = @"";
                    //                        avai_points.autocapitalizationType = UITextAutocapitalizationTypeNone;
                    //                        avai_points.autocorrectionType = UITextAutocorrectionTypeNo;
                    //                        avai_points.keyboardType = UIKeyboardTypeAlphabet;
                    //                        avai_points.userInteractionEnabled = NO;
                    //                        avai_points.delegate = self;
                    //                        [avai_points awakeFromNib];
                    //
                    //                        recash = [[CustomTextField alloc] init];
                    //                        recash.borderStyle = UITextBorderStyleRoundedRect;
                    //                        recash.textColor = [UIColor blackColor];
                    //                        recash.font = [UIFont systemFontOfSize:18.0];
                    //                        recash.backgroundColor = [UIColor whiteColor];
                    //                        recash.text = @"0.0";
                    //                        recash.autocapitalizationType = UITextAutocapitalizationTypeNone;
                    //                        recash.autocorrectionType = UITextAutocorrectionTypeNo;
                    //                        recash.keyboardType = UIKeyboardTypeAlphabet;
                    //                        recash.delegate = self;
                    //                        [recash awakeFromNib];
                    //
                    //                        [avai_points_label  setHidden:TRUE];
                    //                        [avai_points        setHidden:TRUE];
                    //                        [recash_label       setHidden:TRUE];
                    //                        [recash             setHidden:TRUE];
                    //
                    //                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    //
                    //                            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                    //
                    //                                heading.frame = CGRectMake(0, 0, 720, 60);
                    //                                heading.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
                    //
                    //                                loyaltyScrollView.frame = CGRectMake(0, 60, 778, 400);
                    //                                loyaltyScrollView.contentSize = CGSizeMake(778, 600);
                    //
                    //                                type.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                type.frame = CGRectMake(15, 10, 250, 40);
                    //                                validFromLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                validFromLbl.frame = CGRectMake(15, 160, 240, 40);
                    //                                validToLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                validToLbl.frame = CGRectMake(15, 210, 240, 40);
                    //
                    //                                giftNoLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                giftNoLbl.frame = CGRectMake(15, 60, 240, 40);
                    //
                    //                                cardID.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                cardID.frame = CGRectMake(15, 110, 240, 40);
                    //
                    //                                amtLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                amtLabel.frame = CGRectMake(15, 260, 300, 40);
                    //                                giftNo.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                giftNo.frame = CGRectMake(300, 60, 300, 40);
                    //                                giftType.backgroundColor = [UIColor whiteColor];
                    //                                giftType.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                giftType.frame = CGRectMake(300, 10, 300, 40);
                    //
                    //                                //giftTypeBtn.frame = CGRectMake(580.0, 100.0, 30.0, 55.0);
                    //                                giftTypeBtn.frame = CGRectMake(560.0, 5, 50, 55);
                    //
                    //                                giftID.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                giftID.frame = CGRectMake(300, 110, 300, 40);
                    //
                    //                                giftValidFrom.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                giftValidFrom.frame = CGRectMake(300, 160, 300, 40);
                    //                                giftValidTo.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                giftValidTo.frame = CGRectMake(300, 210, 300, 40);
                    //                                giftAmt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:20];
                    //                                giftAmt.frame = CGRectMake(300, 260, 300, 40);
                    //
                    //                                giftSearchBtn.frame = CGRectMake(450.0, 170.0, 50.0, 50.0);
                    //                                giftScannerBtn.frame = CGRectMake(630.0, 170.0, 50.0, 50.0);
                    //
                    //                                giftOkBtn.frame = CGRectMake(50.0, 500, 300.0, 50.0);
                    //                                giftOkBtn.layer.cornerRadius = 22.0f;
                    //                                giftOkBtn.titleLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //
                    //                                giftCancelBtn.frame = CGRectMake(360.0, 500, 300.0, 50.0);
                    //                                giftCancelBtn.layer.cornerRadius = 22.0f;
                    //                                giftCancelBtn.titleLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                giftView.frame = CGRectMake(150, 80, 720, 600);
                    //                            }
                    //                            else {
                    //                                heading.frame = CGRectMake(0, 0, 720, 60);
                    //                                heading.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
                    //
                    //                                type.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                type.frame = CGRectMake(15, 100, 250, 55);
                    //                                validFromLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                validFromLbl.frame = CGRectMake(15, 240, 240, 55);
                    //                                validToLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                validToLbl.frame = CGRectMake(15, 320, 240, 55);
                    //
                    //                                giftNoLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                giftNoLbl.frame = CGRectMake(15, 170, 240, 55);
                    //
                    //                                amtLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                amtLabel.frame = CGRectMake(15, 460, 300, 55);
                    //                                giftNo.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                giftNo.frame = CGRectMake(300, 170, 300, 55);
                    //                                giftType.backgroundColor = [UIColor whiteColor];
                    //                                giftType.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                giftType.frame = CGRectMake(300, 100, 300, 55);
                    //
                    //                                //giftTypeBtn.frame = CGRectMake(580.0, 100.0, 30.0, 55.0);
                    //                                giftTypeBtn.frame = CGRectMake(560.0, 95.0, 50, 70);
                    //
                    //                                giftValidFrom.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                giftValidFrom.frame = CGRectMake(300, 240, 300, 55);
                    //                                giftValidTo.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                giftValidTo.frame = CGRectMake(300, 320, 300, 55);
                    //                                giftAmt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                giftAmt.frame = CGRectMake(300, 460, 300, 55);
                    //
                    //                                giftSearchBtn.frame = CGRectMake(450.0, 170.0, 50.0, 50.0);
                    //                                giftScannerBtn.frame = CGRectMake(630.0, 170.0, 50.0, 50.0);
                    //
                    //                                giftOkBtn.frame = CGRectMake(50.0, 735.0, 300.0, 50.0);
                    //                                giftOkBtn.layer.cornerRadius = 22.0f;
                    //                                giftOkBtn.titleLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //
                    //                                giftCancelBtn.frame = CGRectMake(360.0, 735.0, 300.0, 50.0);
                    //                                giftCancelBtn.layer.cornerRadius = 22.0f;
                    //                                giftCancelBtn.titleLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25];
                    //                                giftView.frame = CGRectMake(24, 80, 720, 800);
                    //                            }
                    //
                    //
                    //
                    //                        }
                    //                        else {
                    //
                    //                            if (version >= 8.0) {
                    //                                //                            headerimg.frame = CGRectMake(0, 0, 300, 42);
                    //                                //                            icon.frame = CGRectMake(1, 1, 40, 40);
                    //                                loyaltyScrollView.frame = CGRectMake(0, 40, 778, 400);
                    //                                loyaltyScrollView.contentSize = CGSizeMake(778, 600);
                    //                                loyaltyScrollView.scrollEnabled = NO;
                    //                                heading.frame = CGRectMake(0, 1, 300, 40);
                    //                                type.frame = CGRectMake(5, 10, 100, 35);
                    //                                giftNoLbl.frame = CGRectMake(5, 55, 240, 35);
                    //                                validFromLbl.frame = CGRectMake(5, 95, 120, 35);
                    //                                validToLbl.frame = CGRectMake(5, 135, 120, 35);
                    //
                    //                                amtLabel.frame = CGRectMake(5, 180, 120, 35);
                    //                                giftNo.frame = CGRectMake(140, 55, 150, 32);
                    //                                giftType.frame = CGRectMake(90, 15, 163, 27);
                    //                                giftType.backgroundColor = [UIColor whiteColor];
                    //
                    //                                //giftTypeBtn.frame = CGRectMake(233.0, 40.0, 35.0, 60.0);
                    //                                giftTypeBtn.frame = CGRectMake(233.0f, 11.0f,25.0f, 37.0f);
                    //
                    //                                giftValidFrom.frame = CGRectMake(140, 95, 150, 32);
                    //                                giftValidTo.frame = CGRectMake(140, 135, 150, 32);
                    //                                giftAmt.frame = CGRectMake(140, 180, 150, 32);
                    //
                    //                                giftSearchBtn.frame = CGRectMake(233.0, 93.0, 25.0, 35.0);
                    //
                    //                                giftScannerBtn.frame = CGRectMake(233.0, 93.0, 25.0, 35.0);
                    //
                    //                                //                        giftOkBtn.frame = CGRectMake(80.0, 370.0, 60.0, 32.0);
                    //                                //                        giftCancelBtn.frame = CGRectMake(160.0, 370.0, 60.0, 32.0);
                    //
                    //                                giftOkBtn.frame = CGRectMake(10.0, 350.0, 135.0, 30.0);
                    //                                giftOkBtn.layer.cornerRadius = 15.0f;
                    //                                giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
                    //
                    //                                giftCancelBtn.frame = CGRectMake(150.0, 350.0, 135.0, 30.0);
                    //                                giftCancelBtn.layer.cornerRadius = 15.0f;
                    //                                giftCancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
                    //
                    //                                giftView.frame = CGRectMake(10, 10, 300, 400);
                    //                            }
                    //                            else{
                    //                                //                            headerimg.frame = CGRectMake(0, 0, 300, 42);
                    //                                //                            icon.frame = CGRectMake(1, 1, 40, 40);
                    //                                heading.frame = CGRectMake(41, 1, 259, 40);
                    //                                type.frame = CGRectMake(5, 50, 100, 35);
                    //                                validFromLbl.frame = CGRectMake(5, 135, 120, 35);
                    //                                validToLbl.frame = CGRectMake(5, 175, 120, 35);
                    //
                    //                                amtLabel.frame = CGRectMake(5, 210, 120, 35);
                    //                                giftNo.frame = CGRectMake(7, 95, 225, 32);
                    //                                giftType.frame = CGRectMake(90, 55, 163, 27);
                    //
                    //                                //giftTypeBtn.frame = CGRectMake(233.0, 40.0, 35.0, 60.0);
                    //                                giftTypeBtn.frame = CGRectMake(233.0f, 51.0f,25.0f, 37.0f);
                    //
                    //                                giftValidFrom.frame = CGRectMake(100, 135, 170, 32);
                    //                                giftValidTo.frame = CGRectMake(100, 175, 170, 32);
                    //                                giftAmt.frame = CGRectMake(100, 215, 170, 32);
                    //
                    //                                giftSearchBtn.frame = CGRectMake(233.0, 93.0, 25.0, 35.0);
                    //
                    //                                giftScannerBtn.frame = CGRectMake(262.0, 93.0, 25.0, 35.0);
                    //
                    //                                //                        giftOkBtn.frame = CGRectMake(80.0, 370.0, 60.0, 32.0);
                    //                                //                        giftCancelBtn.frame = CGRectMake(160.0, 370.0, 60.0, 32.0);
                    //
                    //                                giftOkBtn.frame = CGRectMake(10.0, 350.0, 135.0, 30.0);
                    //                                giftOkBtn.layer.cornerRadius = 15.0f;
                    //                                giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
                    //
                    //                                giftCancelBtn.frame = CGRectMake(150.0, 350.0, 135.0, 30.0);
                    //                                giftCancelBtn.layer.cornerRadius = 15.0f;
                    //                                giftCancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
                    //
                    //                                giftView.frame = CGRectMake(10, 10, 300, 400);
                    //                            }
                    //
                    //                        }
                    //
                    //                        [giftView addSubview:heading];
                    //                        [giftView addSubview:backbutton];
                    //                        [loyaltyScrollView addSubview:type];
                    //                        [loyaltyScrollView addSubview:validToLbl];
                    //                        [loyaltyScrollView addSubview:validFromLbl];
                    //                        [loyaltyScrollView addSubview:giftNoLbl];
                    //                        [loyaltyScrollView addSubview:amtLabel];
                    //                        [loyaltyScrollView addSubview:giftID];
                    //                        [loyaltyScrollView addSubview:cardID];
                    //                        giftView.hidden = NO;
                    //                        giftNo.hidden = NO;
                    //                        [loyaltyScrollView addSubview:giftNo];
                    //                        giftType.hidden = NO;
                    //                        [loyaltyScrollView addSubview:giftType];
                    //                        [loyaltyScrollView addSubview:giftTypeBtn];
                    //                        [loyaltyScrollView addSubview:giftNo];
                    //                        [loyaltyScrollView addSubview:giftValidFrom];
                    //                        [loyaltyScrollView addSubview:giftValidTo];
                    //                        giftAmt.hidden = NO;
                    //                        [loyaltyScrollView addSubview:giftAmt];
                    //                        //                        [giftView addSubview:giftScannerBtn];
                    //                        // giftScannerBtn.hidden = YES;
                    //                        // [giftView addSubview:giftSearchBtn];
                    //                        [giftView addSubview:loyaltyScrollView];
                    //                        [giftView addSubview:giftOkBtn];
                    //                        [giftView addSubview:giftCancelBtn];
                    //                        [self.view addSubview:giftView];
                    //                        [giftView setNeedsDisplay];
                    //                        [loyaltyScrollView addSubview:avai_points_label];
                    //                        [loyaltyScrollView addSubview:recash_label];
                    //                        [loyaltyScrollView addSubview:avai_points];
                    //                        [loyaltyScrollView addSubview:recash];
                    //
                    //
                    //                        giftView.layer.masksToBounds = YES;
                    //
                    //
                    //
                    //                        //added by Srinivasulu on 24/05/2017....
                    //
                    //
                    //                        if([giftType.text length] > 0){
                    //
                    //
                    //                            if([giftType.text isEqualToString:@"Loyalty Card"]){
                    //                                giftTypeString = @"loyaltycard";
                    //                                giftScannerBtn.tag = 2;
                    //
                    //                            }
                    //                            else  if([giftType.text isEqualToString:@"Loyalty Card"]){
                    //                                giftTypeString = @"coupon";
                    //                                giftScannerBtn.tag = 1;
                    //
                    //                            }
                    //                            else  if([giftType.text isEqualToString:@"Loyalty Card"]){
                    //
                    //                                giftTypeString = @"giftvoucher";
                    //                                giftScannerBtn.tag = 3;
                    //                            }
                    //
                    //                            //                        giftType.text = [giftTypeArrayList objectAtIndex:indexPath.row];
                    //                            giftType.backgroundColor = [UIColor whiteColor];
                    //                            //                        giftView.tag = indexPath.row;
                    //                            [giftTypeTableView setHidden:YES];
                    //                            [editPricePopOver dismissPopoverAnimated:YES];
                    //                            giftTypeBtn.tag = 0;
                    //                            [self showgiftView];
                    //
                    //
                    //
                    //                        }
                    //
                    //
                    //
                    //                        //upto here on 24/05/2017....
                    
                }
            }
            
            
            break;
            
        }
        case 6:
        {
            if (!isOfflineService) {
                [self showCreditNoteView:@""];
            }
            else{
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            break;
        }
        case 7:
        {
            if (smsView.hidden) {
                
                [self.view addSubview:smsView];
                
                if (getSaleId == NO){
                    
                    
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please submit bill id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                else {
                    
                    // get the sms credentials from database ..
                    NSString *provider = NULL;
                    NSString *username = NULL;
                    NSString *password = NULL;
                    
                    NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
                    
                    if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
                        
                        const char *sqlStatement = "select * from SMSCredentials";
                        
                        if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                                
                                username = @((char *)sqlite3_column_text(selectStmt, 0));
                                password = @((char *)sqlite3_column_text(selectStmt, 1));
                                provider = @((char *)sqlite3_column_text(selectStmt, 2));
                            }
                            sqlite3_finalize(selectStmt);
                        }
                    }
                    
                    selectStmt = nil;
                    sqlite3_close(database);
                    
                    if (provider != NULL) {
                        
                        if ([provider isEqualToString:@"SIM Card"]){
                            
                            MFMessageComposeViewController *controller =
                            [[MFMessageComposeViewController alloc] init];
                            if([MFMessageComposeViewController canSendText])
                            {
                                
                                int value;
                                if ((payTxt2.text).intValue > 0) {
                                    value = (payTxt2.text).intValue;
                                }
                                else{
                                    value = (billDueValue.text).intValue;
                                }
                                
                                NSString * bodyMessage = [NSString stringWithFormat:@"%@%d%@%@",@"Omni Retailer \n Your BillDue is : ",value,@"\nYour Total Bill is : ",totalBillValue.text];
                                
                                controller.body = bodyMessage;
                                controller.recipients = @[smsField.text];
                                controller.messageComposeDelegate = self;
                                [self presentViewController:controller animated:YES completion:nil];
                                //[self messageComposeViewController:controller didFinishWithResult:MessageComposeResultSent];
                            }
                        }
                        else{
                            
                            if (username != NULL || password != NULL) {
                                
                                
                                //                                //NSURL *url = http://ubaid.tk/sms/sms.aspx?uid=9966754187&pwd=08931246131&msg=Hello&phone=9966754187&provider=way2sms
                                //
                                //                                NSURLRequest *theRequest = [NSURLRequest requestWithURL:[NSURL URLWithString:@"http://ubaid.tk/sms/sms.aspx?uid=9966754187&pwd=08931246131&msg=Hello&phone=9966754187&provider=way2sms"]];
                                //
                                //                                NSLog(@" %@",theRequest);
                                //
                                //                                NSError *error = nil;
                                //                                NSHTTPURLResponse *responseCode = nil;
                                //
                                //                                NSData *oResponseData = [NSURLConnection sendSynchronousRequest:theRequest returningResponse:&responseCode error:&error];
                                //
                                //                                NSLog(@" %@",oResponseData);
                                
                                
                                baseView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
                                baseView.backgroundColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:0.7];
                                [self.view addSubview:baseView];
                                baseView.hidden = NO;
                                
                                UIView *smsView1 = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 200, 130)];
                                smsView1.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];;
                                smsView1.center = CGPointMake(self.view.frame.size.width/2, self.view.frame.size.height/3);
                                smsView1.layer.cornerRadius = 3.0f;
                                smsView1.layer.borderColor = [UIColor whiteColor].CGColor;
                                smsView1.layer.borderWidth = 1;
                                [baseView addSubview:smsView1];
                                
                                
                                UILabel *smslbl = [[UILabel alloc] initWithFrame:CGRectMake(10, 5, 180, 30)];
                                smslbl.text = @"SMS";
                                smslbl.font = [UIFont boldSystemFontOfSize:18];
                                smslbl.backgroundColor = [UIColor clearColor];
                                smslbl.textColor = [UIColor whiteColor];
                                smslbl.textAlignment = NSTextAlignmentCenter;
                                [smsView1 addSubview:smslbl];
                                
                                
                                
                                backbutton = [[UIButton alloc] init];
                                [backbutton addTarget:self action:@selector(closeSMSView) forControlEvents:UIControlEventTouchUpInside];
                                backbutton.titleLabel.font = [UIFont boldSystemFontOfSize:17.0];
                                UIImage *image = [UIImage imageNamed:@"go-back-icon.png"];
                                [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
                                backbutton.frame = CGRectMake(270.0, 2.0, 27.0, 27.0);
                                [smsView1 addSubview:backbutton];
                                
                                smsField = [[UITextField alloc] initWithFrame:CGRectMake(10, 40, 180, 30)];
                                smsField.backgroundColor=[UIColor whiteColor];
                                smsField.textAlignment = NSTextAlignmentCenter;
                                smsField.layer.cornerRadius = 2.0f;
                                smsField.placeholder=@"Mobile Number";
                                smsField.delegate = self;
                                smsField.keyboardType = UIKeyboardTypeNumberPad;
                                [smsView1 addSubview:smsField];
                                
                                
                                UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
                                button.frame = CGRectMake(60,80,80,30);
                                button.layer.cornerRadius = 8.0f;
                                [button setTitle:@"Send" forState:UIControlStateNormal];
                                button.backgroundColor = [UIColor blackColor];
                                [button addTarget:self
                                           action:@selector(handelSMS)
                                 forControlEvents:UIControlEventTouchUpInside];
                                [smsView1 addSubview:button];
                                
                                
                                
                                [baseView bringSubviewToFront:smsView1];
                                
                            }
                            else{
                                
                                UILabel *label11 = [[UILabel alloc] init];
                                label11.text = @"Please configure \n SMS Provider ";
                                label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                                label11.backgroundColor = [UIColor clearColor];
                                label11.numberOfLines = 2;
                                label11.textAlignment = NSTextAlignmentCenter;
                                label11.textColor = [UIColor blackColor];
                                [smsView addSubview:label11];
                                
                                smsView.hidden = NO;
                                
                                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                                    label11.frame = CGRectMake(0, 10, 530, 180);
                                    smsView.frame = CGRectMake(110, 530, 530, 190);
                                }
                                else {
                                    label11.frame = CGRectMake(0, 10, 220, 70);
                                    smsView.frame = CGRectMake(50, 250, 220, 80);
                                }
                                
                                [smsView addSubview:label11];
                                [self.view addSubview:smsView];
                                
                                aTimer = [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(runScheduledTask:) userInfo:@"smsView" repeats:NO];
                            }
                        }
                    }
                    else{
                        
                        //                        UILabel *label11 = [[UILabel alloc] init];
                        //                        label11.text = @"Please configure \n SMS Provider ";
                        //                        label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                        //                        label11.backgroundColor = [UIColor clearColor];
                        //                        label11.numberOfLines = 2;
                        //                        label11.textAlignment = NSTextAlignmentCenter;
                        //                        label11.textColor = [UIColor blackColor];
                        //                        [smsView addSubview:label11];
                        //
                        //                        smsView.hidden = NO;
                        //
                        //                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        //                            label11.frame = CGRectMake(0, 10, 530, 180);
                        //                            smsView.frame = CGRectMake(110, 530, 530, 190);
                        //                        }
                        //                        else {
                        //                            label11.frame = CGRectMake(0, 10, 220, 70);
                        //                            smsView.frame = CGRectMake(50, 250, 220, 80);
                        //                        }
                        //
                        //                        [smsView addSubview:label11];
                        //                        [self.view addSubview:smsView];
                        //
                        //                        aTimer = [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(runScheduledTask:) userInfo:@"smsView" repeats:NO];
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please configure \n SMS Provider" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                        
                    }
                }
            }
            
            break;
            
        }
        case 8:
        {
            
            CheckWifi *wifi = [[CheckWifi alloc]init];
            BOOL status = [wifi checkWifi];
            
            if (status) {
                
                if (getSaleId == NO) {
                    
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please submit Bill id" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                else{
                    
                    // sending bill throught mail ..
                    mailView.backgroundColor = [UIColor blackColor];
                    mailView.layer.borderColor = [UIColor whiteColor].CGColor;
                    
                    label = [[UILabel alloc] init] ;
                    label.text = @"    Send Email";
                    label.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:18];
                    label.alpha = 0.8f;
                    label.textAlignment = NSTextAlignmentLeft;
                    label.backgroundColor = [UIColor whiteColor];
                    label.textColor = [UIColor blackColor];
                    
                    UILabel *label11 = [[UILabel alloc] init] ;
                    label11.text = @"Enter Email ID:";
                    label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:18];
                    label11.alpha = 0.8f;
                    label11.backgroundColor = [UIColor clearColor];
                    label11.textColor = [UIColor whiteColor];
                    
                    emailTxt = [[UITextField alloc] init];   // delete this line ..
                    emailTxt.borderStyle = UITextBorderStyleRoundedRect;
                    emailTxt.textColor = [UIColor blackColor];
                    emailTxt.font = [UIFont systemFontOfSize:25];
                    emailTxt.backgroundColor = [UIColor whiteColor];
                    emailTxt.text = @"";
                    emailTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
                    emailTxt.autocorrectionType = UITextAutocorrectionTypeNo;
                    emailTxt.keyboardType = UIKeyboardTypeEmailAddress;
                    emailTxt.delegate = self;
                    
                    // back button to close the view ..
                    backbutton = [[UIButton alloc] init] ;
                    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
                    backbutton.tag = 3;
                    UIImage *image = [UIImage imageNamed:@"delete.png"];
                    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
                    
                    // proceed button to continue the transaction ..
                    UIButton *sendBtn = [UIButton buttonWithType:UIButtonTypeCustom];
                    [sendBtn addTarget:self action:@selector(continueFurther:) forControlEvents:UIControlEventTouchUpInside];
                    sendBtn.tag = 3;
                    [sendBtn setTitle:@"Send"    forState:UIControlStateNormal];
                    sendBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
                    //proceedBtn.backgroundColor = [UIColor lightGrayColor];
                    sendBtn.titleLabel.textColor = [UIColor whiteColor];
                    sendBtn.backgroundColor = [UIColor grayColor];
                    
                    mailView.hidden = NO;
                    
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        
                        label.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:30];
                        label.frame = CGRectMake(0, 0, 580, 80);
                        label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:30];
                        label11.frame = CGRectMake(10, 100, 220, 70);
                        emailTxt.frame = CGRectMake(100, 220, 400, 70);
                        backbutton.frame = CGRectMake(510.0, 5.0, 45.0, 45.0);
                        sendBtn.frame = CGRectMake(50.0, 350.0, 480.0, 50.0);
                        sendBtn.layer.cornerRadius = 25.0f;
                        sendBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                        mailView.frame = CGRectMake(230, 60, 580, 420);
                        
                    }
                    else {
                        
                        label.frame = CGRectMake(0, 0, 240, 40);
                        label11.frame = CGRectMake(10, 50, 140, 40);
                        emailTxt.frame = CGRectMake(10, 100, 220, 40);
                        backbutton.frame = CGRectMake(208.0, 6.0, 27.0, 27.0);
                        sendBtn.frame = CGRectMake(10.0, 155.0, 220.0, 30.0);
                        sendBtn.layer.cornerRadius = 15.0f;
                        sendBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
                        mailView.frame = CGRectMake(40, 100, 240, 200);
                        
                    }
                    
                    [mailView addSubview:label];
                    [mailView addSubview:label11];
                    [mailView addSubview:emailTxt];
                    [mailView addSubview:backbutton];
                    [mailView addSubview:sendBtn];
                    [self.view addSubview:mailView];
                    
                    if (tempArrayItems.count >= 1) {
                        
                        getSaleId = YES;
                    }
                    
                }
            }
            else {
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            
            break;
        }
        case 9 :
        {
            
            @try {
                if (tempArrayItems.count==0) {
                    
                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Add items to cart" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                
                //commented by Srinivasulu on 02/05/2017....
                //reason estimation print is not required of  52.... customerID
                
                //                else  if ([billingType isEqualToString:@"pending"] && [billDueValue.text floatValue] >0 && [paymentTypeVal.text isEqualToString:@"Door Delivery"]) {
                //
                //                    MBProgressHUD *HUD_;
                //
                //                    if (![billingScrollView isHidden] && [paymentScrollView isHidden] && [exchangeScrollView isHidden]) {
                //                        HUD_ = [[MBProgressHUD alloc] init];
                //                        [billingScrollView addSubview:HUD_];
                //                    }
                //                    else if ([billingScrollView isHidden] && ![paymentScrollView isHidden] && [exchangeScrollView isHidden]){
                //                        HUD_ = [[MBProgressHUD alloc] initWithView:paymentScrollView];
                //                        [paymentScrollView addSubview:HUD_];
                //                    }
                //                    else if ([billingScrollView isHidden] && [paymentScrollView isHidden] && ![exchangeScrollView isHidden]){
                //                        HUD_ = [[MBProgressHUD alloc] initWithView:exchangeScrollView];
                //                        [exchangeScrollView addSubview:HUD_];
                //                    }
                //                    if (isOfflineService) {
                //                        [self printReceipt:@"Estimate Print"];
                //                    }
                //                    else {
                //                        if ([printCount intValue] == 0) {
                //
                //                            [self printReceipt:@"Estimate Print"];
                //
                //                        }
                //                        else {
                //                            if ([self allowDuplicatePrintingToUser:accessControlActivityArr]) {
                //                                [self printReceipt:@"Estimate Print"];
                //                            }
                //                            else {
                //                                [self logging];
                //                            }
                //                        }
                //                    }
                //
                //                    break;
                //                }
                
                
                //upto here on 02/05/2017....
                
                
                //changed by Srinivasulu on  25/04/2017.....
                
                //                else  if (getSaleId == NO || [billDueValue.text floatValue] > 0) {
                else  if ( (getSaleId == NO || (billDueValue.text).floatValue > 0) && ((![billStatusStr containsString:@"CB"])  && (![paymentTypeVal.text containsString:@"Door Delivery"]))) {
                    
                    //upto here on 25/04/2017....
                    
                    [HUD setHidden:YES];
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Finish the bill" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                
                else {
                    MBProgressHUD *HUD_;
                    
                    //changed by Srinivasulu on 21/12/2017....
                    
                    //                    if (![billingScrollView isHidden] && [paymentScrollView isHidden] && [exchangeScrollView isHidden]) {
                    //                        HUD_ = [[MBProgressHUD alloc] init];
                    //                        [billingScrollView addSubview:HUD_];
                    //                    }
                    //                    else if ([billingScrollView isHidden] && ![paymentScrollView isHidden] && [exchangeScrollView isHidden]){
                    //                        HUD_ = [[MBProgressHUD alloc] initWithView:paymentScrollView];
                    //                        [paymentScrollView addSubview:HUD_];
                    //                    }
                    //                    else if ([billingScrollView isHidden] && [paymentScrollView isHidden] && ![exchangeScrollView isHidden]){
                    //                        HUD_ = [[MBProgressHUD alloc] initWithView:exchangeScrollView];
                    //                        [exchangeScrollView addSubview:HUD_];
                    //                    }
                    
                    if (!billingScrollView.hidden && perviousPaymentTransantionView.hidden && exchangeScrollView.hidden) {
                        HUD_ = [[MBProgressHUD alloc] init];
                        [billingScrollView addSubview:HUD_];
                    }
                    else if (billingScrollView.hidden && !perviousPaymentTransantionView.hidden && exchangeScrollView.hidden){
                        HUD_ = [[MBProgressHUD alloc] initWithView:perviousPaymentTransantionView];
                        [paymentScrollView addSubview:HUD_];
                    }
                    else if (billingScrollView.hidden && perviousPaymentTransantionView.hidden && !exchangeScrollView.hidden){
                        HUD_ = [[MBProgressHUD alloc] initWithView:exchangeScrollView];
                        [exchangeScrollView addSubview:HUD_];
                    }
                    
                    
                    //upto here on 21/12/2017....
                    
                    if (isOfflineService) {
                        [self printReceipt:@"Normal"];
                    }
                    else {
                        if (printCount.intValue == 0) {
                            [self printReceipt:@"Normal"];
                        }
                        else {
                            if ([self allowDuplicatePrintingToUser:accessControlActivityArr]) {
                                
                                [self printReceipt:@"Normal"];
                            }
                            else {
                                
                                [self logging];
                            }
                        }
                    }
                }
            } @catch (NSException *exception) {
                
            } @finally {
                
            }
            
            
            break;
        }
        case 10:{
            
            BillingHome *home = [[BillingHome alloc]init];
            [self.navigationController pushViewController:home animated:YES];
            break;
        }
            
    }
    [segmentedControl reloadInputViews];
}

-(void)populatePaymentView:(NSString *)paymentModeType {
    
    [paymentView setUserInteractionEnabled:TRUE];
    
    if ([(self.view).subviews containsObject:couponView]){
        for (UIView *subview in couponView.subviews) {
            [subview removeFromSuperview];
        }
        [couponView setHidden:YES];
    }
    
    denominationView.hidden = YES;
    
    denomScrollView = [UIScrollView new];
    denomScrollView.backgroundColor = [UIColor clearColor];
    denomScrollView.bounces = NO;
    denomScrollView.scrollEnabled = NO;
    
    
    paymentView.backgroundColor = [UIColor blackColor];
    paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
    label = [[UILabel alloc] init] ;
    label.text = @"    Cash Payment";
    label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
    label.alpha = 0.8f;
    label.textAlignment = NSTextAlignmentLeft;
    label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label.textColor = [UIColor blackColor];
    
    // close button to close the view ..
    backbutton = [[UIButton alloc] init] ;
    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    backbutton.tag = 11;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
    
    billLabel = [[UILabel alloc] init] ;
    billLabel.text = @"Net Pay ";
    billLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billLabel.backgroundColor = [UIColor clearColor];
    billLabel.textColor = [UIColor whiteColor];
    
    paidLbl = [[UILabel alloc] init] ;
    paidLbl.text = @"Paid Cash ";
    paidLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    paidLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    paidLbl.backgroundColor = [UIColor clearColor];
    paidLbl.textColor = [UIColor whiteColor];
    
    billStatusLabel = [[UILabel alloc] init] ;
    billStatusLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billStatusLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billStatusLabel.backgroundColor = [UIColor clearColor];
    billStatusLabel.textColor = [UIColor whiteColor];
    billStatusLabel.hidden = YES;
    
    billStatusLabelValue = [[UILabel alloc] init] ;
    billStatusLabelValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billStatusLabelValue.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billStatusLabelValue.backgroundColor = [UIColor clearColor];
    billStatusLabelValue.textColor = [UIColor whiteColor];
    billStatusLabelValue.hidden = YES;
    
    payTxt1 = [[UITextField alloc] init];
    payTxt1.borderStyle = UITextBorderStyleRoundedRect;
    payTxt1.textColor = [UIColor blackColor];
    payTxt1.font = [UIFont systemFontOfSize:18.0];
    payTxt1.backgroundColor = [UIColor whiteColor];
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    payTxt1.text = billDueValue.text;
    [payTxt1 setEnabled:FALSE];
    
    
    payTxt2 = [[UITextField alloc] init];
    
    payTxt2.borderStyle = UITextBorderStyleRoundedRect;
    payTxt2.textColor = [UIColor blackColor];
    payTxt2.font = [UIFont systemFontOfSize:18.0];
    payTxt2.backgroundColor = [UIColor whiteColor];
    payTxt2.text = paidVal.text;
    
    if ((changeReturnVal.text).floatValue>0 || paidVal == nil) {
        payTxt2.text = billDueValue.text;
    }
    
    if ([paymentModeType isKindOfClass:[NSString class]]) {
        
        if ([paymentModeType caseInsensitiveCompare:@"Food Coupons"] != NSOrderedSame) {
            
            if ((changeReturnVal.text).floatValue>0) {
                payTxt2.text = billDueValue.text;
                finalBillDue1 = @"0.00";
                
                
            }
            else if(![paymentModeType isEqualToString:@"QUICKCASH"])
            {
                finalBillDue1 = [[NSString stringWithFormat:@"%.2f",((billDueValue.text).floatValue - (paidVal.text).floatValue)] copy];
            }
            else if ([paymentModeType isEqualToString:@"QUICKCASH"]){
                payTxt2.text = billDueValue.text;
            }
        }
        
        
    }
    
    
    
    payTxt2.clearButtonMode = UITextFieldViewModeWhileEditing;
    payTxt2.autocorrectionType = UITextAutocorrectionTypeNo;
    [payTxt2 addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
    numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                             [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar1 sizeToFit];
    payTxt2.inputAccessoryView = numberToolbar1;
    payTxt2.keyboardType = UIKeyboardTypeNumberPad;
    payTxt2.delegate = self;
    
    
    UILabel *salesPersonLbl = [[UILabel alloc] init] ;
    salesPersonLbl.text = @"Sales Person ";
    salesPersonLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    salesPersonLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    salesPersonLbl.backgroundColor = [UIColor clearColor];
    salesPersonLbl.textColor = [UIColor whiteColor];
    
    salesPersonId = [[UITextField alloc] init];
    salesPersonId.borderStyle = UITextBorderStyleRoundedRect;
    salesPersonId.textColor = [UIColor blackColor];
    salesPersonId.font = [UIFont systemFontOfSize:18.0];
    salesPersonId.backgroundColor = [UIColor whiteColor];
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    salesPersonId.placeholder = @"select sales person";
    salesPersonId.text = salesPersonIdStr;
    [salesPersonId setEnabled:FALSE];
    
    
    phnotext = [[UITextField alloc] init];
    
    phnotext.borderStyle = UITextBorderStyleRoundedRect;
    phnotext.autocorrectionType = UITextAutocorrectionTypeNo;
    phnotext.keyboardType = UIKeyboardTypeNumberPad;
    phnotext.returnKeyType = UIReturnKeyDone;
    phnotext.clearButtonMode = UITextFieldViewModeWhileEditing;
    phnotext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    [phnotext addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    //    phnotext.delegate = self;
    // phnotext.tag = 111;
    phnotext.placeholder = @"Phone Number";
    phnotext.delegate = self;
    
    //changed by Srinivasulu on 15/02/2018....
    
    if(![customerPhoneValue.text isEqualToString:@"--"])
        phnotext.text = customerPhoneValue.text;
    
    //upto here on 15/02/2018....
    
    
    phonelbl = [[UILabel alloc] init] ;
    
    phonelbl.text= @"Phone";
    phonelbl.textColor = [UIColor whiteColor];
    phonelbl.backgroundColor = [UIColor clearColor];
    
    emaillbl = [[UILabel alloc] init] ;
    
    emaillbl.text= @"Email";
    emaillbl.textColor = [UIColor whiteColor];
    emaillbl.backgroundColor = [UIColor clearColor];
    
    namelbl = [[UILabel alloc] init] ;
    
    namelbl.text= @"Name ";
    namelbl.textColor = [UIColor whiteColor];
    namelbl.backgroundColor = [UIColor clearColor];
    
    
    emailtext = [[UITextField alloc] init];
    emailtext.borderStyle = UITextBorderStyleRoundedRect;
    emailtext.autocorrectionType = UITextAutocorrectionTypeNo;
    emailtext.keyboardType = UIKeyboardTypeEmailAddress;
    emailtext.returnKeyType = UIReturnKeyDone;
    emailtext.clearButtonMode = UITextFieldViewModeWhileEditing;
    emailtext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    emailtext.delegate = self;
    emailtext.placeholder = @"Customer Mail ID";
    emailtext.autocapitalizationType = UITextAutocapitalizationTypeNone;
    emailtext.text  = @"";
    
    
    nametext = [[UITextField alloc] init];
    
    nametext.borderStyle = UITextBorderStyleRoundedRect;
    nametext.autocorrectionType = UITextAutocorrectionTypeNo;
    nametext.keyboardType = UIKeyboardTypeDefault;
    nametext.returnKeyType = UIReturnKeyDone;
    nametext.clearButtonMode = UITextFieldViewModeWhileEditing;
    nametext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    nametext.placeholder = @"Customer Name";
    nametext.delegate = self;
    nametext.text = @"";
    
    
    payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    // pay the cash button to continue the transaction ..
    [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
    payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    payBtn.titleLabel.textColor = [UIColor whiteColor];
    payBtn.backgroundColor = [UIColor grayColor];
    
    
    //added & changed by Srinivasulu on 23/03/2018.. sir raised this....
    //    [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
    [payBtn setTitle:NSLocalizedString(@"submit_", nil)    forState:UIControlStateNormal];
    
    UIButton *cancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    //    [cancelBtn setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];
    cancelBtn.backgroundColor = [UIColor grayColor];
    [cancelBtn setTitle:NSLocalizedString(@"cancel_", nil)  forState:UIControlStateNormal];
    //    cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    [cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [cancelBtn addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    cancelBtn.tag = 11;
    
    
    UILabel * billRemarksLbl;
    billRemarksLbl = [[UILabel alloc] init] ;
    billRemarksLbl.text = NSLocalizedString(@"remarks", nil);
    billRemarksLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
    billRemarksLbl.backgroundColor = [UIColor clearColor];
    billRemarksLbl.textColor = [UIColor whiteColor];
    
    billRemarksTxt = [[UITextField alloc] init];
    billRemarksTxt.borderStyle = UITextBorderStyleRoundedRect;
    billRemarksTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    billRemarksTxt.keyboardType = UIKeyboardTypeDefault;
    billRemarksTxt.returnKeyType = UIReturnKeyDone;
    billRemarksTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    nametext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    billRemarksTxt.placeholder = NSLocalizedString(@"remarks", nil);
    billRemarksTxt.delegate = self;
    billRemarksTxt.text = billRemarksTextView.text;
    
    //upto here on 23/03/2018....
    
    
    UIButton *back;
    if ([paymentModeType isKindOfClass:[NSString class]]) {
        if ([paymentModeType isEqualToString:@"CARD"]) {
            label.text = @"    Card Payment";
            payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
            payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            payBtn.titleLabel.textColor = [UIColor whiteColor];
            payBtn.backgroundColor = [UIColor grayColor];
            [payTxt2 setUserInteractionEnabled:TRUE];
            
            payTxt2.text = billDueValue.text;
            
            cardradioBtn1 = [[UIButton alloc] init] ;
            [cardradioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
            cardradioBtn1.backgroundColor = [UIColor clearColor];
            cardradioBtn1.layer.masksToBounds = YES;
            cardradioBtn1.layer.cornerRadius = 5.0f;
            cardradioBtn1.tag = 0;
            cardradioBtn1.hidden = NO;
            [cardradioBtn1 addTarget:self action:@selector(cardRadioAction:) forControlEvents:UIControlEventTouchUpInside];
            
            cardradioBtn2 = [[UIButton alloc] init] ;
            [cardradioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
            //cancelOrder.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            cardradioBtn2.backgroundColor = [UIColor clearColor];
            cardradioBtn2.layer.masksToBounds = YES;
            cardradioBtn2.layer.cornerRadius = 5.0f;
            cardradioBtn2.tag = 1;
            cardradioBtn2.hidden = NO;
            [cardradioBtn2 addTarget:self action:@selector(cardRadioAction:) forControlEvents:UIControlEventTouchUpInside];
            
            UILabel *takeAway = [[UILabel alloc] init] ;
            takeAway.text = @"Mobile POS";
            takeAway.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
            takeAway.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
            takeAway.backgroundColor = [UIColor clearColor];
            takeAway.hidden = NO;
            takeAway.textColor = [UIColor whiteColor];
            
            UILabel *doorDel = [[UILabel alloc] init] ;
            doorDel.text = @"POS";
            doorDel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
            doorDel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
            doorDel.backgroundColor = [UIColor clearColor];
            doorDel.textColor = [UIColor whiteColor];
            doorDel.hidden = NO;
            
            
            payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            
            // pay the cash button to continue the transaction ..
            if([cardPaymentSelection isEqualToString:@"POS"]) {
                
                [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
                [payBtn setTitle:@"Continue" forState:UIControlStateNormal];
            }
            else {
                [payBtn addTarget:self action:@selector(cardPaymentCall) forControlEvents:UIControlEventTouchUpInside];
            }
            [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
            payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            payBtn.titleLabel.textColor = [UIColor whiteColor];
            payBtn.backgroundColor = [UIColor grayColor];
            type_Of_Payment = [[NSMutableString alloc] initWithString:@"Credit/Debit"];
            
            CheckWifi *wifi = [[CheckWifi alloc]init];
            BOOL status = [wifi checkWifi];
            if (!status) {
                
                cardradioBtn2.userInteractionEnabled = NO;
            }
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                cardradioBtn1.frame = CGRectMake(15,100, 30, 30);
                takeAway.frame = CGRectMake(450, 95, 200, 40);
                takeAway.font = [UIFont systemFontOfSize:25.0];
                cardradioBtn2.frame = CGRectMake(400, 100, 30, 30);
                doorDel.frame =  CGRectMake(60, 95, 150, 40);
                doorDel.font = [UIFont systemFontOfSize:25.0];
            }
            
            [paymentView addSubview:cardradioBtn1];
            [paymentView addSubview:takeAway];
            [paymentView addSubview:cardradioBtn2];
            [paymentView addSubview:doorDel];
            
        }
        else if ([paymentModeType isEqualToString:@"Food Coupons"]) {
            if ([paymentModeType isEqualToString:@"Food Coupons"]) {
                
                [payTxt2 setUserInteractionEnabled:FALSE];
                
            }
            
            //-- --
            
            label.text = @"    Coupon Payment";
            payTxt2.text = [NSString stringWithFormat:@"%.2f",(totalCoupValue.text).floatValue];
            
            //added by Srinivasulu on 27/11/2017....
            
            payTxt2.text = [NSString stringWithFormat:@"%.2f",(otherPaymentTotalAmountLbl.text).floatValue];
            
            finalBillDue1 = billDueValue.text;
            
            if(otherPaymentTotalAmountLbl != nil){
                payTxt2.text = [NSString stringWithFormat:@"%.2f",(otherPaymentTotalAmountLbl.text).floatValue];
                
                //below line need to be changed....
                if( ((billDueValue.text).floatValue - (otherPaymentTotalAmountLbl.text).floatValue) < 0)
                    payTxt2.text = billDueValue.text;
                
                
                if( ((billDueValue.text).floatValue - (otherPaymentTotalAmountLbl.text).floatValue) > 0 ){
                    
                    finalBillDue1 =  [NSString stringWithFormat:@"%.2f",((billDueValue.text).floatValue - (otherPaymentTotalAmountLbl.text).floatValue) ];
                }
                else{
                    
                    finalBillDue1 = @"0.00";
                }
            }
            
            //upto here on 27/11/2017....
            
        }
        else {
            payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
            [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
            payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            payBtn.titleLabel.textColor = [UIColor whiteColor];
            payBtn.backgroundColor = [UIColor grayColor];
            
            back = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            [back addTarget:self action:@selector(backToDenominatio) forControlEvents:UIControlEventTouchUpInside];
            [back setTitle:@"Back"    forState:UIControlStateNormal];
            back.titleLabel.textAlignment = NSTextAlignmentCenter;
            back.titleLabel.textColor = [UIColor whiteColor];
            back.backgroundColor = [UIColor grayColor];
            [payTxt2 setUserInteractionEnabled:TRUE];
            
            if ([paymentModeType isEqualToString:@"QUICKPAY"]) {
                payTxt2.userInteractionEnabled = TRUE;
            }
        }
    }
    else {
        payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
        [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
        payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        payBtn.titleLabel.textColor = [UIColor whiteColor];
        payBtn.backgroundColor = [UIColor grayColor];
        
        back = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [back addTarget:self action:@selector(backToDenominatio) forControlEvents:UIControlEventTouchUpInside];
        [back setTitle:@"Back"    forState:UIControlStateNormal];
        back.titleLabel.textAlignment = NSTextAlignmentCenter;
        back.titleLabel.textColor = [UIColor whiteColor];
        back.backgroundColor = [UIColor grayColor];
    }
    
    //changed by Srinivasulu on 15/02/2018....
    
    if(![customerPhoneValue.text isEqualToString:@"--"])
        phnotext.text = [customerPhoneValue.text copy];
    
    
    streetlbl = [[UILabel alloc] init] ;
    
    streetlbl.text= @"Street";
    streetlbl.textColor = [UIColor whiteColor];
    streetlbl.backgroundColor = [UIColor clearColor];
    [denomScrollView addSubview:streetlbl];
    
    localitylbl = [[UILabel alloc] init] ;
    
    localitylbl.text= @"Locality";
    localitylbl.textColor = [UIColor whiteColor];
    localitylbl.backgroundColor = [UIColor clearColor];
    [denomScrollView addSubview:localitylbl];
    
    citylbl = [[UILabel alloc] init] ;
    
    citylbl.text= @"City";
    citylbl.backgroundColor = [UIColor clearColor];
    citylbl.textColor = [UIColor whiteColor];
    [denomScrollView addSubview:citylbl];
    
    pinlbl = [[UILabel alloc] init] ;
    
    pinlbl.text= @"PIN";
    pinlbl.textColor = [UIColor whiteColor];
    pinlbl.backgroundColor = [UIColor clearColor] ;
    [denomScrollView addSubview:pinlbl];
    
    
    streettext = [[UITextField alloc] init];
    
    streettext.borderStyle = UITextBorderStyleRoundedRect;
    streettext.autocorrectionType = UITextAutocorrectionTypeNo;
    streettext.keyboardType = UIKeyboardTypeDefault;
    streettext.returnKeyType = UIReturnKeyDone;
    streettext.clearButtonMode = UITextFieldViewModeWhileEditing;
    streettext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    streettext.delegate = self;
    streettext.placeholder = @"Enter street";
    locltytext = [[UITextField alloc] init];
    
    locltytext.borderStyle = UITextBorderStyleRoundedRect;
    locltytext.autocorrectionType = UITextAutocorrectionTypeNo;
    locltytext.keyboardType = UIKeyboardTypeDefault;
    locltytext.returnKeyType = UIReturnKeyDone;
    locltytext.clearButtonMode = UITextFieldViewModeWhileEditing;
    locltytext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    locltytext.delegate = self;
    locltytext.placeholder = @"Enter locality";
    citytext = [[UITextField alloc] init];
    
    citytext.borderStyle = UITextBorderStyleRoundedRect;
    citytext.autocorrectionType = UITextAutocorrectionTypeNo;
    citytext.keyboardType = UIKeyboardTypeDefault;
    citytext.returnKeyType = UIReturnKeyDone;
    citytext.clearButtonMode = UITextFieldViewModeWhileEditing;
    citytext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    citytext.delegate = self;
    citytext.placeholder = @"Enter city";
    
    pintext = [[UITextField alloc] init];
    
    pintext.borderStyle = UITextBorderStyleRoundedRect;
    pintext.autocorrectionType = UITextAutocorrectionTypeNo;
    pintext.keyboardType = UIKeyboardTypeDefault;
    pintext.returnKeyType = UIReturnKeyDone;
    pintext.clearButtonMode = UITextFieldViewModeWhileEditing;
    pintext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    pintext.delegate = self;
    pintext.placeholder = @"Enter pin";
    
    //changed by Srinivasulu on 04/05/2017....
    
    nametext.placeholder = @"First Name";
    
    citylbl.text= @"Landmark";
    pinlbl.text= @"City / PIN";
    
    
    
    
    
    lastNameTxt = [[UITextField alloc] init];
    lastNameTxt.borderStyle = UITextBorderStyleRoundedRect;
    lastNameTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    lastNameTxt.keyboardType = UIKeyboardTypeEmailAddress;
    lastNameTxt.returnKeyType = UIReturnKeyDone;
    lastNameTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    lastNameTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    lastNameTxt.delegate = self;
    lastNameTxt.placeholder = @"Last Name";
    lastNameTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    
    doorNoTxt = [[UITextField alloc] init];
    doorNoTxt.borderStyle = UITextBorderStyleRoundedRect;
    doorNoTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    doorNoTxt.keyboardType = UIKeyboardTypeEmailAddress;
    doorNoTxt.returnKeyType = UIReturnKeyDone;
    doorNoTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    doorNoTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    doorNoTxt.delegate = self;
    doorNoTxt.placeholder = @"Door No";
    doorNoTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    landMarkTxt = [[UITextField alloc] init];
    landMarkTxt.borderStyle = UITextBorderStyleRoundedRect;
    landMarkTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    landMarkTxt.keyboardType = UIKeyboardTypeEmailAddress;
    landMarkTxt.returnKeyType = UIReturnKeyDone;
    landMarkTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    landMarkTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    landMarkTxt.delegate = self;
    landMarkTxt.placeholder = @"Landmark";
    landMarkTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    //upto here on 04/05/2017....
    
    
    [denomScrollView addSubview:streettext];
    
    
    [denomScrollView addSubview:locltytext];
    
    
    [denomScrollView addSubview:citytext];
    
    [denomScrollView addSubview:pintext];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            denomScrollView.frame = CGRectMake(0.0, 0.0, 800.0, 550.0);
            denomScrollView.contentSize = CGSizeMake(800.0, 650.0);
            paymentView.frame = CGRectMake(100, 80, 800, 550);
            payBtn.frame = CGRectMake(150.0, 450, 500, 60.0);
            label.frame = CGRectMake(0, 0, 800, 80);
            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
            
            label.font = [UIFont systemFontOfSize:25];
            
            billStatusLabel.font = [UIFont systemFontOfSize:20];
            billStatusLabel.frame = CGRectMake(15,220,120,30);
            billStatusLabelValue.font = [UIFont systemFontOfSize:20];
            billStatusLabelValue.frame = CGRectMake(210,160,160,30);
            billLabel.font = [UIFont systemFontOfSize:20];
            billLabel.frame = CGRectMake(15, 100.0, 120, 30);
            paidLbl.font = [UIFont systemFontOfSize:20];
            paidLbl.frame = CGRectMake(15, 170.0, 120, 30);
            
            salesPersonLbl.font = [UIFont systemFontOfSize:20];
            salesPersonLbl.frame = CGRectMake(15, 240.0, 120, 30);
            
            
            
            phonelbl.font = [UIFont systemFontOfSize:20];
            phonelbl.frame = CGRectMake(15, 310, 120, 30);
            emaillbl.font = [UIFont systemFontOfSize:20];
            emaillbl.frame = CGRectMake(15, 380, 120, 30);
            
            payTxt1.font = [UIFont systemFontOfSize:20];
            payTxt1.frame = CGRectMake(160, 100.0, 200, 40);
            payTxt2.font = [UIFont systemFontOfSize:20];
            payTxt2.frame = CGRectMake(160, 170.0, 200, 40);
            salesPersonId.font = [UIFont systemFontOfSize:20];
            salesPersonId.frame = CGRectMake(160, 240, 200, 40);
            phnotext.frame = CGRectMake(160.0, 310, 200, 40);
            phnotext.font = [UIFont systemFontOfSize:20];
            emailtext.frame = CGRectMake(160.0, 380, 200, 40);
            emailtext.font = [UIFont systemFontOfSize:20.0];
            
            namelbl.font = [UIFont systemFontOfSize:20];
            namelbl.frame = CGRectMake(400, 100, 120, 30);
            
            streetlbl.font = [UIFont systemFontOfSize:20.0];
            streetlbl.frame = CGRectMake(400, 170, 120, 30);
            localitylbl.font = [UIFont systemFontOfSize:20.0];
            localitylbl.frame = CGRectMake(400, 240, 120, 30);
            citylbl.font = [UIFont systemFontOfSize:20.0];
            citylbl.frame = CGRectMake(400, 310, 120, 30);
            pinlbl.font = [UIFont systemFontOfSize:20.0];
            pinlbl.frame = CGRectMake(400, 380, 120, 30);
            
            nametext.frame = CGRectMake(530, 100, 200, 40);
            nametext.font = [UIFont systemFontOfSize:20];
            
            streettext.font = [UIFont systemFontOfSize:20];
            streettext.frame = CGRectMake(530, 170, 200, 40);
            locltytext.font = [UIFont systemFontOfSize:20];
            locltytext.frame = CGRectMake(530, 240, 200, 40);
            citytext.frame = CGRectMake(530, 310, 200.0, 40);
            citytext.font = [UIFont systemFontOfSize:20];
            pintext.frame = CGRectMake(530, 380, 200.0, 40);
            pintext.font = [UIFont systemFontOfSize:20.0];
            
            
            if ([paymentModeType isKindOfClass:[NSString class]]) {
                if ([paymentModeType isEqualToString:@"CARD"]) {
                    denomScrollView.frame = CGRectMake(0.0, 135, 800.0, 450.0);
                    denomScrollView.contentSize = CGSizeMake(800.0, 650.0);
                    paymentView.frame = CGRectMake(100, 80, 800, 600);
                    
                    payBtn.frame = CGRectMake(150.0, 390, 500, 50.0);
                    label.frame = CGRectMake(0, 0, 800, 80);
                    backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                    
                    label.font = [UIFont systemFontOfSize:25];
                    
                    billStatusLabel.font = [UIFont systemFontOfSize:20];
                    billStatusLabel.frame = CGRectMake(15,150,120,30);
                    billStatusLabelValue.font = [UIFont systemFontOfSize:20];
                    billStatusLabelValue.frame = CGRectMake(210,90,160,30);
                    billLabel.font = [UIFont systemFontOfSize:20];
                    billLabel.frame = CGRectMake(15, 30, 120, 30);
                    paidLbl.font = [UIFont systemFontOfSize:20];
                    paidLbl.frame = CGRectMake(15, 100, 120, 30);
                    
                    salesPersonLbl.font = [UIFont systemFontOfSize:20];
                    salesPersonLbl.frame = CGRectMake(15, 170, 120, 30);
                    
                    phonelbl.font = [UIFont systemFontOfSize:20];
                    phonelbl.frame = CGRectMake(15, 240, 120, 30);
                    emaillbl.font = [UIFont systemFontOfSize:20];
                    emaillbl.frame = CGRectMake(15, 310, 120, 30);
                    
                    payTxt1.font = [UIFont systemFontOfSize:20];
                    payTxt1.frame = CGRectMake(160, 30, 200, 40);
                    payTxt2.font = [UIFont systemFontOfSize:20];
                    payTxt2.frame = CGRectMake(160, 100, 200, 40);
                    
                    salesPersonId.font = [UIFont systemFontOfSize:20];
                    salesPersonId.frame = CGRectMake(160, 170, 200, 40);
                    
                    phnotext.frame = CGRectMake(160.0, 240, 200, 40);
                    phnotext.font = [UIFont systemFontOfSize:20];
                    emailtext.frame = CGRectMake(160.0, 310, 200, 40);
                    emailtext.font = [UIFont systemFontOfSize:20.0];
                    
                    namelbl.font = [UIFont systemFontOfSize:20];
                    namelbl.frame = CGRectMake(400, 30, 120, 30);
                    
                    streetlbl.font = [UIFont systemFontOfSize:20.0];
                    streetlbl.frame = CGRectMake(400, 100, 120, 30);
                    localitylbl.font = [UIFont systemFontOfSize:20.0];
                    localitylbl.frame = CGRectMake(400, 170, 120, 30);
                    citylbl.font = [UIFont systemFontOfSize:20.0];
                    citylbl.frame = CGRectMake(400, 240, 120, 30);
                    pinlbl.font = [UIFont systemFontOfSize:20.0];
                    pinlbl.frame = CGRectMake(400, 310, 120, 30);
                    
                    nametext.frame = CGRectMake(530, 30, 200, 40);
                    nametext.font = [UIFont systemFontOfSize:20];
                    
                    streettext.font = [UIFont systemFontOfSize:20];
                    streettext.frame = CGRectMake(530, 100, 200, 40);
                    locltytext.font = [UIFont systemFontOfSize:20];
                    locltytext.frame = CGRectMake(530, 170, 200, 40);
                    citytext.frame = CGRectMake(530, 240, 200.0, 40);
                    citytext.font = [UIFont systemFontOfSize:20];
                    pintext.frame = CGRectMake(530, 310, 200.0, 40);
                    pintext.font = [UIFont systemFontOfSize:20.0];
                    
                }
            }
            
            
            
            payBtn.layer.cornerRadius = 25.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
            if ([paymentType isKindOfClass:[UIButton class]]) {
                back.layer.cornerRadius = 25.0f;
                back.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                payBtn.frame = CGRectMake(450.0, 450, 200, 60.0);
                back.frame = CGRectMake(100.0, 450, 200, 60.0);
                [denomScrollView addSubview:back];
            }
            
            
            //changed by Srinivasulu on 02/05/2017....
            
            
            
            nametext.frame = CGRectMake( 500, payTxt1.frame.origin.y, 115, 40);
            nametext.font = [UIFont systemFontOfSize:20];
            
            lastNameTxt.frame = CGRectMake( nametext.frame.origin.x + nametext.frame.size.width + 10, nametext.frame.origin.y, 150, nametext.frame.size.height);
            lastNameTxt.font = [UIFont systemFontOfSize:20];
            
            
            doorNoTxt.frame = CGRectMake( nametext.frame.origin.x, payTxt2.frame.origin.y, nametext.frame.size.width, nametext.frame.size.height);
            doorNoTxt.font = [UIFont systemFontOfSize:20];
            streettext.frame = CGRectMake( lastNameTxt.frame.origin.x, doorNoTxt.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            streettext.font = [UIFont systemFontOfSize:20];
            
            locltytext.frame = CGRectMake( nametext.frame.origin.x, salesPersonId.frame.origin.y, (streettext.frame.origin.x +  streettext.frame.size.width) - doorNoTxt.frame.origin.x, nametext.frame.size.height);
            locltytext.font = [UIFont systemFontOfSize:20];
            
            landMarkTxt.frame = CGRectMake( locltytext.frame.origin.x, phnotext.frame.origin.y , locltytext.frame.size.width, nametext.frame.size.height);
            landMarkTxt.font = [UIFont systemFontOfSize:20];
            
            
            citytext.frame = CGRectMake( nametext.frame.origin.x, emailtext.frame.origin.y, nametext.frame.size.width, nametext.frame.size.height);
            citytext.font = [UIFont systemFontOfSize:20];
            pintext.frame = CGRectMake( lastNameTxt.frame.origin.x, citytext.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            pintext.font = [UIFont systemFontOfSize:20];
            
            //upto here on 02/05/2017.......
            
            
            //added & changed by Srinivasulu on 23/03/2018.. sir raised this....
            
            billRemarksLbl.font = [UIFont systemFontOfSize:20.0];
            //            billRemarksLbl.frame = CGRectMake( emaillbl.frame.origin.x, payBtn.frame.origin.y, emaillbl.frame.size.width, emaillbl.frame.size.height);
            billRemarksLbl.frame = CGRectMake( emaillbl.frame.origin.x, emailtext.frame.origin.y + 70, emaillbl.frame.size.width, emaillbl.frame.size.height);
            billRemarksTxt.frame = CGRectMake( emailtext.frame.origin.x, billRemarksLbl.frame.origin.y, emailtext.frame.size.width, emailtext.frame.size.height);
            billRemarksTxt.font = [UIFont systemFontOfSize:20];
            
            cancelBtn.frame = CGRectMake( pintext.frame.origin.x, billRemarksLbl.frame.origin.y, pintext.frame.size.width, 45);
            
            payBtn.frame = CGRectMake( citytext.frame.origin.x + citytext.frame.size.width - (cancelBtn.frame.size.width + 25), billRemarksLbl.frame.origin.y, cancelBtn.frame.size.width, cancelBtn.frame.size.height);
            
            payBtn.layer.cornerRadius = 10.0f;
            
            cancelBtn.layer.cornerRadius = 10.0f;
            cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            paymentScrollView.contentSize = CGSizeMake(800.0, cancelBtn.frame.origin.y + cancelBtn.frame.size.height + 20);
            
            [payBtn setTitle:NSLocalizedString(@"submit_", nil)    forState:UIControlStateNormal];
            
            
            if ([paymentType isKindOfClass:[UIButton class]]) {
                
                cancelBtn.hidden = YES;
                back.frame = cancelBtn.frame;
            }
            else if ([paymentModeType caseInsensitiveCompare:@"cash"] == NSOrderedSame) {
                
                cancelBtn.hidden = YES;
                back.frame = cancelBtn.frame;
            }
            //upto here on 23/03/2018....
            
        }
        else {
            paymentView.frame = CGRectMake(20, 140, 730, 750.0);
            denomScrollView.frame = CGRectMake(0.0, 0.0, 730.0, 750.0);
            denomScrollView.contentSize = CGSizeMake(730.0, 850.0);
            payBtn.frame = CGRectMake(50.0, 680.0, 630.0, 60.0);
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            
            label.font = [UIFont systemFontOfSize:25];
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            billStatusLabel.font = [UIFont systemFontOfSize:25];
            billStatusLabel.frame = CGRectMake(15,220,220,45);
            billStatusLabelValue.font = [UIFont systemFontOfSize:25];
            billStatusLabelValue.frame = CGRectMake(210,220,160,45);
            billLabel.font = [UIFont systemFontOfSize:25];
            billLabel.frame = CGRectMake(15, 100.0, 160, 45);
            paidLbl.font = [UIFont systemFontOfSize:25];
            paidLbl.frame = CGRectMake(15, 170.0, 160, 45);
            phonelbl.font = [UIFont systemFontOfSize:25.0];
            phonelbl.frame = CGRectMake(15, 270.0, 160.0, 45);
            emaillbl.font = [UIFont systemFontOfSize:25.0];
            emaillbl.frame = CGRectMake(15, 340.0, 160.0, 45);
            namelbl.font = [UIFont systemFontOfSize:25.0];
            namelbl.frame = CGRectMake(15, 410.0, 160.0, 45);
            payTxt1.font = [UIFont systemFontOfSize:25];
            payTxt1.frame = CGRectMake(200, 100.0, 300, 45);
            payTxt2.font = [UIFont systemFontOfSize:25];
            payTxt2.frame = CGRectMake(200, 170.0, 300, 45);
            phnotext.frame = CGRectMake(200.0, 270.0, 300.0, 45);
            phnotext.font = [UIFont systemFontOfSize:25];
            emailtext.frame = CGRectMake(200.0, 340.0, 300.0, 45);
            emailtext.font = [UIFont systemFontOfSize:25.0];
            nametext.frame = CGRectMake(200.0, 410.0, 300.0, 45);
            nametext.font = [UIFont systemFontOfSize:25];
            
            streetlbl.font = [UIFont systemFontOfSize:25.0];
            streetlbl.frame = CGRectMake(15, 480.0, 160.0, 45);
            localitylbl.font = [UIFont systemFontOfSize:25.0];
            localitylbl.frame = CGRectMake(15, 550.0, 160.0, 45);
            citylbl.font = [UIFont systemFontOfSize:25.0];
            citylbl.frame = CGRectMake(15, 620.0, 160.0, 45);
            pinlbl.font = [UIFont systemFontOfSize:25.0];
            pinlbl.frame = CGRectMake(15, 690.0, 160.0, 45);
            
            streettext.font = [UIFont systemFontOfSize:25];
            streettext.frame = CGRectMake(200, 480.0, 300, 45);
            locltytext.font = [UIFont systemFontOfSize:25];
            locltytext.frame = CGRectMake(200, 550.0, 300, 45);
            citytext.frame = CGRectMake(200.0, 620.0, 300.0, 45);
            citytext.font = [UIFont systemFontOfSize:25];
            pintext.frame = CGRectMake(200.0, 690.0, 300.0, 45);
            pintext.font = [UIFont systemFontOfSize:25.0];
            
            
            payBtn.frame = CGRectMake(50.0, 755.0, 630.0, 50.0);
            payBtn.layer.cornerRadius = 25.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            paymentView.frame = CGRectMake(20, 140, 730, 820.0);
            
            
        }
        
        
        // img1.frame = CGRectMake(0, 0, 630, 460);
        
        
    }
    else {
        
        if (version >= 8.0 ) {
            paymentView.backgroundColor = [UIColor blackColor];
            label.frame = CGRectMake(0, 0, 300, 40);
            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            billLabel.frame = CGRectMake(10, 50, 80, 30);
            paidLbl.frame = CGRectMake(10, 100, 120, 30);
            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
            payTxt1.frame = CGRectMake(140, 50, 150, 35);
            payTxt2.frame = CGRectMake(140, 100, 150, 35);
            //                                payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
            //                                payBtn.layer.cornerRadius = 15.0f;
            //                                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            phonelbl.frame = CGRectMake(10, 150.0, 160.0, 30);
            emaillbl.frame = CGRectMake(10, 195.0, 160.0, 30);
            namelbl.frame = CGRectMake(10,240.0, 160.0, 45);
            phnotext.frame = CGRectMake(140.0, 150.0, 150.0, 35);
            emailtext.frame = CGRectMake(140.0, 195.0, 150.0, 35);
            nametext.frame = CGRectMake(140.0, 240.0, 150.0, 35);
            
            streetlbl.frame = CGRectMake(10, 285, 160.0, 30);
            localitylbl.frame = CGRectMake(10, 330, 160.0, 30);
            citylbl.frame = CGRectMake(10, 375, 160.0, 35);
            pinlbl.frame = CGRectMake(10, 420, 160.0, 35);
            
            
            streetlbl.font = [UIFont systemFontOfSize:15];
            localitylbl.font = [UIFont systemFontOfSize:15];
            citylbl.font = [UIFont systemFontOfSize:15];
            pinlbl.font = [UIFont systemFontOfSize:15];
            
            streettext.font = [UIFont systemFontOfSize:15];
            streettext.frame = CGRectMake(140, 285, 150, 30);
            locltytext.font = [UIFont systemFontOfSize:15];
            locltytext.frame = CGRectMake(140, 330, 150, 30);
            citytext.frame = CGRectMake(140, 375, 150, 30);
            citytext.font = [UIFont systemFontOfSize:15];
            pintext.frame = CGRectMake(140, 420, 150, 30);
            pintext.font = [UIFont systemFontOfSize:15];
            
            payBtn.frame = CGRectMake(10.0, 455, 280.0, 30.0);
            payBtn.layer.cornerRadius = 15.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            paymentView.frame = CGRectMake(10, 10, 300, 540);
            denomScrollView.frame = CGRectMake(0.0, 0.0, 300, 640);
            denomScrollView.contentSize = CGSizeMake(300, 640);
        }
        else{
            label.frame = CGRectMake(0, 0, 300, 40);
            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            billLabel.frame = CGRectMake(10, 50, 80, 30);
            paidLbl.frame = CGRectMake(10, 100, 120, 30);
            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
            payTxt1.frame = CGRectMake(140, 50, 150, 35);
            payTxt2.frame = CGRectMake(140, 100, 150, 35);
            payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
            payBtn.layer.cornerRadius = 15.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            paymentView.frame = CGRectMake(10, 70, 300, 240);
        }
        
    }
    
    //[paymentView addSubview:img1];
    [denomScrollView addSubview:billLabel];
    [denomScrollView addSubview:paidLbl];
    [denomScrollView addSubview:billStatusLabel];
    [denomScrollView addSubview:billStatusLabelValue];
    [denomScrollView addSubview:payTxt1];
    [denomScrollView addSubview:payTxt2];
    [denomScrollView addSubview:phonelbl];
    [denomScrollView addSubview:emaillbl];
    [denomScrollView addSubview:namelbl];
    [denomScrollView addSubview:phnotext];
    [denomScrollView addSubview:emailtext];
    [denomScrollView addSubview:nametext];
    [denomScrollView addSubview:payBtn];
    
    //added by Srinivauslu on 02/05/2017 & 23/03/2018....
    
    [denomScrollView addSubview:lastNameTxt];
    [denomScrollView addSubview:doorNoTxt];
    [denomScrollView addSubview:landMarkTxt];
    
    [denomScrollView addSubview:returnAmountTxt];
    [denomScrollView addSubview:cancelBtn];
    
    [denomScrollView addSubview:billRemarksLbl];
    [denomScrollView addSubview:billRemarksTxt];
    
    //upto here on 02/05/2017 & 24/08/2017 & 23/03/2018....
    
    
    [denomScrollView addSubview:salesPersonLbl];
    [denomScrollView addSubview:salesPersonId];
    [paymentView addSubview:denomScrollView];
    [paymentView addSubview:label];
    [paymentView addSubview:backbutton];
    
    [self.view addSubview:paymentView];
    
    //Changes done by Srinivasulu on 17/05/2018....
    //reaons -- Sir side remove animations. Commented and written the code....
    
    //    [UIView transitionFromView:denominationView
    //                        toView:paymentView
    //                      duration:0.6
    //                       options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
    //                    completion:nil];
    
    if(denominationView != nil)
        denominationView.hidden = YES;
    paymentView.hidden = NO;
    //upto here on 17/05/2018....
    
    if ((phnotext.text).length>0) {
        
        [self getCustomerDetails];
    }
    
}

-(void)backToDenominatio {
    [denominationView setUserInteractionEnabled:YES];
    denominationView.hidden = false;
    isReturnDenom = false;
    
    //Changes done by Srinivasulu on 17/05/2018....
    //reaons -- Sir side remove animations. Commented and written the code....
    
    //    [UIView transitionFromView:paymentView
    //                        toView:denominationView
    //                      duration:0.6
    //                       options:UIViewAnimationOptionTransitionFlipFromRight | UIViewAnimationOptionShowHideTransitionViews
    //                    completion:nil];
    
    paymentView.hidden = YES;
    denominationView.hidden = NO;
    //upto here on 17/05/2018....
}

-(void)backToReturnDenomination {
    isReturnDenom = false;
    
    
    //added by Srinivasulu on 20/11/2017....
    
    if(submitButton != nil)
        submitButton.userInteractionEnabled = YES;
    
    //upto here on 20/11/2017....
    
    [denominationView setUserInteractionEnabled:YES];
    denominationView.hidden = false;
    
    //Changes done by Srinivasulu on 17/05/2018....
    //reaons -- Sir side remove animations. Commented and written the code....
    
    
    //    [UIView transitionFromView:returnDenominationView
    //                        toView:denominationView
    //                      duration:0.6
    //                       options:UIViewAnimationOptionTransitionFlipFromRight | UIViewAnimationOptionShowHideTransitionViews
    //                    completion:nil];
    returnDenominationView.hidden = YES;
    denominationView.hidden = NO;
    //upto here on 17/05/2018....
    
}
-(void)backToPaymentView {
    [paymentView setUserInteractionEnabled:YES];
    [UIView transitionFromView:cardDetailsView
                        toView:paymentView
                      duration:0.6
                       options:UIViewAnimationOptionTransitionFlipFromRight | UIViewAnimationOptionShowHideTransitionViews
                    completion:nil];
    
}


// Commented by roja on 17/10/2019.. // reason getCustomerDetails method contains SOAP Service call .. so taken new method with same(getCustomerDetails) method name which contains REST service call....
// At the time of converting SOAP call's to REST

//-(void) getCustomerDetails {
//
//    [self.view endEditing: YES];
//
//    // NSString *value = [smsField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
//    // PhoNumber validation...
//    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
//    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
//    BOOL isNumber = [decimalTest evaluateWithObject:phnotext.text];
//    //int qty = [value intValue];
//
//
//    if ((phnotext.text).length == 0) {
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//        [alert show];
//    }
//    else if((phnotext.text).length <= 9 || (phnotext.text).length >= 12 || !isNumber) {
//
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//        [alert show];
//
//    }
//    else{
//
//
//        BOOL status = FALSE;
//
//        CheckWifi *wifi = [[CheckWifi alloc]init];
//
//        status = [wifi checkWifi];
//
//
//        if (status) {
//
//
//            // showing the HUD ..
//            [HUD setHidden:NO];
//
//            //checking for deals & offers...
//            CustomerServiceSoapBinding *custBindng =  [CustomerServiceSvc CustomerServiceSoapBinding] ;
//            CustomerServiceSvc_getCustomerDetails *aParameters = [[CustomerServiceSvc_getCustomerDetails alloc] init];
//
//            NSError * err;
//            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err];
//            NSString * requestHeaderString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//
//            NSArray *loyaltyKeys = @[@"email", @"mobileNumber",@"requestHeader"];
//
//            NSArray *loyaltyObjects = @[@"",phnotext.text,requestHeaderString];
//            NSDictionary *dictionary_req = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//            NSError * err_;
//            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_req options:0 error:&err_];
//            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//            aParameters.phone = loyaltyString;
//
//            @try {
//
//                CustomerServiceSoapBindingResponse *response = [custBindng getCustomerDetailsUsingParameters:(CustomerServiceSvc_getCustomerDetails *)aParameters];
//                NSArray *responseBodyParts = response.bodyParts;
//                for (id bodyPart in responseBodyParts) {
//                    if ([bodyPart isKindOfClass:[CustomerServiceSvc_getCustomerDetailsResponse class]]) {
//                        CustomerServiceSvc_getCustomerDetailsResponse *body = (CustomerServiceSvc_getCustomerDetailsResponse *)bodyPart;
//                        printf("\nresponse=%s",(body.return_).UTF8String);
//                        NSError *e;
//
//                        NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
//                                                                              options: NSJSONReadingMutableContainers
//                                                                                error: &e];
//
//                        NSDictionary *dictionary = [JSON1 valueForKey:RESPONSE_HEADER];
//                        if ([[dictionary valueForKey:RESPONSE_CODE] intValue] == -1) {
//
//                            //added by Srinivasulu on 04/05/2017....
//
//                            emailtext.text = @"";
//                            nametext.text = @"";
//                            streettext.text = @"";
//                            locltytext.text = @"";
//                            citytext.text = @"";
//                            pintext.text = @"";
//
//
//
//                            if(doorNoTxt != nil)
//                                doorNoTxt.text = @"";
//
//
//                            if(landMarkTxt != nil)
//                                landMarkTxt.text = @"";
//
//                            if(lastNameTxt != nil)
//                                lastNameTxt.text = @"";
//
//
//
//                            //upto here on 04/05/2017....
//                            if ([(self.view).subviews containsObject:newCust]) {
//
//                                [newCust removeFromSuperview];
//                            }
//
//                            newCust = [[UILabel alloc] init];
//                            newCust.text =  NSLocalizedString(@"New_customer_message", nil);
//                            newCust.font = [UIFont systemFontOfSize:20];
//                            newCust.backgroundColor = [UIColor clearColor];
//                            newCust.textColor = [UIColor redColor];
//                            newCust.hidden = NO;
//
//                            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                                newCust.frame = CGRectMake(500, 350, 500, 50);
//                                if ([WebServiceUtility checkIsCardPayment:paymentView]) {
//                                    newCust.frame = CGRectMake(500, 280, 500, 50);
//                                }
//                            }
//                            else {
//
//                                newCust.frame = CGRectMake(70, 320, 300, 30);
//                                newCust.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
//                            }
//                            [self applyAnimationToLabel:newCust];
//
//                            [denomScrollView addSubview:newCust];
//                            [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(labelEffect) userInfo:nil repeats:NO];
//
//                        }
//                        else{
//
//                            if (![JSON1[@"phone"] isKindOfClass:[NSNull class]]&& [JSON1[@"phone"] length] > 0) {
//                                phnotext.text = [NSString stringWithFormat:@"%@",JSON1[@"phone"]];
//                            }
//                            else{
//                                phnotext.text = @"";
//                            }
//                            if (![JSON1[@"email"] isKindOfClass:[NSNull class]]&& [JSON1[@"email"] length] > 0) {
//                                emailtext.text = [NSString stringWithFormat:@"%@",JSON1[@"email"]];
//
//                            }
//                            else {
//                                emailtext.text = @"";
//
//                            }
//                            if (![JSON1[@"name"] isKindOfClass:[NSNull class]]&& [JSON1[@"name"] length] > 0) {
//                                nametext.text = [NSString stringWithFormat:@"%@",JSON1[@"name"]];
//                            }
//                            else {
//                                nametext.text = @"";
//                            }
//                            if (![JSON1[@"street"] isKindOfClass:[NSNull class]]&& [JSON1[@"street"] length] > 0) {
//                                streettext.text = [NSString stringWithFormat:@"%@",JSON1[@"street"]];
//                            }
//                            else{
//                                streettext.text = @"";
//                            }
//                            if (![JSON1[@"locality"] isKindOfClass:[NSNull class]]&& [JSON1[@"locality"] length] > 0) {
//                                locltytext.text = [NSString stringWithFormat:@"%@",JSON1[@"locality"]];
//                            }
//                            else {
//                                locltytext.text = @"";
//
//                            }
//                            if (![JSON1[@"city"] isKindOfClass:[NSNull class]]&& [JSON1[@"city"] length] > 0) {
//                                citytext.text = [NSString stringWithFormat:@"%@",JSON1[@"city"]];
//                            }
//                            else {
//
//                                citytext.text = @"";
//                            }
//                            if (![JSON1[@"pin_no"] isKindOfClass:[NSNull class]]&& [JSON1[@"pin_no"] length] > 0) {
//                                pintext.text = [NSString stringWithFormat:@"%@",JSON1[@"pin_no"]];
//                            }
//                            else {
//
//                                pintext.text = @"";
//                            }
//                            //NSString *temp1 = [temp objectAtIndex:1];
//                            if (![JSON1[@"name"] isKindOfClass:[NSNull class]]&& [JSON1[@"name"] length] > 0) {
//                                billCustomerName = [JSON1[@"name"] copy];
//                            }
//                            else {
//                                billCustomerName = @"";
//                            }
//
//                            //added by Srinivasulu on 03/05/2017....
//
//
//
//                            if((doorNoTxt != nil) && (![JSON1[@"houseNo"] isKindOfClass:[NSNull class]]&& [JSON1[@"houseNo"] length] > 0))
//                                doorNoTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"houseNo"]];
//                            else if(doorNoTxt != nil)
//                                doorNoTxt.text = @"";
//
//
//                            if((landMarkTxt != nil) && (![JSON1[@"landMark"] isKindOfClass:[NSNull class]]&& [JSON1[@"landMark"] length] > 0))
//                                landMarkTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"landMark"]];
//                            else if(landMarkTxt != nil)
//                                landMarkTxt.text = @"";
//
//                            if((lastNameTxt != nil) && (![JSON1[@"lastName"] isKindOfClass:[NSNull class]]&& [JSON1[@"lastName"] length] > 0))
//                                lastNameTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"lastName"]];
//                            else if(lastNameTxt != nil)
//                                lastNameTxt.text = @"";
//
//                            //upto here on 03/05/2017....
//                        }
//
//                        [HUD setHidden:YES];
//                    }
//                }
//            }
//            @catch (NSException *exception) {
//
//                NSLog(@"%@",exception);
//            }
//        }
//        else {
//            //added by Srinivasulu on 15/03/2018....
//
//            NSString * customerMobileNumberStr = @"";
//
//            if((customerPhoneValue.text).length >= 10)
//                customerMobileNumberStr = customerPhoneValue.text;
//
//            if((phnotext.text).length >= 10)
//                customerMobileNumberStr = phnotext.text;
//
//            //upto here on 15/03/2018....
//
//
//            offline = [[OfflineBillingServices alloc] init];
//            //commented & changed by Srinivauslu on 06/09/2018....
//            //                NSDictionary *JSON1 = [offline getCustomerDetails:phnotext.text];
//            NSDictionary * JSON1 = [offline getCustomerDetailsBasedOnPhoneNo:customerMobileNumberStr];
//
//            if ([[NSString stringWithFormat:@"%@",JSON1[@"phone"]] isEqualToString:@"<null>"] || [[NSString stringWithFormat:@"%@",JSON1[@"email"]] isEqualToString:@"<null>"] || JSON1.count==0) {
//
//                emailtext.text = @"";
//                nametext.text = @"";
//                streettext.text = @"";
//                locltytext.text = @"";
//                citytext.text = @"";
//                pintext.text = @"";
//
//                //added by Srinivauslu on 04/05/2017....
//
//                if(doorNoTxt != nil)
//                    doorNoTxt.text = @"";
//
//
//                if(landMarkTxt != nil)
//                    landMarkTxt.text = @"";
//
//                if(lastNameTxt != nil)
//                    lastNameTxt.text = @"";
//
//                //upto here on 04/05/2017....
//
//                if ([(self.view).subviews containsObject:newCust]) {
//
//                    [newCust removeFromSuperview];
//                }
//
//                newCust = [[UILabel alloc] init];
//                newCust.text =  NSLocalizedString(@"New_customer_message", nil);
//                newCust.font = [UIFont systemFontOfSize:20];
//                newCust.backgroundColor = [UIColor clearColor];
//                newCust.textColor = [UIColor redColor];
//
//                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                    newCust.frame = CGRectMake(500, 350, 500, 50);
//                    if ([WebServiceUtility checkIsCardPayment:paymentView]) {
//                        newCust.frame = CGRectMake(500, 280, 500, 50);
//                    }
//                }
//                else {
//
//                    newCust.frame = CGRectMake(70, 320, 300, 30);
//                    newCust.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
//                }
//                [self applyAnimationToLabel:newCust];
//                [denomScrollView addSubview:newCust];
//
//            }
//            else{
//
//                //NSArray *temp = [body.return_ componentsSeparatedByString:@"#"];
//                //                phnotext.text = [NSString stringWithFormat:@"%@",[JSON1 objectForKey:@"phone"]];
//                emailtext.text = [NSString stringWithFormat:@"%@",JSON1[@"email"]];
//                nametext.text = [NSString stringWithFormat:@"%@",JSON1[@"name"]];
//                streettext.text = [NSString stringWithFormat:@"%@",JSON1[@"street"]];
//                locltytext.text = [NSString stringWithFormat:@"%@",JSON1[@"locality"]];
//                citytext.text = [NSString stringWithFormat:@"%@",JSON1[@"city"]];
//                pintext.text = [NSString stringWithFormat:@"%@",JSON1[@"pin_no"]];
//                //NSString *temp1 = [temp objectAtIndex:1];
//                billCustomerName = [JSON1[@"name"] copy];
//
//                //added by Srinivasulu on 04/05/2017....
//
//                if((doorNoTxt != nil) && (![JSON1[@"houseNo"] isKindOfClass:[NSNull class]]&& [JSON1[@"houseNo"] length] > 0))
//                    doorNoTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"houseNo"]];
//                else if(doorNoTxt != nil)
//                    doorNoTxt.text = @"";
//
//                if((landMarkTxt != nil) && (![JSON1[@"landMark"] isKindOfClass:[NSNull class]]&& [JSON1[@"landMark"] length] > 0))
//                    landMarkTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"landMark"]];
//                else if(landMarkTxt != nil)
//                    landMarkTxt.text = @"";
//
//                if((lastNameTxt != nil) && (![JSON1[@"lastName"] isKindOfClass:[NSNull class]]&& [JSON1[@"lastName"] length] > 0))
//                    lastNameTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"lastName"]];
//                else if(lastNameTxt != nil)
//                    lastNameTxt.text = @"";
//
//                //upto here on 04/05/2017....
//            }
//        }
//    }
//}




//getCustomerDetails method changed by roja on 17/10/2019.. // reason removed SOAP service call related code and  added REST service call code...
// At the time of converting SOAP call's to REST
-(void) getCustomerDetails {
    
    [self.view endEditing: YES];
    
    // NSString *value = [smsField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    // PhoNumber validation...
    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
    BOOL isNumber = [decimalTest evaluateWithObject:phnotext.text];
    //int qty = [value intValue];
    
    
    if ((phnotext.text).length == 0) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    else if((phnotext.text).length <= 9 || (phnotext.text).length >= 12 || !isNumber) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    else{
        
        BOOL status = FALSE;
        
        CheckWifi *wifi = [[CheckWifi alloc]init];
        status = [wifi checkWifi];
        
        if (status) {
            
            isCustomrDetailDoorDelCall = false;
            // showing the HUD ..
            [HUD setHidden:NO];
            //checking for deals & offers...
            NSError * err;
            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err];
            NSString * requestHeaderString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            
            NSArray *loyaltyKeys = @[@"email", @"mobileNumber",@"requestHeader"];
            NSArray *loyaltyObjects = @[@"",phnotext.text,requestHeaderString];
            NSDictionary *dictionary_req = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
            
            NSError * err_;
            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_req options:0 error:&err_];
            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
            
            
            WebServiceController * services  = [[WebServiceController alloc] init];
            services.customerServiceDelegate = self;
            [services getCustomerDetails:loyaltyString];
            
            
        }
        else {
            //added by Srinivasulu on 15/03/2018....
            
            NSString * customerMobileNumberStr = @"";
            
            if((customerPhoneValue.text).length >= 10)
                customerMobileNumberStr = customerPhoneValue.text;
            
            if((phnotext.text).length >= 10)
                customerMobileNumberStr = phnotext.text;
            
            //upto here on 15/03/2018....
            
            
            offline = [[OfflineBillingServices alloc] init];
            //commented & changed by Srinivauslu on 06/09/2018....
            //                NSDictionary *JSON1 = [offline getCustomerDetails:phnotext.text];
            NSDictionary * JSON1 = [offline getCustomerDetailsBasedOnPhoneNo:customerMobileNumberStr];
            
            if ([[NSString stringWithFormat:@"%@",JSON1[@"phone"]] isEqualToString:@"<null>"] || [[NSString stringWithFormat:@"%@",JSON1[@"email"]] isEqualToString:@"<null>"] || JSON1.count==0) {
                
                emailtext.text = @"";
                nametext.text = @"";
                streettext.text = @"";
                locltytext.text = @"";
                citytext.text = @"";
                pintext.text = @"";
                
                //added by Srinivauslu on 04/05/2017....
                
                if(doorNoTxt != nil)
                    doorNoTxt.text = @"";
                
                
                if(landMarkTxt != nil)
                    landMarkTxt.text = @"";
                
                if(lastNameTxt != nil)
                    lastNameTxt.text = @"";
                
                //upto here on 04/05/2017....
                
                if ([(self.view).subviews containsObject:newCust]) {
                    
                    [newCust removeFromSuperview];
                }
                
                newCust = [[UILabel alloc] init];
                newCust.text =  NSLocalizedString(@"New_customer_message", nil);
                newCust.font = [UIFont systemFontOfSize:20];
                newCust.backgroundColor = [UIColor clearColor];
                newCust.textColor = [UIColor redColor];
                
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    newCust.frame = CGRectMake(500, 350, 500, 50);
                    if ([WebServiceUtility checkIsCardPayment:paymentView]) {
                        newCust.frame = CGRectMake(500, 280, 500, 50);
                    }
                }
                else {
                    
                    newCust.frame = CGRectMake(70, 320, 300, 30);
                    newCust.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
                }
                [self applyAnimationToLabel:newCust];
                [denomScrollView addSubview:newCust];
                
            }
            else{
                
                //NSArray *temp = [body.return_ componentsSeparatedByString:@"#"];
                //                phnotext.text = [NSString stringWithFormat:@"%@",[JSON1 objectForKey:@"phone"]];
                emailtext.text = [NSString stringWithFormat:@"%@",JSON1[@"email"]];
                nametext.text = [NSString stringWithFormat:@"%@",JSON1[@"name"]];
                streettext.text = [NSString stringWithFormat:@"%@",JSON1[@"street"]];
                locltytext.text = [NSString stringWithFormat:@"%@",JSON1[@"locality"]];
                citytext.text = [NSString stringWithFormat:@"%@",JSON1[@"city"]];
                pintext.text = [NSString stringWithFormat:@"%@",JSON1[@"pin_no"]];
                //NSString *temp1 = [temp objectAtIndex:1];
                billCustomerName = [JSON1[@"name"] copy];
                
                //added by Srinivasulu on 04/05/2017....
                
                if((doorNoTxt != nil) && (![JSON1[@"houseNo"] isKindOfClass:[NSNull class]]&& [JSON1[@"houseNo"] length] > 0))
                    doorNoTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"houseNo"]];
                else if(doorNoTxt != nil)
                    doorNoTxt.text = @"";
                
                if((landMarkTxt != nil) && (![JSON1[@"landMark"] isKindOfClass:[NSNull class]]&& [JSON1[@"landMark"] length] > 0))
                    landMarkTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"landMark"]];
                else if(landMarkTxt != nil)
                    landMarkTxt.text = @"";
                
                if((lastNameTxt != nil) && (![JSON1[@"lastName"] isKindOfClass:[NSNull class]]&& [JSON1[@"lastName"] length] > 0))
                    lastNameTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"lastName"]];
                else if(lastNameTxt != nil)
                    lastNameTxt.text = @"";
                
                //upto here on 04/05/2017....
            }
        }
    }
}

// added by Roja on 17/10/2019…. // old code only added below
- (void)getCustomerDetailsSuccessResponse:(NSDictionary *)sucessDictionary{
    
    @try {
        
        if(isCustomrDetailDoorDelCall){// This condition is for getCustomerDetailDoorDel (service method)
            
            [self addCustomerView:sucessDictionary[@"phone"] street:sucessDictionary[@"street"] locality:sucessDictionary[@"locality"] city:sucessDictionary[@"city"] pin:sucessDictionary[@"pin_no"] custName:sucessDictionary[@"name"]];
        }
        
        else {// This condition is for getCustomerDetails (service method)
            
            if (![sucessDictionary[@"phone"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"phone"] length] > 0) {
                phnotext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"phone"]];
            }
            else{
                phnotext.text = @"";
            }
            if (![sucessDictionary[@"email"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"email"] length] > 0) {
                emailtext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"email"]];
                
            }
            else {
                emailtext.text = @"";
                
            }
            if (![sucessDictionary[@"name"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"name"] length] > 0) {
                nametext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"name"]];
            }
            else {
                nametext.text = @"";
            }
            if (![sucessDictionary[@"street"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"street"] length] > 0) {
                streettext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"street"]];
            }
            else{
                streettext.text = @"";
            }
            if (![sucessDictionary[@"locality"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"locality"] length] > 0) {
                locltytext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"locality"]];
            }
            else {
                locltytext.text = @"";
                
            }
            if (![sucessDictionary[@"city"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"city"] length] > 0) {
                citytext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"city"]];
            }
            else {
                
                citytext.text = @"";
            }
            if (![sucessDictionary[@"pin_no"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"pin_no"] length] > 0) {
                pintext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"pin_no"]];
            }
            else {
                
                pintext.text = @"";
            }
            //NSString *temp1 = [temp objectAtIndex:1];
            if (![sucessDictionary[@"name"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"name"] length] > 0) {
                billCustomerName = [sucessDictionary[@"name"] copy];
            }
            else {
                billCustomerName = @"";
            }
            
            //added by Srinivasulu on 03/05/2017....
            
            
            
            if((doorNoTxt != nil) && (![sucessDictionary[@"houseNo"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"houseNo"] length] > 0))
                doorNoTxt.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"houseNo"]];
            else if(doorNoTxt != nil)
                doorNoTxt.text = @"";
            
            
            if((landMarkTxt != nil) && (![sucessDictionary[@"landMark"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"landMark"] length] > 0))
                landMarkTxt.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"landMark"]];
            else if(landMarkTxt != nil)
                landMarkTxt.text = @"";
            
            if((lastNameTxt != nil) && (![sucessDictionary[@"lastName"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"lastName"] length] > 0))
                lastNameTxt.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"lastName"]];
            else if(lastNameTxt != nil)
                lastNameTxt.text = @"";
            
            //upto here on 03/05/2017....
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}



// added by Roja on 17/10/2019…. // old code only added below
- (void)getCustomerDetailsErrorResponse:(NSString *)errorResponse{
    
    @try {
        
        if (isCustomrDetailDoorDelCall) { // This condition is for getCustomerDetailDoorDel (service method)
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"New Customer" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else { // This condition is for getCustomerDetails (service method)
            
            //added by Srinivasulu on 04/05/2017....
            emailtext.text = @"";
            nametext.text = @"";
            streettext.text = @"";
            locltytext.text = @"";
            citytext.text = @"";
            pintext.text = @"";
            
            if(doorNoTxt != nil)
                doorNoTxt.text = @"";
            
            if(landMarkTxt != nil)
                landMarkTxt.text = @"";
            
            if(lastNameTxt != nil)
                lastNameTxt.text = @"";
            
            
            //upto here on 04/05/2017....
            if ([(self.view).subviews containsObject:newCust]) {
                
                [newCust removeFromSuperview];
            }
            
            newCust = [[UILabel alloc] init];
            newCust.text =  NSLocalizedString(@"New_customer_message", nil);
            newCust.font = [UIFont systemFontOfSize:20];
            newCust.backgroundColor = [UIColor clearColor];
            newCust.textColor = [UIColor redColor];
            newCust.hidden = NO;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                newCust.frame = CGRectMake(500, 350, 500, 50);
                if ([WebServiceUtility checkIsCardPayment:paymentView]) {
                    newCust.frame = CGRectMake(500, 280, 500, 50);
                }
            }
            else {
                
                newCust.frame = CGRectMake(70, 320, 300, 30);
                newCust.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
            }
            [self applyAnimationToLabel:newCust];
            
            [denomScrollView addSubview:newCust];
            [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(labelEffect) userInfo:nil repeats:NO];
        }
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}





- (void)applyAnimationToLabel:(UILabel *)animatelabl {
    CABasicAnimation *basic=[CABasicAnimation animationWithKeyPath:@"transform"];
    basic.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeScale(1.08, 1.08, 1.08)];
    [basic setAutoreverses:YES];
    [basic setRepeatCount:MAXFLOAT];
    basic.duration = 0.35;
    [animatelabl.layer addAnimation:basic forKey:@"transform"];
}

// Commented by roja on 17/10/2019.. // reason addCustomerDetails method contains SOAP Service call .. so taken new method with same(addCustomerDetails) method name which contains REST service call....
// At the time of converting SOAP call's to REST

//-(void)addCustomerDetails {
//
//
//    BOOL status = FALSE;
//
//    CheckWifi *wifi = [[CheckWifi alloc]init];
//
//    status = [wifi checkWifi];
//
//
//    if (status) {
//
//        [HUD setHidden:YES];
//
//
//        CustomerServiceSoapBinding *custBindng =  [CustomerServiceSvc CustomerServiceSoapBinding] ;
//        CustomerServiceSvc_updateCustomer *aParameters = [[CustomerServiceSvc_updateCustomer alloc] init];
//
//
//        //changed by Srinivasulu on 04/05/2017....
//
//        //        NSArray *loyaltyKeys = [NSArray arrayWithObjects:@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city",@"requestHeader", nil];
//        //
//        //        NSArray *loyaltyObjects = [NSArray arrayWithObjects:phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text,[RequestHeader getRequestHeader], nil];
//        //        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//        NSMutableDictionary * dictionary = [NSMutableDictionary new];
//
//        dictionary[@"requestHeader"] = [RequestHeader getRequestHeader];
//
//        dictionary[@"phone"] = phnotext.text;
//        dictionary[@"pin_no"] = pintext.text;
//        dictionary[@"status"] = @"false";
//        dictionary[@"email"] = emailtext.text;
//        dictionary[@"pin_no"] = pintext.text;
//        dictionary[@"name"] = nametext.text;
//
//        dictionary[@"street"] = streettext.text;
//        dictionary[@"locality"] = locltytext.text;
//        dictionary[@"loyaltyCustomer"] = @"";
//        dictionary[@"phoneIds"] = @"";
//        dictionary[@"city"] = citytext.text;
//
//
//        if(doorNoTxt != nil)
//            dictionary[@"houseNo"] = doorNoTxt.text;
//
//
//        if(landMarkTxt != nil)
//            dictionary[@"landMark"] = landMarkTxt.text;
//
//        if(lastNameTxt != nil)
//            dictionary[@"lastName"] = lastNameTxt.text;
//
//
//        NSError * err_;
//        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err_];
//
//        //upto here on 03/05/2017....
//
//                //        NSError * err_;
//        //        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
//        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//        aParameters.customerDetails = loyaltyString;
//
//
//
//
//
//        CustomerServiceSoapBindingResponse *response = [custBindng updateCustomerUsingParameters:(CustomerServiceSvc_updateCustomer *)aParameters];
//        if (![response isKindOfClass:[NSError class]]) {
//
//            NSArray *responseBodyParts = response.bodyParts;
//            for (id bodyPart in responseBodyParts) {
//                if ([bodyPart isKindOfClass:[CustomerServiceSvc_updateCustomerResponse class]]) {
//                    CustomerServiceSvc_updateCustomerResponse *body = (CustomerServiceSvc_updateCustomerResponse *)bodyPart;
//                    // printf("\nresponse=%d",[body.createCustomerReturn UTF8String]);
//                    NSError *e;
//
//                    NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
//                                                                          options: NSJSONReadingMutableContainers
//                                                                            error: &e];
//                    BOOL result = [JSON1[@"status"] boolValue];
//
//                    if (mainsegmentIndex ==2) {
//                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                            [self populateCardDetailsView];
//                        }
//                        else {
//                            [self continuePay1];
//                        }
//
//                    }
//                    else {
//                        [self continuePay1];
//
//                    }                        // [self continueFurther:skipbtn];
//
//                    if (result) {
//                        //Sending mail......
//                    }
//                    else {
//
//                    }
//                    [HUD setHidden:YES];
//                }
//            }
//        }
//        else {
//            [segmentedControl setUserInteractionEnabled:TRUE];
//            [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
//
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"%@",(response.error).localizedDescription] message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//            [alert show];
//        }
//
//    }
//    else {
//
//        //changed by Srinivasulu on 04/05/2017....
//
//        //        NSArray *loyaltyKeys = [NSArray arrayWithObjects:@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city", nil];
//        //
//        //        NSArray *loyaltyObjects = [NSArray arrayWithObjects:phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text, nil];
//        //        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//        NSMutableDictionary * dictionary = [NSMutableDictionary new];
//
//        dictionary[@"phone"] = phnotext.text;
//        dictionary[@"pin_no"] = pintext.text;
//        dictionary[@"status"] = @"false";
//        dictionary[@"email"] = emailtext.text;
//        dictionary[@"pin_no"] = pintext.text;
//        dictionary[@"name"] = nametext.text;
//
//        dictionary[@"street"] = streettext.text;
//        dictionary[@"locality"] = locltytext.text;
//        dictionary[@"loyaltyCustomer"] = @"";
//        dictionary[@"phoneIds"] = @"";
//        dictionary[@"city"] = citytext.text;
//
//
//        if(doorNoTxt != nil)
//            dictionary[@"houseNo"] = doorNoTxt.text;
//
//
//        if(landMarkTxt != nil)
//            dictionary[@"landMark"] = landMarkTxt.text;
//
//        if(lastNameTxt != nil)
//            dictionary[@"lastName"] = lastNameTxt.text;
//
//
//        //commented and changed by Srinivauslu on 06/09/2018..
//        offline = [[OfflineBillingServices alloc] init];
//        //            [offline saveCustomerDetails:dictionary];
//        [offline saveCustomerDetailsBasedOnPhone:dictionary];
//
//
//
//        //upto here on 04/05/2017....
//
//
//
//        if (mainsegmentIndex ==2) {
//            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                [self populateCardDetailsView];
//            }
//            else {
//                [self continuePay1];
//            }
//        }
//        else {
//            [self continuePay1];
//
//        }
//    }
//
//}



//addCustomerDetails method changed by roja on 17/10/2019.. // reason removed SOAP service call related code and  added REST service call code...
// At the time of converting SOAP call's to REST
-(void)addCustomerDetails {
    
    BOOL status = FALSE;
    
    CheckWifi *wifi = [[CheckWifi alloc]init];
    
    status = [wifi checkWifi];
    
    
    if (status) {
        
        [HUD setHidden:YES];
        
        NSMutableDictionary * dictionary = [NSMutableDictionary new];
        
        dictionary[@"requestHeader"] = [RequestHeader getRequestHeader];
        
        dictionary[@"phone"] = phnotext.text;
        dictionary[@"pin_no"] = pintext.text;
        dictionary[@"status"] = @"false";
        dictionary[@"email"] = emailtext.text;
        dictionary[@"pin_no"] = pintext.text;
        dictionary[@"name"] = nametext.text;
        
        dictionary[@"street"] = streettext.text;
        dictionary[@"locality"] = locltytext.text;
        dictionary[@"loyaltyCustomer"] = @"";
        dictionary[@"phoneIds"] = @"";
        dictionary[@"city"] = citytext.text;
        
        
        if(doorNoTxt != nil)
            dictionary[@"houseNo"] = doorNoTxt.text;
        
        
        if(landMarkTxt != nil)
            dictionary[@"landMark"] = landMarkTxt.text;
        
        if(lastNameTxt != nil)
            dictionary[@"lastName"] = lastNameTxt.text;
        
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err_];
        
        //upto here on 03/05/2017....
        
        //        NSError * err_;
        //        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];

        WebServiceController * services = [[WebServiceController alloc] init];
        services.customerServiceDelegate = self;
        [services updateCustomerDetailsAsynchronousRequest:loyaltyString];
        
    }
    else {
        
        //changed by Srinivasulu on 04/05/2017....
        
        //        NSArray *loyaltyKeys = [NSArray arrayWithObjects:@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city", nil];
        //
        //        NSArray *loyaltyObjects = [NSArray arrayWithObjects:phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text, nil];
        //        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSMutableDictionary * dictionary = [NSMutableDictionary new];
        
        dictionary[@"phone"] = phnotext.text;
        dictionary[@"pin_no"] = pintext.text;
        dictionary[@"status"] = @"false";
        dictionary[@"email"] = emailtext.text;
        dictionary[@"pin_no"] = pintext.text;
        dictionary[@"name"] = nametext.text;
        
        dictionary[@"street"] = streettext.text;
        dictionary[@"locality"] = locltytext.text;
        dictionary[@"loyaltyCustomer"] = @"";
        dictionary[@"phoneIds"] = @"";
        dictionary[@"city"] = citytext.text;
        
        
        if(doorNoTxt != nil)
            dictionary[@"houseNo"] = doorNoTxt.text;
        
        
        if(landMarkTxt != nil)
            dictionary[@"landMark"] = landMarkTxt.text;
        
        if(lastNameTxt != nil)
            dictionary[@"lastName"] = lastNameTxt.text;
        
        
        //commented and changed by Srinivauslu on 06/09/2018..
        offline = [[OfflineBillingServices alloc] init];
        //            [offline saveCustomerDetails:dictionary];
        [offline saveCustomerDetailsBasedOnPhone:dictionary];
        
        //upto here on 04/05/2017....
        
        
        if (mainsegmentIndex ==2) {
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                [self populateCardDetailsView];
            }
            else {
                [self continuePay1];
            }
        }
        else {
            [self continuePay1];
            
        }
    }
    
}

// added by Roja on 17/10/2019…. // old code added here..
- (void)updateCustomerDetailsSuccessResponse:(NSDictionary *)sucessDictionary{
    NSLog(@"PastBilling- Page UpdateCustomer Success Msg: %@", sucessDictionary);
    @try {
        BOOL result = [sucessDictionary[@"status"] boolValue];
        
        if (mainsegmentIndex ==2) {
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                [self populateCardDetailsView];
            }
            else {
                [self continuePay1];
            }
        }
        else {
            [self continuePay1];
        }                        // [self continueFurther:skipbtn];
        
        if (result) {
            //Sending mail......
        }
        else {
            
        }

    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}

// added by Roja on 17/10/2019…. // old code added here..
- (void)updateCustomerDetailsErrorResponse:(NSString *)errorResponse{
    
    NSLog(@"PastBilling- Page UpdateCustomer Error Msg: %@", errorResponse);
    @try {
        
        if (mainsegmentIndex ==2) {
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                [self populateCardDetailsView];
            }
            else {
                [self continuePay1];
            }
        }
        else {
            [self continuePay1];
        }                        // [self continueFurther:skipbtn];
       
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}

#pragma mark - PowaScannerObserver

// Commented by roja on 17/10/2019.. // reason :- (scanner:  scannedBarcodeData:) method is not using anywhere of this class...
// At the time of converting SOAP call's to REST

//- (void)scanner:(id<PowaScanner>)scanner scannedBarcodeData:(NSData *)data {
//
//    @try {
//
//        NSString *barcodeString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
//        selected_SKID= barcodeString;
//        if (barcodeString.length>0) {
//
//            HUD.dimBackground = YES;
//            HUD.labelText = @"Please Wait..";
//            [HUD setHidden:NO];
//
//            offerLabel.text = barcodeString;
//            if (mainsegmentIndex == 5) {
//
//                if ( [giftTypeString isEqualToString: @"loyaltycard"]) {
//                    CheckWifi *wifi = [[CheckWifi alloc]init];
//                    BOOL status = [wifi checkWifi];
//                    if (status) {
//
//                        giftNo.text = barcodeString;
//
//                        HUD.labelText = @"Wait..";
//                        [HUD setHidden:NO];
//
//
//                        LoyaltycardServiceSoapBinding *skuService = [LoyaltycardServiceSvc LoyaltycardServiceSoapBinding] ;
//
//                        LoyaltycardServiceSvc_getissuedLoyaltycard *getSkuid = [[LoyaltycardServiceSvc_getissuedLoyaltycard alloc] init];
//
//
//                        NSArray *loyaltyKeys = @[@"loyaltyCardNumber", @"requestHeader"];
//
//                        NSArray *loyaltyObjects = @[barcodeString,[RequestHeader getRequestHeader]];
//                        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                        NSError * err_;
//                        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
//                        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//
//                        getSkuid.loyaltyCardNumber = loyaltyString;
//                        @try {
//
//                            LoyaltycardServiceSoapBindingResponse *response = [skuService getissuedLoyaltycardUsingParameters:(LoyaltycardServiceSvc_getissuedLoyaltycard *)getSkuid];
//                            NSArray *responseBodyParts = response.bodyParts;
//
//
//
//                            for (id bodyPart in responseBodyParts) {
//                                if ([bodyPart isKindOfClass:[LoyaltycardServiceSvc_getissuedLoyaltycardResponse class]]) {
//                                    LoyaltycardServiceSvc_getissuedLoyaltycardResponse *body = (LoyaltycardServiceSvc_getissuedLoyaltycardResponse *)bodyPart;
//                                    printf("\nresponse=%s",(body.return_).UTF8String);
//
//                                    [self getLoyalcardDetailsHandler:body.return_];
//                                }
//                            }
//                        }
//                        @catch (NSException *exception) {
//
//                            NSLog(@"%@",exception);
//
//                        }
//
//
//                    }
//                    else {
//
//                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                        [alert show];
//
//                    }
//
//                }
//                else if ([giftTypeString isEqualToString:@"coupon"]) {
//
//                    CheckWifi *wifi = [[CheckWifi alloc]init];
//                    BOOL status = [wifi checkWifi];
//                    if (status) {
//                        giftNo.text = barcodeString;
//                        //get gift coupon details....
//
//                        GiftCouponServicesSoapBinding *skuService = [GiftCouponServicesSvc GiftCouponServicesSoapBinding] ;
//
//                        GiftCouponServicesSvc_getCouponDetails *coupon = [[GiftCouponServicesSvc_getCouponDetails alloc] init];
//
//                        //added by Srinivasulu on 15/03/2018....
//
//                        NSString * customerMobileNumberStr = @"";
//
//                        if((customerPhoneValue.text).length >= 10)
//                            customerMobileNumberStr = customerPhoneValue.text;
//
//                        //upto here on 15/03/2018....
//
//                        NSArray *loyaltyKeys = @[@"couponCode", @"requestHeader", @"mobileNumber", @"locations"];
//
//                        NSArray *loyaltyObjects = @[giftNo.text,[RequestHeader getRequestHeader],customerMobileNumberStr,presentLocation];
//                        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                        NSError * err_;
//                        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
//                        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//
//
//                        coupon.couponDetails = loyaltyString;
//                        @try {
//
//                            GiftCouponServicesSoapBindingResponse *response = [skuService getCouponDetailsUsingParameters:coupon];
//                            NSArray *responseBodyParts = response.bodyParts;
//                            for (id bodyPart in responseBodyParts) {
//
//                                if ([bodyPart isKindOfClass:[GiftCouponServicesSvc_getCouponDetailsResponse class]]) {
//                                    GiftCouponServicesSvc_getCouponDetailsResponse *body = (GiftCouponServicesSvc_getCouponDetailsResponse *)bodyPart;
//                                    printf("\nresponse=%s",(body.return_).UTF8String);
//                                    [self getCouponDetailsHandler:body.return_];
//                                }
//                            }
//                        }
//                        @catch (NSException *exception) {
//
//                            [HUD setHidden:YES];
//                            NSLog(@"Exception %@",exception.name);
//                        }
//                    }
//                    else {
//                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                        [alert show];
//                    }
//
//                }
//                else if ([giftTypeString isEqualToString:@"giftvoucher"]){
//
//                    CheckWifi *wifi = [[CheckWifi alloc]init];
//                    BOOL status = [wifi checkWifi];
//                    if (status) {
//
//                        giftNo.text = barcodeString;
//
//                        GiftVoucherServicesSoapBinding *skuService = [GiftVoucherServices GiftVoucherServicesSoapBinding] ;
//
//                        GiftVoucherServices_getGiftVoucherDetails *voucher = [[GiftVoucherServices_getGiftVoucherDetails alloc] init];
//
//
//                        NSArray *loyaltyKeys = @[@"voucherCode", @"requestHeader"];
//
//                        NSArray *loyaltyObjects = @[giftNo.text,[RequestHeader getRequestHeader]];
//                        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                        NSError * err_;
//                        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
//                        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//
//
//                        voucher.giftVoucherDetails = loyaltyString;
//                        @try {
//
//                            GiftVoucherServicesSoapBindingResponse *response = [skuService getGiftVoucherDetailsUsingParameters:voucher];
//                            NSArray *responseBodyParts = response.bodyParts;
//                            for (id bodyPart in responseBodyParts) {
//                                if ([bodyPart isKindOfClass:[GiftVoucherServices_getGiftVoucherDetailsResponse class]]) {
//                                    GiftVoucherServices_getGiftVoucherDetailsResponse *body = (GiftVoucherServices_getGiftVoucherDetailsResponse *)bodyPart;
//                                    printf("\nresponse=%s",(body.return_).UTF8String);
//                                    [self getVoucherDetailsHandler:body.return_];
//                                }
//                            }
//                        }
//                        @catch (NSException *exception) {
//
//                            [HUD setHidden:YES];
//                            NSLog(@"Exception %@",exception.name);
//                        }
//
//                    }
//                    else {
//                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                        [alert show];
//                    }
//
//                }
//            }
//
//            else  if ([barcodeString containsString:@"#W"] || [barcodeString containsString:@"#P"]){
//
//                offerLabel.text = barcodeString;
//                selected_SKID = [[barcodeString substringWithRange:NSMakeRange(2, 6)] copy];
//
//                NSString *qty = [barcodeString substringWithRange:NSMakeRange(8, 5)];
//                NSString *vegQty = [NSString stringWithFormat:@"%.3f",qty.floatValue/1000];
//                if ([barcodeString containsString:@"#P"]) {
//                    vegQty = [NSString stringWithFormat:@"%.1f",qty.floatValue];
//                }
//                NSString *price = [barcodeString substringWithRange:NSMakeRange(14, 5)];
//                NSString *price1 = [NSString stringWithFormat:@"%.2f",price.floatValue/100];
//
//                if (!isOfflineService) {
//                    @try {
//
//                        NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation"];
//                        NSArray *objects = @[selected_SKID,[RequestHeader getRequestHeader],presentLocation];
//
//                        NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
//
//                        NSError * err;
//                        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
//                        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//                        NSString *serviceUrl = [WebServiceUtility getURLFor:GET_SKU_DETAILS];
//                        serviceUrl = [NSString stringWithFormat:@"%@%@",serviceUrl,salesReportJsonString];
//                        serviceUrl = [WebServiceUtility addPercentEscapesFor:serviceUrl];
//
//                        NSURL *url = [NSURL URLWithString:serviceUrl];
//                        NSMutableURLRequest  *request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy
//                                                                            timeoutInterval:60.0];
//                        request.HTTPMethod = @"GET";
//                        [NSURLConnection sendAsynchronousRequest:request
//                                                           queue:[NSOperationQueue mainQueue]
//                                               completionHandler:^(NSURLResponse *response,
//                                                                   NSData *data, NSError *connectionError)
//                         {
//                             if (data.length > 0 && connectionError == nil)
//                             {
//                                 NSDictionary *billingResponse = [NSJSONSerialization JSONObjectWithData:data
//                                                                                                 options:0
//                                                                                                   error:NULL];
//
//                                 if (![[billingResponse valueForKey:@"skuLists"] isKindOfClass:[NSNull class]]) {
//                                     priceDic = [[NSMutableArray alloc]init];
//
//                                     NSArray *price_arr = [billingResponse valueForKey:@"skuLists"];
//                                     for (int i=0; i<price_arr.count; i++) {
//
//                                         NSDictionary *json = price_arr[i];
//                                         [priceDic addObject:json];
//                                     }
//                                     NSArray *tempTaxArr = [priceDic[0] valueForKey:@"tax"];
//                                     NSString *itemString = @"";
//                                     if (tempTaxArr.count > 0) {
//                                         itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",priceDic[0][@"quantity"],@"#",price1,@"#",[NSString stringWithFormat:@"%@",vegQty], @"#", [NSString stringWithFormat:@"%@",[priceDic[0][@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[priceDic[0][@"tax"][0] valueForKey:@"taxRate"] doubleValue]]];
//
//                                     }
//                                     else {
//                                         itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",priceDic[0][@"quantity"],@"#",price1,@"#",[NSString stringWithFormat:@"%@",vegQty], @"#", [NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00]];
//
//                                     }
//                                     itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[priceDic[0] valueForKey:PLU_CODE]];
//                                     itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[priceDic[0] valueForKey:@"salePrice"]];
//
//                                     NSMutableDictionary *itemDetailsDic = [NSMutableDictionary new];
//                                     [itemDetailsDic setValue:selected_SKID forKey:SKU_ID];
//                                     [itemDetailsDic setValue:priceDic[0][@"description"] forKey:ITEM_NAME];
//                                     [itemDetailsDic setValue:[NSString stringWithFormat:@"%@",vegQty] forKey:QUANTITY];
//                                     [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",vegQty.floatValue*price1.floatValue] forKey:ITEM_TOTAL_PRICE];
//                                     [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",price1.floatValue] forKey:ITEMUNITPRICE];
//                                     [itemDetailsDic setValue:[NSString stringWithFormat:@"%@",priceDic[0][@"taxCode"]] forKey:TAX_CODE];
//                                     [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",[priceDic[0][@"tax"] doubleValue]] forKey:TAX_RATE];
//                                     [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",[priceDic[0][@"quantity"] floatValue]] forKey:AVAIL_QTY];
//                                     [itemDetailsDic setValue:priceDic[0][PLU_CODE] forKey:PLU_CODE];
//                                     [itemDetailsDic setValue:@"0.0" forKey:EDITED_PRICE];
//                                     [itemDetailsDic setValue:price1 forKey:MRP_Price];
//
//
//                                     if ([cartTotalItems containsObject:itemString]) {
//
//                                         if (![cartItem containsObject:itemString]) {
//
//                                             UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                             [alert show];
//                                             return;
//                                         }
//
//
//                                         //                                         UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product already added to the cart" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                         //                                         [alert show];
//                                         //                                         return;
//
//                                     }
//
//
//                                     if ([priceDic[0][@"quantity"] floatValue] > 0) {
//                                         selected_SKID = [NSString stringWithFormat:@"%@",priceDic[0][@"skuId"]];
//
//
//                                         selected_desc = [[NSString stringWithFormat:@"%@",priceDic[0][@"description"]] copy];
//                                         selected_price = [[NSString stringWithFormat:@"%@",[priceDic[0][@"price"] stringValue]] copy];
//                                         [taxArr addObject:priceDic[0][@"tax"]];
//                                         [cartItemDetails addObject:vegQty];
//                                         [tempArrayItems addObject:itemDetailsDic];
//                                         [cartTotalItems addObject:itemDetailsDic];
//                                         [isVoidedArray addObject:@NO];
//                                         [isVegetable addObject:selected_SKID];
//                                     }
//                                     else{
//                                         [HUD setHidden:YES];
//                                         UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                         [alert show];
//                                     }
//
//
//
//                                     if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//                                         cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height + 60);
//                                     }
//                                     else {
//                                         cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height + 30);
//                                     }
//                                     selectedSaleIdTable.hidden = NO;
//
//                                     [selectedSaleIdTable reloadData];
//                                     SystemSoundID    soundFileObject1;
//                                     NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
//                                     self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                                     AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                                     AudioServicesPlaySystemSound (soundFileObject1);
//
//                                     [self updateValues];
//                                     [self updateItemScanTime];
//                                     [self goToBottom];
//
//                                     //
//                                 }
//
//
//                                 else {
//                                     SystemSoundID    soundFileObject1;
//                                     NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                                     self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                                     AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                                     AudioServicesPlaySystemSound (soundFileObject1);
//                                     UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Product not available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                                     [alert show];
//                                 }
//
//
//                             }
//                         }];
//
//
//                        //                        });
//                    }
//                    @catch (NSException *exception) {
//
//                        NSLog(@"%@",exception);
//
//                    }
//                    @finally {
//
//                        [HUD setHidden:YES];
//
//                    }
//
//                }
//                else  {
//
//                    @try {
//
//                        //
//
//
//                        offline = [[OfflineBillingServices alloc]init];
//                        priceDic = [[NSMutableArray alloc]init];
//                        NSDictionary *itemDic = [offline getProductDetails:[NSString stringWithFormat:@"%@",selected_SKID] isEanSearch:YES];
//
//                        if (itemDic.count>0) {
//                            NSMutableArray *taxRate = [offline getTaxForSku:[NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
//                            NSString *taxValue = @"";
//                            if (taxRate.count>0) {
//                                taxValue = [NSString stringWithFormat:@"%.2f",[[taxRate[0] valueForKey:@"taxRate"] floatValue]];
//                                [taxArr addObject:taxRate];
//                            }
//                            else {
//
//                                taxValue = @"0.00";
//                                [taxArr addObject:taxRate];
//                            }
//                            priceDic = [offline getLocalPriceLists:selected_SKID];
//
//                            NSString *itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",itemDic[@"description"],@"#",itemDic[@"description"],@"#",itemDic[@"quantity"],@"#",price1,@"#",[NSString stringWithFormat:@"%@",vegQty], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]], @"#", [NSString stringWithFormat:@"%.2f",taxValue.floatValue]];
//                            itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[priceDic[0] valueForKey:PLU_CODE]];
//                            itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[priceDic[0] valueForKey:MRP]];
//
//                            NSMutableDictionary *itemDetailsDic = [NSMutableDictionary new];
//                            [itemDetailsDic setValue:selected_SKID forKey:SKU_ID];
//                            [itemDetailsDic setValue:itemDic[@"description"] forKey:ITEM_NAME];
//                            [itemDetailsDic setValue:[NSString stringWithFormat:@"%@",vegQty] forKey:QUANTITY];
//                            [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",vegQty.floatValue*price1.floatValue] forKey:ITEM_TOTAL_PRICE];
//                            [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",price1.floatValue] forKey:ITEMUNITPRICE];
//                            [itemDetailsDic setValue:[NSString stringWithFormat:@"%@",itemDic[@"taxCode"]] forKey:TAX_CODE];
//                            [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",[itemDic[@"tax"] doubleValue]] forKey:TAX_RATE];
//                            [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",[itemDic[@"quantity"] floatValue]] forKey:AVAIL_QTY];
//                            [itemDetailsDic setValue:priceDic[0][PLU_CODE] forKey:PLU_CODE];
//                            [itemDetailsDic setValue:@"0.0" forKey:EDITED_PRICE];
//                            [itemDetailsDic setValue:price1 forKey:MRP_Price];
//
//                            if ([cartTotalItems containsObject:itemString]) {
//
//                                if (![cartItem containsObject:itemString]) {
//
//                                    UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                    [alert show];
//                                    return;
//                                }
//
//
//
//                            }
//
//
//
//                            selected_desc = [NSString stringWithFormat:@"%@",[[itemString componentsSeparatedByString:@"#"][0] copy]];
//                            selected_price = [NSString stringWithFormat:@"%@",[price1 copy]];
//                            [cartItemDetails addObject:vegQty];
//                            [tempArrayItems addObject:itemDetailsDic];
//                            [cartTotalItems addObject:itemDetailsDic];
//                            [isVoidedArray addObject:@NO];
//
//                            [isVegetable addObject:selected_SKID];
//
//
//
//                            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//                                cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height + 60);
//                            }
//                            else {
//                                cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height + 30);
//                            }
//                            selectedSaleIdTable.hidden = NO;
//
//                            [selectedSaleIdTable reloadData];
//                            [HUD setHidden:YES];
//
//                            SystemSoundID    soundFileObject1;
//                            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
//                            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                            AudioServicesPlaySystemSound (soundFileObject1);
//                            [self updateValues];
//                            [self updateItemScanTime];
//                            [self goToBottom];
//                        }
//                        else {
//                            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//                            [HUD setHidden:YES];
//                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                            [alert show];
//                        }
//                    }
//                    @catch (NSException *exception) {
//                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//                        [HUD setHidden:YES];
//                        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                        [alert show];
//
//                    }
//                    @finally {
//
//                        [HUD setHidden:YES];
//                    }
//
//                }
//            }
//            else {
//
//                if (transparentView.hidden) {
//
//                    if (!isOfflineService) {
//
//                        selected_SKID = [barcodeString copy];
//
//
//                        NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns"];
//                        NSArray *objects = @[barcodeString,[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:FALSE]];
//
//                        NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
//
//                        NSError * err;
//                        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
//                        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//                        @try {
//                            dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
//
//                                WebServiceController *serviceController = [WebServiceController new];
//                                serviceController.getSkuDetailsDelegate = self;
//                                [serviceController getSkuDetailsWithData:salesReportJsonString];
//
//                            });
//                        }
//                        @catch (NSException *exception) {
//
//
//                        }
//                        @finally {
//
//
//                        }
//
//                    }
//                    else {
//
//                        @try {
//
//                            selected_SKID = [barcodeString copy];
//
//                            offline = [[OfflineBillingServices alloc]init];
//                            priceDic = [[NSMutableArray alloc]init];
//                            NSDictionary *itemDic = [offline getProductDetails:[NSString stringWithFormat:@"%@",barcodeString] isEanSearch:YES];
//
//                            if (itemDic.count>0) {
//                                selected_SKID = [itemDic valueForKey:@"skuId"];
//                                NSMutableArray *taxRate = [offline getTaxForSku:[NSString stringWithFormat:@"%@",[itemDic valueForKey:@"taxCode"]]];
//
//                                NSString *itemString = @"";
//
//                                priceDic = [offline getLocalPriceLists:[NSString stringWithFormat:@"%@",selected_SKID]];
//                                itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@",itemDic[@"description"],@"#",itemDic[@"description"],@"#",itemDic[@"quantity"],@"#",itemDic[@"price"], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
//                                if (taxRate.count>0) {
//
//                                    [taxArr addObject:taxRate];
//                                    itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[taxRate[0] valueForKey:@"taxRate"]];
//                                }
//                                else {
//
//                                    [taxArr addObject:taxRate];
//                                    itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
//                                }
//
//
//                                if (priceDic.count >1) {
//
//                                    [HUD setHidden:YES];
//                                    for (int i=0; i<priceDic.count; i++) {
//                                        NSString *tax_code = [itemString componentsSeparatedByString:@"#"][4];
//                                        NSString *desc = [itemString componentsSeparatedByString:@"#"][1];
//                                        NSMutableDictionary *dic = [priceDic[i] mutableCopy];
//                                        [dic setValue:tax_code forKey:@"taxCode"];
//                                        [dic setValue:taxRate forKey:@"tax"];
//                                        [dic setValue:desc forKey:@"description"];
//                                        priceDic[i] = dic;
//                                    }
//                                    transparentView.hidden = NO;
//                                    [priceTable reloadData];
//                                    SystemSoundID    soundFileObject1;
//                                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"popup_tune" withExtension: @"mp3"];
//                                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                                    AudioServicesPlaySystemSound (soundFileObject1);
//
//
//                                }
//                                else {
//                                    if(priceDic.count == 1) {
//                                        NSMutableDictionary *dic = [priceDic[0] mutableCopy];
//                                        itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@",itemDic[@"description"],@"#",itemDic[@"description"],@"#",itemDic[@"quantity"],@"#",dic[@"price"], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
//                                        if (taxRate.count>0) {
//
//                                            [taxArr addObject:taxRate];
//                                            itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[taxRate[0] valueForKey:@"taxRate"]];
//                                        }
//                                        else {
//
//                                            [taxArr addObject:taxRate];
//                                            itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
//                                        }
//                                        itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[dic valueForKey:PLU_CODE]];
//                                        itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[dic valueForKey:MRP]];
//                                    }
//                                    //                                    if ([[[itemString componentsSeparatedByString:@"#"] objectAtIndex:2] intValue]!=0) {
//                                    if (priceDic.count >0) {
//                                        selected_desc = [itemString componentsSeparatedByString:@"#"][1];
//                                        selected_price = [[itemString componentsSeparatedByString:@"#"][3] copy];
//                                        [self getSkuDetailsHandler:itemString];
//
//                                    }
//                                    else {
//                                        [HUD setHidden:YES];
//                                        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                        [alert show];
//
//                                    }
//                                    //                                    }
//                                    //                                    else {
//                                    //
//                                    //                                        [HUD setHidden:YES];
//                                    //                                        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                    //                                        [alert show];
//                                    //                                    }
//                                }
//                            }
//                            else {
//
//                                [HUD setHidden:YES];
//                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                [alert show];
//                            }
//                        }
//                        @catch (NSException *exception) {
//
//                            [HUD setHidden:YES];
//                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                            [alert show];
//
//                        }
//
//                    }
//                }
//                else {
//                    SystemSoundID    soundFileObject1;
//                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                    AudioServicesPlaySystemSound (soundFileObject1);
//
//                }
//            }
//
//
//        }
//        else {
//            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Failed to scan the barcode" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//            [alert show];
//        }
//
//    }
//    @catch (NSException *exception) {
//
//        NSLog(@"%@",exception);
//
//    }
//    @finally {
//
//
//    }
//}







- (void)tseriesDidFinishInitializing:(PowaTSeries *)tseries
{
    NSLog(@"before connecting %hhd",isPrinterConnected);
    if(!printer)
    {
        // Get the connected TSeries devices
        NSArray *connectedTSeries = [PowaTSeries connectedDevices];
        isPrinterConnected = TRUE;
        NSLog(@"after connecting %hhd",isPrinterConnected);
        
        // Select the first TSeries device available
        if(connectedTSeries.count)
        {
            printer = connectedTSeries[0];
            [printer addObserver:self];
            [powaPOS addPeripheral:printer];
        }
    }
    
}

- (void)peripheral:(id <PowaPeripheral>)peripheral connectionStateChanged:(PowaPeripheralConnectionState)connectionState
{
    NSString *string = nil;
    
    if(connectionState == PowaPeripheralConnectionStateConnected)
    {
        string = @"Device Connected";
        //        [peripheral connect];
    }
    else
    {
        string = @"Device Disconnected";
        //added newly....
        //        [peripheral disconnect];
    }
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:string message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
    [alert show];
    
}

- (void)accessoryDidConnect:(NSNotification *)notification
{
    
    NSLog(@"notification is hit");
    
    if(!printer)
    {
        // Get the connected TSeries devices
        NSArray *connectedTSeries = [PowaTSeries connectedDevices];
        
        // Select the first TSeries device available
        if(connectedTSeries.count)
        {
            printer = connectedTSeries[0];
            [printer addObserver:self];
            [powaPOS addPeripheral:printer];
        }
    }
    
    if(!scanner)
    {
        // Get the connected scanners
        NSArray *connectedScanners = [PowaS10Scanner connectedDevices];
        
        // Select the first S10 scanner device available
        if(connectedScanners.count)
        {
            scanner = connectedScanners[0];
            [scanner addObserver:self];
            [powaPOS addPeripheral:scanner];
        }
    }
    
}


- (void)tseriesPrinterResult:(PowaTSeriesPrinterResult)result
{
    NSLog(@"called print result");
    
    if(result == PowaTSeriesPrinterResultSuccessfull)
    {
        @try {
            if (!([billingType isEqualToString:@"pending"] && (billDueValue.text).floatValue >0 && [paymentTypeVal.text isEqualToString:@"Door Delivery"])) {
                
                [self changeStatus:YES];
                
            }
            BillingHome *home = [[BillingHome alloc]init];
            
            //changed by Srinivasulu  on 25/09/2017....
            
            //            [self.navigationController pushViewController:home animated:NO];
            [self.navigationController pushViewController:home animated:YES];
            
            //upto here on 25/09/2017....
        }
        @catch (NSException *exception) {
            
            NSLog(@"exception in print result %@ ",exception);
        }
        
        
    }
    if(result == PowaTSeriesPrinterResultErrorThermalMotor)
    {
        
        NSString *string = [NSString stringWithFormat:@"Printer Overheated"];
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Warning"
                                                            message:string
                                                           delegate:self
                                                  cancelButtonTitle:@"Cancel"
                                                  otherButtonTitles:nil, nil];
        [alertView show];
    }
    if(result == PowaTSeriesPrinterResultReady)
    {
        NSString *string = [NSString stringWithFormat:@"Ready"];
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Printer Result"
                                                            message:string
                                                           delegate:self
                                                  cancelButtonTitle:@"Cancel"
                                                  otherButtonTitles:nil, nil];
        [alertView show];
    }
    if(result == PowaTSeriesPrinterResultErrorOutOfPaper)
    {
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Please insert paper roll"
                                                            message:nil
                                                           delegate:self
                                                  cancelButtonTitle:@"Cancel"
                                                  otherButtonTitles:nil, nil];
        [alertView show];
    }
    //    if(result == PowaTSeriesPrinterResultErrorReceivingData)
    //    {
    //        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Failed to get print"
    //                                                            message:nil
    //                                                           delegate:self
    //                                                  cancelButtonTitle:@"Cancel"
    //                                                  otherButtonTitles:nil, nil];
    //        [alertView show];
    //    }
    
    
}

- (void)tseries:(PowaTSeries *)tseries deviceConnectedAtPort:(NSUInteger)port
{
    NSString *string = [NSString stringWithFormat:@"device connected %lu", (unsigned long)port];
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Debug"
                                                        message:string
                                                       delegate:self
                                              cancelButtonTitle:@"Cancel"
                                              otherButtonTitles:nil, nil];
    [alertView show];
}
- (void)tseries:(PowaTSeries *)tseries deviceDisconnectedAtPort:(NSUInteger)port
{
    NSString *string = [NSString stringWithFormat:@"Disconnected device in port: %i", (int)port];
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Device Disconnected"
                                                        message:string
                                                       delegate:self
                                              cancelButtonTitle:@"Cancel"
                                              otherButtonTitles:nil, nil];
    [alertView show];
}

- (void)centralManagerDidUpdateState:(CBCentralManager *)central {
    
    if (central.state == CBCentralManagerStatePoweredOn) {
        bluetoothEnabled = YES;
        [HUD setHidden:NO];
        HUD.labelText = @"Please wait...";
        
        [[MswipeWisepadController sharedInstance] processLoginAuthentication:@"9100000483" stPassord:@"techno" responsehadnler:self] ;
    }
    else {
        bluetoothEnabled = NO;
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Bluetooth Disabled" message:@"Please Enable Bluetooth to continue" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    }
}

//-(NSString*)printMessage{
//    NSString *finalPrintMessage = @"";
//    @try {
//
//        NSString *storeAddress = [WebServiceUtility getStoreAddress];
//
//        NSMutableAttributedString *storeAddressSringWithAttr = [[NSMutableAttributedString alloc] initWithString:storeAddress];
//        [storeAddressSringWithAttr addAttribute:NSFontAttributeName
//                                          value:[UIFont boldSystemFontOfSize:20]
//                                          range:NSMakeRange(0,storeAddress.length)];
//
//        NSDate *today = [NSDate date];
//        NSDateFormatter *f = [[NSDateFormatter alloc] init];
//        [f setDateFormat:@"dd/MM/yyyy HH:mm:ss"];
//        NSString* currentdate = [f stringFromDate:today];
//
//        NSString *posString = [NSString stringWithFormat:@"%@%@",@"Pos  : ",counterName];
//        if ([printCount intValue]!=0) {
//
//            posString = [NSString stringWithFormat:@"%@%@%@%@",posString,@"#########Duplicate - ",printCount,@"\n"];
//        }
//        else {
//            posString = [NSString stringWithFormat:@"%@%@",posString,@"\n"];
//
//        }
//        NSString *userId = [NSString stringWithFormat:@"%@%@%@",@"User  : ",firstName,@"\n"];
//        //        userId = [userId uppercaseString];
//        NSString *Date = [NSString stringWithFormat:@"%@%@%@",@"DATE :",currentdate,@"\n"];
//        NSString *bill = [NSString stringWithFormat:@"%@%@%@",@"BILL NO :",pastBillField.text,@"\n"];
//
//        NSString *itemHeader = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@"Item Name#######Qty#######Rate#######Amount\n",@"--------------------------------------------\n"];
//        int quantity = 0;
//        NSString *allItems = @"";
//        for (int i = 0; i < [tempArrayItems count]; i++) {
//            NSDictionary *temp3 = [tempArrayItems objectAtIndex:i];
//
//            NSString *item = [NSString stringWithFormat:@"%@",[temp3 valueForKey:ITEM_NAME]];
//            int itemLength = item.length;
//            if (itemLength >= 17) {
//                item = [NSString stringWithFormat:@"%@%@",[item substringWithRange:NSMakeRange(0, 15)],@"##"];
//            } else {
//                for (int j = 0; j < 17 - itemLength; j++) {
//                    item = [NSString stringWithFormat:@"%@%@",item,@"#"];
//                    //item += "#";
//                }
//            }
//            quantity = quantity + [[temp3 valueForKey:QUANTITY] intValue];
//            NSString *qty = [NSString stringWithFormat:@"%.2f",[[temp3 valueForKey:QUANTITY] floatValue]];
//            int qtyLength = qty.length;
//            for (int j = 0; j < 10 - qtyLength; j++) {
//
//                qty = [NSString stringWithFormat:@"%@%@",qty,@"#"];
//                //qty += "#";
//            }
//            NSString *rate = @"";
//            if ([[temp3 valueForKey:EDITED_PRICE] floatValue] == 0) {
//                rate = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:ITEM_TOTAL_PRICE] floatValue] / [[temp3 valueForKey:QUANTITY] intValue])];
//
//            }
//            else {
//                rate = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:EDITED_PRICE] floatValue])];
//            }
//            int rateLength = rate.length;
//            for (int k = 0; k < 11 - rateLength; k++) {
//                rate = [NSString stringWithFormat:@"%@%@",rate,@"#"];
//                //rate += "#";
//
//            }
//            NSString *amount = @"";
//            if ([[temp3 valueForKey:EDITED_PRICE] floatValue] == 0) {
//                amount = [NSString stringWithFormat:@"%.02f",[[temp3 valueForKey:ITEM_TOTAL_PRICE] floatValue]];
//            }
//            else {
//                amount = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:EDITED_PRICE] floatValue] * [[temp3 valueForKey:QUANTITY] intValue])];
//            }
//            allItems = [NSString stringWithFormat:@"%@%@%@%@%@%@",allItems,item,qty,rate,amount,@"\n"];
//            //allItems += item + qty + rate + amount + "\n";
//
//        }
//
//        allItems = [NSString stringWithFormat:@"%@%@",allItems,@"--------------------------------------------\n"];
//
//        NSString *totalQTY = [NSString stringWithFormat:@"%@%@%@%@",@"TOTAL ITEMS :",@"#############",[NSString stringWithFormat:@"%d",quantity],@"\n"];
//        NSString *discountString = @"";
//        if ([discountValue.text floatValue] > 0) {
//            discountString = [NSString stringWithFormat:@"%@%@%@",@"Discount :############################",discountValue.text,@"\n"];
//        }
//        NSString *totalAmount = [NSString stringWithFormat:@"%@%@%@%@%@",@"TOTAL AMOUNT :",@"########################",[NSString stringWithFormat:@"%@",totalBillValue.text],@"\n",@"--------------------------------------------\n"];
//        NSString *grandTotoal = [NSString stringWithFormat:@"%@%@%@%@%@",@"TOTAL :",@"##############################",[NSString stringWithFormat:@"%@",totalBillValue.text],@"\n",@"--------------------------------------------\n"];
//
//        NSString *paymentString = @"";
//
//        float cashTotal = 0.0f;
//        float cardTotal = 0.0f;
//        float sodexoTotal = 0.0f;
//        float ticketTotal = 0.0f;
//        float giftVouchTotal = 0.0f;
//
//        for (NSDictionary *paymentDic in tempPaymentDetails) {
//            if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Cash"]) {
//                cashTotal += [[paymentDic valueForKey:@"paidAmount"] floatValue];
//            }
//            if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Card"]) {
//                cardTotal += [[paymentDic valueForKey:@"paidAmount"] floatValue];
//            }
//            if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Sodexo"]) {
//                sodexoTotal += [[paymentDic valueForKey:@"paidAmount"] floatValue];
//            }
//            if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Ticket"]) {
//                ticketTotal += [[paymentDic valueForKey:@"paidAmount"] floatValue];
//            }
//            if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"giftvoucher"]) {
//                giftVouchTotal += [[paymentDic valueForKey:@"paidAmount"] floatValue];
//            }
//        }
//        if (cashTotal > 0) {
//            paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Tendered-CASH#########################",[NSString stringWithFormat:@"%.1f",cashTotal],@"\n"];
//
//        }
//        if (cardTotal > 0) {
//            paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Tendered-CARD#########################",[NSString stringWithFormat:@"%.1f",cardTotal],@"\n"];
//            paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Card ###",bankName,@"\n"];
//            paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Appr ###",appCode,@"\n"];
//
//        }
//        if (sodexoTotal > 0) {
//            paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Sodexo################################",[NSString stringWithFormat:@"%.1f",sodexoTotal],@"\n"];
//
//        }
//        if (ticketTotal > 0) {
//            paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Ticket################################",[NSString stringWithFormat:@"%.1f",ticketTotal],@"\n"];
//
//        }
//        if (giftVouchTotal > 0) {
//            paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Gift Voucher################",[NSString stringWithFormat:@"%.1f",giftVouchTotal],@"\n"];
//
//        }
//        float returnAmount = 0.0f;
//        for (NSDictionary *returnDic in denominations) {
//            if ([[returnDic valueForKey:@"returnDenominationNo"] intValue] > 0 && [[returnDic valueForKey:@"paidDenominationNo"] intValue] == 0) {
//                returnAmount += [[returnDic valueForKey:@"returnAmount"] floatValue];
//            }
//        }
//        if ([totalChangeReturnStr floatValue] > 0) {
//            paymentString = [NSString stringWithFormat:@"%@%@%.2f%@",paymentString,@"Change  -CASH#########################",[totalChangeReturnStr floatValue],@"\n"];
//        }
//
//        paymentString = [NSString stringWithFormat:@"%@%@",paymentString,@"--------------------------------------------\n"];
//
//        NSString *wishMsg = [NSString stringWithFormat:@"%@",@"#####We accept sodexo & Ticket Restuarant\n"];
//        wishMsg = [NSString stringWithFormat:@"%@%@",wishMsg,@"#####We accept all major credit card\n\n\n\n\n"];
//
//        if ([discountValue.text floatValue] > 0) {
//            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,posString,userId,Date,bill,itemHeader,allItems,totalQTY,discountString,totalAmount,grandTotoal,paymentString,wishMsg];
//        }
//        else{
//            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,posString,userId,Date,bill,itemHeader,allItems,totalQTY,totalAmount,grandTotoal,paymentString,wishMsg];
//        }
//        finalPrintMessage = [finalPrintMessage stringByReplacingOccurrencesOfString:@"#" withString:@" "];
//
//    }
//    @catch (NSException *exception) {
//
//        finalPrintMessage = @"";
//        NSLog(@"%@",exception);
//
//    }
//
//    return finalPrintMessage;
//}





// close SMSView....
-(void) closeSMSView{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    [smsField resignFirstResponder];
    [baseView setHidden:YES];
}

// If phone number is valid send sms to user...
-(void) handelSMS{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    // NSString *value = [smsField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    // PhoNumber validation...
    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
    BOOL isNumber = [decimalTest evaluateWithObject:smsField.text];
    //int qty = [value intValue];
    
    if((smsField.text).length <= 9 || (smsField.text).length >= 12 || !isNumber) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    else{
        
        [smsField resignFirstResponder];
        [baseView setHidden:YES];
    }
}


// SMS delegte handle.....
- (void)messageComposeViewController:(MFMessageComposeViewController *)controller   didFinishWithResult:(MessageComposeResult)result
{
    switch (result)
    {
        case MessageComposeResultCancelled:{
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"SMS" message:@"MessageComposeResultCancelled"
                                                           delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
            [alert show];
            break;
        }
            
        case MessageComposeResultFailed:{
            UIAlertView *alert1 = [[UIAlertView alloc] initWithTitle:@"SMS" message:@"Message Failed"
                                                            delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
            [alert1 show];
            break;
        }
            
        case MessageComposeResultSent:{
            
            //            UIAlertView *alert1 = [[UIAlertView alloc] initWithTitle:@"SMS" message:@"Message has been sent"
            //                                                            delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
            //            [alert1 show];
            break;
        }
            
        default:
            break;
    }
    [self dismissViewControllerAnimated:YES completion:nil];
}


// runScheduledTask handler...
- (void) runScheduledTask:(NSTimer*)theTimer {
    
    if ([(NSString*)theTimer.userInfo isEqualToString:@"paymentView"]) {
        
        if (paymentView.subviews){
            for (UIView *subview in paymentView.subviews) {
                [subview removeFromSuperview];
            }
        }
        paymentView.hidden = YES;
    }
    else if([(NSString*)theTimer.userInfo isEqualToString:@"mailView"]) {
        
        if (mailView.subviews){
            for (UIView *subview in mailView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        mailView.hidden = YES;
    }
    else if([(NSString*)theTimer.userInfo isEqualToString:@"printView"]) {
        
        if (printView.subviews){
            for (UIView *subview in printView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        printView.hidden = YES;
        [HUD setHidden:YES];
    }
    else if([(NSString*)theTimer.userInfo isEqualToString:@"smsView"]) {
        
        if (smsView.subviews){
            for (UIView *subview in smsView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        smsView.hidden = YES;
        [smsView removeFromSuperview];
    }
    
    
    aTimer = nil;
}

-(BOOL)textFieldShouldClear:(UITextField *)textField {
    
    return YES;
}





// disable all siblings of a view ..
- (void)setSiblings:(UIView *)view enabled:(BOOL)enabled {
    
    //NSLog(@" %@",[self.view subviews]);
    for (UIView *sibling in self.view.subviews) {
        if (sibling != view) sibling.userInteractionEnabled = enabled;
        
    }
}

// continueFurther handler...
- (void) continueFurther:(id) sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    if ([sender tag] == 1) {
        
        //        if ([group getSelected] == 0) {    // swipe
        //
        //             swipe_Status = billDueValue.text;
        //
        //            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //                @try {
        //                    SwipeControllerIpadViewController *viewController = [[[SwipeControllerIpadViewController alloc] initWithNibName:@"SwipeControllerIpadViewController" bundle:nil] autorelease];
        //                    [self presentViewController:viewController animated:YES completion:nil];
        //                    [self setSiblings:paymentView enabled:TRUE];
        //                }
        //                @catch (NSException *exception) {
        //                    UIAlertView *check = [[UIAlertView alloc] initWithTitle:@"Failed to load" message:@"Please try again" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //                    [check show];
        //                    [check release];
        //                }
        //
        //
        //            }
        //            else{
        //                @try {
        //                    SwipeController *viewController = [[[SwipeController alloc] initWithNibName:@"SwipeController" bundle:nil] autorelease];
        //                    [self presentViewController:viewController animated:YES completion:nil];
        //                    [self setSiblings:paymentView enabled:TRUE];
        //                }
        //                @catch (NSException *exception) {
        //                    UIAlertView *check = [[UIAlertView alloc] initWithTitle:@"Failed to load" message:@"Please try again" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //                    [check show];
        //                    [check release];
        //                }
        //
        //            }
        //
        //
        //        }
        //        else if ([group getSelected] == 1) {    // swipe
        //
        //            swipe_Status = billDueValue.text;
        //
        //            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //                @try {
        //                    SwipeControllerIpadViewController *viewController = [[[SwipeControllerIpadViewController alloc] initWithNibName:@"SwipeControllerIpadViewController" bundle:nil] autorelease];
        //                    [self presentViewController:viewController animated:YES completion:nil];
        //                    [self setSiblings:paymentView enabled:TRUE];
        //                }
        //                @catch (NSException *exception) {
        //                    UIAlertView *check = [[UIAlertView alloc] initWithTitle:@"Failed to load" message:@"Please try again" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //                    [check show];
        //                    [check release];
        //                }
        //
        //
        //            }
        //            else{
        //                @try {
        //                    SwipeController *viewController = [[[SwipeController alloc] initWithNibName:@"SwipeController" bundle:nil] autorelease];
        //                    [self presentViewController:viewController animated:YES completion:nil];
        //                    [self setSiblings:paymentView enabled:TRUE];
        //                }
        //                @catch (NSException *exception) {
        //                    UIAlertView *check = [[UIAlertView alloc] initWithTitle:@"Failed to load" message:@"Please try again" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //                    [check show];
        //                    [check release];
        //                }
        //
        //            }
        //        }
        
        
    }
    else if ([sender tag] == 3) {      // email
        
        
        if ([self validateEmail:emailTxt.text]) {
            
            mailView.hidden = YES;
            
            if (mailView.subviews){
                for (UIView *subview in mailView.subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            
            // get the sender credentials from database ..
            NSString *emailText = NULL;
            NSString *password = NULL;
            NSString *mailHost = NULL;
            //NSString *portNumber = NULL;
            
            NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
            
            if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
                
                const char *sqlStatement = "select * from EmailCredentials";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        emailText = @((char *)sqlite3_column_text(selectStmt, 0));
                        password = @((char *)sqlite3_column_text(selectStmt, 1));
                        mailHost = @((char *)sqlite3_column_text(selectStmt, 2));
                        //portNumber = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 3)];
                    }
                    sqlite3_finalize(selectStmt);
                }
            }
            
            selectStmt = nil;
            sqlite3_close(database);
            
            if (emailText != NULL || password != NULL || mailHost != NULL) {
                
                // create soft wait overlay so the user knows whats going on in the background.
                [self createWaitOverlay];
                
                //the guts of the message.
                //                SKPSMTPMessage *testMsg = [[[SKPSMTPMessage alloc] init] autorelease];
                //                testMsg.fromEmail = emailText;
                //                testMsg.toEmail = payTxt2.text;
                //                testMsg.relayHost = mailHost;
                //                testMsg.requiresAuth = YES;
                //                testMsg.login = emailText;
                //                testMsg.pass = password;
                //                testMsg.subject = @"Bill Status";
                //                //testMsg.wantsSecure = YES; // smtp.gmail.com doesn't work without TLS!
                //
                //                NSArray *arry = [emailText componentsSeparatedByString:@"@"];
                //                if ([[arry objectAtIndex:1] isEqualToString:@"technolabssoftware.com"]) {
                //                    testMsg.wantsSecure = NO;
                //                }
                //                else{
                //                    testMsg.wantsSecure = YES;
                //                }
                //
                //                // Only do this for self-signed certs!
                //                // testMsg.validateSSLChain = NO;
                //                testMsg.delegate = self;
                //
                //                //email contents
                //                //NSString * bodyMessage = [NSString stringWithFormat:@"%@%@",@"The BillDue is:",billDueValue.text];
                //                NSString * bodyMessage = [NSString stringWithFormat:@"%@",[self emailBill]];
                //
                //                NSDictionary *plainPart = [NSDictionary dictionaryWithObjectsAndKeys:@"text/html",kSKPSMTPPartContentTypeKey,
                //                                           bodyMessage ,kSKPSMTPPartMessageKey,@"8bit",kSKPSMTPPartContentTransferEncodingKey,nil];
                //
                //                testMsg.parts = [NSArray arrayWithObjects:plainPart,nil];
                //
                //                [testMsg send];
                
                //                MCOSMTPSession *smtpSession = [[MCOSMTPSession alloc] init];
                //                smtpSession.hostname = mailHost;
                //                smtpSession.port = 465;
                //                smtpSession.username = emailText;
                //                smtpSession.password = password;
                //                smtpSession.authType = MCOAuthTypeSASLPlain;
                //                smtpSession.connectionType = MCOConnectionTypeTLS;
                //                [smtpSession setCheckCertificateEnabled:NO];
                //
                //                NSData *rfc822Data = NULL;
                //
                //                MCOMessageBuilder *builder = [[MCOMessageBuilder alloc] init];
                //                MCOAddress *from = [MCOAddress addressWithMailbox:emailText];
                //                MCOAddress *to = [MCOAddress addressWithMailbox:[payTxt2.text copy]];
                //                [[builder header] setFrom:from];
                //                [[builder header] setTo:@[to]];
                //                [[builder header] setSubject:@"Bill Status"];
                //
                //                NSData *imgdata = UIImagePNGRepresentation([UIImage imageNamed:@"logo_email.png"]);
                //
                //                MCOAttachment *attachment = [MCOAttachment attachmentWithData:imgdata filename:@"BillStatus"];
                //                NSString *uuuid = [[NSUUID UUID] UUIDString];
                //                [attachment setContentID:uuuid];
                //                [attachment setInlineAttachment:YES];
                //                [builder addRelatedAttachment:attachment];
                //
                //
                //                [builder setHTMLBody:[self emailBill:uuuid]];
                //                rfc822Data = [builder data];
                //
                //                MCOSMTPSendOperation *sendOperation =
                //                [smtpSession sendOperationWithData:rfc822Data];
                //                [sendOperation start:^(NSError *error) {
                //                    if(error) {
                //                        NSLog(@"Error sending email: %@", error);
                //                        [HUD hide:YES];
                //                        [self messageFailed];
                //                    }
                //
                //                    else {
                //                        [self messageSent];
                //                    }
                //                }];
                
                
                
            }
            else {
                
                
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please configure \n Sender mail" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            
        }
        else {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Pls Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    
    
}

- (NSString *) emailBill:(NSString *)imgid {
    
    // getting present date & time ..
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"yyyy/MM/dd HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    
    
    int value;
    if ((payTxt2.text).intValue > 0) {
        value = (payTxt2.text).intValue;
    }
    else{
        value = (billDueValue.text).intValue;
    }
    
    // NSString *urlAddress = @"http://upload.wikimedia.org/wikipedia/en/1/11/HeritageFoodslogo.jpg";
    //  NSURL *url = [NSURL URLWithString:urlAddress];
    
    NSString *str = [NSString stringWithFormat:@"<html><body><span style = 'font-family: sans-serif;font-weight:18px'>Hi,</span></br></br><table style='left-margin:20px;'><tr><td ><img src='cid:%@' width='350' height='100'></td><td style=' font-face :Arial; size :20px;'><b>Chai's Dosa Magic,<br/>#95, 60 feet Road, 6th Block<br/>(opp, Anand sweet) Koramangala<br/>Bangalore-560095.<br/>Ph:080-40973766.</b></td></tr></table>",imgid];
    
    
    
    str = [NSString stringWithFormat:@"%@%@",str,@"<span style = ' border:1px padding-top: 5px;margin-left:100px'  bgcolor = '#000000' ><b> Billing Details </b></span> <br><br>"];
    
    str = [NSString stringWithFormat:@"%@%@",str,@"<table border='1px' width='400'><tr align='center' bgcolor = '#0A3D7F'><th style = 'color:white;height:15px'>S No</th><th style = 'color:white;height:15px'>Item</th><th style = 'color:white;height:15px'>Price</th><th style = 'color:white;height:15px'>Quantity</th><th style = 'color:white;height:15px'>Amount</th></tr>"];
    
    for (int i = 0; i < tempArrayItems.count; i++) {
        
        NSArray *temp = tempArrayItems[i] ;
        if (i%2 == 0) {
            str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
        }
        else{
            str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr height='20px' align='center' bgcolor = 'white' ><td style = 'color:gray'>",i+1,@"</td>"];
        }
        str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[1],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@%@", str,@"<td style = 'color:gray'>",@"Rs.",temp[3],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>", temp[2],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[3],@"</td></tr>"];
    }
    
    
    str = [NSString stringWithFormat:@"%@%@",str,@"</table><br><br>"];
    str = [NSString stringWithFormat:@"%@%@%@%@", str, @"<span style = 'margin-left:240px;color:gray'><b>Total Amount   :&nbsp;&nbsp;Rs.</b> ", totalBillValue.text,@"/- </span><br/><br/>"];
    
    str = [NSString stringWithFormat:@"%@%@",str,@"<span style = ' border:1px padding-top: 5px;margin-left:100px' bgcolor = '#000000' ><b> Transaction Details</b></span> <br><br>"];
    
    
    str = [NSString stringWithFormat:@"%@%@",str,@"<table border='1px' width='450px'><tr align='center' bgcolor = '#0A3D7F'><th style = 'color:white; height:15px'>S No</th><th style = 'color:white;height:15px'>Tax Id</th><th style = 'color:white;height:15px'>Date</th><th style = 'color:white;height:15px'>Payment Mode</th><th style = 'color:white;height:15px'>Amount</th></tr>"];
    
    for (int i=0; i<tempPaymentDetails.count; i++) {
        
        NSArray *temp = tempPaymentDetails[i] ;
        if (i%2 == 0) {
            str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr  height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
        }
        else{
            str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr  height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
        }
        str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[0],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>",temp[6],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>", temp[1],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[5],@"</td></tr>"];
        
    }
    str = [NSString stringWithFormat:@"%@%@",str,@"</table><br><br>"];
    
    if (tempReturnDetails.count > 0 ) {
        
        str = [NSString stringWithFormat:@"%@%@",str,@"<span style = 'align :center;bgcolor:#000000;font-family: Arial;font-weight:32px> Return Details </span> <br/><br>"];
        
        str = [NSString stringWithFormat:@"%@%@",str,@"<table border='1' width='400'><tr align='center' bgcolor = '#0A3D7F'><th style = 'color:white;  height:15px'>S No</th><th style = 'color:white; height:15px'>Tax Id</th><th style = 'color:white; height:15px'>Date</th><th style = 'color:white; height:15px'>Payment Mode</th><th style = 'color:white; height:15px'>Amount</th></tr>"];
        
        for (int i=0; i<tempReturnDetails.count; i++) {
            
            NSArray *temp = tempPaymentDetails[i] ;
            if (i%2 == 0) {
                str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr  height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
            }
            else{
                str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr  height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
            }
            str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[0],@"</td>"];
            str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>",temp[6],@"</td>"];
            str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>", temp[1],@"</td>"];
            str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[5],@"</td></tr>"];
            
        }
        str = [NSString stringWithFormat:@"%@%@",str,@"</table><br><br>"];
        
    }
    else if ( tempExchangeDetails.count > 0) {
        
        str = [NSString stringWithFormat:@"%@%@",str,@"<span style = ' border:1px padding-top: 5px;margin-left:100px'  bgcolor = '#000000' ><b> Exchange Details </b></span> <br><br>"];
        
        str = [NSString stringWithFormat:@"%@%@",str,@"<table border='1px' width='400'><tr align='center' bgcolor = '#0A3D7F'><th style = 'color:white; height:15px'>S No</th><th style = 'color:white; height:15px'>Sku Id</th><th style = 'color:white; height:15px'>Date</th><th style = 'color:white; height:15px'>Quantity</th><th style = 'color:white; height:15px'>Price</th><th style = 'color:white; height:15px'>Reason</th></tr>"];
        
        for (int i=0; i<tempExchangeDetails.count; i++) {
            
            NSString *temp1 = tempExchangeDetails[i] ;
            NSArray *temp = [temp1 componentsSeparatedByString:@"#"];
            if (i%2 == 0) {
                str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr  height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
            }
            else{
                
                str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr  height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
            }
            str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[7],@"</td>"];
            str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>",temp[2],@"</td>"];
            str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>", temp[5],@"</td>"];
            str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[0],@"</td>"];
            str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[6],@"</td> </tr>"];
            
            
        }
        str = [NSString stringWithFormat:@"%@%@",str,@"</table><br><br>"];
        
    }
    
    
    str =  [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px; color:gray'> Deal-Offer  &nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right;color:black'> Rs. &nbsp;",discountValue.text,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px;color:gray'>Sub-Total &nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right'>  Rs.&nbsp;",subTotalBillValue.text,@"/-</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px; color:gray'> Tax(5.5%)  &nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right;color:black'> Rs. &nbsp;" ,tax_Value,@"/-</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px; color:gray'>Total Bill &nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right'>  Rs. &nbsp; ", totalBillValue.text,@"/-</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%d%@", str, @" <span style = 'margin-left :230px; color:gray'>BillDue  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right'> Rs.&nbsp; ", value,@"/-</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@", str, @"<span style = 'margin-left :230px; color:gray'> Bill Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right'>",currentdate ,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@", str, @"<span style = 'margin-left :230px; color:gray'>Customer Name  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span> ",@"<span style = 'align:right'>", customerNameValue.text,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@", str, @"<span style = 'margin-left :230px; color:gray'>Bill Done by  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>",@"<span style = 'align:right'>",   user_name,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px; color:gray'>  Bill ID &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span>",@"<span style = 'align:right'>" ,   pastBillField.text,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@",str,@"<span style = 'color:gray'><b> Bill Done!!!",@"</b></span><br><br><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@", str, @"<span style = 'color:gray'>Thank you.Visit Again..!!",@"</span></body></html>"];
    
    return str;
}



//Number pad close...
-(void)doneWithNumberPad{
    
    [payTxt2 resignFirstResponder];
    [qtyFeild resignFirstResponder];
}


//   smtp mail delegate methods ..
// email id validation method  ..

- (BOOL) validateEmail: (NSString *) candidate {
    NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    
    return [emailTest evaluateWithObject:candidate];
}



//continuePay handler...
- (void) continuePay:(id) sender {
    
    //cartTable.userInteractionEnabled = NO;
    //[paymentView removeFromSuperview];
    
    segmentedControl.enabled  = NO;
    BillField.enabled = NO;
    // barcodeBtn.enabled = NO;
    cartTable.userInteractionEnabled = NO;
    //skListTable.userInteractionEnabled = NO;
    
    
    tlabel = [[UILabel alloc] init];
    tlabel.text = @"Enter your signature";
    tlabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    tlabel.backgroundColor = [UIColor blackColor];
    tlabel.textAlignment = NSTextAlignmentCenter;
    tlabel.textColor = [UIColor whiteColor];
    
    signView = [[QImageView alloc] initWithImage:nil];
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        signView.frame = CGRectMake(100, 150, 600, 500);
        tlabel.frame = CGRectMake(100, 105, 600, 50);
        tlabel.font = [UIFont systemFontOfSize:30];
    }
    else{
        signView.frame = CGRectMake(10, 70, 300, 270);
        tlabel.frame = CGRectMake(10, 40, 300, 35);
        tlabel.font = [UIFont systemFontOfSize:20];
    }
    
    //signView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:0.5f];
    //signView.userInteractionEnabled=YES;
    signView.layer.borderColor = [UIColor grayColor].CGColor;
    signView.backgroundColor = [UIColor whiteColor];
    signView.layer.borderWidth = 3;
    [self.view addSubview:signView];
    [self.view bringSubviewToFront:signView];
    [self.view addSubview:tlabel];
    signView.hidden = NO;
    
    card_Number1 = [cardNumber copy];
    amount_Paid = [amountPaid copy];
    
    
    backview = [[UIView alloc] init];
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        backview.frame = CGRectMake(100, 650, 600, 60);
    }
    else{
        backview.frame = CGRectMake(10, 340, 300, 40);
    }
    backview.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.5f];
    [self.view addSubview:backview];
    
    
    okbtn = [[UIButton alloc] init];
    [okbtn addTarget:self action:@selector(okcancel:) forControlEvents:UIControlEventTouchUpInside];
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        okbtn.frame = CGRectMake(15,0,60,60);
    }
    else{
        okbtn.frame = CGRectMake(5,0,40,40);
    }
    [okbtn setBackgroundImage:[UIImage imageNamed:@"ok-icon.png"] forState:UIControlStateNormal];
    okbtn.tag = 0;
    [backview addSubview:okbtn];
    
    
    cancelbtn = [[UIButton alloc] init];
    [cancelbtn addTarget:self action:@selector(okcancel:) forControlEvents:UIControlEventTouchUpInside];
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        cancelbtn.frame = CGRectMake(530,0,60,60);
    }
    else{
        cancelbtn.frame = CGRectMake(240,0,40,40);
    }
    [cancelbtn setBackgroundImage:[UIImage imageNamed:@"Cancel_72.png"] forState:UIControlStateNormal];
    [backview addSubview:cancelbtn];
    
    
    color = [[UIButton alloc] init];
    [color addTarget:self action:@selector(selectColor:) forControlEvents:UIControlEventTouchUpInside];
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        color.frame = CGRectMake(250,0,60,60);
    }
    else{
        color.frame = CGRectMake(120,0,40,40);
    }
    [color setBackgroundImage:[UIImage imageNamed:@"coloricon.png"] forState:UIControlStateNormal];
    [backview addSubview:color];
    
    
    
    okbtn.hidden = NO;
    cancelbtn.hidden = NO;
    color.hidden = NO;
    tlabel.hidden = NO;
    
    if (paymentView.subviews){
        for (UIView *subview in paymentView.subviews) {
            [subview removeFromSuperview];
        }
    }
    
    // Enable the backgroud views ..
    [self setSiblings:paymentView enabled:TRUE];
    
    paymentView.hidden = YES;
}

- (void) openCloseView:(id)sender {
    
    if ((UIButton*)sender == openDetails) {
        openDetails.hidden = YES;
        
        label_6.hidden = NO;
        label_7.hidden = NO;
        label_8.hidden = NO;
        label_9.hidden = NO;
        label_10.hidden = NO;
        scrollView1.hidden = NO;
        
        closeDetails.hidden = NO;
    }
    else{
        openDetails.hidden = NO;
        label_6.hidden = YES;
        label_7.hidden = YES;
        label_8.hidden = YES;
        label_9.hidden = YES;
        label_10.hidden = YES;
        scrollView1.hidden = YES;
        closeDetails.hidden = YES;
    }
}

//OKcancel method handler...
- (void) okcancel:(id)sender {
    
    if ((UIButton*)sender == okbtn) {
        
        [self continuePay1];
    }
    else {
    }
    
    swipe_Status = @"";
    //[self continuePay1];
    
    signView.hidden = YES;
    backview.hidden = YES;
    okbtn.hidden = YES;
    cancelbtn.hidden = YES;
    color.hidden = YES;
    tlabel.hidden = YES;
    BillField.enabled = YES;
    
    
    
    cartTable.userInteractionEnabled = YES;
    segmentedControl.enabled  = YES;
}

- (void) continuePay2 {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    if((payTxt2.text).floatValue < minPayAmt && mainsegmentIndex ==2) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:NSLocalizedString(@"min_payment_not_reached", nil), minPayAmt] message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil, nil];
        [alert show];
        return;
    }
    
    NSString *phoneValue = [phnotext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    NSString *mailValue = [emailtext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    NSString *nameValue = [nametext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    customerNameValue.text = [nametext.text copy];
    
    
    if ([paymentTypeVal.text isEqualToString:@"Door Delivery"]) {
        
        //changed by Srinivasulu on 04/05/2017....
        
        //        if ([phoneValue length]>0 && [nameValue length]>0 && [streettext.text length]>0 && [locltytext.text length]>0 && [citytext.text length]>0) {
        
        
        if (phoneValue.length>0 && nameValue.length>0 && (streettext.text).length>0 && (locltytext.text).length>0 && (citytext.text).length>0 && (doorNoTxt.text).length > 0) {
            
            //upto here on 04/05/2017....
            
            
            if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                
                [self setSiblings:paymentView enabled:TRUE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            else  if ((emailtext.text).length!=0) {
                
                if([self validateEmail:emailtext.text] == FALSE){
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
                else {
                    [self addCustomerDetails];
                    
                }
            }
            else {
                [self addCustomerDetails];
            }
            
        }
        
        else {
            
            if (phoneValue.length == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter phone no" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
                
            }
            
            //added by Srinivasulu on 04/05/2017....
            
            else if ((doorNoTxt.text).length == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please, Enter Door No." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
                
            }
            
            
            
            //upto here on 04/05/2017....
            
            
            
            else if (nameValue.length == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter user name" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            else if ((streettext.text).length == 0) {
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Pleaes enter street" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            else if ((locltytext.text).length == 0){
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter locality" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if ((citytext.text).length == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Plese enter city" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else  if (phoneValue.length == 0 && mailValue.length != 0 && nameValue.length != 0){
                
                [self setSiblings:paymentView enabled:FALSE];
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            else if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                
                [self setSiblings:paymentView enabled:TRUE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            
            
            else  if ((emailtext.text).length!=0) {
                
                if([self validateEmail:emailtext.text] == FALSE){
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
                else {
                    [self addCustomerDetails];
                }
            }
        }
        
        
    }
    else {
        if (phoneValue.length == 0 && mailValue.length == 0 && nameValue.length == 0) {
            if (mainsegmentIndex ==2) {
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    [self populateCardDetailsView];
                }
                else {
                    [self continuePay1];
                }
                
            }
            else {
                [self continuePay1];
                
            }
        }
        else  if (phoneValue.length == 0 && mailValue.length != 0 && nameValue.length != 0){
            
            [self setSiblings:paymentView enabled:FALSE];
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else if(phoneValue.length <= 9 || phoneValue.length >= 12) {
            
            [self setSiblings:paymentView enabled:TRUE];
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        //    else if ([phoneValue length] != 0 && [mailValue length] == 0 && [nameValue length] != 0){
        //        [self setSiblings:paymentView enabled:FALSE];
        //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        //
        //    }
        
        else  if ((emailtext.text).length!=0) {
            
            if([self validateEmail:emailtext.text] == FALSE){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else {
                [self addCustomerDetails];
            }
        }
        else {
            
            [self addCustomerDetails];
        }
        
    }
    
    
}

// continuePay handler....

- (void) continuePay1{
    
    
    if ([(self.view).subviews containsObject:denomination]){
        for (UIView *subview in denomination.subviews) {
            [subview removeFromSuperview];
        }
        [denomination setHidden:YES];
    }
    if ([(self.view).subviews containsObject:cardDetailsView]){
        for (UIView *subview in cardDetailsView.subviews) {
            [subview removeFromSuperview];
        }
        [cardDetailsView setHidden:YES];
    }
    if (paymentView.subviews){
        for (UIView *subview in paymentView.subviews) {
            [subview removeFromSuperview];
        }
        
        paymentView.hidden = YES;
    }
    if ([(self.view).subviews containsObject:couponView]){
        for (UIView *subview in couponView.subviews) {
            [subview removeFromSuperview];
        }
    }
    
    
    //commented by Srinivasulu on 27/11/2017....
    //reason --  This verification and changing the online && offline mode.... will effect the complete flow....
    
    //    CheckWifi *wifi = [[CheckWifi alloc]init];
    //    BOOL status = [wifi checkWifi];
    //    if (status) {
    //
    //        isOfflineService = FALSE;
    //        if ([billDueValue.text floatValue]>0) {
    //
    //
    //
    //            //cahnged Srinivauslu on 01/05/2017...
    //
    //
    //            //        self.titleLabel.text = @"PENDING BILLING-ONLINE";
    //
    //            self.titleLabel.text = @"PENDING BILLING";
    //
    //            //upto here on 01/05/2017....
    //
    //        }
    //        else {
    //            //cahnged Srinivauslu on 01/05/2017...
    //
    //
    //            //        self.titleLabel.text = @"PENDING BILLING-ONLINE";
    //
    //            self.titleLabel.text = @"PENDING BILLING";
    //
    //            //upto here on 01/05/2017....
    //        }
    //
    //    }
    //    else {
    //        isOfflineService = TRUE;
    //        if ([billDueValue.text floatValue]>0) {
    //
    //            //cahnged Srinivauslu on 01/05/2017...
    //
    //
    //            //        self.titleLabel.text = @"PENDING BILLING-OFFLINE";
    //
    //            self.titleLabel.text = @"PENDING BILLING";
    //
    //            //upto here on 01/05/2017....
    //        }
    //        else {
    //
    //            //cahnged Srinivauslu on 01/05/2017...
    //
    //            //        self.titleLabel.text = @"PENDING BILLING-OFFLINE";
    //
    //            self.titleLabel.text = @"PENDING BILLING";
    //
    //            //upto here on 01/05/2017....
    //
    //        }
    //
    //    }
    
    //upto here on 27/11/2017....
    
    //set business date....
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    
    if ([[defaults valueForKey:BUSSINESS_DATE] isKindOfClass:[NSNull class]] || [defaults valueForKey:BUSSINESS_DATE] == nil) {
        NSString *currentDate = [WebServiceUtility getCurrentDate];
        [defaults setValue:[currentDate componentsSeparatedByString:@" "][0] forKey:BUSSINESS_DATE];
    }
    else  {
        
        NSString *business_date = [defaults valueForKey:BUSSINESS_DATE];
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        // this is imporant - we set our input date format to match our input string
        // if format doesn't match you'll get nil from your string, so be careful
        dateFormatter.dateFormat = @"dd/MM/yyyy";
        NSDate *dateFromString = [[NSDate alloc] init];
        dateFromString = [dateFormatter dateFromString:business_date];
        
        NSDate *today = [NSDate date];
        NSString* currentdate = [dateFormatter stringFromDate:today];
        NSDate *now = [[NSDate alloc] init];
        now = [dateFormatter dateFromString:currentdate];
        
        
        //commented by Srinivasulu on 21/10/2017....
        //reason -- according to new specification business date should change at the time of z - report only....
        
        //        if ([now compare:dateFromString]==NSOrderedDescending) {
        //
        //            [defaults setValue:[[[WebServiceUtility getCurrentDate] componentsSeparatedByString:@" "] objectAtIndex:0] forKey:BUSSINESS_DATE];
        //        }
        
        
        //upto here on 21/10/2017....
        
    }
    
    //changed by Srinivasulu on 27/11/2017.... change condition....
    //    if ([payTxt1.text floatValue] <= [billDueValue.text floatValue]) {
    if (((payTxt1.text).floatValue <= (billDueValue.text).floatValue) || (payTxt2.text).floatValue <= (billDueValue.text).floatValue) {
        
        @try {
            NSString *paid_Amount = NULL;
            
            // get the parameters ..
            
            // getting present date & time ..
            NSDate *today = [NSDate date];
            NSDateFormatter *f = [[NSDateFormatter alloc] init];
            f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
            NSString* currentdate = [f stringFromDate:today];
            
            NSString *paymentType_;
            NSString *MOP;
            
            if ([type_Of_Payment isEqualToString:@"Credit/Debit"]) {
                if ([cardPaymentSelection isEqualToString:@"POS"]) {
                    
                    paymentType_ = @"-";
                    
                }
                else {
                    paymentType_ = @"Card";
                    
                }
                MOP = @"Card";
                paid_Amount = payTxt2.text;
            }
            else if ([type_Of_Payment isEqualToString:@"Food Coupons"]) {
                paymentType_ = @"";
                MOP = @"Food Coupons";
                paid_Amount = payTxt2.text;
                
            }
            else{
                paymentType_ = @"";
                MOP = @"Cash";
                paid_Amount = payTxt2.text;
            }
            // NSString *billDue;
            if(swipe_Status.length >= 1) {
                payTxt2.text = [swipe_Status copy];
            }
            
            int i = arc4random() % 1000;
            
            NSString *trasactionId = [NSString stringWithFormat:@"%@%d%d",@"C",arc4random(),i];
            
            trasactionId = [trasactionId stringByReplacingOccurrencesOfString:@"-" withString:@""];
            
            if (trasactionId.length != 15) {
                trasactionId = [trasactionId stringByAppendingString:@"0"];
            }
            
            
            
            //added and changed by Srinivasulu on 25/04/2017.....
            if([billStatusStr isEqualToString:@"DD-CB-Open"] ||  [billStatusStr isEqualToString:@"DD-CB-Completed"]){
                if (finalBillDue1.floatValue > 0 ){
                    
                    pastBillStatus1 = @"DD-CB-Open";
                    
                }
                else{
                    
                    pastBillStatus1 = @"DD-CB-Completed";
                    
                }
                
            }
            else if([billStatusStr isEqualToString:@"TA-CB-Open"] ||  [billStatusStr isEqualToString:@"TA-CB-Completed"]){
                
                if (finalBillDue1.floatValue > 0 ){
                    
                    pastBillStatus1 = @"TA-CB-Open";
                    
                }
                else{
                    
                    pastBillStatus1 = @"TA-CB-Completed";
                    
                }
                
                
            }
            
            
            //changed by Srinivasulu on 25.04/2017....
            //            if ([paymentTypeVal.text isEqualToString:@"Take Away"]) {
            else   if ([paymentTypeVal.text isEqualToString:@"Take Away"]) {
                
                
                //upto here on 25/04/2017.....
                
                
                if (finalBillDue1.floatValue > 0) {
                    
                    pastBillStatus1 = @"TA-Pending";
                }
                else {
                    
                    pastBillStatus1 = @"TA-Completed";
                }
                
            }
            else {
                if (finalBillDue1.floatValue > 0) {
                    
                    pastBillStatus1 = @"HD-PP-Pending";
                }
                else {
                    pastBillStatus1 = @"HD-PP-ToBeDelivered";
                }
                
                
            }
            //ProgressBar higthlighted...
            // Show the HUD
            HUD.labelText = @"Please Wait...";
            [HUD setHidden:NO];
            [HUD show:YES];
            
            
            if ([type_Of_Payment caseInsensitiveCompare:@"loyaltycard"]!=NSOrderedSame) {
                
                if (paid_Amount.floatValue > (billDueValue.text).floatValue) {
                    NSString *changeReturn = [NSString stringWithFormat:@"%.02f",paid_Amount.floatValue - (billDueValue.text).floatValue];
                    billingChangeReturn = [changeReturn copy];
                    paid_Amount = billDueValue.text;
                }
            }
            
            if ((returnedval.text).floatValue!=0) {
                
                changeReturnStr = [NSString stringWithFormat:@"%.2f",(returnedval.text).floatValue];
                totalReceivedAmt = [NSString stringWithFormat:@"%.2f",(paidVal.text).floatValue];
            }
            else {
                if (((paidVal.text).floatValue-(billDueValue.text).floatValue)>0) {
                    
                    changeReturnStr = [NSString stringWithFormat:@"%.2f",((paidVal.text).floatValue-(billDueValue.text).floatValue)];
                    totalReceivedAmt = [NSString stringWithFormat:@"%.2f",(paidVal.text).floatValue];
                    
                }
                else {
                    changeReturnStr = @"0.00";
                    totalReceivedAmt = [NSString stringWithFormat:@"%.2f",(payTxt2.text).floatValue];
                    if([billStatusLabel.text isEqualToString:@"Change Return"]) {
                        changeReturnStr = billStatusLabelValue.text;
                        payTxt2.text = [NSString stringWithFormat:@"%.2f",(payTxt2.text).floatValue - (billStatusLabelValue.text).floatValue];
                    }
                }
                
                
            }
            if ([MOP isEqualToString:@"Card"]){
                changeReturnStr = @"0.00";
                //                totalReceivedAmt = @"0.00";
                
            }
            
            
            if (![type_Of_Payment isEqualToString:@"Food Coupons"] && ![type_Of_Payment isEqualToString:@"Credit Note"]) {
                //                if ([paymentTransactionArray count]!=0) {
                //
                //                    [paymentTransactionArray removeAllObjects];
                //                }
                if (!billingErrorStatus && ([payTxt2.text floatValue] > 0)) {
                    
                    NSMutableDictionary *transDic = [NSMutableDictionary new];
                    [transDic setValue:MOP forKey:@"modeOfPayment"];
                    [transDic setValue:@"" forKey:@"couponNumber"];
                    [transDic setValue:payTxt2.text forKey:@"paidAmount"];
                    [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                    [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                    [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                    
                    [transDic setValue:currentdate forKey:@"dateTime"];
                    [transDic setValue:changeReturnStr forKey:CHANGE_RETURN];
                    [transDic setValue:totalReceivedAmt forKey:RECEIVED_AMOUNT];
                    
                    
                    //added by srinivasulu on 24/11/2017....
                    
                    if(billPaymentTendeInfoDic != nil && billPaymentTendeInfoDic.allKeys.count){
                        
                        //TENDER_NAME -- COUNTRY_CODE --  TENDER_CODE --  TENDER_KEY
                        
                        if ([MOP isEqualToString:@"Card"]){
                            
                            paymentType_ = [self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""];
                        }
                        
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""] forKey:TENDER_NAME];
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:COUNTRY_CODE] defaultReturn:@""] forKey:COUNTRY_CODE];
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_CODE] defaultReturn:@""] forKey:TENDER_MODE];
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_KEY] defaultReturn:@""] forKey:TENDER_KEY];
                    }
                    
                    
                    [transDic setValue:paymentType_ forKey:@"cardType"];
                    
                    
                    //upto here on 24/11/2017....
                    
                    [paymentTransactionArray addObject:transDic];
                    
                }
                
            }
            
            //added by Srinivasulu on 01/05/2018....
            
            if(tempPaymentDetails.count){
                
                for(int i = 0; i < paymentTransactionArray.count; i++){
                    
                    NSMutableDictionary * tempDic = paymentTransactionArray[i];
                    tempDic[EXISTING_TRANSACTIONS] = [NSNumber numberWithInteger:tempPaymentDetails.count];
                    paymentTransactionArray[i] = tempDic;
                }
            }
            
            //upto here on 01/05/2018....
            
            NSMutableArray *itemDic = [self getItemsReqArr];
            NSArray *taxDetails = [WebServiceUtility getBillingItemsTaxDetails:itemDic taxArr:taxArr currentDate:currentdate offerPriceArray:nil dealPriceArray:nil];
            NSMutableArray *billingItemTaxDetails = [WebServiceUtility getBillingItemTaxes:itemDic taxArr:taxArr];
            
            
            //added by Srinivasulu on  14/06/2017....
            
            for(int i = 0; i < itemDic.count; i++){
                
                NSMutableDictionary * localItemDic = itemDic[i];
                
                
                float itemTaxValue = 0.00;
                float itemTaxRateValue = 0.00;
                
                int defaultItemNo = i;
                
                for( NSDictionary * itemLevelTaxDic in billingItemTaxDetails ){
                    
                    
                    //added by Srinivasulu on 17/03/2018....
                    
                    if (([itemLevelTaxDic.allKeys containsObject:ITEM_NUMBER_IN_LIST] && ![itemLevelTaxDic[ITEM_NUMBER_IN_LIST] isKindOfClass:[NSNull class]])) {
                        
                        defaultItemNo = [itemLevelTaxDic[ITEM_NUMBER_IN_LIST] intValue] ;
                    }
                    
                    
                    if(([[localItemDic valueForKey:SKU_ID] isEqualToString:[itemLevelTaxDic valueForKey:SKU_ID]]) && ([[localItemDic valueForKey:PLU_CODE] isEqualToString:[itemLevelTaxDic valueForKey:@"plu_code"]]) &&  (i == defaultItemNo)){
                        
                        //                        if(([[localItemDic valueForKey:SKU_ID] isEqualToString:[itemLevelTaxDic valueForKey:SKU_ID]]) && ([[localItemDic valueForKey:PLU_CODE] isEqualToString:[itemLevelTaxDic valueForKey:@"plu_code"]])){
                        
                        //upto here on 17/03/2018....
                        
                        itemTaxValue += [[itemLevelTaxDic valueForKey:@"tax_value"] floatValue];
                        itemTaxRateValue += [[self checkGivenValueIsNullOrNil:[itemLevelTaxDic valueForKey:@"tax_rate"] defaultReturn:@"0.00"] floatValue];
                    }
                    
                }
                
                
                [localItemDic setValue:[NSString stringWithFormat:@"%.2f",itemTaxValue] forKey:TAX_COST];
                [localItemDic setValue:[NSString stringWithFormat:@"%.2f",itemTaxRateValue] forKey:TAX_RATE];
                
                itemDic[i] = localItemDic;
                
            }
            
            //upto here  on 14/06/2017....
            
            
            
            NSString * businessDate = [NSString stringWithFormat:@"%@%@%@",[defaults valueForKey:BUSSINESS_DATE],@" ",[currentdate componentsSeparatedByString:@" "][1]];
            
            NSString *scanStartTime;
            NSString *scanEndTime;
            NSString *printTime;
            
            int presentItemQty = 0;
            for (NSDictionary *itemDic in tempArrayItems) {
                presentItemQty = presentItemQty + [[itemDic valueForKey:QUANTITY] floatValue];
            }
            
            if (presentItemQty == previousBillItemsCount) {
                scanStartTime = currentdate;
                scanEndTime = currentdate;
                printTime = currentdate;
            }
            else {
                scanStartTime = [WebServiceUtility getCurrentDate];
                scanEndTime = [WebServiceUtility getCurrentDate];
                printTime = [WebServiceUtility getCurrentDate];
            }
            
            float totalDiscount = 0;
            
            
            
            for (int i=0; i<cartTotalItems.count; i++) {
                
                NSDictionary *temp = cartTotalItems[i];
                
                if ([temp.allKeys containsObject:ITEM_DISCOUNT] && ![[temp valueForKey:ITEM_DISCOUNT] isKindOfClass:[NSNull class]]) {
                    
                    totalDiscount += [[temp valueForKey:ITEM_DISCOUNT] floatValue];
                }
            }
            
            
            //commented and changed by Srinivasulu on 13/10/2017....
            //reason otherDisount is added for itemlevel itself....
            
            //            totalDiscount += [discountValue.text floatValue] + [otherDiscVal.text floatValue];
            totalDiscount += (discountValue.text).floatValue;
            
            //upto here on 13/10/2017....
            
            //added by Srinivasulu on 18/09/2017 && 24/03/2018....
            //        customerGstinStr = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:CUSTOMER_GSTIN] defaultReturn:@""];
            
            if(customerGstinStr == nil)
                customerGstinStr = @"";
            
            
            NSString * remarksAsCommentStr = @"";
            
            
            if(billRemarksTxt != nil)
                remarksAsCommentStr = billRemarksTxt.text;
            
            if(salesOrderIdStr == nil)
                salesOrderIdStr = @"";
            
            //upto here on 18/09/2017 && 24/03/2018....
            
            if (!isOfflineService) {
                
                //changed by Srinivasulu on 03/08/2017....
                //resently added new key....
                
                //BILL_AMOUNT --------------    totalBillAmountStr
                
                //                NSArray *keys = [NSArray arrayWithObjects:@"billId",REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"billingTransactions",@"denominations",@"bill_date",CUSTOMER_NAME,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,kItemCampigns,@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",OTHER_DISCOUNT,@"otherDiscount",kCustomerBillId,nil];
                //
                //                //changed by Srinivasulu on 14/06/20717....
                //                //reason changed the discount amount population value........
                //
                //
                //
                //                //                NSArray *objects  = [NSArray arrayWithObjects:originalBillId,[RequestHeader getRequestHeader], cashierId,counterName,discountValue.text,giftTypeString,giftNumber,taxlblValue.text,totalBillValue.text,finalBillDue1, emailtext.text,phnotext.text,pastBillStatus1,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemDic,paymentTransactionArray,[self prepareDenominationString:nil],currentdate,customerNameValue.text,[NSString stringWithFormat:@"%@",businessDate],scanStartTime,scanEndTime,printTime,taxDetails,billingItemTaxDetails,itemCampaigns,salesPersonIdStr,@"Direct",firstName,[NSNumber numberWithFloat:[subTotalBillValue.text floatValue]],otherDiscVal.text,otherDiscVal.text,[NSNumber numberWithBool:isCustomerBillId],nil];
                //
                //                NSArray *objects  = [NSArray arrayWithObjects:originalBillId,[RequestHeader getRequestHeader], cashierId,counterName,[NSNumber numberWithFloat:totalDiscount],giftTypeString,giftNumber,taxlblValue.text,totalBillValue.text,finalBillDue1, emailtext.text,phnotext.text,pastBillStatus1,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemDic,paymentTransactionArray,[self prepareDenominationString:nil],currentdate,customerNameValue.text,[NSString stringWithFormat:@"%@",businessDate],scanStartTime,scanEndTime,printTime,taxDetails,billingItemTaxDetails,itemCampaigns,salesPersonIdStr,@"Direct",firstName,[NSNumber numberWithFloat:[subTotalBillValue.text floatValue]],otherDiscVal.text,otherDiscVal.text,[NSNumber numberWithBool:isCustomerBillId],nil];
                
                //upot here on 14/06/2017....
                
                
                NSArray *keys = @[@"billId",REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"billingTransactions",@"denominations",@"bill_date",CUSTOMER_NAME,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,kItemCampigns,@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",OTHER_DISCOUNT,@"otherDiscount",kCustomerBillId,BILL_AMOUNT,kComments,SALES_ORDER_ID,SHIPPING_CHARGES];
                
                
                NSArray *objects  = @[originalBillId,[RequestHeader getRequestHeader], cashierId,counterName,@(totalDiscount),giftTypeString,giftNumber,taxlblValue.text,totalBillValue.text,finalBillDue1, emailtext.text,phnotext.text,pastBillStatus1,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemDic,paymentTransactionArray,[self prepareDenominationString:nil],currentdate,customerNameValue.text,[NSString stringWithFormat:@"%@",businessDate],scanStartTime,scanEndTime,printTime,taxDetails,billingItemTaxDetails,itemCampaigns,salesPersonIdStr,@"Direct",firstName,@((subTotalBillValue.text).floatValue),otherDiscVal.text,otherDiscVal.text,@(isCustomerBillId),totalBillAmountStr,remarksAsCommentStr,salesOrderIdStr,[NSString stringWithFormat:@"%.2f",orderShipmentCharges]];
                
                //upot here on 03/08/2017....
                
                NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                
                NSError * err;
                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
                //                NSString * updateBillingJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                
                
                @try {
                    
                    WebServiceController *webserviceController = [WebServiceController new];
                    webserviceController.updateBillingDelegate = self;
                    [webserviceController updateBillWithData:jsonData];
                    
                }
                @catch (NSException *exception) {
                    
                    NSLog(@"%@",exception);
                    
                }
                @finally {
                    
                    
                }
                
            }
            else {
                
                NSArray *keys = @[@"billId",CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"billingTransactions",@"denominations",@"bill_date",CUSTOMER_NAME,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,kItemCampigns,@"billingChannel",@"cashierName",@"employeeSaleId",@"subTotal",OTHER_DISCOUNT,kCustomerBillId,kComments,SALES_ORDER_ID,SHIPPING_CHARGES];
                
                NSArray *objects  = @[originalBillId, cashierId,counterName,discountValue.text,giftTypeString,giftNumber,taxlblValue.text,totalBillValue.text,finalBillDue1, emailtext.text,phnotext.text,pastBillStatus1,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemDic,paymentTransactionArray,[self prepareDenominationString:nil],currentdate,nametext.text,[NSString stringWithFormat:@"%@",businessDate],scanStartTime,scanEndTime,printTime,taxDetails,billingItemTaxDetails,itemCampaigns,@"Direct",firstName,salesPersonIdStr,@((subTotalBillValue.text).floatValue),otherDiscVal.text,@(isCustomerBillId),remarksAsCommentStr,salesOrderIdStr,[NSString stringWithFormat:@"%.2f",orderShipmentCharges]];
                
                
                
                NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                
                
                offline = [[OfflineBillingServices alloc]init];
                NSString *result = [offline updateBilling:originalBillId bill_details:dictionary due:finalBillDue1];
                
                [HUD setHidden:YES];
                
                if ([result isEqualToString:originalBillId]) {
                    
                    // NSLog(@"%d",[group getSelected]);
                    
                    // if ([group getSelected] == 2 || [group getSelected] == 0) {
                    paymentView.hidden = YES;
                    billingErrorStatus = FALSE;
                    if (paymentView.subviews){
                        for (UIView *subview in paymentView.subviews) {
                            [subview removeFromSuperview];
                        }
                    }
                    
                    if (paymentTransactionArray.count!=0) {
                        
                        [paymentTransactionArray removeAllObjects];
                    }
                    
                    // Hide the table hearders....
                    if (isBillSaved) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Bill Saved" message:[NSString stringWithFormat:@"%@\t%@",@"Bill Id",result] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                        
                        SystemSoundID    soundFileObject1;
                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                        AudioServicesPlaySystemSound (soundFileObject1);
                        
                        [defaults setValue:@"" forKey:SCAN_START_TIME];
                        [defaults setValue:@"" forKey:SCAN_END_TIME];
                    }
                    else {
                        
                        [giftVoucherArr removeAllObjects];
                        
                        paymentView.backgroundColor = [UIColor blackColor];
                        paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
                        
                        UILabel *label11 = [[UILabel alloc] init];
                        if (finalBillDue1.floatValue>0) {
                            //UILabel *label11 = [[UILabel alloc] init] ;
                            label11.text = @"Payment Pending ";
                            label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                            label11.backgroundColor = [UIColor clearColor];
                            label11.textAlignment = NSTextAlignmentCenter;
                            label11.textColor = [UIColor whiteColor];
                        }
                        else{
                            //UILabel *label11 = [[UILabel alloc] init] ;
                            label11.text = @"Payment Successfull ";
                            label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                            label11.backgroundColor = [UIColor clearColor];
                            label11.textAlignment = NSTextAlignmentCenter;
                            label11.textColor = [UIColor whiteColor];
                        }
                        
                        UILabel *label33 = [[UILabel alloc] init];
                        label33.text = @"Bill ID is ";
                        label33.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                        label33.backgroundColor = [UIColor whiteColor];
                        label33.textAlignment = NSTextAlignmentCenter;
                        label33.textColor = [UIColor blackColor];
                        
                        label22 = [[UILabel alloc] init];
                        label22.text = [NSString stringWithFormat:@"%@",billIDValue.text];
                        label22.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                        label22.textAlignment = NSTextAlignmentCenter;
                        label22.backgroundColor = [UIColor blackColor];
                        label22.alpha = 0.9f;
                        label22.textColor = [UIColor whiteColor];
                        
                        // button to make new fresh bill ..
                        UIButton *newbill = [UIButton buttonWithType:UIButtonTypeCustom];
                        [newbill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
                        [newbill setTitle:@"OK"    forState:UIControlStateNormal];
                        newbill.titleLabel.textAlignment = NSTextAlignmentCenter;
                        newbill.titleLabel.textColor = [UIColor whiteColor];
                        newbill.backgroundColor = [UIColor grayColor];
                        paymentView.hidden = NO;
                        
                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                            // img1.frame = CGRectMake(0, 0, 468, 400);
                            label11.font = [UIFont systemFontOfSize:25];
                            label11.frame = CGRectMake(0, 20, 468, 80);
                            label33.font = [UIFont systemFontOfSize:25];
                            label33.frame = CGRectMake(0, 110, 468, 80);
                            label22.font = [UIFont systemFontOfSize:25];
                            label22.frame = CGRectMake(0, 190, 468, 80);
                            newbill.layer.cornerRadius = 25.0f;
                            newbill.titleLabel.font = [UIFont systemFontOfSize:25];
                            newbill.frame = CGRectMake(50.0, 320.0, 370.0, 50.0);
                            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                                
                                paymentView.frame = CGRectMake(250, 150, 468, 400);
                                
                            }
                            else {
                                paymentView.frame = CGRectMake(150, 250, 468, 400);
                                
                            }
                        }
                        else {
                            // img1.frame = CGRectMake(0, 0, 200, 200);
                            if (version >= 8.0) {
                                label11.frame = CGRectMake(0, 10, 200, 40);
                                label33.frame = CGRectMake(0, 40, 200, 40);
                                label22.frame = CGRectMake(0, 80, 200, 40);
                                newbill.frame = CGRectMake(10.0, 140.0, 180.0, 30.0);
                                newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                                newbill.layer.cornerRadius = 15.0f;
                                paymentView.frame = CGRectMake(60, 150, 200, 200);
                            }
                            else{
                                label11.frame = CGRectMake(0, 10, 200, 40);
                                label33.frame = CGRectMake(0, 40, 200, 40);
                                label22.frame = CGRectMake(0, 80, 200, 40);
                                newbill.frame = CGRectMake(10.0, 140.0, 180.0, 30.0);
                                newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                                newbill.layer.cornerRadius = 15.0f;
                                paymentView.frame = CGRectMake(60, 70, 200, 200);
                            }
                            
                        }
                        
                        //[paymentView addSubview:img1];
                        [paymentView addSubview:label11];
                        [paymentView addSubview:label33];
                        [paymentView addSubview:label22];
                        [paymentView addSubview:newbill];
                        
                        [self.view addSubview:paymentView];
                    }
                    [segmentedControl setUserInteractionEnabled:TRUE];
                    [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
                    
                    segmentedControl.tag = 1;
                    [defaults setValue:@"" forKey:SCAN_START_TIME];
                    [defaults setValue:@"" forKey:SCAN_END_TIME];
                    
                }
                else {
                    
                    // NSLog(@"%d",[group getSelected]);
                    
                    // if ([group getSelected] == 2 || [group getSelected] == 0) {
                    paymentView.hidden = YES;
                    
                    if (paymentView.subviews){
                        for (UIView *subview in paymentView.subviews) {
                            [subview removeFromSuperview];
                        }
                    }
                    
                    billingErrorStatus = TRUE;
                    
                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                    
                    [segmentedControl setUserInteractionEnabled:TRUE];
                    [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
                    
                    // this value is to check whether bill is finished or not ..
                    segmentedControl.tag = 1;
                    
                }
            }
        }
        @catch (NSException *exception) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            HUD.hidden = YES;
        }
        
    }
}

#pragma mark - Update Billing Service Reposnse Delegates
- (void)updateBillingSuccessResponse:(NSDictionary *)successDictionary {
    
    // removing hud ..
    [HUD hide:YES afterDelay:0.5];
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    
    if ([[NSString stringWithFormat:@"%@",successDictionary[@"billId"]] isEqualToString:billIDValue.text]) {
        
        // NSLog(@"%d",[group getSelected]);
        
        // if ([group getSelected] == 2 || [group getSelected] == 0) {
        [giftVoucherArr removeAllObjects];
        
        paymentView.hidden = YES;
        
        if (paymentView.subviews){
            for (UIView *subview in paymentView.subviews) {
                [subview removeFromSuperview];
            }
        }
        if (paymentTransactionArray.count!=0) {
            
            [paymentTransactionArray removeAllObjects];
        }
        billingErrorStatus = FALSE;
        
        if (isBillSaved) {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Bill Saved" message:[NSString stringWithFormat:@"%@\t%@",@"Bill Id",successDictionary[@"billId"]] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            
            [defaults setValue:@"" forKey:SCAN_START_TIME];
            [defaults setValue:@"" forKey:SCAN_END_TIME];
            
            
        }
        else if (isPrint) {
            
            
        }
        else {
            
            // Hide the table hearders....
            paymentView.backgroundColor = [UIColor blackColor];
            paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
            
            UILabel *label11 = [[UILabel alloc] init];
            if ((payTxt2.text).floatValue == 0 || ((payTxt1.text).floatValue - (payTxt2.text).floatValue) > 0) {
                //UILabel *label11 = [[UILabel alloc] init];
                label11.text = @"Payment Pending ";
                label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                label11.backgroundColor = [UIColor clearColor];
                label11.textAlignment = NSTextAlignmentCenter;
                label11.textColor = [UIColor whiteColor];
            }
            else{
                //UILabel *label11 = [[UILabel alloc] init];
                label11.text = @"Payment Successfull ";
                label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                label11.backgroundColor = [UIColor clearColor];
                label11.textAlignment = NSTextAlignmentCenter;
                label11.textColor = [UIColor whiteColor];
            }
            
            UILabel *label33 = [[UILabel alloc] init];
            label33.text = @"Bill ID is ";
            label33.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
            label33.backgroundColor = [UIColor clearColor];
            label33.textAlignment = NSTextAlignmentCenter;
            label33.textColor = [UIColor whiteColor];
            
            label22 = [[UILabel alloc] init];
            label22.text = [NSString stringWithFormat:@"%@",successDictionary[@"billId"]];
            label22.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
            label22.textAlignment = NSTextAlignmentCenter;
            label22.backgroundColor = [UIColor whiteColor];
            label22.alpha = 0.9f;
            label22.textColor = [UIColor blackColor];
            
            // button to make new fresh bill ..
            UIButton *newbill = [UIButton buttonWithType:UIButtonTypeCustom];
            [newbill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
            [newbill setTitle:@"OK"    forState:UIControlStateNormal];
            newbill.titleLabel.textAlignment = NSTextAlignmentCenter;
            newbill.titleLabel.textColor = [UIColor whiteColor];
            newbill.backgroundColor = [UIColor grayColor];
            paymentView.hidden = NO;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                // img1.frame = CGRectMake(0, 0, 468, 400);
                label11.font = [UIFont systemFontOfSize:25];
                label11.frame = CGRectMake(0, 20, 468, 80);
                label33.font = [UIFont systemFontOfSize:25];
                label33.frame = CGRectMake(0, 110, 468, 80);
                label22.font = [UIFont systemFontOfSize:25];
                label22.frame = CGRectMake(0, 190, 468, 80);
                newbill.layer.cornerRadius = 25.0f;
                newbill.titleLabel.font = [UIFont systemFontOfSize:25];
                newbill.frame = CGRectMake(50.0, 320.0, 370.0, 50.0);
                paymentView.frame = CGRectMake(250, 150, 468, 400);
            }
            else {
                // img1.frame = CGRectMake(0, 0, 200, 200);
                if (version >= 8.0) {
                    label11.frame = CGRectMake(0, 10, 200, 40);
                    label33.frame = CGRectMake(0, 40, 200, 40);
                    label22.frame = CGRectMake(0, 80, 200, 40);
                    newbill.frame = CGRectMake(10.0, 140.0, 180.0, 30.0);
                    newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                    newbill.layer.cornerRadius = 15.0f;
                    paymentView.frame = CGRectMake(60, 150, 200, 200);
                }
                else{
                    label11.frame = CGRectMake(0, 10, 200, 40);
                    label33.frame = CGRectMake(0, 40, 200, 40);
                    label22.frame = CGRectMake(0, 80, 200, 40);
                    newbill.frame = CGRectMake(10.0, 140.0, 180.0, 30.0);
                    newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                    newbill.layer.cornerRadius = 15.0f;
                    paymentView.frame = CGRectMake(60, 70, 200, 200);
                }
                
            }
            
            //[paymentView addSubview:img1];
            [paymentView addSubview:label11];
            [paymentView addSubview:label33];
            [paymentView addSubview:label22];
            [paymentView addSubview:newbill];
            // [self newBill:(UIButton*)newbill];
            [self.view addSubview:paymentView];
            
            [defaults setValue:@"" forKey:SCAN_START_TIME];
            [defaults setValue:@"" forKey:SCAN_END_TIME];
            
        }
        [segmentedControl setUserInteractionEnabled:TRUE];
        [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
        //[segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
        
        // this value is to check whether bill is finished or not ..
        segmentedControl.tag = 1;
        //}
    }
    else{
        billingErrorStatus = TRUE;
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Update Billing Failed." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    [HUD hide:YES afterDelay:0.5];
    
}
- (void)updateBillingErrorResponse {
    [HUD setHidden:YES];
    billingErrorStatus = TRUE;
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alert show];
    SystemSoundID    soundFileObject1;
    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
    AudioServicesPlaySystemSound (soundFileObject1);
    [segmentedControl setUserInteractionEnabled:TRUE];
    [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
    [cartTable setUserInteractionEnabled:YES];
}

#pragma mark End of Update Billing Service Reposnse Delegates -

#pragma mark - Return Billing Service Reposnse Delegates

- (void)returnBillingSuccessResponse:(NSDictionary *)successDictionary {
    
    @try {
        NSDictionary *response = [successDictionary valueForKey:RESPONSE_HEADER];
        if ([[response valueForKey:RESPONSE_CODE] intValue] == 0) {
            
            
            if(offline == nil)
                offline = [[OfflineBillingServices alloc] init];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                [offline reduceTheBillingItemsStock:selectedItems stockUpdationType:INCREASE];
            });
            
            // -- reduceTheBillingItemsStock:selectedItems
            
            NSMutableString * messageString = [NSMutableString new];
            [messageString appendString:[response valueForKey:@"responseMessage"]];
            [messageString appendString:@"\n"];
            [messageString appendString:@"Bill ID : "];
            [messageString appendString:[successDictionary valueForKey:@"billId"]];
            [messageString appendString:@"\n"];
            
            //changed by Srinivasulu on 20/05/2017....
            
            
            //            if ([returnMode caseInsensitiveCompare:@"cash"] != NSOrderedSame) {
            if (([returnMode caseInsensitiveCompare:@"cash"] != NSOrderedSame)  && ( ( [successDictionary.allKeys containsObject:@"creditNoteNo"])  &&  (![[successDictionary valueForKey:@"creditNoteNo"] isKindOfClass: [NSNull class]]))) {
                
                [messageString appendString:@"Credit Note No. : "];
                [messageString appendString:[successDictionary valueForKey:@"creditNoteNo"]];
                
                creditNoteNumberStr  = [NSString stringWithFormat:@"%@%@",@"Credit Note No. : ",[successDictionary valueForKey:@"creditNoteNo"]];
            }
            
            
            //upto here Srinivasulu  on 20/05/2017....
            
            
            
            returnSuccessAlert = [[UIAlertView alloc] initWithTitle:@"Success" message:messageString delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [returnSuccessAlert show];
            
        }
        [HUD setHidden:YES];
        
    } @catch (NSException *exception) {
        
        //added by Srinivasulu on 20/05/2017....
        [HUD setHidden:YES];
        
        NSMutableString *messageString = [NSMutableString new];
        [messageString appendString:[[successDictionary valueForKey:RESPONSE_HEADER] valueForKey:@"responseMessage"]];
        [messageString appendString:@"\n"];
        [messageString appendString:@"Bill ID : "];
        [messageString appendString:[successDictionary valueForKey:@"billId"]];
        [messageString appendString:@"\n"];
        
        
        returnSuccessAlert = [[UIAlertView alloc] initWithTitle:@"Success" message:messageString delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [returnSuccessAlert show];
        
        
        
        //upto here on 20/05/2017....
        
        
        
        
        
        
    } @finally {
        
    }
    
}
- (void)returnBillingErrorResponse {
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Success" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alert show];
    [HUD setHidden:YES];
    
}
#pragma mark End of Return Billing Service Reposnse Delegates -


-(NSArray *)prepareDenominationString:(NSString *)total{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    
    NSMutableArray *tempArr = [[NSMutableArray alloc]init];
    NSArray *keys = @[@"denomination",@"paidDenominationNo",@"transactionId",@"billId",@"billDate",@"paidAmount",@"returnAmount",@"returnDenominationNo"];
    @try {
        
        for (int i=0; i<denominationDic.allKeys.count; i++) {
            
            
            NSArray *objects = @[denominationDic.allKeys[i],[denominationDic valueForKey:denominationDic.allKeys[i]],@"",@"",currentdate,[NSString stringWithFormat:@"%.2f",[denominationDic.allKeys[i] floatValue]*[[denominationDic valueForKey:denominationDic.allKeys[i]] intValue]],@"0.00",@"0"];
            NSDictionary *dic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            [tempArr addObject:dic];
            
        }
        for (int i=0; i<returnDenominationDic.allKeys.count; i++) {
            
            NSArray *objects = @[returnDenominationDic.allKeys[i],@"0",@"",@"",currentdate,@"0.00",[NSString stringWithFormat:@"%.2f",[returnDenominationDic.allKeys[i] floatValue]*[[returnDenominationDic valueForKey:returnDenominationDic.allKeys[i]] intValue]], [returnDenominationDic valueForKey:returnDenominationDic.allKeys[i]]];
            NSDictionary *dic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            [tempArr addObject:dic];
            
        }
        
        for (int i=0; i<denominationCoinDic.allKeys.count; i++) {
            
            
            NSArray *objects = @[denominationCoinDic.allKeys[i],[denominationCoinDic valueForKey:denominationCoinDic.allKeys[i]],@"",@"",currentdate,[NSString stringWithFormat:@"%.2f",[denominationCoinDic.allKeys[i] floatValue]*[[denominationCoinDic valueForKey:denominationCoinDic.allKeys[i]] intValue]],@"0.00",@"0"];
            NSDictionary *dic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            [tempArr addObject:dic];
            
        }
        for (int i=0; i<returnDenominationCoinDic.allKeys.count; i++) {
            
            NSArray *objects = @[returnDenominationCoinDic.allKeys[i],@"0",@"",@"",currentdate,@"0.00",[NSString stringWithFormat:@"%.2f",[returnDenominationCoinDic.allKeys[i] floatValue]*[[returnDenominationCoinDic valueForKey:returnDenominationCoinDic.allKeys[i]] intValue]], [returnDenominationCoinDic valueForKey:returnDenominationCoinDic.allKeys[i]]];
            NSDictionary *dic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            [tempArr addObject:dic];
            
        }
        
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    
    
    
    return tempArr;
    
}


-(NSMutableArray *)getItemsReqArr {
    NSMutableArray *itemArr = [[NSMutableArray alloc]init];
    @try {
        
        for (int i=0; i<cartTotalItems.count; i++) {
            
            NSDictionary *temp = cartTotalItems[i];
            
            float itemDisc = 0;
            if ([temp.allKeys containsObject:ITEM_DISCOUNT] && ![[temp valueForKey:ITEM_DISCOUNT] isKindOfClass:[NSNull class]]) {
                itemDisc = [[temp valueForKey:ITEM_DISCOUNT] floatValue];
            }
            
            NSArray *keys = @[@"sku_id",@"item_name",@"quantity",@"item_total_price",@"itemUnitPrice",@"taxCode",@"taxRate",@"status",PLU_CODE,EDITED_PRICE,MRP_Price,ITEM_DISCOUNT,ITEM_DISCOUNT_DESC,ITEM_OFFER_PRICE,ITEM_DEAL_PRICE,DISCOUNT_PRICE_3,@"itemScanCode",kIsManuFacturedItem,kPackagedType,kProductCategory,kProductSubCategory,kMeasureRange,kProductRange,kProductModel,kBrand];
            NSArray *objects;
            if ([isVoidedArray[i] boolValue]) {
                objects = @[[temp valueForKey:SKU_ID],[temp valueForKey:ITEM_NAME],[temp valueForKey:QUANTITY],[temp valueForKey:ITEM_TOTAL_PRICE],[temp valueForKey:ITEMUNITPRICE],[temp valueForKey:TAX_CODE],[temp valueForKey:TAX_RATE],@"void",[temp valueForKey:PLU_CODE], [temp valueForKey:EDITED_PRICE],[temp valueForKey:MRP_Price],@(itemDisc),@"",@([[temp valueForKey:ITEM_OFFER_PRICE] floatValue]),@([[temp valueForKey:ITEM_DEAL_PRICE] floatValue]),[temp valueForKey:DISCOUNT_PRICE_3],[temp valueForKey:@"itemScanCode"],@([[temp valueForKey:kIsManuFacturedItem] boolValue]),@([[temp valueForKey:kPackagedType] boolValue]),[temp valueForKey:kProductCategory],[temp valueForKey:kProductSubCategory],[temp valueForKey:kMeasureRange],[temp valueForKey:kProductRange],[temp valueForKey:kProductModel],[temp valueForKey:kBrand]];
                
            }
            else {
                objects = @[[temp valueForKey:SKU_ID],[temp valueForKey:ITEM_NAME],[temp valueForKey:QUANTITY],[temp valueForKey:ITEM_TOTAL_PRICE],[temp valueForKey:ITEMUNITPRICE],[temp valueForKey:TAX_CODE],[temp valueForKey:TAX_RATE],@" ",[temp valueForKey:PLU_CODE], [temp valueForKey:EDITED_PRICE],[temp valueForKey:MRP_Price],@(itemDisc),@"",@([[temp valueForKey:ITEM_OFFER_PRICE] floatValue]),@([[temp valueForKey:ITEM_DEAL_PRICE] floatValue]),[temp valueForKey:DISCOUNT_PRICE_3],[temp valueForKey:@"itemScanCode"],@([[temp valueForKey:kIsManuFacturedItem] boolValue]),@([[temp valueForKey:kPackagedType] boolValue]),[temp valueForKey:kProductCategory],[temp valueForKey:kProductSubCategory],[temp valueForKey:kMeasureRange],[temp valueForKey:kProductRange],[temp valueForKey:kProductModel],[temp valueForKey:kBrand]];
            }
            NSDictionary *dic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            
            
            //added by Srinivasulu on 12/05/2017....
            
            NSMutableDictionary * mutDic = [dic mutableCopy];
            
            if (([temp.allKeys containsObject:kItemDept] && ![temp[kItemDept] isKindOfClass:[NSNull class]])) {
                
                mutDic[kItemDept] = temp[kItemDept];
            }
            
            if (([temp.allKeys containsObject:kItemSubDept] && ![temp[kItemSubDept] isKindOfClass:[NSNull class]])) {
                
                mutDic[kItemSubDept] = temp[kItemSubDept];
            }
            
            
            if (([temp.allKeys containsObject:SECTION] && ![temp[SECTION] isKindOfClass:[NSNull class]])) {
                
                mutDic[SECTION] = temp[SECTION];
            }
            
            if (([temp.allKeys containsObject:HSN_CODE] && ![temp[HSN_CODE] isKindOfClass:[NSNull class]])) {
                
                mutDic[HSN_CODE] = temp[HSN_CODE];
            }
            
            if (([temp.allKeys containsObject:Pack_Size] && ![temp[Pack_Size] isKindOfClass:[NSNull class]])) {
                
                mutDic[Pack_Size] = temp[Pack_Size];
            }
            
            if (([temp.allKeys containsObject:EXPIRY_DATE] && ![temp[EXPIRY_DATE] isKindOfClass:[NSNull class]])) {
                
                mutDic[EXPIRY_DATE] = temp[EXPIRY_DATE];
            }
            //added by Srinivasulu on 21/08/2017....
            
            if (([temp.allKeys containsObject:EDIT_PRICE_REASON] && ![temp[EDIT_PRICE_REASON] isKindOfClass:[NSNull class]])) {
                
                mutDic[EDIT_PRICE_REASON] = temp[EDIT_PRICE_REASON];
            }
            
            //upot here on 21/08/2017....
            
            
            
            //added by Srinivasulu on 12/07/2017....
            
            if (([temp.allKeys containsObject:TAX_INCLUSIVE] && ![temp[TAX_INCLUSIVE] isKindOfClass:[NSNull class]])) {
                
                mutDic[TAX_INCLUSIVE] = temp[TAX_INCLUSIVE];
                
            }
            else
                mutDic[TAX_INCLUSIVE] = @YES;
            
            
            //upot here on 12/07/2017....
            
            //newly added keys....
            //added by Srinivasulu on 05/07/2017....
            
            if (([temp.allKeys containsObject:COLOR] && ![temp[COLOR] isKindOfClass:[NSNull class]])) {
                
                mutDic[COLOR] = temp[COLOR];
            }
            
            if (([temp.allKeys containsObject:SIZE] && ![temp[SIZE] isKindOfClass:[NSNull class]])) {
                
                mutDic[SIZE] = temp[SIZE];
            }
            
            if (([temp.allKeys containsObject:PRODUCT_RANGE] && ![temp[PRODUCT_RANGE] isKindOfClass:[NSNull class]])) {
                
                mutDic[PRODUCT_RANGE] = temp[PRODUCT_RANGE];
            }
            
            if (([temp.allKeys containsObject:kMeasureRange] && ![temp[kMeasureRange] isKindOfClass:[NSNull class]])) {//MEASUREMENT_RANGE
                
                mutDic[kMeasureRange] = temp[kMeasureRange];
            }
            
            if (([temp.allKeys containsObject:ITEM_CATEGORY] && ![temp[ITEM_CATEGORY] isKindOfClass:[NSNull class]])) {
                
                mutDic[ITEM_CATEGORY] = temp[ITEM_CATEGORY];
            }
            
            if (([temp.allKeys containsObject:kProductBrand] && ![temp[kProductBrand] isKindOfClass:[NSNull class]])) {//kBrand
                
                mutDic[kProductBrand] = temp[kProductBrand];
            }
            
            if (([temp.allKeys containsObject:MODEL] && ![temp[MODEL] isKindOfClass:[NSNull class]])) {
                
                mutDic[MODEL] = temp[MODEL];
            }
            
            if (([temp.allKeys containsObject:SELL_UOM] && ![temp[SELL_UOM] isKindOfClass:[NSNull class]])) {
                
                mutDic[SELL_UOM] = temp[SELL_UOM];
            }
            
            //upto here on 05/07/2017....
            
            //added by Srinivasulu on 07/07/2017....
            
            if (([temp.allKeys containsObject:STYLE] && ![temp[STYLE] isKindOfClass:[NSNull class]])) {
                
                mutDic[STYLE] = temp[STYLE];
            }
            
            if (([temp.allKeys containsObject:PATTERN] && ![temp[PATTERN] isKindOfClass:[NSNull class]])) {//kBrand
                
                mutDic[PATTERN] = temp[PATTERN];
            }
            
            if (([temp.allKeys containsObject:BATCH] && ![temp[BATCH] isKindOfClass:[NSNull class]])) {
                
                mutDic[BATCH] = temp[BATCH];
            }
            
            if (([temp.allKeys containsObject:UTILITY] && ![temp[UTILITY] isKindOfClass:[NSNull class]])) {
                
                mutDic[UTILITY] = temp[UTILITY];
            }
            
            //added by Srinivasulu on 12/08/2017....
            
            if (([temp.allKeys containsObject:PRODUCT_CLASS] && ![temp[PRODUCT_CLASS] isKindOfClass:[NSNull class]])) {
                
                mutDic[PRODUCT_CLASS] = temp[PRODUCT_CLASS];
            }
            
            if (([temp.allKeys containsObject:PRODUCT_SUB_CLASS] && ![temp[PRODUCT_SUB_CLASS] isKindOfClass:[NSNull class]])) {
                
                mutDic[PRODUCT_SUB_CLASS] = temp[PRODUCT_SUB_CLASS];
            }
            
            if (([temp.allKeys containsObject:STYLE_RANGE] && ![temp[STYLE_RANGE] isKindOfClass:[NSNull class]])) {
                
                mutDic[STYLE_RANGE] = temp[STYLE_RANGE];
            }
            
            //upot here on 12/08/2017....
            
            
            //added by Srinivasulu on 25/07/2017....
            
            //            float itemDiscPrice = 0.0;
            //
            //            if(([[mutDic allKeys] containsObject:ITEM_OFFER_PRICE]) && (! [[mutDic valueForKey:ITEM_OFFER_PRICE] isKindOfClass:[NSNull class]]) )
            //                itemDiscPrice += [[mutDic valueForKey:ITEM_OFFER_PRICE] floatValue];
            //
            //
            //            if(([[mutDic allKeys] containsObject:ITEM_DEAL_PRICE]) && (! [[mutDic valueForKey:ITEM_DEAL_PRICE] isKindOfClass:[NSNull class]]) )
            //                itemDiscPrice +=   [[mutDic valueForKey:ITEM_DEAL_PRICE] floatValue];
            //
            //
            //            [mutDic setValue:[NSNumber numberWithFloat:itemDiscPrice] forKey:@"discountPrice"];
            
            @try {
                
                if(([temp.allKeys containsObject:@"discountPrice"] && ![temp[@"discountPrice"] isKindOfClass:[NSNull class]])) {
                    
                    mutDic[@"discountPrice"] = temp[@"discountPrice"];
                }
                
                //added by Srinivasulu on 31/07/2017....
                
                if(([temp.allKeys containsObject:@"taxCost"] && ![temp[@"taxCost"] isKindOfClass:[NSNull class]])) {
                    
                    mutDic[@"taxCost"] = temp[@"taxCost"];
                }
                
                //upot here on 31/07/2017.....
                
                //added by Srinivasulu on 27/09/2017....
                
                float totalPrice = [temp[ITEM_TOTAL_PRICE] floatValue];
                
                if(([temp.allKeys containsObject:DISCOUNT_PRICE_3] && ![temp[DISCOUNT_PRICE_3] isKindOfClass:[NSNull class]])){
                    
                    if([temp[DISCOUNT_PRICE_3] length])
                        if(totalPrice >= [temp[DISCOUNT_PRICE_3] floatValue])
                            totalPrice -= [temp[DISCOUNT_PRICE_3] floatValue];
                }
                
                if(([temp.allKeys containsObject:ITEM_DISCOUNT] && ![temp[ITEM_DISCOUNT] isKindOfClass:[NSNull class]])){
                    
                    if([temp[ITEM_DISCOUNT] length])
                        if(totalPrice >= [temp[ITEM_DISCOUNT] floatValue])
                            totalPrice -= [temp[ITEM_DISCOUNT] floatValue];
                }
                
                
                mutDic[ITEM_TOTAL_PRICE] = [NSString stringWithFormat:@"%.2f",totalPrice];
                
                
                if(([temp.allKeys containsObject:SALE_PRICE] && ![temp[SALE_PRICE] isKindOfClass:[NSNull class]])) {
                    
                    mutDic[SALE_PRICE] = temp[SALE_PRICE];
                }
                else{
                    
                    
                    mutDic[SALE_PRICE] = [NSString stringWithFormat:@"%.2f",[mutDic[ITEM_TOTAL_PRICE] floatValue] / [temp[QUANTITY] floatValue]];
                    
                }
                //upot here on 27/09/2017.....
                
                
                //added by Srinivasulu on 17/03/2018....
                
                [mutDic setValue:@(i) forKey:ITEM_NUMBER_IN_LIST];
                
                //upto here on 08/09/2017....
                
                
                
            } @catch (NSException *exception) {
                
            }
            
            
            //upto here on 25/07/2017...
            //upot here on 07/07/2017....
            
            
            //            [itemArr addObject:dic];
            [itemArr addObject:mutDic];
            
            
            //upto here on 12/05/2017....
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
    }
    
    
    return itemArr;
}




// saving the entire bill in a single string ..

- (NSString *) saveBill {
    
    NSString *str = @"";
    
    for (int i = 0; i < cartTotalItems.count; i++) {
        
        NSArray *temp = [cartTotalItems[i] componentsSeparatedByString:@"#"];
        
        str  = [NSString stringWithFormat:@"%@%@%@", str, temp[0],@"#"];
        str  = [NSString stringWithFormat:@"%@%@%@", str, temp[5],@"#"];
        str  = [NSString stringWithFormat:@"%@%d%@", str, [temp[2] intValue]*[temp[3] intValue],@"#"];
        str  = [NSString stringWithFormat:@"%@%@%@", str, temp[3],@"#"];
        //str  = [NSString stringWithFormat:@"%@%@%@", str, billDueValue.text,@"#@"];
        str  = [NSString stringWithFormat:@"%@%@%@", str, temp[1],@"#@"];
    }
    
    NSLog(@"%@",str);
    
    return str;
}


- (void) closeView:(id) sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    //added by Srinivasulu on 20/11/2017....
    
    if(submitButton != nil)
        submitButton.userInteractionEnabled = YES;
    
    //upto here on 20/11/2017....
    
    mainsegmentIndex = 1;
    paidVal = nil;
    if ([sender tag] == 1 || [sender tag] == 11) {
        
        if (paymentView.subviews){
            for (UIView *subview in paymentView.subviews) {
                [subview removeFromSuperview];
            }
        }
        // Enable the backgroud views ..
        [self setSiblings:paymentView enabled:TRUE];
        
        paymentView.hidden = YES;
    }
    else if ([sender tag] == 3 || [sender tag] == 33) {
        
        if (mailView.subviews){
            for (UIView *subview in mailView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        [self setSiblings:mailView enabled:TRUE];
        
        mailView.hidden = YES;
    }
    
    else if([sender tag] == 22){
        
        //Play Audio for button touch....
        AudioServicesPlaySystemSound (soundFileObject);
        
        // disable the backgroud view ..
        [self setSiblings:giftView enabled:TRUE];
        
        if (giftView.subviews){
            for (UIView *subview in giftView.subviews) {
                [subview removeFromSuperview];
            }
        }
        giftNo.text = nil;
        giftID.text = nil;
        
        giftView.hidden = YES;
        
    }
    else if([sender tag] == 20){
        
        if (couponView.subviews){
            for (UIView *subview in couponView.subviews) {
                [subview removeFromSuperview];
            }
        }
        [self setSiblings:couponView enabled:TRUE];
        
        couponView.hidden = YES;
    }
    else if([sender tag] == 78){
        if (returnDenomination.subviews){
            for (UIView *subview in returnDenomination.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        // Enable the backgroud views ..
        [self setSiblings:returnDenomination enabled:TRUE];
        [segmentedControl setUserInteractionEnabled:YES];
        
        returnDenomination.hidden = YES;
        
        if (returnDenominationView.subviews){
            for (UIView *subview in returnDenominationView.subviews) {
                [subview removeFromSuperview];
            }
        }
        returnDenominationView.hidden=YES;
    }
    else if([sender tag] == 88){
        if (cardDetailsView.subviews){
            for (UIView *subview in cardDetailsView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        // Enable the backgroud views ..
        [self setSiblings:cardDetailsView enabled:TRUE];
        [segmentedControl setUserInteractionEnabled:YES];
        
        cardDetailsView.hidden = YES;
    }
    else if ([sender tag] == 75) {
        
        if (denominationView.subviews){
            for (UIView *subview in denominationView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        // Enable the backgroud views ..
        [self setSiblings:denomination enabled:TRUE];
        [segmentedControl setUserInteractionEnabled:YES];
        
        [denominationView removeFromSuperview];
    }
    else {
        
        if (denomination.subviews){
            for (UIView *subview in denomination.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        // Enable the backgroud views ..
        [self setSiblings:denomination enabled:TRUE];
        [segmentedControl setUserInteractionEnabled:YES];
        
        denomination.hidden = YES;
    }
    
}

-(void) openNewBill:(id) sender{
    
    self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
    self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil] ;
    
    ReturnItem *bh = [[ReturnItem alloc] initWithBillType:pastBillField.text returningItems:tempArrayItems totalBill:totalBillValue.text billStatus:pastBillStatus1 deals:discountValue.text subtotal:subTotalBillValue.text] ;
    [self.navigationController pushViewController:bh animated:YES];
    //[UIView  transitionWithView:self.navigationController.view duration:0.8  options:UIViewAnimationOptionTransitionFlipFromLeft
    //                 animations:^(void) {
    //                     BOOL oldState = [UIView areAnimationsEnabled];
    //                     [UIView setAnimationsEnabled:NO];
    //                     [self.navigationController pushViewController:bh animated:YES];
    //                     [UIView setAnimationsEnabled:oldState];
    //                 }
    //                 completion:nil];
}

- (void) newBill:(id) sender {
    
    //removing all views on paymentView ..
    if (paymentView.subviews){
        for (UIView *subview in paymentView.subviews) {
            [subview removeFromSuperview];
        }
    }
    paymentView.hidden = YES;
    segmentedControl.tag = 0;
    [segmentedControl setUserInteractionEnabled:TRUE];
    [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
    [mainSegmentedControl setUserInteractionEnabled:TRUE];
    [mainSegmentedControl setEnabled:TRUE forSegmentAtIndex:0];
    label_1.hidden = YES;
    label_2.hidden = YES;
    label_3.hidden = YES;
    label_4.hidden = YES;
    label_5.hidden = YES;
    itemDiscLbl.hidden = YES;
    billDetails.hidden = YES;
    transactionDetails.hidden = YES;
    openDetails.hidden = YES;
    closeDetails.hidden = YES;
    
    billTypeStatus = TRUE;
    selectedSaleIdTable.hidden = YES;
    billIDValue.text = @"";
    billDateValue.text = @"";
    billDoneValue.text = @"";
    totalBillValue.text = @"";
    billDueValue.text = @"";
    subTotalBillValue.text = @"";
    discountValue.text = @"";
    taxlblValue.text = @"";
    
    @try {
        
        [tempPaymentDetails removeAllObjects];
        [tempArrayItems removeAllObjects];
        [cartTotalItems removeAllObjects];
        [isVoidedArray removeAllObjects];
        
        salesIdTable.userInteractionEnabled = TRUE;
        barCodeImage.userInteractionEnabled = TRUE;
        pastBillField.userInteractionEnabled = TRUE;
        billingScrollView.userInteractionEnabled = TRUE;
        paymentScrollView.userInteractionEnabled = TRUE;
        exchangeScrollView.userInteractionEnabled = TRUE;
        mainBackbutton.enabled = TRUE;
        mainBackbutton.userInteractionEnabled = TRUE;
        
        
        NSString *value = [pastBillField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        
        if ((pastBillField.text).length >= 2 && !value.length == 0) {
            
            
            if (!isOfflineService) {
                
                [HUD setHidden:NO];
                
                NSString *saleId2 = pastBillField.text;
                
                WebServiceController *service = [[WebServiceController alloc] init];
                service.getBillsDelegate = self;
                [service getBillDetails:saleId2];
                
            }
            else {
                
                offline = [[OfflineBillingServices alloc]init];
                NSMutableDictionary *json = [offline openBill:pastBillField.text];
                [self getBillingDetailsHandler:json];
                
            }
            //ProgressBar higthlighted...
            
            
            
        }
        
    }
    @catch (NSException *exception) {
        
        NSLog(@"Exception %@",exception);
    }
    @finally {
        
        
    }
    
    
    
    //[self.view reloadInputViews];
}



- (void)messageSent
{
    //[message release];
    
    //message has been successfully sent . you can notify the user of that and remove the wait overlay
    [self removeWaitOverlay];
    
    
    UILabel *label11 = [[UILabel alloc] init];
    label11.text = @"Mail Sent";
    label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    label11.backgroundColor = [UIColor clearColor];
    label11.textAlignment = NSTextAlignmentCenter;
    label11.textColor = [UIColor blackColor];
    
    mailView.hidden = NO;
    
    //[self setSiblings:mailView enabled:TRUE];
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        label11.font = [UIFont systemFontOfSize:30];
        label11.frame = CGRectMake(40, 10, 330, 40);
        mailView.frame = CGRectMake(220, 300, 330, 200);
    }
    else {
        label11.frame = CGRectMake(5, 10, 120, 30);
        mailView.frame = CGRectMake(100, 150, 120, 60);
    }
    [mailView addSubview:label11];
    //[self setSiblings:mailView enabled:TRUE];
    
    aTimer = [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(runScheduledTask:) userInfo:@"mailView" repeats:NO];
}




- (void)messageFailed
{
    [self removeWaitOverlay];
    
    UILabel *label11 = [[UILabel alloc] init];
    label11.text = @"Mail Failed";
    label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    label11.backgroundColor = [UIColor clearColor];
    label11.textAlignment = NSTextAlignmentCenter;
    label11.textColor = [UIColor blackColor];
    
    mailView.hidden = NO;
    
    //[self setSiblings:mailView enabled:TRUE];
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        label11.font = [UIFont systemFontOfSize:30];
        label11.frame = CGRectMake(40, 10, 330, 40);
        mailView.frame = CGRectMake(220, 300, 330, 200);
    }
    else {
        label11.frame = CGRectMake(5, 10, 120, 30);
        mailView.frame = CGRectMake(100, 150, 120, 60);
    }
    [mailView addSubview:label11];
    
    aTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(runScheduledTask:) userInfo:@"mailView" repeats:NO];
    
    //[self setSiblings:mailView enabled:TRUE];
    //aTimer = [NSTimer scheduledTimerWithTimeInterval:4.0 target:self selector:@selector(runScheduledTask:) userInfo:@"mailView" repeats:NO];
    
}





-(void)createWaitOverlay {
    
    //    // fade the overlay in
    //    loadingLabel.text = @"Sending Mail..";
    //    loadingLabel.frame = CGRectMake(5,30,100,30);
    //    bgimage = [[UIImageView alloc] initWithFrame:CGRectMake(0,0,320,480)];
    //    bgimage.image = [UIImage imageNamed:@"waitOverLay.png"];
    //    [self.view addSubview:bgimage];
    //    bgimage.alpha = 0;
    //    [self.view addSubview:loadingLabel];
    //    loadingLabel.alpha = 1;
    //
    //
    //    [UIView beginAnimations: @"Fade In" context:nil];
    //    [UIView setAnimationDelay:0];
    //    [UIView setAnimationDuration:.5];
    //    bgimage.alpha = 1;
    //    loadingLabel.alpha = 1;
    //    [UIView commitAnimations];
    //    [self startSpinner];
    //
    //    [bgimage release];
    
    // Show the HUD
    HUD.labelText = @"Sending Mail ..";
    [HUD setHidden:NO];
    [HUD show:YES];
    
}



-(void)removeWaitOverlay {
    
    //fade the overlay out
    
    //    [UIView beginAnimations: @"Fade Out" context:nil];
    //    [UIView setAnimationDelay:0];
    //    [UIView setAnimationDuration:.5];
    //    bgimage.alpha = 0;
    //    loadingLabel.alpha = 0;
    //    [UIView commitAnimations];
    //    [self stopSpinner];
    [HUD setHidden:YES];
    
}


-(void)startSpinner {
    
    spinner = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
    spinner.hidden = FALSE;
    spinner.frame = CGRectMake(137, 160, 50, 50);
    [spinner setHidesWhenStopped:YES];
    [self.view addSubview:spinner];
    [self.view bringSubviewToFront:spinner];
    [spinner startAnimating];
}


-(void)stopSpinner {
    
    [spinner stopAnimating];
    [spinner removeFromSuperview];
    
}

-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (alertView == signature) {
        
        if (buttonIndex == 0) {
            
            [HUD setHidden:YES];
            
            [cardPayment setHidden:YES];
            
            [self continuePay1];
            
        }
    }
    else if (alertView == saveAlert) {
        
        if (buttonIndex == 0) {
            
            
            emailtext = [[UITextField alloc] init];
            phnotext = [[UITextField alloc]init];
            nametext = [[UITextField alloc]init];
            
            NSString *paidAmt = @"0.00";
            finalBillDue1 = billDueValue.text;
            // billDueValue.text = [NSString stringWithFormat:@"%@",paidAmt];
            payTxt2 = [[UITextField alloc] init];
            payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
            isBillSaved = TRUE;
            [self continuePay1];
            // }
        }
        else {
            
            [alertView dismissWithClickedButtonIndex:0 animated:YES];
            OmniHomePage *home = [[OmniHomePage alloc] init];
            [self.navigationController pushViewController:home animated:YES];
        }
        
    }
    
    //added by Srinivasulu on 20/06/2017....
    
    else if(alertView == printAlertView){
        
        @try {
            
            [alertView dismissWithClickedButtonIndex:0 animated:YES];
            BillingHome *bh = [[BillingHome alloc] init] ;
            [self.navigationController pushViewController:bh animated:YES];
            
        } @catch (NSException *exception) {
            
        }
        
    }
    
    //upto here on 20/06/2017....
    else if ([alertView.title isEqualToString:@"Bill Saved"]){
        
        if (buttonIndex == 0) {
            
            
            OmniHomePage *home = [[OmniHomePage alloc]init];
            [self.navigationController pushViewController:home animated:NO];
            
        }
        
    }
    else if (alertView == cofirmAlert) {
        
        if (buttonIndex == 0) {
            
            //commented by Srinivasulu on 30/08/2017....
            
            if (denomination.subviews){
                for (UIView *subview in denomination.subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            // Enable the backgroud views ..
            [self setSiblings:denominationView enabled:TRUE];
            [segmentedControl setUserInteractionEnabled:YES];
            
            denominationView.hidden = YES;
            
            
            emailtext = [[UITextField alloc] init];
            phnotext = [[UITextField alloc]init];
            nametext = [[UITextField alloc]init];
            
            NSString *paidAmt = billDueValue.text;
            finalBillDue1 = @"0.00";
            // totalTxt.text = [NSString stringWithFormat:@"%@",paidAmt];
            payTxt2 = [[UITextField alloc] init];
            payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
            //           isBillSaved = TRUE;
            
            //changed by Srinivasulu on 30/11/2017....
            
            [self continuePay1];
            
            //            [self populatePaymentView:@"Cash"];
            //upto here on 30/11/2017....
            
            // }
            
            
            //upto here on 30/08/2017....
            
            //added by Srinivaslulu on  30/08/2017....
            
            //            NSString * paidAmt = billDueValue.text;
            //            finalBillDue1 = @"0.00";
            //
            //            payTxt2 = [[UITextField alloc] init];
            //            payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
            //
            //            if(paidVal != nil)
            //                paidVal.text = payTxt2.text;
            //
            //            [self populatePaymentView:@"CASH"];
            //upto here on 30/08/2017....
            
            
        }
        else {
            [alertView dismissWithClickedButtonIndex:0 animated:YES];
        }
        
        
        
        
        
        
        
    }
    else if (alertView == returnCofirmAlert){
        if (buttonIndex == 0) {
            
            
            //changed by Srinivasulu on 22/11/2017....
            if((billDueValue.text).floatValue > 0){
                
                //Changes done by Srinivasulu on 17/05/2018....
                //reaons -- Sir side remove animations. Commented and written the code....
                
                //            [UIView transitionFromView:returnDenominationView
                //                                toView:paymentView
                //                              duration:0.6
                //                               options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
                //                            completion:nil];
                
                returnDenominationView.hidden = YES;
                paymentView.hidden = NO;
                //upto here on 17/05/2018....
                [self populatePaymentView:@"CASH"];
            }
            else{
                
                returnDenominationView.hidden = YES;
                
                
                
            }
            
        }
        else {
            [alertView dismissWithClickedButtonIndex:0 animated:YES];
        }
    }
}
-(void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex{
    //    AudioServicesPlaySystemSound (soundFileObject);
    if ([alertView.title isEqualToString:NSLocalizedString(@"do_you_want_to_return_the_selected_items_?", nil)]) {
        if (alertView.numberOfButtons == 2) {
            
            //changed by Srinivasulu  on 20/05/2017....
            
            if (buttonIndex == 0) {
                
                
                @try {
                    
                    //changed by Srinivasulu on 24/05/2017....
                    
                    //changed by Srinivasulu on 04/08/2017....
                    
                    if (([returnMode caseInsensitiveCompare:@"cash"] == NSOrderedSame) || (isOfflineService)) {
                        
                        returnMode = @"cash";
                        //                    if ([selectedReturnModeStr caseInsensitiveCompare:@"cash"] == NSOrderedSame) {
                        //upto here on 04/08/2017....
                        
                        [self returnServiceCall:@"cash"];
                    }
                    
                    
                    //added by Srinivasulu on 09/03/2018....
                    else if(defaultReturnTypeStr.length > 0){
                        
                        
                        UIAlertView *confirmationAlertView  = [[UIAlertView alloc] init];
                        
                        confirmationAlertView.delegate = self;
                        
                        
                        
                        confirmationAlertView.title = [NSString stringWithFormat:@"%@%@",NSLocalizedString(@"do_you_want_to_continue_with", nil),defaultReturnTypeStr];
                        
                        [confirmationAlertView addButtonWithTitle:NSLocalizedString(@"yes", nil)];
                        
                        [confirmationAlertView addButtonWithTitle:NSLocalizedString(@"no", nil)];
                        
                        [confirmationAlertView show];
                        
                        confirmationAlertView.hidden = NO;
                    }
                    //upto here on 09/03/2018....
                    else if ([returnMode caseInsensitiveCompare:@"creditNote"] == NSOrderedSame) {
                        //                    else if ([selectedReturnModeStr caseInsensitiveCompare:@"creditNote"] == NSOrderedSame) {
                        
                        [self returnServiceCall:@"creditNote"];
                    }
                    
                    else{
                        
                        //added by Srinivasulu on 09/03/2018....
                        
                        
                        //upto here on 09/03/2018....
                        
                        
                        UIAlertView *confirmationAlertView  = [[UIAlertView alloc] init];
                        
                        confirmationAlertView.delegate = self;
                        
                        [confirmationAlertView setTitle:NSLocalizedString(@"do_you_want_to_continue_with_cash_or_credit_note", nil)];
                        
                        [confirmationAlertView addButtonWithTitle:@"Cash"];
                        
                        [confirmationAlertView addButtonWithTitle:@"Credit Note"];
                        
                        [confirmationAlertView show];
                        
                        confirmationAlertView.hidden = NO;
                    }
                    
                } @catch (NSException *exception) {
                    
                } @finally {
                    
                }
                //                @try {
                //                    [returnDenominationView setHidden: YES];
                //                    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
                //                    HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
                //                    [self.navigationController.view addSubview:HUD];
                //                    // Regiser for HUD callbacks so we can remove it from the window at the right time
                //                    HUD.delegate = self;
                //                    HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
                //                    HUD.mode = MBProgressHUDModeCustomView;
                //                    HUD.labelText = @"Please Wait...";
                //                    [HUD setHidden:NO];
                //                    [HUD show:YES];
                //                    NSDate *today = [NSDate date];
                //                    NSDateFormatter *f = [[NSDateFormatter alloc] init];
                //                    [f setDateFormat:@"dd/MM/yyyy HH:mm:ss"];
                //                    NSString* currentdate = [f stringFromDate:today];
                //
                //                    NSMutableArray *itemArray = [[NSMutableArray alloc] init];
                //                    NSString *return_status;
                //
                //                    if (!([pastBillStatus1 rangeOfString:@"TA" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
                //
                //                        return_status = @"TA-Returned";
                //                    }
                //                    else if (!([pastBillStatus1 rangeOfString:@"HD-PP" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
                //
                //                        return_status = @"HD-PP-Returned";
                //                    }
                //                    else {
                //                        return_status = @"HD-COD-Returned";
                //                    }
                //
                //                    NSString *businessDate = [NSString stringWithFormat:@"%@%@%@",[defaults valueForKey:BUSSINESS_DATE],@" ",[[currentdate componentsSeparatedByString:@" "] objectAtIndex:1]];
                //                    if ([businessDate isKindOfClass:[NSNull class]]) {
                //                        businessDate = [WebServiceUtility getCurrentDate];
                //                    }
                //
                //                    for (int i = 0; i < [selectedItems count]; i++) {
                //
                //                        NSDictionary *temp = [selectedItems objectAtIndex:i];
                //                        NSMutableDictionary *dic = [NSMutableDictionary new];
                //
                //                        float unit_price = ([[temp valueForKey:ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                //                        float taxValue = 0.0f;
                //
                //                        for (NSDictionary *taxDic in finalTaxDetailsArr) {
                //                            if ([[taxDic valueForKey:@"sku_id"] isEqualToString:[temp valueForKey:SKU_ID]] && [[taxDic valueForKey:@"plu_code"] isEqualToString:[temp valueForKey:PLU_CODE]]) {
                //                                taxValue += ((unit_price -(unit_price/(100+[[taxDic valueForKey:@"tax_rate"] floatValue])*100)));
                //                            }
                //                        }
                //
                //                        [dic setValue:originalBillId forKey:@"bill_id"];
                //                        [dic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]] forKey:@"cost"];
                //                        [dic setValue:counterName forKey:@"counter_id"];
                //                        [dic setValue:businessDate forKey:@"bill_date"];
                //                        [dic setValue:[temp valueForKey:ITEM_NAME] forKey:@"item_name"];
                //                        [dic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:ITEM_UNIT_PRICE] floatValue]] forKey:@"price"];
                //                        [dic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:RETURN_QUANTITY] floatValue]] forKey:@"quantity"];
                //                        [dic setValue:reasonTextField.text forKey:@"reason"];
                //                        [dic setValue:[temp valueForKey:SKU_ID] forKey:@"sku_id"];
                //                        [dic setValue:[temp valueForKey:TAX_CODE] forKey:TAX_CODE];
                //                        [dic setValue:[NSString stringWithFormat:@"%.2f",taxValue] forKey:TAX_RATE_STR];
                //                        [dic setValue:[temp valueForKey:PLU_CODE] forKey:PLU_CODE];
                //                        [dic setValue:return_status forKey:@"status"];
                //
                //                        //added by Srinivasulu on 12/05/2017.....
                //
                //
                //
                //                        //upto here on12/05/2017......
                //
                //                        [itemArray addObject:dic];
                //                    }
                //                    if (!isOfflineService) {
                //
                //
                //                        @try {
                //
                //
                //                            NSArray *headerKeys1 = [NSArray arrayWithObjects:@"billId",@"requestHeader", @"billReturnItems", @"denominations", @"status", @"bill_date", @"store_location",kReturnMode,COUNTER,kCustomerBillId,nil];
                //
                //                            NSArray *headerObjects1 = [NSArray arrayWithObjects:originalBillId,[RequestHeader getRequestHeader],itemArray,[self prepareDenominationString:nil], return_status, businessDate, presentLocation,returnMode,counterName,[NSNumber numberWithBool:isCustomerBillId], nil];
                //                            NSDictionary *dictionary1 = [NSDictionary dictionaryWithObjects:headerObjects1 forKeys:headerKeys1];
                //
                //                            NSError * err1;
                //                            NSData * jsonData1 = [NSJSONSerialization dataWithJSONObject:dictionary1 options:0 error:&err1];
                //                            NSString * jsonString = [[NSString alloc] initWithData:jsonData1 encoding:NSUTF8StringEncoding];
                //
                //                            WebServiceController *serviceController = [WebServiceController new];
                //                            [serviceController setReturningBillDelegate:self];
                //                            [serviceController returnBillWithData:jsonString];
                //                        }
                //                        @catch (NSException *exception) {
                //                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Success" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //                            [alert show];
                //
                //                        }
                //                        @finally {
                //
                //                        }
                //
                //                    }
                //                    else {
                //                        offline = [[OfflineBillingServices alloc] init];
                //                        BOOL returnStatus = [offline saveReturnedItems:itemArray bill_id:originalBillId];
                //                        if (returnStatus) {
                //
                //                            [offline updateBillingStatus:return_status billId:originalBillId];
                //                            returnSuccessAlert = [[UIAlertView alloc] initWithTitle:@"Success" message:@"Returned Successfully" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //                            [returnSuccessAlert show];
                //
                //                        }
                //                        else {
                //                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //                            [alert show];
                //                            [HUD setHidden:YES];
                //
                //                        }
                //                    }
                //
                //                } @catch (NSException *exception) {
                //                    //added by Srinivasulu on 20/05/2017....
                //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //                    [alert show];
                //                    [HUD setHidden:YES];
                //                    //upto here on 20/05/2017.....
                //
                //                } @finally {
                //
                //                }
                
            }
            
            //upto here on 20/05/2017....
            else{
                
                //added by Srinivasulu on 20/11/2017....
                
                if(submitButton != nil)
                    submitButton.userInteractionEnabled = YES;
                
                //upto here on 20/11/2017....
                
                alertView.hidden = YES;
            }
        }
    }
    
    if ([alertView.title isEqualToString:[NSString stringWithFormat:@"%@%@",NSLocalizedString(@"do_you_want_to_continue_with", nil),defaultReturnTypeStr]]) {
        if (buttonIndex == 0) {
            
            [self returnServiceCall:defaultReturnTypeStr];
        }
        else{
            
            //added by Srinivasulu on 23/03/2018....
            
            if(submitButton != nil)
                submitButton.userInteractionEnabled = YES;
            
            //upto here on 23/03/2018....
        }
        
    }
    
    //added by Srinivasulu on  20/05/2017....
    
    if ([alertView.title isEqualToString:NSLocalizedString(@"do_you_want_to_continue_with_cash_or_credit_note", nil)]) {
        if (buttonIndex == 0) {
            //added by Srinivasulu on 23/05/2017.... at 7.10..
            returnMode = @"cash";
            
            //upto here on 7.10....
            
            [self populateReturnDenominationViewDynamically];
            
        }
        else{
            
            //added by Srinivasulu on 23/05/2017.... at 7.10..
            
            returnMode = @"creditNote";
            
            //upto here on 7.10....
            
            [self returnServiceCall:@"creditNote"];
            
        }
        
    }
    //upto here on 20/05/2017....
    
    else if (alertView == returnSuccessAlert){
        billTypeStatus = TRUE;
        
        [returnDetailsView removeFromSuperview];
        segmentIndex = 2;
        mainSegmentedControl.selectedSegmentIndex = 2;
        [self newBill:alertView];
        
        //        @try {
        //
        //            if ([tempReturnItems count] == [tempReturnDetails count]) {
        //
        //                submitButton.enabled = FALSE;
        //            }
        //        }
        //        @catch (NSException *exception) {
        //
        //
        //        }
    }
    if ([alertView.title isEqualToString:NSLocalizedString(@"do_you_want_to_exchange_the_selected_items_?", nil)]) {
        if (alertView.numberOfButtons == 2) {
            if (buttonIndex==0) {
                
                self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
                self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil];
                
                NSMutableArray *exchanged_Items = [[NSMutableArray alloc] init];
                
                for (int i = 0; i < selectedItems.count; i++) {
                    NSArray *temp = selectedItems[i];
                    [exchanged_Items addObject:temp];
                }
                //changed by Srinivasulu on 14/06/2017....
                //changed reasonTxetField to emptyString....
                
                //                ExchangingBillingHome *bh = [[ExchangingBillingHome alloc] initWithCreditValue:exchangeTotalBillValue.text oldBillId:originalBillId exchangingItems:exchanged_Items billStatus:billStatusLabelValue.text reason:reasonTextField.text];
                ExchangingBillingHome *bh = [[ExchangingBillingHome alloc] initWithCreditValue:exchangeTotalBillValue.text oldBillId:originalBillId exchangingItems:exchanged_Items billStatus:billStatusLabelValue.text reason:@""];
                
                
                
                //upto here on 14/06/2017....
                
                
                
                [self.navigationController pushViewController:bh animated:YES];
            }
            else{
                alertView.hidden = YES;
            }
        }
    }
    
    //added  by Srinivasulu on 29/04/2017....
    
    
    
    //added  by Srinivasulu on 20/04/2017....
    else if(alertView == offlineModeAlert){
        
        [alertView dismissWithClickedButtonIndex:buttonIndex animated:YES];
        
        [self changeOperationMode:buttonIndex];
        //[super alertView:alertView didDismissWithButtonIndex:buttonIndex_];
    }
    
    else if (alertView == uploadConfirmationAlert)
    {
        [alertView dismissWithClickedButtonIndex:0 animated:YES];
        
        
        
        [self syncOfflinebillsToOnline:buttonIndex];
        
        
    }
    //upto here on 28/04/2017...
    
    //upto here on 29/04/2017...
    
    
    //added by  Srinivasulu on 17/04/2017....
    //    else if ([alertView.title isEqualToString:@"Denominations are not available. Do You Want to continue?"]) {
    //        if (alertView.numberOfButtons == 2) {
    //            if (buttonIndex==0) {
    //
    //                @try {
    //                    if(returnedval == nil){
    //                        returnedval = [[UILabel alloc] init];
    //                    }
    //                    returnedval.text = @"0.00";
    //
    //                    [self checkReturnDenomStatus];
    //
    //
    //
    //                } @catch (NSException *exception) {
    //
    //                }
    //
    //            }else{
    //
    //                alertView.hidden = YES;
    //
    //            }
    //        }
    //    }
    
    //@
    
    //upto here on 17/04/2017....
    
    
    
    
    
}


// viewDidUnload handler...
- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
    [self setPastBillField:nil];
    
    
}
-(void)viewWillDisappear:(BOOL)animated {
    //    for(id object in observedObjsArr){
    //        if([object isKindOfClass:[printer class]]){
    //            [object removeObserver:self];
    //        }
    //        [observedObjsArr removeAllObjects];
    @try {
        
        [printer removeObserver:self];
        [scanner removeObserver:self];
    }
    @catch (NSException *exception) {
        
        NSLog(@"Exception %@",exception);
    }
    
}



- (void)getCreditNoteDetailsForId:(NSString *)creditNoteStr {
    
    @try {
        
        //addded by Srinivasulu on 17/03/2018....
        
        [HUD setLabelText:NSLocalizedString(@"getting_creditnote_info_", nil)];
        
        //upto here on 17/03/2018....
        
        NSMutableDictionary *orderDetails = [NSMutableDictionary dictionaryWithObjects:@[[RequestHeader getRequestHeader],creditNoteStr] forKeys:@[REQUEST_HEADER,@"creditNoteNo"]];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:orderDetails options:0 error:&err];
        NSString * orderJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        NSString *serviceUrl = [WebServiceUtility getURLFor:GET_CREDIT_NOTE];
        serviceUrl = [NSString stringWithFormat:@"%@%@",serviceUrl,orderJsonString];
        serviceUrl = [WebServiceUtility addPercentEscapesFor:serviceUrl];
        
        NSURL *url = [NSURL URLWithString:serviceUrl];
        NSMutableURLRequest  *request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                            timeoutInterval:60.0];
        request.HTTPMethod = @"GET";
        
        NSError *error = nil;
        NSHTTPURLResponse *responseCode = nil;
        
        NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&responseCode error:&error];
        NSDictionary *billingResponse = [NSJSONSerialization JSONObjectWithData:data options:0
                                                                          error:NULL];
        
        NSLog(@"%@",billingResponse);
        
        NSArray *creditReturnNotes = [billingResponse valueForKey:@"returnNotes"];
        if (creditReturnNotes.count) {
            NSDictionary *creditNoteDic = creditReturnNotes[0];
            creditNoteTotalLbl.text = @"CN Total :";
            creditNoteBalLbl.text = @"CN Balance :";
            creditNoteStatusLbl.text = @"CN Status :";
            if ([[creditNoteDic valueForKey:@"status"] boolValue]) {
                creditNoteTotalLbl.text = [NSString stringWithFormat:@"%@ %.2f",creditNoteTotalLbl.text,[[creditNoteDic valueForKey:@"credit_amount"] floatValue]];
                creditNoteBalLbl.text = [NSString stringWithFormat:@"%@ %.2f",creditNoteBalLbl.text,[[creditNoteDic valueForKey:@"balAmount"] floatValue]];
                creditNoteStatusLbl.text = [NSString stringWithFormat:@"%@ %@",creditNoteStatusLbl.text,@"Available"];
                payTxt2.text = [NSString stringWithFormat:@"%.2f",[[creditNoteDic valueForKey:@"balAmount"] floatValue]];
                if ((payTxt1.text).floatValue > (payTxt2.text).floatValue) {
                    finalBillDue1 = [NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue - (payTxt2.text).floatValue];
                }
                creditNoteTotalLbl.textColor = [UIColor greenColor];
                creditNoteBalLbl.textColor = [UIColor greenColor];
                creditNoteStatusLbl.textColor = [UIColor greenColor];
                
            }
            else {
                creditNoteTotalLbl.text = [NSString stringWithFormat:@"%@%.2f",creditNoteTotalLbl.text,[[creditNoteDic valueForKey:@"credit_amount"] floatValue]];
                creditNoteBalLbl.text = [NSString stringWithFormat:@"%@%.2f",creditNoteBalLbl.text,[[creditNoteDic valueForKey:@"balAmount"] floatValue]];
                creditNoteStatusLbl.text = [NSString stringWithFormat:@"%@%@",creditNoteStatusLbl.text,@"Already Used"];
                creditNoteTotalLbl.textColor = [UIColor redColor];
                creditNoteBalLbl.textColor = [UIColor redColor];
                creditNoteStatusLbl.textColor = [UIColor redColor];
                
            }
        }
        
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
    
}

-(void)goToHome {
    if (([bill_status_val.text caseInsensitiveCompare:@"pending"] != NSOrderedSame)) {
        OmniHomePage *home = [[OmniHomePage alloc]init];
        [self.navigationController pushViewController:home animated:NO];
    }
    else {
        
        [self backAction];
        
    }
    
}


- (void) updatingItems:(UIButton *)sender{
    
    //Play Audio for button touch....
    //AudioServicesPlaySystemSound (soundFileObject);
    NSDictionary *temp3 = tempReturnItems[sender.tag];
    //[textField resignFirstResponder];
    itemTable.userInteractionEnabled = FALSE;
    itemTableExchg.userInteractionEnabled = FALSE;
    NSDictionary *temp = [[NSDictionary alloc] init];
    NSMutableDictionary *dic = [[NSMutableDictionary alloc]init];
    NSDictionary *temp2 = [[NSDictionary alloc] init];
    NSMutableDictionary *dic1 = [[NSMutableDictionary alloc]init];
    
    qtyChangeDisplyView = [[UIView alloc]init];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
            
            qtyChangeDisplyView.frame = CGRectMake(300, 60, 375, 340);
            
        }
        else {
            qtyChangeDisplyView.frame = CGRectMake(200, 300, 375, 300);
            
        }
    }
    else{
        qtyChangeDisplyView.frame = CGRectMake(75, 68, 175, 200);
    }
    qtyChangeDisplyView.layer.borderWidth = 1.0;
    qtyChangeDisplyView.layer.cornerRadius = 10.0;
    qtyChangeDisplyView.layer.masksToBounds = YES;
    qtyChangeDisplyView.layer.borderColor = [UIColor blackColor].CGColor;
    
    
    //        NSString *filePath = [[NSBundle mainBundle] pathForResource:@"index29" ofType:@"jpg"];
    //        UIImageView *img = [[UIImageView alloc] initWithImage:[UIImage imageWithContentsOfFile:filePath]];
    //        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
    //
    //            img.frame = CGRectMake(0, 0, 375, 300);
    //        }
    //        else{
    //            img.frame = CGRectMake(0, 0, 175, 200);
    //        }
    //        [qtyChangeDisplyView addSubview:img];
    qtyChangeDisplyView.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    [self.view addSubview:qtyChangeDisplyView];
    
    UIImageView *img  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
    
    // a label on top of the view ..
    UILabel *topbar = [[UILabel alloc] init];
    topbar.backgroundColor = [UIColor grayColor];
    topbar.backgroundColor = [UIColor clearColor];
    topbar.textAlignment = NSTextAlignmentCenter;
    topbar.font = [UIFont boldSystemFontOfSize:17];
    topbar.textColor = [UIColor whiteColor];
    topbar.textAlignment = NSTextAlignmentLeft;
    
    
    UILabel *availQty = [[UILabel alloc] init];
    availQty.font = [UIFont boldSystemFontOfSize:14];
    availQty.backgroundColor = [UIColor clearColor];
    availQty.textColor = [UIColor blackColor];
    [qtyChangeDisplyView addSubview:availQty];
    
    UILabel *unitPrice = [[UILabel alloc] init];
    unitPrice.font = [UIFont boldSystemFontOfSize:14];
    unitPrice.backgroundColor = [UIColor clearColor];
    unitPrice.textColor = [UIColor blackColor];
    
    
    UILabel *availQtyData = [[UILabel alloc] init];
    
    availQtyData.backgroundColor = [UIColor clearColor];
    availQtyData.textColor = [UIColor blackColor];
    [qtyChangeDisplyView addSubview:availQtyData];
    
    UILabel *unitPriceData = [[UILabel alloc] init];
    
    unitPriceData.font = [UIFont boldSystemFontOfSize:14];
    unitPriceData.backgroundColor = [UIColor clearColor];
    unitPriceData.textColor = [UIColor blackColor];
    
    
    qtyFeild = [[UITextField alloc] init];
    qtyFeild.borderStyle = UITextBorderStyleRoundedRect;
    qtyFeild.textColor = [UIColor blackColor];
    //NumberKeyBoard hidden....
    UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
    numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                             [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar1 sizeToFit];
    qtyFeild.keyboardType = UIKeyboardTypeNumberPad;
    qtyFeild.inputAccessoryView = numberToolbar1;
    //qtyFeild.text = textField.text;
    qtyFeild.font = [UIFont systemFontOfSize:17.0];
    qtyFeild.backgroundColor = [UIColor whiteColor];
    qtyFeild.autocorrectionType = UITextAutocorrectionTypeNo;
    //qtyFeild.keyboardType = UIKeyboardTypeDefault;
    qtyFeild.clearButtonMode = UITextFieldViewModeWhileEditing;
    qtyFeild.returnKeyType = UIReturnKeyDone;
    qtyFeild.delegate = self;
    [qtyFeild becomeFirstResponder];
    qtyFeild.tag = sender.tag;
    
    /** ok Button for qtyChangeDisplyView....*/
    okButton = [UIButton buttonWithType:UIButtonTypeCustom];
    //[okButton setImage:[UIImage imageNamed:@"OK.png"] forState:UIControlStateNormal];
    [okButton addTarget:self
                 action:@selector(okButtonPressed:) forControlEvents:UIControlEventTouchDown];
    [okButton setTitle:@"OK" forState:UIControlStateNormal];
    okButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    okButton.backgroundColor = [UIColor grayColor];
    
    /** CancelButton for qtyChangeDisplyView....*/
    qtyCancelButton = [UIButton buttonWithType:UIButtonTypeCustom];
    //[qtyCancelButton setImage:[UIImage imageNamed:@"Cancel.png"] forState:UIControlStateNormal];
    [qtyCancelButton addTarget:self
                        action:@selector(QtyCancelButtonPressed:) forControlEvents:UIControlEventTouchDown];
    [qtyCancelButton setTitle:@"Cancel" forState:UIControlStateNormal];
    qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    qtyCancelButton.backgroundColor = [UIColor grayColor];
    
    //added by Srinivasulu on 12/06/2017....
    
    UILabel * returnedQtyLbl;
    UILabel * returnedReasonLbl;
    
    
    UIImage * buttonImageDD;
    
    UIButton * showReasonsListBtn;
    
    
    
    
    returnedQtyLbl = [[UILabel alloc] init];
    returnedQtyLbl.font = [UIFont boldSystemFontOfSize:14];
    returnedQtyLbl.backgroundColor = [UIColor clearColor];
    returnedQtyLbl.textColor = [UIColor blackColor];
    
    returnedReasonLbl = [[UILabel alloc] init];
    returnedReasonLbl.font = [UIFont boldSystemFontOfSize:14];
    returnedReasonLbl.backgroundColor = [UIColor clearColor];
    returnedReasonLbl.textColor = [UIColor blackColor];
    
    
    
    returnReasonTxt = [[UITextField alloc] init];
    returnReasonTxt.borderStyle = UITextBorderStyleRoundedRect;
    returnReasonTxt.textColor = [UIColor blackColor];
    //    returnReasonTxt.keyboardType = UIKeyboardTypeDefault;
    returnReasonTxt.font = [UIFont systemFontOfSize:17.0];
    returnReasonTxt.backgroundColor = [UIColor whiteColor];
    returnReasonTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    returnReasonTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    returnReasonTxt.returnKeyType = UIReturnKeyDone;
    returnReasonTxt.delegate = self;
    [returnReasonTxt becomeFirstResponder];
    returnReasonTxt.tag = sender.tag;
    [returnReasonTxt setUserInteractionEnabled:FALSE];
    
    
    buttonImageDD = [UIImage imageNamed:@"combo.png"];
    
    showReasonsListBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [showReasonsListBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
    [showReasonsListBtn addTarget:self
                           action:@selector(showReasonsView:) forControlEvents:UIControlEventTouchDown];
    
    
    
    [qtyChangeDisplyView addSubview:returnedQtyLbl];
    [qtyChangeDisplyView addSubview:returnedReasonLbl];
    
    
    [qtyChangeDisplyView addSubview:returnReasonTxt];
    [qtyChangeDisplyView addSubview:showReasonsListBtn];
    
    
    
    
    //populating text into receptive field.....
    @try {
        //        topbar.text = @"    Enter Quantity";
        topbar.text = NSLocalizedString(@"enter_quantity", nil);
        
        //    availQty.text = @"Available Qty :";
        availQty.text = NSLocalizedString(@"billed_qty_:", nil);
        
        //        unitPrice.text = @"Unit Price       :";
        unitPrice.text = NSLocalizedString(@"unit_price_:", nil);
        
        returnedQtyLbl.text = NSLocalizedString(@"return_qty_:", nil);
        returnedReasonLbl.text = NSLocalizedString(@"reason_:", nil);
        
        
        returnReasonTxt.placeholder = NSLocalizedString(@"return_reason", nil);
        
        qtyFeild.placeholder = NSLocalizedString(@"enter_qty", nil);
        
        
    } @catch (NSException *exception) {
        
    }
    
    //upto here on 12/06/2017....
    
    
    @try {
        
        for (int i=0; i<tempReturnDetails.count; i++) {
            
            temp = tempReturnDetails[i];
            
            dic[[temp valueForKey:SKU_ID]] = [temp valueForKey:QUANTITY];
            
        }
        for (int i=0; i<tempExchangeDetails.count; i++) {
            
            temp2 = tempExchangeDetails[i];
            
            dic1[[temp2 valueForKey:SKU_ID]] = [temp2 valueForKey:QUANTITY];
            
        }
        
        availQtyData.text = [NSString stringWithFormat:@"%.2f",[[temp3 valueForKey:QUANTITY] floatValue]-([[dic valueForKey:[temp3 valueForKey:SKU_ID]] floatValue] + [[dic1 valueForKey:[temp3 valueForKey:SKU_ID]] floatValue] )];    availQtyData.font = [UIFont boldSystemFontOfSize:14];
        unitPriceData.text = [temp3 valueForKey:ITEM_UNIT_PRICE];
        if ([[temp3 valueForKey:EDITED_PRICE] floatValue] > 0) {
            unitPriceData.text = [temp3 valueForKey:ITEM_UNIT_PRICE];
        }
        
        //added by Srinivasulu on 20/12/2017....
        
        qtyFeild.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[temp3 valueForKey:RETURN_QUANTITY] defaultReturn:@"0.00"] floatValue]];
        
        returnReasonTxt.text = [self checkGivenValueIsNullOrNil:[temp3 valueForKey:REASON] defaultReturn:@""];
        
        //upto here on 20/12/2017....
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        
        img.frame = CGRectMake(0, 0, 375, 50);
        topbar.frame = CGRectMake(80, 5, 375, 40);
        topbar.font = [UIFont boldSystemFontOfSize:25];
        
        
        availQty.frame = CGRectMake( 10,60,200,40);
        availQty.font = [UIFont boldSystemFontOfSize:25];
        
        
        unitPrice.frame = CGRectMake( 10,110,200,40);
        unitPrice.font = [UIFont boldSystemFontOfSize:25];
        
        returnedQtyLbl.frame = CGRectMake( 10,160,200,40);
        returnedQtyLbl.font = [UIFont boldSystemFontOfSize:25];
        
        returnedReasonLbl.frame = CGRectMake( 10, 210, 200, 40);
        returnedReasonLbl.font = [UIFont boldSystemFontOfSize:25];
        
        
        availQtyData.frame = CGRectMake(200,60,250,40);
        availQtyData.font = [UIFont boldSystemFontOfSize:25];
        
        
        unitPriceData.frame = CGRectMake(200,110,250,40);
        unitPriceData.font = [UIFont boldSystemFontOfSize:25];
        
        
        qtyFeild.frame = CGRectMake(200, 160, 150, 40);
        qtyFeild.font = [UIFont systemFontOfSize:20.0];
        
        returnReasonTxt.frame = CGRectMake( 200, 210, 160, 40);
        returnReasonTxt.font = [UIFont systemFontOfSize:20.0];
        
        showReasonsListBtn.frame = CGRectMake( 330.0, 205.0, 45.0, 54.0);
        
        
        okButton.frame = CGRectMake(60, 270, 80, 50);
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        
        
        //            qtyCancelButton.frame = CGRectMake(250, 220, 80, 50);
        //            qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        
        okButton.frame = CGRectMake(20, 270, 165, 45);
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        okButton.layer.cornerRadius = 20.0f;
        
        qtyCancelButton.frame = CGRectMake(190, 270, 165, 45);
        qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        qtyCancelButton.layer.cornerRadius = 20.0f;
        
        
    }
    else{
        
        img.frame = CGRectMake(0, 0, 175, 32);
        topbar.frame = CGRectMake(0, 0, 175, 30);
        topbar.font = [UIFont boldSystemFontOfSize:17];
        
        availQty.frame = CGRectMake(10,40,100,30);
        availQty.font = [UIFont boldSystemFontOfSize:14];
        
        unitPrice.frame = CGRectMake(10,70,100,30);
        unitPrice.font = [UIFont boldSystemFontOfSize:14];
        
        availQtyData.frame = CGRectMake(115,40,60,30);
        availQtyData.font = [UIFont boldSystemFontOfSize:14];
        
        unitPriceData.frame = CGRectMake(115,70,60,30);
        unitPriceData.font = [UIFont boldSystemFontOfSize:14];
        
        qtyFeild.frame = CGRectMake(36, 107, 100, 30);
        qtyFeild.font = [UIFont systemFontOfSize:17.0];
        
        okButton.frame = CGRectMake(10, 150, 75, 30);
        okButton.layer.cornerRadius = 14.0f;
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
        qtyCancelButton.frame = CGRectMake(90, 150, 75, 30);
        qtyCancelButton.layer.cornerRadius = 14.0f;
        qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
    }
    
    [qtyChangeDisplyView addSubview:img];
    [qtyChangeDisplyView addSubview:topbar];
    [qtyChangeDisplyView addSubview:availQty];
    [qtyChangeDisplyView addSubview:unitPrice];
    [qtyChangeDisplyView addSubview:availQtyData];
    [qtyChangeDisplyView addSubview:unitPriceData];
    [qtyChangeDisplyView addSubview:qtyFeild];
    [qtyChangeDisplyView addSubview:okButton];
    [qtyChangeDisplyView addSubview:qtyCancelButton];
    
    returnTagId = sender.tag;
    
}
-(void)updatingExchangeItems:(UIButton *)sender {
    
    
    //Play Audio for button touch....
    //AudioServicesPlaySystemSound (soundFileObject);
    NSDictionary *temp3 = tempExchangeItems[sender.tag];
    //[textField resignFirstResponder];
    itemTable.userInteractionEnabled = FALSE;
    itemTableExchg.userInteractionEnabled = FALSE;
    
    NSDictionary *temp = [[NSDictionary alloc] init];
    NSMutableDictionary *dic = [[NSMutableDictionary alloc]init];
    NSDictionary *temp2 = [[NSDictionary alloc] init];
    NSMutableDictionary *dic1 = [[NSMutableDictionary alloc]init];
    
    qtyChangeDisplyView = [[UIView alloc]init];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
            
            qtyChangeDisplyView.frame = CGRectMake(300, 50, 375, 340);
            
        }
        else {
            qtyChangeDisplyView.frame = CGRectMake(200, 300, 375, 300);
            
        }
    }
    else{
        qtyChangeDisplyView.frame = CGRectMake(75, 68, 175, 200);
    }
    qtyChangeDisplyView.layer.borderWidth = 1.0;
    qtyChangeDisplyView.layer.cornerRadius = 10.0;
    qtyChangeDisplyView.layer.masksToBounds = YES;
    qtyChangeDisplyView.layer.borderColor = [UIColor blackColor].CGColor;
    
    
    //        NSString *filePath = [[NSBundle mainBundle] pathForResource:@"index29" ofType:@"jpg"];
    //        UIImageView *img = [[UIImageView alloc] initWithImage:[UIImage imageWithContentsOfFile:filePath]];
    //        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
    //
    //            img.frame = CGRectMake(0, 0, 375, 300);
    //        }
    //        else{
    //            img.frame = CGRectMake(0, 0, 175, 200);
    //        }
    //        [qtyChangeDisplyView addSubview:img];
    qtyChangeDisplyView.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    [self.view addSubview:qtyChangeDisplyView];
    
    UIImageView *img  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
    
    // a label on top of the view ..
    UILabel *topbar = [[UILabel alloc] init];
    topbar.backgroundColor = [UIColor grayColor];
    topbar.backgroundColor = [UIColor clearColor];
    topbar.textAlignment = NSTextAlignmentCenter;
    topbar.font = [UIFont boldSystemFontOfSize:17];
    topbar.textColor = [UIColor whiteColor];
    topbar.textAlignment = NSTextAlignmentLeft;
    
    
    UILabel *availQty = [[UILabel alloc] init];
    
    
    
    availQty.font = [UIFont boldSystemFontOfSize:14];
    availQty.backgroundColor = [UIColor clearColor];
    availQty.textColor = [UIColor blackColor];
    [qtyChangeDisplyView addSubview:availQty];
    
    UILabel *unitPrice = [[UILabel alloc] init];
    unitPrice.font = [UIFont boldSystemFontOfSize:14];
    unitPrice.backgroundColor = [UIColor clearColor];
    unitPrice.textColor = [UIColor blackColor];
    
    
    UILabel *availQtyData = [[UILabel alloc] init];
    availQtyData.font = [UIFont boldSystemFontOfSize:14];
    availQtyData.backgroundColor = [UIColor clearColor];
    availQtyData.textColor = [UIColor blackColor];
    [qtyChangeDisplyView addSubview:availQtyData];
    
    UILabel *unitPriceData = [[UILabel alloc] init];
    unitPriceData.font = [UIFont boldSystemFontOfSize:14];
    unitPriceData.backgroundColor = [UIColor clearColor];
    unitPriceData.textColor = [UIColor blackColor];
    
    
    qtyFeild = [[UITextField alloc] init];
    qtyFeild.borderStyle = UITextBorderStyleRoundedRect;
    qtyFeild.textColor = [UIColor blackColor];
    //NumberKeyBoard hidden....
    UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
    numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                             [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar1 sizeToFit];
    qtyFeild.keyboardType = UIKeyboardTypeNumberPad;
    qtyFeild.inputAccessoryView = numberToolbar1;
    //qtyFeild.text = textField.text;
    qtyFeild.font = [UIFont systemFontOfSize:17.0];
    qtyFeild.backgroundColor = [UIColor whiteColor];
    qtyFeild.autocorrectionType = UITextAutocorrectionTypeNo;
    //qtyFeild.keyboardType = UIKeyboardTypeDefault;
    qtyFeild.clearButtonMode = UITextFieldViewModeWhileEditing;
    qtyFeild.returnKeyType = UIReturnKeyDone;
    qtyFeild.delegate = self;
    [qtyFeild becomeFirstResponder];
    
    /** ok Button for qtyChangeDisplyView....*/
    okButton = [UIButton buttonWithType:UIButtonTypeCustom];
    //[okButton setImage:[UIImage imageNamed:@"OK.png"] forState:UIControlStateNormal];
    [okButton addTarget:self
                 action:@selector(okButtonPressedExchg:) forControlEvents:UIControlEventTouchDown];
    [okButton setTitle:@"OK" forState:UIControlStateNormal];
    okButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    okButton.backgroundColor = [UIColor grayColor];
    
    /** CancelButton for qtyChangeDisplyView....*/
    qtyCancelButton = [UIButton buttonWithType:UIButtonTypeCustom];
    //[qtyCancelButton setImage:[UIImage imageNamed:@"Cancel.png"] forState:UIControlStateNormal];
    [qtyCancelButton addTarget:self
                        action:@selector(QtyCancelButtonPressed:) forControlEvents:UIControlEventTouchDown];
    [qtyCancelButton setTitle:@"Cancel" forState:UIControlStateNormal];
    qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    qtyCancelButton.backgroundColor = [UIColor grayColor];
    
    //added by Srinivasulu on 12/06/2017....
    
    UILabel * returnedQtyLbl;
    UILabel * returnedReasonLbl;
    
    
    UIImage * buttonImageDD;
    
    UIButton * showReasonsListBtn;
    
    
    
    
    returnedQtyLbl = [[UILabel alloc] init];
    returnedQtyLbl.font = [UIFont boldSystemFontOfSize:14];
    returnedQtyLbl.backgroundColor = [UIColor clearColor];
    returnedQtyLbl.textColor = [UIColor blackColor];
    
    returnedReasonLbl = [[UILabel alloc] init];
    returnedReasonLbl.font = [UIFont boldSystemFontOfSize:14];
    returnedReasonLbl.backgroundColor = [UIColor clearColor];
    returnedReasonLbl.textColor = [UIColor blackColor];
    
    
    
    returnReasonTxt = [[UITextField alloc] init];
    returnReasonTxt.borderStyle = UITextBorderStyleRoundedRect;
    returnReasonTxt.textColor = [UIColor blackColor];
    //    returnReasonTxt.keyboardType = UIKeyboardTypeDefault;
    returnReasonTxt.font = [UIFont systemFontOfSize:17.0];
    returnReasonTxt.backgroundColor = [UIColor whiteColor];
    returnReasonTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    returnReasonTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    returnReasonTxt.returnKeyType = UIReturnKeyDone;
    returnReasonTxt.delegate = self;
    [returnReasonTxt becomeFirstResponder];
    returnReasonTxt.tag = sender.tag;
    [returnReasonTxt setUserInteractionEnabled:FALSE];
    
    
    buttonImageDD = [UIImage imageNamed:@"combo.png"];
    
    showReasonsListBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [showReasonsListBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
    [showReasonsListBtn addTarget:self
                           action:@selector(showReasonsView:) forControlEvents:UIControlEventTouchDown];
    
    
    
    [qtyChangeDisplyView addSubview:returnedQtyLbl];
    [qtyChangeDisplyView addSubview:returnedReasonLbl];
    
    
    [qtyChangeDisplyView addSubview:returnReasonTxt];
    [qtyChangeDisplyView addSubview:showReasonsListBtn];
    
    
    
    
    //populating text into receptive field.....
    @try {
        //        topbar.text = @"    Enter Quantity";
        topbar.text = NSLocalizedString(@"enter_quantity", nil);
        
        //    availQty.text = @"Available Qty :";
        availQty.text = NSLocalizedString(@"billed_qty_:", nil);
        
        //        unitPrice.text = @"Unit Price       :";
        unitPrice.text = NSLocalizedString(@"unit_price_:", nil);
        
        returnedQtyLbl.text = NSLocalizedString(@"exchange_qty_:", nil);
        returnedReasonLbl.text = NSLocalizedString(@"reason_:", nil);
        
        
        returnReasonTxt.placeholder = NSLocalizedString(@"exchange_reason", nil);
        
        qtyFeild.placeholder = NSLocalizedString(@"enter_qty", nil);
        
        
        
        
        //changed by Srinivasulu on 01/05/2017....
        //        topbar.text = @"    Enter Quantity";
        //
        //        availQty.text = @"Available Qty :";
        //        label_3.text = NSLocalizedString(@"billed_qty_:", nil);
        //
        //        availQty.text = NSLocalizedString(@"billed_qty_:", nil);
        //
        //        unitPrice.text = @"Unit Price       :";
        //
        //
        //        qtyFeild.placeholder = @"Enter Qty";
        
        //upot here on 01/04/2017....
        
        
    } @catch (NSException *exception) {
        
    }
    
    //upto here on 12/06/2017....
    
    
    
    
    
    
    
    @try {
        
        for (int i=0; i<tempReturnDetails.count; i++) {
            
            temp = tempReturnDetails[i];
            
            dic[[temp valueForKey:SKU_ID]] = [temp valueForKey:QUANTITY];
            
        }
        for (int i=0; i<tempExchangeDetails.count; i++) {
            
            temp2 = tempExchangeDetails[i];
            
            dic1[[temp2 valueForKey:SKU_ID]] = [temp2 valueForKey:QUANTITY];
            
        }
        
        availQtyData.text = [NSString stringWithFormat:@"%.1f",[[temp3 valueForKey:QUANTITY] floatValue]-([[dic valueForKey:[temp3 valueForKey:SKU_ID]] floatValue] + [[dic1 valueForKey:[temp3 valueForKey:SKU_ID]] floatValue] )];    availQtyData.font = [UIFont boldSystemFontOfSize:14];
        unitPriceData.text = [temp3 valueForKey:ITEM_UNIT_PRICE];
        
        //added by Srinivasulu on 20/12/2017....
        
        qtyFeild.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[temp3 valueForKey:RETURN_QUANTITY] defaultReturn:@"0.00"] floatValue]];
        
        returnReasonTxt.text = [self checkGivenValueIsNullOrNil:[temp3 valueForKey:REASON] defaultReturn:@""];
        
        //upto here on 20/12/2017....
        
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        
        img.frame = CGRectMake(0, 0, 375, 50);
        topbar.frame = CGRectMake(80, 5, 375, 40);
        topbar.font = [UIFont boldSystemFontOfSize:25];
        
        
        availQty.frame = CGRectMake( 10,60,200,40);
        availQty.font = [UIFont boldSystemFontOfSize:25];
        
        
        unitPrice.frame = CGRectMake( 10,110,200,40);
        unitPrice.font = [UIFont boldSystemFontOfSize:25];
        
        returnedQtyLbl.frame = CGRectMake( 10,160,200,40);
        returnedQtyLbl.font = [UIFont boldSystemFontOfSize:25];
        
        returnedReasonLbl.frame = CGRectMake( 10, 210, 200, 40);
        returnedReasonLbl.font = [UIFont boldSystemFontOfSize:25];
        
        
        availQtyData.frame = CGRectMake(200,60,250,40);
        availQtyData.font = [UIFont boldSystemFontOfSize:25];
        
        
        unitPriceData.frame = CGRectMake(200,110,250,40);
        unitPriceData.font = [UIFont boldSystemFontOfSize:25];
        
        
        qtyFeild.frame = CGRectMake(200, 160, 150, 40);
        qtyFeild.font = [UIFont systemFontOfSize:20.0];
        
        returnReasonTxt.frame = CGRectMake( 200, 210, 160, 40);
        returnReasonTxt.font = [UIFont systemFontOfSize:20.0];
        
        showReasonsListBtn.frame = CGRectMake( 330.0, 205.0, 45.0, 54.0);
        
        
        okButton.frame = CGRectMake(60, 270, 80, 50);
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        
        
        //            qtyCancelButton.frame = CGRectMake(250, 220, 80, 50);
        //            qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        
        okButton.frame = CGRectMake(20, 270, 165, 45);
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        okButton.layer.cornerRadius = 20.0f;
        
        qtyCancelButton.frame = CGRectMake(190, 270, 165, 45);
        qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        qtyCancelButton.layer.cornerRadius = 20.0f;
        
        
    }
    else{
        
        img.frame = CGRectMake(0, 0, 175, 32);
        topbar.frame = CGRectMake(0, 0, 175, 30);
        topbar.font = [UIFont boldSystemFontOfSize:17];
        
        availQty.frame = CGRectMake(10,40,100,30);
        availQty.font = [UIFont boldSystemFontOfSize:14];
        
        unitPrice.frame = CGRectMake(10,70,100,30);
        unitPrice.font = [UIFont boldSystemFontOfSize:14];
        
        availQtyData.frame = CGRectMake(115,40,60,30);
        availQtyData.font = [UIFont boldSystemFontOfSize:14];
        
        unitPriceData.frame = CGRectMake(115,70,60,30);
        unitPriceData.font = [UIFont boldSystemFontOfSize:14];
        
        qtyFeild.frame = CGRectMake(36, 107, 100, 30);
        qtyFeild.font = [UIFont systemFontOfSize:17.0];
        
        okButton.frame = CGRectMake(10, 150, 75, 30);
        okButton.layer.cornerRadius = 14.0f;
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
        qtyCancelButton.frame = CGRectMake(90, 150, 75, 30);
        qtyCancelButton.layer.cornerRadius = 14.0f;
        qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
    }
    
    [qtyChangeDisplyView addSubview:img];
    [qtyChangeDisplyView addSubview:topbar];
    [qtyChangeDisplyView addSubview:availQty];
    [qtyChangeDisplyView addSubview:unitPrice];
    [qtyChangeDisplyView addSubview:availQtyData];
    [qtyChangeDisplyView addSubview:unitPriceData];
    [qtyChangeDisplyView addSubview:qtyFeild];
    [qtyChangeDisplyView addSubview:okButton];
    [qtyChangeDisplyView addSubview:qtyCancelButton];
    
    returnTagId = sender.tag;
    
}

- (IBAction)okEditPricePressed:(id)sender {
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    [newPriceField resignFirstResponder];
    
    BOOL shouldCallOffers = YES;
    
    NSString *value = [newPriceField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    if(value.intValue == 0 || value.length == 0){
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Valid Price." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
        newPriceField.text = nil;
    }
    else {
        [editPricePopOver dismissPopoverAnimated:YES];
        @try {
            NSUInteger positionCount = [tempArrayItems indexOfObject:cartTotalItems[[sender tag]]];
            
            NSDictionary *temp = tempArrayItems[positionCount];
            NSMutableDictionary *itemDetailsDic = [NSMutableDictionary new];
            [itemDetailsDic setValue:[temp valueForKey:SKU_ID] forKey:SKU_ID];
            [itemDetailsDic setValue:[temp valueForKey:ITEM_NAME] forKey:ITEM_NAME];
            [itemDetailsDic setValue:[temp valueForKey:QUANTITY] forKey:QUANTITY];
            [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:ITEMUNITPRICE] floatValue]] forKey:ITEMUNITPRICE];
            [itemDetailsDic setValue:[NSString stringWithFormat:@"%.2f",([[temp valueForKey:ITEMUNITPRICE] floatValue] * [[temp valueForKey:QUANTITY] intValue])] forKey:ITEM_TOTAL_PRICE];
            [itemDetailsDic setValue:[temp valueForKey:TAX_CODE] forKey:TAX_CODE];
            [itemDetailsDic setValue:[temp valueForKey:TAX_RATE] forKey:TAX_RATE];
            [itemDetailsDic setValue:[temp valueForKey:AVAIL_QTY] forKey:AVAIL_QTY];
            [itemDetailsDic setValue:[temp valueForKey:PLU_CODE] forKey:PLU_CODE];
            [itemDetailsDic setValue:newPriceField.text forKey:EDITED_PRICE];
            [itemDetailsDic setValue:[temp valueForKey:MRP_Price] forKey:MRP_Price];
            [itemDetailsDic setValue:[temp valueForKey:ITEM_DISCOUNT] forKey:ITEM_DISCOUNT];
            [itemDetailsDic setValue:@([[temp valueForKey:ITEM_OFFER_PRICE] floatValue]) forKey:ITEM_OFFER_PRICE];
            [itemDetailsDic setValue:@([[temp valueForKey:ITEM_DEAL_PRICE] floatValue]) forKey:ITEM_DEAL_PRICE];
            
            
            tempArrayItems[positionCount] = itemDetailsDic;
            cartTotalItems[[sender tag]] = itemDetailsDic;
            
            
            [selectedSaleIdTable reloadData];
            
            [HUD setHidden:YES];
            
            [self updateValues];
            [self updateItemScanTime];
            
        }
        @catch (NSException *exception) {
            NSLog(@"%@",exception.name);
        }
        @finally {
        }
    }
}


- (void)okButtonPressed:(id)sender {
    
    //Play Audio for button touch....
    //AudioServicesPlaySystemSound (soundFileObject);
    
    itemTable.userInteractionEnabled = TRUE;
    NSString *value = [qtyFeild.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    [qtyFeild resignFirstResponder];
    
    
    
    // PhoNumber validation...
    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
    BOOL isNumber = [decimalTest evaluateWithObject:qtyFeild.text];
    
    //changed by Srinivasulu on 21/04/2017....
    //qty type form int to float
    float qty = value.floatValue;
    
    
    @try {
        //filteredSkuArrayList
        NSMutableDictionary * temp3 = tempReturnItems[returnTagId];
        
        //changed by Srinivasulu on 21/04/2017.....
        //quantity comparision is not proper not considering the returned quantity && exchnaged quantity....
        float returnqty = 0;
        float exchQty = 0;
        
        for (int i=0; i<tempReturnDetails.count; i++) {
            
            NSMutableDictionary * temp = tempReturnDetails[i];
            
            
            if ([[temp valueForKey:PLU_CODE] isEqualToString:[temp3 valueForKey:PLU_CODE]]) {
                
                returnqty = returnqty + [[temp valueForKey:QUANTITY] floatValue];
            }
            
            
        }
        for (int i=0; i<tempExchangeDetails.count; i++) {
            
            NSMutableDictionary * temp1 = tempExchangeDetails[i];
            
            if ([[temp1 valueForKey:PLU_CODE] isEqualToString:[temp3 valueForKey:PLU_CODE]]) {
                
                exchQty = exchQty + [[temp1 valueForKey:QUANTITY] floatValue];
            }
            
        }
        
        
        //        if (qty > [[temp3 valueForKey:QUANTITY] floatValue]){
        if (qty > ( [[temp3 valueForKey:QUANTITY] floatValue]  - (returnqty + exchQty))){
            
            //upto here on 21/04/2017.....
            
            //changed by Srinivasulu on 17/04/2017....
            
            
            //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Quantity Should be Less than or Equal to  Available Quantity" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"alert", nil) message:NSLocalizedString(@"quantity_should_be_less_than_or_equal_to_billed_quantity", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
            
            
            
            
            //upto here on 17/04/2017....
            
            [alert show];
            
            qtyFeild.text = nil;
        }
        else if(value.length == 0 || !isNumber){
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Valid Quantity." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
            qtyFeild.text = NO;
        }
        
        //added by Srinivasulu on 15/06/2017....
        //        else if((![returnReasonTxt.text length]) &&  (![returnReasonsArr count] && returnReasonsArr != nil)){
        
        else if(!(returnReasonTxt.text).length){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_select_the_reason_for_returning_the_item", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
        }
        
        
        //upto here on 15/06/2017....
        else if((qtyFeild.text).floatValue == 0){
            //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Valid Quantity." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            //        [alert show];
            //        [alert release];
            //
            //        qtyFeild.text = nil;
            
            [temp3 setValue:qtyFeild.text forKey:RETURN_QUANTITY];
            
            //added by Srinivasulu on 15/06/2017....
            
            [temp3 setValue:returnReasonTxt.text forKey:REASON];
            
            //upto here on 15/06/2017....
            
            tempReturnItems[returnTagId] = temp3;
            
            float returningBill = 0.0;
            
            for (int i = 0; i < tempReturnItems.count; i++) {
                NSDictionary *temp = tempReturnItems[i];
                if ([[temp valueForKey:RETURN_QUANTITY]floatValue] > 0) {
                    
                    //added by Srinivasulu on 31/07/2017....
                    if (([temp.allKeys containsObject:BILLED_ITEM_UNIT_PRICE] && ![temp[BILLED_ITEM_UNIT_PRICE] isKindOfClass:[NSNull class]])) {
                        
                        returningBill = returningBill + ([[temp valueForKey:BILLED_ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                    }
                    else
                        
                        //upto here on 31/07/2017....
                        returningBill = returningBill + ([[temp valueForKey:ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                }
                
            }
            returningTotalBillValue.text = [NSString stringWithFormat:@"%.2f",returningBill-(discountValue.text).floatValue];
            
            qtyChangeDisplyView.hidden = YES;
            
            [itemTable reloadData];
            
        }
        else{
            
            [temp3 setValue:qtyFeild.text forKey:RETURN_QUANTITY];
            
            //added by Srinivasulu on 15/06/2017....
            
            [temp3 setValue:returnReasonTxt.text forKey:REASON];
            
            //upto here on 15/06/2017....
            
            tempReturnItems[returnTagId] = temp3;
            
            float returningBill = 0.0;
            
            for (int i = 0; i < tempReturnItems.count; i++) {
                NSDictionary *temp = tempReturnItems[i];
                if ([[temp valueForKey:RETURN_QUANTITY]floatValue] > 0) {
                    
                    //added by Srinivasulu on 31/07/2017....
                    if (([temp.allKeys containsObject:BILLED_ITEM_UNIT_PRICE] && ![temp[BILLED_ITEM_UNIT_PRICE] isKindOfClass:[NSNull class]])) {
                        
                        returningBill = returningBill + ([[temp valueForKey:BILLED_ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                    }
                    else
                        
                        //upto here on 31/07/2017....
                        returningBill = returningBill + ([[temp valueForKey:ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                }
                
            }
            //            returningTotalBillValue.text = [NSString stringWithFormat:@"%.1f",returningBill-[discountValue.text floatValue]];
            returningTotalBillValue.text = [NSString stringWithFormat:@"%.2f",returningBill];
            
            qtyChangeDisplyView.hidden = YES;
            
            [itemTable reloadData];
            //    }
            
        }
    }
    @catch (NSException *exception) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Failed to update the quantity" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
        
    }
    
    
    
}
- (void)okButtonPressedExchg:(id)sender {
    
    //Play Audio for button touch....
    //AudioServicesPlaySystemSound (soundFileObject);
    
    itemTable.userInteractionEnabled = TRUE;
    itemTableExchg.userInteractionEnabled = TRUE;
    [qtyFeild resignFirstResponder];
    
    
    
    NSString *value = [qtyFeild.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    // PhoNumber validation...
    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
    BOOL isNumber = [decimalTest evaluateWithObject:qtyFeild.text];
    
    //changed by Srinivasulu on 21/04/2017....
    //qty type form int to float
    float qty = value.floatValue;
    
    
    @try {
        
        NSMutableDictionary *temp3 = tempExchangeItems[returnTagId];
        
        
        //changed by Srinivasulu on 21/04/2017.....
        //quantity comparision is not proper not considering the returned quantity && exchnaged quantity....
        float returnqty = 0;
        float exchQty = 0;
        
        for (int i=0; i<tempReturnDetails.count; i++) {
            
            NSMutableDictionary * temp = tempReturnDetails[i];
            
            
            if ([[temp valueForKey:PLU_CODE] isEqualToString:[temp3 valueForKey:PLU_CODE]]) {
                returnqty = returnqty + [[temp valueForKey:QUANTITY] floatValue];
            }
            
            
        }
        for (int i=0; i<tempExchangeDetails.count; i++) {
            
            NSMutableDictionary * temp1 = tempExchangeDetails[i];
            
            if ([[temp1 valueForKey:PLU_CODE] isEqualToString:[temp3 valueForKey:PLU_CODE]]) {
                
                exchQty = exchQty + [[temp1 valueForKey:QUANTITY] floatValue];
            }
            
        }
        
        
        
        
        //        if (qty > [[temp3 valueForKey:QUANTITY] floatValue]){
        if (qty > ( [[temp3 valueForKey:QUANTITY] floatValue]  - (returnqty + exchQty))){
            
            
            
            //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Quantity Should be Less than or Equal to  Available Quantity" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"alert", nil) message:NSLocalizedString(@"quantity_should_be_less_than_or_equal_to_billed_quantity", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
            [alert show];
            
            
            //upto here on 21/04/2017.....
            
            
            qtyFeild.text = nil;
        }
        else if(value.length == 0 || !isNumber){
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Valid Quantity." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
            qtyFeild.text = NO;
        }
        //added by Srinivasulu on 15/06/2017....
        
        else if(!(returnReasonTxt.text).length){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_select_the_reason_for_exchanging_the_item", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
        }
        
        
        //upto here on 15/06/2017....
        else if((qtyFeild.text).floatValue == 0){
            
            [temp3 setValue:qtyFeild.text forKey:RETURN_QUANTITY];
            
            //added by Srinivasulu on 15/06/2017....
            
            [temp3 setValue:returnReasonTxt.text forKey:REASON];
            
            //upto here on 15/06/2017....
            
            tempExchangeItems[returnTagId] = temp3;
            
            float returningBill = 0.0;
            
            for (int i = 0; i < tempExchangeItems.count; i++) {
                NSDictionary *temp = tempExchangeItems[i];
                if ([[temp valueForKey:RETURN_QUANTITY]floatValue] > 0) {
                    
                    
                    //added by Srinivasulu on 31/07/2017....
                    if (([temp.allKeys containsObject:BILLED_ITEM_UNIT_PRICE] && ![temp[BILLED_ITEM_UNIT_PRICE] isKindOfClass:[NSNull class]])) {
                        
                        returningBill = returningBill + ([[temp valueForKey:BILLED_ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                    }
                    else
                        
                        //upto here on 31/07/2017....
                        returningBill = returningBill + ([[temp valueForKey:ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                }
                
            }
            //            exchangeTotalBillValue.text = [NSString stringWithFormat:@"%.2f",returningBill-[discountValue.text floatValue]];
            exchangeTotalBillValue.text = [NSString stringWithFormat:@"%.2f",returningBill];
            
            qtyChangeDisplyView.hidden = YES;
            
            [itemTableExchg reloadData];
            
        }
        else{
            
            [temp3 setValue:qtyFeild.text forKey:RETURN_QUANTITY];
            
            //added by Srinivasulu on 15/06/2017....
            
            [temp3 setValue:returnReasonTxt.text forKey:REASON];
            
            //upto here on 15/06/2017....
            
            tempExchangeItems[returnTagId] = temp3;
            
            float returningBill = 0.0;
            
            for (int i = 0; i < tempExchangeItems.count; i++) {
                NSDictionary *temp = tempExchangeItems[i];
                if ([[temp valueForKey:RETURN_QUANTITY]floatValue] > 0) {
                    
                    //added by Srinivasulu on 31/07/2017....
                    if (([temp.allKeys containsObject:BILLED_ITEM_UNIT_PRICE] && ![temp[BILLED_ITEM_UNIT_PRICE] isKindOfClass:[NSNull class]])) {
                        
                        returningBill = returningBill + ([[temp valueForKey:BILLED_ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                    }
                    else
                        
                        //upto here on 31/07/2017....
                        returningBill = returningBill + ([[temp valueForKey:ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                }
                
            }
            //            exchangeTotalBillValue.text = [NSString stringWithFormat:@"%.1f",returningBill-[discountValue.text floatValue]];
            exchangeTotalBillValue.text = [NSString stringWithFormat:@"%.2f",returningBill];
            
            qtyChangeDisplyView.hidden = YES;
            
            [itemTableExchg reloadData];
            //    }
            
        }
    }
    @catch (NSException *exception) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Failed to update the quantity" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
        
    }
    
    
    
}
- (void)QtyCancelButtonPressed:(id)sender {
    
    
    //Play Audio for button touch....
    //AudioServicesPlaySystemSound (soundFileObject);
    
    qtyChangeDisplyView.hidden = YES;
    itemTable.userInteractionEnabled = TRUE;
    itemTableExchg.userInteractionEnabled = TRUE;
    
}
-(BOOL)textViewShouldBeginEditing:(UITextView *)textView{
    
    
    
    return YES;
}
-(BOOL)textViewShouldEndEditing:(UITextView *)textView {
    
    
    return YES;
}

-(void)addReturnItems{
    
    @try {
        
        BOOL allowReturn = true;
        
        if(isOfflineService && [syncStatusStr isEqualToString:SUCCESS])
            allowReturn = false;
        
        else if(isOfflineService && [syncStatusStr isEqualToString:ERROR])
            allowReturn = false;
        //added by Srinivasulu on 09/08/2017....
        
        if(!allowReturn){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"this_bill_already_upload_to_cloud", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            return;
        }
        
        //upto here on 09/08/2017....
        
        
        selectedItems = [[NSMutableArray alloc]init];
        
        for (int i = 0; i < tempReturnItems.count; i++) {
            NSMutableDictionary *temp = tempReturnItems[i];
            if ([[temp valueForKey:RETURN_QUANTITY]floatValue] > 0) {
                [temp setValue:[NSString stringWithFormat:@"%.2f",([[temp valueForKey:ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue])] forKey:ITEM_TOTAL_PRICE];
                [selectedItems addObject:temp];
            }
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    
    //added by Srinivasulu on 20/11/2017....
    
    if((returningTotalBillValue.text.floatValue <= 0)  && !selectedItems.count){
        
        float y_axis = self.view.frame.size.height - 350;
        
        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_select_at_least_one_item_to_return", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
        
        return;
    }
    if(submitButton != nil)
        submitButton.userInteractionEnabled = NO;
    
    //upto here on 20/11/2017....
    
    
    
    if (isOfflineService) {
        
        //need to be changed....
        [self populateReturnDenominationViewDynamically];
        
    }
    else {
        
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        NSMutableArray * tempPaymentOptionsArr = [NSMutableArray new];
        
        if ( ! ([[defaults valueForKey:DENOMNINATION_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:DENOMNINATION_OPTIONS] == nil)) {
            
            for(NSDictionary * payDic in [defaults valueForKey:DENOMNINATION_OPTIONS])
                if(![[self checkGivenValueIsNullOrNil:[payDic valueForKey:ALLOW_OTHER_RETURN_TENDER] defaultReturn:@"0"] integerValue])
                    [tempPaymentOptionsArr addObject:payDic];
        }
        
        if ( ! ([[defaults valueForKey:COUPON_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:COUPON_OPTIONS] == nil)) {
            
            for(NSDictionary * payDic in [defaults valueForKey:COUPON_OPTIONS])
                if(![[self checkGivenValueIsNullOrNil:[payDic valueForKey:ALLOW_OTHER_RETURN_TENDER] defaultReturn:@"0"] integerValue])
                    [tempPaymentOptionsArr addObject:payDic];
        }
        
        if ( ! ([[defaults valueForKey:CARD_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:CARD_OPTIONS] == nil)) {
            
            for(NSDictionary * payDic in [defaults valueForKey:CARD_OPTIONS])
                if(![[self checkGivenValueIsNullOrNil:[payDic valueForKey:ALLOW_OTHER_RETURN_TENDER] defaultReturn:@"0"] integerValue])
                    [tempPaymentOptionsArr addObject:payDic];
        }
        
        NSString * payStr = [tempPaymentDetails[0] valueForKey:MODE_OF_PAY];
        
        NSPredicate *predicate1 = [NSPredicate predicateWithFormat: @"tenderName CONTAINS[cd] %@", payStr];
        NSArray * arrData  = [tempPaymentOptionsArr filteredArrayUsingPredicate:predicate1];
        if(arrData.count == 0 || arrData == nil){
            
            predicate1 = [NSPredicate predicateWithFormat: @"modeOfPayment CONTAINS[cd] %@", payStr];
            arrData  = [tempPaymentOptionsArr filteredArrayUsingPredicate:predicate1];
        }
        
        NSDictionary * dictionary;
        defaultReturnTypeStr = @"";
        
        if( arrData.count > 0) {
            
            dictionary = arrData[0];
            
            if( [[dictionary valueForKey:MODE_OF_PAY] caseInsensitiveCompare:@"cash"] == NSOrderedSame)
                defaultReturnTypeStr = [self checkGivenValueIsNullOrNil:[dictionary valueForKey:MODE_OF_PAY] defaultReturn:@""];
            else
                defaultReturnTypeStr = [self checkGivenValueIsNullOrNil:[dictionary valueForKey:TENDER_NAME] defaultReturn:@""];
            
        }
        
        
        
        
        
        //        [defaults setObject:denominationOptionArr forKey:DENOMNINATION_OPTIONS];
        //        [defaults setObject:couponOptionsArr forKey:COUPON_OPTIONS];
        //        [defaults setObject:cardOptionsArr forKey:CARD_OPTIONS];
        
        //tempPaymentDetails
        
        
        if (([returnMode caseInsensitiveCompare:@"cash"] == NSOrderedSame) || ([defaultReturnTypeStr caseInsensitiveCompare:@"cash"] == NSOrderedSame)) {
            
            
            //added by Srinivasulu on 17/04/2017....
            
            //                offline = [[OfflineBillingServices alloc] init];
            //
            //                if([[offline getDenominationDetails] count]){
            [self populateReturnDenominationViewDynamically];
            
            
            //                }
            //                else{
            //
            //
            //
            //                }
            
            
            //upto here on 17/04/2017.....
            
            
        }
        
        else {
            UIAlertView * confirmationAlertView  = [[UIAlertView alloc] init];
            
            confirmationAlertView.delegate = self;
            
            [confirmationAlertView setTitle:NSLocalizedString(@"do_you_want_to_return_the_selected_items_?", nil)];
            
            [confirmationAlertView addButtonWithTitle:NSLocalizedString(@"yes", nil)];
            
            [confirmationAlertView addButtonWithTitle:NSLocalizedString(@"no", nil)];
            
            [confirmationAlertView show];
            
            confirmationAlertView.hidden = NO;
            
        }
    }
}
-(void)addExchangeItems{
    
    @try {
        
        BOOL allowReturn = true;
        
        if(isOfflineService && [syncStatusStr isEqualToString:SUCCESS])
            allowReturn = false;
        
        else if(isOfflineService && [syncStatusStr isEqualToString:ERROR])
            allowReturn = false;
        //added by Srinivasulu on 09/08/2017....
        
        if(!allowReturn){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"this_bill_already_upload_to_cloud", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            return;
        }
        
        //upto here on 09/08/2017....
        
        
        
        for (int i = 0; i < tempExchangeItems.count; i++) {
            NSDictionary *temp = tempExchangeItems[i];
            if ([[temp valueForKey:RETURN_QUANTITY]floatValue] > 0) {
                [selectedItems addObject:temp];
            }
        }
        
        
        if((exchangeTotalBillValue.text.floatValue <= 0)  && !selectedItems.count){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_select_at_least_one_item_to_exchange", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            return;
        }
        
        
        UIAlertView *confirmationAlertView  = [[UIAlertView alloc] init];
        confirmationAlertView.delegate = self;
        [confirmationAlertView setTitle:NSLocalizedString(@"do_you_want_to_exchange_the_selected_items_?", nil)];
        [confirmationAlertView addButtonWithTitle:NSLocalizedString(@"yes", nil)];
        [confirmationAlertView addButtonWithTitle:NSLocalizedString(@"no", nil)];
        [confirmationAlertView show];
        confirmationAlertView.hidden = NO;
        
        
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

-(void)couponsView {
    
    //    paymentTransactionArray = [NSMutableArray new];
    
    couponType = [[UITableView alloc] init];
    //giftTypeTableView.backgroundColor = [UIColor whiteColor];
    couponType.dataSource = self;
    couponType.delegate = self;
    couponType.bounces = FALSE;
    couponType.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
    couponType.layer.cornerRadius = 3.0f;
    (couponType.layer).borderWidth = 1.0f;
    
    valueTable = [[UITableView alloc] init];
    valueTable.dataSource = self;
    valueTable.delegate = self;
    valueTable.bounces = FALSE;
    valueTable.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
    valueTable.layer.cornerRadius = 3.0f;
    (valueTable.layer).borderWidth = 1.0f;
    
    selectCouponType = [[UITextField alloc] init];
    selectCouponType.borderStyle = UITextBorderStyleRoundedRect;
    selectCouponType.textColor = [UIColor blackColor];
    selectCouponType.font = [UIFont systemFontOfSize:18.0];
    selectCouponType.backgroundColor = [UIColor whiteColor];
    selectCouponType.text = @"Sodexo Coupon";
    selectCouponType.userInteractionEnabled = NO;
    selectCouponType.autocapitalizationType = UITextAutocapitalizationTypeNone;
    selectCouponType.autocorrectionType = UITextAutocorrectionTypeNo;
    selectCouponType.keyboardType = UIKeyboardTypeAlphabet;
    selectCouponType.delegate = self;
    
    UILabel *coupType = [[UILabel alloc] init];
    coupType.text = @"Type ";
    coupType.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    coupType.backgroundColor = [UIColor clearColor];
    coupType.textColor = [UIColor whiteColor];
    
    giftTypeBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
    UIImage *buttonImageDD1 = [UIImage imageNamed:@"combo.png"];
    [giftTypeBtn setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
    giftTypeBtn.tag = 5;
    [giftTypeBtn addTarget:self
                    action:@selector(giftContinue:) forControlEvents:UIControlEventTouchDown];
    giftTypeBtn.titleLabel.textColor = [UIColor blackColor];
    
    valueBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
    UIImage *buttonImageDD = [UIImage imageNamed:@"combo.png"];
    [valueBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
    valueBtn.tag = 5;
    [valueBtn addTarget:self
                 action:@selector(selectValue:) forControlEvents:UIControlEventTouchDown];
    valueBtn.titleLabel.textColor = [UIColor blackColor];
    valueBtn.tag = 0;
    
    
    
    couponId = [[UITextField alloc] init];
    couponId.borderStyle = UITextBorderStyleRoundedRect;
    couponId.textColor = [UIColor blackColor];
    couponId.font = [UIFont systemFontOfSize:18.0];
    couponId.backgroundColor = [UIColor whiteColor];
    couponId.text = @"";
    couponId.autocapitalizationType = UITextAutocapitalizationTypeNone;
    couponId.autocorrectionType = UITextAutocorrectionTypeNo;
    couponId.keyboardType = UIKeyboardTypeAlphabet;
    couponId.placeholder = @"Coupon Id";
    couponId.delegate = self;
    
    couponValue = [[UITextField alloc] init];
    couponValue.borderStyle = UITextBorderStyleRoundedRect;
    couponValue.layer.borderColor = [UIColor whiteColor].CGColor;
    couponValue.textColor = [UIColor blackColor];
    couponValue.font = [UIFont systemFontOfSize:18.0];
    couponValue.backgroundColor = [UIColor whiteColor];
    couponValue.text = @"";
    couponValue.autocapitalizationType = UITextAutocapitalizationTypeNone;
    couponValue.autocorrectionType = UITextAutocorrectionTypeNo;
    couponValue.keyboardType = UIKeyboardTypeNumberPad;
    couponValue.placeholder = @"Value";
    couponValue.delegate = self;
    //    couponValue.userInteractionEnabled = NO;
    
    couponQty = [[UITextField alloc] init];
    couponQty.borderStyle = UITextBorderStyleRoundedRect;
    couponQty.layer.borderColor = [UIColor whiteColor].CGColor;
    couponQty.textColor = [UIColor blackColor];
    couponQty.font = [UIFont systemFontOfSize:18.0];
    couponQty.backgroundColor = [UIColor whiteColor];
    couponQty.text = @"";
    couponQty.autocapitalizationType = UITextAutocapitalizationTypeNone;
    couponQty.autocorrectionType = UITextAutocorrectionTypeNo;
    couponQty.keyboardType = UIKeyboardTypeNumberPad;
    couponQty.placeholder = @"Qty";
    couponQty.delegate = self;
    
    UIButton *okBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [okBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
    okBtn.tag = 6;
    [okBtn setTitle:@"OK"    forState:UIControlStateNormal];
    okBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    okBtn.titleLabel.textColor = [UIColor whiteColor];
    okBtn.backgroundColor = [UIColor grayColor];
    okBtn.titleLabel.font = [UIFont systemFontOfSize:20];
    okBtn.layer.cornerRadius = 10.0f;
    
    
    UILabel *qty = [[UILabel alloc] init];
    qty.layer.cornerRadius = 14;
    qty.textAlignment = NSTextAlignmentCenter;
    qty.layer.masksToBounds = YES;
    qty.font = [UIFont boldSystemFontOfSize:14.0];
    qty.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    qty.textColor = [UIColor whiteColor];
    qty.text = @"Qty";
    
    UILabel *c_total = [[UILabel alloc] init];
    c_total.layer.cornerRadius = 14;
    c_total.textAlignment = NSTextAlignmentCenter;
    c_total.layer.masksToBounds = YES;
    c_total.font = [UIFont boldSystemFontOfSize:14.0];
    c_total.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    c_total.textColor = [UIColor whiteColor];
    c_total.text = @"Total";
    
    
    UILabel *Type = [[UILabel alloc] init];
    Type.layer.cornerRadius = 12;
    Type.textAlignment = NSTextAlignmentCenter;
    Type.layer.masksToBounds = YES;
    Type.font = [UIFont boldSystemFontOfSize:14.0];
    Type.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    Type.textColor = [UIColor whiteColor];
    Type.text = @"Type";
    
    UILabel *ID = [[UILabel alloc] init];
    ID.layer.cornerRadius = 14;
    ID.textAlignment = NSTextAlignmentCenter;
    ID.layer.masksToBounds = YES;
    ID.font = [UIFont boldSystemFontOfSize:14.0];
    ID.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    ID.textColor = [UIColor whiteColor];
    ID.text = @"ID";
    
    UILabel *value = [[UILabel alloc] init];
    value.layer.cornerRadius = 14;
    value.textAlignment = NSTextAlignmentCenter;
    value.layer.masksToBounds = YES;
    value.font = [UIFont boldSystemFontOfSize:14.0];
    value.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    value.textColor = [UIColor whiteColor];
    value.text = @"Value";
    
    UILabel *total_value = [[UILabel alloc] init];
    total_value.layer.cornerRadius = 14;
    //  [total_value setTextAlignment:NSTextAlignmentCenter];
    total_value.layer.masksToBounds = YES;
    total_value.font = [UIFont boldSystemFontOfSize:14.0];
    total_value.backgroundColor = [UIColor clearColor];
    total_value.textColor = [UIColor whiteColor];
    total_value.text = @"Total Value";
    
    UILabel *total = [[UILabel alloc] init];
    total.layer.cornerRadius = 14;
    // [total setTextAlignment:NSTextAlignmentCenter];
    total.layer.masksToBounds = YES;
    total.font = [UIFont boldSystemFontOfSize:14.0];
    total.backgroundColor = [UIColor clearColor];
    total.textColor = [UIColor whiteColor];
    total.text = @"Total Bill";
    
    UILabel *bill_due= [[UILabel alloc] init];
    bill_due.layer.cornerRadius = 14;
    // [bill_due setTextAlignment:NSTextAlignmentCenter];
    bill_due.layer.masksToBounds = YES;
    bill_due.font = [UIFont boldSystemFontOfSize:14.0];
    bill_due.backgroundColor = [UIColor clearColor];
    bill_due.textColor = [UIColor whiteColor];
    bill_due.text = @"Bill Due";
    
    totalCoupValue = [[UILabel alloc] init];
    totalCoupValue.layer.cornerRadius = 14;
    //[totalCoupValue setTextAlignment:UITextAlignmentRight];
    totalCoupValue.layer.masksToBounds = YES;
    totalCoupValue.font = [UIFont boldSystemFontOfSize:14.0];
    totalCoupValue.backgroundColor = [UIColor clearColor];
    totalCoupValue.textColor = [UIColor whiteColor];
    totalCoupValue.text = @"0.00";
    
    totalCoupBill = [[UILabel alloc] init];
    totalCoupBill.layer.cornerRadius = 14;
    //  [totalBill setTextAlignment:UITextAlignmentRight];
    totalCoupBill.layer.masksToBounds = YES;
    totalCoupBill.font = [UIFont boldSystemFontOfSize:14.0];
    totalCoupBill.backgroundColor = [UIColor clearColor];
    totalCoupBill.textColor = [UIColor whiteColor];
    totalCoupBill.text = billDueValue.text;
    
    billDueLbl = [[UILabel alloc] init];
    billDueLbl.layer.cornerRadius = 14;
    //  [billDueLbl setTextAlignment:UITextAlignmentRight];
    billDueLbl.layer.masksToBounds = YES;
    billDueLbl.font = [UIFont boldSystemFontOfSize:14.0];
    billDueLbl.backgroundColor = [UIColor clearColor];
    billDueLbl.textColor = [UIColor whiteColor];
    billDueLbl.text = billDueValue.text;
    
    if (couponArr.count!=0) {
        
        float total_val = 0.00f;
        for (int i=0; i<couponArr.count; i++) {
            
            total_val = total_val + ([couponArr[i] componentsSeparatedByString:@"#"][3].intValue * [couponArr[i] componentsSeparatedByString:@"#"][2].floatValue);
        }
        
        totalCoupValue.text = [NSString stringWithFormat:@"%.2f",total_val];
        
    }
    
    UIScrollView  *uiscroll_gift_view = [[UIScrollView alloc] init];
    uiscroll_gift_view.hidden = NO;
    uiscroll_gift_view.backgroundColor = [UIColor clearColor];
    uiscroll_gift_view.bounces = FALSE;
    uiscroll_gift_view.scrollEnabled = YES;
    
    
    couponDeatails = [[UITableView alloc] init];
    couponDeatails.separatorColor = [UIColor clearColor];
    couponDeatails.dataSource = self;
    couponDeatails.delegate = self;
    couponDeatails.backgroundColor = [UIColor clearColor];
    couponDeatails.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
    
    phnotext = [[UITextField alloc] init];
    
    phnotext.borderStyle = UITextBorderStyleRoundedRect;
    phnotext.autocorrectionType = UITextAutocorrectionTypeNo;
    phnotext.keyboardType = UIKeyboardTypeNumberPad;
    phnotext.returnKeyType = UIReturnKeyDone;
    phnotext.clearButtonMode = UITextFieldViewModeWhileEditing;
    phnotext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    [phnotext addTarget:self action:@selector(textFieldDidEndEditing:) forControlEvents:UIControlEventEditingChanged];
    //    phnotext.delegate = self;
    // phnotext.tag = 111;
    phnotext.placeholder = @"Phone Number";
    
    phonelbl = [[UILabel alloc] init];
    
    phonelbl.text= @"Phone";
    phonelbl.textColor = [UIColor whiteColor];
    phonelbl.backgroundColor = [UIColor clearColor];
    
    emaillbl = [[UILabel alloc] init];
    
    emaillbl.text= @"Email";
    emaillbl.textColor = [UIColor whiteColor];
    emaillbl.backgroundColor = [UIColor clearColor];
    
    namelbl = [[UILabel alloc] init];
    
    namelbl.text= @"Name ";
    namelbl.textColor = [UIColor whiteColor];
    namelbl.backgroundColor = [UIColor clearColor];
    
    emailtext = [[UITextField alloc] init];
    
    emailtext.borderStyle = UITextBorderStyleRoundedRect;
    emailtext.autocorrectionType = UITextAutocorrectionTypeNo;
    emailtext.keyboardType = UIKeyboardTypeEmailAddress;
    emailtext.returnKeyType = UIReturnKeyDone;
    emailtext.clearButtonMode = UITextFieldViewModeWhileEditing;
    emailtext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    emailtext.delegate = self;
    emailtext.autocapitalizationType = UITextAutocapitalizationTypeNone;
    emailtext.placeholder = @"Customer Mail ID";
    
    nametext = [[UITextField alloc] init];
    
    nametext.borderStyle = UITextBorderStyleRoundedRect;
    nametext.autocorrectionType = UITextAutocorrectionTypeNo;
    nametext.keyboardType = UIKeyboardTypeDefault;
    nametext.returnKeyType = UIReturnKeyDone;
    nametext.clearButtonMode = UITextFieldViewModeWhileEditing;
    nametext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    nametext.placeholder = @"Customer Name";
    nametext.delegate = self;
    
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight){
            
            selectCouponType.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            selectCouponType.frame = CGRectMake(15, 80, 250, 55);
            couponType.frame = CGRectMake(15, 120, 260, 130);
            giftTypeBtn.frame = CGRectMake(230, 73,50 , 75);
            couponId.frame = CGRectMake(10, 160, 210, 55);
            couponId.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            couponValue.frame = CGRectMake(250, 160, 160, 55);
            couponValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            valueBtn.frame = CGRectMake(390, 152,50 , 75);
            valueTable.frame = CGRectMake(250, 215, 150, 200);
            couponQty.frame = CGRectMake(470, 160, 160, 55);
            couponQty.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            okBtn.frame = CGRectMake(650, 165, 65, 50);
            
            
            Type .font = [UIFont boldSystemFontOfSize:20];
            Type.frame = CGRectMake(5, 230, 150, 45);
            ID .font = [UIFont boldSystemFontOfSize:20];
            ID.frame = CGRectMake(160, 230, 160, 45);
            value.font = [UIFont boldSystemFontOfSize:20];
            value.frame = CGRectMake(330, 230, 120, 45);
            qty.font = [UIFont boldSystemFontOfSize:20];
            qty.frame = CGRectMake(460, 230, 120, 45);
            c_total.font = [UIFont boldSystemFontOfSize:20];
            c_total.frame = CGRectMake(590, 230, 120, 45);
            
            uiscroll_gift_view.frame = CGRectMake(0, 290, 778, 200);
            uiscroll_gift_view.contentSize = CGSizeMake(778, 300);
            couponDeatails.frame = CGRectMake(10, 0, 780,200);
            
            phonelbl.font = [UIFont systemFontOfSize:25.0];
            phonelbl.frame = CGRectMake(10, 450, 160.0, 30);
            emaillbl.font = [UIFont systemFontOfSize:25.0];
            emaillbl.frame = CGRectMake(10, 480, 160.0, 30);
            namelbl.font = [UIFont systemFontOfSize:25.0];
            namelbl.frame = CGRectMake(10, 510, 160.0, 30);
            
            phnotext.frame = CGRectMake(400.0, 450, 300.0, 30);
            phnotext.font = [UIFont systemFontOfSize:25];
            emailtext.frame = CGRectMake(400, 480, 300.0, 30);
            emailtext.font = [UIFont systemFontOfSize:25.0];
            nametext.frame = CGRectMake(400.0,510, 300.0, 30);
            nametext.font = [UIFont systemFontOfSize:25];
            
            
            total.frame = CGRectMake(10, 450, 120, 30);
            total.font = [UIFont boldSystemFontOfSize:22];
            totalCoupBill.frame = CGRectMake(550, 450, 200, 30);
            totalCoupBill.font = [UIFont boldSystemFontOfSize:22];
            total_value.frame = CGRectMake(10, 500, 120, 30);
            total_value.font = [UIFont boldSystemFontOfSize:22];
            totalCoupValue.frame = CGRectMake(550, 500, 200, 30);
            totalCoupValue.font = [UIFont boldSystemFontOfSize:22];
            bill_due.frame = CGRectMake(10, 550, 120, 30);
            bill_due.font = [UIFont boldSystemFontOfSize:22];
            billDueLbl.frame = CGRectMake(550, 550, 200, 30);
            billDueLbl.font = [UIFont boldSystemFontOfSize:22];
            
            [couponView addSubview:total_value];
            [couponView addSubview:totalCoupValue];
            [couponView addSubview:total];
            [couponView addSubview:totalCoupBill];
            [couponView addSubview:bill_due];
            [couponView addSubview:billDueLbl];
            //            [couponView addSubview:phonelbl];
            //            [couponView addSubview:emaillbl];
            //            [couponView addSubview:namelbl];
            //            [couponView addSubview:phnotext];
            //            [couponView addSubview:emailtext];
            //            [couponView addSubview:nametext];
            
            
        }
        else {
            selectCouponType.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            selectCouponType.frame = CGRectMake(15, 80, 250, 55);
            couponType.frame = CGRectMake(15, 120, 260, 130);
            giftTypeBtn.frame = CGRectMake(230, 73,50 , 75);
            couponId.frame = CGRectMake(10, 160, 210, 55);
            couponId.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            couponValue.frame = CGRectMake(250, 160, 160, 55);
            couponValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            valueBtn.frame = CGRectMake(390, 152,50 , 75);
            valueTable.frame = CGRectMake(250, 215, 150, 200);
            couponQty.frame = CGRectMake(470, 160, 160, 55);
            couponQty.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            okBtn.frame = CGRectMake(670, 165, 65, 50);
            
            
            Type .font = [UIFont boldSystemFontOfSize:20];
            Type.frame = CGRectMake(5, 230, 150, 45);
            ID .font = [UIFont boldSystemFontOfSize:20];
            ID.frame = CGRectMake(160, 230, 150, 45);
            value.font = [UIFont boldSystemFontOfSize:20];
            value.frame = CGRectMake(315, 230, 150, 45);
            qty.font = [UIFont boldSystemFontOfSize:20];
            qty.frame = CGRectMake(475, 230, 120, 45);
            c_total.font = [UIFont boldSystemFontOfSize:20];
            c_total.frame = CGRectMake(605, 230, 120, 45);
            
            uiscroll_gift_view.frame = CGRectMake(0, 290, 778, 200);
            uiscroll_gift_view.contentSize = CGSizeMake(778, 300);
            couponDeatails.frame = CGRectMake(10, 0, 780,200);
            
            phonelbl.font = [UIFont systemFontOfSize:25.0];
            phonelbl.frame = CGRectMake(10, 510, 160.0, 45);
            emaillbl.font = [UIFont systemFontOfSize:25.0];
            emaillbl.frame = CGRectMake(10, 560, 160.0, 45);
            namelbl.font = [UIFont systemFontOfSize:25.0];
            namelbl.frame = CGRectMake(10, 610, 160.0, 45);
            
            phnotext.frame = CGRectMake(400.0, 510.0, 300.0, 40);
            phnotext.font = [UIFont systemFontOfSize:25];
            emailtext.frame = CGRectMake(400, 560.0, 300.0, 40);
            emailtext.font = [UIFont systemFontOfSize:25.0];
            nametext.frame = CGRectMake(400.0,610.0, 300.0, 40);
            nametext.font = [UIFont systemFontOfSize:25];
            
            
            total.frame = CGRectMake(10, 670, 120, 35);
            total.font = [UIFont boldSystemFontOfSize:22];
            totalCoupBill.frame = CGRectMake(550, 670, 200, 35);
            totalCoupBill.font = [UIFont boldSystemFontOfSize:22];
            total_value.frame = CGRectMake(10, 715, 120, 35);
            total_value.font = [UIFont boldSystemFontOfSize:22];
            totalCoupValue.frame = CGRectMake(550, 715, 200, 35);
            totalCoupValue.font = [UIFont boldSystemFontOfSize:22];
            bill_due.frame = CGRectMake(10, 760, 120, 35);
            bill_due.font = [UIFont boldSystemFontOfSize:22];
            billDueLbl.frame = CGRectMake(550, 760, 200, 35);
            billDueLbl.font = [UIFont boldSystemFontOfSize:22];
            
            [couponView addSubview:total_value];
            [couponView addSubview:totalCoupValue];
            [couponView addSubview:total];
            [couponView addSubview:totalCoupBill];
            [couponView addSubview:bill_due];
            [couponView addSubview:billDueLbl];
            //            [couponView addSubview:phonelbl];
            //            [couponView addSubview:emaillbl];
            //            [couponView addSubview:namelbl];
            //            [couponView addSubview:phnotext];
            //            [couponView addSubview:emailtext];
            //            [couponView addSubview:nametext];
            
        }
        
        
    }
    else {
        
        selectCouponType.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        selectCouponType.frame = CGRectMake(15, 43, 130, 30);
        couponType.frame = CGRectMake(15, 73, 130, 80);
        giftTypeBtn.frame = CGRectMake(143, 42,30 , 35);
        couponId.frame = CGRectMake(0, 75, 80, 30);
        couponId.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        couponId.placeholder = @"Id";
        couponValue.frame = CGRectMake(81, 75, 80, 30);
        couponValue.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        valueBtn.frame = CGRectMake(155, 72,30 , 35);
        valueTable.frame = CGRectMake(81, 105, 80, 100);
        couponQty.frame = CGRectMake(190, 75, 65, 30);
        couponQty.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        okBtn.frame = CGRectMake(265, 75, 35, 30);
        okBtn.titleLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        
        
        Type .font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        Type.frame = CGRectMake(5, 120, 50, 30);
        ID .font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        ID.frame = CGRectMake(56, 120, 50, 30);
        value.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        value.frame = CGRectMake(107, 120, 50, 30);
        qty.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        qty.frame = CGRectMake(158, 120, 50, 30);
        c_total.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        c_total.frame = CGRectMake(209, 120, 80, 30);
        
        uiscroll_gift_view.frame = CGRectMake(0, 152, 778, 160);
        uiscroll_gift_view.contentSize = CGSizeMake(778, 500);
        couponDeatails.frame = CGRectMake(10, 0, 780,120);
        
        phonelbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        phonelbl.frame = CGRectMake(10, 150, 50.0, 25);
        emaillbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        emaillbl.frame = CGRectMake(10, 180, 50.0, 25);
        namelbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        namelbl.frame = CGRectMake(10, 210, 50.0, 25);
        
        phnotext.frame = CGRectMake(120.0, 150, 150, 25);
        phnotext.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        emailtext.frame = CGRectMake(120, 180, 150, 25);
        emailtext.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        nametext.frame = CGRectMake(120,210, 150, 25);
        nametext.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        
        
        total.frame = CGRectMake(10, 300, 120, 25);
        total.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        totalCoupBill.frame = CGRectMake(120, 300, 120, 25);
        totalCoupBill.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        total_value.frame = CGRectMake(10, 330, 120, 25);
        total_value.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        totalCoupValue.frame = CGRectMake(120, 330, 120, 25);
        totalCoupValue.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        bill_due.frame = CGRectMake(10, 360, 120, 25);
        bill_due.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        billDueLbl.frame = CGRectMake(120, 360, 120, 25);
        billDueLbl.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        
        
        [couponView addSubview:total_value];
        [couponView addSubview:totalCoupValue];
        [couponView addSubview:total];
        [couponView addSubview:totalCoupBill];
        [couponView addSubview:bill_due];
        [couponView addSubview:billDueLbl];
        
    }
    
    
    [couponView addSubview:selectCouponType];
    [couponView addSubview:couponQty];
    //    [couponView addSubview:valueTable];
    [couponView addSubview:giftTypeBtn];
    [couponView addSubview:couponValue];
    [couponView addSubview:valueBtn];
    [couponView addSubview:couponId];
    [couponView addSubview:okBtn];
    [couponView addSubview:qty];
    [couponView addSubview:c_total];
    [couponView addSubview:Type];
    [couponView addSubview:ID];
    [couponView addSubview:value];
    [uiscroll_gift_view addSubview:couponDeatails];
    [couponView addSubview:uiscroll_gift_view];
    
}


-(BOOL)checkCouponId:(NSString *)coupon_Id {
    BOOL couponStatus = false;
    
    for (int i=0; i<couponIdArr.count; i++) {
        
        if ([couponIdArr[i] isEqualToString:coupon_Id]) {
            
            //            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Coupon already used" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //            [alert show];
            //            break;
            couponStatus = TRUE;
            break;
        }
        else{
            //couponStatus = FALSE;
        }
        
    }
    
    return couponStatus;
}


-(void)selectValue:(UIButton *)sender {
    
    [couponValue resignFirstResponder];
    [couponId resignFirstResponder];
    [couponQty resignFirstResponder];
    AudioServicesPlaySystemSound (soundFileObject);
    if (sender.tag == 0) {
        
        [couponView addSubview:valueTable];
        [couponView bringSubviewToFront:valueTable];
        [valueTable setHidden:FALSE];
        [valueTable reloadData];
        sender.tag = 1;
    }
    else {
        [valueTable setHidden:YES];
        sender.tag = 0;
    }
    
    
}
-(void)delCoupon:(UIButton *)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    @try {
        
        [couponArr removeObjectAtIndex:sender.tag];
        [couponValArr removeAllObjects];
        [couponTotalArr removeAllObjects];
        [couponIdArr removeAllObjects];
        [paymentTransactionArray removeObjectAtIndex:sender.tag];
        [couponDeatails reloadData];
        
        if (couponArr.count == 0) {
            totalCoupValue.text = @"0.00";
            billDueLbl.text = billDueValue.text;
        }
        else {
            float total_val = 0.00f;
            for (int i=0; i<couponArr.count; i++) {
                
                total_val = total_val + ([couponArr[i] componentsSeparatedByString:@"#"][3].intValue * [couponArr[i]componentsSeparatedByString:@"#"][2].floatValue);
            }
            totalCoupValue.text = [NSString stringWithFormat:@"%.2f",total_val];
            billDueLbl.text = [NSString stringWithFormat:@"%.2f",(billDueValue.text).floatValue-(totalCoupValue.text).floatValue];
            
            if ((billDueLbl.text).intValue < 0) {
                
                billDueLbl.text = @"0.00";
            }
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
}

-(void)backAction{
    
    if (([bill_status_val.text caseInsensitiveCompare:@"pending"] != NSOrderedSame)) {
        
        //commented & added by Srinivasulu on 26/03/2018....
        
        //        for (UIViewController *controller in self.navigationController.viewControllers) {
        //
        //            if ([controller isKindOfClass:[OmniHomePage class]]) {
        //
        //                [self.navigationController popToViewController:controller animated:NO];
        //            }
        //
        //        }
        
        OmniHomePage * home = [[OmniHomePage alloc]init];
        [self.navigationController pushViewController:home animated:NO];
        
        //upto here on 26/03/2018....
        
    }
    else {
        @try {
            
            //            if ([tempArrayItems count]==0) {
            //
            //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Add items to cart" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //                [alert show];
            //            }
            //            else {
            
            int presentItemQty = 0;
            for (NSDictionary *itemDic in tempArrayItems) {
                presentItemQty = presentItemQty + [[itemDic valueForKey:QUANTITY] intValue];
            }
            
            if ((presentItemQty-previousBillItemsCount) > 0) {
                
                
                saveAlert = [[UIAlertView alloc]initWithTitle:@"Do you want to save the updated bill?" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:@"Cancel", nil];
                [saveAlert show];
                
            }
            else if ((previousBillItemsCount-presentItemQty) > 0) {
                
                
                saveAlert = [[UIAlertView alloc]initWithTitle:@"Do you want to save the updated bill?" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:@"Cancel", nil];
                [saveAlert show];
                
            }
            else {
                OmniHomePage *home = [[OmniHomePage alloc]init];
                [self.navigationController pushViewController:home animated:NO];
            }
            //            }
            
            
            
        }
        @catch (NSException *exception) {
            
            OmniHomePage *home = [[OmniHomePage alloc]init];
            [self.navigationController pushViewController:home animated:NO];
            
            
        }
        
    }
}


-(void)addCustomerView:(NSString *)phone street:(NSString *)street locality:(NSString*)locality city:(NSString*)city pin:(NSString *)pin custName:(NSString*)custName {
    
    denomScrollView = [UIScrollView new];
    denomScrollView.backgroundColor = [UIColor clearColor];
    denomScrollView.bounces = NO;
    denomScrollView.scrollEnabled = NO;
    
    paymentView.backgroundColor = [UIColor blackColor];
    paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
    label = [[UILabel alloc] init] ;
    label.text = @"    Customet Details";
    label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
    label.textAlignment = NSTextAlignmentLeft;
    label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];;
    label.textColor = [UIColor blackColor];
    
    // close button to close the view ..
    backbutton = [[UIButton alloc] init] ;
    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    backbutton.tag = 11;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
    
    phnotext = [[UITextField alloc] init];
    
    phnotext.borderStyle = UITextBorderStyleNone;
    phnotext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    //    phnotext.delegate = self;
    // phnotext.tag = 111;
    phnotext.placeholder = @"Phone Number";
    phnotext.delegate = self;
    
    
    //added by Srinivasulu on 15/03/2018....
    
    if((customerPhoneValue.text).length >= 10)
        phnotext.text = customerPhoneValue.text;
    
    //upto here on 15/03/2018....
    phnotext.userInteractionEnabled = NO;
    phnotext.backgroundColor = [UIColor clearColor];
    phnotext.textColor = [UIColor whiteColor];
    
    
    phonelbl = [[UILabel alloc] init] ;
    
    phonelbl.text= @"Phone :";
    phonelbl.textColor = [UIColor whiteColor];
    phonelbl.backgroundColor = [UIColor clearColor];
    
    emaillbl = [[UILabel alloc] init] ;
    
    emaillbl.text= @"Email :";
    emaillbl.textColor = [UIColor whiteColor];
    emaillbl.backgroundColor = [UIColor clearColor];
    
    namelbl = [[UILabel alloc] init] ;
    
    namelbl.text= @"Name :";
    namelbl.textColor = [UIColor whiteColor];
    namelbl.backgroundColor = [UIColor clearColor];
    
    
    nametext = [[UITextField alloc] init];
    
    nametext.borderStyle = UITextBorderStyleNone;
    
    nametext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    nametext.placeholder = @"Customer Name";
    nametext.delegate = self;
    nametext.text = custName;
    nametext.backgroundColor = [UIColor clearColor];
    nametext.textColor = [UIColor whiteColor];
    nametext.userInteractionEnabled = NO;
    
    payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    // pay the cash button to continue the transaction ..
    [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
    [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
    payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    payBtn.titleLabel.textColor = [UIColor whiteColor];
    payBtn.backgroundColor = [UIColor grayColor];
    
    
    
    
    
    
    
    //added by Srinivasulu on 15/03/2018....
    
    if((customerPhoneValue.text).length >= 10)
        phnotext.text = [customerPhoneValue.text copy];
    
    //upto here on 15/03/2018....
    
    
    streetlbl = [[UILabel alloc] init] ;
    
    streetlbl.text= @"Street :";
    streetlbl.textColor = [UIColor whiteColor];
    streetlbl.backgroundColor = [UIColor clearColor];
    [denomScrollView addSubview:streetlbl];
    
    localitylbl = [[UILabel alloc] init] ;
    
    localitylbl.text= @"Locality :";
    localitylbl.textColor = [UIColor whiteColor];
    localitylbl.backgroundColor = [UIColor clearColor];
    [denomScrollView addSubview:localitylbl];
    
    citylbl = [[UILabel alloc] init] ;
    
    citylbl.text= @"City :";
    citylbl.backgroundColor = [UIColor clearColor];
    citylbl.textColor = [UIColor whiteColor];
    [denomScrollView addSubview:citylbl];
    
    pinlbl = [[UILabel alloc] init] ;
    
    pinlbl.text= @"PIN :";
    pinlbl.textColor = [UIColor whiteColor];
    pinlbl.backgroundColor = [UIColor clearColor] ;
    [denomScrollView addSubview:pinlbl];
    
    
    streettext = [[UITextField alloc] init];
    
    streettext.borderStyle = UITextBorderStyleNone;
    streettext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    streettext.delegate = self;
    streettext.text = street;
    streettext.backgroundColor = [UIColor clearColor];
    streettext.textColor = [UIColor whiteColor];
    streettext.userInteractionEnabled = NO;
    
    locltytext = [[UITextField alloc] init];
    
    locltytext.borderStyle = UITextBorderStyleNone;
    
    locltytext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    locltytext.delegate = self;
    locltytext.placeholder = @"Enter locality";
    locltytext.text = locality;
    locltytext.backgroundColor = [UIColor clearColor];
    locltytext.textColor = [UIColor whiteColor];
    locltytext.userInteractionEnabled = NO;
    
    citytext = [[UITextField alloc] init];
    
    citytext.borderStyle = UITextBorderStyleNone;
    citytext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    citytext.delegate = self;
    citytext.text = city;
    citytext.backgroundColor = [UIColor clearColor];
    citytext.textColor = [UIColor whiteColor];
    citytext.userInteractionEnabled = NO;
    
    pintext = [[UITextField alloc] init];
    
    pintext.borderStyle = UITextBorderStyleNone;
    pintext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    pintext.delegate = self;
    pintext.text = pin;
    pintext.backgroundColor = [UIColor clearColor];
    pintext.textColor = [UIColor whiteColor];
    pintext.userInteractionEnabled = NO;
    
    [denomScrollView addSubview:streettext];
    
    
    [denomScrollView addSubview:locltytext];
    
    
    [denomScrollView addSubview:citytext];
    
    [denomScrollView addSubview:pintext];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            denomScrollView.frame = CGRectMake(0.0, 135, 800.0, 450.0);
            denomScrollView.contentSize = CGSizeMake(800.0, 650.0);
            paymentView.frame = CGRectMake(100, 150, 800, 400);
            
            payBtn.frame = CGRectMake(150.0, 390, 500, 50.0);
            label.frame = CGRectMake(0, 0, 800, 70);
            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
            
            label.font = [UIFont systemFontOfSize:25];
            
            billStatusLabel.font = [UIFont systemFontOfSize:20];
            billStatusLabel.frame = CGRectMake(15,150,120,30);
            billStatusLabelValue.font = [UIFont systemFontOfSize:20];
            billStatusLabelValue.frame = CGRectMake(210,90,160,30);
            billLabel.font = [UIFont systemFontOfSize:20];
            billLabel.frame = CGRectMake(15, 30, 120, 30);
            paidLbl.font = [UIFont systemFontOfSize:20];
            paidLbl.frame = CGRectMake(15, 100, 120, 30);
            
            phonelbl.font = [UIFont systemFontOfSize:20];
            phonelbl.frame = CGRectMake(15, 10, 120, 30);
            emaillbl.font = [UIFont systemFontOfSize:20];
            emaillbl.frame = CGRectMake(15, 240, 120, 30);
            namelbl.font = [UIFont systemFontOfSize:20];
            namelbl.frame = CGRectMake(15, 80, 120, 30);
            
            
            phnotext.frame = CGRectMake(160.0, 10, 200, 40);
            phnotext.font = [UIFont systemFontOfSize:20];
            emailtext.frame = CGRectMake(160.0, 240, 200, 40);
            emailtext.font = [UIFont systemFontOfSize:20.0];
            nametext.frame = CGRectMake(160, 80, 200, 40);
            nametext.font = [UIFont systemFontOfSize:20];
            
            streetlbl.font = [UIFont systemFontOfSize:20.0];
            streetlbl.frame = CGRectMake(15, 150, 120, 30);
            localitylbl.font = [UIFont systemFontOfSize:20.0];
            localitylbl.frame = CGRectMake(400, 10, 120, 30);
            citylbl.font = [UIFont systemFontOfSize:20.0];
            citylbl.frame = CGRectMake(400, 80, 120, 30);
            pinlbl.font = [UIFont systemFontOfSize:20.0];
            pinlbl.frame = CGRectMake(400, 150, 120, 30);
            
            streettext.font = [UIFont systemFontOfSize:20];
            streettext.frame = CGRectMake(160, 150, 200, 40);
            locltytext.font = [UIFont systemFontOfSize:20];
            locltytext.frame = CGRectMake(530, 10, 200, 40);
            citytext.frame = CGRectMake(530, 80, 200.0, 40);
            citytext.font = [UIFont systemFontOfSize:20];
            pintext.frame = CGRectMake(530, 150, 200.0, 40);
            pintext.font = [UIFont systemFontOfSize:20.0];
            
            
            
            
            
            
            
        }
        else {
            paymentView.frame = CGRectMake(20, 140, 730, 750.0);
            denomScrollView.frame = CGRectMake(0.0, 0.0, 730.0, 750.0);
            denomScrollView.contentSize = CGSizeMake(730.0, 850.0);
            payBtn.frame = CGRectMake(50.0, 680.0, 630.0, 60.0);
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            
            label.font = [UIFont systemFontOfSize:25];
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            billStatusLabel.font = [UIFont systemFontOfSize:25];
            billStatusLabel.frame = CGRectMake(15,220,220,45);
            billStatusLabelValue.font = [UIFont systemFontOfSize:25];
            billStatusLabelValue.frame = CGRectMake(210,220,160,45);
            billLabel.font = [UIFont systemFontOfSize:25];
            billLabel.frame = CGRectMake(15, 100.0, 160, 45);
            paidLbl.font = [UIFont systemFontOfSize:25];
            paidLbl.frame = CGRectMake(15, 170.0, 160, 45);
            phonelbl.font = [UIFont systemFontOfSize:25.0];
            phonelbl.frame = CGRectMake(15, 270.0, 160.0, 45);
            emaillbl.font = [UIFont systemFontOfSize:25.0];
            emaillbl.frame = CGRectMake(15, 340.0, 160.0, 45);
            namelbl.font = [UIFont systemFontOfSize:25.0];
            namelbl.frame = CGRectMake(15, 410.0, 160.0, 45);
            payTxt1.font = [UIFont systemFontOfSize:25];
            payTxt1.frame = CGRectMake(200, 100.0, 300, 45);
            payTxt2.font = [UIFont systemFontOfSize:25];
            payTxt2.frame = CGRectMake(200, 170.0, 300, 45);
            phnotext.frame = CGRectMake(200.0, 270.0, 300.0, 45);
            phnotext.font = [UIFont systemFontOfSize:25];
            emailtext.frame = CGRectMake(200.0, 340.0, 300.0, 45);
            emailtext.font = [UIFont systemFontOfSize:25.0];
            nametext.frame = CGRectMake(200.0, 410.0, 300.0, 45);
            nametext.font = [UIFont systemFontOfSize:25];
            
            streetlbl.font = [UIFont systemFontOfSize:25.0];
            streetlbl.frame = CGRectMake(15, 480.0, 160.0, 45);
            localitylbl.font = [UIFont systemFontOfSize:25.0];
            localitylbl.frame = CGRectMake(15, 550.0, 160.0, 45);
            citylbl.font = [UIFont systemFontOfSize:25.0];
            citylbl.frame = CGRectMake(15, 620.0, 160.0, 45);
            pinlbl.font = [UIFont systemFontOfSize:25.0];
            pinlbl.frame = CGRectMake(15, 690.0, 160.0, 45);
            
            streettext.font = [UIFont systemFontOfSize:25];
            streettext.frame = CGRectMake(200, 480.0, 300, 45);
            locltytext.font = [UIFont systemFontOfSize:25];
            locltytext.frame = CGRectMake(200, 550.0, 300, 45);
            citytext.frame = CGRectMake(200.0, 620.0, 300.0, 45);
            citytext.font = [UIFont systemFontOfSize:25];
            pintext.frame = CGRectMake(200.0, 690.0, 300.0, 45);
            pintext.font = [UIFont systemFontOfSize:25.0];
            
            
            payBtn.frame = CGRectMake(50.0, 755.0, 630.0, 50.0);
            payBtn.layer.cornerRadius = 25.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            paymentView.frame = CGRectMake(20, 140, 730, 820.0);
            
            
        }
        
        
        // img1.frame = CGRectMake(0, 0, 630, 460);
        
        
    }
    else {
        
        if (version >= 8.0 ) {
            paymentView.backgroundColor = [UIColor blackColor];
            label.frame = CGRectMake(0, 0, 300, 40);
            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            billLabel.frame = CGRectMake(10, 50, 80, 30);
            paidLbl.frame = CGRectMake(10, 100, 120, 30);
            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
            payTxt1.frame = CGRectMake(140, 50, 150, 35);
            payTxt2.frame = CGRectMake(140, 100, 150, 35);
            //                                payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
            //                                payBtn.layer.cornerRadius = 15.0f;
            //                                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            phonelbl.frame = CGRectMake(10, 170.0, 160.0, 30);
            emaillbl.frame = CGRectMake(10, 215.0, 160.0, 30);
            namelbl.frame = CGRectMake(10,260.0, 160.0, 45);
            phnotext.frame = CGRectMake(140.0, 170.0, 150.0, 35);
            emailtext.frame = CGRectMake(140.0, 215.0, 150.0, 35);
            nametext.frame = CGRectMake(140.0, 260.0, 150.0, 35);
            
            streetlbl.frame = CGRectMake(10, 305, 160.0, 30);
            localitylbl.frame = CGRectMake(10, 350, 160.0, 30);
            citylbl.frame = CGRectMake(10, 395, 160.0, 35);
            pinlbl.frame = CGRectMake(10, 440, 160.0, 35);
            
            
            streetlbl.font = [UIFont systemFontOfSize:15];
            localitylbl.font = [UIFont systemFontOfSize:15];
            citylbl.font = [UIFont systemFontOfSize:15];
            pinlbl.font = [UIFont systemFontOfSize:15];
            
            streettext.font = [UIFont systemFontOfSize:15];
            streettext.frame = CGRectMake(140, 305, 150, 30);
            locltytext.font = [UIFont systemFontOfSize:15];
            locltytext.frame = CGRectMake(140, 350, 150, 30);
            citytext.frame = CGRectMake(140, 395, 150, 30);
            citytext.font = [UIFont systemFontOfSize:15];
            pintext.frame = CGRectMake(140, 440, 150, 30);
            pintext.font = [UIFont systemFontOfSize:15];
            
            payBtn.frame = CGRectMake(10.0, 475, 280.0, 30.0);
            payBtn.layer.cornerRadius = 15.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            paymentView.frame = CGRectMake(10, 60, 300, 540);
        }
        else{
            label.frame = CGRectMake(0, 0, 300, 40);
            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            billLabel.frame = CGRectMake(10, 50, 80, 30);
            paidLbl.frame = CGRectMake(10, 100, 120, 30);
            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
            payTxt1.frame = CGRectMake(140, 50, 150, 35);
            payTxt2.frame = CGRectMake(140, 100, 150, 35);
            payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
            payBtn.layer.cornerRadius = 15.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            paymentView.frame = CGRectMake(10, 70, 300, 240);
        }
        
    }
    
    //[paymentView addSubview:img1];
    //    [denomScrollView addSubview:billStatusLabel];
    //    [denomScrollView addSubview:billStatusLabelValue];
    [denomScrollView addSubview:phonelbl];
    [denomScrollView addSubview:namelbl];
    [denomScrollView addSubview:phnotext];
    [denomScrollView addSubview:nametext];
    [paymentView addSubview:denomScrollView];
    [paymentView addSubview:label];
    [paymentView addSubview:backbutton];
    
    [self.view addSubview:paymentView];
    
    [UIView transitionFromView:denomination
                        toView:paymentView
                      duration:0.6
                       options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
                    completion:nil];
    
    
    paymentView.hidden = NO;
    
}


// Commented by roja on 17/10/2019.. // reason : getCustomerDetailsDoorDel method contains SOAP Service call .. so taken new method with same(getCustomerDetailsDoorDel) method name which contains REST service call....
// At the time of converting SOAP call's to REST

//-(void)getCustomerDetailsDoorDel {
//
//    [self.view endEditing: YES];
//
//    // NSString *value = [smsField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
//    // PhoNumber validation...
//    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
//    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
//
//
//    //added by Srinivasulu on 15/03/2018....
//
//    NSString * customerMobileNumberStr = @"";
//
//    if((customerPhoneValue.text).length >= 10)
//        customerMobileNumberStr = customerPhoneValue.text;
//
//    //upto here on 15/03/2018....
//
//    BOOL isNumber = [decimalTest evaluateWithObject:customerMobileNumberStr];
//    //int qty = [value intValue];
//
//
//
//    if((customerPhoneValue.text).length <= 9 || (customerPhoneValue.text).length >= 12 || !isNumber) {
//
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//        [alert show];
//
//    }
//    else{
//
//
//        BOOL status = FALSE;
//
//        CheckWifi *wifi = [[CheckWifi alloc]init];
//
//        status = [wifi checkWifi];
//
//
//        if (status) {
//
//
//            // showing the HUD ..
//            [HUD setHidden:NO];
//
//            //checking for deals & offers...
//            NSError * err;
//            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err];
//            NSString * requestHeaderString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//            //added by Srinivasulu on 15/03/2018....
//
//            NSString * customerMobileNumberStr = @"";
//
//            if((customerPhoneValue.text).length >= 10)
//                customerMobileNumberStr = customerPhoneValue.text;
//
//            //upto here on 15/03/2018....
//
//            NSArray *loyaltyKeys = @[@"email", @"mobileNumber",@"requestHeader"];
//
//            NSArray *loyaltyObjects = @[@"",customerMobileNumberStr,requestHeaderString];
//            NSDictionary *dictionary_req = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//            NSError * err_;
//            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_req options:0 error:&err_];
//            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//
//            CustomerServiceSoapBinding *custBindng =  [CustomerServiceSvc CustomerServiceSoapBinding] ;
//            CustomerServiceSvc_getCustomerDetails *aParameters = [[CustomerServiceSvc_getCustomerDetails alloc] init];
//            aParameters.phone = loyaltyString;
//
//            @try {
//
//                CustomerServiceSoapBindingResponse *response = [custBindng getCustomerDetailsUsingParameters:(CustomerServiceSvc_getCustomerDetails *)aParameters];
//                NSArray *responseBodyParts = response.bodyParts;
//                for (id bodyPart in responseBodyParts) {
//                    if ([bodyPart isKindOfClass:[CustomerServiceSvc_getCustomerDetailsResponse class]]) {
//                        CustomerServiceSvc_getCustomerDetailsResponse *body = (CustomerServiceSvc_getCustomerDetailsResponse *)bodyPart;
//                        printf("\nresponse=%s",(body.return_).UTF8String);
//                        NSError *e;
//
//                        NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
//                                                                              options: NSJSONReadingMutableContainers
//                                                                                error: &e];
//
//                        NSDictionary *dictionary = [JSON1 valueForKey:RESPONSE_HEADER];
//                        if ([[dictionary valueForKey:RESPONSE_CODE] intValue] == -1) {
//                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"New Customer" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                            [alert show];
//                        }
//                        else{
//
//
//                            [self addCustomerView:JSON1[@"phone"] street:JSON1[@"street"] locality:JSON1[@"locality"] city:JSON1[@"city"] pin:JSON1[@"pin_no"] custName:JSON1[@"name"]];
//
//                        }
//
//                        [HUD setHidden:YES];
//                    }
//                }
//            }
//            @catch (NSException *exception) {
//
//                NSLog(@"%@",exception);
//
//            }
//
//        }
//        else {
//            //added by Srinivasulu on 15/03/2018....
//
//            NSString * customerMobileNumberStr = @"";
//
//            if((customerPhoneValue.text).length >= 10)
//                customerMobileNumberStr = customerPhoneValue.text;
//
//            if((phnotext.text).length >= 10)
//                customerMobileNumberStr = phnotext.text;
//
//            //upto here on 15/03/2018....
//
//
//            offline = [[OfflineBillingServices alloc] init];
//            //commented & changed by Srinivauslu on 06/09/2018....
//            //                NSDictionary *JSON1 = [offline getCustomerDetails:phnotext.text];
//            NSDictionary * JSON1 = [offline getCustomerDetailsBasedOnPhoneNo:customerMobileNumberStr];
//
//            if ([[NSString stringWithFormat:@"%@",JSON1[@"phone"]] isEqualToString:@"<null>"] || [[NSString stringWithFormat:@"%@",JSON1[@"email"]] isEqualToString:@"<null>"]) {
//
//                emailtext.text = @"";
//                nametext.text = @"";
//                streettext.text = @"";
//                locltytext.text = @"";
//                citytext.text = @"";
//                pintext.text = @"";
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"New Customer" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [alert show];
//            }
//            else{
//
//
//                [self addCustomerView:JSON1[@"phone"] street:JSON1[@"street"] locality:JSON1[@"locality"] city:JSON1[@"city"] pin:JSON1[@"pin_no"] custName:JSON1[@"name"]];
//
//            }
//
//
//        }
//    }
//}



//getCustomerDetailsDoorDel method changed by roja on 17/10/2019.. // reason : removed SOAP service call related code and  added REST service call code...
// At the time of converting SOAP call's to REST
-(void)getCustomerDetailsDoorDel {
    
    [self.view endEditing: YES];
    
    // NSString *value = [smsField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    // PhoNumber validation...
    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
    
    //added by Srinivasulu on 15/03/2018....
    NSString * customerMobileNumberStr = @"";
    
    if((customerPhoneValue.text).length >= 10)
        customerMobileNumberStr = customerPhoneValue.text;
    //upto here on 15/03/2018....
    BOOL isNumber = [decimalTest evaluateWithObject:customerMobileNumberStr];
    //int qty = [value intValue];
    
    if((customerPhoneValue.text).length <= 9 || (customerPhoneValue.text).length >= 12 || !isNumber) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    else{
        
        
        BOOL status = FALSE;
        
        CheckWifi *wifi = [[CheckWifi alloc]init];
        
        status = [wifi checkWifi];
        
        
        if (status) {
            isCustomrDetailDoorDelCall = true;
            
            // showing the HUD ..
            [HUD setHidden:NO];
            
            //checking for deals & offers...
            NSError * err;
            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err];
            NSString * requestHeaderString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            
            //added by Srinivasulu on 15/03/2018....
            NSString * customerMobileNumberStr = @"";
            
            if((customerPhoneValue.text).length >= 10)
                customerMobileNumberStr = customerPhoneValue.text;
            
            //upto here on 15/03/2018....
            
            NSArray *loyaltyKeys = @[@"email", @"mobileNumber",@"requestHeader"];
            
            NSArray *loyaltyObjects = @[@"",customerMobileNumberStr,requestHeaderString];
            NSDictionary *dictionary_req = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
            
            NSError * err_;
            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_req options:0 error:&err_];
            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
            
            CustomerServiceSoapBinding *custBindng =  [CustomerServiceSvc CustomerServiceSoapBinding] ;
            CustomerServiceSvc_getCustomerDetails *aParameters = [[CustomerServiceSvc_getCustomerDetails alloc] init];
            aParameters.phone = loyaltyString;
            
            @try {
                
                CustomerServiceSoapBindingResponse *response = [custBindng getCustomerDetailsUsingParameters:(CustomerServiceSvc_getCustomerDetails *)aParameters];
                NSArray *responseBodyParts = response.bodyParts;
                for (id bodyPart in responseBodyParts) {
                    if ([bodyPart isKindOfClass:[CustomerServiceSvc_getCustomerDetailsResponse class]]) {
                        CustomerServiceSvc_getCustomerDetailsResponse *body = (CustomerServiceSvc_getCustomerDetailsResponse *)bodyPart;
                        printf("\nresponse=%s",(body.return_).UTF8String);
                        NSError *e;
                        
                        NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
                                                                              options: NSJSONReadingMutableContainers
                                                                                error: &e];
                        
                        NSDictionary *dictionary = [JSON1 valueForKey:RESPONSE_HEADER];
                        if ([[dictionary valueForKey:RESPONSE_CODE] intValue] == -1) {
                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"New Customer" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            [alert show];
                        }
                        else{
                            
                            [self addCustomerView:JSON1[@"phone"] street:JSON1[@"street"] locality:JSON1[@"locality"] city:JSON1[@"city"] pin:JSON1[@"pin_no"] custName:JSON1[@"name"]];
                            
                        }
                        
                        [HUD setHidden:YES];
                    }
                }
            }
            @catch (NSException *exception) {
                
                NSLog(@"%@",exception);
                
            }
            
        }
        else {
            //added by Srinivasulu on 15/03/2018....
            
            NSString * customerMobileNumberStr = @"";
            
            if((customerPhoneValue.text).length >= 10)
                customerMobileNumberStr = customerPhoneValue.text;
            
            if((phnotext.text).length >= 10)
                customerMobileNumberStr = phnotext.text;
            
            //upto here on 15/03/2018....
            
            
            offline = [[OfflineBillingServices alloc] init];
            //commented & changed by Srinivauslu on 06/09/2018....
            //                NSDictionary *JSON1 = [offline getCustomerDetails:phnotext.text];
            NSDictionary * JSON1 = [offline getCustomerDetailsBasedOnPhoneNo:customerMobileNumberStr];
            
            if ([[NSString stringWithFormat:@"%@",JSON1[@"phone"]] isEqualToString:@"<null>"] || [[NSString stringWithFormat:@"%@",JSON1[@"email"]] isEqualToString:@"<null>"]) {
                
                emailtext.text = @"";
                nametext.text = @"";
                streettext.text = @"";
                locltytext.text = @"";
                citytext.text = @"";
                pintext.text = @"";
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"New Customer" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else{
                
                
                [self addCustomerView:JSON1[@"phone"] street:JSON1[@"street"] locality:JSON1[@"locality"] city:JSON1[@"city"] pin:JSON1[@"pin_no"] custName:JSON1[@"name"]];
                
            }
            
        }
    }
}


-(void)changeDoorDelStatus{
    
    [self changeStatus:NO];
}
-(void)changeStatus:(BOOL)isPrinting{
    
    if (!isOfflineService) {
        
        @try {
            NSArray *keys ;
            NSArray *objects;
            
            if (isPrinting) {
                
                isPrinting = TRUE;
                
                if ([paymentTypeVal.text isEqualToString:@"Take Away"]) {
                    
                    if (finalBillDue1.floatValue > 0) {
                        
                        pastBillStatus1 = @"TA-Pending";
                    }
                    else {
                        
                        pastBillStatus1 = @"TA-Completed";
                    }
                    
                }
                else {
                    if (finalBillDue1.floatValue > 0) {
                        
                        pastBillStatus1 = @"HD-PP-Pending";
                    }
                    else {
                        pastBillStatus1 = @"HD-PP-ToBeDelivered";
                    }
                    
                    
                }
                
                
                keys = @[@"billId",REQUEST_HEADER,@"isPrinting",@"storeLocation",@"status"];
                
                objects  = @[billIDValue.text,[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%@",isPrinting?@"true":@"false"],presentLocation,pastBillStatus1];
            }
            
            else {
                keys = @[@"billId",@"requestHeader",@"status",@"storeLocation"];
                
                objects  = @[billIDValue.text,[RequestHeader getRequestHeader],@"HD-PP-Delivered",presentLocation];
            }
            
            NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            
            NSError * err;
            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
            NSString * updateBillingJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            
            
            NSString *serviceUrl = [WebServiceUtility getURLFor:UPDATE_BILLING];
            serviceUrl = [NSString stringWithFormat:@"%@%@",serviceUrl,updateBillingJsonString];
            serviceUrl = [WebServiceUtility addPercentEscapesFor:serviceUrl];
            
            NSURL *url = [NSURL URLWithString:serviceUrl];
            NSMutableURLRequest  *request = [NSMutableURLRequest  requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                                 timeoutInterval:60.0];
            request.HTTPMethod = @"POST";
            [request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
            [request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
            [request setValue:[NSString stringWithFormat:@"%d", [serviceUrl dataUsingEncoding:NSUTF8StringEncoding].length] forHTTPHeaderField:@"Content-Length"];
            NSError *error = nil;
            NSHTTPURLResponse *responseCode = nil;
            
            NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&responseCode error:&error];
            NSDictionary *billingResponse = [NSJSONSerialization JSONObjectWithData:data options:0
                                                                              error:NULL];
            
            if ([[NSString stringWithFormat:@"%@",billingResponse[@"billId"]] isEqualToString:billIDValue.text]) {
                NSDictionary *requestHeaderDic = [billingResponse valueForKey:@"responseHeader"];
                if ([[requestHeaderDic valueForKey:@"responseCode"] intValue] == 0) {
                    paymentView.hidden = YES;
                    
                    if (paymentView.subviews){
                        for (UIView *subview in paymentView.subviews) {
                            [subview removeFromSuperview];
                        }
                    }
                    paymentView.backgroundColor = [UIColor blackColor];
                    paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
                    
                    UILabel *label11 = [[UILabel alloc] init];
                    label11.text = @"Delivery Successfull ";
                    label11.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                    label11.backgroundColor = [UIColor clearColor];
                    label11.textAlignment = NSTextAlignmentCenter;
                    label11.textColor = [UIColor whiteColor];
                    UILabel *label33 = [[UILabel alloc] init];
                    label33.text = @"Bill ID is ";
                    label33.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                    label33.backgroundColor = [UIColor clearColor];
                    label33.textAlignment = NSTextAlignmentCenter;
                    label33.textColor = [UIColor whiteColor];
                    
                    label22 = [[UILabel alloc] init];
                    label22.text = [NSString stringWithFormat:@"%@",billingResponse[@"billId"]];
                    label22.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                    label22.textAlignment = NSTextAlignmentCenter;
                    label22.backgroundColor = [UIColor whiteColor];
                    label22.alpha = 0.9f;
                    label22.textColor = [UIColor blackColor];
                    
                    // button to make new fresh bill ..
                    UIButton *newbill = [UIButton buttonWithType:UIButtonTypeCustom];
                    [newbill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
                    [newbill setTitle:@"OK"    forState:UIControlStateNormal];
                    newbill.titleLabel.textAlignment = NSTextAlignmentCenter;
                    newbill.titleLabel.textColor = [UIColor whiteColor];
                    newbill.backgroundColor = [UIColor grayColor];
                    paymentView.hidden = NO;
                    
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        // img1.frame = CGRectMake(0, 0, 468, 400);
                        label11.font = [UIFont systemFontOfSize:25];
                        label11.frame = CGRectMake(0, 20, 468, 80);
                        label33.font = [UIFont systemFontOfSize:25];
                        label33.frame = CGRectMake(0, 110, 468, 80);
                        label22.font = [UIFont systemFontOfSize:25];
                        label22.frame = CGRectMake(0, 190, 468, 80);
                        newbill.layer.cornerRadius = 25.0f;
                        newbill.titleLabel.font = [UIFont systemFontOfSize:25];
                        newbill.frame = CGRectMake(50.0, 320.0, 370.0, 50.0);
                        paymentView.frame = CGRectMake(250, 150, 468, 400);
                    }
                    else {
                        // img1.frame = CGRectMake(0, 0, 200, 200);
                        if (version >= 8.0) {
                            label11.frame = CGRectMake(0, 10, 200, 40);
                            label33.frame = CGRectMake(0, 40, 200, 40);
                            label22.frame = CGRectMake(0, 80, 200, 40);
                            newbill.frame = CGRectMake(10.0, 140.0, 180.0, 30.0);
                            newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                            newbill.layer.cornerRadius = 15.0f;
                            paymentView.frame = CGRectMake(60, 150, 200, 200);
                        }
                        else{
                            label11.frame = CGRectMake(0, 10, 200, 40);
                            label33.frame = CGRectMake(0, 40, 200, 40);
                            label22.frame = CGRectMake(0, 80, 200, 40);
                            newbill.frame = CGRectMake(10.0, 140.0, 180.0, 30.0);
                            newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                            newbill.layer.cornerRadius = 15.0f;
                            paymentView.frame = CGRectMake(60, 70, 200, 200);
                        }
                        
                    }
                    
                    //[paymentView addSubview:img1];
                    [paymentView addSubview:label11];
                    [paymentView addSubview:label33];
                    [paymentView addSubview:label22];
                    [paymentView addSubview:newbill];
                    // [self newBill:(UIButton*)newbill];
                    [self.view addSubview:paymentView];
                    [segmentedControl setUserInteractionEnabled:TRUE];
                    [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
                    //[segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
                    
                    // this value is to check whether bill is finished or not ..
                    segmentedControl.tag = 1;
                    
                }
                else{
                    //
                    //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Update Billing Failed." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    //                    [alert show];
                }
            }
            else{
                
                //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Update Billing Failed." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //                [alert show];
            }
            [HUD hide:YES afterDelay:0.5];
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        }
        @finally {
            
            [HUD hide:YES afterDelay:0.5];
        }
    }
    else {
        offline = [[OfflineBillingServices alloc] init];
        if (isPrinting) {
            
            [offline updateBillingStatus:@"" billId:pastBillField.text];
            
        }
        else {
            [offline updateBillingStatus:@"HD-PP-Delivered" billId:pastBillField.text];
            NSMutableDictionary *json = [offline openBill:pastBillField.text];
            if (json.count>0) {
                
                [self getBillingDetailsHandler:json];
                
            }
            else {
                [HUD setHidden:YES];
                
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Bill not available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
        }
    }
    
}



-(void)populateQtyView:(UIButton*)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    [qty1 resignFirstResponder];
    [segmentedControl setUserInteractionEnabled:NO];
    cartTable.userInteractionEnabled = FALSE;
    //       eraseButton.userInteractionEnabled = FALSE;
    //       barcodeBtn.userInteractionEnabled = FALSE;
    BillField.userInteractionEnabled = FALSE;
    
    qtyChangeDisplyView = [[UIView alloc]init];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            
            qtyChangeDisplyView.frame = CGRectMake(300, 100, 375, 300);
            
        }
        else {
            qtyChangeDisplyView.frame = CGRectMake(200, 300, 375, 300);
            
        }
    }
    else{
        qtyChangeDisplyView.frame = CGRectMake(75, 68, 175, 200);
    }
    qtyChangeDisplyView.layer.borderWidth = 1.0;
    qtyChangeDisplyView.layer.cornerRadius = 10.0;
    qtyChangeDisplyView.layer.masksToBounds = YES;
    qtyChangeDisplyView.layer.borderColor = [UIColor blackColor].CGColor;
    
    qtyChangeDisplyView.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    [self.view addSubview:qtyChangeDisplyView];
    
    UIImageView *img  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
    
    // a label on top of the view ..
    UILabel *topbar = [[UILabel alloc] init];
    topbar.backgroundColor = [UIColor grayColor];
    topbar.text = @"    Enter Quantity";
    topbar.backgroundColor = [UIColor clearColor];
    topbar.textAlignment = NSTextAlignmentCenter;
    topbar.font = [UIFont boldSystemFontOfSize:17];
    topbar.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:17.0f];
    topbar.textColor = [UIColor whiteColor];
    topbar.textAlignment = NSTextAlignmentLeft;
    
    
    UILabel *availQty = [[UILabel alloc] init];
    availQty.text = @"Available Qty :";
    
    //changed by Srinivassulu on 23/05/2017....
    
    
    
    availQty.text = NSLocalizedString(@"billed_qty_:", nil);
    
    
    
    //upto here on 23/05/2017....
    
    
    availQty.font = [UIFont boldSystemFontOfSize:14];
    availQty.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    availQty.backgroundColor = [UIColor clearColor];
    availQty.textColor = [UIColor blackColor];
    [qtyChangeDisplyView addSubview:availQty];
    
    UILabel *unitPrice = [[UILabel alloc] init];
    unitPrice.text = @"Unit Price       :";
    unitPrice.font = [UIFont boldSystemFontOfSize:14];
    unitPrice.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    unitPrice.backgroundColor = [UIColor clearColor];
    unitPrice.textColor = [UIColor blackColor];
    
    
    UILabel *availQtyData = [[UILabel alloc] init];
    
    availQtyData.font = [UIFont boldSystemFontOfSize:14];
    availQtyData.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    availQtyData.backgroundColor = [UIColor clearColor];
    availQtyData.textColor = [UIColor blackColor];
    [qtyChangeDisplyView addSubview:availQtyData];
    
    UILabel *unitPriceData = [[UILabel alloc] init];
    
    unitPriceData.font = [UIFont boldSystemFontOfSize:14];
    unitPriceData.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    unitPriceData.backgroundColor = [UIColor clearColor];
    unitPriceData.textColor = [UIColor blackColor];
    
    //        if ([[unitOfMeasurement objectAtIndex:textField.tag] isEqualToString:@"Kilogram"]) {
    //            availQtyData.text = [NSString stringWithFormat:@"%@%@",availQtyData.text,@"Kg"];
    //            unitPriceData.text = [NSString stringWithFormat:@"%@%@",unitPriceData.text,@"/Kg"];
    //        }
    
    qtyFeild = [[UITextField alloc] init];
    qtyFeild.borderStyle = UITextBorderStyleRoundedRect;
    qtyFeild.textColor = [UIColor blackColor];
    qtyFeild.placeholder = @"Enter Qty";
    //NumberKeyBoard hidden....
    UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
    numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                             [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar1 sizeToFit];
    qtyFeild.keyboardType = UIKeyboardTypeNumberPad;
    qtyFeild.text = sender.titleLabel.text;
    qtyFeild.font = [UIFont systemFontOfSize:17.0];
    qtyFeild.backgroundColor = [UIColor whiteColor];
    qtyFeild.autocorrectionType = UITextAutocorrectionTypeNo;
    //qtyFeild.keyboardType = UIKeyboardTypeDefault;
    qtyFeild.clearButtonMode = UITextFieldViewModeWhileEditing;
    qtyFeild.returnKeyType = UIReturnKeyDone;
    qtyFeild.delegate = self;
    [qtyFeild becomeFirstResponder];
    
    /** ok Button for qtyChangeDisplyView....*/
    okButton = [UIButton buttonWithType:UIButtonTypeCustom];
    //[okButton setImage:[UIImage imageNamed:@"OK.png"] forState:UIControlStateNormal];
    [okButton addTarget:self
                 action:@selector(changeQuantity:) forControlEvents:UIControlEventTouchDown];
    [okButton setTitle:@"OK" forState:UIControlStateNormal];
    okButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    okButton.backgroundColor = [UIColor grayColor];
    
    /** CancelButton for qtyChangeDisplyView....*/
    qtyCancelButton = [UIButton buttonWithType:UIButtonTypeCustom];
    //[qtyCancelButton setImage:[UIImage imageNamed:@"Cancel.png"] forState:UIControlStateNormal];
    [qtyCancelButton addTarget:self
                        action:@selector(quantityCancel:) forControlEvents:UIControlEventTouchDown];
    [qtyCancelButton setTitle:@"Cancel" forState:UIControlStateNormal];
    qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    qtyCancelButton.backgroundColor = [UIColor grayColor];
    
    @try {
        
        NSDictionary *itemDetailsDic = cartTotalItems[sender.tag];
        availQtyData.text = [NSString stringWithFormat:@"%d",[[itemDetailsDic valueForKey:AVAIL_QTY] intValue]];
        NSString *itemPrice = [NSString stringWithFormat:@"%.2f",([[itemDetailsDic valueForKey:ITEM_TOTAL_PRICE] floatValue] / [[itemDetailsDic valueForKey:QUANTITY] intValue])];
        unitPriceData.text = itemPrice;
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
    }
    @finally {
        
        [HUD setHidden:YES];
    }
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        
        img.frame = CGRectMake(0, 0, 375, 50);
        topbar.frame = CGRectMake(80, 5, 375, 40);
        topbar.font = [UIFont boldSystemFontOfSize:25];
        
        
        availQty.frame = CGRectMake(10,60,200,40);
        availQty.font = [UIFont boldSystemFontOfSize:25];
        
        
        unitPrice.frame = CGRectMake(10,110,200,40);
        unitPrice.font = [UIFont boldSystemFontOfSize:25];
        
        
        availQtyData.frame = CGRectMake(200,60,250,40);
        availQtyData.font = [UIFont boldSystemFontOfSize:25];
        
        
        unitPriceData.frame = CGRectMake(200,110,2500,40);
        unitPriceData.font = [UIFont boldSystemFontOfSize:25];
        
        
        qtyFeild.frame = CGRectMake(110, 165, 150, 50);
        qtyFeild.font = [UIFont systemFontOfSize:25.0];
        
        
        okButton.frame = CGRectMake(60, 220, 80, 50);
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        
        
        //            qtyCancelButton.frame = CGRectMake(250, 220, 80, 50);
        //            qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        
        okButton.frame = CGRectMake(20, 235, 165, 45);
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        okButton.layer.cornerRadius = 20.0f;
        
        qtyCancelButton.frame = CGRectMake(190, 235, 165, 45);
        qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        qtyCancelButton.layer.cornerRadius = 20.0f;
        
        
    }
    else{
        qtyFeild.inputAccessoryView = numberToolbar1;
        
        img.frame = CGRectMake(0, 0, 175, 32);
        topbar.frame = CGRectMake(0, 0, 175, 30);
        topbar.font = [UIFont boldSystemFontOfSize:17];
        
        availQty.frame = CGRectMake(10,40,100,30);
        availQty.font = [UIFont boldSystemFontOfSize:14];
        
        unitPrice.frame = CGRectMake(10,70,100,30);
        unitPrice.font = [UIFont boldSystemFontOfSize:14];
        
        availQtyData.frame = CGRectMake(115,40,60,30);
        availQtyData.font = [UIFont boldSystemFontOfSize:14];
        
        unitPriceData.frame = CGRectMake(115,70,60,30);
        unitPriceData.font = [UIFont boldSystemFontOfSize:14];
        
        qtyFeild.frame = CGRectMake(36, 107, 100, 30);
        qtyFeild.font = [UIFont systemFontOfSize:17.0];
        
        okButton.frame = CGRectMake(10, 150, 75, 30);
        okButton.layer.cornerRadius = 14.0f;
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
        qtyCancelButton.frame = CGRectMake(90, 150, 75, 30);
        qtyCancelButton.layer.cornerRadius = 14.0f;
        qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
    }
    
    [qtyChangeDisplyView addSubview:img];
    [qtyChangeDisplyView addSubview:topbar];
    [qtyChangeDisplyView addSubview:availQty];
    [qtyChangeDisplyView addSubview:unitPrice];
    [qtyChangeDisplyView addSubview:availQtyData];
    [qtyChangeDisplyView addSubview:unitPriceData];
    [qtyChangeDisplyView addSubview:qtyFeild];
    [qtyChangeDisplyView addSubview:okButton];
    [qtyChangeDisplyView addSubview:qtyCancelButton];
    
    tagid = sender.tag;
}

- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
    [super touchesBegan:touches withEvent:event];
    [self.view endEditing:YES];
}
-(void)textViewDidEndEditing:(UITextView *)textView {
    [textView resignFirstResponder];
}

- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
    if ([text isEqualToString:@"\n"]) {
        [textView resignFirstResponder];
        return NO; // or true, whetever you's like
    }
    
    return YES;
}
-(void)goToBottom
{
    selectedSaleIdTable.hidden = NO;
    NSIndexPath *scrollIndexPath = [NSIndexPath indexPathForRow:([selectedSaleIdTable numberOfRowsInSection:0] - 1) inSection:0];
    [selectedSaleIdTable scrollToRowAtIndexPath:scrollIndexPath atScrollPosition:UITableViewScrollPositionBottom animated:NO];
}
// shouldAutorotateToInterfaceOrientation handler...
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

- (BOOL)allowDuplicatePrintingToUser:(NSMutableArray *)accessControllers {
    
    BOOL allowDuplicatePrinting = FALSE;
    NSLog(@"Duplicate print to user called %@",printCount);
    
    for (NSDictionary *accessControlDic in accessControllers) {
        if ([[[accessControlDic valueForKey:@"appDocumentActivity"] lowercaseString] containsString:@"duplicate print"] && [[accessControlDic valueForKey:@"activityRead"] boolValue]) {
            allowDuplicatePrinting = TRUE;
            break;
        }
        else {
            allowDuplicatePrinting = FALSE;
        }
    }
    
    return allowDuplicatePrinting;
}

// login screen ..
- (void) logging {
    
    
    segmentedControl.userInteractionEnabled = FALSE;
    
    loginTransperentView = [[UIView alloc] initWithFrame:self.view.frame];
    loginTransperentView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.8f];
    loginTransperentView.hidden = NO;
    
    loginView = [[UIView alloc] init];
    loginView.layer.borderColor = [UIColor whiteColor].CGColor;
    loginView.layer.borderWidth = 1.0f;
    loginView.layer.cornerRadius = 10;
    //    loginView.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"MessageBox.png"]];
    loginView.clipsToBounds = YES;
    loginView.hidden = NO;
    
    
    
    
    UIImageView *headerimg  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"PopUp_header.png"]];
    UIImageView *headerlogo = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"User_Gray.png"]];
    
    UILabel *headerlabel = [[UILabel alloc] init];
    headerlabel.text = @"Login";
    headerlabel.textColor = [UIColor whiteColor];
    headerlabel.backgroundColor = [UIColor clearColor];
    
    
    UIButton *backBut = [[UIButton alloc] init];
    [backBut setImage:[UIImage imageNamed:@"go-back-icon.png"] forState:UIControlStateNormal];
    [backBut addTarget:self action:@selector(gobackView) forControlEvents:UIControlEventTouchDown];
    
    UILabel *user      = [[UILabel alloc] init];
    
    password  = [[UILabel alloc] init];
    UILabel *emailId_  = [[UILabel alloc] init];
    
    user.backgroundColor      = [UIColor clearColor];
    password.backgroundColor  = [UIColor clearColor];
    emailId_.backgroundColor = [UIColor clearColor];
    
    user.text      = @"Customer ID";
    password.text  = @"Password";
    emailId_.text = @"User ID";
    
    user.textColor = [UIColor whiteColor];
    password.textColor = [UIColor whiteColor];
    emailId_.textColor = [UIColor whiteColor];
    
    userIDtxt          = [[UITextField alloc] init];
    emailIDtxt        = [[UITextField alloc] init];
    passwordtxt        = [[UITextField alloc] init];
    userIDtxt.text = custID;
    
    userIDtxt.layer.masksToBounds=YES;
    userIDtxt.layer.borderColor=[UIColor grayColor].CGColor;
    userIDtxt.layer.borderWidth= 1.0f;
    
    
    passwordtxt.layer.masksToBounds=YES;
    passwordtxt.layer.borderColor=[UIColor grayColor].CGColor;
    passwordtxt.layer.borderWidth= 1.0f;
    
    emailIDtxt.layer.masksToBounds=YES;
    emailIDtxt.layer.borderColor=[UIColor grayColor].CGColor;
    emailIDtxt.layer.borderWidth= 1.0f;
    
    userIDtxt.delegate          = self;
    passwordtxt.delegate        = self;
    emailIDtxt.delegate = self;
    
    userIDtxt.font = [UIFont fontWithName:@"Arial" size:18.0];
    passwordtxt.font = [UIFont fontWithName:@"Arial" size:18.0];
    emailIDtxt.font = [UIFont fontWithName:@"Arial" size:18.0];
    
    userIDtxt.backgroundColor   = [UIColor whiteColor];
    passwordtxt.backgroundColor = [UIColor whiteColor];
    emailIDtxt.backgroundColor = [UIColor whiteColor];
    
    userIDtxt.layer.cornerRadius    = 4.0f;
    userIDtxt.layer.masksToBounds   = YES;
    passwordtxt.layer.cornerRadius  = 4.0f;
    passwordtxt.layer.masksToBounds = YES;
    emailIDtxt.layer.cornerRadius  = 4.0f;
    emailIDtxt.layer.masksToBounds = YES;
    
    [userIDtxt addTarget:self action:@selector(textfieldTouched:) forControlEvents:UIControlEventTouchDown];
    [passwordtxt addTarget:self action:@selector(textfieldTouched:) forControlEvents:UIControlEventTouchDown];
    //[emailIDtxt addTarget:self action:@selector(textfieldTouched:) forControlEvents:UIControlEventTouchDown];
    
    userIDtxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    userIDtxt.autocorrectionType     = UITextAutocorrectionTypeNo;
    passwordtxt.secureTextEntry = TRUE;
    
    emailIDtxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    emailIDtxt.autocorrectionType     = UITextAutocorrectionTypeNo;
    
    loginbut1 = [[UIButton alloc] init];
    [loginbut1 setTitle:@"Login" forState:UIControlStateNormal];
    [loginbut1 setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [loginbut1 setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];
    loginbut1.backgroundColor = [UIColor clearColor];
    [loginbut1 addTarget:self action:@selector(loginClicked:)forControlEvents:UIControlEventTouchDown];
    loginbut1.layer.borderColor = [UIColor grayColor].CGColor;
    loginbut1.clipsToBounds = YES;
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
            
            loginView.frame = CGRectMake(180, 80, 668, 550);
            
            headerimg.frame = CGRectMake(0, 0, 668, 100);
            
            headerlogo.frame = CGRectMake(80, 25, 60, 60);
            
            headerlabel.font = [UIFont boldSystemFontOfSize:30];
            headerlabel.frame = CGRectMake(300, 30, 250, 60);
            
            
            backBut.frame = CGRectMake(590, 15, 70, 70);
            
            user.font = [UIFont systemFontOfSize:30];
            password.font = [UIFont systemFontOfSize:30];
            emailId_.font = [UIFont systemFontOfSize:30];
            user.frame = CGRectMake(40, 130, 200, 60);
            emailId_.frame = CGRectMake(40, 230, 200, 60);
            password.frame = CGRectMake(40, 330, 200, 60);
            
            userIDtxt.font = [UIFont systemFontOfSize:30];
            passwordtxt.font = [UIFont systemFontOfSize:30];
            emailIDtxt.font = [UIFont systemFontOfSize:30];
            userIDtxt.frame = CGRectMake(250, 130, 350, 60);
            emailIDtxt.frame = CGRectMake(250, 230, 350, 60);
            passwordtxt.frame = CGRectMake(250, 330, 350, 60);
            
            loginbut1.frame = CGRectMake(30, 420, 600, 60);
            loginbut1.titleLabel.font = [UIFont boldSystemFontOfSize:30.0];
            //            loginbut1.layer.cornerRadius = 25.0f;
            
        }
        else {
            loginView.frame = CGRectMake(50, 200, 668, 550);
            
            headerimg.frame = CGRectMake(0, 0, 668, 100);
            
            headerlogo.frame = CGRectMake(80, 25, 60, 60);
            
            headerlabel.font = [UIFont boldSystemFontOfSize:30];
            headerlabel.frame = CGRectMake(300, 30, 250, 60);
            
            
            backBut.frame = CGRectMake(590, 15, 70, 70);
            
            user.font = [UIFont systemFontOfSize:30];
            password.font = [UIFont systemFontOfSize:30];
            emailId_.font = [UIFont systemFontOfSize:30];
            user.frame = CGRectMake(40, 130, 200, 60);
            emailId_.frame = CGRectMake(40, 230, 200, 60);
            password.frame = CGRectMake(40, 330, 200, 60);
            
            userIDtxt.font = [UIFont systemFontOfSize:30];
            passwordtxt.font = [UIFont systemFontOfSize:30];
            emailIDtxt.font = [UIFont systemFontOfSize:30];
            userIDtxt.frame = CGRectMake(250, 130, 350, 60);
            emailIDtxt.frame = CGRectMake(250, 230, 350, 60);
            passwordtxt.frame = CGRectMake(250, 330, 350, 60);
            
            loginbut1.frame = CGRectMake(30, 420, 600, 60);
            loginbut1.titleLabel.font = [UIFont boldSystemFontOfSize:30.0];
            loginbut1.layer.cornerRadius = 25.0f;
            
        }
        
    }
    else {
        if (version>=8.0) {
            
            loginView.frame = CGRectMake(10, 90, 300, 300);
            
            headerimg.frame = CGRectMake(0, 0, 300, 50);
            
            headerlogo.frame = CGRectMake(20, 7, 40, 40);
            
            headerlabel.frame = CGRectMake(130, 10, 100, 30);
            
            backBut.frame = CGRectMake(260, 10, 30, 30);
            
            user.frame = CGRectMake(10, 70, 100, 30);
            user.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            password.frame = CGRectMake(10, 170, 100, 30);
            password.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            emailId_.frame = CGRectMake(10, 120, 100, 30);
            emailId_.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            
            userIDtxt.frame = CGRectMake(100, 70, 180, 30);
            userIDtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            passwordtxt.frame = CGRectMake(100, 170, 180, 30);
            passwordtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            emailIDtxt.frame = CGRectMake(100, 120, 180, 30);
            emailIDtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            
            loginbut1.frame = CGRectMake(20, 218, 260, 35);
            loginbut1.layer.cornerRadius = 15.0f;
        }
        else {
            loginView.frame = CGRectMake(10, 90, 300, 300);
            
            headerimg.frame = CGRectMake(0, 0, 300, 50);
            
            headerlogo.frame = CGRectMake(20, 7, 40, 40);
            
            headerlabel.frame = CGRectMake(130, 10, 100, 30);
            
            backBut.frame = CGRectMake(260, 10, 30, 30);
            
            user.frame = CGRectMake(10, 70, 100, 30);
            user.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            password.frame = CGRectMake(10, 170, 100, 30);
            password.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            emailId_.frame = CGRectMake(10, 120, 100, 30);
            emailId_.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            
            userIDtxt.frame = CGRectMake(100, 70, 180, 30);
            userIDtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            passwordtxt.frame = CGRectMake(100, 170, 180, 30);
            passwordtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            emailIDtxt.frame = CGRectMake(100, 120, 180, 30);
            emailIDtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            
            loginbut1.frame = CGRectMake(20, 218, 260, 35);
            loginbut1.layer.cornerRadius = 15.0f;
            
        }
        
        
    }
    UIGraphicsBeginImageContext(loginView.frame.size);
    [[UIImage imageNamed:@"MessageBox.png"] drawInRect:loginView.bounds];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    loginView.backgroundColor = [UIColor colorWithPatternImage:image];
    
    
    
    [loginView addSubview:headerimg];
    [loginView addSubview:headerlogo];
    [loginView addSubview:headerlabel];
    [loginView addSubview:backBut];
    [loginView addSubview:user];
    [loginView addSubview:password];
    [loginView addSubview:userIDtxt];
    [loginView addSubview:passwordtxt];
    [loginView addSubview: loginbut1];
    [loginView addSubview:emailIDtxt];
    [loginView addSubview:emailId_];
    
    [loginTransperentView addSubview:loginView];
    [self.view addSubview:loginTransperentView];
    
}

- (void)loginClicked:(id)sender {
    if ((userIDtxt.text).length == 0 ||  (passwordtxt.text).length == 0)
    {
        
        UIAlertView *validation_alert = [[UIAlertView alloc] initWithTitle:@"Validation" message:@"Please enter the \nmandatory fields" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [validation_alert show];
    }
    else
    {
        
        HUD.dimBackground = YES;
        HUD.labelText = @"Authenticating..";
        
        // Show the HUD
        [HUD show:YES];
        [HUD setHidden:NO];
        
        //user_name = [userIDtxt.text copy];
        userPassword = [passwordtxt.text copy];
        
        NSMutableArray *accessControlActivities = [self callLoginServices];
        if ([self allowDuplicatePrintingToUser:accessControlActivities]) {
            [loginView setHidden:YES];
            [loginTransperentView setHidden:YES];
            [self printReceipt:@"Normal"];
        }
        else {
            UIAlertView *validation_alert = [[UIAlertView alloc] initWithTitle:@"This account has no permission to get Duplicate Print" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [validation_alert show];
        }
    }
}

-(NSMutableArray *)callLoginServices {
    
    CheckWifi *wifi = [[CheckWifi alloc]init];
    BOOL status = [wifi checkWifi];
    NSMutableArray *accessControlActivities = [[NSMutableArray alloc] init];
    
    if (status) {
        
        BOOL status = FALSE;
        
        //commented by Srinivasulu on 20/07/2017....
        
        //        UIDevice *myDevice = [UIDevice currentDevice];
        //        NSString *deviceUDID = @"";
        //        NSString *deviceTechnoId = @"";
        //        KeychainItemWrapper *keyChainItem = [[KeychainItemWrapper alloc] initWithIdentifier:@"Technolabs" accessGroup:nil];
        //        if ([[keyChainItem objectForKey:(__bridge id)(kSecAttrAccount)] length] == 0) {
        //            deviceUDID = [[myDevice identifierForVendor] UUIDString];
        //            //            deviceUDID = DEVICE_ID;
        //            [keyChainItem setObject:deviceUDID forKey:(__bridge id)(kSecAttrAccount)];
        //            deviceTechnoId = deviceUDID;
        //        }
        //        else {
        //            deviceTechnoId = [keyChainItem objectForKey:(__bridge id)(kSecAttrAccount)];
        //        }
        
        //upto here on 20/07/2017....
        
        
        MemberServiceSoapBinding *memberParam =  [MemberServiceSvc MemberServiceSoapBinding];
        memberParam.logXMLInOut = YES;
        
        //commented by Srinivasulu on 20/07/2017....
        
        //        NSString *time = [NSDateFormatter localizedStringFromDate:[NSDate date] dateStyle:NSDateFormatterShortStyle timeStyle:NSDateFormatterFullStyle];
        //        NSArray *str = [time componentsSeparatedByString:@" "];
        //        NSString *date = [[[str objectAtIndex:0] componentsSeparatedByString:@","] objectAtIndex:0];
        //        NSArray *headerKeys = [NSArray arrayWithObjects:@"accessKey", @"customerId",@"applicationName",@"userName",@"correlationId",@"dateTime", nil];
        //
        //        NSArray *headerObjects = [NSArray arrayWithObjects:userIDtxt.text,userIDtxt.text,@"Omni Retailer-outlet",emailIDtxt.text,@"-",date, nil];
        //        NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:headerObjects forKeys:headerKeys];
        
        //upto here on 20/07/2017....
        
        
        
        NSArray *loyaltyKeys = @[@"userId", @"emailId",@"password",@"deviceId",@"requestHeader"];
        
        
        
        //changed by Srinivasulu on  20/07/2017....
        
        //        NSArray *loyaltyObjects = [NSArray arrayWithObjects:userIDtxt.text,emailIDtxt.text,passwordtxt.text,deviceTechnoId,dictionary, nil];
        NSArray * loyaltyObjects = @[userIDtxt.text,emailIDtxt.text,passwordtxt.text,deviceId,[RequestHeader getRequestHeader]];
        
        //upto here on 20/07/2017....
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        NSLog(@"login req string %@",loyaltyString);
        
        MemberServiceSvc_authenticateUser *authenticate = [[MemberServiceSvc_authenticateUser alloc] init];
        authenticate.loginDetails = loyaltyString;
        
        
        @try {
            
            MemberServiceSoapBindingResponse *response_ = [memberParam authenticateUserUsingParameters:(MemberServiceSvc_authenticateUser *)authenticate];
            if (![response_.error isKindOfClass:[NSError class]]) {
                
                NSArray *responseBodyParts1_ = response_.bodyParts;
                NSDictionary *JSON1;
                for (id bodyPart in responseBodyParts1_) {
                    
                    if ([bodyPart isKindOfClass:[MemberServiceSvc_authenticateUserResponse class]]) {
                        status = TRUE;
                        MemberServiceSvc_authenticateUserResponse *body = (MemberServiceSvc_authenticateUserResponse *)bodyPart;
                        printf("\nresponse=%s",(body.return_).UTF8String);
                        
                        //status = body.return_;
                        NSError *e;
                        JSON1 = [[NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
                                                                 options: NSJSONReadingMutableContainers
                                                                   error: &e] copy];
                        
                        if (status) {
                            // NSError *e_;
                            NSDictionary *responseJSON ;
                            responseJSON = [JSON1 valueForKey:@"responseHeader"];
                            
                            
                            if ([[responseJSON valueForKey:@"responseCode"] integerValue]==0) {
                                
                                NSMutableArray *roles = [JSON1 valueForKey:@"roles"];
                                
                                NSLog(@"Roles for the login persons -------%@",roles);
                                for (NSDictionary *rolesDic in roles) {
                                    [accessControlActivities addObjectsFromArray:[rolesDic valueForKey:@"accessControlActivity"]];
                                }
                                
                                
                            }
                            return accessControlActivities;
                            
                        }
                        else {
                            
                            [HUD setHidden:YES];
                            return accessControlActivities;
                        }
                    }
                    else {
                        
                        return accessControlActivities;
                    }
                    
                }
                
            }
            else {
                
                return accessControlActivities;
            }
        }
        @catch (NSException *exception) {
            
            return accessControlActivities;
        }
        @finally {
            [HUD setHidden:YES];
        }
    }
    else {
        isOfflineService = YES;
        
        return accessControlActivities;
        
    }
}

- (void) gobackView {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    loginView.hidden        = YES;
    loginTransperentView.hidden = YES;
    loginbut.enabled = TRUE;
    segmentedControl.userInteractionEnabled = TRUE;
    
}

- (void) textfieldTouched:(id)sender {
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
            loginView.frame = CGRectMake(180, -20, 668, 550);
        }
        else {
            loginView.frame = CGRectMake(50, 200, 668, 550);
        }
    }
    else {
        loginView.frame = CGRectMake(10, 10, 300, 260);
    }
    
}


-(float)calculateTax:(float)itemPrice taxRate:(float)taxRate {
    
    float taxValue = 0.0f;
    //    NSArray *taxDicArr = [taxArr objectAtIndex:j];
    //    for (NSDictionary *taxDic in taxDicArr) {
    //        if ([[[taxDic valueForKey:@"taxType"] lowercaseString] isEqualToString:@"percentage"]) {
    taxValue += ((itemPrice -(itemPrice/(100+taxRate)*100)));
    //        }
    //        else{
    //            taxValue += ([[taxDic valueForKey:@"taxRate"] floatValue]*[qty intValue]);
    //
    //        }
    
    //    }
    
    return taxValue;
    
}

-(void)populateCustomerSpecific:(UIButton*)sender {
    @try {
        AudioServicesPlaySystemSound (soundFileObject);
        
        isItemEmpl = true;
        
        PopOverViewController  *customerSpecific = [[PopOverViewController alloc] init];
        
        customerSpecificView = [[UIView alloc] initWithFrame:CGRectMake(BillField.frame.origin.x,BillField.frame.origin.y,BillField.frame.size.width+40,300)];
        customerSpecificView.opaque = NO;
        customerSpecificView.backgroundColor = [UIColor blackColor];
        customerSpecificView.layer.borderColor = [UIColor whiteColor].CGColor;
        customerSpecificView.layer.borderWidth = 1.0f;
        [customerSpecificView setHidden:NO];
        
        
        
        UIButton *topBarCancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [topBarCancelBtn addTarget:self action:@selector(topBarCancelButton) forControlEvents:UIControlEventTouchDown];
        [topBarCancelBtn setImage:[UIImage imageNamed:@"delete.png"] forState:UIControlStateNormal];
        topBarCancelBtn.layer.cornerRadius = 3.0f;
        
        UILabel *topBarView = [[UILabel alloc] init];
        topBarView.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        topBarView.textAlignment = NSTextAlignmentCenter;
        topBarView.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0f];
        topBarView.textColor = [UIColor blackColor];
        topBarView.textAlignment = NSTextAlignmentLeft;
        
        
        departmentFld = [[UITextField alloc] init];
        departmentFld.borderStyle = UITextBorderStyleRoundedRect;
        departmentFld.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.6 ];
        departmentFld.font = [UIFont systemFontOfSize:18.0];
        departmentFld.layer.borderColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0].CGColor;
        departmentFld.backgroundColor = [UIColor clearColor];
        departmentFld.delegate = self;
        departmentFld.userInteractionEnabled = false;
        departmentFld.placeholder = @" Department";
        departmentFld.layer.borderWidth  = 1.0f;
        departmentFld.attributedPlaceholder = [[NSAttributedString alloc]initWithString:departmentFld.placeholder attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        
        departmentFld.userInteractionEnabled = false;
        
        
        UIImage *departmentImg  = [UIImage imageNamed:@"arrow.png"];
        
        UIButton * departmentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        
        [departmentBtn setBackgroundImage:departmentImg forState:UIControlStateNormal];
        [departmentBtn addTarget:self
                          action:@selector(populateCstmrDprtmnt:) forControlEvents:UIControlEventTouchDown];
        
        departmentBtn.tag = 2;
        
        
        subDepartmentFld = [[UITextField alloc] init];
        subDepartmentFld.borderStyle = UITextBorderStyleRoundedRect;
        subDepartmentFld.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.6 ];
        subDepartmentFld.font = [UIFont systemFontOfSize:18.0];
        subDepartmentFld.layer.borderColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0].CGColor;
        subDepartmentFld.backgroundColor = [UIColor clearColor];
        subDepartmentFld.delegate = self;
        subDepartmentFld.userInteractionEnabled = false;
        subDepartmentFld.placeholder = @" Sub Department";
        subDepartmentFld.layer.borderWidth  = 1.0f;
        subDepartmentFld.attributedPlaceholder = [[NSAttributedString alloc]initWithString:subDepartmentFld.placeholder attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        
        UIImage *subDepartmentImg  = [UIImage imageNamed:@"arrow.png"];
        
        UIButton * subDepartmentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        
        [subDepartmentBtn setBackgroundImage:subDepartmentImg forState:UIControlStateNormal];
        [subDepartmentBtn addTarget:self
                             action:@selector(populateSubDepartment:) forControlEvents:UIControlEventTouchDown];
        
        subDepartmentBtn.tag = 4;
        subDepartmentFld.userInteractionEnabled = false;
        
        
        salesPersonIdFld = [[UITextField alloc] init];
        salesPersonIdFld.borderStyle = UITextBorderStyleRoundedRect;
        salesPersonIdFld.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.6];
        salesPersonIdFld.font = [UIFont systemFontOfSize:18.0];
        salesPersonIdFld.layer.borderColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0].CGColor;
        salesPersonIdFld.backgroundColor = [UIColor clearColor];
        salesPersonIdFld.delegate = self;
        salesPersonIdFld.userInteractionEnabled = YES;
        salesPersonIdFld.placeholder = @" SalesPerson ID";
        salesPersonIdFld.layer.borderWidth  = 1.0f;
        salesPersonIdFld.attributedPlaceholder = [[NSAttributedString alloc]initWithString:salesPersonIdFld.placeholder attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        
        UIImage *salesPersonIdImg  = [UIImage imageNamed:@"arrow.png"];
        
        UIButton * salesPersonBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        
        [salesPersonBtn setBackgroundImage:salesPersonIdImg forState:UIControlStateNormal];
        [salesPersonBtn addTarget:self
                           action:@selector(selectSalesPersonIds:) forControlEvents:UIControlEventTouchDown];
        salesPersonIdFld.userInteractionEnabled = false;
        
        
        
        
        salesPersonNameFld = [[UITextField alloc] init];
        salesPersonNameFld.borderStyle = UITextBorderStyleRoundedRect;
        salesPersonNameFld.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.6];
        salesPersonNameFld.font = [UIFont systemFontOfSize:18.0];
        salesPersonNameFld.layer.borderColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0].CGColor;
        salesPersonNameFld.backgroundColor = [UIColor clearColor] ;
        salesPersonNameFld.delegate = self;
        salesPersonNameFld.userInteractionEnabled = YES;
        salesPersonNameFld.placeholder = @" SalesPerson Name";
        salesPersonNameFld.layer.borderWidth  = 1.0f;
        salesPersonNameFld.attributedPlaceholder = [[NSAttributedString alloc]initWithString:salesPersonNameFld.placeholder attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        salesPersonNameFld.userInteractionEnabled = false;
        
        
        UIButton  *specificSubmitButton = [[UIButton alloc] init];
        [specificSubmitButton setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];//        [status setBackgroundColor:[UIColor grayColor]];
        [specificSubmitButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [specificSubmitButton setTitle:@"Submit" forState:UIControlStateNormal];
        //        status.titleLabel.textColor = [UIColor blackColor];
        specificSubmitButton.titleLabel.font = [UIFont boldSystemFontOfSize:22.0];
        specificSubmitButton.titleLabel.textAlignment = NSTextAlignmentLeft;
        specificSubmitButton.layer.cornerRadius = 10.0f;
        specificSubmitButton.tag = sender.tag;
        [specificSubmitButton addTarget:self action:@selector(submitButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
        
        
        UIButton   *specificCancelButton = [[UIButton alloc] init];
        [specificCancelButton setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];//        [status setBackgroundColor:[UIColor grayColor]];
        [specificCancelButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [specificCancelButton setTitle:@"Cancel" forState:UIControlStateNormal];
        //        status.titleLabel.textColor = [UIColor blackColor];
        specificCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:22.0];
        specificCancelButton.titleLabel.textAlignment = NSTextAlignmentLeft;
        specificCancelButton.layer.cornerRadius = 10.0f;
        [specificCancelButton addTarget:self action:@selector(cancelButtonPressed) forControlEvents:UIControlEventTouchUpInside];
        
        
        
        [customerSpecificView addSubview:topBarView];
        [customerSpecificView addSubview: topBarCancelBtn];
        [customerSpecificView addSubview:departmentFld];
        // [customerSpecificView addSubview:departmentBtn];
        [customerSpecificView addSubview:subDepartmentFld];
        // [customerSpecificView addSubview:subDepartmentBtn];
        [customerSpecificView addSubview:salesPersonIdFld];
        // [customerSpecificView addSubview:salesPersonBtn];
        
        [customerSpecificView addSubview:salesPersonNameFld];
        //        [customerSpecificView addSubview: specificSubmitButton];
        //        [customerSpecificView addSubview:specificCancelButton];
        
        
        
        
        
        //adjusting the frame for the fields:
        
        topBarView.frame = CGRectMake(0, 0, customerSpecificView.frame.size.width, 45);
        topBarCancelBtn.frame = CGRectMake(topBarView.frame.size.width-50, 0, 45, 45);
        
        departmentFld.frame = CGRectMake(20, topBarView.frame.origin.y+topBarView.frame.size.height+20, 220, 40);
        
        departmentBtn.frame = CGRectMake((departmentFld.frame.origin.x+departmentFld.frame.size.width-45), departmentFld.frame.origin.y-8,  55, 60);
        
        subDepartmentFld.frame = CGRectMake(departmentFld.frame.origin.x, departmentFld.frame.origin.y+departmentFld.frame.size.height+20, 220, 40);
        
        subDepartmentBtn.frame = CGRectMake((subDepartmentFld.frame.origin.x+subDepartmentFld.frame.size.width-45), subDepartmentFld.frame.origin.y-8,  55, 60);
        
        salesPersonIdFld.frame = CGRectMake(subDepartmentFld.frame.origin.x, subDepartmentFld.frame.origin.y+subDepartmentFld.frame.size.height+20, 220, 40);
        
        salesPersonBtn.frame = CGRectMake((salesPersonIdFld.frame.origin.x+salesPersonIdFld.frame.size.width-45), salesPersonIdFld.frame.origin.y-8,  55, 60);
        
        
        specificSubmitButton.frame = CGRectMake(subDepartmentFld.frame.origin.x+subDepartmentFld.frame.size.width+80, subDepartmentFld.frame.origin.y, 160, 45);
        
        specificCancelButton.frame = CGRectMake(salesPersonIdFld.frame.origin.x+salesPersonIdFld.frame.size.width+80, salesPersonIdFld.frame.origin.y, 160, 45);
        
        salesPersonNameFld.frame = CGRectMake(departmentFld.frame.origin.x, salesPersonIdFld.frame.origin.y+subDepartmentFld.frame.size.height+20, specificCancelButton.frame.origin.x - departmentFld.frame.origin.x, 40);
        
        //        adding subView:
        
        
        
        customerSpecific.view = customerSpecificView;
        
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            customerSpecific.preferredContentSize =  CGSizeMake(customerSpecificView.frame.size.width, customerSpecificView.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerSpecific];
            
            [popover presentPopoverFromRect:customerSpecificView.frame inView:self.view permittedArrowDirections:0 animated:YES];
            
            salesInfoPopUp = popover;
            
        }
        
        else {
            
            customerSpecific.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerSpecific];
            // popover.contentViewController.view.alpha = 0.0;
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            
            salesInfoPopUp = popover;
            
        }
        
        
        if(tempArrayItems.count) {
            
            NSDictionary *tempDic = tempArrayItems[sender.tag];
            
            departmentFld.text = [tempDic valueForKey:kItemDept];
            subDepartmentFld.text = [tempDic valueForKey:kItemSubDept];
            salesPersonIdFld.text = [tempDic valueForKey:kItemSpecificEmplId];
            salesPersonNameFld.text = [tempDic valueForKey:kItemSpecificEmplName];
        }
        
        
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    @finally {
        
    }
}

-(void)topBarCancelButton {
    @try {
        AudioServicesPlaySystemSound(soundFileObject);
        
        isItemEmpl = false;
        
        [salesInfoPopUp dismissPopoverAnimated: YES];
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
}


#pragma -mark methods added by Srinivasulu ....

#pragma -mark method used to display alert/warning messages....

/**
 * @description  adding the  alertMessage's based on input
 * @date         15/03/2017
 * @method       displayAlertMessage
 * @author       Srinivasulu
 * @param        NSString
 * @param        float
 * @param        float
 * @param        NSString
 * @param        float
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)displayAlertMessage:(NSString *)message    horizontialAxis:(float)xPostion  verticalAxis:(float)yPosition msgType:(NSString *)messageType   conentWidth:(float )labelWidth contentHeight:(float)labelHeight   isSoundRequired:(BOOL)soundStatus  timming:(float)noOfSecondsToDisplay    noOfLines:(int)noOfLines{
    
    
    //    [self displayAlertMessage: @"No Products Avaliable" horizontialAxis:segmentedControl.frame.origin.x   verticalAxis:segmentedControl.frame.origin.y  msgType:@"warning" timming:2.0];
    
    @try {
        AudioServicesPlayAlertSound(soundFileObject);
        
        if ([userAlertMessageLbl isDescendantOfView:self.view] ) {
            [userAlertMessageLbl removeFromSuperview];
            
        }
        
        userAlertMessageLbl = [[UILabel alloc] init];
        userAlertMessageLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
        userAlertMessageLbl.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.7];
        userAlertMessageLbl.layer.cornerRadius = 5.0f;
        userAlertMessageLbl.text =  message;
        userAlertMessageLbl.textAlignment = NSTextAlignmentCenter;
        userAlertMessageLbl.numberOfLines = noOfLines;
        
        
        userAlertMessageLbl.tag = 2;
        
        if ([messageType caseInsensitiveCompare:@"SUCCESS"] == NSOrderedSame) {
            userAlertMessageLbl.tag = 4;
            
            userAlertMessageLbl.textColor = [UIColor colorWithRed:114.0/255.0 green:203.0/255.0 blue:158.0/255.0 alpha:1.0];
            
            
            
            if(soundStatus){
                
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound;
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
            }
            
            
        }
        else{
            userAlertMessageLbl.textColor = [UIColor redColor];
            
            if(soundStatus){
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound;
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
            }
            
            
        }
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            //            if(searchItemsTxt.isEditing)
            //                yPosition = searchItemsTxt.frame.origin.y + searchItemsTxt.frame.size.height;
            
            
            userAlertMessageLbl.frame = CGRectMake(xPostion, yPosition, labelWidth, labelHeight);
            
        }
        else{
            if (version > 8.0) {
                userAlertMessageLbl.frame = CGRectMake(xPostion + 75, yPosition-35, 200, 30);
                userAlertMessageLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
                
            }
            else{
                userAlertMessageLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
                userAlertMessageLbl.frame = CGRectMake(xPostion + 75, yPosition-35, 200, 30);
                
            }
            
        }
        
        //added by Srinivasulu on 11/12/2017....
        
        userAlertMessageLbl.backgroundColor = [UIColor whiteColor];
        userAlertMessageLbl.textColor = [UIColor blackColor];
        
        //upto here on 11/12/2017....
        
        [self.view addSubview:userAlertMessageLbl];
        fadeOutTime = [NSTimer scheduledTimerWithTimeInterval:noOfSecondsToDisplay target:self selector:@selector(removeAlertMessages) userInfo:nil repeats:NO];
        
    }
    @catch (NSException *exception) {
        [HUD setHidden:YES];
        
        NSLog(@"--------exception in the stockReceiptView in displayAlertMessage---------%@",exception);
        NSLog(@"----exception while creating the useralertMesssageLbl------------%@",exception);
        
    }
}

/**
 * @description  here we are removing the existing label....
 * @date         18//04/2017....
 * @method       remoeAlertMessage
 * @author       Srinivasulu
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */


-(void)removeAlertMessages{
    @try {
        
        if(userAlertMessageLbl.tag == 4){
            
            
            [self backAction];
        }
        
        else if ([userAlertMessageLbl isDescendantOfView:self.view])
            [userAlertMessageLbl removeFromSuperview];
        
        
    }
    @catch (NSException *exception) {
        [HUD setHidden:YES];
        NSLog(@"----exception in removing userAlertMessageLbl label------------%@",exception);
        
    }
    
}


#pragma -mark mehod used to check whether received object in NULL or not

/**
 * @description  here we are checking whether the object is null or not
 * @date         22/04/2016
 * @method       checkGivenValueIsNullOrNil
 * @author       Srinivasulu
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

- (id)checkGivenValueIsNullOrNil:(id)inputValue defaultReturn:(NSString *)returnStirng{
    
    
    @try {
        if ([inputValue isKindOfClass:[NSNull class]] || inputValue == nil) {
            return returnStirng;
        }
        else {
            return inputValue;
        }
    } @catch (NSException *exception) {
        return @"--";
    }
    
}

#pragma -mark mehod used to call return bills service call....

/**
 * @description  here we are calling the return bill service call....
 * @date         20/05/2017
 * @method       returnServiceCall:
 * @author       Srinivasulu
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)returnServiceCall:(NSString *)returnModeStr{
    
    @try {
        
        [returnDenominationView setHidden: YES];
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
        [self.navigationController.view addSubview:HUD];
        // Regiser for HUD callbacks so we can remove it from the window at the right time
        HUD.delegate = self;
        HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
        HUD.mode = MBProgressHUDModeCustomView;
        HUD.labelText = @"Please Wait...";
        [HUD setHidden:NO];
        [HUD show:YES];
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        
        NSMutableArray *itemArray = [[NSMutableArray alloc] init];
        NSString *return_status;
        
        if (!([pastBillStatus1 rangeOfString:@"TA" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
            
            return_status = @"TA-Returned";
        }
        else if (!([pastBillStatus1 rangeOfString:@"HD-PP" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
            
            return_status = @"HD-PP-Returned";
        }
        else {
            return_status = @"HD-COD-Returned";
        }
        
        NSString *businessDate = [NSString stringWithFormat:@"%@%@%@",[defaults valueForKey:BUSSINESS_DATE],@" ",[currentdate componentsSeparatedByString:@" "][1]];
        if ([businessDate isKindOfClass:[NSNull class]]) {
            businessDate = [WebServiceUtility getCurrentDate];
        }
        
        //addedd by Srinivasulu on 04/08/2017.....
        
        float totalReturnAmount = 0.00;
        
        //upto here on 04/08/2017....
        
        for (int i = 0; i < selectedItems.count; i++) {
            
            NSDictionary *temp = selectedItems[i];
            NSMutableDictionary *dic = [NSMutableDictionary new];
            
            float unit_price = ([[temp valueForKey:ITEM_UNIT_PRICE] floatValue] * [[temp valueForKey:RETURN_QUANTITY] floatValue]);
            float taxValue = 0.0f;
            
            //need to be change written by Srinivasulu on 31/07/2017.....
            
            for (NSDictionary *taxDic in finalTaxDetailsArr) {
                if ([[taxDic valueForKey:@"sku_id"] isEqualToString:[temp valueForKey:SKU_ID]] && [[taxDic valueForKey:@"plu_code"] isEqualToString:[temp valueForKey:PLU_CODE]]) {
                    
                    //need to be changed written by Srinivasulu on 14/06/2017...
                    
                    taxValue += ((unit_price -(unit_price/(100+[[taxDic valueForKey:@"tax_rate"] floatValue])*100)));
                    
                    
                    //upto here on 14/06/2017....
                    
                }
            }
            
            [dic setValue:originalBillId forKey:@"bill_id"];
            [dic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]] forKey:@"cost"];
            [dic setValue:counterName forKey:@"counter_id"];
            [dic setValue:businessDate forKey:@"bill_date"];
            [dic setValue:[temp valueForKey:ITEM_NAME] forKey:@"item_name"];
            [dic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:ITEM_UNIT_PRICE] floatValue]] forKey:@"price"];
            [dic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:RETURN_QUANTITY] floatValue]] forKey:@"quantity"];
            
            //need to be changed written by Srinivasulu on 14/06/2017...
            //changed on 15/06/2017....
            
            //                [dic setValue:reasonTextField.text forKey:@"reason"];
            [dic setValue:[self checkGivenValueIsNullOrNil:[temp valueForKey:REASON] defaultReturn:@""] forKey:REASON];
            
            //upto here on 14/06/2017....
            
            [dic setValue:[temp valueForKey:SKU_ID] forKey:@"sku_id"];
            [dic setValue:[temp valueForKey:TAX_CODE] forKey:TAX_CODE];
            [dic setValue:[NSString stringWithFormat:@"%.2f",taxValue] forKey:TAX_RATE_STR];
            [dic setValue:[temp valueForKey:PLU_CODE] forKey:PLU_CODE];
            [dic setValue:return_status forKey:@"status"];
            
            //added by Srinivasulu on 12/05/2017.....
            
            
            //changed by Srinivasulu on  31/07/2017....
            
            @try {
                
                if (([temp.allKeys containsObject:BILLED_ITEM_UNIT_PRICE] && ![temp[BILLED_ITEM_UNIT_PRICE] isKindOfClass:[NSNull class]])) {
                    
                    dic[@"price"] = temp[BILLED_ITEM_UNIT_PRICE];
                    
                    
                    totalReturnAmount += [[dic valueForKey:@"price"] floatValue] * [[dic valueForKey:@"quantity"] floatValue];
                    
                    [dic setValue:[NSString stringWithFormat:@"%.2f",([[dic valueForKey:@"price"] floatValue] * [[dic valueForKey:@"quantity"] floatValue])] forKey:@"cost"];
                }
                
                if (([temp.allKeys containsObject:@"taxCost"] && ![temp[@"taxCost"] isKindOfClass:[NSNull class]]))
                    [dic setValue:temp[@"taxCost"] forKey:TAX_RATE_STR];
                
            } @catch (NSException *exception) {
                
            }
            
            //upto here on 31/07/2017......
            
            
            //upto here on12/05/2017......
            
            [itemArray addObject:dic];
        }
        
        //addedd by Srinivasulu on 04/08/2017.....
        /*BillingTransaction objCashTransaction = new BillingTransaction();
         objCashTransaction.paidAmount = returnAmount != null && returnAmount != string.Empty ? (float)Convert.ToDecimal(returnAmount) : 0;
         objCashTransaction.dateTime = Convert.ToDateTime(DateTime.Now.ToString()).ToString(Constants.DATE_FROMAT, CultureInfo.InvariantCulture);
         objCashTransaction.modeOfPayment = returnMode;
         objCashTransaction.transactionTypeFlag = true;
         objBillingTransaction.Add(objCashTransaction);
         objroot.billingTransactions = objBillingTransaction.ToArray();*/
        NSMutableArray * paymentTransactionArr = [NSMutableArray new];
        //currentdate
        
        NSMutableDictionary *transDic = [NSMutableDictionary new];
        
        /*
         
         self saveTransactions:bill_id  transactionDetails:
         
         -(NSString *)saveTransactions:(NSString*)billId transactionDetails:(NSDictionary *)transactionDic {
         
         sqlite3_bind_text(insertStmt, 1,  [billId UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 2,  [[dic valueForKey:MODE_OF_PAY] UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 3,  [trasactionId UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 4,  [[dic valueForKey:CARD_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 5,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 6,  [[dic valueForKey:COUPON_NO] UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 7,  [[dic valueForKey:PAID_AMT] UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 8,  [[dic valueForKey:@"dateTime"] UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 9,  [[dic valueForKey:CARD_INFO] UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 10,  [[dic valueForKey:APPROVAL_CODE] UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_text(insertStmt, 11,  [[dic valueForKey:BANK_NAME] UTF8String], -1, SQLITE_TRANSIENT);
         sqlite3_bind_double(insertStmt, 12, [[dic valueForKey:CHANGE_RETURN] doubleValue]);
         sqlite3_bind_double(insertStmt, 13, [[dic valueForKey:RECEIVED_AMOUNT] doubleValue]);
         */
        
        [transDic setValue:[NSString stringWithFormat:@"%.2f",totalReturnAmount] forKey:PAID_AMT];
        [transDic setValue:currentdate forKey:DATE];
        [transDic setValue:@YES forKey:TRANSACTION_TYPE_FLAG];
        
        [transDic setValue:EMPTY_STRING forKey:CARD_TYPE];
        
        if (([returnModeStr caseInsensitiveCompare:@"cash"] == NSOrderedSame) || ([defaultReturnTypeStr caseInsensitiveCompare:@"cash"] == NSOrderedSame)) {
            
            [transDic setValue:CASH_RETURNS forKey:MODE_OF_PAY];
            [transDic setValue:CASH_RETURNS forKey:kReturnMode];
        }
        else{
            
            [transDic setValue:returnModeStr forKey:MODE_OF_PAY];
            [transDic setValue:returnModeStr forKey:kReturnMode];
        }
        
        //added by Srinivasulu on 03/04/2018....
        
        if ([returnModeStr caseInsensitiveCompare:@"Credit Note"] == NSOrderedSame){
            
            [transDic setValue:CR forKey:TENDER_MODE];
            [transDic setValue:@"2" forKey:TENDER_KEY];
        }
        
        //upto here on 03/04/2018....
        
        [transDic setValue:[NSString stringWithFormat:@"%.2f",totalReturnAmount] forKey:PAID_AMT];
        [transDic setValue:EMPTY_STRING forKey:CARD_INFO];
        [transDic setValue:EMPTY_STRING forKey:APPROVAL_CODE];
        [transDic setValue:ZERO_CONSTANT forKey:CHANGE_RETURN];
        [transDic setValue:ZERO_CONSTANT forKey:RECEIVED_AMOUNT];
        [transDic setValue:EMPTY_STRING forKey:COUPON_NO];
        [transDic setValue:EMPTY_STRING forKey:BANK_NAME];
        
        [paymentTransactionArr addObject:transDic];
        
        
        
        //upto here on 04/08/2017....
        
        
        
        if (!isOfflineService) {
            
            
            @try {
                
                
                NSArray *headerKeys1 = @[@"billId",@"requestHeader", @"billReturnItems", @"denominations", @"status", @"bill_date", @"store_location",kReturnMode,COUNTER,kCustomerBillId,@"billingTransactions",CREDIT_AMOUNT];
                
                
                //changed by Srinivasulu on returnMode....
                //                    NSArray *headerObjects1 = [NSArray arrayWithObjects:originalBillId,[RequestHeader getRequestHeader],itemArray,[self prepareDenominationString:nil], return_status, businessDate, presentLocation,returnMode,counterName,[NSNumber numberWithBool:isCustomerBillId], nil];
                
                NSArray *headerObjects1 = @[originalBillId,[RequestHeader getRequestHeader],itemArray,[self prepareDenominationString:nil], return_status, businessDate, presentLocation,returnModeStr,counterName,@(isCustomerBillId),paymentTransactionArr,[NSString stringWithFormat:@"%.2f",totalReturnAmount]];
                
                
                //upto here on returnMode...
                
                NSDictionary *dictionary1 = [NSDictionary dictionaryWithObjects:headerObjects1 forKeys:headerKeys1];
                
                NSError * err1;
                NSData * jsonData1 = [NSJSONSerialization dataWithJSONObject:dictionary1 options:0 error:&err1];
                NSString * jsonString = [[NSString alloc] initWithData:jsonData1 encoding:NSUTF8StringEncoding];
                
                WebServiceController *serviceController = [WebServiceController new];
                serviceController.returningBillDelegate = self;
                [serviceController returnBillWithData:jsonString];
            }
            @catch (NSException *exception) {
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Success" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            @finally {
                
            }
            
        }
        else {
            offline = [[OfflineBillingServices alloc] init];
            BOOL returnStatus = [offline saveReturnedItems:itemArray bill_id:originalBillId];
            if (returnStatus) {
                
                //added by Srinivasulu on 04/08/2017....
                
                @try {
                    
                    if ([returnMode caseInsensitiveCompare:@"cash"] == NSOrderedSame){
                        
                        NSDictionary * dic = @{@"billingTransactions": paymentTransactionArr};
                        
                        [offline saveTransactionsTemp:originalBillId transactionDetails:dic];
                        
                        //added by Srinivasulu on 20/11/2017....
                        
                        if(submitButton != nil)
                            submitButton.userInteractionEnabled = YES;
                        
                        //upto here on 20/11/2017....
                    }
                } @catch (NSException *exception) {
                    
                } @finally {
                    
                }
                
                //upto here on 04/08/2017....
                
                [offline updateBillingStatus:return_status billId:originalBillId];
                
                
                
                returnSuccessAlert = [[UIAlertView alloc] initWithTitle:@"Success" message:@"Returned Successfully" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [returnSuccessAlert show];
                
            }
            else {
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                [HUD setHidden:YES];
                
            }
        }
        
    } @catch (NSException *exception) {
        //added by Srinivasulu on 20/05/2017....
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
        [HUD setHidden:YES];
        
        //added by Srinivasulu on 20/11/2017....
        
        if(submitButton != nil)
            submitButton.userInteractionEnabled = YES;
        
        //upto here on 20/11/2017....
        //upto here on 20/05/2017.....
        
    } @finally {
        
    }
    
}


#pragma -mark method used for the reason drop down....

/**
 * @description  here we showing the list of reason in popUp.....
 * @date         15/06/2017....
 * @method       showReasonsView:
 * @author       Srinivasulu
 * @param        UITableView
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)showReasonsView:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    
    @try {
        
        if(returnReasonsArr.count){
            float tableHeight = returnReasonsArr.count * 50;
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
                tableHeight = returnReasonsArr.count * 33;
            
            if(returnReasonsArr.count > 5)
                tableHeight = (tableHeight/returnReasonsArr.count) * 4;
            
            
            
            [self showPopUpForTables:reasonTbl  popUpWidth:returnReasonTxt.frame.size.width * 1.4  popUpHeight:tableHeight presentPopUpAt:returnReasonTxt  showViewIn:qtyChangeDisplyView  permittedArrowDirections:UIPopoverArrowDirectionUp];
        }
        else
            [catPopOver dismissPopoverAnimated:YES];
        
    } @catch (NSException *exception) {
        
    }
    
}

#pragma -mark reuseable methods used in this page....

/**
 * @description  Displaying th PopUp's and reloading table if popUp is vissiable.....
 * @date         15/06/2017....
 * @method       showPopUpForTables:-- popUpWidth:-- popUpHeight:-- presentPopUpAt:-- showViewIn:-- permittedArrowDirections:--
 * @author       Srinivasulu
 * @param        UITableView
 * @param        float
 * @param        float
 * @param        id
 * @param        id
 * @param        permittedArrowDirections
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)showPopUpForTables:(UITableView *)tableName   popUpWidth:(float)width popUpHeight:(float)height  presentPopUpAt:(id)displayFrame  showViewIn:(id)view   permittedArrowDirections:(UIPopoverArrowDirection)arrowDirections{
    
    @try {
        
        if ( catPopOver.popoverVisible && (tableName.frame.size.height > height) ){
            catPopOver.popoverContentSize =  CGSizeMake(width, height);
            
            //            catPopOver.contentViewController.preferredContentSize = CGSizeMake(width, height);
            //CGRectMake( tableName.frame.origin.x, tableName.frame.origin.x, tableName.frame.size.width, tableName.frame.size.height);
            
            //            if (tableName.frame.size.height < height)
            //                tableName.frame = CGRectMake( tableName.frame.origin.x, tableName.frame.origin.x, tableName.frame.size.width, tableName.frame.size.height);
            
            [tableName reloadData];
            return;
            
        }
        
        if(catPopOver.popoverVisible)
            [catPopOver dismissPopoverAnimated:YES];
        
        
        UITextView *textView = displayFrame;
        
        PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
        
        UIView *customView = [[UIView alloc] initWithFrame:CGRectMake( 0.0, 0.0, width, height)];
        customView.opaque = NO;
        customView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
        customView.layer.borderColor = [UIColor lightGrayColor].CGColor;
        customView.layer.borderWidth = 2.0f;
        [customView setHidden:NO];
        
        
        //        tableName = [[UITableView alloc]init];
        tableName.layer.borderWidth = 1.0;
        tableName.layer.cornerRadius = 10.0;
        tableName.bounces = FALSE;
        tableName.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        tableName.layer.borderColor = [UIColor blackColor].CGColor;
        tableName.dataSource = self;
        tableName.delegate = self;
        tableName.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
        
        tableName.hidden = NO;
        tableName.frame = CGRectMake(0.0, 0.0, customView.frame.size.width, customView.frame.size.height);
        [customView addSubview:tableName];
        [tableName reloadData];
        
        customerInfoPopUp.view = customView;
        
        
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            customerInfoPopUp.preferredContentSize =  CGSizeMake(customView.frame.size.width, customView.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            
            [popover presentPopoverFromRect:textView.frame inView:view permittedArrowDirections:arrowDirections animated:YES];
            
            catPopOver= popover;
            
        }
        
        else {
            
            //            customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            // popover.contentViewController.view.alpha = 0.0;
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            catPopOver = popover;
            
        }
        
        UIGraphicsBeginImageContext(customView.frame.size);
        [[UIImage imageNamed:@"CustomerView.png"] drawInRect:customView.bounds];
        UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        customView.backgroundColor = [UIColor colorWithPatternImage:image];
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        [tableName reloadData];
        
    }
    
}





/*
 Printing description of bill_details:
 {
 aggregateTransactionList =     (
 {
 approvalCode = "<null>";
 bankName = "<null>";
 billId = "<null>";
 cardInfo = "<null>";
 cardType = "<null>";
 changeReturn = "<null>";
 changeReturns = "<null>";
 counterId = "<null>";
 couponNumber = "<null>";
 cusomer = "<null>";
 dateAndTime = "<null>";
 dateTime = "<null>";
 modeOfPayment = Credits;
 otp = "<null>";
 paidAmount = 20;
 receivedAmount = "<null>";
 receivedAmountt = 20;
 transactionDate = "<null>";
 transactionId = "<null>";
 },
 {
 approvalCode = "<null>";
 bankName = "<null>";
 billId = "<null>";
 cardInfo = "<null>";
 cardType = "<null>";
 changeReturn = "<null>";
 changeReturns = "<null>";
 counterId = "<null>";
 couponNumber = "<null>";
 cusomer = "<null>";
 dateAndTime = "<null>";
 dateTime = "<null>";
 modeOfPayment = Cash;
 otp = "<null>";
 paidAmount = 5;
 receivedAmount = "<null>";
 receivedAmountt = 5;
 transactionDate = "<null>";
 transactionId = "<null>";
 }
 );
 billDate = "2017-05-26 11:40:01";
 billDateStr = "26/05/2017 11:40:01";
 billDiscounts =     (
 );
 billExchangeBalance = 0;
 billExchangedItems =     (
 );
 billId = BL170526114001482;
 billItems =     (
 {
 availQty = 44;
 balanceQty = 1;
 billId = BL170526114001482;
 billItems = "<null>";
 "bill_item_id" = 12153;
 brand = "SAHYADRI FARMS";
 category = "FRUITS AND VEGETABLES";
 department = "";
 discountId = "<null>";
 discountPrice = 0;
 discountPriceStr = "0.0";
 discountType = "<null>";
 editable = 0;
 editedPrice = 0;
 "edited_price" = "0.0";
 employeeName = "<null>";
 employeeSaleId = "<null>";
 gross = "";
 itemDiscount = 20;
 itemDiscountDesc = "";
 itemDiscountStr = "20.0";
 itemScanCode = 001O;
 itemScanFlag = 0;
 itemTaxable = 0;
 itemUnitPrice = 35;
 "item_category" = "<null>";
 "item_name" = "Apple Ber ";
 "item_total_price" = 35;
 manufacturedItem = 0;
 measureRange = 500;
 model = NA;
 mrp = 35;
 mrpPrice = "35.0";
 netCost = "15.00";
 packed = 0;
 pluCode = 001O01;
 productRange = "";
 promoDetail = "<null>";
 promoDetails =             (
 );
 promoItemFlag = "";
 quantity = 1;
 section = "";
 sequenceNum = 0;
 "sku_id" = 001O;
 status = " ";
 subCategory = FRUITS;
 subDepartment = NA;
 taxCode = "";
 taxCost = "<null>";
 taxRate = 0;
 zeroStock = 0;
 }
 );
 billReturnItems =     (
 );
 billTaxes =     (
 );
 billTimeDuration = 0;
 billTimeDurationAcceptPrint = 55;
 billTimeDurationAcceptPrintStr = "<null>";
 billTimeDurationStr = "<null>";
 "bill_date" = "26/05/2017";
 billingChannel = Direct;
 billingItemTaxes =     (
 );
 billingTransactions =     (
 {
 approvalCode = "";
 bankName = "";
 billId = BL170526114001482;
 cardInfo = "";
 cardType = "-";
 changeReturn = "0.0";
 changeReturns = 0;
 counterId = "<null>";
 couponNumber = "";
 cusomer = "<null>";
 dateAndTime = "2017-05-26 11:40:03";
 dateTime = "26/05/2017 11:40:03";
 modeOfPayment = Credits;
 otp = "<null>";
 paidAmount = 20;
 receivedAmount = "20.0";
 receivedAmountt = 20;
 transactionDate = "2017-05-26 11:40:01";
 transactionId = TX1705261140010012;
 },
 {
 approvalCode = "";
 bankName = "";
 billId = BL170526114001482;
 cardInfo = "";
 cardType = NA;
 changeReturn = "0.0";
 changeReturns = 0;
 counterId = "<null>";
 couponNumber = "";
 cusomer = "<null>";
 dateAndTime = "2017-05-26 11:40:03";
 dateTime = "26/05/2017 11:40:03";
 modeOfPayment = Cash;
 otp = "<null>";
 paidAmount = 5;
 receivedAmount = "5.0";
 receivedAmountt = 5;
 transactionDate = "2017-05-26 11:40:01";
 transactionId = TX1705261140010011;
 }
 );
 brand = "<null>";
 businessDate = "2017-05-26 11:40:03";
 "business_date" = "26/05/2017";
 cashierId = EMP10002;
 cashierName = SATISH;
 category = "<null>";
 changeReturnedAmount = "00.00";
 counterId = counter4;
 customerBillFormat = 0;
 customerName = "";
 customerObj = "<null>";
 date = "<null>";
 dealsInfo = "<null>";
 declareAmtCard = 0;
 declareAmtCash = 0;
 declareAmtSodex = 0;
 declareAmtTicket = 0;
 deliveryType = "<null>";
 denominations =     (
 );
 discountType = "";
 discountTypeId = "";
 dueAmount = 0;
 emailId = "";
 employeeName = "<null>";
 employeeSaleId = "";
 endDate = "<null>";
 exchangeMode = "<null>";
 exchangedBillId = "<null>";
 isPrinting = 0;
 lastUpdatedDate = "2017-05-29 15:32:12";
 lastUpdatedDateStr = "<null>";
 locationObj =     {
 address = "RADHA KRISHNA COMPLAX";
 allLocations = 0;
 area = "SHOP NO 28 , FLOT NO -29 ,SECTOR 11 , KHARGHAR , NEW MUMBAI";
 businessActivity = "Retail Outlet";
 city = Mumbai;
 country = India;
 description = "";
 geoCordinatesRequest = 0;
 gpsLatitude = "<null>";
 gpsLongitude = "<null>";
 locationId = "Kharghar Store";
 locationList = "<null>";
 "location_city" = "<null>";
 maxRecords = "<null>";
 officeMailId = "chinmayaprasad@sahyadrifarms.com";
 officePhone = "IN-1234567890";
 pin = 500037;
 requestHeader = "<null>";
 searchCriteria = "<null>";
 startIndex = "<null>";
 state = Maharashtra;
 status = 0;
 storeName = "<null>";
 };
 logo = "/var/lib/tomcat7/webapps/Configurations/CID8995452/docs/sflogo.png";
 maxRecords = "<null>";
 noOfItems = 1;
 offersInfo = "<null>";
 order = "<null>";
 orderBy = "<null>";
 otherDisc = "0.0";
 otherDiscount = 0;
 otherDiscountDesc = "<null>";
 phoneNumber = "";
 printCount = 2;
 printResponse =     {
 printFomatMapObj =         {
 billDetails =             {
 bold = "";
 content = "Items/Qty:1/01.00   Round:0.00\nPromo Discount:              0\nNet Due:                   5.0\nVAT/Tax:                   0.0\n";
 fontColor = "";
 fontName = "";
 fontSize = "";
 isBarcode = "";
 isImage = "";
 italic = "";
 keyName = billDetails;
 maxWidth = 30;
 textAlign = left;
 underline = "";
 };
 body =             {
 bold = "";
 content = "SALES BILL       Duplicate 2\n------------------------------\n";
 fontColor = "";
 fontName = "";
 fontSize = "";
 isBarcode = "";
 isImage = "";
 italic = "";
 keyName = body;
 maxWidth = 30;
 textAlign = "";
 underline = "";
 };
 bodyOtherDetails =             {
 bold = "";
 content = "Org Cd/Bill No :- Kharghar St\nore\n/BL170526114001482            \nCounter No :- counter4        \nDate :- 26/05/2017 11:40:01   \nCashier No :- EMP10002        \nSession No & Date :- 3/26/05/\n2017 11:40:01\n\n------------------------------\nSNo   Item/Desc               \nQty   Gross   Disc  Tax    Net\n------------------------------\n";
 fontColor = "";
 fontName = "";
 fontSize = "";
 isBarcode = "";
 isImage = "";
 italic = "";
 keyName = bodyOtherDetails;
 maxWidth = 30;
 textAlign = left;
 underline = "";
 };
 footer =             {
 bold = "";
 content = "\n------------------------------\n\n   Thank You. Visit Again.    \n   Inclusive of all taxes.    \n    Toll Free 7030915409      \n  #BeTheChange#KnowYourFood   \n   www.sahyadrifarms.com      \n\n\n\n\n";
 fontColor = "";
 fontName = "";
 fontSize = "";
 isBarcode = "";
 isImage = "";
 italic = "";
 keyName = footer;
 maxWidth = 30;
 textAlign = center;
 underline = "";
 };
 header =             {
 bold = "";
 content = "\n  Sahyadri Agro Retails Ltd.  \nRADHA KRISHNA COMPLAXSHOP NO \n28 , FLOT NO -29 ,SECTOR 11 ,\n KHARGHAR , NEW MUMBAI\n MumbaiMaharashtra500037India\n       VAT:27380827925V       \n            Invoice           \n------------------------------\n";
 fontColor = "";
 fontName = "";
 fontSize = "";
 isBarcode = "";
 isImage = "";
 italic = "";
 keyName = header;
 maxWidth = 30;
 textAlign = center;
 underline = "";
 };
 itemDetails =             {
 bold = "";
 content = "1   Apple Ber \n1.0           20.0  15.00\n------------------------------\n";
 fontColor = "";
 fontName = "";
 fontSize = "";
 isBarcode = "";
 isImage = "";
 italic = "";
 keyName = itemDetails;
 maxWidth = 30;
 textAlign = left;
 underline = "";
 };
 logo =             {
 bold = "";
 content = "/var/lib/tomcat7/webapps/Configurations/CID8995452/docs/sflogo.png";
 fontColor = "";
 fontName = "";
 fontSize = "";
 isBarcode = "";
 isImage = true;
 italic = "";
 keyName = logo;
 maxWidth = 30;
 textAlign = center;
 underline = "";
 };
 transactionDetails =             {
 bold = "";
 content = "\nAmount Paid by Credits    20.0\nAmount Paid by Cash        5.0\nAmount Returned:         00.00\n";
 fontColor = "";
 fontName = "";
 fontSize = "";
 isBarcode = "";
 isImage = "";
 italic = "";
 keyName = transactionDetails;
 maxWidth = 30;
 textAlign = left;
 underline = "";
 };
 };
 requestHeader = "<null>";
 responseHeader = "<null>";
 sequenceOfObject =         (
 logo,
 header,
 body,
 bodyOtherDetails,
 itemDetails,
 billDetails,
 transactionDetails,
 footer
 );
 };
 printResponseRequired = 0;
 printTime = "2017-05-26 11:40:03";
 printTimeStr = "26/05/2017 11:40:03";
 promoDiscount = 0;
 register = "<null>";
 reportDate = "<null>";
 reportEndDate = "<null>";
 reportType = "<null>";
 requHeader = "<null>";
 requestHeader = "<null>";
 responseHeader =     {
 responseCode = 0;
 responseMessage = Success;
 };
 returnMode = "<null>";
 roundOff = "0.00";
 saveReportFlag = 0;
 scanEndTime = "2017-05-26 11:39:08";
 scanEndtimeStr = "26/05/2017 11:39:08";
 scanStartTime = "2017-05-26 11:39:08";
 scanStartTimeStr = "26/05/2017 11:39:08";
 searchCriteria = "<null>";
 serialBillId = 9400005295561;
 shiftId = 3;
 sno = 3794;
 startDate = "<null>";
 startIndex = "<null>";
 status = "TA-Completed";
 "store_location" = "Kharghar Store";
 subTotal = 15;
 targetAmt = "<null>";
 tax = 0;
 totalDiscount = 20;
 totalPrice = 5;
 totalQuantityOfBill = "01.00";
 zoneId = "<null>";
 }
 
 
 
 */

#pragma  -mark labels added

/**
 * @description  this is method we are creating the label and adding them as subviews....
 * @date         30/06/2017..
 * @method       addLabelsToScrollView:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */


-(void)addLabelsToScrollView:(NSArray *)labelsArr{
    
    @try {
        
        if( (!labelsArr.count)  || (labelsArr == nil)){
            //            NSMutableDictionary * dic = [NSMutableDictionary new];
            //            [dic  setObject:@"0.00" forKey:@"taxValue"];
            //            [dic  setObject:@"Tax" forKey:@"taxCode"];
            //
            //            labelsArr =  [NSArray arrayWithObjects:dic,nil];
            
            NSMutableDictionary * dic = [NSMutableDictionary new];
            NSMutableDictionary * dic2 = [NSMutableDictionary new];
            
            dic[@"tax_value"] = @"0.00";
            dic[@"tax_code"] = @"CGST";
            
            dic2[@"tax_value"] = @"0.00";
            dic2[@"tax_code"] = @"SGST";
            
            labelsArr =  @[dic,dic2];
        }
        
        if(labelsArr.count){
            
            if(taxDetailsScrollView == nil){
                
                taxDetailsScrollView = [[UIScrollView alloc] init];
                
                taxDetailsScrollView.delegate = self;
                //            taxDetailsScrollView.scrollEnabled = YES;
                //            taxDetailsScrollView.pagingEnabled = YES;
                //            taxDetailsScrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite;
                //            taxDetailsScrollView.showsHorizontalScrollIndicator = NO;
                taxDetailsScrollView.showsVerticalScrollIndicator = YES;
                //            taxDetailsScrollView.scrollEnabled = YES;
                //            taxDetailsScrollView.scrollIndicatorInsets = UIEdgeInsetsMake(30, 0, 0, 10);
                //            taxDetailsScrollView.showsVerticalScrollIndicator = YES;
                //            taxDetailsScrollView.alwaysBounceVertical = NO;
                //            taxDetailsScrollView.alwaysBounceHorizontal = NO;
                //            taxDetailsScrollView.bounces = NO;
                //            taxDetailsScrollView.hidden = NO;
                //            [taxDetailsScrollView flashScrollIndicators];
                
                
                //                [detailsFooterScrollView addSubview:taxDetailsScrollView];
                
                
                
                scrollViewBarImgView = [[UIImageView alloc] init];
                UIImage *imgBar = [UIImage imageNamed:@"Gradient_2.png"];
                scrollViewBarImgView.image = imgBar;
                CGRect frame = scrollViewBarImgView.frame;
                frame.size.width = 8;
                frame.size.height = 60;
                frame.origin.x = 312;
                frame.origin.y = 0;
                scrollViewBarImgView.frame = frame;
                
                
                
                
            }
            else{
                
                
                for(id view in taxDetailsScrollView.subviews){
                    
                    [view removeFromSuperview];
                    
                }
                
            }
            
            
            float origin_y = 5;
            
            
            for(NSDictionary * dic in labelsArr){
                
                UILabel *statusNameLbl = [[UILabel alloc] init];
                statusNameLbl.layer.masksToBounds = YES;
                statusNameLbl.numberOfLines = 2;
                statusNameLbl.textAlignment = NSTextAlignmentLeft;
                statusNameLbl.textColor = [UIColor whiteColor];
                
                
                UILabel *statusValueLbl = [[UILabel alloc] init];
                statusValueLbl.layer.masksToBounds = YES;
                statusValueLbl.numberOfLines = 2;
                statusValueLbl.textAlignment = NSTextAlignmentLeft;
                statusValueLbl.textColor = [UIColor whiteColor];
                
                
                statusNameLbl.frame =  CGRectMake( 0, origin_y, taxlbl.frame.size.width, 30);
                statusValueLbl.frame =  CGRectMake( 220, origin_y, taxlblValue.frame.size.width - 10, 30);
                
                
                
                [taxDetailsScrollView addSubview:statusNameLbl];
                [taxDetailsScrollView addSubview:statusValueLbl];
                
                @try {
                    
                    statusNameLbl.text = [NSString stringWithFormat:@"%@", [self checkGivenValueIsNullOrNil:[dic valueForKey:@"tax_code"] defaultReturn:@"--"]];
                    
                    statusValueLbl.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[dic valueForKey:@"tax_value"] defaultReturn:@"0.00"] floatValue]];
                    
                } @catch (NSException *exception) {
                    
                }
                
                origin_y = origin_y + statusNameLbl.frame.size.height;
                
                
                
            }
            
            
            [taxDetailsScrollView addSubview:scrollViewBarImgView];
            
            
            scrollViewBarImgView.frame = CGRectMake( taxDetailsScrollView.frame.size.width - 10, 0, 10, 40);
            
            
            
            taxDetailsScrollView.contentSize = CGSizeMake( taxDetailsScrollView.frame.size.width, origin_y);
            
            
            //        taxDetailsScrollView.scrollEnabled = YES;
            //        taxDetailsScrollView.pagingEnabled = YES;
            //        taxDetailsScrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite;
            taxDetailsScrollView.indicatorStyle = UIScrollViewIndicatorStyleBlack;
            
            //        taxDetailsScrollView.showsHorizontalScrollIndicator = NO;
            taxDetailsScrollView.showsVerticalScrollIndicator = YES;
            //        taxDetailsScrollView.scrollEnabled = YES;
            ////        taxDetailsScrollView.scrollIndicatorInsets = UIEdgeInsetsMake(30, 0, 0, 10);
            //        taxDetailsScrollView.showsVerticalScrollIndicator = YES;
            //        taxDetailsScrollView.alwaysBounceVertical = NO;
            //        taxDetailsScrollView.alwaysBounceHorizontal = NO;
            //        taxDetailsScrollView.bounces = NO;
            //        taxDetailsScrollView.hidden = NO;
            //        [taxDetailsScrollView flashScrollIndicators];
            //
            //        taxDetailsScrollView.bounces = YES;
            //
            //        taxDetailsScrollView.backgroundColor = [UIColor redColor];
            //
            //        taxDetailsScrollView.showsVerticalScrollIndicator = YES;
            //        [taxDetailsScrollView flashScrollIndicators];
            
            if( labelsArr.count <= 2)
                scrollViewBarImgView.hidden = YES;
            else
                scrollViewBarImgView.hidden = NO;
            
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:taxDetailsScrollView andSubViews:YES fontSize:18.0 cornerRadius:10.0f];
            
            
            taxDetailsScrollView.hidden = NO;
            
            //            scrollViewBarImgView.hidden = NO;
            
        }
        else{
            
            //            if((taxDetailsScrollView != nil) && (scrollViewBarImgView != nil)){
            
            taxDetailsScrollView.hidden = YES;
            //                detailsFooterScrollView.hidden = YES;
            scrollViewBarImgView.hidden = YES;
            
            //            }
            
        }
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

#pragma -mark UIScrollView delegate methods....

/**
 * @description  this is method will be executed when scrollView in
 * @date         30/06/2017..
 * @method       scrollViewDidScroll:
 * @author       Srinivasulu
 * @param        UIScrollView
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)scrollViewDidScroll:(UIScrollView *)taxScrollView
{
    
    @try {
        if(taxScrollView == taxDetailsScrollView){
            
            //reading the scrollView frame && scrollView offSet....
            CGPoint offset = scrollView.contentOffset;
            CGRect frame = scrollViewBarImgView.frame;
            
            float fact = (scrollView.contentSize.height + 50) / scrollView.contentSize.height;
            
            frame.origin.y = offset.y + (offset.y/fact);
            
            [UIView beginAnimations:nil context:nil];
            [UIView setAnimationDuration:0.1];
            scrollViewBarImgView.frame = frame;
            [UIView commitAnimations];
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

#pragma  -mark methods related returnView....

/**
 * @description  in this method we are froming the return details screen view....
 * @date
 * @method       populateReturnView:
 * @author
 * @param        BOOL
 * @param
 * @return       void
 *
 *
 * @modified By  Srinivasulu on 01/11/2017....
 * @reason       changed the complete displaying and frames logic and removed framing for iPhone and Ipad portrait && reading data from localizedstringfile....
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateReturnView:(BOOL)isSubmitEnable {
    
    //written by Srinivasulu on 01/11/2017......
    //reason to provide some information variables handle in this method....
    
    //           //returnView belongs to the left side part of the view in which we are displaying billed items....
    //            returnView.hidden = NO;
    //            returnView.backgroundColor = [UIColor redColor];
    
    //            //returnScrollView belongs to the right side part of the view in which we are displaying returned billed items....
    //            returnScrollView.hidden = NO;
    //            returnScrollView.backgroundColor = [UIColor redColor];
    
    //            //returnDetailsView belongs to the right side part of the view in which we are displaying returned billed amount columns....
    //            returnDetailsView.hidden = NO;
    //            returnDetailsView.backgroundColor = [UIColor redColor];
    
    @try {
        
        returnView = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        returnView.backgroundColor = [UIColor clearColor];
        returnView.bounces = FALSE;
        returnView.hidden = NO;
        
        itemScroll = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        itemScroll.backgroundColor = [UIColor clearColor];
        itemScroll.bounces = FALSE;
        itemScroll.hidden = NO;
        
        returnDetailsView = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        returnDetailsView.backgroundColor = [UIColor clearColor];
        returnDetailsView.bounces = FALSE;
        returnDetailsView.hidden = NO;
        
        tempReturnItems = [[NSMutableArray alloc] init];
        tempReturnItems = [tempArrayItems mutableCopy];
        
        for (int i = 0; i < tempReturnItems.count; i++) {
            
            NSDictionary *temp = tempReturnItems[i];
            float price = [[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]/[[temp valueForKey:QUANTITY] floatValue];
            if ([[temp valueForKey:EDITED_PRICE] floatValue] > 0) {
                price = [[temp valueForKey:EDITED_PRICE] floatValue];
            }
            NSMutableDictionary *itemDic = [NSMutableDictionary new];
            [itemDic setValue:[temp valueForKey:SKU_ID] forKey:SKU_ID];
            [itemDic setValue:[temp valueForKey:ITEM_NAME] forKey:ITEM_NAME];
            [itemDic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:QUANTITY] floatValue]] forKey:QUANTITY];
            [itemDic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]] forKey:ITEM_TOTAL_PRICE];
            [itemDic setValue:[NSString stringWithFormat:@"%.2f",price] forKey:ITEM_UNIT_PRICE];
            [itemDic setValue:[NSString stringWithFormat:@"%@",@"0.00"] forKey:RETURN_QUANTITY];
            [itemDic setValue:[temp valueForKey:TAX_CODE] forKey:TAX_CODE];
            [itemDic setValue:[temp valueForKey:TAX_RATE] forKey:TAX_RATE];
            [itemDic setValue:[temp valueForKey:PLU_CODE] forKey:PLU_CODE];
            [itemDic setValue:[temp valueForKey:EDITED_PRICE] forKey:EDITED_PRICE];
            [itemDic setValue:[temp valueForKey:MRP_Price] forKey:MRP_Price];
            [itemDic setValue:[temp valueForKey:ITEM_DISCOUNT] forKey:ITEM_DISCOUNT];
            [itemDic setValue:@([[temp valueForKey:ITEM_OFFER_PRICE] floatValue]) forKey:ITEM_OFFER_PRICE];
            [itemDic setValue:@([[temp valueForKey:ITEM_DEAL_PRICE] floatValue]) forKey:ITEM_DEAL_PRICE];
            [itemDic setValue:@([[temp valueForKey:kIsManuFacturedItem] boolValue]) forKey:kIsManuFacturedItem];
            [itemDic setValue:@([[temp valueForKey:kPackagedType] boolValue]) forKey:kPackagedType];
            
            //changed has to be done here written by Srinivasulu on 31/07/2017....
            
            if (([temp.allKeys containsObject:DISCOUNT_PRICE] && ![temp[DISCOUNT_PRICE] isKindOfClass:[NSNull class]])) {
                
                itemDic[DISCOUNT_PRICE] = temp[DISCOUNT_PRICE];
            }
            
            if (([temp.allKeys containsObject:TAX_COST] && ![temp[TAX_COST] isKindOfClass:[NSNull class]])) {
                
                itemDic[TAX_COST] = temp[TAX_COST];
            }
            
            if (([temp.allKeys containsObject:BILLED_ITEM_UNIT_PRICE] && ![temp[BILLED_ITEM_UNIT_PRICE] isKindOfClass:[NSNull class]])) {
                
                itemDic[BILLED_ITEM_UNIT_PRICE] = temp[BILLED_ITEM_UNIT_PRICE];
            }
            
            //upot here on 31/07/2017.....
            
            tempReturnItems[i] = itemDic;
        }
        
        
        off = [UIImage imageNamed:@"checkbox_off_background.png"];
        on  = [UIImage imageNamed:@"checkbox_on_background.png"];
        
        returnBillID = [[UILabel alloc] init] ;
        returnBillID.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        returnBillID.textColor = [UIColor whiteColor];
        returnBillID.backgroundColor = [UIColor clearColor];
        
        returnBillIDValue = [[UILabel alloc] init] ;
        returnBillIDValue.text = billIDValue.text;
        returnBillIDValue.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        returnBillIDValue.textColor = [UIColor whiteColor];
        returnBillIDValue.backgroundColor = [UIColor clearColor];
        
        label_1 = [[UILabel alloc] init] ;
        label_1.layer.cornerRadius = 10;
        label_1.textAlignment = NSTextAlignmentCenter;
        label_1.layer.masksToBounds = YES;
        label_1.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_1.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_1.textColor = [UIColor whiteColor];
        
        label_2 = [[UILabel alloc] init] ;
        label_2.layer.cornerRadius = 10;
        label_2.layer.masksToBounds = YES;
        label_2.textAlignment = NSTextAlignmentCenter;
        label_2.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_2.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_2.textColor = [UIColor whiteColor];
        
        label_3 = [[UILabel alloc] init] ;
        label_3.layer.cornerRadius = 10;
        label_3.layer.masksToBounds = YES;
        label_3.textAlignment = NSTextAlignmentCenter;
        label_3.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_3.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_3.textColor = [UIColor whiteColor];
        
        label_4 = [[UILabel alloc] init] ;
        label_4.layer.cornerRadius = 10;
        label_4.layer.masksToBounds = YES;
        label_4.textAlignment = NSTextAlignmentCenter;
        label_4.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_4.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];;
        label_4.textColor = [UIColor whiteColor];
        
        label_5 = [[UILabel alloc] init] ;
        label_5.layer.cornerRadius = 10;
        label_5.layer.masksToBounds = YES;
        label_5.textAlignment = NSTextAlignmentCenter;
        label_5.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_5.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_5.textColor = [UIColor whiteColor];
        
        itemTable = [[UITableView alloc] init];
        itemTable.backgroundColor = [UIColor clearColor];
        itemTable.layer.borderColor = [UIColor grayColor].CGColor;
        itemTable.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
        itemTable.bounces = TRUE;
        itemTable.dataSource = self;
        itemTable.delegate = self;
        itemTable.separatorStyle = UITableViewCellSeparatorStyleNone;
        
        total_Bill =[[UILabel alloc] init] ;
        total_Bill.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        total_Bill.textColor = [UIColor whiteColor];
        total_Bill.backgroundColor = [UIColor clearColor];
        
        total_Bill_Value = [[UILabel alloc] init];
        total_Bill_Value.text = totalBillValue.text;
        total_Bill_Value.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        total_Bill_Value.textColor = [UIColor whiteColor];
        total_Bill_Value.backgroundColor = [UIColor clearColor];
        
        deals = [[UILabel alloc] init];
        deals.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        deals.textColor = [UIColor whiteColor];
        deals.backgroundColor = [UIColor clearColor];
        
        deals_value = [[UILabel alloc] init] ;
        deals_value.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        deals_value.textColor = [UIColor whiteColor];
        deals_value.backgroundColor = [UIColor clearColor];
        
        subtotal = [[UILabel alloc] init] ;
        subtotal.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        subtotal.textColor = [UIColor whiteColor];
        subtotal.backgroundColor = [UIColor clearColor];
        
        subtotal_value = [[UILabel alloc] init] ;
        subtotal_value.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        subtotal_value.textColor = [UIColor whiteColor];
        subtotal_value.backgroundColor = [UIColor clearColor];
        
        
        returningTotalBill =[[UILabel alloc] init] ;
        returningTotalBill.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        returningTotalBill.textColor = [UIColor whiteColor];
        returningTotalBill.backgroundColor = [UIColor clearColor];
        
        returningTotalBillValue = [[UILabel alloc] init];
        returningTotalBillValue.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        returningTotalBillValue.textColor = [UIColor whiteColor];
        returningTotalBillValue.backgroundColor = [UIColor clearColor];
        
        returnedTotalBill =[[UILabel alloc] init] ;
        returnedTotalBill.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        returnedTotalBill.textColor = [UIColor whiteColor];
        returnedTotalBill.backgroundColor = [UIColor clearColor];
        
        returnedTotalBillValue = [[UILabel alloc] init];
        returnedTotalBillValue.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        returnedTotalBillValue.textColor = [UIColor whiteColor];
        returnedTotalBillValue.backgroundColor = [UIColor clearColor];
        
        
        reason = [[UILabel alloc] init] ;
        reason.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        reason.textColor = [UIColor whiteColor];
        reason.backgroundColor = [UIColor clearColor];
        
        
        submitButton = [[UIButton alloc] init];
        [submitButton addTarget:self action:@selector(addReturnItems) forControlEvents:UIControlEventTouchUpInside];
        [submitButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        submitButton.layer.cornerRadius = 10;
        submitButton.layer.masksToBounds = YES;
        submitButton.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        
        
        UIButton * backBtn = [[UIButton alloc] init];
        [backBtn addTarget:self action:@selector(backAction) forControlEvents:UIControlEventTouchUpInside];
        [backBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        backBtn.layer.cornerRadius = 10;
        backBtn.layer.masksToBounds = 10;
        backBtn.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        
        UILabel * underLineLbl_1 = [[UILabel alloc] init];
        underLineLbl_1.textColor = [UIColor whiteColor];
        underLineLbl_1.backgroundColor = [UIColor clearColor];
        underLineLbl_1.backgroundColor = [UIColor lightGrayColor];
        
        UILabel * underLineLbl_2 = [[UILabel alloc] init];
        underLineLbl_2.textColor = [UIColor whiteColor];
        underLineLbl_2.backgroundColor = [UIColor clearColor];
        underLineLbl_2.backgroundColor = [UIColor lightGrayColor];
        
        
        //populating text into UILabel & UIButtons....
        @try {
            
            
            returnBillID.text = NSLocalizedString(@"bill_iD", nil);
            
            
            label_1.text = NSLocalizedString(@"item", nil);
            label_2.text = NSLocalizedString(@"price", nil);
            //        label_3.text = @"Avail Qty";
            label_3.text = NSLocalizedString(@"billed_items", nil);
            label_4.text = NSLocalizedString(@"return_qty", nil);
            label_5.text = NSLocalizedString(@"cost", nil);
            
            total_Bill.text = NSLocalizedString(@"total_bill", nil);
            deals.text = NSLocalizedString(@"tax", nil);
            subtotal.text = NSLocalizedString(@"sub_total", nil);
            
            returningTotalBill.text = NSLocalizedString(@"returning_item_bill", nil);
            returnedTotalBill.text = NSLocalizedString(@"returned_amount", nil);
            
            //it is not using for display currently....
            reason.text = NSLocalizedString(@"reason", nil);
            
            [submitButton setTitle:NSLocalizedString(@"submit_", nil) forState:UIControlStateNormal];
            [backBtn setTitle:NSLocalizedString(@"back", nil) forState:UIControlStateNormal];
            
            returnedTotalBillValue.text = @"0.00";
            
            subtotal_value.text = subTotalBillValue.text;
            deals_value.text = taxlblValue.text;
            
            
            float returnedAmt = 0;
            
            for (NSDictionary *dic in tempReturnDetails) {
                
                returnedAmt += [dic[ITEM_UNIT_PRICE] floatValue] * [dic[QUANTITY] floatValue];
            }
            
            returnedTotalBillValue.text = [NSString stringWithFormat:@"%.2f",returnedAmt];
            
        } @catch (NSException *exception) {
            
        } @finally {
            
        }
        
        if (!isSubmitEnable) {
            
            submitButton.enabled = TRUE;
        }
        
        
        //    if ([tempReturnItems count] == [tempReturnDetails count]) {
        //
        //        submitButton.enabled = FALSE;
        //    }
        
        [returnView addSubview:returnBillID];
        [returnView addSubview:returnBillIDValue];
        [returnView addSubview:label_1];
        [returnView addSubview:label_2];
        [returnView addSubview:label_3];
        [returnView addSubview:label_4];
        [returnView addSubview:label_5];
        [itemScroll addSubview:itemTable];
        
        [returnView addSubview:total_Bill];
        [returnView addSubview:total_Bill_Value];
        [returnView addSubview:deals];
        [returnView addSubview:deals_value];
        [returnView addSubview:subtotal];
        [returnView addSubview:subtotal_value];
        
        [returnDetailsView addSubview:underLineLbl_1];
        [returnDetailsView addSubview:underLineLbl_2];
        
        [returnDetailsView addSubview:returnedTotalBillValue];
        [returnDetailsView addSubview:returnedTotalBill];
        [returnDetailsView addSubview:returningTotalBill];
        [returnDetailsView addSubview:returningTotalBillValue];
        
        [returnDetailsView addSubview:submitButton];
        [returnDetailsView addSubview:backBtn];
        
        
        //commented by Srinivasulu on 02/08/2017....
        //added by  Srinivasulu on 16/10/2017..
        returnDetailsView.scrollEnabled = NO;
        
        //            [returnDetailsView addSubview:reason];
        
        //upto here on 02/08/2017....
        
        [returnView addSubview:itemScroll];
        
        //used in leftSide....
        [self.view addSubview:returnView];
        
        //used in rightSide....
        [self.view addSubview:returnScrollView];
        [self.view addSubview:returnDetailsView];
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                
            }
            else {
                
            }
            
            returnView.frame = CGRectMake( 0, mainSegmentedControl.frame.origin.y + mainSegmentedControl.frame.size.height + 10, (self.view.frame.size.width/2), segmentedControl.frame.origin.y - (mainSegmentedControl.frame.origin.y + mainSegmentedControl.frame.size.height + 10) );
            
            
            //start of left side view framing....
            
            returnBillID.frame = CGRectMake( 80, 5.0, 120.0, 30);
            returnBillIDValue.frame = CGRectMake( returnBillID.frame.origin.x + returnBillID.frame.size.width + 10, returnBillID.frame.origin.y, 250, 30.0);
            
            label_1.frame = CGRectMake( 5, returnBillID.frame.origin.y + returnBillID.frame.size.height + 10, 80, 30);
            label_2.frame = CGRectMake( label_1.frame.origin.x + label_1.frame.size.width + 2, label_1.frame.origin.y, 90, 30);
            label_3.frame = CGRectMake( label_2.frame.origin.x + label_2.frame.size.width + 2, label_1.frame.origin.y, 95, 30);
            label_4.frame = CGRectMake( label_3.frame.origin.x + label_3.frame.size.width + 2, label_1.frame.origin.y, 95, 30);
            label_5.frame = CGRectMake( label_4.frame.origin.x + label_4.frame.size.width + 2, label_1.frame.origin.y, 90, 30);
            
            //            total_Bill.frame = CGRectMake( 0, returnView.frame.size.height - 50, returnView.frame.size.width/2, 30);
            //            deals.frame = CGRectMake( total_Bill.frame.origin.x, total_Bill.frame.origin.y - total_Bill.frame.size.height, total_Bill.frame.size.width, total_Bill.frame.size.height);
            //            subtotal.frame = CGRectMake( total_Bill.frame.origin.x, deals.frame.origin.y - total_Bill.frame.size.height, total_Bill.frame.size.width, total_Bill.frame.size.height);
            //
            //            subtotal_value.frame =  CGRectMake( subtotal.frame.origin.x + subtotal.frame.size.width, subtotal.frame.origin.y, total_Bill.frame.size.width, total_Bill.frame.size.height);
            //            deals_value.frame =  CGRectMake( subtotal_value.frame.origin.x, deals.frame.origin.y, total_Bill.frame.size.width, total_Bill.frame.size.height);
            //            total_Bill_Value.frame =  CGRectMake( subtotal_value.frame.origin.x, total_Bill.frame.origin.y, total_Bill.frame.size.width, total_Bill.frame.size.height);
            
            
            total_Bill_Value.frame =  CGRectMake( label_5.frame.origin.x + label_5.frame.size.width - 220, returnView.frame.size.height - 50, 220, 40);
            deals_value.frame = CGRectMake( total_Bill_Value.frame.origin.x, total_Bill_Value.frame.origin.y - total_Bill_Value.frame.size.height, total_Bill_Value.frame.size.width, total_Bill_Value.frame.size.height);
            subtotal_value.frame = CGRectMake( total_Bill_Value.frame.origin.x, deals_value.frame.origin.y - total_Bill_Value.frame.size.height, total_Bill_Value.frame.size.width, total_Bill_Value.frame.size.height);
            
            
            total_Bill.frame = CGRectMake( label_1.frame.origin.x, total_Bill_Value.frame.origin.y, total_Bill_Value.frame.origin.x - label_1.frame.origin.x, total_Bill_Value.frame.size.height);
            deals.frame =CGRectMake( total_Bill.frame.origin.x, deals_value.frame.origin.y, deals_value.frame.size.width, total_Bill.frame.size.height);
            subtotal.frame = CGRectMake( total_Bill.frame.origin.x, subtotal_value.frame.origin.y, total_Bill.frame.size.width, total_Bill.frame.size.height);
            
            
            
            
            
            
            
            subtotal_value.textAlignment = NSTextAlignmentRight;
            deals_value.textAlignment = NSTextAlignmentRight;
            total_Bill_Value.textAlignment = NSTextAlignmentRight;
            
            
            itemScroll.frame = CGRectMake( returnView.frame.origin.x, label_1.frame.origin.y + label_1.frame.size.height + 5, returnView.frame.size.width, subtotal.frame.origin.y - (label_1.frame.origin.y + label_1.frame.size.height + 5));
            itemTable.frame = CGRectMake( 0, 0, itemScroll.frame.size.width, itemScroll.frame.size.height);
            
            //end of left side view framing....
            
            //start of right size view framing....
            
            underLineLbl_1.frame =  CGRectMake( 500 - (self.view.frame.size.width/4), 0, self.view.frame.size.width/4 , 2);;
            
            returnedTotalBill.frame =  CGRectMake( underLineLbl_1.frame.origin.x, 0, underLineLbl_1.frame.size.width * 0.6 , 38);
            returningTotalBill.frame = CGRectMake( returnedTotalBill.frame.origin.x, returnedTotalBill.frame.origin.y + returnedTotalBill.frame.size.height, returnedTotalBill.frame.size.width, returnedTotalBill.frame.size.height);
            
            returnedTotalBillValue.frame = CGRectMake( returnedTotalBill.frame.origin.x + returnedTotalBill.frame.size.width, returnedTotalBill.frame.origin.y, underLineLbl_1.frame.size.width - returnedTotalBill.frame.size.width, returnedTotalBill.frame.size.height);
            
            returningTotalBillValue.frame = CGRectMake( returnedTotalBillValue.frame.origin.x, returningTotalBill.frame.origin.y, returnedTotalBillValue.frame.size.width, returnedTotalBill.frame.size.height);
            
            underLineLbl_2.frame =  CGRectMake( underLineLbl_1.frame.origin.x, returningTotalBillValue.frame.origin.y + returningTotalBillValue.frame.size.height, underLineLbl_1.frame.size.width, 2);
            
            returnedTotalBillValue.textAlignment = NSTextAlignmentRight;
            returningTotalBillValue.textAlignment = NSTextAlignmentRight;
            
            
            submitButton.frame = CGRectMake( 20, underLineLbl_2.frame.origin.y + underLineLbl_2.frame.size.height + 10, 180, 40);
            
            backBtn.frame = CGRectMake( (self.view.frame.size.width / 2) - 190, submitButton.frame.origin.y, 180, 40);
            
            
            returnDetailsView.frame = CGRectMake( (self.view.frame.size.width/2), (returnView.frame.origin.y +  returnView.frame.size.height) - (submitButton.frame.origin.y + submitButton.frame.size.height + 5),  (self.view.frame.size.width/2), submitButton.frame.origin.y + submitButton.frame.size.height + 5);
            
            
            returnScrollView.frame = CGRectMake( returnView.frame.size.width, returnView.frame.origin.y, returnView.frame.size.width, returnDetailsView.frame.origin.y - returnView.frame.origin.y);
            
            
            returnDetails.frame = CGRectMake(  returnScrollView.frame.size.width/4 - 100, 5, 200.0, 30);
            
            label_11.frame = CGRectMake( 5, returnDetails.frame.origin.y + returnDetails.frame.size.height + 10, 125, 30);
            label_12.frame = CGRectMake( label_11.frame.origin.x + label_11.frame.size.width + 2, label_1.frame.origin.y, 90, 30);
            label_13.frame = CGRectMake( label_12.frame.origin.x + label_12.frame.size.width + 2, label_11.frame.origin.y, 95, 30);
            label_15.frame = CGRectMake( label_13.frame.origin.x + label_13.frame.size.width + 2, label_11.frame.origin.y, 95, 30);
            label_14.frame = CGRectMake( label_15.frame.origin.x + label_15.frame.size.width + 2, label_11.frame.origin.y, 90, 30);
            
            scrollView2.frame = CGRectMake( 0, label_11.frame.origin.y + label_11.frame.size.height + 5, returnView.frame.size.width, returnScrollView.frame.size.height - (label_11.frame.origin.y + label_11.frame.size.height + 5));
            
            returnDetailsTable.frame = CGRectMake( 0, 0, scrollView2.frame.size.width, scrollView2.frame.size.height);
            
            returnDetails.font = [UIFont boldSystemFontOfSize:25];
            
            scrollView2.contentSize = CGSizeMake( scrollView2.frame.size.width, scrollView2.frame.size.height);
            
            
            
            returnBillID.font = [UIFont boldSystemFontOfSize:25];
            returnBillIDValue.font = [UIFont boldSystemFontOfSize:22];
            label_1.font = [UIFont systemFontOfSize:18];
            label_2.font = [UIFont systemFontOfSize:18];
            label_3.font = [UIFont systemFontOfSize:18];
            label_4.font = [UIFont systemFontOfSize:18];
            label_5.font = [UIFont systemFontOfSize:18];
            subtotal.font = [UIFont systemFontOfSize:18];
            subtotal_value.font = [UIFont systemFontOfSize:18];
            deals.font = [UIFont systemFontOfSize:18];
            deals_value.font = [UIFont systemFontOfSize:18];
            total_Bill.font = [UIFont systemFontOfSize:18];
            total_Bill_Value.font = [UIFont systemFontOfSize:18];
            returnedTotalBill.font = [UIFont systemFontOfSize:18];
            returnedTotalBillValue.font =[UIFont systemFontOfSize:18];
            returningTotalBill.font = [UIFont systemFontOfSize:18];
            returningTotalBillValue.font =[UIFont systemFontOfSize:18];
            reason.font = [UIFont systemFontOfSize:18];
            submitButton.titleLabel.font = [UIFont systemFontOfSize:25.0];
            backBtn.titleLabel.font = [UIFont systemFontOfSize:25.0];
            
            //end of right side view framing....
            
            //-------  ------- ------- -------
            
            
            //            returnView.frame = CGRectMake(0, 70, (self.view.frame.size.width/2) + 30, self.view.frame.size.height - 200);
            
            
            //            returnBillID.frame = CGRectMake(80, 5.0, 120.0, 30);
            //            returnBillIDValue.frame = CGRectMake(230, 5.0, 250, 30.0);
            //            returnBillID.font = [UIFont boldSystemFontOfSize:25];
            //            returnBillIDValue.font = [UIFont boldSystemFontOfSize:22];
            //
            //            label_1.font = [UIFont systemFontOfSize:18];
            //            label_1.frame = CGRectMake(10, 50, 90, 30);
            //            label_2.font = [UIFont systemFontOfSize:18];
            //            label_2.frame = CGRectMake(105, 50, 90, 30);
            //            label_3.font = [UIFont systemFontOfSize:18];
            //            label_3.frame = CGRectMake(200, 50, 100, 30);
            //            label_4.font = [UIFont systemFontOfSize:18];
            //            label_4.frame = CGRectMake(305, 50, 100, 30);
            //            label_5.font = [UIFont systemFontOfSize:18];
            //            label_5.frame = CGRectMake(410, 50, 90, 30);
            //
            //            itemScroll.frame = CGRectMake(0, 90, 550,240);
            //            itemScroll.contentSize = CGSizeMake(778, 1200);
            //            itemTable.frame = CGRectMake(0.0, 0, 550, 240);
            //
            //            returnDetailsView.frame = CGRectMake(550, 300, 550,300);
            //            returnDetailsView.contentSize = CGSizeMake(550, 500);
            //
            //            subtotal.frame = CGRectMake(10.0, 340, 120.0, 30.0);
            //            subtotal.font = [UIFont systemFontOfSize:18];
            //            subtotal_value.frame = CGRectMake(380,340, 120.0, 30.0);
            //            subtotal_value.font = [UIFont systemFontOfSize:18];
            //
            //            deals.frame = CGRectMake(10.0, subtotal.frame.origin.y + subtotal.frame.size.height, 180, 30.0);
            //            deals.font = [UIFont systemFontOfSize:18];
            //            deals_value.frame = CGRectMake(380,subtotal.frame.origin.y + subtotal.frame.size.height, 120.0, 30.0);
            //            deals_value.font = [UIFont systemFontOfSize:18];
            //
            //            total_Bill.frame = CGRectMake(10.0,deals.frame.origin.y + deals.frame.size.height, 120.0, 30.0);
            //            total_Bill.font = [UIFont systemFontOfSize:18];
            //            total_Bill_Value.frame = CGRectMake(380,deals.frame.origin.y + deals.frame.size.height, 120.0, 30.0);
            //            total_Bill_Value.font = [UIFont systemFontOfSize:18];
            //
            //            returnedTotalBill.frame = CGRectMake(10.0, 60, 240.0, 30.0);
            //            returnedTotalBill.font = [UIFont systemFontOfSize:18];
            //            returnedTotalBillValue.frame = CGRectMake(380,60, 120.0, 30.0);
            //            returnedTotalBillValue.font =[UIFont systemFontOfSize:18];
            //
            //            returningTotalBill.frame = CGRectMake(10.0, 90, 240.0, 40.0);
            //            returningTotalBill.font = [UIFont systemFontOfSize:18];
            //            returningTotalBillValue.frame = CGRectMake(380,90, 120.0, 30.0);
            //            returningTotalBillValue.font =[UIFont systemFontOfSize:18];
            //            reason.frame = CGRectMake(10.0, 130, 120.0, 30);
            //            reason.font = [UIFont systemFontOfSize:18];
            //
            //            submitButton.frame = CGRectMake(360, 590, 200.0, 40);
            //            submitButton.titleLabel.font = [UIFont systemFontOfSize:25.0];
            //
            //            itemScroll.contentSize = CGSizeMake( itemScroll.frame.size.width, itemTable.frame.size.height);
            //
            //            returnView.contentSize = CGSizeMake( returnView.frame.size.width, submitButton.frame.origin.y - (segmentedControl.frame.origin.y + segmentedControl.frame.size.height));
            
        }
        else {
            
        }
        
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  in this method we are froming the return details screen view....
 * @date
 * @method       populateExchangeView:
 * @author
 * @param        BOOL
 * @param
 * @return       void
 *
 *
 * @modified By  Srinivasulu on 02/11/2017....
 * @reason       changed the complete displaying and frames logic and removed framing for iPhone and Ipad portrait && reading data from localizedstringfile....
 *
 * @verified By
 * @verified On
 *
 */


-(void)populateExchangeView:(BOOL)isBtnEnabled {
    
    @try {
        exchangeView = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        exchangeView.backgroundColor = [UIColor clearColor];
        exchangeView.bounces = FALSE;
        exchangeView.hidden = NO;
        
        itemExchScroll = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        itemExchScroll.backgroundColor = [UIColor clearColor];
        itemExchScroll.bounces = FALSE;
        itemExchScroll.hidden = NO;
        
        exchDetailsView = [[UIScrollView alloc] init];
        //scrollView.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
        exchDetailsView.backgroundColor = [UIColor clearColor];
        exchDetailsView.bounces = FALSE;
        exchDetailsView.hidden = NO;
        
        //  if (tempExchangeItems == nil) {
        
        tempExchangeItems = [[NSMutableArray alloc] init];
        tempExchangeItems = [tempArrayItems mutableCopy];
        
        for (int i = 0; i < tempExchangeItems.count; i++) {
            
            NSDictionary *temp = tempExchangeItems[i];
            float price = [[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]/[[temp valueForKey:QUANTITY] floatValue];
            if ([[temp valueForKey:EDITED_PRICE] floatValue] > 0) {
                price = [[temp valueForKey:EDITED_PRICE] floatValue];
            }
            NSMutableDictionary *itemDic = [NSMutableDictionary new];
            [itemDic setValue:[temp valueForKey:SKU_ID] forKey:SKU_ID];
            [itemDic setValue:[temp valueForKey:ITEM_NAME] forKey:ITEM_NAME];
            [itemDic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:QUANTITY] floatValue]] forKey:QUANTITY];
            [itemDic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]] forKey:ITEM_TOTAL_PRICE];
            [itemDic setValue:[NSString stringWithFormat:@"%.2f",price] forKey:ITEM_UNIT_PRICE];
            [itemDic setValue:[NSString stringWithFormat:@"%@",@"0.00"] forKey:RETURN_QUANTITY];
            [itemDic setValue:[temp valueForKey:TAX_CODE] forKey:TAX_CODE];
            [itemDic setValue:[temp valueForKey:TAX_RATE] forKey:TAX_RATE];
            [itemDic setValue:[temp valueForKey:PLU_CODE] forKey:PLU_CODE];
            [itemDic setValue:[temp valueForKey:EDITED_PRICE] forKey:EDITED_PRICE];
            [itemDic setValue:[temp valueForKey:MRP_Price] forKey:MRP_Price];
            [itemDic setValue:[temp valueForKey:ITEM_DISCOUNT] forKey:ITEM_DISCOUNT];
            [itemDic setValue:@([[temp valueForKey:ITEM_OFFER_PRICE] floatValue]) forKey:ITEM_OFFER_PRICE];
            [itemDic setValue:@([[temp valueForKey:ITEM_DEAL_PRICE] floatValue]) forKey:ITEM_DEAL_PRICE];
            
            //changed has to be done here written by Srinivasulu on 31/07/2017....
            
            if (([temp.allKeys containsObject:DISCOUNT_PRICE] && ![temp[DISCOUNT_PRICE] isKindOfClass:[NSNull class]])) {
                
                itemDic[DISCOUNT_PRICE] = temp[DISCOUNT_PRICE];
            }
            
            
            
            if (([temp.allKeys containsObject:TAX_COST] && ![temp[TAX_COST] isKindOfClass:[NSNull class]])) {
                
                itemDic[TAX_COST] = temp[TAX_COST];
            }
            
            if (([temp.allKeys containsObject:BILLED_ITEM_UNIT_PRICE] && ![temp[BILLED_ITEM_UNIT_PRICE] isKindOfClass:[NSNull class]])) {
                
                itemDic[BILLED_ITEM_UNIT_PRICE] = temp[BILLED_ITEM_UNIT_PRICE];
            }
            
            //upot here on 31/07/2017.....
            
            tempExchangeItems[i] = itemDic;
        }
        selectedItems = [[NSMutableArray alloc] init];
        exchangeTotalBillValue = [[UILabel alloc] init] ;
        exchangeTotalBillValue.text = @"0.0";
        
        
        off = [UIImage imageNamed:@"checkbox_off_background.png"];
        on  = [UIImage imageNamed:@"checkbox_on_background.png"];
        
        exchgBillID = [[UILabel alloc] init] ;
        exchgBillID.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        exchgBillID.textColor = [UIColor whiteColor];
        exchgBillID.backgroundColor = [UIColor clearColor];
        
        exchgBillIDValue = [[UILabel alloc] init] ;
        exchgBillIDValue.text = billIDValue.text;
        exchgBillIDValue.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        exchgBillIDValue.textColor = [UIColor whiteColor];
        exchgBillIDValue.backgroundColor = [UIColor clearColor];
        
        label_1 = [[UILabel alloc] init] ;
        label_1.layer.cornerRadius = 10;
        label_1.textAlignment = NSTextAlignmentCenter;
        label_1.layer.masksToBounds = YES;
        label_1.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_1.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_1.textColor = [UIColor whiteColor];
        
        label_2 = [[UILabel alloc] init] ;
        label_2.layer.cornerRadius = 10;
        label_2.layer.masksToBounds = YES;
        label_2.textAlignment = NSTextAlignmentCenter;
        label_2.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_2.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_2.textColor = [UIColor whiteColor];
        
        label_3 = [[UILabel alloc] init] ;
        label_3.layer.cornerRadius = 10;
        label_3.layer.masksToBounds = YES;
        label_3.textAlignment = NSTextAlignmentCenter;
        label_3.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_3.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_3.textColor = [UIColor whiteColor];
        
        label_4 = [[UILabel alloc] init] ;
        label_4.layer.cornerRadius = 10;
        label_4.layer.masksToBounds = YES;
        label_4.textAlignment = NSTextAlignmentCenter;
        label_4.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_4.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];;
        label_4.textColor = [UIColor whiteColor];
        
        label_5 = [[UILabel alloc] init] ;
        label_5.layer.cornerRadius = 10;
        label_5.layer.masksToBounds = YES;
        label_5.textAlignment = NSTextAlignmentCenter;
        label_5.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        label_5.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label_5.textColor = [UIColor whiteColor];
        
        itemTableExchg = [[UITableView alloc] init];
        itemTableExchg.backgroundColor = [UIColor clearColor];
        itemTableExchg.layer.borderColor = [UIColor grayColor].CGColor;
        itemTableExchg.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
        itemTableExchg.bounces = TRUE;
        itemTableExchg.dataSource = self;
        itemTableExchg.delegate = self;
        
        total_Bill = [[UILabel alloc] init] ;
        total_Bill.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        total_Bill.textColor = [UIColor whiteColor];
        total_Bill.backgroundColor = [UIColor clearColor];
        
        total_Bill_Value =[[UILabel alloc] init] ;
        total_Bill_Value.text = totalBillValue.text;
        total_Bill_Value.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        total_Bill_Value.textColor = [UIColor whiteColor];
        total_Bill_Value.backgroundColor = [UIColor clearColor];
        
        deals =[[UILabel alloc] init] ;
        deals.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        deals.textColor = [UIColor whiteColor];
        deals.backgroundColor = [UIColor clearColor];
        
        deals_value =[[UILabel alloc] init] ;
        deals_value.text = taxlblValue.text;
        deals_value.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        deals_value.textColor = [UIColor whiteColor];
        deals_value.backgroundColor = [UIColor clearColor];
        
        subtotal = [[UILabel alloc] init] ;
        subtotal.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        subtotal.textColor = [UIColor whiteColor];
        subtotal.backgroundColor = [UIColor clearColor];
        
        subtotal_value = [[UILabel alloc] init] ;
        subtotal_value.text = subTotalBillValue.text;
        subtotal_value.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        subtotal_value.textColor = [UIColor whiteColor];
        subtotal_value.backgroundColor = [UIColor clearColor];
        
        
        returningTotalBill = [[UILabel alloc] init] ;
        returningTotalBill.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        returningTotalBill.textColor = [UIColor whiteColor];
        returningTotalBill.backgroundColor = [UIColor clearColor];
        
        
        exchangeTotalBillValue.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        exchangeTotalBillValue.textColor = [UIColor whiteColor];
        exchangeTotalBillValue.backgroundColor = [UIColor clearColor];
        
        exchangedTotalBill =[[UILabel alloc] init] ;
        exchangedTotalBill.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        exchangedTotalBill.textColor = [UIColor whiteColor];
        exchangedTotalBill.backgroundColor = [UIColor clearColor];
        
        exchangedTotalBillValue = [[UILabel alloc] init];
        exchangedTotalBillValue.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        exchangedTotalBillValue.textColor = [UIColor whiteColor];
        exchangedTotalBillValue.backgroundColor = [UIColor clearColor];
        
        
        reason = [[UILabel alloc] init] ;
        reason.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0];
        reason.textColor = [UIColor whiteColor];
        reason.backgroundColor = [UIColor clearColor];
        
        
        
        submitButton = [[UIButton alloc] init];
        [submitButton addTarget:self action:@selector(addExchangeItems) forControlEvents:UIControlEventTouchUpInside];
        [submitButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        submitButton.layer.cornerRadius = 14;
        submitButton.layer.masksToBounds = YES;
        submitButton.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        
        
        UIButton * backBtn = [[UIButton alloc] init];
        [backBtn addTarget:self action:@selector(backAction) forControlEvents:UIControlEventTouchUpInside];
        [backBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        backBtn.layer.cornerRadius = 10;
        backBtn.layer.masksToBounds = 10;
        backBtn.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        
        UILabel * underLineLbl_1 = [[UILabel alloc] init];
        underLineLbl_1.textColor = [UIColor whiteColor];
        underLineLbl_1.backgroundColor = [UIColor clearColor];
        underLineLbl_1.backgroundColor = [UIColor lightGrayColor];
        
        UILabel * underLineLbl_2 = [[UILabel alloc] init];
        underLineLbl_2.textColor = [UIColor whiteColor];
        underLineLbl_2.backgroundColor = [UIColor clearColor];
        underLineLbl_2.backgroundColor = [UIColor lightGrayColor];
        
        @try {
            
            exchgBillID.text = NSLocalizedString(@"bill_iD", nil);
            
            label_1.text = NSLocalizedString(@"item", nil);
            label_2.text = NSLocalizedString(@"price", nil);
            //        label_3.text = @"Avail Qty";
            label_3.text = NSLocalizedString(@"billed_items", nil);
            label_4.text = NSLocalizedString(@"exch_qty", nil);
            label_5.text = NSLocalizedString(@"cost", nil);
            
            
            total_Bill.text = NSLocalizedString(@"total_bill", nil);
            deals.text = NSLocalizedString(@"tax", nil);
            subtotal.text = NSLocalizedString(@"sub_total", nil);
            
            returningTotalBill.text = NSLocalizedString(@"exchange_item_bill", nil);
            exchangedTotalBill.text = NSLocalizedString(@"exchanged_amount", nil);
            
            
            //it is not using for display currently....
            reason.text = NSLocalizedString(@"reason", nil);
            // reasonTextField.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"Enter your reason" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.8]}];
            
            
            [submitButton setTitle:NSLocalizedString(@"submit_", nil) forState:UIControlStateNormal];
            [backBtn setTitle:NSLocalizedString(@"back", nil) forState:UIControlStateNormal];
            
            exchangedTotalBillValue.text = @"0.00";
            
            
            float returnedAmt = 0;
            
            for (NSDictionary *dic in tempExchangeDetails) {
                
                returnedAmt += [dic[ITEM_UNIT_PRICE] floatValue] * [dic[QUANTITY] floatValue];
            }
            
            exchangedTotalBillValue.text = [NSString stringWithFormat:@"%.2f",returnedAmt];
            
        } @catch (NSException *exception) {
            
        }
        
        
        if (!isBtnEnabled) {
            
            submitButton.enabled = TRUE;
        }
        
        [exchangeView addSubview:exchgBillID];
        [exchangeView addSubview:exchgBillIDValue];
        [exchangeView addSubview:label_1];
        [exchangeView addSubview:label_2];
        [exchangeView addSubview:label_3];
        [exchangeView addSubview:label_4];
        [exchangeView addSubview:label_5];
        [itemExchScroll addSubview:itemTableExchg];
        [exchangeView addSubview:total_Bill];
        [exchangeView addSubview:total_Bill_Value];
        [exchangeView addSubview:deals];
        [exchangeView addSubview:deals_value];
        [exchangeView addSubview:subtotal];
        [exchangeView addSubview:subtotal_value];
        
        [exchDetailsView addSubview:exchangedTotalBill];
        [exchDetailsView addSubview:exchangedTotalBillValue];
        
        [exchDetailsView addSubview:underLineLbl_1];
        [exchDetailsView addSubview:underLineLbl_2];
        
        [exchDetailsView addSubview:exchangeTotalBillValue];
        [exchDetailsView addSubview:returningTotalBill];
        
        [exchDetailsView addSubview:submitButton];
        [exchDetailsView addSubview:backBtn];
        
        exchDetailsView.scrollEnabled = NO;
        exchangeView.scrollEnabled = NO;
        
        [exchangeView addSubview:itemExchScroll];
        
        //used in the left side of the view....
        [self.view addSubview:exchangeView];
        
        //used in right side of the view....
        [self.view addSubview:exchangeScrollView];
        [self.view addSubview:exchDetailsView];
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                
            }
            else {
                
            }
            
            
            exchangeView.frame = CGRectMake( 0, mainSegmentedControl.frame.origin.y + mainSegmentedControl.frame.size.height + 10, (self.view.frame.size.width/2), segmentedControl.frame.origin.y - (mainSegmentedControl.frame.origin.y + mainSegmentedControl.frame.size.height + 10) );
            
            //start of left side view framing....
            
            exchgBillID.frame = CGRectMake(80, 5.0, 120.0, 30);
            exchgBillIDValue.frame = CGRectMake(230, 5.0, 250, 30.0);
            
            exchgBillID.frame = CGRectMake( 80, 5.0, 120.0, 30);
            exchgBillIDValue.frame = CGRectMake( exchgBillID.frame.origin.x + exchgBillID.frame.size.width + 10, exchgBillID.frame.origin.y, 250, 30.0);
            
            label_1.frame = CGRectMake( 5, exchgBillIDValue.frame.origin.y + exchgBillIDValue.frame.size.height + 10, 80, 30);
            label_2.frame = CGRectMake( label_1.frame.origin.x + label_1.frame.size.width + 2, label_1.frame.origin.y, 90, 30);
            label_3.frame = CGRectMake( label_2.frame.origin.x + label_2.frame.size.width + 2, label_1.frame.origin.y, 95, 30);
            label_4.frame = CGRectMake( label_3.frame.origin.x + label_3.frame.size.width + 2, label_1.frame.origin.y, 95, 30);
            label_5.frame = CGRectMake( label_4.frame.origin.x + label_4.frame.size.width + 2, label_1.frame.origin.y, 90, 30);
            
            //            total_Bill.frame = CGRectMake( 0, exchangeView.frame.size.height - 50, exchangeView.frame.size.width/2, 30);
            //            deals.frame = CGRectMake( total_Bill.frame.origin.x, total_Bill.frame.origin.y - total_Bill.frame.size.height, total_Bill.frame.size.width, total_Bill.frame.size.height);
            //            subtotal.frame = CGRectMake( total_Bill.frame.origin.x, deals.frame.origin.y - total_Bill.frame.size.height, total_Bill.frame.size.width, total_Bill.frame.size.height);
            //
            //            subtotal_value.frame =  CGRectMake( subtotal.frame.origin.x + subtotal.frame.size.width, subtotal.frame.origin.y, total_Bill.frame.size.width, total_Bill.frame.size.height);
            //            deals_value.frame =  CGRectMake( subtotal_value.frame.origin.x, deals.frame.origin.y, total_Bill.frame.size.width, total_Bill.frame.size.height);
            //            total_Bill_Value.frame =  CGRectMake( subtotal_value.frame.origin.x, total_Bill.frame.origin.y, total_Bill.frame.size.width, total_Bill.frame.size.height);
            
            
            
            total_Bill_Value.frame =  CGRectMake( label_5.frame.origin.x + label_5.frame.size.width - 220, exchangeView.frame.size.height - 50, 220, 40);
            deals_value.frame = CGRectMake( total_Bill_Value.frame.origin.x, total_Bill_Value.frame.origin.y - total_Bill_Value.frame.size.height, total_Bill_Value.frame.size.width, total_Bill_Value.frame.size.height);
            subtotal_value.frame = CGRectMake( total_Bill_Value.frame.origin.x, deals_value.frame.origin.y - total_Bill_Value.frame.size.height, total_Bill_Value.frame.size.width, total_Bill_Value.frame.size.height);
            
            
            total_Bill.frame = CGRectMake( label_1.frame.origin.x, total_Bill_Value.frame.origin.y, total_Bill_Value.frame.origin.x - label_1.frame.origin.x, total_Bill_Value.frame.size.height);
            deals.frame =CGRectMake( total_Bill.frame.origin.x, deals_value.frame.origin.y, deals_value.frame.size.width, total_Bill.frame.size.height);
            subtotal.frame = CGRectMake( total_Bill.frame.origin.x, subtotal_value.frame.origin.y, total_Bill.frame.size.width, total_Bill.frame.size.height);
            
            
            
            subtotal_value.textAlignment = NSTextAlignmentRight;
            deals_value.textAlignment = NSTextAlignmentRight;
            total_Bill_Value.textAlignment = NSTextAlignmentRight;
            
            
            itemExchScroll.frame = CGRectMake( exchangeView.frame.origin.x, label_1.frame.origin.y + label_1.frame.size.height + 5, exchangeView.frame.size.width, subtotal.frame.origin.y - (label_1.frame.origin.y + label_1.frame.size.height + 5));
            itemTableExchg.frame = CGRectMake( 0, 0, itemExchScroll.frame.size.width, itemExchScroll.frame.size.height);
            
            //end of left side view framing....
            
            
            
            //            [exchDetailsView addSubview:exchangedTotalBill];
            //            [exchDetailsView addSubview:exchangedTotalBillValue];
            //
            //            [exchDetailsView addSubview:underLineLbl_1];
            //            [exchDetailsView addSubview:underLineLbl_2];
            //
            //            [exchDetailsView addSubview:exchangeTotalBillValue];
            //            [exchDetailsView addSubview:returningTotalBill];
            
            
            //            exchangedTotalBill.frame = CGRectMake(10.0, 60, 240.0, 30.0);
            //            exchangedTotalBillValue.frame = CGRectMake(380,60, 120.0, 30.0);
            //
            //            returningTotalBill.frame = CGRectMake(10.0, 90, 240.0, 40.0);
            //            exchangeTotalBillValue.frame = CGRectMake(380,90, 120.0, 30.0);
            //            reason.frame = CGRectMake(10.0, 130, 120.0, 30);
            
            //start of right size view framing....
            
            //            underLineLbl_1.frame =  CGRectMake( 455 - (self.view.frame.size.width/4), 0, self.view.frame.size.width/4 , 2);;
            
            
            underLineLbl_1.frame =  CGRectMake( 500 - ((self.view.frame.size.width/4) + 100), 0, self.view.frame.size.width/4 + 100 , 2);;
            
            exchangedTotalBill.frame =  CGRectMake( underLineLbl_1.frame.origin.x, 0, underLineLbl_1.frame.size.width * 0.6 , 40);
            returningTotalBill.frame = CGRectMake( exchangedTotalBill.frame.origin.x, exchangedTotalBill.frame.origin.y + exchangedTotalBill.frame.size.height, exchangedTotalBill.frame.size.width, exchangedTotalBill.frame.size.height);
            
            exchangedTotalBillValue.frame = CGRectMake( exchangedTotalBill.frame.origin.x + exchangedTotalBill.frame.size.width, exchangedTotalBill.frame.origin.y, underLineLbl_1.frame.size.width - exchangedTotalBill.frame.size.width, exchangedTotalBill.frame.size.height);
            
            exchangeTotalBillValue.frame = CGRectMake( exchangedTotalBillValue.frame.origin.x, returningTotalBill.frame.origin.y, exchangedTotalBillValue.frame.size.width, exchangedTotalBillValue.frame.size.height);
            
            underLineLbl_2.frame =  CGRectMake( underLineLbl_1.frame.origin.x, exchangeTotalBillValue.frame.origin.y + exchangeTotalBillValue.frame.size.height, underLineLbl_1.frame.size.width, 2);
            
            exchangedTotalBillValue.textAlignment = NSTextAlignmentRight;
            exchangeTotalBillValue.textAlignment = NSTextAlignmentRight;
            
            
            submitButton.frame = CGRectMake( 20, underLineLbl_2.frame.origin.y + underLineLbl_2.frame.size.height + 10, 180, 40);
            
            backBtn.frame = CGRectMake( (self.view.frame.size.width / 2) - 190, submitButton.frame.origin.y, 180, 40);
            
            
            exchDetailsView.frame = CGRectMake( (self.view.frame.size.width/2), (exchangeView.frame.origin.y +  exchangeView.frame.size.height) - (submitButton.frame.origin.y + submitButton.frame.size.height + 5),  (self.view.frame.size.width/2), submitButton.frame.origin.y + submitButton.frame.size.height + 5);
            
            
            exchangeScrollView.frame = CGRectMake( exchangeView.frame.size.width, exchangeView.frame.origin.y, exchangeView.frame.size.width, exchDetailsView.frame.origin.y - exchangeView.frame.origin.y);
            
            
            exchangeDetails.frame = CGRectMake(  exchangeScrollView.frame.size.width/4 - 100, 5, 260.0, 30);
            
            label_16.frame = CGRectMake( 5, exchangeDetails.frame.origin.y + exchangeDetails.frame.size.height + 10, 125, 30);
            label_17.frame = CGRectMake( label_16.frame.origin.x + label_16.frame.size.width + 2, label_16.frame.origin.y, 90, 30);
            label_18.frame = CGRectMake( label_17.frame.origin.x + label_17.frame.size.width + 2, label_16.frame.origin.y, 95, 30);
            label_20.frame = CGRectMake( label_18.frame.origin.x + label_18.frame.size.width + 2, label_16.frame.origin.y, 95, 30);
            label_19.frame = CGRectMake( label_20.frame.origin.x + label_20.frame.size.width + 2, label_16.frame.origin.y, 90, 30);
            
            scrollView3.frame = CGRectMake( 0, label_16.frame.origin.y + label_16.frame.size.height + 5, exchangeView.frame.size.width, exchangeScrollView.frame.size.height - (label_16.frame.origin.y + label_16.frame.size.height + 5));
            
            exchangeDetailsTable.frame = CGRectMake( 0, 0, scrollView3.frame.size.width, scrollView3.frame.size.height);
            
            returnDetails.font = [UIFont boldSystemFontOfSize:25];
            
            scrollView3.contentSize = CGSizeMake( scrollView3.frame.size.width, scrollView3.frame.size.height);
            
            exchangeScrollView.scrollEnabled = NO;
            
            
            
            //            exchangeView.frame = CGRectMake(0, 70, (self.view.frame.size.width/2) + 30, self.view.frame.size.height - 200);
            //
            //            exchgBillID.frame = CGRectMake(80, 5.0, 120.0, 30);
            //            exchgBillIDValue.frame = CGRectMake(230, 5.0, 250, 30.0);
            //
            //            label_1.frame = CGRectMake(10, 50, 90, 30);
            //            label_2.frame = CGRectMake(105, 50, 90, 30);
            //            label_3.frame = CGRectMake(200, 50, 100, 30);
            //            label_4.frame = CGRectMake(305, 50, 100, 30);
            //            label_5.frame = CGRectMake(410, 50, 90, 30);
            //
            //            itemExchScroll.frame = CGRectMake(0, 90, 550,240);
            //            itemExchScroll.contentSize = CGSizeMake(778, 500);
            //            itemTableExchg.frame = CGRectMake(0.0, 0, 550, 240);
            //
            //            exchDetailsView.frame = CGRectMake(550, 300, 550,300);
            //            exchDetailsView.contentSize = CGSizeMake(550, 500);
            //
            //            subtotal.frame = CGRectMake(10.0, 340, 120.0, 30.0);
            //            subtotal_value.frame = CGRectMake(380,340, 120.0, 30.0);
            //
            //            deals.frame = CGRectMake(10.0, subtotal.frame.origin.y + subtotal.frame.size.height, 180, 30.0);
            //            deals_value.frame = CGRectMake(380,subtotal.frame.origin.y + subtotal.frame.size.height, 120.0, 30.0);
            //
            //
            //
            //
            //            total_Bill.frame = CGRectMake(10.0,deals.frame.origin.y + deals.frame.size.height, 120.0, 30.0);
            //            total_Bill_Value.frame = CGRectMake(380,deals.frame.origin.y + deals.frame.size.height, 120.0, 30.0);
            //
            //            exchangedTotalBill.frame = CGRectMake(10.0, 60, 240.0, 30.0);
            //            exchangedTotalBillValue.frame = CGRectMake(380,60, 120.0, 30.0);
            //
            //            returningTotalBill.frame = CGRectMake(10.0, 90, 240.0, 40.0);
            //            exchangeTotalBillValue.frame = CGRectMake(380,90, 120.0, 30.0);
            //            reason.frame = CGRectMake(10.0, 130, 120.0, 30);
            //
            //            submitButton.frame = CGRectMake(360, 590, 200.0, 40);
            //
            //            itemExchScroll.contentSize = CGSizeMake( itemExchScroll.frame.size.width, itemTableExchg.frame.size.height);
            //
            //
            //            exchangeView.contentSize = CGSizeMake( exchangeView.frame.size.width, submitButton.frame.origin.y - (segmentedControl.frame.origin.y + segmentedControl.frame.size.height));
            
            
            
            exchgBillID.font = [UIFont boldSystemFontOfSize:25];
            exchgBillIDValue.font = [UIFont boldSystemFontOfSize:22];
            
            label_1.font = [UIFont systemFontOfSize:18];
            label_2.font = [UIFont systemFontOfSize:18];
            label_3.font = [UIFont systemFontOfSize:18];
            label_4.font = [UIFont systemFontOfSize:18];
            label_5.font = [UIFont systemFontOfSize:18];
            
            subtotal_value.font = [UIFont systemFontOfSize:18];
            deals.font = [UIFont systemFontOfSize:18];
            subtotal.font = [UIFont systemFontOfSize:18];
            
            total_Bill.font = [UIFont systemFontOfSize:18];
            deals_value.font = [UIFont systemFontOfSize:18];
            total_Bill_Value.font = [UIFont systemFontOfSize:18];
            
            
            exchangedTotalBill.font = [UIFont systemFontOfSize:18];
            exchangedTotalBillValue.font =[UIFont systemFontOfSize:18];
            
            returningTotalBill.font = [UIFont systemFontOfSize:18];
            exchangeTotalBillValue.font =[UIFont systemFontOfSize:18];
            reason.font = [UIFont systemFontOfSize:18];
            
            submitButton.titleLabel.font = [UIFont systemFontOfSize:25.0];
            backBtn.titleLabel.font = [UIFont systemFontOfSize:25.0];
            
            
            
            //------------- **  ----------
            
            //                exchangeView.frame = CGRectMake(0, 70, (self.view.frame.size.width/2) + 30, self.view.frame.size.height - 200);
            //
            //                exchgBillID.frame = CGRectMake(80, 5.0, 120.0, 30);
            //                exchgBillIDValue.frame = CGRectMake(230, 5.0, 250, 30.0);
            //
            //                exchgBillID.font = [UIFont boldSystemFontOfSize:25];
            //                exchgBillIDValue.font = [UIFont boldSystemFontOfSize:22];
            //
            //                label_1.font = [UIFont systemFontOfSize:18];
            //                label_1.frame = CGRectMake(10, 50, 90, 30);
            //                label_2.font = [UIFont systemFontOfSize:18];
            //                label_2.frame = CGRectMake(105, 50, 90, 30);
            //                label_3.font = [UIFont systemFontOfSize:18];
            //                label_3.frame = CGRectMake(200, 50, 100, 30);
            //                label_4.font = [UIFont systemFontOfSize:18];
            //                label_4.frame = CGRectMake(305, 50, 100, 30);
            //                label_5.font = [UIFont systemFontOfSize:18];
            //                label_5.frame = CGRectMake(410, 50, 90, 30);
            //
            //                itemExchScroll.frame = CGRectMake(0, 90, 550,240);
            //                itemExchScroll.contentSize = CGSizeMake(778, 500);
            //                itemTableExchg.frame = CGRectMake(0.0, 0, 550, 240);
            //
            //                exchDetailsView.frame = CGRectMake(550, 300, 550,300);
            //                exchDetailsView.contentSize = CGSizeMake(550, 500);
            //
            //                subtotal.frame = CGRectMake(10.0, 340, 120.0, 30.0);
            //                subtotal.font = [UIFont systemFontOfSize:18];
            //                subtotal_value.frame = CGRectMake(380,340, 120.0, 30.0);
            //                subtotal_value.font = [UIFont systemFontOfSize:18];
            //
            //                deals.frame = CGRectMake(10.0, subtotal.frame.origin.y + subtotal.frame.size.height, 180, 30.0);
            //                deals.font = [UIFont systemFontOfSize:18];
            //                deals_value.frame = CGRectMake(380,subtotal.frame.origin.y + subtotal.frame.size.height, 120.0, 30.0);
            //                deals_value.font = [UIFont systemFontOfSize:18];
            //
            //
            //                total_Bill.frame = CGRectMake(10.0,deals.frame.origin.y + deals.frame.size.height, 120.0, 30.0);
            //                total_Bill.font = [UIFont systemFontOfSize:18];
            //                total_Bill_Value.frame = CGRectMake(380,deals.frame.origin.y + deals.frame.size.height, 120.0, 30.0);
            //                total_Bill_Value.font = [UIFont systemFontOfSize:18];
            //
            //                exchangedTotalBill.frame = CGRectMake(10.0, 60, 240.0, 30.0);
            //                exchangedTotalBill.font = [UIFont systemFontOfSize:18];
            //                exchangedTotalBillValue.frame = CGRectMake(380,60, 120.0, 30.0);
            //                exchangedTotalBillValue.font =[UIFont systemFontOfSize:18];
            //
            //                returningTotalBill.frame = CGRectMake(10.0, 90, 240.0, 40.0);
            //                returningTotalBill.font = [UIFont systemFontOfSize:18];
            //                exchangeTotalBillValue.frame = CGRectMake(380,90, 120.0, 30.0);
            //                exchangeTotalBillValue.font =[UIFont systemFontOfSize:18];
            //                reason.frame = CGRectMake(10.0, 130, 120.0, 30);
            //                reason.font = [UIFont systemFontOfSize:18];
            //
            //                submitButton.frame = CGRectMake(360, 590, 200.0, 40);
            //                submitButton.titleLabel.font = [UIFont systemFontOfSize:25.0];
            //
            //                itemExchScroll.contentSize = CGSizeMake( itemExchScroll.frame.size.width, itemTableExchg.frame.size.height);
            //
            //
            //                exchangeView.contentSize = CGSizeMake( exchangeView.frame.size.width, submitButton.frame.origin.y - (segmentedControl.frame.origin.y + segmentedControl.frame.size.height));
            
            
            
        }
        else {
            
            
        }
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are populating the exchangeTransfers information GUI....
 * @date         23/12/2017....
 * @method       showExchangeTransfersiew
 * @author       Srinivasulu
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By   by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

-(void)showExchangeTransfersiew{
    
    
    @try {
        
        if(exchangeTransfers == nil){
            
            UILabel * currentBillInfoLbl;
            UILabel * currentBillSubTotalLbl;
            UILabel * currentBillTaxLbl;
            UILabel * currentBillTotalLbl;
            UILabel * currentBillSubTotalValueLbl;
            UILabel * currentBillTaxValueLbl;
            UILabel * currentBillTotalValueLbl;
            
            UILabel * exchangeBillInfoLbl;
            UILabel * exchangeBillTotalItemsLbl;
            UILabel * exchangeBillTotalItemsCostLbl;
            UILabel * exchangeBillTotalItemsValueLbl;
            UILabel * exchangeBillTotalItemsCostValueLbl;
            
            UILabel * underLineLbl_1;
            UILabel * underLineLbl_2;
            
            
            
            exchangeTransfers = [[UIView alloc] init];
            exchangeTransfers.backgroundColor = [UIColor clearColor];
            
            currentBilledItemLbl = [[CustomLabel alloc] init];
            [currentBilledItemLbl awakeFromNib];
            
            currentBilledtemPriceLbl = [[CustomLabel alloc] init];
            [currentBilledtemPriceLbl awakeFromNib];
            
            currentBilledItemQtyLbl = [[CustomLabel alloc] init];
            [currentBilledItemQtyLbl awakeFromNib];
            
            currentBilledItemDiscountLbl = [[CustomLabel alloc] init];
            [currentBilledItemDiscountLbl awakeFromNib];
            
            currentBilledItemTotalCostLbl = [[CustomLabel alloc] init];
            [currentBilledItemTotalCostLbl awakeFromNib];
            
            
            exchangedItemSkuidLbl = [[CustomLabel alloc] init];
            [exchangedItemSkuidLbl awakeFromNib];
            
            exchangedItemLbl = [[CustomLabel alloc] init];
            [exchangedItemLbl awakeFromNib];
            
            exchangedDateLbl = [[CustomLabel alloc] init];
            [exchangedDateLbl awakeFromNib];
            
            exchangedItemPriceLbl = [[CustomLabel alloc] init];
            [exchangedItemPriceLbl awakeFromNib];
            
            exchangedItemQtyLbl = [[CustomLabel alloc] init];
            [exchangedItemQtyLbl awakeFromNib];
            
            exchangedItemTotalCostLbl = [[CustomLabel alloc] init];
            [exchangedItemTotalCostLbl awakeFromNib];
            
            
            currentBillInfoLbl = [[UILabel alloc] init];
            currentBillInfoLbl.backgroundColor = [UIColor clearColor];
            currentBillInfoLbl.textAlignment = NSTextAlignmentLeft;
            currentBillInfoLbl.textColor = [UIColor whiteColor];
            
            currentBillSubTotalLbl = [[UILabel alloc] init];
            currentBillSubTotalLbl.backgroundColor = [UIColor clearColor];
            currentBillSubTotalLbl.textAlignment = NSTextAlignmentLeft;
            currentBillSubTotalLbl.textColor = [UIColor whiteColor];
            
            currentBillTaxLbl = [[UILabel alloc] init];
            currentBillTaxLbl.backgroundColor = [UIColor clearColor];
            currentBillInfoLbl.textAlignment = NSTextAlignmentLeft;
            currentBillTaxLbl.textColor = [UIColor whiteColor];
            
            currentBillTotalLbl = [[UILabel alloc] init];
            currentBillTotalLbl.backgroundColor = [UIColor clearColor];
            currentBillTotalLbl.textAlignment = NSTextAlignmentLeft;
            currentBillTotalLbl.textColor = [UIColor whiteColor];
            
            currentBillSubTotalValueLbl = [[UILabel alloc] init];
            currentBillSubTotalValueLbl.backgroundColor = [UIColor clearColor];
            currentBillSubTotalValueLbl.textAlignment = NSTextAlignmentRight;
            currentBillSubTotalValueLbl.textColor = [UIColor whiteColor];
            
            currentBillTaxValueLbl = [[UILabel alloc] init];
            currentBillTaxValueLbl.backgroundColor = [UIColor clearColor];
            currentBillTaxValueLbl.textAlignment = NSTextAlignmentRight;
            currentBillTaxValueLbl.textColor = [UIColor whiteColor];
            
            currentBillTotalValueLbl = [[UILabel alloc] init];
            currentBillTotalValueLbl.backgroundColor = [UIColor clearColor];
            currentBillTotalValueLbl.textAlignment = NSTextAlignmentRight;
            currentBillTotalValueLbl.textColor = [UIColor whiteColor];
            
            exchangeBillInfoLbl = [[UILabel alloc] init];
            exchangeBillInfoLbl.backgroundColor = [UIColor clearColor];
            exchangeBillInfoLbl.textAlignment = NSTextAlignmentLeft;
            exchangeBillInfoLbl.textColor = [UIColor whiteColor];
            
            exchangeBillTotalItemsLbl = [[UILabel alloc] init];
            exchangeBillTotalItemsLbl.backgroundColor = [UIColor clearColor];
            exchangeBillTotalItemsLbl.textAlignment = NSTextAlignmentLeft;
            exchangeBillTotalItemsLbl.textColor = [UIColor whiteColor];
            
            exchangeBillTotalItemsCostLbl = [[UILabel alloc] init];
            exchangeBillTotalItemsCostLbl.backgroundColor = [UIColor clearColor];
            exchangeBillTotalItemsCostLbl.textAlignment = NSTextAlignmentLeft;
            exchangeBillTotalItemsCostLbl.textColor = [UIColor whiteColor];
            
            exchangeBillTotalItemsValueLbl = [[UILabel alloc] init];
            exchangeBillTotalItemsValueLbl.backgroundColor = [UIColor clearColor];
            exchangeBillTotalItemsValueLbl.textAlignment = NSTextAlignmentRight;
            exchangeBillTotalItemsValueLbl.textColor = [UIColor whiteColor];
            
            exchangeBillTotalItemsCostValueLbl = [[UILabel alloc] init];
            exchangeBillTotalItemsCostValueLbl.backgroundColor = [UIColor clearColor];
            exchangeBillTotalItemsCostValueLbl.textAlignment = NSTextAlignmentRight;
            exchangeBillTotalItemsCostValueLbl.textColor = [UIColor whiteColor];
            
            underLineLbl_1 = [[UILabel alloc] init];
            underLineLbl_1.textColor = [UIColor whiteColor];
            underLineLbl_1.backgroundColor = [UIColor clearColor];
            underLineLbl_1.backgroundColor = [UIColor lightGrayColor];
            
            underLineLbl_2 = [[UILabel alloc] init];
            underLineLbl_2.textColor = [UIColor whiteColor];
            underLineLbl_2.backgroundColor = [UIColor clearColor];
            underLineLbl_2.backgroundColor = [UIColor lightGrayColor];
            
            
            currentBilledItemsTbl = [[UITableView alloc] init];
            currentBilledItemsTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            currentBilledItemsTbl.backgroundColor = [UIColor clearColor];
            currentBilledItemsTbl.dataSource = self;
            currentBilledItemsTbl.delegate = self;
            currentBilledItemsTbl.tableFooterView = [[UIView  alloc] initWithFrame:CGRectZero];
            
            
            
            exchangedBilledItemsTbl = [[UITableView alloc] init];
            exchangedBilledItemsTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            exchangedBilledItemsTbl.backgroundColor = [UIColor clearColor];
            exchangedBilledItemsTbl.dataSource = self;
            exchangedBilledItemsTbl.delegate = self;
            exchangedBilledItemsTbl.tableFooterView = [[UIView  alloc] initWithFrame:CGRectZero];
            
            
            [exchangeTransfers addSubview:currentBilledItemLbl];
            [exchangeTransfers addSubview:currentBilledtemPriceLbl];
            [exchangeTransfers addSubview:currentBilledItemQtyLbl];
            [exchangeTransfers addSubview:currentBilledItemDiscountLbl];
            [exchangeTransfers addSubview:currentBilledItemTotalCostLbl];
            
            [exchangeTransfers addSubview:exchangedItemSkuidLbl];
            [exchangeTransfers addSubview:exchangedItemLbl];
            [exchangeTransfers addSubview:exchangedDateLbl];
            [exchangeTransfers addSubview:exchangedItemPriceLbl];
            [exchangeTransfers addSubview:exchangedItemQtyLbl];
            [exchangeTransfers addSubview:exchangedItemTotalCostLbl];
            
            
            [exchangeTransfers addSubview:currentBillInfoLbl];
            [exchangeTransfers addSubview:currentBillSubTotalLbl];
            [exchangeTransfers addSubview:currentBillTaxLbl];
            [exchangeTransfers addSubview:currentBillTotalLbl];
            [exchangeTransfers addSubview:currentBillSubTotalValueLbl];
            [exchangeTransfers addSubview:currentBillTaxValueLbl];
            [exchangeTransfers addSubview:currentBillTotalValueLbl];
            
            [exchangeTransfers addSubview:exchangeBillInfoLbl];
            [exchangeTransfers addSubview:exchangeBillTotalItemsLbl];
            [exchangeTransfers addSubview:exchangeBillTotalItemsCostLbl];
            [exchangeTransfers addSubview:exchangeBillTotalItemsValueLbl];
            [exchangeTransfers addSubview:exchangeBillTotalItemsCostValueLbl];
            
            [exchangeTransfers addSubview:underLineLbl_1];
            [exchangeTransfers addSubview:underLineLbl_2];
            
            [exchangeTransfers addSubview:currentBilledItemsTbl];
            [exchangeTransfers addSubview:exchangedBilledItemsTbl];
            
            [self.view addSubview:exchangeTransfers];
            
            
            @try {
                
                
                currentBillInfoLbl.text = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"bill_id", nil),NSLocalizedString(@" :  ", nil),originalBillId];
                
                if(isCustomerBillId)
                    currentBillInfoLbl.text = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"bill_id", nil),NSLocalizedString(@" : ", nil),serialBillIdStr];
                
                
                currentBilledItemLbl.text = NSLocalizedString(@"item", nil);
                currentBilledtemPriceLbl.text = NSLocalizedString(@"price", nil);
                currentBilledItemQtyLbl.text = NSLocalizedString(@"qty", nil);
                currentBilledItemDiscountLbl.text = NSLocalizedString(@"disc", nil);
                currentBilledItemTotalCostLbl.text = NSLocalizedString(@"cost", nil);
                
                exchangedItemSkuidLbl.text = NSLocalizedString(@"sku_id", nil);
                exchangedItemLbl.text = NSLocalizedString(@"item", nil);
                exchangedDateLbl.text = NSLocalizedString(@"date", nil);
                exchangedItemPriceLbl.text = NSLocalizedString(@"price", nil);
                exchangedItemQtyLbl.text = NSLocalizedString(@"qty", nil);
                exchangedItemTotalCostLbl.text = NSLocalizedString(@"cost", nil);
                
                currentBillSubTotalLbl.text = NSLocalizedString(@"sub_total", nil);
                currentBillTaxLbl.text = NSLocalizedString(@"tax", nil);
                currentBillTotalLbl.text = NSLocalizedString(@"total_bill", nil);
                
                exchangeBillInfoLbl.text = NSLocalizedString(@"exchanged_cerdit_details", nil);
                exchangeBillTotalItemsLbl.text = NSLocalizedString(@"exchanged_items", nil);
                exchangeBillTotalItemsCostLbl.text = NSLocalizedString(@"exchanged_amount", nil);
                
                currentBillSubTotalValueLbl.text = NSLocalizedString(@"0.00", nil);
                currentBillTaxValueLbl.text = NSLocalizedString(@"0.00", nil);
                currentBillTotalValueLbl.text = NSLocalizedString(@"0.00", nil);
                
                exchangeBillTotalItemsValueLbl.text = NSLocalizedString(@"0.00", nil);
                exchangeBillTotalItemsCostValueLbl.text = NSLocalizedString(@"0.00", nil);
                
                
                
                currentBillSubTotalValueLbl.text = subTotalBillValue.text;
                currentBillTaxValueLbl.text = taxlblValue.text;
                currentBillTotalValueLbl.text = totalBillValue.text;
                
                
                float totalCost = 0.00;
                NSString * billIdstr = @"";
                
                for(NSDictionary * dic in exchangedItemsArr){
                    
                    if(!billIdstr.length)
                        billIdstr = [self checkGivenValueIsNullOrNil:[dic valueForKey:Bill_id]  defaultReturn:@""];
                    totalCost = totalCost + [[self checkGivenValueIsNullOrNil:[dic valueForKey:COST]  defaultReturn:@"0.00"] floatValue];
                }
                exchangeBillTotalItemsValueLbl.text = [NSString stringWithFormat:@"%ld",exchangedItemsArr.count];
                exchangeBillTotalItemsCostValueLbl.text = [NSString stringWithFormat:@"%.2f",totalCost];
                
                
                if(billIdstr.length)
                    exchangeBillInfoLbl.text = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"bill_id", nil),NSLocalizedString(@" :  ", nil),billIdstr];
                
                
                
            } @catch (NSException *exception) {
                
            }
            
            
            exchangeTransfers.frame = CGRectMake( self.view.frame.origin.x, mainSegmentedControl.frame.origin.y + mainSegmentedControl.frame.size.height, self.view.frame.size.width, segmentedControl.frame.origin.y - (mainSegmentedControl.frame.origin.y + mainSegmentedControl.frame.size.height));
            
            //            currentBillInfoLbl.frame =  CGRectMake( 5, 10, (exchangeTransfers.frame.size.width - 10)/2 , 40);
            //
            //
            //            currentBilledItemLbl.frame = CGRectMake( 5, currentBillInfoLbl.frame.origin.y + currentBillInfoLbl.frame.size.height + 2, 80, 35);
            //            currentBilledtemPriceLbl.frame = CGRectMake( currentBilledItemLbl.frame.origin.x + currentBilledItemLbl.frame.size.width + 2, currentBilledItemLbl.frame.origin.y, 90, currentBilledItemLbl.frame.size.height);
            //            currentBilledItemQtyLbl.frame = CGRectMake( currentBilledtemPriceLbl.frame.origin.x + currentBilledtemPriceLbl.frame.size.width + 2, currentBilledItemLbl.frame.origin.y, 95, currentBilledItemLbl.frame.size.height);
            //            currentBilledItemDiscountLbl.frame = CGRectMake( currentBilledItemQtyLbl.frame.origin.x + currentBilledItemQtyLbl.frame.size.width + 2, currentBilledItemLbl.frame.origin.y, 95, currentBilledItemLbl.frame.size.height);
            //            currentBilledItemTotalCostLbl.frame = CGRectMake( currentBilledItemDiscountLbl.frame.origin.x + currentBilledItemDiscountLbl.frame.size.width + 2, currentBilledItemLbl.frame.origin.y, ((exchangeTransfers.frame.size.width - 10)/2 - (currentBilledItemDiscountLbl.frame.origin.x + currentBilledItemDiscountLbl.frame.size.width + 2)), currentBilledItemLbl.frame.size.height);
            //
            //            currentBillTotalValueLbl.frame =  CGRectMake( currentBilledItemTotalCostLbl.frame.origin.x , exchangeTransfers.frame.size.height - 30, currentBilledItemTotalCostLbl.frame.size.width, 30);
            //            currentBillTaxValueLbl.frame = CGRectMake( currentBillTotalValueLbl.frame.origin.x, currentBillTotalValueLbl.frame.origin.y - currentBillTotalValueLbl.frame.size.height, currentBillTotalValueLbl.frame.size.width, currentBillTotalValueLbl.frame.size.height);
            //            currentBillSubTotalValueLbl.frame = CGRectMake( currentBillTaxValueLbl.frame.origin.x, currentBillTaxValueLbl.frame.origin.y - currentBillTaxValueLbl.frame.size.height, currentBillTaxValueLbl.frame.size.width, currentBillTaxValueLbl.frame.size.height);
            //
            //            currentBillTotalLbl.frame = CGRectMake( currentBilledItemLbl.frame.origin.x, currentBillTotalValueLbl.frame.origin.y, currentBillTotalValueLbl.frame.origin.x - currentBilledItemLbl.frame.origin.x, currentBillTotalValueLbl.frame.size.height);
            //            currentBillTaxLbl.frame =CGRectMake( currentBillTotalLbl.frame.origin.x, currentBillTaxValueLbl.frame.origin.y, currentBillTotalLbl.frame.size.width, currentBillTotalLbl.frame.size.height);
            //            currentBillSubTotalLbl.frame = CGRectMake( currentBillTotalLbl.frame.origin.x, currentBillSubTotalValueLbl.frame.origin.y, currentBillTotalLbl.frame.size.width, currentBillTotalLbl.frame.size.height);
            //
            //            currentBilledItemsTbl.frame = CGRectMake( 0, currentBilledtemPriceLbl.frame.origin.y + currentBilledtemPriceLbl.frame.size.height + 5, exchangeTransfers.frame.size.width/2, currentBillSubTotalLbl.frame.origin.y - (currentBilledtemPriceLbl.frame.origin.y + currentBilledtemPriceLbl.frame.size.height + 5));
            //
            //
            //            exchangeBillInfoLbl.frame =  CGRectMake(  currentBillInfoLbl.frame.origin.x + currentBillInfoLbl.frame.size.width + 5, currentBillInfoLbl.frame.origin.y, currentBillInfoLbl.frame.size.width, 40);
            //
            //            exchangedItemLbl.frame = CGRectMake( exchangeBillInfoLbl.frame.origin.x, currentBilledItemLbl.frame.origin.y, 80, 35);
            //            exchangedDateLbl.frame = CGRectMake( exchangedItemLbl.frame.origin.x + exchangedItemLbl.frame.size.width + 2, currentBilledItemLbl.frame.origin.y, 90, exchangedItemLbl.frame.size.height);
            //            exchangedItemPriceLbl.frame = CGRectMake( exchangedDateLbl.frame.origin.x + exchangedDateLbl.frame.size.width + 2, currentBilledItemLbl.frame.origin.y, 95, exchangedItemLbl.frame.size.height);
            //            exchangedItemQtyLbl.frame = CGRectMake( exchangedItemPriceLbl.frame.origin.x + exchangedItemPriceLbl.frame.size.width + 2, currentBilledItemLbl.frame.origin.y, 95, exchangedItemLbl.frame.size.height);
            //            exchangedItemTotalCostLbl.frame = CGRectMake( exchangedItemQtyLbl.frame.origin.x + exchangedItemQtyLbl.frame.size.width + 2, currentBilledItemLbl.frame.origin.y, ((exchangeTransfers.frame.size.width - 20) - (exchangedItemQtyLbl.frame.origin.x + exchangedItemQtyLbl.frame.size.width + 2)), exchangedItemLbl.frame.size.height);
            //
            //            underLineLbl_1.frame =  CGRectMake( (exchangedItemTotalCostLbl.frame.origin.x + exchangedItemTotalCostLbl.frame.size.width) - (exchangeTransfers.frame.size.width/3), exchangeTransfers.frame.size.height - 88, exchangeTransfers.frame.size.width/3, 2);
            //
            //            exchangeBillTotalItemsLbl.frame =  CGRectMake( underLineLbl_1.frame.origin.x, underLineLbl_1.frame.origin.y + underLineLbl_1.frame.size.height, underLineLbl_1.frame.size.width - exchangedItemTotalCostLbl.frame.size.width, 40);
            //            exchangeBillTotalItemsCostLbl.frame = CGRectMake( exchangeBillTotalItemsLbl.frame.origin.x, exchangeBillTotalItemsLbl.frame.origin.y + exchangeBillTotalItemsLbl.frame.size.height, exchangeBillTotalItemsLbl.frame.size.width, exchangeBillTotalItemsLbl.frame.size.height);
            //
            //            exchangeBillTotalItemsValueLbl.frame = CGRectMake( exchangeBillTotalItemsLbl.frame.origin.x + exchangeBillTotalItemsLbl.frame.size.width, exchangeBillTotalItemsLbl.frame.origin.y, underLineLbl_1.frame.size.width - exchangeBillTotalItemsLbl.frame.size.width, exchangeBillTotalItemsLbl.frame.size.height);
            //
            //            exchangeBillTotalItemsCostValueLbl.frame = CGRectMake( exchangeBillTotalItemsValueLbl.frame.origin.x, exchangeBillTotalItemsCostLbl.frame.origin.y, exchangeBillTotalItemsValueLbl.frame.size.width, exchangeBillTotalItemsValueLbl.frame.size.height);
            //
            //            underLineLbl_2.frame =  CGRectMake( underLineLbl_1.frame.origin.x, exchangeBillTotalItemsCostValueLbl.frame.origin.y + exchangeBillTotalItemsCostValueLbl.frame.size.height, underLineLbl_1.frame.size.width, 2);
            //
            //            exchangedBilledItemsTbl.frame = CGRectMake( exchangeBillInfoLbl.frame.origin.x, currentBilledtemPriceLbl.frame.origin.y + currentBilledtemPriceLbl.frame.size.height + 5, exchangeTransfers.frame.size.width/2, underLineLbl_1.frame.origin.y - (currentBilledtemPriceLbl.frame.origin.y + currentBilledtemPriceLbl.frame.size.height + 5));
            //
            //            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:exchangeTransfers andSubViews:YES fontSize:18.0f cornerRadius:0];
            
            
            exchangeBillInfoLbl.frame =  CGRectMake(  10, 10, self.view.frame.size.width - 20, 40);
            
            exchangedItemSkuidLbl.frame = CGRectMake( exchangeBillInfoLbl.frame.origin.x, exchangeBillInfoLbl.frame.origin.y + exchangeBillInfoLbl.frame.size.height + 4, 165, 34);
            
            exchangedItemLbl.frame = CGRectMake( exchangedItemSkuidLbl.frame.origin.x + exchangedItemSkuidLbl.frame.size.width + 2,  exchangeBillInfoLbl.frame.origin.y + exchangeBillInfoLbl.frame.size.height + 4, 155, 34);
            exchangedDateLbl.frame = CGRectMake( exchangedItemLbl.frame.origin.x + exchangedItemLbl.frame.size.width + 2, exchangedItemLbl.frame.origin.y, 115, exchangedItemLbl.frame.size.height);
            exchangedItemPriceLbl.frame = CGRectMake( exchangedDateLbl.frame.origin.x + exchangedDateLbl.frame.size.width + 2, exchangedItemLbl.frame.origin.y, 125, exchangedItemLbl.frame.size.height);
            exchangedItemQtyLbl.frame = CGRectMake( exchangedItemPriceLbl.frame.origin.x + exchangedItemPriceLbl.frame.size.width + 2, exchangedItemLbl.frame.origin.y, 115, exchangedItemLbl.frame.size.height);
            //            exchangedItemTotalCostLbl.frame = CGRectMake( exchangedItemQtyLbl.frame.origin.x + exchangedItemQtyLbl.frame.size.width + 2, exchangedItemLbl.frame.origin.y, ((exchangeTransfers.frame.size.width - 20) - (exchangedItemQtyLbl.frame.origin.x + exchangedItemQtyLbl.frame.size.width + 2)), exchangedItemLbl.frame.size.height);
            exchangedItemTotalCostLbl.frame = CGRectMake( exchangedItemQtyLbl.frame.origin.x + exchangedItemQtyLbl.frame.size.width + 2, exchangedItemLbl.frame.origin.y, 125, exchangedItemLbl.frame.size.height);
            
            underLineLbl_1.frame =  CGRectMake( (exchangedItemTotalCostLbl.frame.origin.x + exchangedItemTotalCostLbl.frame.size.width) - (exchangeTransfers.frame.size.width/3), exchangeTransfers.frame.size.height - 88, exchangeTransfers.frame.size.width/3, 2);
            
            exchangeBillTotalItemsLbl.frame =  CGRectMake( underLineLbl_1.frame.origin.x, underLineLbl_1.frame.origin.y + underLineLbl_1.frame.size.height, underLineLbl_1.frame.size.width - exchangedItemTotalCostLbl.frame.size.width, 40);
            exchangeBillTotalItemsCostLbl.frame = CGRectMake( exchangeBillTotalItemsLbl.frame.origin.x, exchangeBillTotalItemsLbl.frame.origin.y + exchangeBillTotalItemsLbl.frame.size.height, exchangeBillTotalItemsLbl.frame.size.width, exchangeBillTotalItemsLbl.frame.size.height);
            
            exchangeBillTotalItemsValueLbl.frame = CGRectMake( exchangeBillTotalItemsLbl.frame.origin.x + exchangeBillTotalItemsLbl.frame.size.width, exchangeBillTotalItemsLbl.frame.origin.y, underLineLbl_1.frame.size.width - exchangeBillTotalItemsLbl.frame.size.width, exchangeBillTotalItemsLbl.frame.size.height);
            
            exchangeBillTotalItemsCostValueLbl.frame = CGRectMake( exchangeBillTotalItemsValueLbl.frame.origin.x, exchangeBillTotalItemsCostLbl.frame.origin.y, exchangeBillTotalItemsValueLbl.frame.size.width, exchangeBillTotalItemsValueLbl.frame.size.height);
            
            underLineLbl_2.frame =  CGRectMake( underLineLbl_1.frame.origin.x, exchangeBillTotalItemsCostValueLbl.frame.origin.y + exchangeBillTotalItemsCostValueLbl.frame.size.height, underLineLbl_1.frame.size.width, 2);
            
            exchangedBilledItemsTbl.frame = CGRectMake( exchangeBillInfoLbl.frame.origin.x, exchangedItemLbl.frame.origin.y + exchangedItemLbl.frame.size.height + 5, exchangeTransfers.frame.size.width, underLineLbl_1.frame.origin.y - (exchangedItemLbl.frame.origin.y + exchangedItemLbl.frame.size.height + 5));
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:exchangeTransfers andSubViews:YES fontSize:18.0f cornerRadius:0];
            
            
        }
        else{
            
            exchangeTransfers.hidden = NO;
        }
        
        
    } @catch (NSException *exception) {
        
    }
}

#pragma -mark methods modified by Srinivasulu from november 2017....

/**
 * @description  here we are populating the card information GUI....
 * @date
 * @method       populateCardDetailsView
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateCardDetailsView {
    
    
    @try {
        
        [self setSiblings:paymentView enabled:TRUE];
        
        label = [[UILabel alloc] init] ;
        label.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        label.alpha = 0.8f;
        label.textAlignment = NSTextAlignmentLeft;
        label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label.textColor = [UIColor whiteColor];
        
        // close button to close the view ..
        backbutton = [[UIButton alloc] init] ;
        [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        
        UIImage *image = [UIImage imageNamed:@"delete.png"];
        [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
        
        cardInfoLbl = [[UILabel alloc] init] ;
        cardInfoLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
        cardInfoLbl.backgroundColor = [UIColor clearColor];
        cardInfoLbl.textColor = [UIColor whiteColor];
        
        approvalCodeLbl = [[UILabel alloc] init] ;
        approvalCodeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
        approvalCodeLbl.backgroundColor = [UIColor clearColor];
        approvalCodeLbl.textColor = [UIColor whiteColor];
        
        bankNameLbl = [[UILabel alloc] init] ;
        bankNameLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
        bankNameLbl.backgroundColor = [UIColor clearColor];
        bankNameLbl.textColor = [UIColor whiteColor];
        
        
        
        payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [payBtn addTarget:self action:@selector(cardPaymentCall) forControlEvents:UIControlEventTouchUpInside];
        payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        payBtn.titleLabel.textColor = [UIColor whiteColor];
        payBtn.backgroundColor = [UIColor grayColor];
        
        UIButton  *cancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [cancelBtn addTarget:self action:@selector(backToPaymentView) forControlEvents:UIControlEventTouchUpInside];
        cancelBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        cancelBtn.titleLabel.textColor = [UIColor whiteColor];
        cancelBtn.backgroundColor = [UIColor grayColor];
        
        cardInfoTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        
        //added by Srinivasulu on 21/11/2017....
        
        UILabel * cardTypeLbl = [[UILabel alloc] init] ;
        cardTypeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
        cardTypeLbl.backgroundColor = [UIColor clearColor];
        cardTypeLbl.textColor = [UIColor whiteColor];
        
        // close button to close the view ..
        UIImage *  buttonImage_;
        UIButton * showListOfCardTypesBtn;
        
        buttonImage_ = [UIImage imageNamed:@"arrow_1.png"];
        
        showListOfCardTypesBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfCardTypesBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
        [showListOfCardTypesBtn addTarget:self
                                   action:@selector(showListOfCardTypes:) forControlEvents:UIControlEventTouchDown];
        
        //upto here on 21/11/2017....
        
        @try {
            
            backbutton.tag = 88;
            
            label.text = NSLocalizedString(@"card_payment_details", nil);
            cardInfoLbl.text = NSLocalizedString(@"card_info", nil);
            approvalCodeLbl.text = NSLocalizedString(@"approval_code", nil);
            bankNameLbl.text = NSLocalizedString(@"bank_name", nil);
            
            cardTypeLbl.text = NSLocalizedString(@"card_type", nil);
            
            [payBtn setTitle:NSLocalizedString(@"ok", nil)    forState:UIControlStateNormal];
            [cancelBtn setTitle:NSLocalizedString(@"cancel", nil)    forState:UIControlStateNormal];
            
            
            
            if(cardTypesArr == nil){
                
                
                //cardTypesTbl table creation....
                cardTypesTbl = [[UITableView alloc] init];
                cardTypesTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
                cardTypesTbl.dataSource = self;
                cardTypesTbl.delegate = self;
                (cardTypesTbl.layer).borderWidth = 1.0f;
                cardTypesTbl.layer.cornerRadius = 3;
                cardTypesTbl.layer.borderColor = [UIColor grayColor].CGColor;
                
                
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                
                if ( ! ([[defaults valueForKey:CARD_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:CARD_OPTIONS] == nil)) {
                    
                    cardTypesArr = [[defaults valueForKey:CARD_OPTIONS] mutableCopy];
                    
                    if(cardTypesArr.count){
                        cradTypeTxt.text = [self checkGivenValueIsNullOrNil:[cardTypesArr[0] valueForKey:TENDER_NAME] defaultReturn:@""];
                        
                        if(billPaymentTendeInfoDic.allKeys.count)
                            [billPaymentTendeInfoDic removeAllObjects];
                        
                        billPaymentTendeInfoDic = [cardTypesArr[0] mutableCopy];
                    }
                }
                
            }
            
            
            
        } @catch (NSException *exception) {
            
        }
        
        
        [cardDetailsView addSubview:label];
        [cardDetailsView addSubview:backbutton];
        [cardDetailsView addSubview:cardInfoLbl];
        [cardDetailsView addSubview:approvalCodeLbl];
        [cardDetailsView addSubview:bankNameLbl];
        [cardDetailsView addSubview:cardInfoTxt];
        [cardDetailsView addSubview:approvalCodeTxt];
        [cardDetailsView addSubview:bankNameTxt];
        
        [cardDetailsView addSubview:cardTypeLbl];
        [cardDetailsView addSubview:cradTypeTxt];
        [cardDetailsView addSubview:showListOfCardTypesBtn];
        
        [cardDetailsView addSubview:payBtn];
        [cardDetailsView addSubview:cancelBtn];
        [self.view addSubview:cardDetailsView];
        
        //        cardDetailsView.frame = CGRectMake(230, 80, 500, 450);
        label.frame = CGRectMake(0, 0, 500, 70);
        backbutton.frame = CGRectMake(440, 10.0, 45.0, 45.0);
        
        
        cardInfoLbl.frame = CGRectMake( label.frame.origin.x + 20, label.frame.origin.y + label.frame.size.height + 20, (label.frame.size.width - 100) / 2, 40);
        cardInfoTxt.frame = CGRectMake( cardInfoLbl.frame.origin.x + cardInfoLbl.frame.size.width, cardInfoLbl.frame.origin.y, cardInfoLbl.frame.size.width + 20, cardInfoLbl.frame.size.height);
        
        approvalCodeLbl.frame = CGRectMake( cardInfoLbl.frame.origin.x, cardInfoLbl.frame.origin.y + cardInfoLbl.frame.size.height + 20, cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
        approvalCodeTxt.frame = CGRectMake( cardInfoTxt.frame.origin.x, approvalCodeLbl.frame.origin.y, cardInfoTxt.frame.size.width, cardInfoTxt.frame.size.height);
        
        bankNameLbl.frame = CGRectMake( cardInfoLbl.frame.origin.x, approvalCodeLbl.frame.origin.y + approvalCodeLbl.frame.size.height + 20, cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
        bankNameTxt.frame = CGRectMake( cardInfoTxt.frame.origin.x, bankNameLbl.frame.origin.y, cardInfoTxt.frame.size.width, cardInfoTxt.frame.size.height);
        
        cardTypeLbl.frame = CGRectMake( cardInfoLbl.frame.origin.x, bankNameLbl.frame.origin.y + bankNameLbl.frame.size.height + 20, cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
        cradTypeTxt.frame = CGRectMake( cardInfoTxt.frame.origin.x, cardTypeLbl.frame.origin.y, cardInfoTxt.frame.size.width, cardInfoTxt.frame.size.height);
        
        showListOfCardTypesBtn.frame = CGRectMake( (cradTypeTxt.frame.origin.x + cradTypeTxt.frame.size.width - (cradTypeTxt.frame.size.height * 1.4)), cradTypeTxt.frame.origin.y - 10, cradTypeTxt.frame.size.height * 1.4, cradTypeTxt.frame.size.height * 1.4);
        
        
        payBtn.frame = CGRectMake( (label.frame.size.width - 300) / 3, cardTypeLbl.frame.origin.y + cardTypeLbl.frame.size.height + 20, 150, 45);
        
        cancelBtn.frame = CGRectMake( (2 * payBtn.frame.origin.x) + payBtn.frame.size.width, payBtn.frame.origin.y, payBtn.frame.size.width, payBtn.frame.size.height);
        
        cardDetailsView.frame = CGRectMake( (self.view.frame.size.width - label.frame.size.width) / 2, (self.view.frame.size.height - (payBtn.frame.origin.y +  payBtn.frame.size.height + 20)) / 2, label.frame.size.width, payBtn.frame.origin.y +  payBtn.frame.size.height + 20);
        
        
        label.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
        
        cardInfoLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
        approvalCodeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
        bankNameLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
        cardTypeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
        
        cardInfoTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
        approvalCodeTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
        bankNameTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
        cradTypeTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        
        payBtn.layer.cornerRadius = 10.0f;
        payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        
        cancelBtn.layer.cornerRadius = 10.0f;
        cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        
        //        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //
        //            if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
        //                cardDetailsView.frame = CGRectMake(230, 80, 500, 450);
        //                label.frame = CGRectMake(0, 0, 500, 70);
        //                backbutton.frame = CGRectMake(440, 10.0, 45.0, 45.0);
        //
        //                label.font = [UIFont systemFontOfSize:25];
        //
        //                bankNameLbl.font = [UIFont systemFontOfSize:22];
        //                bankNameLbl.frame = CGRectMake(30,240,120,30);
        //                cardInfoLbl.font = [UIFont systemFontOfSize:22];
        //                cardInfoLbl.frame = CGRectMake(30, 100.0, 120, 30);
        //                approvalCodeLbl.font = [UIFont systemFontOfSize:22];
        //                approvalCodeLbl.frame = CGRectMake(30,170.0, 180, 30);
        //
        //
        //                cardInfoTxt.font = [UIFont systemFontOfSize:20];
        //                cardInfoTxt.frame = CGRectMake(200, 100.0, 200, 40);
        //                approvalCodeTxt.font = [UIFont systemFontOfSize:20];
        //                approvalCodeTxt.frame = CGRectMake(200, 170.0, 200, 40);
        //                bankNameTxt.frame = CGRectMake(200.0, 240.0, 200, 40);
        //                bankNameTxt.font = [UIFont systemFontOfSize:20];
        //
        //
        //
        //                payBtn.frame = CGRectMake(100.0, 350, 150,50.0);
        //                payBtn.layer.cornerRadius = 10.0f;
        //                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        //
        //                cancelBtn.frame = CGRectMake(280.0, 350, 150, 50.0);
        //                cancelBtn.layer.cornerRadius = 10.0f;
        //                cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        //
        //            }
        //            else {
        //                cardDetailsView.frame = CGRectMake(100, 80, 800, 550);
        //                label.frame = CGRectMake(0, 0, 800, 70);
        //                backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
        //
        //                label.font = [UIFont systemFontOfSize:25];
        //
        //                bankNameLbl.font = [UIFont systemFontOfSize:20];
        //                billStatusLabel.frame = CGRectMake(15,240,120,30);
        //                cardInfoLbl.font = [UIFont systemFontOfSize:20];
        //                cardInfoLbl.frame = CGRectMake(15, 100.0, 120, 30);
        //                approvalCodeLbl.font = [UIFont systemFontOfSize:20];
        //                approvalCodeLbl.frame = CGRectMake(15, 170.0, 120, 30);
        //
        //
        //                cardInfoTxt.font = [UIFont systemFontOfSize:20];
        //                cardInfoTxt.frame = CGRectMake(160, 100.0, 200, 40);
        //                approvalCodeTxt.font = [UIFont systemFontOfSize:20];
        //                approvalCodeTxt.frame = CGRectMake(160, 170.0, 200, 40);
        //                bankNameTxt.frame = CGRectMake(160.0, 240.0, 200, 40);
        //                bankNameTxt.font = [UIFont systemFontOfSize:20];
        //
        //                payBtn.frame = CGRectMake(150.0, 450, 500, 40.0);
        //                payBtn.layer.cornerRadius = 10.0f;
        //                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        //
        //                cancelBtn.frame = CGRectMake(350.0, 450, 500,40.0);
        //                cancelBtn.layer.cornerRadius = 10.0f;
        //                cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        //
        //            }
        //
        //        }
        //        else {
        //
        //            if (version >= 8.0 ) {
        //                paymentView.backgroundColor = [UIColor blackColor];
        //                label.frame = CGRectMake(0, 0, 300, 40);
        //                backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
        //                billLabel.frame = CGRectMake(10, 50, 80, 30);
        //                paidLbl.frame = CGRectMake(10, 100, 120, 30);
        //                billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
        //                billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
        //                payTxt1.frame = CGRectMake(140, 50, 150, 35);
        //                payTxt2.frame = CGRectMake(140, 100, 150, 35);
        //
        //                phonelbl.frame = CGRectMake(10, 170.0, 160.0, 30);
        //                emaillbl.frame = CGRectMake(10, 215.0, 160.0, 30);
        //                namelbl.frame = CGRectMake(10,260.0, 160.0, 45);
        //                phnotext.frame = CGRectMake(140.0, 170.0, 150.0, 35);
        //                emailtext.frame = CGRectMake(140.0, 215.0, 150.0, 35);
        //                nametext.frame = CGRectMake(140.0, 260.0, 150.0, 35);
        //
        //                streetlbl.frame = CGRectMake(10, 305, 160.0, 30);
        //                localitylbl.frame = CGRectMake(10, 350, 160.0, 30);
        //                citylbl.frame = CGRectMake(10, 395, 160.0, 35);
        //                pinlbl.frame = CGRectMake(10, 440, 160.0, 35);
        //
        //
        //                streetlbl.font = [UIFont systemFontOfSize:15];
        //                localitylbl.font = [UIFont systemFontOfSize:15];
        //                citylbl.font = [UIFont systemFontOfSize:15];
        //                pinlbl.font = [UIFont systemFontOfSize:15];
        //
        //                streettext.font = [UIFont systemFontOfSize:15];
        //                streettext.frame = CGRectMake(140, 305, 150, 30);
        //                locltytext.font = [UIFont systemFontOfSize:15];
        //                locltytext.frame = CGRectMake(140, 350, 150, 30);
        //                citytext.frame = CGRectMake(140, 395, 150, 30);
        //                citytext.font = [UIFont systemFontOfSize:15];
        //                pintext.frame = CGRectMake(140, 440, 150, 30);
        //                pintext.font = [UIFont systemFontOfSize:15];
        //
        //                payBtn.frame = CGRectMake(10.0, 475, 280.0, 30.0);
        //                payBtn.layer.cornerRadius = 15.0f;
        //                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        //                paymentView.frame = CGRectMake(10, 60, 300, 540);
        //            }
        //            else{
        //                label.frame = CGRectMake(0, 0, 300, 40);
        //                backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
        //                billLabel.frame = CGRectMake(10, 50, 80, 30);
        //                paidLbl.frame = CGRectMake(10, 100, 120, 30);
        //                billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
        //                billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
        //                payTxt1.frame = CGRectMake(140, 50, 150, 35);
        //                payTxt2.frame = CGRectMake(140, 100, 150, 35);
        //                payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
        //                payBtn.layer.cornerRadius = 15.0f;
        //                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        //                paymentView.frame = CGRectMake(10, 70, 300, 240);
        //            }
        //
        //        }
        
        
        //Changes done by Srinivasulu on 17/05/2018....
        //reaons -- Sir side remove animations. Commented and written the code....
        
        //        [UIView transitionFromView:paymentView
        //                            toView:cardDetailsView
        //                          duration:0.6
        //                           options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
        //                        completion:nil];
        
        paymentView.hidden = YES;
        cardDetailsView.hidden = NO;
        //upto here on 17/05/2018....
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are showing list of cardTypes avaliable....
 * @date         22/11/2017
 * @method       showListOfCardTypes:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By
 * @reason
 *
 */

-(void)showListOfCardTypes:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        
        float tableHeight = cardTypesArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = cardTypesArr.count * 33;
        
        if(cardTypesArr.count > 5)
            tableHeight = (tableHeight/cardTypesArr.count) * 5;
        
        
        [self showPopUpForTables:cardTypesTbl  popUpWidth:cradTypeTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:cradTypeTxt  showViewIn:cardDetailsView permittedArrowDirections:UIPopoverArrowDirectionUp];
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
}

/**
 * @description  it is an ........
 * @date         22/11/2017
 * @method       showOtherPaymentsView
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (void)showOtherPaymentsView{
    
    @try {
        
        UILabel * headerNameLbl;
        UIImage * image;
        UIButton * closeOtherPaymentBtn;
        
        UIButton * confirmOtherPaymentBtn;
        
        UIButton * cancelOtherPaymentBtn;
        UIButton * conformOtherPaymentBtn;
        UILabel * totalPayedAmountLbl;
        
        UIImage *  buttonImage_;
        UIButton * showListOfOtherPaymentOptionsBtn;
        
        buttonImage_ = [UIImage imageNamed:@"arrow_1.png"];
        
        showListOfOtherPaymentOptionsBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfOtherPaymentOptionsBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
        [showListOfOtherPaymentOptionsBtn addTarget:self
                                             action:@selector(showListOfOtherPaymentOptions:) forControlEvents:UIControlEventTouchDown];
        
        
        
        
        transperentView = [[UIView alloc] init];
        transperentView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.7];
        
        
        couponView    = [[UIView alloc] init];
        (couponView.layer).borderWidth = 1.0f;
        (couponView.layer).cornerRadius = 8.0f;
        couponView.backgroundColor = [UIColor blackColor];
        //        couponView.hidden = TRUE;
        //        couponView.tag = 33;
        
        headerNameLbl = [[UILabel alloc] init];
        headerNameLbl.textColor = [UIColor whiteColor];
        headerNameLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        headerNameLbl.textAlignment = NSTextAlignmentCenter;
        
        // close button to close the view ..
        image = [UIImage imageNamed:@"delete.png"];
        
        closeOtherPaymentBtn = [[UIButton alloc] init] ;
        [closeOtherPaymentBtn addTarget:self action:@selector(closeOtherPaymentsView:) forControlEvents:UIControlEventTouchUpInside];
        [closeOtherPaymentBtn setBackgroundImage:image    forState:UIControlStateNormal];
        
        
        otherPaymentTypeTxt = [[UITextField alloc] init];
        otherPaymentTypeTxt.borderStyle = UITextBorderStyleRoundedRect;
        otherPaymentTypeTxt.textColor = [UIColor blackColor];
        otherPaymentTypeTxt.backgroundColor = [UIColor whiteColor];
        otherPaymentTypeTxt.delegate = self;
        //        [otherPaymentTypeTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        
        otherPaymentReferenceNumTxt = [[UITextField alloc] init];
        otherPaymentReferenceNumTxt.borderStyle = UITextBorderStyleRoundedRect;
        otherPaymentReferenceNumTxt.textColor = [UIColor blackColor];
        otherPaymentReferenceNumTxt.backgroundColor = [UIColor whiteColor];
        otherPaymentReferenceNumTxt.delegate = self;
        
        otherPaymentCountTxt = [[UITextField alloc] init];
        otherPaymentCountTxt.borderStyle = UITextBorderStyleRoundedRect;
        otherPaymentCountTxt.textColor = [UIColor blackColor];
        otherPaymentCountTxt.backgroundColor = [UIColor whiteColor];
        otherPaymentCountTxt.delegate = self;
        otherPaymentCountTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        otherPaymentAmountTxt = [[UITextField alloc] init];
        otherPaymentAmountTxt.borderStyle = UITextBorderStyleRoundedRect;
        otherPaymentAmountTxt.textColor = [UIColor blackColor];
        otherPaymentAmountTxt.backgroundColor = [UIColor whiteColor];
        otherPaymentAmountTxt.delegate = self;
        otherPaymentAmountTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        confirmOtherPaymentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [confirmOtherPaymentBtn addTarget:self action:@selector(addNewOtherPaymentToBill:) forControlEvents:UIControlEventTouchUpInside];
        confirmOtherPaymentBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        //        confirmOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
        //        confirmOtherPaymentBtn.backgroundColor = [UIColor colorWithRed:(241/255.0) green:(246/255.0) blue:(241/255.0) alpha:1];
        
        conformOtherPaymentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [conformOtherPaymentBtn addTarget:self action:@selector(confirmOtherPaymentsView:) forControlEvents:UIControlEventTouchUpInside];
        conformOtherPaymentBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        //        conformOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
        //        conformOtherPaymentBtn.backgroundColor = [UIColor colorWithRed:(241/255.0) green:(246/255.0) blue:(241/255.0) alpha:1];
        
        cancelOtherPaymentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [cancelOtherPaymentBtn addTarget:self action:@selector(closeOtherPaymentsView:) forControlEvents:UIControlEventTouchUpInside];
        cancelOtherPaymentBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        //        cancelOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
        //        cancelOtherPaymentBtn.backgroundColor = [UIColor colorWithRed:(241/255.0) green:(246/255.0) blue:(241/255.0) alpha:1];
        
        paymentRefNoLbl = [[CustomLabel alloc] init];
        [paymentRefNoLbl awakeFromNib];
        
        paymentModeLbl = [[CustomLabel alloc] init];
        [paymentModeLbl awakeFromNib];
        
        paymentValueLbl = [[CustomLabel alloc] init];
        [paymentValueLbl awakeFromNib];
        
        paymentCountLbl = [[CustomLabel alloc] init];
        [paymentCountLbl awakeFromNib];
        
        paymentTotalLbl = [[CustomLabel alloc] init];
        [paymentTotalLbl awakeFromNib];
        
        if(otherPaymentsDeatilsArr == nil)
            otherPaymentsDeatilsArr = [NSMutableArray new];
        else if(otherPaymentsDeatilsArr.count){
            [otherPaymentsDeatilsArr removeAllObjects];
            [otherPaymentsDetailsTbl reloadData];
        }
        
        otherPaymentsDetailsTbl = [[UITableView alloc] init];
        otherPaymentsDetailsTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        otherPaymentsDetailsTbl.backgroundColor = [UIColor clearColor];
        otherPaymentsDetailsTbl.dataSource = self;
        otherPaymentsDetailsTbl.delegate = self;
        otherPaymentsDetailsTbl.tableFooterView = [[UIView  alloc] initWithFrame:CGRectZero];
        
        
        totalPayedAmountLbl = [[UILabel alloc] init];
        totalPayedAmountLbl.backgroundColor = [UIColor clearColor];
        totalPayedAmountLbl.textAlignment = NSTextAlignmentCenter;
        totalPayedAmountLbl.numberOfLines = 1;
        totalPayedAmountLbl.layer.borderWidth = 0;
        totalPayedAmountLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        totalPayedAmountLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        totalPayedAmountLbl.textColor = [UIColor whiteColor];
        
        otherPaymentTotalAmountLbl = [[UILabel alloc] init];
        otherPaymentTotalAmountLbl.backgroundColor = [UIColor whiteColor];
        otherPaymentTotalAmountLbl.textAlignment = NSTextAlignmentCenter;
        otherPaymentTotalAmountLbl.numberOfLines = 1;
        otherPaymentTotalAmountLbl.layer.borderWidth = 0    ;
        otherPaymentTotalAmountLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        otherPaymentTotalAmountLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        otherPaymentTotalAmountLbl.textColor = [UIColor blackColor];
        
        @try {
            
            headerNameLbl.text = NSLocalizedString(@"other_payments", nil);
            
            otherPaymentTypeTxt.placeholder = NSLocalizedString(@"select_payment_mode", nil);
            
            otherPaymentReferenceNumTxt.placeholder = NSLocalizedString(@"ref_number", nil);
            otherPaymentCountTxt.placeholder = NSLocalizedString(@"count", nil);
            otherPaymentAmountTxt.placeholder = NSLocalizedString(@"value", nil);
            
            //            confirmOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
            //            conformOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
            //            cancelOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
            
            confirmOtherPaymentBtn.titleLabel.text = NSLocalizedString(@"OK", nil);
            conformOtherPaymentBtn.titleLabel.text = NSLocalizedString(@"pay", nil);
            cancelOtherPaymentBtn.titleLabel.text = NSLocalizedString(@"cancel_", nil);
            
            [confirmOtherPaymentBtn setTitle:NSLocalizedString(@"OK", nil) forState:UIControlStateNormal];
            [conformOtherPaymentBtn setTitle:NSLocalizedString(@"pay", nil) forState:UIControlStateNormal];
            [cancelOtherPaymentBtn setTitle:NSLocalizedString(@"cancel_", nil) forState:UIControlStateNormal];
            
            
            confirmOtherPaymentBtn.titleLabel.textColor = [UIColor whiteColor];
            confirmOtherPaymentBtn.backgroundColor = [UIColor grayColor];
            conformOtherPaymentBtn.titleLabel.textColor = [UIColor whiteColor];
            conformOtherPaymentBtn.backgroundColor = [UIColor grayColor];
            cancelOtherPaymentBtn.titleLabel.textColor = [UIColor whiteColor];
            cancelOtherPaymentBtn.backgroundColor = [UIColor grayColor];
            
            confirmOtherPaymentBtn.layer.cornerRadius = 5.0f;
            conformOtherPaymentBtn.layer.cornerRadius = 5.0f;
            cancelOtherPaymentBtn.layer.cornerRadius = 5.0f;
            otherPaymentTotalAmountLbl.layer.cornerRadius = 5.0f;
            otherPaymentTotalAmountLbl.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:0.8];
            otherPaymentTotalAmountLbl.layer.masksToBounds = YES;
            
            
            paymentRefNoLbl.text = NSLocalizedString(@"ref_no", nil);
            paymentModeLbl.text = NSLocalizedString(@"pay_mode", nil);
            paymentValueLbl.text = NSLocalizedString(@"value", nil);
            paymentCountLbl.text = NSLocalizedString(@"count", nil);
            paymentTotalLbl.text = NSLocalizedString(@"total_", nil);
            
            totalPayedAmountLbl.text = NSLocalizedString(@"total_amount_:", nil);
            
            
            if(otherPaymentsOptionsArr == nil){
                
                //denominstaionsTypeTbl table creation....
                otherPaymentsOptionsTbl = [[UITableView alloc] init];
                otherPaymentsOptionsTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
                otherPaymentsOptionsTbl.dataSource = self;
                otherPaymentsOptionsTbl.delegate = self;
                (otherPaymentsOptionsTbl.layer).borderWidth = 1.0f;
                otherPaymentsOptionsTbl.layer.cornerRadius = 3;
                otherPaymentsOptionsTbl.layer.borderColor = [UIColor grayColor].CGColor;
                
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                
                if ( ! ([[defaults valueForKey:COUPON_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:COUPON_OPTIONS] == nil)) {
                    
                    otherPaymentsOptionsArr = [[defaults valueForKey:COUPON_OPTIONS] mutableCopy];
                    if(billPaymentTendeInfoDic.allKeys.count)
                        [billPaymentTendeInfoDic removeAllObjects];
                    
                    otherPaymentTypeTxt.text = [otherPaymentsOptionsArr[0] valueForKey:TENDER_NAME];
                    billPaymentTendeInfoDic = [otherPaymentsOptionsArr[0] mutableCopy];
                }
            }
            
            
            
            
            
        } @catch (NSException *exception) {
            
        } @finally {
            
        }
        
        [couponView addSubview:headerNameLbl];
        [couponView addSubview:closeOtherPaymentBtn];
        
        [couponView addSubview:otherPaymentTypeTxt];
        [couponView addSubview:otherPaymentReferenceNumTxt];
        [couponView addSubview:otherPaymentCountTxt];
        [couponView addSubview:otherPaymentAmountTxt];
        
        [couponView addSubview:showListOfOtherPaymentOptionsBtn];
        
        [couponView addSubview:confirmOtherPaymentBtn];
        
        
        [couponView addSubview:paymentRefNoLbl];
        [couponView addSubview:paymentModeLbl];
        [couponView addSubview:paymentValueLbl];
        [couponView addSubview:paymentCountLbl];
        [couponView addSubview:paymentTotalLbl];
        
        [couponView addSubview:otherPaymentsDetailsTbl];
        
        [couponView addSubview:paymentTotalLbl];
        
        [couponView addSubview:conformOtherPaymentBtn];
        [couponView addSubview:cancelOtherPaymentBtn];
        
        [couponView addSubview:totalPayedAmountLbl];
        [couponView addSubview:otherPaymentTotalAmountLbl];
        
        [transperentView addSubview:couponView];
        
        
        //        [couponView.layer setBorderWidth:1.0f];
        //        [couponView.layer setCornerRadius:8.0f];
        couponView.backgroundColor = [UIColor blackColor];
        couponView.layer.borderColor = [UIColor whiteColor].CGColor;
        couponView.layer.borderWidth = 1.0f;
        
        
        [self.view addSubview:transperentView];
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
            }
            else{
            }
            
            transperentView.frame = self.view.frame;
            
            headerNameLbl.frame = CGRectMake(0, 0, 680, 50);
            
            closeOtherPaymentBtn.frame =  CGRectMake( headerNameLbl.frame.size.width - 50, 5, 40, 40);
            
            otherPaymentTypeTxt.frame = CGRectMake( 10, headerNameLbl.frame.origin.y + headerNameLbl.frame.size.height + 10, 300, 40);
            
            
            showListOfOtherPaymentOptionsBtn.frame = CGRectMake( (otherPaymentTypeTxt.frame.origin.x + otherPaymentTypeTxt.frame.size.width - (otherPaymentTypeTxt.frame.size.height * 1.4)), otherPaymentTypeTxt.frame.origin.y - 7, otherPaymentTypeTxt.frame.size.height * 1.4, otherPaymentTypeTxt.frame.size.height * 1.4);
            
            otherPaymentReferenceNumTxt.frame = CGRectMake( otherPaymentTypeTxt.frame.origin.x, otherPaymentTypeTxt.frame.origin.y + otherPaymentTypeTxt.frame.size.height + 10, otherPaymentTypeTxt.frame.size.width, 40);
            otherPaymentAmountTxt.frame = CGRectMake( otherPaymentReferenceNumTxt.frame.origin.x + otherPaymentReferenceNumTxt.frame.size.width + 20, otherPaymentReferenceNumTxt.frame.origin.y, 100, 40);
            otherPaymentCountTxt.frame = CGRectMake( otherPaymentAmountTxt.frame.origin.x + otherPaymentAmountTxt.frame.size.width + 20, otherPaymentReferenceNumTxt.frame.origin.y, 100, 40);
            
            confirmOtherPaymentBtn.frame = CGRectMake( otherPaymentCountTxt.frame.origin.x + otherPaymentCountTxt.frame.size.width + 2, otherPaymentReferenceNumTxt.frame.origin.y, 80, 40);
            
            paymentRefNoLbl.frame = CGRectMake( otherPaymentTypeTxt.frame.origin.x, otherPaymentReferenceNumTxt.frame.origin.y + otherPaymentReferenceNumTxt.frame.size.height + 10, 0.65 * otherPaymentTypeTxt.frame.size.width, 40);
            paymentModeLbl.frame = CGRectMake( paymentRefNoLbl.frame.origin.x + paymentRefNoLbl.frame.size.width + 2, paymentRefNoLbl.frame.origin.y, otherPaymentTypeTxt.frame.size.width - (paymentRefNoLbl.frame.size.width + 2), 40);
            paymentValueLbl.frame = CGRectMake( paymentModeLbl.frame.origin.x + paymentModeLbl.frame.size.width + 2, paymentModeLbl.frame.origin.y, paymentModeLbl.frame.size.width, 40);
            paymentCountLbl.frame = CGRectMake( paymentValueLbl.frame.origin.x + paymentValueLbl.frame.size.width + 2, paymentModeLbl.frame.origin.y, paymentModeLbl.frame.size.width, 40);
            paymentTotalLbl.frame = CGRectMake( paymentCountLbl.frame.origin.x + paymentCountLbl.frame.size.width + 2, paymentModeLbl.frame.origin.y, (confirmOtherPaymentBtn.frame.origin.x + confirmOtherPaymentBtn.frame.size.width) - (paymentCountLbl.frame.origin.x + paymentCountLbl.frame.size.width + 2), 40);
            
            //aded by Srinivauslu on 11/12/2017....
            
            otherPaymentAmountTxt.frame = CGRectMake( otherPaymentReferenceNumTxt.frame.origin.x + otherPaymentReferenceNumTxt.frame.size.width + 2, otherPaymentReferenceNumTxt.frame.origin.y, paymentModeLbl.frame.size.width, 40);
            otherPaymentCountTxt.frame = CGRectMake( otherPaymentAmountTxt.frame.origin.x + otherPaymentAmountTxt.frame.size.width + 2, otherPaymentReferenceNumTxt.frame.origin.y, paymentModeLbl.frame.size.width, 40);
            
            confirmOtherPaymentBtn.frame = CGRectMake( paymentTotalLbl.frame.origin.x + paymentTotalLbl.frame.size.width - 100, otherPaymentReferenceNumTxt.frame.origin.y, 100, 40);
            
            //upto here on 11/12/2017....
            
            otherPaymentsDetailsTbl.frame = CGRectMake( 0, paymentRefNoLbl.frame.origin.y + paymentRefNoLbl.frame.size.height + 10, paymentTotalLbl.frame.origin.x + paymentTotalLbl.frame.size.width + 50, 250);
            
            conformOtherPaymentBtn.frame = CGRectMake( paymentRefNoLbl.frame.origin.x, otherPaymentsDetailsTbl.frame.origin.y + otherPaymentsDetailsTbl.frame.size.height + 10, 120, 40);
            
            cancelOtherPaymentBtn.frame = CGRectMake( conformOtherPaymentBtn.frame.origin.x + conformOtherPaymentBtn.frame.size.width + 20, conformOtherPaymentBtn.frame.origin.y, 120, 40);
            
            otherPaymentTotalAmountLbl.frame = CGRectMake(  paymentTotalLbl.frame.origin.x + paymentTotalLbl.frame.size.width -  paymentTotalLbl.frame.size.width, conformOtherPaymentBtn.frame.origin.y, paymentTotalLbl.frame.size.width, 40);
            
            totalPayedAmountLbl.frame = CGRectMake( otherPaymentTotalAmountLbl.frame.origin.x  -  (paymentTotalLbl.frame.size.width + 40), conformOtherPaymentBtn.frame.origin.y, paymentTotalLbl.frame.size.width + 40, 40);
            
            float origin_y = 20;
            
            if(20 > ( (self.view.frame.size.height - (conformOtherPaymentBtn.frame.origin.y +  conformOtherPaymentBtn.frame.size.height + 12)) / 2))
                origin_y =  (self.view.frame.size.height - (conformOtherPaymentBtn.frame.origin.y +  conformOtherPaymentBtn.frame.size.height + 12)) / 2;
            
            couponView.frame = CGRectMake( (transperentView.frame.size.width - headerNameLbl.frame.size.width) / 2, origin_y, headerNameLbl.frame.size.width, conformOtherPaymentBtn.frame.origin.y +  conformOtherPaymentBtn.frame.size.height + 12);
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:couponView andSubViews:YES fontSize:20.0f cornerRadius:0];
            
            headerNameLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0f];
            
        }
        else{
            
        }
        
        //couponView
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are showing list of cardTypes avaliable....
 * @date         22/11/2017
 * @method       showListOfCardTypes:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By
 * @reason
 *
 */

-(void)showListOfOtherPaymentOptions:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        
        
        
        
        float tableHeight = otherPaymentsOptionsArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = otherPaymentsOptionsArr.count * 33;
        
        if(otherPaymentsOptionsArr.count > 5)
            tableHeight = (tableHeight/otherPaymentsOptionsArr.count) * 5;
        //--
        
        [self showPopUpForTables:otherPaymentsOptionsTbl  popUpWidth:otherPaymentTypeTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:otherPaymentTypeTxt  showViewIn:couponView permittedArrowDirections:UIPopoverArrowDirectionUp];
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
}

/**
 * @description  here we are dismissing the editItemDetailsView....
 * @date         23/11/2017
 * @method       closeOtherPaymentsView:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)addNewOtherPaymentToBill:(UIButton *)sender{
    
    @try {
        
        float comleteCouponsValue = 0;
        
        //        if([otherPaymentCountTxt.text length] && [otherPaymentAmountTxt.text length])
        //          comleteCouponsValue =[otherPaymentCountTxt.text floatValue] * [otherPaymentAmountTxt.text floatValue];
        
        for(NSDictionary * dic in otherPaymentsDeatilsArr){
            
            comleteCouponsValue = comleteCouponsValue + [[dic valueForKey:@"paymentTotal"] floatValue];
        }
        
        if(!(otherPaymentReferenceNumTxt.text).length || !(otherPaymentCountTxt.text).length || !(otherPaymentAmountTxt.text).length || !(otherPaymentTypeTxt.text).length ){
            
            float y_axis = otherPaymentReferenceNumTxt.frame.origin.y + otherPaymentReferenceNumTxt.frame.size.height;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"please_enter_necessary_information", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
        }
        else if(comleteCouponsValue >=  (billDueValue.text).floatValue){
            //
            float y_axis = otherPaymentReferenceNumTxt.frame.origin.y + otherPaymentReferenceNumTxt.frame.size.height;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"paid_amount_already_exceeded_the_bill_amount", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
        }
        else{
            BOOL isNew = true;
            
            for (int i = 0; i < otherPaymentsDeatilsArr.count; i++) {
                
                NSMutableDictionary * mutDic = otherPaymentsDeatilsArr[i];
                
                if([[mutDic valueForKey:PAYMENT_MODE] isEqualToString:otherPaymentTypeTxt.text] &&  ([[mutDic valueForKey:PAYMENT_TYPE] caseInsensitiveCompare:otherPaymentReferenceNumTxt.text] == NSOrderedSame)){
                    
                    isNew = false;
                    [mutDic setValue:otherPaymentCountTxt.text forKey:PAYMENT_COUNT];
                    [mutDic setValue:otherPaymentAmountTxt.text forKey:PAYMENT_VALUE];
                    
                    [mutDic setValue:[NSString stringWithFormat:@"%.2f", ((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)]   forKey:PAYMENT_TOTAL];
                    [mutDic setValue:[NSString stringWithFormat:@"%.2f",((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)] forKey:PAID_AMT];
                    [mutDic setValue:[NSString stringWithFormat:@"%.2f",((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)] forKey:RECEIVED_AMOUNT];
                    otherPaymentsDeatilsArr[i] = mutDic;
                }
            }
            
            if(isNew){
                NSMutableDictionary * newDic = [NSMutableDictionary new];
                
                [newDic setValue:otherPaymentReferenceNumTxt.text  forKey:PAYMENT_TYPE];
                [newDic setValue:otherPaymentReferenceNumTxt.text forKey:COUPON_NO];
                
                [newDic setValue:otherPaymentTypeTxt.text  forKey:PAYMENT_MODE];
                
                [newDic setValue:otherPaymentCountTxt.text forKey:PAYMENT_COUNT];
                [newDic setValue:otherPaymentAmountTxt.text forKey:PAYMENT_VALUE];
                [newDic setValue:[NSString stringWithFormat:@"%.2f", ((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)]   forKey:PAYMENT_TOTAL];
                
                
                [newDic setValue:otherPaymentReferenceNumTxt.text forKey:COUPON_NO];
                [newDic setValue:@"" forKey:CARD_TYPE];
                [newDic setValue:[NSString stringWithFormat:@"%.2f",((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)] forKey:PAID_AMT];
                [newDic setValue:[NSString stringWithFormat:@"%.2f",((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)] forKey:RECEIVED_AMOUNT];
                
                
                //added by srinivasulu on 24/11/2017....
                
                if(billPaymentTendeInfoDic != nil && billPaymentTendeInfoDic.allKeys.count){
                    
                    //TENDER_NAME -- COUNTRY_CODE --  TENDER_CODE , TENDER_MODE --  TENDER_KEY
                    
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""] forKey:MODE_OF_PAY];
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""] forKey:TENDER_NAME];
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:COUNTRY_CODE] defaultReturn:@""] forKey:COUNTRY_CODE];
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_CODE] defaultReturn:@""] forKey:TENDER_MODE];
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_KEY] defaultReturn:@""] forKey:TENDER_KEY];
                    
                }
                
                //upto here on 24/11/2017....
                
                
                [newDic setValue:@"" forKey:CARD_INFO];
                [newDic setValue:@"" forKey:APPROVAL_CODE];
                [newDic setValue:@"" forKey:BANK_NAME];
                
                [newDic setValue:[WebServiceUtility getCurrentDate] forKey:DATE];
                
                [otherPaymentsDeatilsArr addObject:newDic];
            }
            
            
            
            float totalPaidAmount = 0.0;
            float totalBillAmount = (billDueValue.text).floatValue;
            
            
            for(int i = 0; i < otherPaymentsDeatilsArr.count; i++){
                
                NSMutableDictionary * dic = [otherPaymentsDeatilsArr[i] mutableCopy];
                
                float currentPay = [[dic valueForKey:PAYMENT_TOTAL] floatValue];
                
                totalPaidAmount = totalPaidAmount + currentPay;
                
                if((totalBillAmount < currentPay) && totalBillAmount > 0 ){
                    
                    dic[PAID_AMT] = [NSString stringWithFormat:@"%.2f",totalBillAmount];
                    //                    [dic setObject:[NSString stringWithFormat:@"%.2f",(currentPay - totalBillAmount)]  forKey:CHANGE_RETURN];
                }
                else if(totalBillAmount < 0){
                    
                    dic[PAID_AMT] = @"0.00";
                }
                otherPaymentsDeatilsArr[i] = dic;
                
                
                if(totalBillAmount > 0)
                    totalBillAmount = totalBillAmount - [[dic valueForKey:PAYMENT_TOTAL] floatValue];
                
            }
            
            
            
            otherPaymentTotalAmountLbl.text = [NSString stringWithFormat:@"%.2f",totalPaidAmount];
            
            otherPaymentReferenceNumTxt.text = @"";
            otherPaymentCountTxt.text = @"";
            otherPaymentAmountTxt.text = @"";
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        
        [otherPaymentsDetailsTbl reloadData];
    }
    
}

/**
 * @description  here we are deleting the  item from other payment options....
 * @date         24/11/2017....
 * @method       delTransactionFromOtherPaymentList:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (void)delTransactionFromOtherPaymentList:(UIButton *)sender{
    
    @try {
        
        [otherPaymentsDeatilsArr removeObjectAtIndex:sender.tag];
        
        float totalPaidAmount = 0.0;
        float totalBillAmount = (billDueValue.text).floatValue;
        
        
        for(int i = 0; i < otherPaymentsDeatilsArr.count; i++){
            
            NSMutableDictionary * dic = [otherPaymentsDeatilsArr[i] mutableCopy];
            
            float currentPay = [[dic valueForKey:PAYMENT_TOTAL] floatValue];
            
            totalPaidAmount = totalPaidAmount + currentPay;
            
            if((totalBillAmount < currentPay) && totalBillAmount > 0 ){
                
                dic[PAID_AMT] = [NSString stringWithFormat:@"%.2f",totalBillAmount];
                //                    [dic setObject:[NSString stringWithFormat:@"%.2f",(currentPay - totalBillAmount)]  forKey:CHANGE_RETURN];
            }
            else if(totalBillAmount < 0){
                
                dic[PAID_AMT] = @"0.00";
            }
            otherPaymentsDeatilsArr[i] = dic;
            
            
            if(totalBillAmount > 0)
                totalBillAmount = totalBillAmount - [[dic valueForKey:PAYMENT_TOTAL] floatValue];
            
        }
        
        
        
        otherPaymentTotalAmountLbl.text = [NSString stringWithFormat:@"%.2f",totalPaidAmount];
        
        otherPaymentReferenceNumTxt.text = @"";
        otherPaymentCountTxt.text = @"";
        otherPaymentAmountTxt.text = @"";
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        [otherPaymentsDetailsTbl reloadData];
    }
}

/**
 * @description  here we are dismissing the editItemDetailsView....
 * @date         23/11/2017
 * @method       closeOtherPaymentsView:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)confirmOtherPaymentsView:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if(otherPaymentsDeatilsArr.count){
            transperentView.hidden = YES;
            
            if ([transperentView isDescendantOfView:self.view])
                [transperentView removeFromSuperview];
            
            
            paymentTransactionArray = [otherPaymentsDeatilsArr mutableCopy];
            
            //need to code more....
            
            //added by Srinivasulu on 27/11/2017....
            
            //            [self addPaymentViewFor:@"Food Coupons"];
            
            type_Of_Payment = [[NSMutableString alloc] initWithString:@"Food Coupons"];
            [self populatePaymentView:type_Of_Payment];
            //            [self continuePay1];
            //upto here on 27/11/2017....
            
            
        }
        else{
            
            float y_axis = otherPaymentReferenceNumTxt.frame.origin.x + otherPaymentReferenceNumTxt.frame.size.height;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"please_do_payment_to_move_further", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
        }
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are dismissing the editItemDetailsView....
 * @date         23/11/2017
 * @method       closeOtherPaymentsView:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)closeOtherPaymentsView:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if(otherPaymentsDeatilsArr.count)
            [otherPaymentsDeatilsArr removeAllObjects];
        [otherPaymentsDetailsTbl reloadData];
        
        
        transperentView.hidden = YES;
        
        if ([transperentView isDescendantOfView:self.view])
            [transperentView removeFromSuperview];
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}
#pragma -mark notification method....

-(void)textChange:(NSNotification *)notification {
    
    UITextField *textfield = notification.object;
    
    
    if (textfield == giftNo) {
        
        if (giftNo.text.length == 5) {
            [giftNo resignFirstResponder];
            giftID.text = nil;
            [[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
            if (![giftVoucherArr containsObject:giftNo.text] && (giftID.text).length == 0) {
                [self giftContinue:(UIButton *)giftSearchBtn];
            }
            else {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
        }
    }
    else if (textfield == giftID){
        if (giftID.text.length == 16) {
            [giftID resignFirstResponder];
            giftNo.text = nil;
            [[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
            if (![giftVoucherArr containsObject:giftID.text] && (giftNo.text).length == 0) {
                [self giftContinue:(UIButton *)giftSearchBtn];
            }
            else {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
        }
    }
    else if (textfield == creditNoteTxt) {
        if (creditNoteTxt.text.length == 19) {
            [creditNoteTxt resignFirstResponder];
            [self getCreditNoteDetailsForId:creditNoteTxt.text];
        }
        
    }
}



#pragma -mark start of textFields delegates...

/**
 * @description  it is an textFieldDelegate method it will be executed when text  Begin edititng........
 * @date
 * @method       textFieldShouldBeginEditing:
 * @author
 * @param        UITextField
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField {
    
    if (textField == payTxt1) {
        paymentView.frame = CGRectMake(paymentView.frame.origin.x, paymentView.frame.origin.y - 90, paymentView.frame.size.width, paymentView.frame.size.height);
    }
    
    //    else if (textField == qty1) {
    //        if (qtyChangeDisplyView == nil) {
    //            [self textFieldDidChange:qty1];
    //            return NO;
    //        }
    //        else {
    //            if (![qtyChangeDisplyView isHidden]) {
    //                return NO;
    //            }
    //            else {
    //                [self textFieldDidChange:qty1];
    //                return NO;
    //            }
    //        }
    //    }
    //    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
    
    return YES;
}

/**
 * @description  it is an textFieldDelegate method it will be executed when text Begin edititng........
 * @date
 * @method       textFieldDidBeginEditing:
 * @author
 * @param        UITextField
 * @param
 * @param
 *
 * @return
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

-(void)textFieldDidBeginEditing:(UITextField *)textField {
    
    
    if (textField == phnotext || textField == landMarkTxt || textField == emailtext || textField == citytext ||  textField == pintext ||  textField == billRemarksTxt || textField == locltytext) {
        
        paymentView.frame = CGRectMake(paymentView.frame.origin.x, paymentView.frame.origin.y - 200.0, paymentView.frame.size.width, paymentView.frame.size.height);
    }
    else if (textField == qtyFeild || textField == newPriceField || textField == payTxt2 || textField == couponQty) {
        
        [textField selectAll:nil];
        [UIMenuController sharedMenuController].menuVisible = NO;
    }
    //added by Srinivasulu on 30/08/2017 && 28/03/2018....
    
    else if( textField == conversionRatioTxt || textField == totalDenominationsCountTxt){
        
        [textField selectAll:nil];
        [UIMenuController sharedMenuController].menuVisible = NO;
    }
    else if(textField.frame.origin.x == denomValueTxt.frame.origin.x || textField.frame.origin.x == returnDenomValueTxt.frame.origin.x){
        
        @try {
            
            offSetViewTo = textField.frame.origin.y;
            [self keyboardWillShow];
        } @catch (NSException *exception) {
            
        }
    }
    //upto here on 30/08/2017 && 28/03/2018....
    
}

/**
 * @description  it is an textFieldDelegate method it will be executed for ever character change........
 * @date
 * @method       textField:  shouldChangeCharactersInRange:  replacementString:
 * @author
 * @param        UITextField
 * @param        NSRange
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {
  
    if (textField == tensQty || textField == twentyQty || textField == fiftyQty || textField == hundredQty || textField == fiveHundredQty || textField == thousandQty || textField == oneQty || textField == twoQty || textField == fiveQty) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) {
                
                return NO;
            } // 48 unichar for 0
            if (character > 57) {
                
                return NO;
                
            } // 57 unichar for 9
            
        }
        
    }
    else if (textField == tensReturnQty || textField == twentyReturnQty || textField == fiftyReturnQty || textField == hundredReturnQty || textField == fiveHundredReturnQty || textField == thousandReturnQty || textField == oneReturnQty || textField == twoReturnQty || textField == fiveReturnQty) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) {
                
                return NO;
            } // 48 unichar for 0
            if (character > 57) {
                
                return NO;
                
            } // 57 unichar for 9
            
        }
        
    }
    
    
    else  if (textField == payTxt2) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) return NO; // 48 unichar for 0
            if (character > 57) return NO; // 57 unichar for 9
        }
        
    }
    else  if (textField == qtyFeild) {
        NSDictionary *returnDetailsDic  = [NSDictionary new];
        
        if (tempReturnItems.count > textField.tag) {
            
            returnDetailsDic = tempReturnItems[textField.tag];
        }
        else   if (tempExchangeItems.count > textField.tag) {
            
            returnDetailsDic = tempExchangeItems[textField.tag];
        }
        
        if ([[returnDetailsDic valueForKey:kPackagedType] boolValue]) {
            NSUInteger lengthOfString = string.length;
            for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
                unichar character = [string characterAtIndex:loopIndex];
                if (character < 48) return NO; // 48 unichar for 0
                if (character > 57) return NO; // 57 unichar for 9
            }
        }
        else {
            
            @try {
                NSString *newString = [textField.text stringByReplacingCharactersInRange:range withString:string];
                NSString *expression = @"^[0-9]*((\\.)[0-9]{0,2})?$";
                NSError *error = nil;
                NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
                NSUInteger numberOfMatches = [regex numberOfMatchesInString:newString options:0 range:NSMakeRange(0, newString.length)];
                return numberOfMatches != 0;
            } @catch (NSException *exception) {
                return  YES;
                
            }
        }
        
    }
    else  if (textField == couponValue || textField == couponQty) {
        
        // Check for non-numeric characters
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter valid value" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                return NO;
            } // 48 unichar for 0
            if (character > 57){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter valid value" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                return NO;
                
            } // 57 unichar for 9
        }
        
    }
    else if (textField == phnotext) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) return NO; // 48 unichar for 0
            if (character > 57) return NO; // 57 unichar for 9
        }
        NSLog(@"%lu",(unsigned long)(textField.text).length);
        //        if ([textField.text length]>=10) {
        //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter valid phone no" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        //            [alert show];
        //            return NO;
        //
        //        }
        //        else {
        //            return YES;
        //        }
        
    }
    
    //ADDED BY Srinivasulu on 18/04/2017....
    
    else if((textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x) || (textField == totalDenominationsCountTxt) ){
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) return NO; // 48 unichar for 0
            if (character > 57) return NO; // 57 unichar for 9
        }
        
    }
    else if(textField == conversionRatioTxt){
        
        @try {
            
            NSString *newString = [textField.text stringByReplacingCharactersInRange:range withString:string];
            NSString *expression = @"^[0-9]*((\\.)[0-9]{0,2})?$";
            NSError *error = nil;
            NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
            NSUInteger numberOfMatches = [regex numberOfMatchesInString:newString options:0 range:NSMakeRange(0, newString.length)];
            return numberOfMatches != 0;
        } @catch (NSException *exception) {
            
            return  YES;
        }
        
    }
    
    //upto here on 06/09/2017....
    //upto here on 18/04/2017....
    
    
    return YES;
}

/**
 * @description  it is an textFieldDelegate method it will be executed for ever character change........
 * @date
 * @method       textFieldDidChange:
 * @author
 * @param        UITextField
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */


- (void)textFieldDidChange:(UITextField *)textField {
    
    //    isOfflineService = YES;
    CheckWifi *wifi = [[CheckWifi alloc]init];
    BOOL status = [wifi checkWifi];
    if (status) {
        
        isOfflineService = FALSE;
    }
    else {
        isOfflineService = TRUE;
    }
    
    NSString *value = [pastBillField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    if(textField == pastBillField) {
        
        saleId = pastBillField.text;
        
        
        if (saleId.length == 3 && value.length != 0) {
            
            if (!isOfflineService) {
                
                {
                    @try {
                        WebServiceController *controller = [[WebServiceController alloc] init];
                        controller.getBillsDelegate = self;
                        if ([billingType isEqualToString:@"pending"]) {
                            [controller getBillIds:-1 deliveryType:@"" status:@"pending" searchCriteria:saleId];
                            
                        }
                        else if([paymentTypeVal.text isEqualToString:@"Door Delivery"]){
                            
                            [controller getBillIds:-1 deliveryType:@"HD" status:@"completed" searchCriteria:saleId];
                        }
                        else if([bill_status_val.text caseInsensitiveCompare:@"cancelled"]==NSOrderedSame){
                            
                            [controller getBillIds:-1 deliveryType:@"" status:@"cancelled" searchCriteria:saleId];
                        }
                        else {
                            [controller getBillIds:-1 deliveryType:@"" status:@"completed" searchCriteria:saleId];
                            
                        }
                        
                    } @catch (NSException *exception) {
                        
                    } @finally {
                        
                    }
                }
            }
            
            else {
                
                offline = [[OfflineBillingServices alloc]init];
                if ([billingType isEqualToString:@"pending"]) {
                    filteredSkuArrayList = [offline getPendingBills:saleId];
                    
                }
                else if([paymentTypeVal.text isEqualToString:@"Door Delivery"]){
                    
                    filteredSkuArrayList = [offline getDoorDeliveryBills:saleId];
                }
                else if([bill_status_val.text caseInsensitiveCompare:@"cancelled"]==NSOrderedSame){
                    
                    filteredSkuArrayList = [offline getCancelledBills:saleId];
                }
                else {
                    filteredSkuArrayList = [offline getExistedOfflineBillIds:saleId];
                    
                }
                
                
                
                if (filteredSkuArrayList>0) {
                    salesIdTable.hidden = NO;
                    [billingScrollView bringSubviewToFront:salesIdTable];
                    [salesIdTable reloadData];
                    
                }
                else {
                    salesIdTable.hidden = YES;
                    
                }
                
            }
            
            
        }
        else if(saleId.length > 3){
            
            if (salesIdArray.count) {
                
                filteredSkuArrayList = [[NSMutableArray alloc] init];
                
                if (!isOfflineService) {
                    
                    for (NSString *product in salesIdArray)
                    {
                        NSComparisonResult result = [product compare:pastBillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, (pastBillField.text).length)];
                        
                        if (result == NSOrderedSame)
                        {
                            [filteredSkuArrayList addObject:product];
                        }
                    }
                    
                }
                else {
                    
                    offline = [[OfflineBillingServices alloc]init];
                    if ([billingType isEqualToString:@"pending"]) {
                        filteredSkuArrayList = [offline getPendingBills:saleId];
                        
                    }
                    else if([paymentTypeVal.text isEqualToString:@"Door Delivery"]){
                        
                        filteredSkuArrayList = [offline getDoorDeliveryBills:saleId];
                    }
                    
                    else {
                        filteredSkuArrayList = [offline getExistedOfflineBillIds:saleId];
                        
                    }
                }
            }
            else {
                
                if (!isOfflineService) {
                    
                    WebServiceController *controller = [[WebServiceController alloc] init];
                    controller.getBillsDelegate = self;
                    if ([billingType isEqualToString:@"pending"]) {
                        [controller getBillIds:-1 deliveryType:@"" status:@"pending" searchCriteria:saleId];
                        
                    }
                    else if([paymentTypeVal.text isEqualToString:@"Door Delivery"]){
                        
                        [controller getBillIds:-1 deliveryType:@"HD" status:@"completed" searchCriteria:saleId];
                    }
                    else {
                        [controller getBillIds:-1 deliveryType:@"" status:@"completed" searchCriteria:saleId];
                        
                    }
                }
                
                else {
                    
                    offline = [[OfflineBillingServices alloc]init];
                    if ([billingType isEqualToString:@"pending"]) {
                        filteredSkuArrayList = [offline getPendingBills:saleId];
                        
                    }
                    else if([paymentTypeVal.text isEqualToString:@"Door Delivery"]){
                        
                        filteredSkuArrayList = [offline getDoorDeliveryBills:saleId];
                    }
                    
                    else {
                        filteredSkuArrayList = [offline getExistedOfflineBillIds:saleId];
                        
                    }
                    
                    
                    if (filteredSkuArrayList>0) {
                        salesIdTable.hidden = NO;
                        [billingScrollView bringSubviewToFront:salesIdTable];
                        [salesIdTable reloadData];
                        
                    }
                    else {
                        salesIdTable.hidden = YES;
                        
                    }
                    
                }
                
                
            }
            
            if (filteredSkuArrayList.count>0) {
                salesIdTable.hidden = NO;
                [billingScrollView bringSubviewToFront:salesIdTable];
                
                [salesIdTable reloadData];
                
            }
            else {
                salesIdTable.hidden = YES;
            }
        }
        //        else if([saleId length] == 2){
        //
        //            //salesIdTable.hidden =YES;
        //        }
        else{
            salesIdTable.hidden =YES;
            //return NO;
        }
    }
    else if (textField == BillField) {
        @try {
            if ((textField.text).length >= 3) {
                
                //[filteredSkuArrayList removeAllObjects];   // First clear the filtered array.
                skListArr = [[NSMutableArray alloc]init];
                skuArrayList = [[NSMutableArray alloc]init];
                filteredPriceArr = [[NSMutableArray alloc]init];
                
                
                // [skuArrayList removeAllObjects];
                // startIndexint_ = 0;
                
                CheckWifi *wifi = [[CheckWifi alloc]init];
                BOOL status = [wifi checkWifi];
                if (status) {
                    
                    isOfflineService = FALSE;
                }
                else {
                    isOfflineService = TRUE;
                }
                
                if (!isOfflineService) {
                    
                    // [self callSkuIdService:textField.text startIndex:[NSString stringWithFormat:@"%d",startIndexint_]];
                    
                    [self callSkuIdService:textField.text startIndex:@"-1"];
                    
                    
                }
                else {
                    
                    BOOL status = FALSE;
                    OmniRetailerViewController *omni = [[OmniRetailerViewController alloc] init];
                    status =  [omni checkDatabaseStatus];
                    if (status) {
                        
                        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
                        
                        filteredSkuArrayList = [[NSMutableArray alloc]init];
                        skuArrayList = [[NSMutableArray alloc]init];
                        // filteredPriceArr = [[NSMutableArray alloc]init];
                        tempSkuArrayList = [[NSMutableArray alloc]init];
                        
                        [self getSearchedProductDetails:BillField.text];
                        if (tempSkuArrayList.count==0) {
                            [self getSearchedProductsFromEAN:BillField.text];
                        }
                        
                        if (tempSkuArrayList.count==0) {
                            
                            if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
                                
                                
                                NSString *query = [NSString stringWithFormat:@"select * from sku_price_list where plu_code LIKE '%%%@%%'",BillField.text];
                                const char *sqlStatement = query.UTF8String;
                                
                                
                                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                                    //                        int count = sqlite3_column_count(selectStmt);
                                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                                        
                                        NSString  *skuId = @((char *)sqlite3_column_text(selectStmt,0));
                                        NSString  *name = @((char *)sqlite3_column_text(selectStmt, 2));
                                        NSString  *description = @((char *)sqlite3_column_text(selectStmt, 2));
                                        NSString  *price = @((char *)sqlite3_column_text(selectStmt,4));
                                        NSString  *ean = @((char *)sqlite3_column_text(selectStmt, 3));
                                        
                                        NSMutableDictionary *searchResult = [[NSMutableDictionary alloc]init];
                                        
                                        searchResult[@"skuID"] = skuId;
                                        searchResult[@"description"] = description;
                                        searchResult[@"name"] = name;
                                        searchResult[@"price"] = price;
                                        searchResult[@"ean"] = ean;
                                        
                                        
                                        [tempSkuArrayList addObject:searchResult];
                                        
                                        
                                    }
                                    sqlite3_finalize(selectStmt);
                                }
                                else {
                                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                                }
                                
                                NSLog(@"%@",tempSkuArrayList);
                            }
                            
                        }
                        for (NSDictionary *product in tempSkuArrayList)
                        {
                            NSComparisonResult result;
                            if ([product[@"productId"] length]!=0) {
                                
                                if (!([product[@"productId"] rangeOfString:textField.text options:NSCaseInsensitiveSearch].location == NSNotFound))
                                {
                                    result = [product[@"productId"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, (BillField.text).length)];
                                    if (result == NSOrderedSame)
                                    {
                                        [skListArr addObject:product[@"productId"]];
                                        if (!isOfflineService) {
                                            
                                            [filteredPriceArr addObject:[product[@"price"] stringValue]];
                                            
                                        }
                                        else {
                                            [filteredPriceArr addObject:product[@"price"] ];
                                            
                                        }                            [skuArrayList addObject:product];
                                    }
                                }
                            }
                            
                            if (!([product[@"description"] rangeOfString:textField.text options:NSCaseInsensitiveSearch].location == NSNotFound)) {
                                
                                [skListArr addObject:product[@"description"]];
                                if (!isOfflineService) {
                                    
                                    [filteredPriceArr addObject:[product[@"price"] stringValue]];
                                    
                                }
                                else {
                                    [filteredPriceArr addObject:product[@"price"] ];
                                    
                                }
                                [skuArrayList addObject:product];
                                
                                
                                
                            }
                            if (!([product[@"ean"] rangeOfString:BillField.text options:NSCaseInsensitiveSearch].location == NSNotFound)) {
                                if (![skListArr containsObject:product[@"description"]]) {
                                    [skListArr addObject:product[@"description"]];
                                    if (!isOfflineService) {
                                        
                                        [filteredPriceArr addObject:[product[@"price"] stringValue]];
                                        
                                    }
                                    else {
                                        [filteredPriceArr addObject:product[@"price"] ];
                                        
                                    }
                                    [skuArrayList addObject:product];
                                    
                                }
                                
                            }
                            else {
                                
                                // [filteredSkuArrayList addObject:[product objectForKey:@"skuID"]];
                                
                                
                                result = [product[@"skuID"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, (BillField.text).length)];
                                
                                //                            if (result == NSOrderedSame)
                                //                            {
                                [skListArr addObject:product[@"skuID"]];
                                [filteredPriceArr addObject:product[@"price"] ];
                                [skuArrayList addObject:product];
                                
                                //                            }
                            }
                            
                            
                        }
                        
                        //[newBillField setEnabled:FALSE];
                        
                        if (skListArr.count > 0) {
                            
                            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                                if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                                    
                                    skListTable.frame = CGRectMake(450, 40, 480,240);
                                    
                                }
                                else {
                                    skListTable.frame = CGRectMake(175, 100, 480,240);
                                    
                                }
                            }
                            else {
                                if (version >= 8.0) {
                                    skListTable.frame = CGRectMake(40, 145, 180,180);
                                }
                                else{
                                    skListTable.frame = CGRectMake(20, 75, 213,100);
                                }
                            }
                            
                            if (skListArr.count > 5) {
                                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                                    if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                                        
                                        skListTable.frame = CGRectMake(450, 40, 480,450);
                                        
                                    }
                                    else {
                                        skListTable.frame = CGRectMake(175, 100, 480,450);
                                        
                                    }
                                }
                                else {
                                    if (version >= 8.0) {
                                        skListTable.frame = CGRectMake(40, 145, 180,180);
                                    }
                                    else{
                                        skListTable.frame = CGRectMake(20, 75, 213,130);
                                    }
                                }
                            }
                            skListTable.hidden = NO;
                            [billingScrollView bringSubviewToFront:skListTable];
                            [skListTable reloadData];
                        }
                        else {
                            
                            skListTable.hidden = YES;
                            
                        }
                        
                    }
                    
                    
                    else {
                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"You need to first login with the internet connectivity" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                    }
                    
                }
                // NSLog(@"%@",textField.text);
                
                //            for (NSDictionary *product in tempSkuArrayList)
                //            {
                //                NSComparisonResult result;
                //                if ([[product objectForKey:@"productId"] length]!=0) {
                //
                //                    if (!([[product objectForKey:@"productId"] rangeOfString:textField.text options:NSCaseInsensitiveSearch].location == NSNotFound))
                //                    {
                //                        result = [[product objectForKey:@"productId"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, [BillField.text length])];
                //                        if (result == NSOrderedSame)
                //                        {
                //                            [skListArr addObject:[product objectForKey:@"productId"]];
                //                            if (!isOfflineService) {
                //
                //                                [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
                //
                //                            }
                //                            else {
                //                                [filteredPriceArr addObject:[product objectForKey:@"price"] ];
                //
                //                            }                            [skuArrayList addObject:product];
                //                        }
                //                    }
                //                }
                //
                //                if (!([[product objectForKey:@"description"] rangeOfString:textField.text options:NSCaseInsensitiveSearch].location == NSNotFound)) {
                //
                //                    [skListArr addObject:[product objectForKey:@"description"]];
                //                    if (!isOfflineService) {
                //
                //                        [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
                //
                //                    }
                //                    else {
                //                        [filteredPriceArr addObject:[product objectForKey:@"price"] ];
                //
                //                    }
                //                    [skuArrayList addObject:product];
                //
                //
                //
                //                }
                //                else {
                //
                //                    // [filteredSkuArrayList addObject:[product objectForKey:@"skuID"]];
                //
                //
                //                    result = [[product objectForKey:@"skuID"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, [BillField.text length])];
                //
                //                    if (result == NSOrderedSame)
                //                    {
                //                        [skListArr addObject:[product objectForKey:@"skuID"]];
                //                        [filteredPriceArr addObject:[product objectForKey:@"price"] ];
                //                        [skuArrayList addObject:product];
                //
                //                    }
                //                }
                //
                //
                //            }
                
                //[newBillField setEnabled:FALSE];
                
                if (skListArr.count > 0) {
                    
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                            
                            skListTable.frame = CGRectMake(450, 40, 480,240);
                            
                        }
                        else {
                            skListTable.frame = CGRectMake(175, 100, 480,240);
                            
                        }
                    }
                    else {
                        if (version >= 8.0) {
                            skListTable.frame = CGRectMake(40, 145, 180,180);
                        }
                        else{
                            skListTable.frame = CGRectMake(20, 75, 213,100);
                        }
                    }
                    
                    if (skListArr.count > 5) {
                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                            if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                                
                                skListTable.frame = CGRectMake(450, 40, 480,450);
                                
                            }
                            else {
                                skListTable.frame = CGRectMake(175, 100, 480,450);
                                
                            }
                        }
                        else {
                            if (version >= 8.0) {
                                skListTable.frame = CGRectMake(40, 145, 180,180);
                            }
                            else{
                                skListTable.frame = CGRectMake(20, 75, 213,130);
                            }
                        }
                    }
                    skListTable.hidden = NO;
                    [billingScrollView bringSubviewToFront:skListTable];
                    [skListTable reloadData];
                }
                else {
                    
                    skListTable.hidden = YES;
                    
                }
                
            }
            else if ((textField.text).length == 0) {
                skListTable.hidden = YES;
            }
            
        }
        @catch (NSException *exception) {
            NSLog(@"%@",exception);
            skListTable.hidden = YES;
        }
        @finally {
            [HUD setHidden:YES];
        }
        
    }
    else if (textField == phnotext) {
        
        
        if (textField.text.length == 10) {
            
            [self getCustomerDetails];
            
        }
        else {
            newCust.hidden = YES;
        }
    }
    else if(textField == payTxt2){
        
        if ((payTxt2.text).floatValue < (billDueValue.text).floatValue) {
            NSString *billDue1 = [NSString stringWithFormat:@"%.02f",(billDueValue.text).floatValue - (payTxt2.text).floatValue];
            billStatusLabel.hidden = NO;
            billStatusLabelValue.hidden = NO;
            billStatusLabel.text = @"Bill Due";
            finalBillDue1 = [billDue1 copy];
            billStatusLabelValue.text = finalBillDue1;
            if (segmentIndex == 6) {
                billStatusLabel.frame = CGRectMake(400.0, 450.0, 150.0, 40.0);
                billStatusLabelValue.frame = CGRectMake(680.0, 450.0, 150.0, 40.0);
            }
            else {
                //changed by Srinivasulu on 05/05/2017....
                
                //                billStatusLabel.frame = CGRectMake(400.0, 390, 150.0, 40.0);
                //                billStatusLabelValue.frame = CGRectMake(680.0, 390, 150.0, 40.0);
                
                
                
                billStatusLabel.frame = CGRectMake(400.0, citytext.frame.origin.y + citytext.frame.size.height, 150.0, 40.0);
                billStatusLabelValue.frame = CGRectMake(680.0, billStatusLabel.frame.origin.y, 150.0, 40.0);
                
                
                
                //upto here on 05/05/2017....
                
            }
            if ([WebServiceUtility checkIsCardPayment:paymentView]) {
                
                //changed by Srinivasulu on 05/05/2017....
                
                //                billStatusLabel.frame = CGRectMake(400.0, 330, 150.0, 40.0);
                //                billStatusLabelValue.frame = CGRectMake(680.0, 330, 150.0, 40.0);
                
                billStatusLabel.frame = CGRectMake(400.0, citytext.frame.origin.y + citytext.frame.size.height, 150.0, 40.0);
                billStatusLabelValue.frame = CGRectMake(680.0, billStatusLabel.frame.origin.y, 150.0, 40.0);
                
                //upto here on 05/05/2017....
                
            }
        }
        else if ((payTxt2.text).floatValue > (billDueValue.text).floatValue){
            NSString *changeReturn = [NSString stringWithFormat:@"%.02f",(payTxt2.text).floatValue - (billDueValue.text).floatValue];
            billStatusLabel.hidden = NO;
            billStatusLabelValue.hidden = NO;
            billStatusLabel.text = @"Change Return";
            billStatusLabelValue.text = changeReturn;
            NSString *billDue1 = @"0.0";
            billChangeReturn = [changeReturn copy];
            finalBillDue1 = [billDue1 copy];
            
            //changed by Srinivasulu on 05/05/2017....
            
            //            billStatusLabel.frame = CGRectMake(400.0, 390.0, 150.0, 40.0);
            //            billStatusLabelValue.frame = CGRectMake(680.0, 390.0, 150.0, 40.0);
            
            billStatusLabel.frame = CGRectMake(400.0, citytext.frame.origin.y + citytext.frame.size.height, 150.0, 40.0);
            billStatusLabelValue.frame = CGRectMake(680.0, billStatusLabel.frame.origin.y, 150.0, 40.0);
            
            //upto here on 05/05/2017....
            
            if ([WebServiceUtility checkIsCardPayment:paymentView]) {
                
                //changed by Srinivasulu on 05/05/2017....
                
                //                billStatusLabel.frame = CGRectMake(400.0, 330, 150.0, 40.0);
                //                billStatusLabelValue.frame = CGRectMake(680.0, 330, 150.0, 40.0);
                
                billStatusLabel.frame = CGRectMake(400.0, citytext.frame.origin.y + citytext.frame.size.height, 150.0, 40.0);
                billStatusLabelValue.frame = CGRectMake(680.0, billStatusLabel.frame.origin.y, 150.0, 40.0);
                
                //upto here on 05/05/2017....
                
            }
        }
        else {
            //            payTxt1.text = totalBillValue.text;
            //            payTxt2.text = @"";
            billStatusLabel.hidden = YES;
            billStatusLabelValue.hidden = YES;
            NSString *billDue1 = @"0.0";
            finalBillDue1 = [billDue1 copy];
            NSString *changeReturn = @"0.0";
            billChangeReturn = [changeReturn copy];
        }
        
    }
    
    //added by Srinivasulu on 16/11/2017....
    else if (textField == conversionRatioTxt) {
        
        @try {
            if(textField.tag == 2){
                
                [self updatePaidAmount];
            }
            else{
                
                [self updateReturnAmount];
            }
        } @catch (NSException *exception) {
            
        }
    }
    else if (textField == totalDenominationsCountTxt) {
        
        @try {
            if(textField.tag == 2){
                
                denomValueTxt.text = textField.text;
            }
            else{
                
                returnDenomValueTxt.text = textField.text;
            }
        } @catch (NSException *exception) {
            
        }
    }
    
}

/**
 * @description  It is tableFieldDelegates Method. It will executed when textFieldEndEditing....
 * @date
 * @method       textFieldDidEndEditing:
 * @author
 * @param        UITextField
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */


-(void)textFieldDidEndEditing:(UITextField *)textField {
    
    
    //added by Srinivasulu on 18/04/2017....
    [self keyboardWillHide];
    offSetViewTo = 0;
    
    if (textField == phnotext || textField == landMarkTxt || textField == emailtext || textField == citytext ||  textField == pintext ||  textField == billRemarksTxt || textField == locltytext) {
        
        paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80, paymentView.frame.size.width, paymentView.frame.size.height);
    }
    else if((textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x) ){
        @try {
            if (isReturnDenom) {
                
                
                //added by Srinivasulu on 07/06/2017....
                
                float textFieldCount = textField.frame.origin.y / 40;
                
                
                if(textFieldCount > returnDenomCountArr.count){
                    
                    
                    if([self checkMaxReturnAmountWith:(textField.text).intValue * textField.tag isTextField:YES]){
                        
                        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                            
                            oneReturnCount = 0;
                            oneReturnCount = (textField.text).intValue;
                            
                            if (oneReturnCount > 0) {
                                [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                            else if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]){
                                
                                [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                
                            }
                            
                            for (UITextField *text in returnDenomValCoinsTxtArr) {
                                
                                if (text.tag == textField.tag) {
                                    text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                    
                                    
                                }
                            }
                            
                            for (UILabel *text in returnDenomCountCoinsArr) {
                                
                                if (text.tag == textField.tag) {
                                    text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                    
                                }
                            }
                            
                        }
                        else {
                            oneReturnCount = 0;
                            oneReturnCount = (textField.text).intValue;
                            
                            int actualValue = 0;
                            
                            if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                
                                NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                
                                actualValue = str.integerValue;
                            }
                            if (oneReturnCount < actualValue) {
                                fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                                if (oneReturnCount > 0) {
                                    [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                }
                                else {
                                    if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                        [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                    }
                                }
                            }
                            
                            for (UITextField *text in returnDenomValCoinsTxtArr) {
                                
                                if (text.tag == textField.tag) {
                                    text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                    
                                    
                                }
                            }
                            
                            for (UILabel *text in returnDenomCountCoinsArr) {
                                
                                if (text.tag == textField.tag) {
                                    text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                    
                                }
                            }
                        }
                        
                    }
                    
                    else {
                        
                        oneReturnCount = 0;
                        
                        oneReturnCount = (textField.text).intValue;
                        
                        int actualValue = 0;
                        
                        if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            
                            NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            
                            actualValue = str.integerValue;
                        }
                        
                        
                        if (oneReturnCount < actualValue) {
                            
                            if (oneReturnCount > 0) {
                                [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                            else{
                                if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                    [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                }
                            }
                            
                        }
                        else{
                            
                            float y_axis = self.view.frame.size.height - 350;
                            
                            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
                            
                            if( (actualValue >= 0) && (oneReturnCount > 0))
                                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                            
                            oneReturnCount = actualValue;
                            
                        }
                        
                        
                        
                        for (UITextField *text in returnDenomValCoinsTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in returnDenomCountCoinsArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                
                            }
                        }
                        
                        
                        
                        
                        
                    }
                    
                    return;
                }
                
                
                //upto here by 07/06/2017....
                
                
                
                
                if([self checkMaxReturnAmountWith:(textField.text).intValue * textField.tag isTextField:YES]){
                    if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                        oneReturnCount = 0;
                        oneReturnCount = (textField.text).intValue;
                        fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                        if (oneReturnCount > 0) {
                            [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                        else if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]){
                            
                            [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            
                        }
                        
                        for (UITextField *text in returnDenomValTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in returnDenomCountArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                
                            }
                        }
                        
                    }
                    else {
                        oneReturnCount = 0;
                        
                        oneReturnCount = (textField.text).intValue;
                        
                        int actualValue = 0;
                        
                        if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            
                            NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            
                            actualValue = str.integerValue;
                        }
                        if (oneReturnCount < actualValue) {
                            fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                            if (oneReturnCount > 0) {
                                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                            else {
                                if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                    [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                }
                            }
                        }
                        
                        for (UITextField *text in returnDenomValTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in returnDenomCountArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                
                            }
                        }
                    }
                }
                else {
                    
                    oneReturnCount = 0;
                    
                    oneReturnCount = (textField.text).intValue;
                    
                    int actualValue = 0;
                    
                    if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                        
                        NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                        actualValue = str.integerValue;
                    }
                    
                    
                    if (oneReturnCount < actualValue) {
                        
                        if (oneReturnCount > 0) {
                            [returnDenominationDic setValue:[NSString stringWithFormat:@"%ld",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                        else{
                            if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                        }
                        
                    }
                    else{
                        
                        float y_axis = self.view.frame.size.height - 350;
                        
                        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
                        
                        if( (actualValue >= 0) && (oneReturnCount > 0))
                            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                        
                        oneReturnCount = actualValue;
                        
                        
                    }
                    
                    for (UITextField *text in returnDenomValTxtArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in returnDenomCountArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                            
                        }
                    }
                    
                    
                    
                    
                    //                    float y_axis = self.view.frame.size.height - 350;
                    //
                    //
                    //                    NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
                    //
                    //
                    //                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                    
                    
                }
                
                
                //                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
                //                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
            }
            
            //changed by Srinivasulu  on 18/04/2017.....
            
            
            
            
            
            
            else {
                
                
                //added by Srinivasulu on 07/06/2017....
                
                float textFieldCount = textField.frame.origin.y / 40;
                
                
                if(textFieldCount > denomCountArr.count){
                    
                    //here we are checking whether bill payment was exceed the total pay....
                    
                    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
                        
                        oneCount = 0;
                        oneCount = (textField.text).intValue;
                        
                        //here we are check whether user has enter the any text or not....
                        
                        if (oneCount > 0) {
                            
                            [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                        else{
                            
                            if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                        }
                        
                        for (UITextField *text in denomValCoinsTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%ld",oneCount];
                                
                                break;
                            }
                        }
                        
                        for (UILabel *text in denomCountCoinsArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                                break;
                                
                            }
                        }
                        
                        
                    }
                    else {
                        oneCount = 0;
                        
                        oneCount = (textField.text).intValue;
                        
                        int actualValue = 0;
                        
                        if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            
                            NSString *str = [denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            
                            actualValue =  str.intValue;
                        }
                        
                        
                        if (oneCount < actualValue) {
                            tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                            if (oneCount > 0) {
                                [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                            else{
                                if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                    [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                }
                            }
                            
                        }
                        else{
                            
                            float y_axis = self.view.frame.size.height - 350;
                            
                            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
                            
                            if( (actualValue >= 0) && (oneCount > 0))
                                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                            
                            oneCount = actualValue;
                            
                        }
                        
                        
                        for (UITextField *text in denomValCoinsTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%ld",oneCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in denomCountCoinsArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                                
                            }
                        }
                        
                        [self updatePaidAmount];
                        
                        if (((changeReturnVal.text).floatValue > 0) && ((totalAmtVal.text).floatValue == (paidVal.text).floatValue)){
                            
                            float y_axis = self.view.frame.size.height - 350;
                            
                            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
                            
                            
                            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                            
                        }
                        
                    }
                    
                    
                    NSLog(@"---------------- edited the coin field -----------");
                    
                    return;
                }
                
                //upto here on 07/06/2017....
                
                if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
                    oneCount = 0;
                    oneCount = (textField.text).intValue;
                    tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                    if (oneCount > 0) {
                        [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                    }
                    else{
                        tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                        if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                    }
                    
                    for (UITextField *text in denomValTxtArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%ld",oneCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in denomCountArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                            
                        }
                    }
                    
                }
                else {
                    oneCount = 0;
                    
                    oneCount = (textField.text).intValue;
                    
                    int actualValue = 0;
                    
                    if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                        
                        NSString *str = [denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                        actualValue = str.integerValue;
                    }
                    
                    //                int actualValue = [[denominationDic valueForKey:@"10"] intValue];
                    if (oneCount < actualValue) {
                        tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                        if (oneCount > 0) {
                            [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                        else{
                            if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                        }
                        
                    }
                    
                    //added by Srinivasulu on 07/06/2017....
                    
                    else{
                        
                        float y_axis = self.view.frame.size.height - 350;
                        
                        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
                        
                        if( (actualValue >= 0) && (oneCount > 0))
                            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                        
                        oneCount = actualValue;
                        
                        
                    }
                    
                    //upto here on 07/06/2017....
                    
                    
                    
                    for (UITextField *text in denomValTxtArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%ld",oneCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in denomCountArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                            
                        }
                    }
                    
                    [self updatePaidAmount];
                    
                    if (((changeReturnVal.text).floatValue > 0) && ((totalAmtVal.text).floatValue == (paidVal.text).floatValue)){
                        
                        float y_axis = self.view.frame.size.height - 350;
                        
                        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
                        
                        
                        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                        
                    }
                    
                }
            }
            
            //upto here on 18/04/2017....
            
        } @catch (NSException *exception) {
            
        } @finally {
            @try {
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                    
                    if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                        
                        paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                    }
                }
                else {
                    if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                            
                            //                            paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                            //                            if (!isReturnDenom && (textField.tag == 5 || textField.tag == 2 || textField.tag == 1)) {
                            //                                denominationView.frame = CGRectMake(denominationView.frame.origin.x, denominationView.frame.origin.y, denominationView.frame.size.width, denominationView.frame.size.height);
                            //                            }
                            //                            else if (textField.tag == 5 || textField.tag == 2 || textField.tag == 1) {
                            //                                returnDenominationView.frame = CGRectMake(returnDenominationView.frame.origin.x, returnDenominationView.frame.origin.y, returnDenominationView.frame.size.width, returnDenominationView.frame.size.height);
                            //                            }
                            
                        }
                        
                    }
                    else {
                        paymentView.frame = CGRectMake(20, 140, 730, 820.0);
                    }
                }
                
                
                if((textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x)){
                    if (isReturnDenom)
                        [self updateReturnAmount];
                    else
                        [self updatePaidAmount];
                }
                
            } @catch (NSException *exception) {
                
            }
            
        }
        
    }
    
    
    else if (textField == totalDenominationsCountTxt) {
        
        @try {
            if(textField.tag == 2){
                
                denomValueTxt.text = textField.text;
                [self textFieldDidEndEditing:denomValueTxt];
                [self updatePaidAmount];
            }
            else{
                
                returnDenomValueTxt.text = textField.text;
                [self textFieldDidEndEditing:returnDenomValueTxt];
                [self updateReturnAmount];
            }
        } @catch (NSException *exception) {
            
        }
    }
    
    //upto here on 18/04/2017......
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            if (textField == nametext || textField == phoneTxt || textField == emailtext || textField == pintext) {
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
            }
        }
    }
    else {
        
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            if (textField == nametext || textField == phoneTxt || textField == emailtext || textField == pintext) {
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
            }
        }
        else {
            paymentView.frame = CGRectMake(20, 100, 730, 820.0);
        }
    }
    //}
    
}

/**
 * @description  It is tableFieldDelegates Method. It will executed when user started entering input....
 * @date         29/05/2016
 * @method       textFieldShouldBeginEditing:
 * @author       Srinivasulu
 * @param        UITextField
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    
    [pastBillField resignFirstResponder];
    [payTxt1 resignFirstResponder];
    [payTxt2 resignFirstResponder];
    [smsField resignFirstResponder];
    [textField resignFirstResponder];
    if (textField == BillField) {
        [BillField resignFirstResponder];
    }
    
    if (textField == tensQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            tensCount = 0;
            tensCount = (tensQty.text).intValue;
            tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
            if (tensCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",tensCount] forKey:@"10"];
                tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
            }
            else{
                tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                if ([denominationDic valueForKey:@"10"]) {
                    [denominationDic removeObjectForKey:@"10"];
                }
            }
            
        }
        else {
            tensCount = 0;
            tensCount = (tensQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"10"] intValue];
            if (tensCount < actualValue) {
                tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                if (tensCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",tensCount] forKey:@"10"];
                    tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                }
                else{
                    tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                    if ([denominationDic valueForKey:@"10"]) {
                        [denominationDic removeObjectForKey:@"10"];
                    }
                }
                
            }
            else {
                tensQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"10"] intValue]];
                tenValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"10"] intValue] * 10.00)];
                
            }
        }
    }
    else if (textField == twentyQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            twentyCount = 0;
            twentyCount = (twentyQty.text).intValue;
            twentyQty.text = [NSString stringWithFormat:@"%d",twentyCount];
            if (twentyCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",twentyCount] forKey:@"20"];
                twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
            }
            else{
                twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
                if ([denominationDic valueForKey:@"20"]) {
                    [denominationDic removeObjectForKey:@"20"];
                }
            }
        }
        else {
            twentyCount = 0;
            twentyCount = (twentyQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"20"] intValue];
            if (twentyCount < actualValue) {
                twentyQty.text = [NSString stringWithFormat:@"%d",twentyCount];
                if (twentyCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",twentyCount] forKey:@"20"];
                    twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
                }
                else{
                    twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
                    if ([denominationDic valueForKey:@"20"]) {
                        [denominationDic removeObjectForKey:@"20"];
                    }
                }
            }
            else {
                twentyQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"20"] intValue]];
                twentyValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"20"] intValue] * 20.00)];
                
            }
        }
    }
    else if (textField == fiftyQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            fiftyCount = 0;
            fiftyCount = (fiftyQty.text).intValue;
            fiftyQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
            if (fiftyCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiftyCount] forKey:@"50"];
                fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
            }
            else{
                fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
                if ([denominationDic valueForKey:@"50"]) {
                    [denominationDic removeObjectForKey:@"50"];
                }
            }
        }
        else {
            fiftyCount = 0;
            fiftyCount = (fiftyQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"50"] intValue];
            if (fiftyCount < actualValue) {
                fiftyQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
                if (fiftyCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",fiftyCount] forKey:@"50"];
                    fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
                }
                else{
                    fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
                    if ([denominationDic valueForKey:@"50"]) {
                        [denominationDic removeObjectForKey:@"50"];
                    }
                }
            }
            else {
                fiftyQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"50"] intValue]];
                fiftyValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"50"] intValue] * 50.00)];
            }
        }
    }
    else if (textField == hundredQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            hundredCount = 0;
            hundredCount = (hundredQty.text).intValue;
            hundredQty.text = [NSString stringWithFormat:@"%d",hundredCount];
            if (hundredCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",hundredCount] forKey:@"100"];
                hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
            }
            else{
                hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
                if ([denominationDic valueForKey:@"100"]) {
                    [denominationDic removeObjectForKey:@"100"];
                }
            }
        }
        else {
            hundredCount = 0;
            hundredCount = (hundredQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"100"] intValue];
            if (hundredCount < actualValue) {
                hundredQty.text = [NSString stringWithFormat:@"%d",hundredCount];
                if (hundredCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",hundredCount] forKey:@"100"];
                    hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
                }
                else{
                    hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
                    if ([denominationDic valueForKey:@"100"]) {
                        [denominationDic removeObjectForKey:@"100"];
                    }
                }
            }else {
                hundredQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"100"] intValue]];
                hundValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"100"] intValue] * 100.00)];
            }
        }
    }
    else if (textField == fiveHundredQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            fiveHundredCount = 0;
            fiveHundredCount = (fiveHundredQty.text).intValue;
            fiveHundredQty.text = [NSString stringWithFormat:@"%d",fiveHundredCount];
            if (fiveHundredCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredCount] forKey:@"500"];
                fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
            }
            else{
                fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
                if ([denominationDic valueForKey:@"500"]) {
                    [denominationDic removeObjectForKey:@"500"];
                }
            }
        }
        else {
            fiveHundredCount = 0;
            fiveHundredCount = (fiveHundredQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"500"] intValue];
            if (fiveHundredCount < actualValue) {
                fiveHundredQty.text = [NSString stringWithFormat:@"%d",fiveHundredCount];
                if (fiveHundredCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredCount] forKey:@"500"];
                    fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
                }
                else{
                    fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
                    if ([denominationDic valueForKey:@"500"]) {
                        [denominationDic removeObjectForKey:@"500"];
                    }
                }
            }
            else{
                fiveHundredQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"500"] intValue]];
                fiveHundValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"500"] intValue] * 500.00)];
            }
        }
    }
    else if (textField == thousandQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            thousandCount = 0;
            thousandCount = (thousandQty.text).intValue;
            thousandQty.text = [NSString stringWithFormat:@"%d",thousandCount];
            if (thousandCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",thousandCount] forKey:@"2000"];
                thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
            }
            else{
                thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
                if ([denominationDic valueForKey:@"2000"]) {
                    [denominationDic removeObjectForKey:@"2000"];
                }
            }
        }
        else {
            thousandCount = 0;
            thousandCount = (thousandQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"2000"] intValue];
            if (thousandCount < actualValue) {
                thousandQty.text = [NSString stringWithFormat:@"%d",thousandCount];
                if (thousandCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",thousandCount] forKey:@"2000"];
                    thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
                }
                else{
                    thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
                    if ([denominationDic valueForKey:@"2000"]) {
                        [denominationDic removeObjectForKey:@"2000"];
                    }
                }
            }else{
                thousandQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"2000"] intValue]];
                thousandValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"2000"] intValue] * 2000.00)];
            }
        }
    }
    else if (textField == oneQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            oneCount = 0;
            oneCount = (oneQty.text).intValue;
            oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
            if (oneCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:@"1"];
                oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
            }
            else{
                oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
                if ([denominationDic valueForKey:@"1"]) {
                    [denominationDic removeObjectForKey:@"1"];
                }
            }
        }
        else {
            oneCount = 0;
            oneCount = (oneQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"1"] intValue];
            if (oneCount < actualValue) {
                oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
                if (oneCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:@"1"];
                    oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
                }
                else{
                    oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
                    if ([denominationDic valueForKey:@"1"]) {
                        [denominationDic removeObjectForKey:@"1"];
                    }
                }
            }else{
                oneQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"1"] intValue]];
                oneValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"1"] intValue] * 1.00)];
            }
        }
    }
    else if (textField == twoQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            twoCount = 0;
            twoCount = (twoQty.text).intValue;
            twoQty.text = [NSString stringWithFormat:@"%d",twoCount];
            if (twoCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",twoCount] forKey:@"2"];
                twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount * 2.00)];
            }
            else{
                twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount *2.00)];
                if ([denominationDic valueForKey:@"2"]) {
                    [denominationDic removeObjectForKey:@"2"];
                }
            }
        }
        else {
            twoCount = 0;
            twoCount = (twoQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"2"] intValue];
            if (twoCount < actualValue) {
                twoQty.text = [NSString stringWithFormat:@"%d",twoCount];
                if (twoCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",twoCount] forKey:@"2"];
                    twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount * 2.00)];
                }
                else{
                    twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount *2.00)];
                    if ([denominationDic valueForKey:@"2"]) {
                        [denominationDic removeObjectForKey:@"2"];
                    }
                }
            }else{
                twoQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"2"] intValue]];
                twoValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"2"] intValue] * 2.00)];
            }
        }
    }
    else if (textField == fiveQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            fiveCount = 0;
            fiveCount = (fiveQty.text).intValue;
            fiveQty.text = [NSString stringWithFormat:@"%d",fiveCount];
            if (fiveCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveCount] forKey:@"5"];
                fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount * 5.00)];
            }
            else{
                fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount *5.00)];
                if ([denominationDic valueForKey:@"5"]) {
                    [denominationDic removeObjectForKey:@"5"];
                }
            }
        }
        else {
            fiveCount = 0;
            fiveCount = (fiveQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"5"] intValue];
            if (fiveCount < actualValue) {
                fiveQty.text = [NSString stringWithFormat:@"%d",fiveCount];
                if (fiveCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveCount] forKey:@"5"];
                    fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount * 5.00)];
                }
                else{
                    fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount *5.00)];
                    if ([denominationDic valueForKey:@"5"]) {
                        [denominationDic removeObjectForKey:@"5"];
                    }
                }
            }
            else{
                fiveQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"5"] intValue]];
                fiveValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"5"] intValue] * 5.00)];
            }
        }
    }
    else if (textField == tensReturnQty){
        if([self checkMaxReturnAmountWith:(tensReturnQty.text).intValue * 10.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                tensReturnCount = 0;
                tensReturnCount = (tensReturnQty.text).intValue;
                tensReturnQty.text = [NSString stringWithFormat:@"%d",tensReturnCount];
                if (tensReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",tensReturnCount] forKey:@"10"];
                    tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
                }
            }
            else {
                tensReturnCount = 0;
                tensReturnCount = (tensReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"10"] intValue];
                if (tensReturnCount < actualValue) {
                    tensReturnQty.text = [NSString stringWithFormat:@"%d",tensReturnCount];
                    if (tensReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",tensReturnCount] forKey:@"10"];
                        tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
                    }
                    else {
                        tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
                        if ([returnDenominationDic valueForKey:@"10"]) {
                            [returnDenominationDic removeObjectForKey:@"10"];
                        }
                    }
                }
                else {
                    tensReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"10"] intValue]];
                    tenReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"10"] intValue] * 10.00)];
                }
            }
            
        }
        else {
            tensReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"10"] intValue]];
            tenReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"10"] intValue] * 10.00)];
        }
    }
    else if (textField == twentyReturnQty){
        if([self checkMaxReturnAmountWith:(twentyReturnQty.text).intValue * 20.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                twentyReturnCount = 0;
                twentyReturnCount = (twentyReturnQty.text).intValue;
                twentyReturnQty.text = [NSString stringWithFormat:@"%d",twentyReturnCount];
                if (twentyReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twentyReturnCount] forKey:@"20"];
                    twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
                }
            }
            else {
                twentyReturnCount = 0;
                twentyReturnCount = (twentyReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"20"] intValue];
                if (twentyReturnCount < actualValue) {
                    twentyReturnQty.text = [NSString stringWithFormat:@"%d",twentyReturnCount];
                    if (twentyReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twentyReturnCount] forKey:@"20"];
                        twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
                    }
                    else {
                        twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
                        if ([returnDenominationDic valueForKey:@"20"]) {
                            [returnDenominationDic removeObjectForKey:@"20"];
                        }
                    }
                }
                else {
                    twentyReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"20"] intValue]];
                    twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"20"] intValue] * 20.00)];
                }
            }
        }
        else {
            twentyReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"20"] intValue]];
            twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"20"] intValue] * 20.00)];
        }
    }
    else if (textField == fiftyReturnQty){
        if([self checkMaxReturnAmountWith:(fiftyReturnQty.text).intValue * 50.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                fiftyReturnCount = 0;
                fiftyReturnCount = (fiftyReturnQty.text).intValue;
                fiftyReturnQty.text = [NSString stringWithFormat:@"%d",fiftyReturnCount];
                if (fiftyReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiftyReturnCount] forKey:@"50"];
                    fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
                }
            }
            else {
                fiftyReturnCount = 0;
                fiftyReturnCount = (fiftyReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"50"] intValue];
                if (fiftyReturnCount < actualValue) {
                    fiftyReturnQty.text = [NSString stringWithFormat:@"%d",fiftyReturnCount];
                    if (fiftyReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiftyReturnCount] forKey:@"50"];
                        fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
                    }
                    else {
                        fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
                        if ([returnDenominationDic valueForKey:@"50"]) {
                            [returnDenominationDic removeObjectForKey:@"50"];
                        }
                    }
                }
                else {
                    fiftyReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"50"] intValue]];
                    fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"50"] intValue] * 50.00)];
                }
            }
        }
        else {
            fiftyReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"50"] intValue]];
            fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"50"] intValue] * 50.00)];
        }
    }
    else if (textField == hundredReturnQty){
        if([self checkMaxReturnAmountWith:(hundredReturnQty.text).intValue * 100.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                hundredReturnCount = 0;
                hundredReturnCount = (hundredReturnQty.text).intValue;
                hundredReturnQty.text = [NSString stringWithFormat:@"%d",hundredReturnCount];
                if (hundredReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",hundredReturnCount] forKey:@"100"];
                    hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
                }
            }
            else {
                hundredReturnCount = 0;
                hundredReturnCount = (hundredReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"100"] intValue];
                if (hundredReturnCount < actualValue) {
                    hundredReturnQty.text = [NSString stringWithFormat:@"%d",hundredReturnCount];
                    if (hundredReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",hundredReturnCount] forKey:@"100"];
                        hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
                    }
                    else {
                        hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
                        if ([returnDenominationDic valueForKey:@"100"]) {
                            [returnDenominationDic removeObjectForKey:@"100"];
                        }
                    }
                }
                else {
                    hundredReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"100"] intValue]];
                    hundReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"100"] intValue] * 100.00)];
                }
            }
        }
        else {
            hundredReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"100"] intValue]];
            hundReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"100"] intValue] * 100.00)];
        }
    }
    else if (textField == fiveHundredReturnQty){
        if([self checkMaxReturnAmountWith:(fiveHundredReturnQty.text).intValue * 500.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                fiveHundredReturnCount = 0;
                fiveHundredReturnCount = (fiveHundredReturnQty.text).intValue;
                fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",fiveHundredReturnCount];
                if (fiveHundredReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredReturnCount] forKey:@"500"];
                    fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
                }
            }
            else {
                fiveHundredReturnCount = 0;
                fiveHundredReturnCount = (fiveHundredReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"500"] intValue];
                if (fiveHundredReturnCount < actualValue) {
                    fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",fiveHundredReturnCount];
                    if (fiveHundredReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredReturnCount] forKey:@"500"];
                        fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
                    }
                    else {
                        fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
                        if ([returnDenominationDic valueForKey:@"500"]) {
                            [returnDenominationDic removeObjectForKey:@"500"];
                        }
                    }
                }
                else {
                    fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"500"] intValue]];
                    fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"500"] intValue] * 500.00)];
                }
            }
        }
        else {
            fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"500"] intValue]];
            fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"500"] intValue] * 500.00)];
        }
    }
    else if (textField == thousandReturnQty){
        if([self checkMaxReturnAmountWith:(thousandReturnQty.text).intValue * 2000.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                thousandReturnCount = 0;
                thousandReturnCount = (thousandReturnQty.text).intValue;
                thousandReturnQty.text = [NSString stringWithFormat:@"%d",thousandReturnCount];
                if (thousandReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",thousandReturnCount] forKey:@"2000"];
                    thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
                }
            }
            else {
                thousandReturnCount = 0;
                thousandReturnCount = (thousandReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"2000"] intValue];
                if (thousandReturnCount < actualValue) {
                    thousandReturnQty.text = [NSString stringWithFormat:@"%d",thousandReturnCount];
                    if (thousandReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",thousandReturnCount] forKey:@"2000"];
                        thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
                    }
                    else {
                        thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
                        if ([returnDenominationDic valueForKey:@"2000"]) {
                            [returnDenominationDic removeObjectForKey:@"2000"];
                        }
                    }
                }
                else {
                    thousandReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"2000"] intValue]];
                    thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"2000"] intValue] * 2000.00)];
                }
            }
        }
        else {
            thousandReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"2000"] intValue]];
            thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"2000"] intValue] * 2000.00)];
        }
    }
    else if (textField == oneReturnQty){
        if([self checkMaxReturnAmountWith:(oneReturnQty.text).intValue * 1.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                oneReturnCount = 0;
                oneReturnCount = (oneReturnQty.text).intValue;
                oneReturnQty.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                if (oneReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:@"1"];
                    oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
                }
            }
            else {
                oneReturnCount = 0;
                oneReturnCount = (oneReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"1"] intValue];
                if (oneReturnCount < actualValue) {
                    oneReturnQty.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                    if (oneReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:@"1"];
                        oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
                    }
                    else {
                        oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
                        if ([returnDenominationDic valueForKey:@"1"]) {
                            [returnDenominationDic removeObjectForKey:@"1"];
                        }
                    }
                }
                else {
                    oneReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"1"] intValue]];
                    oneReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"1"] intValue] * 1.00)];
                }
            }
        }
        else {
            oneReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"1"] intValue]];
            oneReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"1"] intValue] * 1.00)];
        }
    }
    else if (textField == twoReturnQty){
        if([self checkMaxReturnAmountWith:(twoReturnQty.text).intValue * 2.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                twoReturnCount = 0;
                twoReturnCount = (twoReturnQty.text).intValue;
                twoReturnQty.text = [NSString stringWithFormat:@"%d",twoReturnCount];
                if (twoReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twoReturnCount] forKey:@"2"];
                    twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
                }
            }
            else {
                twoReturnCount = 0;
                twoReturnCount = (twoReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"2"] intValue];
                if (twoReturnCount < actualValue) {
                    twoReturnQty.text = [NSString stringWithFormat:@"%d",twoReturnCount];
                    if (twoReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twoReturnCount] forKey:@"2"];
                        twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
                    }
                    else {
                        twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
                        if ([returnDenominationDic valueForKey:@"2"]) {
                            [returnDenominationDic removeObjectForKey:@"2"];
                        }
                    }
                }
                else {
                    twoReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"2"] intValue]];
                    twoReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"2"] intValue] * 2.00)];
                }
            }
        }
        else {
            twoReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"2"] intValue]];
            twoReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"2"] intValue] * 2.00)];
        }
    }
    else if (textField == fiveReturnQty){
        if([self checkMaxReturnAmountWith:(fiveReturnQty.text).intValue * 5.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                fiveReturnCount = 0;
                fiveReturnCount = (fiveReturnQty.text).intValue;
                fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                if (fiveReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveReturnCount] forKey:@"5"];
                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
                }
            }
            else {
                fiveReturnCount = 0;
                fiveReturnCount = (fiveReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"5"] intValue];
                if (fiveReturnCount < actualValue) {
                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                    if (fiveReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveReturnCount] forKey:@"5"];
                        fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
                    }
                    else {
                        fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
                        if ([returnDenominationDic valueForKey:@"5"]) {
                            [returnDenominationDic removeObjectForKey:@"5"];
                        }
                    }
                }
                else {
                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
                }
            }
        }
        else {
            fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
            fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
        }
    }
    
    //    else {
    //        @try {
    //            if (isReturnDenom) {
    //                if([self checkMaxReturnAmountWith:[textField.text intValue] * textField.tag isTextField:YES]){
    //                    if (!([returnedval.text floatValue] >= [returnAmtVal.text floatValue])) {
    //                        oneReturnCount = 0;
    //                        oneReturnCount = [textField.text intValue];
    //                        fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
    //                        if (oneReturnCount > 0) {
    //                            [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                        }
    //                        else if ([[returnDenominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]){
    //
    //                            [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //
    //                        }
    //
    //                        for (UITextField *text in returnDenomValTxtArr) {
    //
    //                            if (text.tag == textField.tag) {
    //                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
    //
    //
    //                            }
    //                        }
    //
    //                        for (UILabel *text in returnDenomCountArr) {
    //
    //                            if (text.tag == textField.tag) {
    //                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
    //
    //                            }
    //                        }
    //
    //                    }
    //                    else {
    //                        oneReturnCount = 0;
    //
    //                        oneReturnCount = [textField.text intValue];
    //
    //                        int actualValue = 0;
    //
    //                        if ([[returnDenominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //
    //                            NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //
    //                            actualValue = [str integerValue];
    //                        }
    //                        if (oneReturnCount < actualValue) {
    //                            fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
    //                            if (oneReturnCount > 0) {
    //                                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                            }
    //                            else {
    //                                if ([[returnDenominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //                                    [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                                }
    //                            }
    //                        }
    //
    //                        for (UITextField *text in returnDenomValTxtArr) {
    //
    //                            if (text.tag == textField.tag) {
    //                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
    //
    //
    //                            }
    //                        }
    //
    //                        for (UILabel *text in returnDenomCountArr) {
    //
    //                            if (text.tag == textField.tag) {
    //                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
    //
    //                            }
    //                        }
    //                    }
    //                }
    //                else {
    //
    //                    oneReturnCount = [textField.text intValue];
    //
    //                    for (UITextField *text in returnDenomValTxtArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
    //
    //
    //                        }
    //                    }
    //
    //                    for (UILabel *text in returnDenomCountArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
    //
    //                        }
    //                    }
    //                }
    //
    //
    //                //                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
    //                //                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
    //            }
    //
    //
    //            else {
    //                if (!([changeReturnVal.text floatValue] > 0) && !([totalAmtVal.text floatValue] == [paidVal.text floatValue])) {
    //                    oneCount = 0;
    //                    oneCount = [textField.text intValue];
    //                    tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
    //                    if (oneCount > 0) {
    //                        [denominationDic setValue:[NSString stringWithFormat:@"%ld",(long)oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //
    //                    }
    //                    else{
    //                        tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
    //                        if ([[denominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //                            [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                        }
    //                    }
    //
    //                    for (UITextField *text in denomValTxtArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%ld",oneCount];
    //
    //
    //                        }
    //                    }
    //
    //                    for (UILabel *text in denomCountArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
    //
    //                        }
    //                    }
    //
    //                }
    //                else {
    //                    oneCount = 0;
    //
    //                    oneCount = [textField.text intValue];
    //
    //                    int actualValue = 0;
    //
    //                    if ([[denominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //
    //                        NSString *str = [denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //
    //                        actualValue = [str integerValue];
    //                    }
    //
    //                    //                int actualValue = [[denominationDic valueForKey:@"10"] intValue];
    //                    if (oneCount < actualValue) {
    //                        tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
    //                        if (oneCount > 0) {
    //                            [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                        }
    //                        else{
    //                            if ([[denominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //                                [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                            }
    //                        }
    //
    //                    }
    //                    //                else {
    //                    //                    tensQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"10"] intValue]];
    //                    //                    tenValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"10"] intValue] * 10.00)];
    //                    //
    //                    //                }
    //
    //                    for (UITextField *text in denomValTxtArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%ld",oneCount];
    //
    //
    //                        }
    //                    }
    //
    //                    for (UILabel *text in denomCountArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
    //
    //                        }
    //                    }
    //
    //                }
    //            }
    //        } @catch (NSException *exception) {
    //
    //        } @finally {
    //
    //        }
    //
    //    }
    
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            
            paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
        }
    }
    else {
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                
                //added by Srinivasulu on if condition on 27/11/2017....
                if(!(textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x))
                    paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                if (textField == fiveQty || textField == twoQty || textField == oneQty) {
                    denomination.frame = CGRectMake(denomination.frame.origin.x, denomination.frame.origin.y, denomination.frame.size.width, denomination.frame.size.height);
                }
                else if (textField == fiveReturnQty || textField == twoReturnQty || textField == oneReturnQty) {
                    returnDenomination.frame = CGRectMake(returnDenomination.frame.origin.x, returnDenomination.frame.origin.y, returnDenomination.frame.size.width, returnDenomination.frame.size.height);
                }
                
            }
            
        }
        else {
            paymentView.frame = CGRectMake(20, 140, 730, 820.0);
        }
    }
    
    
    
    if((textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x)){
        if (isReturnDenom)
            [self updateReturnAmount];
        else
            [self updatePaidAmount];
    }
    
    return YES;
}


#pragma  -mark methods used for Denomination....
#pragma - mark dynamic denominations

-(void)populateDenominations {
    @try {
        
        denominationDic = [[NSMutableDictionary alloc] init];
        denomValTxtArr = [NSMutableArray new];
        denomCountArr = [NSMutableArray new];
        denomCountCoinsArr = [NSMutableArray new];
        denomValCoinsTxtArr = [NSMutableArray new];
        
        denominationDic = [[NSMutableDictionary alloc] init];
        returnDenominationDic = [[NSMutableDictionary alloc] init];
        denominationCoinDic = [NSMutableDictionary new];
        returnDenominationCoinDic = [NSMutableDictionary new];
        
        offline = [[OfflineBillingServices alloc] init];
        NSArray * denominations = [offline getDenominationDetails:currencyCodeStr];
        
        //added by Srinivasulu on 05/05/2017....
        
        @try {
            
            if(!denominations.count && ([currencyCodeStr caseInsensitiveCompare:INR] == NSOrderedSame)){
                [HUD setHidden:NO];
                HUD.labelText = @"Getting denominations...";
                
                
                if([offline getDenominationsDetails:-1 totalRecords:DOWNLOAD_RATE]){
                    
                    denominations = [offline getDenominationDetails:currencyCodeStr];
                }
                
                [HUD setHidden:YES];
            }
            
        } @catch (NSException *exception) {
            
            [HUD setHidden:YES];
        }
        
        //upto here on 05/05/2017....
        
        if(denominationsTypeArr == nil){
            
            
            //denominstaionsTypeTbl table creation....
            denominstaionsTypeTbl = [[UITableView alloc] init];
            denominstaionsTypeTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            denominstaionsTypeTbl.dataSource = self;
            denominstaionsTypeTbl.delegate = self;
            (denominstaionsTypeTbl.layer).borderWidth = 1.0f;
            denominstaionsTypeTbl.layer.cornerRadius = 3;
            denominstaionsTypeTbl.layer.borderColor = [UIColor grayColor].CGColor;
            
            
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            
            if ( ! ([[defaults valueForKey:DENOMNINATION_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:DENOMNINATION_OPTIONS] == nil)) {
                
                denominationsTypeArr = [[defaults valueForKey:DENOMNINATION_OPTIONS] mutableCopy];
                
                
                for(NSDictionary * payDic in [defaults valueForKey:DENOMNINATION_OPTIONS]){
                    
                    if([[payDic valueForKey:TENDER_NAME] caseInsensitiveCompare:currencyCodeStr] == NSOrderedSame){
                        
                        if(billPaymentTendeInfoDic.allKeys.count)
                            [billPaymentTendeInfoDic removeAllObjects];
                        
                        billPaymentTendeInfoDic = [payDic mutableCopy];
                        break;
                    }
                }
                
                if( (billPaymentTendeInfoDic == nil ) && [[defaults valueForKey:DENOMNINATION_OPTIONS] count] &&  !billPaymentTendeInfoDic.allKeys.count)
                    billPaymentTendeInfoDic = [[defaults valueForKey:DENOMNINATION_OPTIONS][0] mutableCopy];
                
            }
            
            
            
            
            
        }
        
        
        //        if ([denominations count]) {
        
        
        // close button to close the view ..
        backbutton = [[UIButton alloc] init] ;
        [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        backbutton.tag = 75;
        
        label = [[UILabel alloc] init] ;
        label.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        label.alpha = 1.0f;
        label.textAlignment = NSTextAlignmentLeft;
        label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label.textColor = [UIColor whiteColor];
        
        
        UIImage * image;
        UILabel * totalAmt;
        UILabel * paid;
        UILabel * changeReturn;
        
        UILabel * currencyCodeLbl;
        
        UIButton * continueBtn;
        UIButton * closeBtn;
        
        UIButton * showListOfAvaiDemBtn;
        UIImage * buttonImage_ = [UIImage imageNamed:@"arrow_1.png"];
        
        showListOfAvaiDemBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfAvaiDemBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
        [showListOfAvaiDemBtn addTarget:self
                                 action:@selector(showListOfAvailiableDenominations:) forControlEvents:UIControlEventTouchDown];
        
        
        currencyCodeLbl = [[UILabel alloc]init];
        currencyCodeLbl.textColor = [UIColor whiteColor];
        
        denominationTypeTxt = [[UITextField alloc] init];
        denominationTypeTxt.borderStyle = UITextBorderStyleBezel;
        denominationTypeTxt.textColor = [UIColor blackColor];
        denominationTypeTxt.backgroundColor = [UIColor whiteColor];
        denominationTypeTxt.delegate = self;
        
        conversionRatioTxt = [[UITextField alloc] init];
        conversionRatioTxt.borderStyle = UITextBorderStyleBezel;
        conversionRatioTxt.textColor = [UIColor blackColor];
        conversionRatioTxt.backgroundColor = [UIColor whiteColor];
        conversionRatioTxt.keyboardType = UIKeyboardTypeNumberPad;
        conversionRatioTxt.delegate = self;
        conversionRatioTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        qtyFeild.clearButtonMode = UITextFieldViewModeWhileEditing;
        //        qtyFeild.returnKeyType = UIReturnKeyDone;
        
        
        totalDenominationsCountTxt = [[UITextField alloc] init];
        totalDenominationsCountTxt.borderStyle = UITextBorderStyleBezel;
        totalDenominationsCountTxt.textColor = [UIColor blackColor];
        totalDenominationsCountTxt.backgroundColor = [UIColor whiteColor];
        totalDenominationsCountTxt.delegate = self;
        totalDenominationsCountTxt.userInteractionEnabled = NO;
        totalDenominationsCountTxt.keyboardType = UIKeyboardTypeNumberPad;
        [totalDenominationsCountTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        [conversionRatioTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        
        if(denominations.count <= 1)
            totalDenominationsCountTxt.userInteractionEnabled = YES;
        
        showListOfAvaiDemBtn.tag = 2;
        conversionRatioTxt.tag = 2;
        totalDenominationsCountTxt.tag = 2;
        
        denominationTypeTxt.text = currencyCodeStr;
        
        
        
        image = [UIImage imageNamed:@"delete.png"];
        [backbutton setBackgroundImage:image forState:UIControlStateNormal];
        
        totalAmt = [[UILabel alloc]init];
        totalAmt.textColor = [UIColor whiteColor];
        
        totalAmtVal = [[UILabel alloc]init];
        totalAmtVal.textColor = [UIColor whiteColor];
        
        paid = [[UILabel alloc]init];
        paid.textColor = [UIColor whiteColor];
        
        paidVal = [[UILabel alloc]init];
        paidVal.textColor = [UIColor whiteColor];
        
        changeReturn = [[UILabel alloc]init];
        changeReturn.textColor = [UIColor whiteColor];
        
        changeReturnVal = [[UILabel alloc]init];
        changeReturnVal.textColor = [UIColor whiteColor];
        
        continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [continueBtn addTarget:self action:@selector(checkStatus) forControlEvents:UIControlEventTouchUpInside];
        continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        continueBtn.titleLabel.textColor = [UIColor whiteColor];
        continueBtn.backgroundColor = [UIColor grayColor];
        
        closeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [closeBtn addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        closeBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        closeBtn.titleLabel.textColor = [UIColor whiteColor];
        closeBtn.backgroundColor = [UIColor grayColor];
        closeBtn.tag = 75;
        
        denominationView   = [[UIView alloc] init];
        (denominationView.layer).borderWidth = 1.0f;
        (denominationView.layer).cornerRadius = 8.0f;
        denominationView.backgroundColor = [UIColor blackColor];
        denominationView.hidden = false;
        denominationView.tag = 33;
        
        UIScrollView  * denomSrollView;
        denomSrollView = [[UIScrollView alloc] init];
        denomSrollView.hidden = NO;
        denomSrollView.backgroundColor = [UIColor clearColor];
        denomSrollView.bounces = FALSE;
        denomSrollView.scrollEnabled = YES;
        
        NSArray * paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString * documentsDirectory = [paths[0] stringByAppendingString:@"/DenominationImagesFolder"];
        
        int index = 1;
        
        float yPosition = 0;
        float xPosition = 10;
        
        float textYposition = 20;
        
        NSMutableArray * notesArr = [NSMutableArray new];
        NSMutableArray * coinsArr = [NSMutableArray new];
        
        for (NSDictionary *infoDic in denominations) {
            
            if (![[infoDic valueForKey:kDenomType] boolValue]) {
                
                [coinsArr addObject:infoDic];
            }
            else {
                
                [notesArr addObject:infoDic];
            }
        }
        
        
        NSSortDescriptor *sortDescriptor;
        
        //changed by Srinivaslulu on 16/08/2017....
        
        //            sortDescriptor = [[NSSortDescriptor alloc] initWithKey:kDenomValue
        //                                                         ascending:YES];
        
        sortDescriptor = [[NSSortDescriptor alloc] initWithKey:kDenomValue
                                                     ascending:NO];
        
        
        //upto here on 16/08/2017....
        
        NSArray * sortDescriptors = @[sortDescriptor];
        notesArr = [[notesArr sortedArrayUsingDescriptors:sortDescriptors] mutableCopy];
        coinsArr = [[coinsArr sortedArrayUsingDescriptors:sortDescriptors] mutableCopy];
        
        
        
        @try{
            
            label.text = NSLocalizedString(@"_cash_denomination", nil);
            
            totalAmt.text = NSLocalizedString(@"total_bill", nil);
            totalAmtVal.text = billDueValue.text;
            
            paid.text = NSLocalizedString(@"paid_amount", nil);
            paidVal.text = NSLocalizedString(@"0_00", nil);
            
            changeReturn.text = NSLocalizedString(@"change_return", nil);
            changeReturnVal.text = NSLocalizedString(@"0_00", nil);
            
            currencyCodeLbl.text = NSLocalizedString(@"_currency", nil);
            
            [continueBtn setTitle:NSLocalizedString(@"continue", nil)    forState:UIControlStateNormal];
            [closeBtn setTitle:NSLocalizedString(@"back", nil)    forState:UIControlStateNormal];
        }
        @catch(NSException * exception){
            
        }
        
        
        //commented by Srinivasulu on 15/11/2017....
        
        //            denominationView.frame = CGRectMake( 100, 80, 800, 670);
        //            label.frame = CGRectMake( 0, 0, denominationView.frame.size.width, 60);
        //            label.font = [UIFont systemFontOfSize:25];
        //            backbutton.frame = CGRectMake( 740, 10.0, 45.0, 45.0);
        //
        //
        denomSrollView.frame = CGRectMake( 0, 80, 800, 250);
        //            denomSrollView.contentSize = CGSizeMake( 778, 500);
        
        //upto here on 15/11/2017....
        
        
        for (NSDictionary *dic in notesArr) {
            
            
            NSString *savedImagePath = [documentsDirectory stringByAppendingPathComponent:[dic valueForKey:kDenomImage]];
            
            UIImageView *denomImg = [[UIImageView alloc] init];
            denomImg.backgroundColor = [UIColor clearColor];
            denomImg.image = [UIImage imageWithContentsOfFile:savedImagePath];
            
            UIButton *addDenom = [[UIButton alloc] init];
            addDenom.backgroundColor = [UIColor clearColor];
            addDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [addDenom addTarget:self action:@selector(addDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UIButton *removeDenom = [[UIButton alloc] init];
            removeDenom.backgroundColor = [UIColor clearColor];
            removeDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [removeDenom addTarget:self action:@selector(removeDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UILabel *addDenomLbl = [[UILabel alloc] init];
            addDenomLbl.text = @"+";
            addDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel *removeDenomLbl = [[UILabel alloc] init];
            removeDenomLbl.text = @"-";
            removeDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel  *denomValueMultiply = [[UILabel alloc]init];
            denomValueMultiply.textColor = [UIColor whiteColor];
            denomValueMultiply.text = [NSString stringWithFormat:@"%@%@",[[dic valueForKey:kDenomValue] stringValue],@"  X"];
            denomValueMultiply.textAlignment = NSTextAlignmentRight;
            
            UILabel  *denomValue = [[UILabel alloc]init];
            denomValue.textColor = [UIColor whiteColor];
            denomValue.text = @"0.00";
            denomValue.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            denomValueTxt = [[CustomTextField alloc]init];
            denomValueTxt.borderStyle = UITextBorderStyleRoundedRect;
            denomValueTxt.textColor = [UIColor blackColor];
            denomValueTxt.font = [UIFont systemFontOfSize:18.0];
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.keyboardType = UIKeyboardTypeNumberPad;
            denomValueTxt.autocorrectionType = UITextAutocorrectionTypeNo;
            denomValueTxt.layer.borderColor = [UIColor whiteColor].CGColor;
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.delegate = self;
            denomValueTxt.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                //                    denominationView.frame = CGRectMake(100, 0, 800, 670);
                //                    label.frame = CGRectMake(0, 0, denominationView.frame.size.width, 70);
                //                    label.font = [UIFont systemFontOfSize:25];
                //                    backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                //
                //                    denomSrollView.frame = CGRectMake(0, 80, 778, 150);
                //                    denomSrollView.contentSize = CGSizeMake(778, 800);
                
                removeDenomLbl.frame = CGRectMake(xPosition , yPosition, 60, 40);
                removeDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                
                denomImg.frame = CGRectMake( xPosition, yPosition + removeDenomLbl.frame.size.height, 156, 60);
                
                addDenomLbl.frame = CGRectMake( xPosition + denomImg.frame.size.width - 30, yPosition, 60, 40);
                addDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                removeDenom.frame = CGRectMake( denomImg.frame.origin.x, denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                addDenom.frame = CGRectMake( denomImg.frame.origin.x + (denomImg.frame.size.width/2), denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                
                denomValueMultiply.frame = CGRectMake( 450, textYposition, 120, 25);
                denomValueMultiply.font = [UIFont boldSystemFontOfSize:20];
                
                denomValueTxt.frame = CGRectMake( denomValueMultiply.frame.origin.x + denomValueMultiply.frame.size.width + 20,textYposition, 80, 25);
                denomValueTxt.font = [UIFont boldSystemFontOfSize:20];
                
                
                
                //changed by Srinivasulu on 29/08/2017....
                
                //                    denomValue.frame = CGRectMake(denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 20,textYposition, 200, 25);
                denomValue.frame = CGRectMake( denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 10,textYposition, denomSrollView.frame.size.width - (denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 20), 25);
                
                
                //upto here on 29/08/2017....
                
                denomValue.font = [UIFont systemFontOfSize:20.0];
                
            }
            
            xPosition = xPosition + denomImg.frame.size.width + 20;
            
            textYposition = textYposition + 40;
            
            if (index != 0 && (index%2) == 0) {
                
                yPosition = yPosition + denomImg.frame.size.height+addDenomLbl.frame.size.height;
                
                xPosition = 10;
            }
            [denomSrollView addSubview:addDenomLbl];
            [denomSrollView addSubview:removeDenomLbl];
            [denomSrollView addSubview:denomImg];
            [denomSrollView addSubview:addDenom];
            [denomSrollView addSubview:removeDenom];
            [denomSrollView addSubview:denomValueMultiply];
            [denomSrollView addSubview:denomValue];
            [denomSrollView addSubview:denomValueTxt];
            
            index++;
            
            [denomValTxtArr addObject:denomValueTxt];
            [denomCountArr addObject:denomValue];
        }
        
        //--
        index = 1;
        
        if(notesArr.count%2 != 0)
            index = 3;
        
        
        //added by srinivasulu on 27/03/2018....
        //because need to be displaced side
        
        yPosition = 0;
        xPosition = 380;
        
        //upto here on 27/03/2018....
        
        for (NSDictionary *dic in coinsArr) {
            
            NSString *savedImagePath = [documentsDirectory stringByAppendingPathComponent:[dic valueForKey:kDenomImage]];
            
            UIImageView *denomImg = [[UIImageView alloc] init];
            denomImg.backgroundColor = [UIColor clearColor];
            denomImg.image = [UIImage imageWithContentsOfFile:savedImagePath];
            
            UIButton *addDenom = [[UIButton alloc] init];
            addDenom.backgroundColor = [UIColor clearColor];
            addDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [addDenom addTarget:self action:@selector(addCoinsDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UIButton *removeDenom = [[UIButton alloc] init];
            removeDenom.backgroundColor = [UIColor clearColor];
            removeDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [removeDenom addTarget:self action:@selector(removeCoinDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            
            UILabel *addDenomLbl = [[UILabel alloc] init];
            addDenomLbl.text = @"+";
            addDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel *removeDenomLbl = [[UILabel alloc] init];
            removeDenomLbl.text = @"-";
            removeDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel  *denomValueMultiply = [[UILabel alloc]init];
            denomValueMultiply.textColor = [UIColor whiteColor];
            denomValueMultiply.text = [NSString stringWithFormat:@"%@%@",[[dic valueForKey:kDenomValue] stringValue],@"  X"];
            denomValueMultiply.textAlignment = NSTextAlignmentRight;
            
            UILabel  *denomValue = [[UILabel alloc]init];
            denomValue.textColor = [UIColor whiteColor];
            denomValue.text = @"0.00";
            denomValue.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            denomValueTxt = [[CustomTextField alloc]init];
            denomValueTxt.borderStyle = UITextBorderStyleRoundedRect;
            denomValueTxt.textColor = [UIColor blackColor];
            denomValueTxt.font = [UIFont systemFontOfSize:18.0];
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.keyboardType = UIKeyboardTypeNumberPad;
            denomValueTxt.autocorrectionType = UITextAutocorrectionTypeNo;
            denomValueTxt.layer.borderColor = [UIColor whiteColor].CGColor;
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.delegate = self;
            denomValueTxt.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            //commented by Srinivasulu on 18/04/2017....
            
            //                [denomValueTxt addTarget:self action:@selector(coinsTextFieldChanged:) forControlEvents:UIControlEventEditingChanged];
            
            
            //upto here on 18/04/2017....
            
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                removeDenomLbl.frame = CGRectMake(xPosition , yPosition, 60, 40);
                removeDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                
                denomImg.frame = CGRectMake(xPosition, yPosition + removeDenomLbl.frame.size.height, 95, 85);
                
                addDenomLbl.frame = CGRectMake(xPosition + denomImg.frame.size.width - 30, yPosition, 60, 40);
                addDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                removeDenom.frame = CGRectMake(denomImg.frame.origin.x, denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                addDenom.frame = CGRectMake(denomImg.frame.origin.x + (denomImg.frame.size.width/2), denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                
                denomValueMultiply.frame = CGRectMake(450, textYposition, 120, 25);
                denomValueMultiply.font = [UIFont boldSystemFontOfSize:20];
                
                denomValueTxt.frame = CGRectMake(denomValueMultiply.frame.origin.x + denomValueMultiply.frame.size.width + 20,textYposition, 80, 25);
                denomValueTxt.font = [UIFont boldSystemFontOfSize:20];
                
                
                //changed by Srinivasulu on 29/08/2017....
                
                //                    denomValue.frame = CGRectMake(denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 20,textYposition, 200, 25);
                denomValue.frame = CGRectMake( denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 10,textYposition, denomSrollView.frame.size.width - (denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 20), 25);
                
                //upto here on 29/08/2017....
                
                denomValue.font = [UIFont systemFontOfSize:20.0];
                
            }
            
            //commented and changes done by srinivasulu on 27/03/2018....
            //because need to be displaced side
            
            //            xPosition = xPosition + denomImg.frame.size.width + 20;
            textYposition = textYposition + 40;
            
            //            if (index != 0 && (index%3) == 0) {
            
            yPosition = yPosition + denomImg.frame.size.height+addDenomLbl.frame.size.height ;
            
            //                xPosition = 10;
            //            }
            
            //upto here by srinivasulu on 27/03/2018....
            
            
            [denomSrollView addSubview:addDenomLbl];
            [denomSrollView addSubview:removeDenomLbl];
            [denomSrollView addSubview:denomImg];
            [denomSrollView addSubview:addDenom];
            [denomSrollView addSubview:removeDenom];
            [denomSrollView addSubview:denomValueMultiply];
            [denomSrollView addSubview:denomValue];
            [denomSrollView addSubview:denomValueTxt];
            
            index++;
            
            [denomValCoinsTxtArr addObject:denomValueTxt];
            [denomCountCoinsArr addObject:denomValue];
            
        }
        
        
        UILabel * underLineLbl = [[UILabel alloc] init];
        underLineLbl.backgroundColor = [UIColor lightGrayColor];
        
        denominationView.layer.borderColor = [UIColor whiteColor].CGColor;
        denominationView.layer.borderWidth = 1.0f;
        
        [denominationView addSubview:label];
        [denominationView addSubview:backbutton];
        
        [denominationView addSubview:currencyCodeLbl];
        
        [denominationView addSubview:denominationTypeTxt];
        [denominationView addSubview:conversionRatioTxt];
        [denominationView addSubview:totalDenominationsCountTxt];
        [denominationView addSubview:showListOfAvaiDemBtn];
        
        
        [denominationView addSubview:denomSrollView];
        
        
        [denominationView addSubview:underLineLbl];
        
        
        [denominationView addSubview:totalAmt];
        [denominationView addSubview:totalAmtVal];
        [denominationView addSubview:paidVal];
        [denominationView addSubview:paid];
        [denominationView addSubview:changeReturnVal];
        [denominationView addSubview:changeReturn];
        [denominationView addSubview:continueBtn];
        [denominationView addSubview:closeBtn];
        [self.view addSubview:denominationView];
        
        
        
        
        if([currencyCodeStr caseInsensitiveCompare:INR] == NSOrderedSame){
            
            conversionRatioTxt.hidden = YES;
            totalDenominationsCountTxt.hidden = YES;
        }
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            
            //changed by Srinivasulu on 15/11/2017....
            label.frame = CGRectMake( 0, 0, 800, 52);
            backbutton.frame = CGRectMake( label.frame.origin.x + label.frame.size.width - 50, 5.0, 40.0, 40.0);
            
            
            currencyCodeLbl.frame = CGRectMake(  10, label.frame.origin.y + label.frame.size.height + 5, (label.frame.size.width - 100)/4 , 40.0);
            denominationTypeTxt.frame = CGRectMake( currencyCodeLbl.frame.origin.x + currencyCodeLbl.frame.size.width + 5, currencyCodeLbl.frame.origin.y, (label.frame.size.width)/4, currencyCodeLbl.frame.size.height);
            conversionRatioTxt.frame = CGRectMake( denominationTypeTxt.frame.origin.x + denominationTypeTxt.frame.size.width + 15, currencyCodeLbl.frame.origin.y, denominationTypeTxt.frame.size.width, currencyCodeLbl.frame.size.height);
            totalDenominationsCountTxt.frame = CGRectMake( conversionRatioTxt.frame.origin.x + conversionRatioTxt.frame.size.width + 15, currencyCodeLbl.frame.origin.y, denominationTypeTxt.frame.size.width/1.4, currencyCodeLbl.frame.size.height);
            
            showListOfAvaiDemBtn.frame = CGRectMake( (denominationTypeTxt.frame.origin.x + denominationTypeTxt.frame.size.width - 50), denominationTypeTxt.frame.origin.y - 10,  60, 60);
            
            //changed by Srinivasulu on 15/11/2017....
            //        conversionRatioTxt.text = @"0.00";
            //        totalDenominationsCountTxt.text = @"0";
            
            conversionRatioTxt.placeholder = NSLocalizedString(@"conversion_ration", nil);
            totalDenominationsCountTxt.placeholder = NSLocalizedString(@"count", nil);
            
            
            CGRect contentRect = CGRectZero;
            for (UIView *view in denomSrollView.subviews) {
                
                contentRect = CGRectUnion(contentRect, view.frame);
            }
            //                yPosition   denomSrollView.frame
            
            float height = 425;
            
            if(denomSrollView.frame.size.height > yPosition)
                height = denomSrollView.frame.size.height;
            
            denomSrollView.frame = CGRectMake( 0, denominationTypeTxt.frame.origin.y + denominationTypeTxt.frame.size.height,  label.frame.size.width, height);
            
            
            denomSrollView.contentSize = contentRect.size;
            
            underLineLbl.frame = CGRectMake( 450, denomSrollView.frame.origin.y + denomSrollView.frame.size.height, 320, 2);
            
            totalAmt.frame = CGRectMake( 450, underLineLbl.frame.origin.y + underLineLbl.frame.size.height + 4, 150, 30);
            totalAmtVal.frame = CGRectMake( 670, totalAmt.frame.origin.y, 150, 30);
            
            
            paid.frame = CGRectMake( 450, totalAmt.frame.origin.y + totalAmt.frame.size.height + 4, 150, 30);
            paidVal.frame = CGRectMake( 670, paid.frame.origin.y, 150, 30);
            
            changeReturn.frame = CGRectMake( 450, paid.frame.origin.y + paid.frame.size.height + 4, 150, 30);
            changeReturnVal.frame = CGRectMake( 670, changeReturn.frame.origin.y, 150, 30);
            
            continueBtn.frame = CGRectMake( 100.0, changeReturnVal.frame.origin.y + changeReturnVal.frame.size.height + 10, 250.0, 40);
            closeBtn.frame = CGRectMake( 450.0, continueBtn.frame.origin.y, 250.0, 40);
            
            
            float  originY = 20;
            
            //            if(originY  > ((self.view.frame.size.width - label.frame.size.width) / 2))
            //                originY = (self.view.frame.size.width - label.frame.size.width) / 2;
            
            denominationView.frame = CGRectMake( (self.view.frame.size.width - label.frame.size.width)/2, originY, label.frame.size.width, continueBtn.frame.origin.y + continueBtn.frame.size.height + 4);
            
            
            
            
            label.font = [UIFont fontWithName:TEXT_FONT_NAME size:25];
            currencyCodeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:25];
            
            
            denominationTypeTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            conversionRatioTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            totalDenominationsCountTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            
            
            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
            totalAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
            paid.font = [UIFont boldSystemFontOfSize:20.0];
            paidVal.font = [UIFont boldSystemFontOfSize:20.0];
            changeReturn.font = [UIFont boldSystemFontOfSize:20.0];
            changeReturnVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            continueBtn.layer.cornerRadius = 10.0f;
            closeBtn.layer.cornerRadius = 10.0;
            
            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        }
        else{
            
        }
        
        //upto here on 15/11/2017....
        
        
        //        }
        //        else {
        //            [self setSiblings:paymentView enabled:true];
        //
        //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Denominations are not available" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        //            [alert show];
        //
        //        }
        
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
}

/**
 * @description  here we are showing list of denominations....
 * @date         16/11/2017
 * @method       showListOfAvailiableDenominations:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By
 * @reason
 *
 */

-(void)showListOfAvailiableDenominations:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        float tableHeight = denominationsTypeArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = denominationsTypeArr.count * 33;
        
        if(denominationsTypeArr.count > 5)
            tableHeight = (tableHeight/denominationsTypeArr.count) * 5;
        
        denominstaionsTypeTbl.tag = sender.tag;
        
        if(sender.tag == 2)
            [self showPopUpForTables:denominstaionsTypeTbl  popUpWidth:denominationTypeTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:denominationTypeTxt  showViewIn:denominationView permittedArrowDirections:UIPopoverArrowDirectionUp];
        else
            [self showPopUpForTables:denominstaionsTypeTbl  popUpWidth:denominationTypeTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:denominationTypeTxt  showViewIn:returnDenominationView permittedArrowDirections:UIPopoverArrowDirectionUp];
        
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    } @finally {
        
    }
}

/**
 * @description  here we are adding the denomination amount....
 * @date
 * @method       addDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)addDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            
            if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                
                NSString *str = [denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                
                oneCount = str.integerValue;
            }
            else {
                oneCount = 0;
            }
            oneCount++;
            oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
            if (oneCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                
                for (UITextField *text in denomValTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                        
                        
                    }
                }
                
                for (UILabel *text in denomCountArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            
            
            [self updatePaidAmount];
            
        }
        else {
            
            //changed by Srinivasulu on 27/11/2017....
            
            //            [self addLabel];
            //added by Srinivasulu on 27/11/2017....
            
            float y_axis = self.view.frame.size.height - 350;
            
            //                if(requestRefNoTxt.isEditing)
            //                    y_axis = requestRefNoTxt.frame.origin.y + requestRefNoTxt.frame.size.height;
            
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
            
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            //upto here on 27/11/2017....
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  here we are adding the denomination coins amount....
 * @date
 * @method       addCoinsDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)addCoinsDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            
            if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                
                NSString *str = [denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                
                oneCount = str.integerValue;
            }
            else {
                oneCount = 0;
            }
            oneCount++;
            oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
            if (oneCount > 0) {
                [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                
                for (UITextField *text in denomValCoinsTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in denomCountCoinsArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            
            [self updatePaidAmount];
        }
        else {
            
            //changed by Srinivasulu on 27/11/2017....
            
            //            [self addLabel];
            //added by Srinivasulu on 27/11/2017....
            
            float y_axis = self.view.frame.size.height - 350;
            
            //                if(requestRefNoTxt.isEditing)
            //                    y_axis = requestRefNoTxt.frame.origin.y + requestRefNoTxt.frame.size.height;
            
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
            
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            //upto here on 27/11/2017....
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  here we are removing the denomination note amount from the paid amount....
 * @date
 * @method       removeDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)removeDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
            
            NSString *str = [denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            
            oneCount = str.integerValue;
        }
        else {
            oneCount = 0;
        }
        if (oneCount != 0) {
            oneCount--;
        }
        if (oneCount>=0) {
            if ([denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                for (UITextField *text in denomValTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in denomCountArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            if (oneCount == 0) {
                [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
        }
        [self updatePaidAmount];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are removing the denomination coin amount from the paid amount....
 * @date
 * @method       removeCoinDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)removeCoinDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
            
            NSString *str = [denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            
            oneCount = str.integerValue;
        }
        else {
            oneCount = 0;
        }
        if (oneCount != 0) {
            oneCount--;
        }
        if (oneCount>=0) {
            if ([denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                for (UITextField *text in denomValCoinsTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in denomCountCoinsArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            if (oneCount == 0) {
                [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
            else {
                [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
        }
        [self updatePaidAmount];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are reading the denomination from DB and displaying them....
 * @date
 * @method       populateReturnDenominationViewDynamically:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       now new implementation allowing the user to select the denomination type....
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateReturnDenominationViewDynamically {
    @try {
        
        isReturnDenom = true;
        //changeReturnVal
        returnDenomValTxtArr = [NSMutableArray new];
        returnDenomCountArr = [NSMutableArray new];
        returnDenomValCoinsTxtArr = [NSMutableArray new];
        returnDenomCountCoinsArr = [NSMutableArray new];
        
        returnDenominationDic = [NSMutableDictionary new];
        returnDenominationCoinDic = [NSMutableDictionary new];
        
        
        if(denominationsTypeArr == nil){
            
            
            //denominstaionsTypeTbl table creation....
            denominstaionsTypeTbl = [[UITableView alloc] init];
            denominstaionsTypeTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            denominstaionsTypeTbl.dataSource = self;
            denominstaionsTypeTbl.delegate = self;
            (denominstaionsTypeTbl.layer).borderWidth = 1.0f;
            denominstaionsTypeTbl.layer.cornerRadius = 3;
            denominstaionsTypeTbl.layer.borderColor = [UIColor grayColor].CGColor;
            
            
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            
            if ( ! ([[defaults valueForKey:DENOMNINATION_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:DENOMNINATION_OPTIONS] == nil)) {
                
                denominationsTypeArr = [[defaults valueForKey:DENOMNINATION_OPTIONS] mutableCopy];
            }
            
        }
        
        offline = [[OfflineBillingServices alloc] init];
        
        
        NSArray * denominations = [offline getDenominationDetails:currencyCodeStr];
        
        
        //        if ([denominations count]) {
        
        tensReturnCount = 0;
        twentyReturnCount = 0;
        fiftyReturnCount = 0;
        hundredReturnCount = 0;
        fiveHundredReturnCount = 0;
        thousandReturnCount = 0;
        oneReturnCount = 0;
        twoReturnCount = 0;
        fiveReturnCount = 0;
        
        
        UIImage * image;
        
        UILabel * currencyCodeLbl;
        
        UILabel * totalAmt;
        UILabel * paid;
        
        UIButton   * continueBtn;
        UIButton   * closeBtn;
        
        UIButton * showListOfAvaiDemBtn;
        UIImage * buttonImage_ = [UIImage imageNamed:@"arrow_1.png"];
        
        showListOfAvaiDemBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfAvaiDemBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
        [showListOfAvaiDemBtn addTarget:self
                                 action:@selector(showListOfAvailiableDenominations:) forControlEvents:UIControlEventTouchDown];
        
        
        // close button to close the view ..
        backbutton = [[UIButton alloc] init] ;
        [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        backbutton.tag = 78;
        
        label = [[UILabel alloc] init] ;
        label.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        label.alpha = 1.0f;
        label.textAlignment = NSTextAlignmentLeft;
        label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label.textColor = [UIColor whiteColor];
        
        
        image = [UIImage imageNamed:@"delete.png"];
        [backbutton setBackgroundImage:image forState:UIControlStateNormal];
        
        
        
        totalAmt = [[UILabel alloc]init];
        totalAmt.textColor = [UIColor whiteColor];
        
        returnAmtVal = [[UILabel alloc]init];
        returnAmtVal.textColor = [UIColor whiteColor];
        
        paid = [[UILabel alloc]init];
        paid.textColor = [UIColor whiteColor];
        
        returnedval = [[UILabel alloc]init];
        returnedval.textColor = [UIColor whiteColor];
        
        
        continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        
        
        if (billingScrollView.hidden) {
            
            continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            [continueBtn addTarget:self action:@selector(calreturnsItems) forControlEvents:UIControlEventTouchUpInside];
            continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            continueBtn.titleLabel.textColor = [UIColor whiteColor];
            continueBtn.backgroundColor = [UIColor grayColor];
        }
        else{
            
            // pay the cash button to continue the transaction ..
            [continueBtn addTarget:self action:@selector(checkReturnDenomStatus) forControlEvents:UIControlEventTouchUpInside];
            continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            continueBtn.titleLabel.textColor = [UIColor whiteColor];
            continueBtn.backgroundColor = [UIColor grayColor];
        }
        
        closeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [closeBtn addTarget:self action:@selector(backToReturnDenomination) forControlEvents:UIControlEventTouchUpInside];
        closeBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        closeBtn.titleLabel.textColor = [UIColor whiteColor];
        closeBtn.backgroundColor = [UIColor grayColor];
        
        
        returnDenominationView    = [[UIView alloc] init];
        (returnDenominationView.layer).borderWidth = 1.0f;
        (returnDenominationView.layer).cornerRadius = 8.0f;
        returnDenominationView.backgroundColor = [UIColor blackColor];
        returnDenominationView.hidden = false;
        returnDenominationView.tag = 33;
        
        
        currencyCodeLbl = [[UILabel alloc]init];
        currencyCodeLbl.textColor = [UIColor whiteColor];
        
        denominationTypeTxt = [[UITextField alloc] init];
        denominationTypeTxt.borderStyle = UITextBorderStyleBezel;
        denominationTypeTxt.textColor = [UIColor blackColor];
        denominationTypeTxt.backgroundColor = [UIColor whiteColor];
        
        conversionRatioTxt = [[UITextField alloc] init];
        conversionRatioTxt.borderStyle = UITextBorderStyleBezel;
        conversionRatioTxt.textColor = [UIColor blackColor];
        conversionRatioTxt.backgroundColor = [UIColor whiteColor];
        conversionRatioTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        
        totalDenominationsCountTxt = [[UITextField alloc] init];
        totalDenominationsCountTxt.borderStyle = UITextBorderStyleBezel;
        totalDenominationsCountTxt.textColor = [UIColor blackColor];
        totalDenominationsCountTxt.backgroundColor = [UIColor whiteColor];
        totalDenominationsCountTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        conversionRatioTxt.delegate = self;
        
        totalDenominationsCountTxt.delegate = self;
        totalDenominationsCountTxt.userInteractionEnabled = NO;
        [totalDenominationsCountTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        [conversionRatioTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        
        denominationTypeTxt.text = currencyCodeStr;
        
        if(denominations.count <= 1)
            totalDenominationsCountTxt.userInteractionEnabled = YES;
        
        showListOfAvaiDemBtn.tag = 4;
        conversionRatioTxt.tag = 4;
        totalDenominationsCountTxt.tag = 4;
        
        
        UIScrollView  *denomSrollView = [[UIScrollView alloc] init];
        denomSrollView.hidden = NO;
        denomSrollView.backgroundColor = [UIColor clearColor];
        denomSrollView.bounces = FALSE;
        denomSrollView.scrollEnabled = YES;
        
        
        @try{
            
            label.text = NSLocalizedString(@"_cash_denomination", nil);
            totalAmt.text = NSLocalizedString(@"change_to_be_returned", nil);
            paid.text = NSLocalizedString(@"returned_amount", nil);
            
            returnAmtVal.text = changeReturnVal.text;
            
            if (billingScrollView.hidden) {
                returnAmtVal.text = returningTotalBillValue.text;
            }
            
            returnedval.text = NSLocalizedString(@"0_00", nil);
            currencyCodeLbl.text = NSLocalizedString(@"_currency", nil);
            
            [continueBtn setTitle:NSLocalizedString(@"continue", nil)    forState:UIControlStateNormal];
            [closeBtn setTitle:NSLocalizedString(@"back", nil)    forState:UIControlStateNormal];
        }
        @catch(NSException * exception){
            
        }
        
        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString *documentsDirectory = [paths[0] stringByAppendingString:@"/DenominationImagesFolder"];
        
        int index=1;
        
        float yPosition = 0;
        float xPosition = 10;
        
        float textYposition = 20;
        
        NSMutableArray *notesArr = [NSMutableArray new];
        NSMutableArray *coinsArr = [NSMutableArray new];
        
        for (NSDictionary *infoDic in denominations) {
            
            if (![[infoDic valueForKey:kDenomType] boolValue]) {
                
                [coinsArr addObject:infoDic];
            }
            else {
                [notesArr addObject:infoDic];
            }
        }
        
        NSSortDescriptor *sortDescriptor;
        
        //changed by Srinivasulu on 29/08/2017....
        
        //            sortDescriptor = [[NSSortDescriptor alloc] initWithKey:kDenomValue
        //                                                         ascending:YES];
        sortDescriptor = [[NSSortDescriptor alloc] initWithKey:kDenomValue
                                                     ascending:NO];
        //upto here on 29/08/2017....
        
        NSArray *sortDescriptors = @[sortDescriptor];
        notesArr = [[notesArr sortedArrayUsingDescriptors:sortDescriptors] mutableCopy];
        coinsArr = [[coinsArr sortedArrayUsingDescriptors:sortDescriptors] mutableCopy];
        
        //            returnDenominationView.frame = CGRectMake(100, 80, 800, 670);
        //            label.frame = CGRectMake(0, 0, returnDenominationView.frame.size.width, 70);
        //            label.font = [UIFont systemFontOfSize:25];
        //            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
        
        
        denomSrollView.frame = CGRectMake(0, 80, 800, 250);
        //            denomSrollView.contentSize = CGSizeMake(778, 500);
        
        for (NSDictionary *dic in notesArr) {
            
            NSString *savedImagePath = [documentsDirectory stringByAppendingPathComponent:[dic valueForKey:kDenomImage]];
            
            UIImageView *denomImg = [[UIImageView alloc] init];
            denomImg.backgroundColor = [UIColor clearColor];
            denomImg.image = [UIImage imageWithContentsOfFile:savedImagePath];
            
            UIButton *addDenom = [[UIButton alloc] init];
            addDenom.backgroundColor = [UIColor clearColor];
            addDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [addDenom addTarget:self action:@selector(addReturnDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UIButton *removeDenom = [[UIButton alloc] init];
            removeDenom.backgroundColor = [UIColor clearColor];
            removeDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [removeDenom addTarget:self action:@selector(removeReturnDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UILabel *addDenomLbl = [[UILabel alloc] init];
            addDenomLbl.text = @"+";
            addDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel *removeDenomLbl = [[UILabel alloc] init];
            removeDenomLbl.text = @"-";
            removeDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel  *denomValueMultiply = [[UILabel alloc]init];
            denomValueMultiply.textColor = [UIColor whiteColor];
            denomValueMultiply.text = [NSString stringWithFormat:@"%@%@",[[dic valueForKey:kDenomValue] stringValue],@"  X"];
            denomValueMultiply.textAlignment = NSTextAlignmentRight;
            
            UILabel  *denomValue = [[UILabel alloc]init];
            denomValue.textColor = [UIColor whiteColor];
            denomValue.text = @"0.00";
            denomValue.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            returnDenomValueTxt = [[CustomTextField alloc]init];
            returnDenomValueTxt.borderStyle = UITextBorderStyleRoundedRect;
            returnDenomValueTxt.textColor = [UIColor blackColor];
            returnDenomValueTxt.font = [UIFont systemFontOfSize:18.0];
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.keyboardType = UIKeyboardTypeNumberPad;
            returnDenomValueTxt.autocorrectionType = UITextAutocorrectionTypeNo;
            returnDenomValueTxt.layer.borderColor = [UIColor whiteColor].CGColor;
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.delegate = self;
            returnDenomValueTxt.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                //                    returnDenominationView.frame = CGRectMake(100, 80, 800, 670);
                //                    label.frame = CGRectMake(0, 0, denominationView.frame.size.width, 70);
                //                    label.font = [UIFont systemFontOfSize:25];
                //                    backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                
                //                    denomSrollView.frame = CGRectMake(0, 290, 778, 150);
                //                    denomSrollView.contentSize = CGSizeMake(778, 500);
                
                removeDenomLbl.frame = CGRectMake(xPosition , yPosition, 60, 40);
                removeDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                
                denomImg.frame = CGRectMake(xPosition, yPosition + removeDenomLbl.frame.size.height, 156, 60);
                
                addDenomLbl.frame = CGRectMake(xPosition + denomImg.frame.size.width - 30, yPosition, 60, 40);
                addDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                removeDenom.frame = CGRectMake(denomImg.frame.origin.x, denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                addDenom.frame = CGRectMake(denomImg.frame.origin.x + (denomImg.frame.size.width/2), denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                
                denomValueMultiply.frame = CGRectMake(450, textYposition, 120, 25);
                denomValueMultiply.font = [UIFont boldSystemFontOfSize:20];
                
                returnDenomValueTxt.frame = CGRectMake(denomValueMultiply.frame.origin.x + denomValueMultiply.frame.size.width + 20,textYposition, 80, 25);
                returnDenomValueTxt.font = [UIFont boldSystemFontOfSize:20];
                
                
                
                //changed by Srinivasulu on 29/08/2017....
                
                //                    denomValue.frame = CGRectMake(returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 20,textYposition, 200, 25);
                denomValue.frame = CGRectMake( returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 10,textYposition, denomSrollView.frame.size.width - (returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 20), 25);
                
                
                //upto here on 29/08/2017....
                
                denomValue.font = [UIFont systemFontOfSize:20.0];
                
            }
            
            xPosition = xPosition + denomImg.frame.size.width + 20;
            
            textYposition = textYposition + 40;
            
            if (index != 0 && (index%2) == 0) {
                
                yPosition = yPosition + denomImg.frame.size.height+addDenomLbl.frame.size.height;
                
                xPosition = 10;
            }
            [denomSrollView addSubview:addDenomLbl];
            [denomSrollView addSubview:removeDenomLbl];
            [denomSrollView addSubview:denomImg];
            [denomSrollView addSubview:addDenom];
            [denomSrollView addSubview:removeDenom];
            [denomSrollView addSubview:denomValueMultiply];
            [denomSrollView addSubview:denomValue];
            [denomSrollView addSubview:returnDenomValueTxt];
            
            index++;
            
            [returnDenomValTxtArr addObject:returnDenomValueTxt];
            [returnDenomCountArr addObject:denomValue];
            
        }
        
        index = 0;
        
        
        if(notesArr.count%2 != 0)
            index = 3;
        
        //added by srinivasulu on 27/03/2018....
        //because need to be displaced side
        
        yPosition = 0;
        xPosition = 380;
        
        //upto here on 27/03/2018....
        
        for (NSDictionary *dic in coinsArr) {
            
            NSString *savedImagePath = [documentsDirectory stringByAppendingPathComponent:[dic valueForKey:kDenomImage]];
            
            UIImageView *denomImg = [[UIImageView alloc] init];
            denomImg.backgroundColor = [UIColor clearColor];
            denomImg.image = [UIImage imageWithContentsOfFile:savedImagePath];
            
            UIButton *addDenom = [[UIButton alloc] init];
            addDenom.backgroundColor = [UIColor clearColor];
            addDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [addDenom addTarget:self action:@selector(addReturnCoinsDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UIButton *removeDenom = [[UIButton alloc] init];
            removeDenom.backgroundColor = [UIColor clearColor];
            removeDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [removeDenom addTarget:self action:@selector(removeReturnCoinsDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            
            UILabel *addDenomLbl = [[UILabel alloc] init];
            addDenomLbl.text = @"+";
            addDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel *removeDenomLbl = [[UILabel alloc] init];
            removeDenomLbl.text = @"-";
            removeDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel  *denomValueMultiply = [[UILabel alloc]init];
            denomValueMultiply.textColor = [UIColor whiteColor];
            denomValueMultiply.text = [NSString stringWithFormat:@"%@%@",[[dic valueForKey:kDenomValue] stringValue],@"  X"];
            denomValueMultiply.textAlignment = NSTextAlignmentRight;
            
            UILabel  *denomValue = [[UILabel alloc]init];
            denomValue.textColor = [UIColor whiteColor];
            denomValue.text = @"0.00";
            denomValue.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            returnDenomValueTxt = [[CustomTextField alloc]init];
            returnDenomValueTxt.borderStyle = UITextBorderStyleRoundedRect;
            returnDenomValueTxt.textColor = [UIColor blackColor];
            returnDenomValueTxt.font = [UIFont systemFontOfSize:18.0];
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.keyboardType = UIKeyboardTypeNumberPad;
            returnDenomValueTxt.autocorrectionType = UITextAutocorrectionTypeNo;
            returnDenomValueTxt.layer.borderColor = [UIColor whiteColor].CGColor;
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.delegate = self;
            returnDenomValueTxt.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            //commented by Srinivasulu on 18/04/2017....
            
            //                [returnDenomValueTxt addTarget:self action:@selector(coinsTextFieldChanged:) forControlEvents:UIControlEventEditingChanged];
            
            //upto here on 18/04/2017....
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                //                    returnDenominationView.frame = CGRectMake(100, 80, 800, 670);
                //                    label.frame = CGRectMake(0, 0, returnDenominationView.frame.size.width, 70);
                //                    label.font = [UIFont systemFontOfSize:25];
                //                    backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                //
                //                    denomSrollView.frame = CGRectMake(0, 290, 778, 150);
                //                    denomSrollView.contentSize = CGSizeMake(778, 500);
                
                removeDenomLbl.frame = CGRectMake(xPosition , yPosition, 60, 40);
                removeDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                
                denomImg.frame = CGRectMake(xPosition, yPosition + removeDenomLbl.frame.size.height, 95, 85);
                
                addDenomLbl.frame = CGRectMake(xPosition + denomImg.frame.size.width - 30, yPosition, 60, 40);
                addDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                removeDenom.frame = CGRectMake(denomImg.frame.origin.x, denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                addDenom.frame = CGRectMake(denomImg.frame.origin.x + (denomImg.frame.size.width/2), denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                
                denomValueMultiply.frame = CGRectMake(450, textYposition, 120, 25);
                denomValueMultiply.font = [UIFont boldSystemFontOfSize:20];
                
                returnDenomValueTxt.frame = CGRectMake(denomValueMultiply.frame.origin.x + denomValueMultiply.frame.size.width + 20,textYposition, 80, 25);
                returnDenomValueTxt.font = [UIFont boldSystemFontOfSize:20];
                
                
                //changed by Srinivasulu on 29/08/2017....
                
                //                    denomValue.frame = CGRectMake(returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 20,textYposition, 200, 25);
                denomValue.frame = CGRectMake( returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 10,textYposition, denomSrollView.frame.size.width - (returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 20), 25);
                
                
                //upto here on 29/08/2017....
                
                
                denomValue.font = [UIFont systemFontOfSize:20.0];
                
            }
            
            //commented and changes done by srinivasulu on 27/03/2018....
            //because need to be displaced side
            
            //            xPosition = xPosition + denomImg.frame.size.width + 20;
            textYposition = textYposition + 40;
            
            //            if (index != 0 && (index%2) == 0) {
            //
            yPosition = yPosition + denomImg.frame.size.height+addDenomLbl.frame.size.height ;
            
            //                xPosition = 10;
            //            }
            
            //upto here by srinivasulu on 27/03/2018....
            
            
            [denomSrollView addSubview:addDenomLbl];
            [denomSrollView addSubview:removeDenomLbl];
            [denomSrollView addSubview:denomImg];
            [denomSrollView addSubview:addDenom];
            [denomSrollView addSubview:removeDenom];
            [denomSrollView addSubview:denomValueMultiply];
            [denomSrollView addSubview:denomValue];
            [denomSrollView addSubview:returnDenomValueTxt];
            
            index++;
            
            [returnDenomValCoinsTxtArr addObject:returnDenomValueTxt];
            [returnDenomCountCoinsArr addObject:denomValue];
        }
        
        CGRect contentRect = CGRectZero;
        for (UIView *view in denomSrollView.subviews) {
            contentRect = CGRectUnion(contentRect, view.frame);
        }
        denomSrollView.contentSize = contentRect.size;
        
        //        yPosition = denomSrollView.frame.size.height + denomSrollView.frame.origin.y + 30;
        //
        //        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //
        //            totalAmt.frame = CGRectMake(450, yPosition, 230, 30);
        //            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
        //
        //            returnAmtVal.frame = CGRectMake(710, yPosition, 150, 30);
        //            returnAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
        //
        //            paid.frame = CGRectMake(450, yPosition+30, 200, 30);
        //            paid.font = [UIFont boldSystemFontOfSize:20.0];
        //
        //            returnedval.frame = CGRectMake(710, yPosition+30, 150, 30);
        //            returnedval.font = [UIFont boldSystemFontOfSize:20.0];
        //
        //
        //            continueBtn.frame = CGRectMake(100.0, yPosition+80, 250.0, 40);
        //            continueBtn.layer.cornerRadius = 10.0f;
        //            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        //
        //            closeBtn.frame = CGRectMake(450.0, yPosition+80, 250.0, 40);
        //            closeBtn.layer.cornerRadius = 10.0;
        //            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        //
        //        }
        
        returnDenominationView.layer.borderColor = [UIColor whiteColor].CGColor;
        returnDenominationView.layer.borderWidth = 1.0f;
        
        UILabel * underLineLbl = [[UILabel alloc] init];
        underLineLbl.backgroundColor = [UIColor lightGrayColor];
        
        
        [returnDenominationView addSubview:label];
        [returnDenominationView addSubview:backbutton];
        
        
        [returnDenominationView addSubview:currencyCodeLbl];
        
        [returnDenominationView addSubview:denominationTypeTxt];
        [returnDenominationView addSubview:conversionRatioTxt];
        [returnDenominationView addSubview:totalDenominationsCountTxt];
        [returnDenominationView addSubview:showListOfAvaiDemBtn];
        
        [returnDenominationView addSubview:denomSrollView];
        
        [returnDenominationView addSubview:underLineLbl];
        
        [returnDenominationView addSubview:totalAmt];
        [returnDenominationView addSubview:returnAmtVal];
        [returnDenominationView addSubview:returnedval];
        [returnDenominationView addSubview:paid];
        [returnDenominationView addSubview:continueBtn];
        [returnDenominationView addSubview:closeBtn];
        [self.view addSubview:returnDenominationView];
        
        
        //changed by Srinivasulu on 15/11/2017....
        //        conversionRatioTxt.text = @"0.00";
        //        totalDenominationsCountTxt.text = @"0";
        
        conversionRatioTxt.placeholder = NSLocalizedString(@"conversion_ration", nil);
        totalDenominationsCountTxt.placeholder = NSLocalizedString(@"count", nil);
        
        if([currencyCodeStr caseInsensitiveCompare:INR] == NSOrderedSame){
            
            conversionRatioTxt.hidden = YES;
            totalDenominationsCountTxt.hidden = YES;
        }
        
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            label.frame = CGRectMake( 0, 0, 800, 52);
            backbutton.frame = CGRectMake( label.frame.origin.x + label.frame.size.width - 50, 5.0, 40.0, 40.0);
            
            
            currencyCodeLbl.frame = CGRectMake(  10, label.frame.origin.y + label.frame.size.height + 5, (label.frame.size.width - 100)/4 , 40.0);
            denominationTypeTxt.frame = CGRectMake( currencyCodeLbl.frame.origin.x + currencyCodeLbl.frame.size.width + 5, currencyCodeLbl.frame.origin.y, (label.frame.size.width)/4, currencyCodeLbl.frame.size.height);
            conversionRatioTxt.frame = CGRectMake( denominationTypeTxt.frame.origin.x + denominationTypeTxt.frame.size.width + 15, currencyCodeLbl.frame.origin.y, denominationTypeTxt.frame.size.width, currencyCodeLbl.frame.size.height);
            totalDenominationsCountTxt.frame = CGRectMake( conversionRatioTxt.frame.origin.x + conversionRatioTxt.frame.size.width + 15, currencyCodeLbl.frame.origin.y, denominationTypeTxt.frame.size.width/1.4, currencyCodeLbl.frame.size.height);
            
            showListOfAvaiDemBtn.frame = CGRectMake( (denominationTypeTxt.frame.origin.x + denominationTypeTxt.frame.size.width - 50), denominationTypeTxt.frame.origin.y - 10,  60, 60);
            
            CGRect contentRect = CGRectZero;
            for (UIView *view in denomSrollView.subviews) {
                
                contentRect = CGRectUnion(contentRect, view.frame);
            }
            
            float height = 425;
            
            if(denomSrollView.frame.size.height >  yPosition)
                height = denomSrollView.frame.size.height;
            
            denomSrollView.frame = CGRectMake( 0, denominationTypeTxt.frame.origin.y + denominationTypeTxt.frame.size.height,  label.frame.size.width, height);
            
            denomSrollView.contentSize = contentRect.size;
            
            underLineLbl.frame = CGRectMake( 450, denomSrollView.frame.origin.y + denomSrollView.frame.size.height, 340, 2);
            
            
            totalAmt.frame = CGRectMake( 450, underLineLbl.frame.origin.y + underLineLbl.frame.size.height + 4, 225, 30);
            returnAmtVal.frame = CGRectMake( 680, totalAmt.frame.origin.y, 150, 30);
            
            
            paid.frame = CGRectMake( 450, totalAmt.frame.origin.y + totalAmt.frame.size.height + 4, 225, 30);
            returnedval.frame = CGRectMake( 680, paid.frame.origin.y, 150, 30);
            
            
            continueBtn.frame = CGRectMake( 100.0, returnedval.frame.origin.y + returnedval.frame.size.height + 10, 250.0, 40);
            closeBtn.frame = CGRectMake( 450.0, continueBtn.frame.origin.y, 250.0, 40);
            
            float  originY = 20;
            
            //            if(originY  > ((self.view.frame.size.width - label.frame.size.width) / 2))
            //                originY = (self.view.frame.size.width - label.frame.size.width) / 2;
            
            returnDenominationView.frame = CGRectMake( (self.view.frame.size.width - label.frame.size.width)/2, originY, label.frame.size.width, continueBtn.frame.origin.y + continueBtn.frame.size.height + 4);
            
            
            //--  --    --       --denominationView
            
            label.font = [UIFont fontWithName:TEXT_FONT_NAME size:25];
            currencyCodeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:25];
            
            
            denominationTypeTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            conversionRatioTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            totalDenominationsCountTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            
            
            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
            returnAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
            paid.font = [UIFont boldSystemFontOfSize:20.0];
            returnedval.font = [UIFont boldSystemFontOfSize:20.0];
            
            
            continueBtn.layer.cornerRadius = 10.0f;
            closeBtn.layer.cornerRadius = 10.0;
            
            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
        }
        
        //        }
        
        
        
        //        if ([denominationView isDescendantOfView:self.view])
        
        
        //Changes done by Srinivasulu on 17/05/2018....
        //reaons -- Sir side remove animations. Commented and written the code....
        
        if(!returnDenominationView.isHidden){
            //            [UIView transitionFromView:denominationView
            //                                toView:returnDenominationView
            //                              duration:0.6
            //                               options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
            //                            completion:nil];
            denominationView.hidden = YES;
            returnDenominationView.hidden = NO;
        }
        //upto here on 17/05/2018....
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
}

/**
 * @description  here we are adding the denomination note amount from the returned amount....
 * @date
 * @method       addReturnDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)addReturnDenominations:(UIButton*)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    
    @try {
        
        BOOL isAmountExceed = false;
        
        
        if ([self checkMaxReturnAmountWith:1.00 isTextField:NO]) {
            
            //changed by srinivasulu
            
            //            if (!([returnedval.text floatValue] >= [returnAmtVal.text floatValue])) {
            if (!(((returnedval.text).floatValue  + sender.tag) > (returnAmtVal.text).floatValue)) {
                
                if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                    
                    NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                    
                    oneReturnCount = str.intValue;
                }
                else {
                    oneReturnCount = 0;
                }
                oneReturnCount++;
                if (oneReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                    
                    for (UITextField *text in returnDenomValTxtArr) {
                        
                        if (text.tag == sender.tag) {
                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in returnDenomCountArr) {
                        
                        if (text.tag == sender.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * sender.tag)];
                            
                        }
                    }
                }
            }
            //added by Srinivasulu on 18/04/2017....
            else{
                
                
                
                isAmountExceed = true;
                
                
                
            }
            //upto here on 18/04/2017....
            
            
        }
        //added by Srinivasulu on 18/04/2017....
        else{
            
            
            
            isAmountExceed = true;
            
            
            
        }
        
        if(isAmountExceed){
            
            float y_axis = self.view.frame.size.height - 350;
            
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
            
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
        }
        
        //upto here on 18/04/2017....
        
        
        [self updateReturnAmount];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  here we are adding the denomination coin amount from the returned amount....
 * @date
 * @method       addReturnCoinsDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)addReturnCoinsDenominations:(UIButton*)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    
    @try {
        
        BOOL isAmountExceed = FALSE;
        
        
        if ([self checkMaxReturnAmountWith:1.00 isTextField:NO]) {
            
            //changed by srinivasulu
            
            //            if (!([returnedval.text floatValue] >= [returnAmtVal.text floatValue])) {
            if (!(((returnedval.text).floatValue  + sender.tag) > (returnAmtVal.text).floatValue)) {
                
                if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                    
                    NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                    
                    oneReturnCount = str.intValue;
                }
                else {
                    oneReturnCount = 0;
                }
                oneReturnCount++;
                if (oneReturnCount > 0) {
                    [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                    
                    for (UITextField *text in returnDenomValCoinsTxtArr) {
                        
                        if (text.tag == sender.tag) {
                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in returnDenomCountCoinsArr) {
                        
                        if (text.tag == sender.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * sender.tag)];
                            
                        }
                    }
                }
            }
            //added by Srinivasulu on 18/04/2017....
            else{
                
                isAmountExceed = true;
                
                
            }
            //upto here on 18/04/2017....
            
        }
        //added by Srinivasulu on 18/04/2017....
        else{
            
            isAmountExceed = true;
        }
        
        if(isAmountExceed){
            
            float y_axis = self.view.frame.size.height - 350;
            
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
            
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
        }
        
        //upto here on 18/04/2017....
        
        [self updateReturnAmount];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  here we are removing the denomination note amount from the returned amount....
 * @date
 * @method       removeReturnDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)removeReturnDenominations:(UIButton*)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
            
            NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            
            oneCount = str.integerValue;
        }
        else {
            oneCount = 0;
        }
        if (oneCount != 0) {
            oneCount--;
        }
        if (oneCount>=0) {
            if ([returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                for (UITextField *text in returnDenomValTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in returnDenomCountArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            if (oneCount == 0) {
                [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
        }
        [self updateReturnAmount];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are removing the denomination coin amount from the returned amount....
 * @date
 * @method       removeReturnCoinsDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)removeReturnCoinsDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
            
            NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            
            oneCount = str.integerValue;
        }
        else {
            oneCount = 0;
        }
        if (oneCount != 0) {
            oneCount--;
        }
        if (oneCount>=0) {
            if ([returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                for (UITextField *text in returnDenomValCoinsTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in returnDenomCountCoinsArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            if (oneCount == 0) {
                [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
            else {
                [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
        }
        [self updateReturnAmount];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

#pragma mark actions used executed at time submitting and closing the button....

/**
 * @description  this method will be executed when submitt button is cilcked in paid denomincations....
 * @date
 * @method       checkStatus
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)checkStatus {
    if ((paidVal.text).floatValue == 0) {
        if ((billDueValue.text).floatValue == 0) {
            NSString *paidAmt = @"0.00";
            payTxt2 = [[UITextField alloc] init];
            payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
            [self continuePay1];
        }
        else {
            //changed by Srinivasulu on 01/05/2017....
            
            //            cofirmAlert = [[UIAlertView alloc]initWithTitle:@"Paid Amount is Zero. Do You Want to continue?" message:nil delegate:self cancelButtonTitle:@"YES" otherButtonTitles:@"NO", nil];
            
            cofirmAlert = [[UIAlertView alloc]initWithTitle:@"You haven't select any Denominations! Do you want to continue?" message:nil delegate:self cancelButtonTitle:@"YES" otherButtonTitles:@"NO", nil];
            
            
            //upto here on 01/05/2017......
            
            [cofirmAlert show];
        }
        
    }
    else {
        if ((changeReturnVal.text).floatValue > 0) {
            [self populateReturnDenominationViewDynamically];
        }
        else {
            [self populatePaymentView:@"CASH"];
        }
    }
}

/**
 * @description  this method will be executed when submitt button is cilcked in return denomincations....
 * @date
 * @method       checkReturnDenomStatus
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

- (void)checkReturnDenomStatus {
    if ((returnedval.text).floatValue == 0) {
        
        
        
        //changed by Srinivasulu on 01/05/2017....
        
        //            returnCofirmAlert = [[UIAlertView alloc]initWithTitle:@"Change not Returned. Do You Want to continue?" message:nil delegate:self cancelButtonTitle:@"YES" otherButtonTitles:@"NO", nil];
        
        returnCofirmAlert = [[UIAlertView alloc]initWithTitle:@"You haven't select any Denominations! Do you want to continue?" message:nil delegate:self cancelButtonTitle:@"YES" otherButtonTitles:@"NO", nil];
        
        
        //upto here on 01/05/2017......
        
        [returnCofirmAlert show];
        
    }
    else {
        
        //Changes done by Srinivasulu on 17/05/2018....
        //reaons -- Sir side remove animations. Commented and written the code....
        
        //        [UIView transitionFromView:returnDenominationView
        //                            toView:paymentView
        //                          duration:0.6
        //                           options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
        //                        completion:nil];
        
        returnDenominationView.hidden = YES;
        paymentView.hidden = NO;
        
        [self populatePaymentView:@"CASH"];
        
        //upto here on 17/05/2018....
    }
}

#pragma mark   End of returning amount calculations -

/**
 * @description  here we are changing the value for paid amount through denominations....
 * @date
 * @method       updatePaidAmount
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

- (void)updatePaidAmount {
    
    @try {
        paidVal.text = @"0.00";
        changeReturnVal.text = @"0.00";
        NSMutableArray *count = [denominationDic.allValues mutableCopy];
        NSMutableArray *denom = [denominationDic.allKeys mutableCopy];
        
        [count addObjectsFromArray:denominationCoinDic.allValues];
        [denom addObjectsFromArray:denominationCoinDic.allKeys];
        
        float multipleValue = 1;
        float value = 0;
        
        if([currencyCodeStr caseInsensitiveCompare:INR] != NSOrderedSame){
            
            multipleValue = (conversionRatioTxt.text).floatValue;
        }
        
        
        float total = 0;
        for (int i=0; i<denom.count; i++) {
            
            total += [count[i] floatValue] * [denom[i] floatValue] * multipleValue;
            value += [count[i] floatValue];
        }
        
        if(([currencyCodeStr caseInsensitiveCompare:INR] != NSOrderedSame)  && ((denominationCoinDic.allKeys.count +  denominationDic.allKeys.count) == 0)){
            
            total = (conversionRatioTxt.text).floatValue * (totalDenominationsCountTxt.text).floatValue ;
        }
        else{
            
            totalDenominationsCountTxt.text = [NSString stringWithFormat:@"%.f",value];
        }
        
        paidVal.text = [NSString stringWithFormat:@"%.2f",total];
        
        
        if (!billingScrollView.hidden || (mainsegmentIndex == 0 && ((paidVal.text).floatValue < (billDueValue.text).floatValue))) {
            if (((paidVal.text).floatValue - (billDueValue.text).floatValue) > 0) {
                changeReturnVal.text = [NSString stringWithFormat:@"%.2f",((paidVal.text).floatValue - (billDueValue.text).floatValue)];
            }
        }
        else {
            if ((returningTotalBillValue.text).floatValue-(paidVal.text).floatValue<0) {
                
                changeReturnVal.text = [NSString stringWithFormat:@"%.2f",(paidVal.text).floatValue-(returningTotalBillValue.text).floatValue];
            }
        }
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        
    }
    
}

/**
 * @description  here we are changing the value for return amount through denominations....
 * @date
 * @method       updateReturnAmount
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

- (void)updateReturnAmount {
    
    @try {
        
        returnedval.text = @"0.00";
        
        NSMutableArray * count = [returnDenominationDic.allValues mutableCopy];
        NSMutableArray * denom = [returnDenominationDic.allKeys mutableCopy];
        
        [count addObjectsFromArray:returnDenominationCoinDic.allValues];
        [denom addObjectsFromArray:returnDenominationCoinDic.allKeys];
        
        float multipleValue = 1;
        float value = 0;
        
        if([currencyCodeStr caseInsensitiveCompare:INR] != NSOrderedSame){
            
            multipleValue = (conversionRatioTxt.text).floatValue;
        }
        
        
        float total = 0;
        for (int i=0; i<denom.count; i++) {
            
            total += [count[i] floatValue] * [denom[i] floatValue] * multipleValue;
            value += [count[i] floatValue];
        }
        
        if(([currencyCodeStr caseInsensitiveCompare:INR] != NSOrderedSame)  && ((returnDenominationCoinDic.allKeys.count +  returnDenominationDic.allKeys.count) == 0)){
            
            total = (conversionRatioTxt.text).floatValue * (totalDenominationsCountTxt.text).floatValue ;
        }
        else{
            
            totalDenominationsCountTxt.text = [NSString stringWithFormat:@"%.f",value];
        }
        
        returnedval.text = [NSString stringWithFormat:@"%.2f",total];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

#pragma -mark   method which is using in both previous and current denominations....


- (BOOL)checkMaxReturnAmountWith:(float)amount isTextField:(BOOL)isTextField {
    if (!isTextField) {
        if ((returnedval.text).floatValue == 0) {
            if ((returnAmtVal.text).floatValue >= amount) {
                return YES;
            }
            return NO;
        }
        else {
            if (((returnedval.text).floatValue + amount) > (returnAmtVal.text).floatValue) {
                return NO;
            }
            return YES;
        }
        
    }
    else {
        if ((returnedval.text).floatValue == 0) {
            if ((returnAmtVal.text).floatValue >= amount) {
                return YES;
            }
            return NO;
        }
        else {
            if ( amount > (returnAmtVal.text).floatValue) {
                return NO;
            }
            return YES;
        }
        
    }
    return NO;
}

#pragma -mark methods which are used in denominations populations....

-(void)populateDenominationView {
    
    //    paymentView.hidden = YES;
    
    tensCount = 0;
    twentyCount = 0;
    fiftyCount = 0;
    hundredCount = 0;
    fiveHundredCount = 0;
    thousandCount = 0;
    oneCount = 0;
    twoCount = 0;
    fiveCount = 0;
    tenCoinCount = 0;
    
    denominationDic = [[NSMutableDictionary alloc]init];
    returnDenominationDic = [[NSMutableDictionary alloc]init];
    
    
    denomination = [[NSBundle mainBundle]loadNibNamed:@"DenominationView" owner:self options:nil][0];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        denomination = [[NSBundle mainBundle]loadNibNamed:@"DenominationView-iPhone" owner:self options:nil][0];
    }
    denomination.hidden = NO;
    
    thousandValue = [[UILabel alloc]init];
    thousandValue.textColor = [UIColor whiteColor];
    thousandValue.text = @"0.00";
    
    fiveHundValue = [[UILabel alloc]init];
    fiveHundValue.textColor = [UIColor whiteColor];
    fiveHundValue.text = @"0.00";
    
    hundValue = [[UILabel alloc]init];
    hundValue.textColor = [UIColor whiteColor];
    hundValue.text = @"0.00";
    
    fiftyValue = [[UILabel alloc]init];
    fiftyValue.textColor = [UIColor whiteColor];
    fiftyValue.text = @"0.00";
    
    twentyValue = [[UILabel alloc]init];
    twentyValue.textColor = [UIColor whiteColor];
    twentyValue.text = @"0.00";
    
    tenValue = [[UILabel alloc]init];
    tenValue.textColor = [UIColor whiteColor];
    tenValue.text = @"0.00";
    
    fiveValue = [[UILabel alloc]init];
    fiveValue.textColor = [UIColor whiteColor];
    fiveValue.text = @"0.00";
    
    twoValue = [[UILabel alloc]init];
    twoValue.textColor = [UIColor whiteColor];
    twoValue.text = @"0.00";
    
    oneValue = [[UILabel alloc]init];
    oneValue.textColor = [UIColor whiteColor];
    oneValue.text = @"0.00";
    
    
    
    label = [[UILabel alloc] init] ;
    label.text = @"    Cash Payment";
    label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
    label.alpha = 0.8f;
    label.textAlignment = NSTextAlignmentLeft;
    label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label.textColor = [UIColor whiteColor];
    
    // close button to close the view ..
    backbutton = [[UIButton alloc] init] ;
    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    backbutton.tag = 0;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
    
    UILabel *totalAmt = [[UILabel alloc]init];
    totalAmt.text = @"Total Bill";
    totalAmt.textColor = [UIColor whiteColor];
    
    totalAmtVal = [[UILabel alloc]init];
    if (!returnScrollView.hidden) {
        totalAmtVal.text = returningTotalBillValue.text;
    }
    else{
        if ([billingType isEqualToString:@"pending"] || (billDueValue.text).floatValue > 0) {
            totalAmtVal.text = billDueValue.text;
        }
    }
    totalAmtVal.textColor = [UIColor whiteColor];
    
    UILabel *paid = [[UILabel alloc]init];
    paid.text = @"Paid Amount";
    paid.textColor = [UIColor whiteColor];
    
    paidVal = [[UILabel alloc]init];
    paidVal.text = @"0.00";
    paidVal.textColor = [UIColor whiteColor];
    
    UILabel *changeReturn = [[UILabel alloc]init];
    changeReturn.text = @"Change Return";
    changeReturn.textColor = [UIColor whiteColor];
    
    changeReturnVal = [[UILabel alloc]init];
    changeReturnVal.text = @"0.00";
    changeReturnVal.textColor = [UIColor whiteColor];
    
    tensQty = [[CustomTextField alloc]init];
    tensQty.borderStyle = UITextBorderStyleRoundedRect;
    tensQty.textColor = [UIColor blackColor];
    tensQty.font = [UIFont systemFontOfSize:18.0];
    tensQty.backgroundColor = [UIColor whiteColor];
    tensQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    tensQty.backgroundColor = [UIColor whiteColor];
    tensQty.keyboardType = UIKeyboardTypeNumberPad;
    tensQty.autocorrectionType = UITextAutocorrectionTypeNo;
    tensQty.layer.borderColor = [UIColor whiteColor].CGColor;
    tensQty.backgroundColor = [UIColor whiteColor];
    tensQty.delegate = self;
    // [tensQty awakeFromNib];
    
    twentyQty = [[CustomTextField alloc]init];
    twentyQty.borderStyle = UITextBorderStyleRoundedRect;
    twentyQty.textColor = [UIColor blackColor];
    twentyQty.font = [UIFont systemFontOfSize:18.0];
    twentyQty.backgroundColor = [UIColor whiteColor];
    twentyQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    twentyQty.backgroundColor = [UIColor whiteColor];
    twentyQty.keyboardType = UIKeyboardTypeNumberPad;
    twentyQty.autocorrectionType = UITextAutocorrectionTypeNo;
    twentyQty.layer.borderColor = [UIColor whiteColor].CGColor;
    twentyQty.backgroundColor = [UIColor whiteColor];
    twentyQty.delegate = self;
    // [twentyQty awakeFromNib];
    
    fiftyQty = [[CustomTextField alloc]init];
    fiftyQty.borderStyle = UITextBorderStyleRoundedRect;
    fiftyQty.textColor = [UIColor blackColor];
    fiftyQty.font = [UIFont systemFontOfSize:18.0];
    fiftyQty.backgroundColor = [UIColor whiteColor];
    fiftyQty.keyboardType = UIKeyboardTypeNumberPad;
    fiftyQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiftyQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiftyQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiftyQty.delegate = self;
    // [fiftyQty awakeFromNib];
    
    hundredQty = [[CustomTextField alloc]init];
    hundredQty.borderStyle = UITextBorderStyleRoundedRect;
    hundredQty.textColor = [UIColor blackColor];
    hundredQty.font = [UIFont systemFontOfSize:18.0];
    hundredQty.backgroundColor = [UIColor whiteColor];
    hundredQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    hundredQty.backgroundColor = [UIColor whiteColor];
    hundredQty.keyboardType = UIKeyboardTypeNumberPad;
    hundredQty.autocorrectionType = UITextAutocorrectionTypeNo;
    hundredQty.layer.borderColor = [UIColor whiteColor].CGColor;
    hundredQty.backgroundColor = [UIColor whiteColor];
    hundredQty.delegate = self;
    //    [hundredQty awakeFromNib];
    
    fiveHundredQty = [[CustomTextField alloc]init];
    fiveHundredQty.borderStyle = UITextBorderStyleRoundedRect;
    fiveHundredQty.textColor = [UIColor blackColor];
    fiveHundredQty.font = [UIFont systemFontOfSize:18.0];
    fiveHundredQty.backgroundColor = [UIColor whiteColor];
    fiveHundredQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiveHundredQty.backgroundColor = [UIColor whiteColor];
    fiveHundredQty.keyboardType = UIKeyboardTypeNumberPad;
    fiveHundredQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiveHundredQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiveHundredQty.backgroundColor = [UIColor whiteColor];
    fiveHundredQty.delegate = self;
    //    [fiveHundredQty awakeFromNib];
    
    thousandQty = [[CustomTextField alloc]init];
    thousandQty.borderStyle = UITextBorderStyleRoundedRect;
    thousandQty.textColor = [UIColor blackColor];
    thousandQty.font = [UIFont systemFontOfSize:18.0];
    thousandQty.backgroundColor = [UIColor whiteColor];
    thousandQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    thousandQty.backgroundColor = [UIColor whiteColor];
    thousandQty.keyboardType = UIKeyboardTypeNumberPad;
    thousandQty.autocorrectionType = UITextAutocorrectionTypeNo;
    thousandQty.layer.borderColor = [UIColor whiteColor].CGColor;
    thousandQty.backgroundColor = [UIColor whiteColor];
    thousandQty.delegate = self;
    
    oneQty = [[CustomTextField alloc]init];
    oneQty.borderStyle = UITextBorderStyleRoundedRect;
    oneQty.textColor = [UIColor blackColor];
    oneQty.font = [UIFont systemFontOfSize:18.0];
    oneQty.backgroundColor = [UIColor whiteColor];
    oneQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    oneQty.keyboardType = UIKeyboardTypeNumberPad;
    oneQty.autocorrectionType = UITextAutocorrectionTypeNo;
    oneQty.layer.borderColor = [UIColor whiteColor].CGColor;
    oneQty.delegate = self;
    // [fiftyQty awakeFromNib];
    
    twoQty = [[CustomTextField alloc]init];
    twoQty.borderStyle = UITextBorderStyleRoundedRect;
    twoQty.textColor = [UIColor blackColor];
    twoQty.font = [UIFont systemFontOfSize:18.0];
    twoQty.backgroundColor = [UIColor whiteColor];
    twoQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    twoQty.keyboardType = UIKeyboardTypeNumberPad;
    twoQty.backgroundColor = [UIColor whiteColor];
    twoQty.autocorrectionType = UITextAutocorrectionTypeNo;
    twoQty.layer.borderColor = [UIColor whiteColor].CGColor;
    twoQty.backgroundColor = [UIColor whiteColor];
    twoQty.delegate = self;
    //    [hundredQty awakeFromNib];
    
    fiveQty = [[CustomTextField alloc]init];
    fiveQty.borderStyle = UITextBorderStyleRoundedRect;
    fiveQty.textColor = [UIColor blackColor];
    fiveQty.font = [UIFont systemFontOfSize:18.0];
    fiveQty.backgroundColor = [UIColor whiteColor];
    fiveQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiveQty.keyboardType = UIKeyboardTypeNumberPad;
    fiveQty.backgroundColor = [UIColor whiteColor];
    fiveQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiveQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiveQty.backgroundColor = [UIColor whiteColor];
    fiveQty.delegate = self;
    //    [fiveHundredQty awakeFromNib];
    
    tenCoinQty = [[CustomTextField alloc]init];
    tenCoinQty.borderStyle = UITextBorderStyleRoundedRect;
    tenCoinQty.textColor = [UIColor blackColor];
    tenCoinQty.font = [UIFont systemFontOfSize:18.0];
    tenCoinQty.backgroundColor = [UIColor whiteColor];
    tenCoinQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    tenCoinQty.backgroundColor = [UIColor whiteColor];
    tenCoinQty.autocorrectionType = UITextAutocorrectionTypeNo;
    tenCoinQty.layer.borderColor = [UIColor whiteColor].CGColor;
    tenCoinQty.backgroundColor = [UIColor whiteColor];
    tenCoinQty.delegate = self;
    
    UIButton   *continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [continueBtn addTarget:self action:@selector(checkStatus) forControlEvents:UIControlEventTouchUpInside];
    [continueBtn setTitle:@"Continue"    forState:UIControlStateNormal];
    continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    continueBtn.titleLabel.textColor = [UIColor whiteColor];
    continueBtn.backgroundColor = [UIColor grayColor];
    
    UIButton   *closeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [closeBtn addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    [closeBtn setTitle:@"Back"    forState:UIControlStateNormal];
    closeBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    closeBtn.titleLabel.textColor = [UIColor whiteColor];
    closeBtn.backgroundColor = [UIColor grayColor];
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
            
            denomination.frame = CGRectMake(100, 20, 800, 650);
            label.frame = CGRectMake(0, 0, 800, 80);
            label.font = [UIFont systemFontOfSize:25];
            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
            tensQty.frame = CGRectMake(540,280.0, 80, 25);
            tensQty.font = [UIFont boldSystemFontOfSize:20];
            
            twentyQty.frame = CGRectMake(540,240.0, 80, 25);
            twentyQty.font = [UIFont boldSystemFontOfSize:20];
            
            fiftyQty.frame = CGRectMake(540,205.0, 80, 25);
            fiftyQty.font = [UIFont boldSystemFontOfSize:20];
            
            hundredQty.frame = CGRectMake(540,170.0, 80, 25);
            hundredQty.font = [UIFont boldSystemFontOfSize:20];
            fiveHundredQty.frame = CGRectMake(540,130, 80, 25);
            fiveHundredQty.font = [UIFont boldSystemFontOfSize:20];
            thousandQty.frame = CGRectMake(540,90, 80, 25);
            thousandQty.font =[UIFont boldSystemFontOfSize:20];
            
            oneQty.frame = CGRectMake(540,390.0, 80, 25);
            oneQty.font = [UIFont boldSystemFontOfSize:20];
            twoQty.frame = CGRectMake(540,355.0, 80, 25);
            twoQty.font = [UIFont boldSystemFontOfSize:20];
            fiveQty.frame = CGRectMake(540,315.0, 80, 25);
            fiveQty.font =[UIFont boldSystemFontOfSize:20];
            tenCoinQty.frame = CGRectMake(450,460, 80, 20);
            tenCoinQty.font =[UIFont boldSystemFontOfSize:20];
            
            thousandValue.frame = CGRectMake(670.0, 96.0, 200.0, 20);
            thousandValue.font = [UIFont systemFontOfSize:17.0];
            fiveHundValue.frame = CGRectMake(670.0, 133.0, 200.0, 20);
            fiveHundValue.font = [UIFont systemFontOfSize:17.0];
            hundValue.frame = CGRectMake(670.0, 170.0, 200.0, 20);
            hundValue.font = [UIFont systemFontOfSize:17.0];
            fiftyValue.frame = CGRectMake(670.0, 207.0, 200.0, 20);
            fiftyValue.font = [UIFont systemFontOfSize:17.0];
            twentyValue.frame = CGRectMake(670.0, 244.0, 200.0, 20);
            twentyValue.font = [UIFont systemFontOfSize:17.0];
            tenValue.frame = CGRectMake(670.0, 281.0, 200.0, 20);
            tenValue.font = [UIFont systemFontOfSize:17.0];
            fiveValue.frame = CGRectMake(670.0, 318.0, 200.0, 20);
            fiveValue.font = [UIFont systemFontOfSize:17.0];
            twoValue.frame = CGRectMake(670.0, 355.0, 200.0, 20);
            twoValue.font = [UIFont systemFontOfSize:17.0];
            oneValue.frame = CGRectMake(670.0, 392.0, 200.0, 20);
            oneValue.font = [UIFont systemFontOfSize:17.0];
            
            totalAmt.frame = CGRectMake(20, 500, 150, 30);
            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
            totalAmtVal.frame = CGRectMake(550, 500, 150, 30);
            totalAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            paid.frame = CGRectMake(20, 530, 150, 30);
            paid.font = [UIFont boldSystemFontOfSize:20.0];
            
            paidVal.frame = CGRectMake(550, 530, 150, 30);
            paidVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            
            changeReturn.frame = CGRectMake(20, 560, 150, 30);
            changeReturn.font = [UIFont boldSystemFontOfSize:20.0];
            
            changeReturnVal.frame = CGRectMake(550, 560, 150, 30);
            changeReturnVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            
            
            continueBtn.frame = CGRectMake(100.0, 600, 250.0, 40);
            continueBtn.layer.cornerRadius = 10.0f;
            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
            closeBtn.frame = CGRectMake(450.0, 600, 250.0, 40);
            closeBtn.layer.cornerRadius = 10.0f;
            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        }
    }
    else {
        denomination.frame = CGRectMake(10, 20, self.view.frame.size.width - 20.0, 480.0);
        denomination.backgroundColor = [UIColor blackColor];
        label.frame = CGRectMake(0, 0, self.view.frame.size.width - 20.0, 30);
        label.font = [UIFont systemFontOfSize:15];
        backbutton.frame = CGRectMake(self.view.frame.size.width - 60.0, 0, 30.0, 30.0);
        tensQty.frame = CGRectMake(165,180.0, 40, 20);
        tensQty.font = [UIFont boldSystemFontOfSize:15];
        
        twentyQty.frame = CGRectMake(165,150.0, 40, 20);
        twentyQty.font = [UIFont boldSystemFontOfSize:15];
        
        fiftyQty.frame = CGRectMake(165,125.0, 40, 20);
        fiftyQty.font = [UIFont boldSystemFontOfSize:15];
        
        hundredQty.frame = CGRectMake(165,95.0, 40, 20);
        hundredQty.font = [UIFont boldSystemFontOfSize:15];
        fiveHundredQty.frame = CGRectMake(165,65, 40, 20);
        fiveHundredQty.font = [UIFont boldSystemFontOfSize:15];
        thousandQty.frame = CGRectMake(165,35, 40, 20);
        thousandQty.font =[UIFont boldSystemFontOfSize:15];
        
        oneQty.frame = CGRectMake(165,270.0, 40, 20);
        oneQty.font = [UIFont boldSystemFontOfSize:15];
        twoQty.frame = CGRectMake(165,240.0, 40, 20);
        twoQty.font = [UIFont boldSystemFontOfSize:15];
        fiveQty.frame = CGRectMake(165,210.0, 40, 20);
        fiveQty.font =[UIFont boldSystemFontOfSize:15];
        tenCoinQty.frame = CGRectMake(165,460, 40, 20);
        tenCoinQty.font =[UIFont boldSystemFontOfSize:15];
        
        thousandValue.frame = CGRectMake(210.0, 35.0, 200.0, 20);
        thousandValue.font = [UIFont systemFontOfSize:12.0];
        fiveHundValue.frame = CGRectMake(210.0, 65.0, 200.0, 20);
        fiveHundValue.font = [UIFont systemFontOfSize:12.0];
        hundValue.frame = CGRectMake(210.0, 95.0, 200.0, 20);
        hundValue.font = [UIFont systemFontOfSize:12.0];
        fiftyValue.frame = CGRectMake(210.0, 125.0, 200.0, 20);
        fiftyValue.font = [UIFont systemFontOfSize:12.0];
        twentyValue.frame = CGRectMake(210.0, 150.0, 200.0, 20);
        twentyValue.font = [UIFont systemFontOfSize:12.0];
        tenValue.frame = CGRectMake(210.0, 180.0, 200.0, 20);
        tenValue.font = [UIFont systemFontOfSize:12.0];
        fiveValue.frame = CGRectMake(210.0, 210.0, 200.0, 20);
        fiveValue.font = [UIFont systemFontOfSize:12.0];
        twoValue.frame = CGRectMake(210.0, 240.0, 200.0, 20);
        twoValue.font = [UIFont systemFontOfSize:12.0];
        oneValue.frame = CGRectMake(210.0, 270.0, 200.0, 20);
        oneValue.font = [UIFont systemFontOfSize:12.0];
        
        totalAmt.frame = CGRectMake(120, 300, 150, 30);
        totalAmt.font = [UIFont boldSystemFontOfSize:12.0];
        totalAmtVal.frame = CGRectMake(230.0, 300, 150, 30);
        totalAmtVal.font = [UIFont boldSystemFontOfSize:12.0];
        
        paid.frame = CGRectMake(120, 315, 150, 30);
        paid.font = [UIFont boldSystemFontOfSize:12.0];
        
        paidVal.frame = CGRectMake(230.0, 315, 150, 30);
        paidVal.font = [UIFont boldSystemFontOfSize:12.0];
        
        
        changeReturn.frame = CGRectMake(120, 330.0, 150, 30);
        changeReturn.font = [UIFont boldSystemFontOfSize:12.0];
        
        changeReturnVal.frame = CGRectMake(230.0, 330.0, 150, 30);
        changeReturnVal.font = [UIFont boldSystemFontOfSize:12.0];
        
        
        
        continueBtn.frame = CGRectMake(30, 450.0, 100.0, 25);
        continueBtn.layer.cornerRadius = 10.0f;
        continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
        closeBtn.frame = CGRectMake(170.0, 450.0, 100.0, 25);
        closeBtn.layer.cornerRadius = 10.0;
        closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
    }
    denomination.layer.borderColor = [UIColor whiteColor].CGColor;
    denomination.layer.borderWidth = 1.0f;
    [denomination addSubview:label];
    [denomination addSubview:backbutton];
    [denomination addSubview:tensQty];
    [denomination addSubview:twentyQty];
    [denomination addSubview:fiftyQty];
    [denomination addSubview:hundredQty];
    [denomination addSubview:fiveHundredQty];
    [denomination addSubview:thousandQty];
    [denomination addSubview:thousandValue];
    [denomination addSubview:fiveHundValue];
    [denomination addSubview:hundValue];
    [denomination addSubview:fiftyValue];
    [denomination addSubview:twentyValue];
    [denomination addSubview:tenValue];
    [denomination addSubview:fiveValue];
    [denomination addSubview:twoValue];
    [denomination addSubview:oneValue];
    [denomination addSubview:totalAmt];
    [denomination addSubview:totalAmtVal];
    [denomination addSubview:paidVal];
    [denomination addSubview:paid];
    [denomination addSubview:changeReturnVal];
    [denomination addSubview:changeReturn];
    [denomination addSubview:oneQty];
    [denomination addSubview:twoQty];
    [denomination addSubview:fiveQty];
    
    
    [denomination addSubview:continueBtn];
    [denomination addSubview:closeBtn];
    
    
    [self.view addSubview:denomination];
    
}

- (void)calreturnsItems {
    
    
    
    UIAlertView *confirmationAlertView  = [[UIAlertView alloc] init];
    
    confirmationAlertView.delegate = self;
    
    [confirmationAlertView setTitle:NSLocalizedString(@"do_you_want_to_return_the_selected_items_?", nil)];
    
    [confirmationAlertView addButtonWithTitle:@"YES"];
    
    [confirmationAlertView addButtonWithTitle:@"NO"];
    
    [confirmationAlertView show];
    
    confirmationAlertView.hidden = NO;
    
    
    
}



-(void)addLabel {
    
    if ([(self.view).subviews containsObject:excessAmt]) {
        
        [excessAmt removeFromSuperview];
    }
    
    excessAmt = [[UILabel alloc] init];
    excessAmt.text =  @"Paid amount exceeds the total amount";
    excessAmt.font = [UIFont systemFontOfSize:20];
    excessAmt.backgroundColor = [UIColor clearColor];
    excessAmt.textColor = [UIColor redColor];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        excessAmt.frame = CGRectMake(380, 450, 500, 50);
    }
    else {
        
        excessAmt.frame = CGRectMake(70, 320, 300, 30);
        excessAmt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
    }
    
    [denomination addSubview:excessAmt];
    
    SystemSoundID    soundFileObject1;
    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
    self.soundFileURLRef = (__bridge CFURLRef) tapSound;
    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
    AudioServicesPlaySystemSound (soundFileObject1);
    
    [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(labelEffect) userInfo:nil repeats:NO];
}
-(void)labelEffect {
    
    if ([denomination.subviews containsObject:excessAmt]) {
        
        [excessAmt removeFromSuperview];
    }
    if ([paymentScrollView.subviews containsObject:newCust]) {
        
        [newCust removeFromSuperview];
    }
}

-(void)populateReturnDenominationView {
    
    //    paymentView.hidden = YES;
    
    tensReturnCount = 0;
    twentyReturnCount = 0;
    fiftyReturnCount = 0;
    hundredReturnCount = 0;
    fiveHundredReturnCount = 0;
    thousandReturnCount = 0;
    oneReturnCount = 0;
    twoReturnCount = 0;
    fiveReturnCount = 0;
    
    returnDenomination = [[NSBundle mainBundle]loadNibNamed:@"ReturnDenomination" owner:self options:nil][0];
    returnDenomination.hidden = NO;
    
    thousandReturnValue = [[UILabel alloc]init];
    thousandReturnValue.textColor = [UIColor whiteColor];
    
    fiveHundReturnValue = [[UILabel alloc]init];
    fiveHundReturnValue.textColor = [UIColor whiteColor];
    
    hundReturnValue = [[UILabel alloc]init];
    hundReturnValue.textColor = [UIColor whiteColor];
    
    fiftyReturnValue = [[UILabel alloc]init];
    fiftyReturnValue.textColor = [UIColor whiteColor];
    
    twentyReturnValue = [[UILabel alloc]init];
    twentyReturnValue.textColor = [UIColor whiteColor];
    
    tenReturnValue = [[UILabel alloc]init];
    tenReturnValue.textColor = [UIColor whiteColor];
    
    fiveReturnValue = [[UILabel alloc]init];
    fiveReturnValue.textColor = [UIColor whiteColor];
    
    twoReturnValue = [[UILabel alloc]init];
    twoReturnValue.textColor = [UIColor whiteColor];
    
    oneReturnValue = [[UILabel alloc]init];
    oneReturnValue.textColor = [UIColor whiteColor];
    
    label = [[UILabel alloc] init] ;
    label.text = @"    Change Return";
    label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
    label.alpha = 0.8f;
    label.textAlignment = NSTextAlignmentLeft;
    label.backgroundColor = [UIColor whiteColor];
    label.textColor = [UIColor blackColor];
    
    // close button to close the view ..
    backbutton = [[UIButton alloc] init] ;
    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    backbutton.tag = 78;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
    
    UILabel *totalAmt = [[UILabel alloc]init];
    totalAmt.text = @"Change To Be Returned";
    totalAmt.textColor = [UIColor whiteColor];
    
    returnAmtVal = [[UILabel alloc]init];
    returnAmtVal.text = changeReturnVal.text;
    if (billingScrollView.hidden) {
        returnAmtVal.text = returningTotalBillValue.text;
    }
    returnAmtVal.textColor = [UIColor whiteColor];
    
    UILabel *paid = [[UILabel alloc]init];
    paid.text = @"Returned Amount";
    paid.textColor = [UIColor whiteColor];
    
    returnedval = [[UILabel alloc]init];
    returnedval.text = @"0.00";
    returnedval.textColor = [UIColor whiteColor];
    
    tensReturnQty = [[CustomTextField alloc]init];
    tensReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    tensReturnQty.textColor = [UIColor blackColor];
    tensReturnQty.font = [UIFont systemFontOfSize:18.0];
    tensReturnQty.backgroundColor = [UIColor whiteColor];
    tensReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    tensReturnQty.backgroundColor = [UIColor whiteColor];
    tensReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    tensReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    tensReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    tensReturnQty.backgroundColor = [UIColor whiteColor];
    tensReturnQty.delegate = self;
    // [tensQty awakeFromNib];
    
    twentyReturnQty = [[CustomTextField alloc]init];
    twentyReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    twentyReturnQty.textColor = [UIColor blackColor];
    twentyReturnQty.font = [UIFont systemFontOfSize:18.0];
    twentyReturnQty.backgroundColor = [UIColor whiteColor];
    twentyReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    twentyReturnQty.backgroundColor = [UIColor whiteColor];
    twentyReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    twentyReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    twentyReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    twentyReturnQty.backgroundColor = [UIColor whiteColor];
    twentyReturnQty.delegate = self;
    // [twentyQty awakeFromNib];
    
    fiftyReturnQty = [[CustomTextField alloc]init];
    fiftyReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    fiftyReturnQty.textColor = [UIColor blackColor];
    fiftyReturnQty.font = [UIFont systemFontOfSize:18.0];
    fiftyReturnQty.backgroundColor = [UIColor whiteColor];
    fiftyReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiftyReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiftyReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    fiftyReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiftyReturnQty.delegate = self;
    // [fiftyQty awakeFromNib];
    
    hundredReturnQty = [[CustomTextField alloc]init];
    hundredReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    hundredReturnQty.textColor = [UIColor blackColor];
    hundredReturnQty.font = [UIFont systemFontOfSize:18.0];
    hundredReturnQty.backgroundColor = [UIColor whiteColor];
    hundredReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    hundredReturnQty.backgroundColor = [UIColor whiteColor];
    hundredReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    hundredReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    hundredReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    hundredReturnQty.backgroundColor = [UIColor whiteColor];
    hundredReturnQty.delegate = self;
    //    [hundredQty awakeFromNib];
    
    fiveHundredReturnQty = [[CustomTextField alloc]init];
    fiveHundredReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    fiveHundredReturnQty.textColor = [UIColor blackColor];
    fiveHundredReturnQty.font = [UIFont systemFontOfSize:18.0];
    fiveHundredReturnQty.backgroundColor = [UIColor whiteColor];
    fiveHundredReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiveHundredReturnQty.backgroundColor = [UIColor whiteColor];
    fiveHundredReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiveHundredReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiveHundredReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    fiveHundredReturnQty.backgroundColor = [UIColor whiteColor];
    fiveHundredReturnQty.delegate = self;
    //    [fiveHundredQty awakeFromNib];
    
    thousandReturnQty = [[CustomTextField alloc]init];
    thousandReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    thousandReturnQty.textColor = [UIColor blackColor];
    thousandReturnQty.font = [UIFont systemFontOfSize:18.0];
    thousandReturnQty.backgroundColor = [UIColor whiteColor];
    thousandReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    thousandReturnQty.backgroundColor = [UIColor whiteColor];
    thousandReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    thousandReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    thousandReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    thousandReturnQty.backgroundColor = [UIColor whiteColor];
    thousandReturnQty.delegate = self;
    
    oneReturnQty = [[CustomTextField alloc]init];
    oneReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    oneReturnQty.textColor = [UIColor blackColor];
    oneReturnQty.font = [UIFont systemFontOfSize:18.0];
    oneReturnQty.backgroundColor = [UIColor whiteColor];
    oneReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    oneReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    oneReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    oneReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    oneReturnQty.delegate = self;
    // [fiftyQty awakeFromNib];
    
    twoReturnQty = [[CustomTextField alloc]init];
    twoReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    twoReturnQty.textColor = [UIColor blackColor];
    twoReturnQty.font = [UIFont systemFontOfSize:18.0];
    twoReturnQty.backgroundColor = [UIColor whiteColor];
    twoReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    twoReturnQty.backgroundColor = [UIColor whiteColor];
    twoReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    twoReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    twoReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    twoReturnQty.backgroundColor = [UIColor whiteColor];
    twoReturnQty.delegate = self;
    //    [hundredQty awakeFromNib];
    
    fiveReturnQty = [[CustomTextField alloc]init];
    fiveReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    fiveReturnQty.textColor = [UIColor blackColor];
    fiveReturnQty.font = [UIFont systemFontOfSize:18.0];
    fiveReturnQty.backgroundColor = [UIColor whiteColor];
    fiveReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiveReturnQty.backgroundColor = [UIColor whiteColor];
    fiveReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiveReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    fiveReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiveReturnQty.backgroundColor = [UIColor whiteColor];
    fiveReturnQty.delegate = self;
    //    [fiveHundredQty awakeFromNib];
    
    
    UIButton   *continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    // pay the cash button to continue the transaction ..
    [continueBtn addTarget:self action:@selector(checkReturnDenomStatus) forControlEvents:UIControlEventTouchUpInside];
    [continueBtn setTitle:@"Continue"    forState:UIControlStateNormal];
    continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    continueBtn.titleLabel.textColor = [UIColor whiteColor];
    continueBtn.backgroundColor = [UIColor grayColor];
    
    if (billingScrollView.hidden) {
        continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [continueBtn addTarget:self action:@selector(calreturnsItems) forControlEvents:UIControlEventTouchUpInside];
        [continueBtn setTitle:@"Continue"    forState:UIControlStateNormal];
        continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        continueBtn.titleLabel.textColor = [UIColor whiteColor];
        continueBtn.backgroundColor = [UIColor grayColor];
    }
    
    UIButton   *closeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [closeBtn addTarget:self action:@selector(backToReturnDenomination) forControlEvents:UIControlEventTouchUpInside];
    [closeBtn setTitle:@"Back"    forState:UIControlStateNormal];
    closeBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    closeBtn.titleLabel.textColor = [UIColor whiteColor];
    closeBtn.backgroundColor = [UIColor grayColor];
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
            
            returnDenomination.frame = CGRectMake(100, 20, 800, 650);
            label.frame = CGRectMake(0, 0, 800, 70);
            label.font = [UIFont systemFontOfSize:25];
            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
            tensReturnQty.frame = CGRectMake(540,280.0, 80, 25);
            tensReturnQty.font = [UIFont boldSystemFontOfSize:20];
            
            twentyReturnQty.frame = CGRectMake(540,240.0, 80, 25);
            twentyReturnQty.font = [UIFont boldSystemFontOfSize:20];
            
            fiftyReturnQty.frame = CGRectMake(540,205.0, 80, 25);
            fiftyReturnQty.font = [UIFont boldSystemFontOfSize:20];
            
            hundredReturnQty.frame = CGRectMake(540,170.0, 80, 25);
            hundredReturnQty.font = [UIFont boldSystemFontOfSize:20];
            fiveHundredReturnQty.frame = CGRectMake(540,130, 80, 25);
            fiveHundredReturnQty.font = [UIFont boldSystemFontOfSize:20];
            thousandReturnQty.frame = CGRectMake(540,90, 80, 25);
            thousandReturnQty.font =[UIFont boldSystemFontOfSize:20];
            
            oneReturnQty.frame = CGRectMake(540,390.0, 80, 25);
            oneReturnQty.font = [UIFont boldSystemFontOfSize:20];
            twoReturnQty.frame = CGRectMake(540,355.0, 80, 25);
            twoReturnQty.font = [UIFont boldSystemFontOfSize:20];
            fiveReturnQty.frame = CGRectMake(540,315.0, 80, 25);
            fiveReturnQty.font =[UIFont boldSystemFontOfSize:20];
            
            thousandReturnValue.frame = CGRectMake(670.0, 96.0, 200.0, 20);
            thousandReturnValue.font = [UIFont systemFontOfSize:17.0];
            fiveHundReturnValue.frame = CGRectMake(670.0, 133.0, 200.0, 20);
            fiveHundReturnValue.font = [UIFont systemFontOfSize:17.0];
            hundReturnValue.frame = CGRectMake(670.0, 170.0, 200.0, 20);
            hundReturnValue.font = [UIFont systemFontOfSize:17.0];
            fiftyReturnValue.frame = CGRectMake(670.0, 207.0, 200.0, 20);
            fiftyReturnValue.font = [UIFont systemFontOfSize:17.0];
            twentyReturnValue.frame = CGRectMake(670.0, 244.0, 200.0, 20);
            twentyReturnValue.font = [UIFont systemFontOfSize:17.0];
            tenReturnValue.frame = CGRectMake(670.0, 281.0, 200.0, 20);
            tenReturnValue.font = [UIFont systemFontOfSize:17.0];
            fiveReturnValue.frame = CGRectMake(670.0, 318.0, 200.0, 20);
            fiveReturnValue.font = [UIFont systemFontOfSize:17.0];
            twoReturnValue.frame = CGRectMake(670.0, 355.0, 200.0, 20);
            twoReturnValue.font = [UIFont systemFontOfSize:17.0];
            oneReturnValue.frame = CGRectMake(670.0, 392.0, 200.0, 20);
            oneReturnValue.font = [UIFont systemFontOfSize:17.0];
            
            totalAmt.frame = CGRectMake(450, 450, 250, 30);
            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
            returnAmtVal.frame = CGRectMake(690, 450, 150, 30);
            returnAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            paid.frame = CGRectMake(450, 480, 200, 30);
            paid.font = [UIFont boldSystemFontOfSize:20.0];
            
            returnedval.frame = CGRectMake(690, 480, 150, 30);
            returnedval.font = [UIFont boldSystemFontOfSize:20.0];
            
            
            continueBtn.frame = CGRectMake(100.0, 600, 250.0, 40);
            continueBtn.layer.cornerRadius = 10.0f;
            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
            closeBtn.frame = CGRectMake(450.0, 600, 250.0, 40);
            closeBtn.layer.cornerRadius = 10.0f;
            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
        }
    }
    tenReturnValue.text = @"0.00";
    twentyReturnValue.text = @"0.00";
    fiftyReturnValue.text = @"0.00";
    hundReturnValue.text = @"0.00";
    fiveHundReturnValue.text = @"0.00";
    thousandReturnValue.text = @"0.00";
    oneReturnValue.text = @"0.00";
    twoReturnValue.text = @"0.00";
    fiveReturnValue.text = @"0.00";
    returnDenomination.layer.borderColor = [UIColor whiteColor].CGColor;
    returnDenomination.layer.borderWidth = 1.0f;
    [returnDenomination addSubview:label];
    [returnDenomination addSubview:backbutton];
    [returnDenomination addSubview:tensReturnQty];
    [returnDenomination addSubview:twentyReturnQty];
    [returnDenomination addSubview:fiftyReturnQty];
    [returnDenomination addSubview:hundredReturnQty];
    [returnDenomination addSubview:fiveHundredReturnQty];
    [returnDenomination addSubview:thousandReturnQty];
    [returnDenomination addSubview:thousandReturnValue];
    [returnDenomination addSubview:fiveHundReturnValue];
    [returnDenomination addSubview:hundReturnValue];
    [returnDenomination addSubview:fiftyReturnValue];
    [returnDenomination addSubview:twentyReturnValue];
    [returnDenomination addSubview:tenReturnValue];
    [returnDenomination addSubview:fiveReturnValue];
    [returnDenomination addSubview:twoReturnValue];
    [returnDenomination addSubview:oneReturnValue];
    [returnDenomination addSubview:totalAmt];
    [returnDenomination addSubview:returnAmtVal];
    [returnDenomination addSubview:returnedval];
    [returnDenomination addSubview:paid];
    [returnDenomination addSubview:oneReturnQty];
    [returnDenomination addSubview:twoReturnQty];
    [returnDenomination addSubview:fiveReturnQty];
    //    [denomination addSubview:tenCoinQty];
    
    
    [returnDenomination addSubview:continueBtn];
    [returnDenomination addSubview:closeBtn];
    
    
    [self.view addSubview:returnDenomination];
    
    [UIView transitionFromView:denomination
                        toView:returnDenomination
                      duration:0.6
                       options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
                    completion:nil];
    
    
}



#pragma mark  - Start of Paying amount calculations


- (IBAction)removeRupee:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (oneCount != 0) {
        oneCount--;
    }
    if (oneCount>=0) {
        if ([denominationDic valueForKey:@"1"]) {
            oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
            oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
            
            if (oneReturnCount == 0) {
                [denominationDic removeObjectForKey:@"1"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:@"1"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addRupee:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        oneCount++;
        oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
        if (oneCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:@"1"];
            oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
        }
    }
    else {
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeTwo:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (twoCount != 0) {
        twoCount--;
    }
    if (twoCount>=0) {
        if ([denominationDic valueForKey:@"2"]) {
            twoQty.text = [NSString stringWithFormat:@"%d",twoCount];
            twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount * 2.00)];
            
            if (twoCount == 0) {
                [denominationDic removeObjectForKey:@"2"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",twoCount] forKey:@"2"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addTwoCoin:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        twoCount++;
        twoQty.text = [NSString stringWithFormat:@"%d",twoCount];
        if (twoCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",twoCount] forKey:@"2"];
            twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount * 2.00)];
        }
    }
    else {
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeFiveCoin:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (fiveCount != 0) {
        fiveCount--;
    }
    if (fiveCount>=0) {
        if ([denominationDic valueForKey:@"5"]) {
            fiveQty.text = [NSString stringWithFormat:@"%d",fiveCount];
            fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount * 5.00)];
            
            if (fiveCount == 0) {
                [denominationDic removeObjectForKey:@"5"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveCount] forKey:@"5"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addFiveCoin:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        fiveCount++;
        fiveQty.text = [NSString stringWithFormat:@"%d",fiveCount];
        if (fiveCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveCount] forKey:@"5"];
            fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount * 5.00)];
        }
    }
    else {
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeTenCoin:(UIButton *)sender {
    
    if (tenCoinCount != 0) {
        tenCoinCount--;
    }
    if (tenCoinCount>=0) {
        if ([denominationDic valueForKey:@"10"]) {
            tenCoinQty.text = [NSString stringWithFormat:@"%d",tenCoinCount];
            tenValue.text = [NSString stringWithFormat:@"%.2f",(tenCoinCount * 10.00)];
        }
        if (tenCoinCount == 0) {
            [denominationDic removeObjectForKey:@"10"];
        }
        else {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",tenCoinCount] forKey:@"10"];
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addTenCoin:(UIButton *)sender {
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        tenCoinCount++;
        tenCoinQty.text = [NSString stringWithFormat:@"%d",tenCoinCount];
        if (tenCoinCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",tenCoinCount] forKey:@"10"];
            tenValue.text = [NSString stringWithFormat:@"%.2f",(tenCoinCount * 10.00)];
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addHundred:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        hundredCount++;
        hundredQty.text = [NSString stringWithFormat:@"%d",hundredCount];
        if (hundredCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",hundredCount] forKey:@"100"];
            hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
        }
    }
    else {
        [self addLabel];
    }    [self updatePaidAmount];
}

- (IBAction)removeHundred:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (hundredCount != 0) {
        hundredCount--;
    }
    //    hundredCount--;
    if (hundredCount>=0) {
        if ([denominationDic valueForKey:@"100"]) {
            hundredQty.text = [NSString stringWithFormat:@"%d",hundredCount];
            hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
            
            if (hundredCount == 0) {
                [denominationDic removeObjectForKey:@"100"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",hundredCount] forKey:@"100"];
            }
        }
        
    }
    [self updatePaidAmount];
}

- (IBAction)addFiveHundred:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        fiveHundredCount++;
        fiveHundredQty.text = [NSString stringWithFormat:@"%d",fiveHundredCount];
        if (fiveHundredCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredCount] forKey:@"500"];
            fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
        }
        
    }
    else {
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeFiveHundred:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (fiveHundredCount != 0) {
        fiveHundredCount--;
    }
    if (fiveHundredCount>=0) {
        if ([denominationDic valueForKey:@"500"]) {
            fiveHundredQty.text = [NSString stringWithFormat:@"%d",fiveHundredCount];
            fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
            
            if (fiveHundredCount == 0) {
                [denominationDic removeObjectForKey:@"500"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredCount] forKey:@"500"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addThousand:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        thousandCount++;
        thousandQty.text = [NSString stringWithFormat:@"%d",thousandCount];
        if (thousandCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",thousandCount] forKey:@"2000"];
            thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
        }
    }
    else {
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeThousand:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (thousandCount != 0) {
        thousandCount--;
    }
    if (thousandCount>=0) {
        if ([denominationDic valueForKey:@"2000"]) {
            thousandQty.text = [NSString stringWithFormat:@"%d",thousandCount];
            thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
            if (thousandCount == 0) {
                [denominationDic removeObjectForKey:@"2000"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",thousandCount] forKey:@"2000"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addTens:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        tensCount++;
        tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
        if (tensCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",tensCount] forKey:@"10"];
            tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
        }
    }
    else {
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeTens:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (tensCount != 0) {
        tensCount--;
    }
    if (tensCount>=0) {
        if ([denominationDic valueForKey:@"10"]) {
            tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
            tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
            
            if (tensCount == 0) {
                [denominationDic removeObjectForKey:@"10"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",tensCount] forKey:@"10"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addTwenty:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        twentyCount++;
        twentyQty.text = [NSString stringWithFormat:@"%d",twentyCount];
        if (twentyCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",twentyCount] forKey:@"20"];
            twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
        }
    }
    else {
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeTwenty:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (twentyCount != 0) {
        twentyCount--;
    }
    if (twentyCount>=0) {
        if ([denominationDic valueForKey:@"20"]) {
            twentyQty.text = [NSString stringWithFormat:@"%d",twentyCount];
            twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
            if (twentyCount == 0) {
                [denominationDic removeObjectForKey:@"0"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",twentyCount] forKey:@"20"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addFifty:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        fiftyCount++;
        if (fiftyCount>=0) {
            
            fiftyQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
            if (fiftyCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiftyCount] forKey:@"50"];
                fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
            }
        }
        else {
            fiftyCount = 0;
            hundredQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
            
        }
    }
    else {
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeFifty:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (fiftyCount != 0) {
        fiftyCount--;
    }
    if (fiftyCount>=0) {
        if ([denominationDic valueForKey:@"50"]) {
            fiftyQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
            fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
            
            if (fiftyCount == 0) {
                [denominationDic removeObjectForKey:@"50"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiftyCount] forKey:@"50"];
            }
        }
    }
    [self updatePaidAmount];
}
#pragma mark  End of Paying amount calculations -


#pragma mark  - CAlculations for Returning Amount

- (IBAction)removeReturnone:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (oneReturnCount != 0) {
        oneReturnCount--;
    }
    if (oneReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"1"]) {
            oneReturnQty.text = [NSString stringWithFormat:@"%d",oneReturnCount];
            oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
            if (oneReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"1"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:@"1"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnone:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:1.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            oneReturnCount++;
            oneReturnQty.text = [NSString stringWithFormat:@"%d",oneReturnCount];
            if (oneReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:@"1"];
                oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnTwo:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (twoReturnCount != 0) {
        twoReturnCount--;
    }
    if (twoReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"2"]) {
            twoReturnQty.text = [NSString stringWithFormat:@"%d",twoReturnCount];
            twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
            if (twoReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"2"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twoReturnCount] forKey:@"2"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnTwo:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:2.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            twoReturnCount++;
            twoReturnQty.text = [NSString stringWithFormat:@"%d",twoReturnCount];
            if (twoReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twoReturnCount] forKey:@"2"];
                twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnFive:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (fiveReturnCount != 0) {
        fiveReturnCount--;
    }
    if (fiveReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"5"]) {
            fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
            fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
            if (fiveReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"5"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveReturnCount] forKey:@"5"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnFive:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:5.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            fiveReturnCount++;
            fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
            if (fiveReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveReturnCount] forKey:@"5"];
                fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
            }
        }
    }
    [self updateReturnAmount];
}


- (IBAction)addReturnHund:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:100.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            hundredReturnCount++;
            hundredReturnQty.text = [NSString stringWithFormat:@"%d",hundredReturnCount];
            if (hundredReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",hundredReturnCount] forKey:@"100"];
                hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
            }
            if ((billDueValue.text).floatValue-(paidVal.text).floatValue<0) {
                
                changeReturnVal.text = [NSString stringWithFormat:@"%.2f",(paidVal.text).floatValue-(billDueValue.text).floatValue];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnHund:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (hundredReturnCount != 0) {
        hundredReturnCount--;
    }
    if (hundredReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"100"]) {
            hundredReturnQty.text = [NSString stringWithFormat:@"%d",hundredReturnCount];
            hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
            if (hundredReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"100"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",hundredReturnCount] forKey:@"100"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnsFiveHund:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith: 500.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            fiveHundredReturnCount++;
            fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",fiveHundredReturnCount];
            if (fiveHundredReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredReturnCount] forKey:@"500"];
                fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnsFiveHund:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (fiveHundredReturnCount != 0) {
        fiveHundredReturnCount--;
    }
    if (fiveHundredReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"500"]) {
            fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",fiveHundredReturnCount];
            fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
            if (fiveHundredReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"500"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredReturnCount] forKey:@"500"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnthousand:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:2000.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            thousandReturnCount++;
            thousandReturnQty.text = [NSString stringWithFormat:@"%d",thousandReturnCount];
            if (thousandReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",thousandReturnCount] forKey:@"2000"];
                thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnThousand:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (thousandReturnCount != 0) {
        thousandReturnCount--;
    }
    if (thousandReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"2000"]) {
            thousandReturnQty.text = [NSString stringWithFormat:@"%d",thousandReturnCount];
            thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
            if (thousandReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"2000"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",thousandReturnCount] forKey:@"2000"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnTen:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:10.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            tensReturnCount++;
            tensReturnQty.text = [NSString stringWithFormat:@"%d",tensReturnCount];
            if (tensReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",tensReturnCount] forKey:@"10"];
                tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnTen:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (tensReturnCount != 0) {
        tensReturnCount--;
    }
    if (tensReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"10"]) {
            tensReturnQty.text = [NSString stringWithFormat:@"%d",tensReturnCount];
            tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
            if (tensReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"10"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",tensReturnCount] forKey:@"10"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnTwenty:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:20.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            twentyReturnCount++;
            twentyReturnQty.text = [NSString stringWithFormat:@"%d",twentyReturnCount];
            if (twentyReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twentyReturnCount] forKey:@"20"];
                twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnTwenty:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (twentyReturnCount != 0) {
        twentyReturnCount--;
    }
    if (twentyReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"20"]) {
            twentyReturnQty.text = [NSString stringWithFormat:@"%d",twentyReturnCount];
            twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
            if (twentyReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"20"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twentyReturnCount] forKey:@"20"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnFifty:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:50.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            fiftyReturnCount++;
            if (fiftyReturnCount>=0) {
                
                fiftyReturnQty.text = [NSString stringWithFormat:@"%d",fiftyReturnCount];
                if (fiftyReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiftyReturnCount] forKey:@"50"];
                    fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
                }
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnFifty:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (fiftyReturnCount != 0) {
        fiftyReturnCount--;
    }
    
    if (fiftyReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"50"]) {
            fiftyReturnQty.text = [NSString stringWithFormat:@"%d",fiftyReturnCount];
            fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
            if (fiftyReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"50"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiftyReturnCount] forKey:@"50"];
            }
        }
    }
    [self updateReturnAmount];
}

//this method is not in use.... written by Srinivasulu 25/11/2017....

-(void)coinsTextFieldChanged:(UITextField*)textField {
    @try {
        if (isReturnDenom) {
            if([self checkMaxReturnAmountWith:(textField.text).intValue * textField.tag isTextField:YES]){
                if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                    oneReturnCount = 0;
                    oneReturnCount = (textField.text).intValue;
                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                    if (oneReturnCount > 0) {
                        [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                        for (UITextField *text in returnDenomValCoinsTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in returnDenomCountCoinsArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                
                            }
                        }
                    }
                }
                else {
                    oneReturnCount = 0;
                    
                    oneReturnCount = (textField.text).intValue;
                    
                    long actualValue = 0;
                    
                    if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                        
                        NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                        actualValue = str.integerValue;
                    }
                    if (oneReturnCount < actualValue) {
                        fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                        if (oneReturnCount > 0) {
                            [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                        else {
                            if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                        }
                    }
                    
                    for (UITextField *text in returnDenomValCoinsTxtArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in returnDenomCountCoinsArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                            
                        }
                    }
                }
            }
            else {
                
                oneReturnCount = (textField.text).intValue;
                
                for (UITextField *text in returnDenomValCoinsTxtArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                        
                        
                    }
                }
                
                for (UILabel *text in returnDenomCountCoinsArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                        
                    }
                }
            }
            
            
            //                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
            //                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
        }
        
        
        else {
            if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
                oneCount = 0;
                oneCount = (textField.text).intValue;
                tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                if (oneCount > 0) {
                    [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                    
                }
                else{
                    tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                    if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                        [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                    }
                }
                
                for (UITextField *text in denomValCoinsTxtArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                        
                        
                    }
                }
                
                for (UILabel *text in denomCountCoinsArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                        
                    }
                }
                
            }
            else {
                oneCount = 0;
                
                oneCount = (textField.text).intValue;
                
                long actualValue = 0;
                
                if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                    
                    NSString *str = [denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                    
                    actualValue = str.integerValue;
                }
                
                //                int actualValue = [[denominationDic valueForKey:@"10"] intValue];
                if (oneCount < actualValue) {
                    tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                    if (oneCount > 0) {
                        [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                    }
                    else{
                        if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                    }
                    
                }
                //                else {
                //                    tensQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"10"] intValue]];
                //                    tenValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"10"] intValue] * 10.00)];
                //
                //                }
                
                for (UITextField *text in denomValCoinsTxtArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                        
                        
                    }
                }
                
                for (UILabel *text in denomCountCoinsArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                        
                    }
                }
                
            }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            
            paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
        }
    }
    else {
        if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
            if (currentOrientation == UIDeviceOrientationLandscapeRight || currentOrientation == UIDeviceOrientationLandscapeLeft) {
                
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                //                if (!isReturnDenom && (textField.tag == 5 || textField.tag == 2 || textField.tag == 1)) {
                //                    denominationView.frame = CGRectMake(denominationView.frame.origin.x, 60.0, denominationView.frame.size.width, denominationView.frame.size.height);
                //                }
                //                else if (textField.tag == 5 || textField.tag == 2 || textField.tag == 1) {
                //                    returnDenominationView.frame = CGRectMake(returnDenominationView.frame.origin.x, 60.0, returnDenominationView.frame.size.width, returnDenominationView.frame.size.height);
                //                }
                
            }
            
        }
        else {
            paymentView.frame = CGRectMake(20, 140, 730, 820.0);
        }
    }
    
    [self updatePaidAmount];
    [self updateReturnAmount];
}


#pragma -mark keyboard notification methods

/**
 * @description  called when keyboard is displayed
 * @date         04/06/2016
 * @method       keyboardWillShow
 * @author       Srinivasulu
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)keyboardWillShow {
    // Animate the current view out of the way
    @try {
        [self setViewMovedUp:YES];
        
    } @catch (NSException *exception) {
        NSLog(@"----exception in the stockReceiptView in textFieldDidChange:----");
        NSLog(@"-------exception while changing frame self.view---------%@",exception);
        
    }
}

/**
 * @description  called when keyboard is dismissed
 * @date         04/06/2016
 * @method       keyboardWillHide
 * @author       Srinivasulu
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)keyboardWillHide {
    @try {
        [self setViewMovedUp:NO];
        
    } @catch (NSException *exception) {
        NSLog(@"----exception in the stockReceiptView in textFieldDidChange:----");
        NSLog(@"-------exception while changing frame self.view---------%@",exception);
        
    }
}

/**
 * @description  method to move the view up/down whenever the keyboard is shown/dismissed
 * @date         04/06/2016
 * @method       setViewMovedUp
 * @author       Srinivasulu
 * @param        BOOL
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)setViewMovedUp:(BOOL)movedUp
{
    @try {
        
        [UIView beginAnimations:nil context:NULL];
        [UIView setAnimationDuration:0.3]; // if you want to slide up the view
        
        CGRect rect = self.view.frame;
        
        //    CGRect rect = scrollView.frame;
        
        if (movedUp)
        {
            // 1. move the view's origin up so that the text field that will be hidden come above the keyboard
            rect.origin.y = (rect.origin.y -(rect.origin.y + offSetViewTo));
        }
        else
        {
            // revert back to the normal state.
            if(offSetViewTo > 0 && self.view.frame.origin.y < 64)
                rect.origin.y +=  offSetViewTo + 64;// (-(rect.origin.y + offSetViewTo));
        }
        self.view.frame = rect;
        //   scrollView.frame = rect;
        
        [UIView commitAnimations];
        
        /* offSetViewTo = 80;
         [self keyboardWillShow];*/
        
    } @catch (NSException *exception) {
        NSLog(@"----exception in the stockReceiptView in textFieldDidChange:----");
        NSLog(@"-------exception while changing frame self.view---------%@",exception);
    } @finally {
        
    }
    
}

#pragma -mark end of methods which are not in used

#pragma -mark Start of methods used in the GiftVouchers, GiftCoupons && LoylityCard

/**
 * @description  in this we are handling multiple functionalitys....
 * @date
 * @method       giftContinue:--
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 02/01/2018....
 * @reason       added the comments, exception handling and constants....
 *
 * @verified By
 * @verified On
 *
 */

- (void) giftContinue:(UIButton *) sender {
    
    @try {
        
        [couponValue resignFirstResponder];
        [couponId resignFirstResponder];
        [couponQty resignFirstResponder];
        
        if (sender.tag == 0) {
            // added by roja on 28-09-2018...
            if(giftTypeArrayList == nil || giftTypeArrayList.count == 0){
                
                float y_axis = self.view.frame.size.height - 350;
                
                NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"unable_to_process_your_request", nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:350 contentHeight:45  isSoundRequired:YES timming:2.0 noOfLines:2];
            }
            else{
                // gift type selection
            //Play Audio for button touch....
            AudioServicesPlaySystemSound (soundFileObject);
            [giftTypeTableView reloadData];
            [giftView addSubview:giftTypeTableView];
            [giftTypeTableView setHidden:FALSE];
            
            PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
            
            UIView *editPriceView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 300, 200)];
            editPriceView.opaque = NO;
            editPriceView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            editPriceView.layer.borderColor = [UIColor lightGrayColor].CGColor;
            editPriceView.layer.borderWidth = 2.0f;
            [editPriceView setHidden:NO];
            giftTypeTableView.frame = CGRectMake(0.0, 0.0, editPriceView.frame.size.width, editPriceView.frame.size.height);
            [editPriceView addSubview:giftTypeTableView];
            customerInfoPopUp.view = editPriceView;
            
            if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
                customerInfoPopUp.preferredContentSize =  CGSizeMake(editPriceView.frame.size.width, editPriceView.frame.size.height);
                
                UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
                
                [popover presentPopoverFromRect:giftType.frame inView:loyaltyScrollView permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
                
                
                editPricePopOver= popover;
                
            }
            
            else {
                
                //                customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
                
                UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
                // popover.contentViewController.view.alpha = 0.0;
                popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
                [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
                editPricePopOver = popover;
                
            }
            
            }
        }
        else if(sender.tag == 30) {
            
            sender.tag = 0;
            [giftTypeTableView setHidden:TRUE];
            
        }
        else if (sender.tag == 1) {    // ok button
            
            // disable the backgroud view ..
            
            
            
            if ((giftNo.text).length > 0) {
                float y_position = self.view.frame.size.height - 150;
                y_position = giftView.frame.origin.y + giftView.frame.size.height - 200;
                
                
                if(((billDueValue.text.floatValue + [giftAmt.text floatValue]) < minimumValueText.text.floatValue) && [giftTypeString isEqualToString:@"coupon"]){
                    
                    NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"net_bill_amount_should_be_greater_than_minimum_bill_amount", nil)];
                    
                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 420)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:80  isSoundRequired:YES timming:2.0 noOfLines:2];
                    
                    return;
                }
                else if(enterOtpTxt.tag == 2 && generateOtpBtn.tag  == 2){
                    
                    NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_generate_the_otp", nil)];
                    
                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                    
                    return;
                }
                else  if((!(enterOtpTxt.text).length) && (enterOtpTxt.tag == 4 && generateOtpBtn.tag  == 4)){
                    
                    NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_otp", nil)];
                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                    return;
                }
                
                else if( (enterOtpTxt.tag == 4 && generateOtpBtn.tag  == 4) || (enterOtpTxt.tag == 2 && generateOtpBtn.tag  == 2)){
                    
                    [self validateUserEnteredOtp:nil];
                    //                    NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_valide_otp", nil)];
                    //
                    //                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                    return;
                }
                else{
                    generateOtpBtn.tag = 2;
                    enterOtpTxt.tag = 4;
                
                if ([giftTypeString isEqualToString:@"giftvoucher"]) {
                    giftNumber = [giftNo.text copy];
                    
                    if (!giftClaimStatus) {
                        
                        [self setSiblings:giftView enabled:TRUE];
                        
                        if (giftView.subviews){
                            for (UIView *subview in giftView.subviews) {
                                [subview removeFromSuperview];
                            }
                            
                        }
                        giftView.hidden = YES;
                       
                        if((giftAmt.text).intValue <= (billDueValue.text).intValue){
                            
                            
                            float giftAmount = 0.0f;
                            if ((giftVoucherTxt.text).floatValue > 0) {
                                giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                            }
                            else {
                                giftAmount = (giftAmt.text).floatValue;
                            }
                            giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",giftAmount];
                            
                            //                        subTotalBillValue.text = [NSString stringWithFormat:@"%.02f",[subTotalBillValue.text floatValue] - [giftAmt.text floatValue]];
                            //
                            //
                            //                        totalBillValue.text = [NSString stringWithFormat:@"%.02f", [totalBillValue.text floatValue] - [giftAmt.text floatValue]];
                            billDueValue.text = [NSString stringWithFormat:@"%.2f",(billDueValue.text).floatValue-(giftAmt.text).floatValue];
                            if ((billDueValue.text).floatValue<0)
                            {
                                
                                billDueValue.text = @"0.00";
                            }
                            
                            
                            //                    pastGiftValueToDeduct = [giftVoucherTxt.text intValue];
                            
                        }
                        else {
                            
                            float giftAmount = 0.0f;
                            if ((giftVoucherTxt.text).floatValue > 0) {
                                giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                            }
                            else {
                                giftAmount = (giftAmt.text).floatValue;
                            }
                            giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",giftAmount];
                            
                            
                            //                        totalBillValue.text = @"0.00";
                            //
                            //                        taxlblValue.text = @"0.00";
                            finalBillDue1 = @"0.0";
                            //                        subTotalBillValue.text = @"0.00";
                            billDueValue.text = @"0.00";
                            
                        }
                        
                        NSMutableDictionary *transDic = [NSMutableDictionary new];
                        [transDic setValue:@"giftvoucher" forKey:@"modeOfPayment"];
                        [transDic setValue:@"giftvoucher" forKey:@"cardType"];
                        [transDic setValue:giftNumber forKey:@"couponNumber"];
                        [transDic setValue:giftAmt.text forKey:@"paidAmount"];
                        [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                        [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                        [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                        
                        [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
                        [transDic setValue:@"0.0" forKey:CHANGE_RETURN];
                        [transDic setValue:giftAmt.text forKey:RECEIVED_AMOUNT];
                        
                        [paymentTransactionArray addObject:transDic];
                        [giftVoucherArr addObject:giftNo.text];
                        [giftVoucherArr addObject:giftID.text];
                        
                        giftNo.text = @"";
                        giftType.text = @"";
                        giftAmt.text = @"0.0";
                    }
                    else {
                        
                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Invalid gift voucher" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                    }
                }
                else if([giftTypeString isEqualToString:@"coupon"]) {
                    giftNumber = [giftNo.text copy];
                    
                    if (!giftClaimStatus) {
                        
                        [self setSiblings:giftView enabled:TRUE];
                        
                        if (giftView.subviews){
                            for (UIView *subview in giftView.subviews) {
                                [subview removeFromSuperview];
                            }
                            
                        }
                        
                        giftView.hidden = YES;
                        
                        if((giftAmt.text).intValue <= (billDueValue.text).intValue) {
                            
                            
                            
                            float giftAmount = 0.0f;
                            if ((giftVoucherTxt.text).floatValue > 0) {
                                giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                            }
                            else {
                                giftAmount = (giftAmt.text).floatValue;
                            }
                            giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",giftAmount];
                            
                            //                        subTotalBillValue.text = [NSString stringWithFormat:@"%.02f",[subTotalBillValue.text floatValue] - [giftAmt.text floatValue]];
                            billDueValue.text = [NSString stringWithFormat:@"%.2f",(billDueValue.text).floatValue-(giftAmt.text).floatValue];
                            if ((billDueValue.text).floatValue<0)
                            {
                                
                                billDueValue.text = @"0.00";
                            }
                            
                            
                            
                        }
                        else{
                            
                            
                            float giftAmount = 0.0f;
                            if ((giftVoucherTxt.text).floatValue > 0) {
                                giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                            }
                            else {
                                giftAmount = (giftAmt.text).floatValue;
                            }
                            giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",giftAmount];
                            billDueValue.text = @"0.00";
                            
                        }
                        
                        NSMutableDictionary *transDic = [NSMutableDictionary new];
                        [transDic setValue:@"coupon" forKey:@"modeOfPayment"];
                        [transDic setValue:@"coupon" forKey:@"cardType"];
                        [transDic setValue:giftNumber forKey:@"couponNumber"];
                        [transDic setValue:giftAmt.text forKey:@"paidAmount"];
                        [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                        [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                        [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                        
                        [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
                        [transDic setValue:@"0.0" forKey:CHANGE_RETURN];
                        [transDic setValue:giftAmt.text forKey:RECEIVED_AMOUNT];
                        
                        [paymentTransactionArray addObject:transDic];
                        [giftVoucherArr addObject:giftNo.text];
                        [giftVoucherArr addObject:giftID.text];
                        
                        giftNo.text = @"";
                        giftType.text = @"";
                        giftAmt.text = @"0.0";
                    }
                    else {
                        
                        UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid gift coupon" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [noGift show];
                    }
                }
                
                if([giftTypeString isEqualToString:@"loyaltycard"]) {
                    
                    //if ([giftNo.text length]>0) {
                    
                    //  if([giftAmt.text intValue] >= [recash.text intValue]) {
                    
                    // if ([recash.text floatValue]>0) {
                    if ((recash.text).floatValue>(giftAmt.text).floatValue) {
                        
                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Encashing amount should be less than the available amount" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                    }
                    
                    else if((recash.text).intValue <= (billDueValue.text).intValue){
                        
                        float giftAmount = 0.0f;
                        giftNumber = [giftID.text copy];
                        if ((giftAmt.text).floatValue == 0) {
                            if ((giftVoucherTxt.text).floatValue > 0) {
                                giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                            }
                            else {
                                giftAmount = (giftAmt.text).floatValue;
                            }
                            
                        }
                        else {
                            if ((giftVoucherTxt.text).floatValue > 0) {
                                giftAmount = (giftVoucherTxt.text).floatValue + (recash.text).floatValue;
                            }
                            else {
                                giftAmount = (recash.text).floatValue;
                            }
                            
                        }
                        giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",giftAmount];
                        
                        //                    subTotalBillValue.text = [NSString stringWithFormat:@"%.02f",[subTotalBillValue.text floatValue] - [recash.text floatValue]];
                        //                    totalBillValue.text = [NSString stringWithFormat:@"%.02f", [subTotalBillValue.text floatValue] - [recash.text floatValue]];
                        billDueValue.text = [NSString stringWithFormat:@"%.2f",(billDueValue.text).floatValue-(recash.text).floatValue];
                        
                        [self setSiblings:giftView enabled:TRUE];
                        
                        if (giftView.subviews){
                            for (UIView *subview in giftView.subviews) {
                                [subview removeFromSuperview];
                            }
                            
                        }
                        
                        giftView.hidden = YES;
                        
                        billDueValue.text = [NSString stringWithFormat:@"%.2f",(billDueValue.text).floatValue-(giftVoucherTxt.text).floatValue];
                        if ((billDueValue.text).floatValue<0)
                        {
                            
                            billDueValue.text = @"0.00";
                        }
                        
                        finalBillDue1 = [billDueValue.text copy];
                        payTxt2 = [[UITextField alloc] init];
                        payTxt2.text = [NSString stringWithFormat:@"%.2f",(giftVoucherTxt.text).floatValue];
                        type_Of_Payment = [@"loyaltycard" mutableCopy];
                        
                        
                        //                    [self continuePay1];
                        
                        giftNo.text = @"";
                        giftType.text = @"";
                        giftAmt.text = @"0.0";
                        // pastGiftValueToDeduct = [giftVoucherTxt.text intValue];
                        
                        //}
                        NSMutableDictionary *transDic = [NSMutableDictionary new];
                        [transDic setValue:@"Loyalty Points" forKey:@"modeOfPayment"];
                        [transDic setValue:@"Loyalty Points" forKey:@"cardType"];
                        [transDic setValue:giftNumber forKey:@"couponNumber"];
                        [transDic setValue:recash.text forKey:@"paidAmount"];
                        [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                        [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                        [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                        
                        [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
                        [transDic setValue:@"0.0" forKey:CHANGE_RETURN];
                        [transDic setValue:recash.text forKey:RECEIVED_AMOUNT];
                        
                        [paymentTransactionArray addObject:transDic];
                        
                    }
                    else{
                        UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Cash for Points exceeds the Total Amount." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [noGift show];
                    }
                }
            }
            }
            else {
                
                UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter  details" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [noGift show];
            }
            
            
        }
        else if (sender.tag == 2) {    // cancel button
            
            //Play Audio for button touch....
            AudioServicesPlaySystemSound (soundFileObject);
            
            // disable the backgroud view ..
            [self setSiblings:giftView enabled:TRUE];
            
            if (giftView.subviews){
                for (UIView *subview in giftView.subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            giftView.hidden = YES;
            mainsegmentIndex = 1;
            
        }
        
        else if (sender.tag == 5) {                     //select coupon type...
            
            AudioServicesPlaySystemSound (soundFileObject);
            
            [couponType reloadData];
            [couponView addSubview:couponType];
            [couponType setHidden:FALSE];
            
            
        }
        else if (sender.tag == 6) {          // add coupon details...
            
            AudioServicesPlaySystemSound (soundFileObject);
            
            NSDate *today = [NSDate date];
            NSDateFormatter *f = [[NSDateFormatter alloc] init];
            f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
            NSString* currentdate = [f stringFromDate:today];
            
            if (![billDueLbl.text isEqualToString: @"0.00"]) {
                
                if ( (couponValue.text).length!=0 && !((couponValue.text).floatValue==0)) {
                    
                    if (couponArr.count!=0 && (couponId.text).length!=0) {
                        
                        if ([self checkCouponId:couponId.text]) {
                            
                            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Coupon already used" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                            [alert show];
                            return;
                        }
                        else{
                            NSString *strCuponDestails = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",selectCouponType.text,@"#",couponId.text,@"#",couponValue.text,@"#",couponQty.text];
                            [couponArr addObject:strCuponDestails];
                        }
                        
                    }
                    
                    else{
                        NSString *strCuponDestails;
                        strCuponDestails = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",selectCouponType.text,@"#",couponId.text,@"#",couponValue.text,@"#",couponQty.text];
                        if ((couponQty.text).intValue == 0) {
                            couponQty.text = @"1";
                            strCuponDestails = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",selectCouponType.text,@"#",couponId.text,@"#",couponValue.text,@"#",couponQty.text];
                            
                        }
                        [couponArr addObject:strCuponDestails];
                    }
                    
                    changeReturnStr = @"0.00";
                    
                    if (((couponValue.text).floatValue*(couponQty.text).intValue)-(billDueLbl.text).floatValue>0) {
                        
                        changeReturnStr = [NSString stringWithFormat:@"%.2f",(((couponValue.text).floatValue*(couponQty.text).intValue)-(billDueLbl.text).floatValue)];
                    }
                    
                    NSMutableDictionary *transDic = [NSMutableDictionary new];
                    [transDic setValue:foodCouponTypeStr forKey:@"modeOfPayment"];
                    [transDic setValue:@"" forKey:@"cardType"];
                    [transDic setValue:couponId.text forKey:@"couponNumber"];
                    [transDic setValue:[NSString stringWithFormat:@"%.2f",(couponValue.text).floatValue*(couponQty.text).intValue] forKey:@"paidAmount"];
                    [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                    [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                    [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                    [transDic setValue:changeReturnStr forKey:CHANGE_RETURN];
                    [transDic setValue:[NSString stringWithFormat:@"%.2f",(couponValue.text).floatValue*(couponQty.text).intValue] forKey:RECEIVED_AMOUNT];
                    
                    [transDic setValue:currentdate forKey:@"dateTime"];
                    
                    [paymentTransactionArray addObject:transDic];
                    
                    [couponIdArr removeAllObjects];
                    [couponValArr removeAllObjects];
                    [couponTotalArr removeAllObjects];
                    
                    
                    [couponDeatails reloadData];
                    
                    float total_val = 0.00f;
                    for (int i=0; i<couponArr.count; i++) {
                        
                        total_val = total_val + ([couponArr[i] componentsSeparatedByString:@"#"][3].intValue * [couponArr[i] componentsSeparatedByString:@"#"][2].floatValue);
                    }
                    totalCoupValue.text = [NSString stringWithFormat:@"%.2f",total_val];
                    totalCoupBill.text = [NSString stringWithFormat:@"%.2f",(billDueValue.text).floatValue];
                    billDueLbl.text = [NSString stringWithFormat:@"%.2f",(billDueValue.text).floatValue-(totalCoupValue.text).floatValue];
                    if ((billDueLbl.text).intValue < 0) {
                        
                        billDueLbl.text = @"0.00";
                    }
                    
                    finalBillDue1 = [billDueLbl.text copy];
                    
                    couponId.text = @"";
                    couponValue.text = @"";
                    couponQty.text = @"";
                    
                }
                else {
                    
                    NSString *msg;
                    msg = @"Please provide Coupon Value";
                    
                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:msg delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
            }
            else {
                
                couponQty.text = @"";
                couponValue.text = @"";
                couponId.text = @"";
                
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Bill Value Reached" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            
        }
        else if (sender.tag == 21) {
            
            if ((billDueValue.text).floatValue < 0.0) {
                
                billDueValue.text  = @"0.00";
                totalCoupValue.text = @"0.00";
            }
            
            if ((totalCoupValue.text).intValue == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please Add atleast one coupon to continue Billing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            else {
                payTxt2.text = totalCoupValue.text;
                NSString *billDue1;
                billDue1 = [NSString stringWithFormat:@"%.2f",(billDueValue.text).floatValue - (totalCoupValue.text).floatValue];
                if (billDue1.intValue < 0) {
                    billDue1 = @"0.00";
                }
                finalBillDue1 = [billDue1 copy];
                [self populatePaymentView:@"Food Coupons"];
                // [self continuePay2];
            }
            
            
        }
        
        else {                           // search the coupon number in database
            
            
            
            //changed by Srinivasulu on 29/12/2017....
            if (![giftNo.text isEqualToString:@""] || ![giftID.text isEqualToString:@""] || !([customerPhoneValue.text isEqualToString:@""] || [customerPhoneValue.text isEqualToString:@"--"])){
                
                //this may not
                //            CheckWifi * wifi = [[CheckWifi alloc]init];
                //            BOOL status = [wifi checkWifi];
                //
                //            if (status) {
                //            }
                //            else{
                //
                //                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enable wifi or mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //                [alert show];
                //            }
                
                NSString * mobileStr = customerPhoneValue.text;
                
                //changed by Srinivasulu on 15/02/2018....
                
                if([customerPhoneValue.text isEqualToString:@"--"])
                    mobileStr = @"";
                
                
                NSString * serviceCallParamStr = giftNo.text;
                
                if((giftID.text).length >= 15)//16`
                    serviceCallParamStr = giftID.text;
                
                if (giftView.tag == 0) {
                    
                    @try {
                        HUD.labelText = NSLocalizedString(@"searching..", nil);
                        [HUD setHidden:NO];
                        
                        NSArray *loyaltyKeys = @[REQUEST_HEADER, LOCATIONS, VOUCHER_CODE];
                        NSArray *loyaltyObjects = @[[RequestHeader getRequestHeader], presentLocation, serviceCallParamStr];
                        
                        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                        
                        NSError * err_;
                        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
                        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                        
                        WebServiceController * webServiceController = [WebServiceController new];
                        webServiceController.giftVoucherServicesDelegate = self;
                        [webServiceController getGiftVoucherDetails:loyaltyString];
                    }
                    @catch (NSException *exception) {
                        
                        [HUD setHidden:YES];
                        NSLog(@"Exception %@",exception.name);
                    }
                    
                }
                else if (giftView.tag == 1){
                    
                    @try {
                        HUD.labelText = NSLocalizedString(@"searching..", nil);
                        [HUD setHidden:NO];
                        
                        NSArray *loyaltyKeys = @[REQUEST_HEADER, LOCATIONS, COUPON_CODE,  MOBILE_NUMBER];
                        
                        NSArray *loyaltyObjects = @[[RequestHeader getRequestHeader], presentLocation, serviceCallParamStr, mobileStr];
                        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                        
                        NSError * err_;
                        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
                        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                        
                        WebServiceController * webServiceController = [WebServiceController new];
                        webServiceController.giftCouponServicesDelegate = self;
                        [webServiceController getGiftCouponDetails:loyaltyString];
                    }
                    @catch (NSException *exception) {
                        
                        [HUD setHidden:YES];
                        NSLog(@"Exception %@",exception.name);
                    }
                }
                else {
                    
                    @try {
                        HUD.labelText = NSLocalizedString(@"searching..", nil);
                        [HUD setHidden:NO];
                        
                        NSArray * loyaltyKeys = @[REQUEST_HEADER, LOCATIONS, LOYALITY_CARD_NUMBER, MOBILE_NUMBER];
                        NSArray * loyaltyObjects = @[[RequestHeader getRequestHeader], presentLocation, serviceCallParamStr, mobileStr];
                        
                        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                        
                        NSError * err_;
                        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
                        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                        
                        WebServiceController * webServiceController = [WebServiceController new];
                        webServiceController.loyaltycardServicesDelegate = self;
                        [webServiceController getLoyaltycardDetails:loyaltyString];
                    }
                    @catch (NSException *exception) {
                        
                        [HUD setHidden:YES];
                        NSLog(@"Exception %@",exception.name);
                    }
                    
                }
                
            }
            
            //upto here on 29/12/2017....
            
        }
        
    } @catch (NSException *exception) {
        
    }
    
}



/**
 * @description  in this method we change the frames based on custom selected payment coupon type....
 * @date         03/01/2018
 * @method       formAndViewGiftView
 * @author       Srinivasulu . V
 * @param        UIButton
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)formAndViewGiftView:(UIButton *)sender{
    
    @try {
        
        if(loyaltyScrollView == nil){
            
            loyaltyScrollView = [[UIScrollView alloc] init];
            loyaltyScrollView.hidden = NO;
            loyaltyScrollView.backgroundColor = [UIColor clearColor];
            loyaltyScrollView.bounces = FALSE;
            loyaltyScrollView.scrollEnabled = YES;
            
            giftViewHeaderLbl = [[UILabel alloc] init];
            giftViewHeaderLbl.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:0.8];
            giftViewHeaderLbl.textColor = [UIColor blackColor];
            giftViewHeaderLbl.textAlignment = NSTextAlignmentCenter;
            giftViewHeaderLbl.numberOfLines = 2;
            
            backbutton = [[UIButton alloc] init] ;
            [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
            backbutton.tag = 22;
            UIImage * image = [UIImage imageNamed:@"delete.png"];
            [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
            
            giftTypeLbl = [[UILabel alloc] init];
            giftTypeLbl.backgroundColor = [UIColor clearColor];
            giftTypeLbl.textColor = [UIColor whiteColor];
            
            giftType.backgroundColor = [UIColor whiteColor];
            giftType.hidden = NO;
            
            
            cardNumber = [[UILabel alloc] init];
            cardNumber.backgroundColor = [UIColor clearColor];
            cardNumber.textColor = [UIColor whiteColor];
            
            cardID = [[UILabel alloc] init];
            cardID.backgroundColor = [UIColor clearColor];
            cardID.textColor = [UIColor whiteColor];
            
            giftIssuedOnLbl = [[UILabel alloc] init];
            giftIssuedOnLbl.backgroundColor = [UIColor clearColor];
            giftIssuedOnLbl.textColor = [UIColor whiteColor];
            
            giftIssuedToLbl = [[UILabel alloc] init];
            giftIssuedToLbl.backgroundColor = [UIColor clearColor];
            giftIssuedToLbl.textColor = [UIColor whiteColor];
            
            giftStatusLbl = [[UILabel alloc] init];
            giftStatusLbl.backgroundColor = [UIColor clearColor];
            giftStatusLbl.textColor = [UIColor whiteColor];
            
            giftValideFromLbl = [[UILabel alloc] init];
            giftValideFromLbl.backgroundColor = [UIColor clearColor];
            giftValideFromLbl.textColor = [UIColor whiteColor];
            
            giftValideToLbl = [[UILabel alloc] init];
            giftValideToLbl.backgroundColor = [UIColor clearColor];
            giftValideToLbl.textColor = [UIColor whiteColor];
            
            avai_points_label = [[UILabel alloc] init];
            avai_points_label.backgroundColor = [UIColor clearColor];
            avai_points_label.textColor = [UIColor whiteColor];
            
            amtLabel = [[UILabel alloc] init];
            amtLabel.backgroundColor = [UIColor clearColor];
            amtLabel.textColor = [UIColor whiteColor];
            
            recash_label = [[UILabel alloc] init];
            recash_label.backgroundColor = [UIColor clearColor];
            recash_label.textColor = [UIColor whiteColor];
            
            
            giftTypeBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
            buttonImageDD1 = [UIImage imageNamed:@"combo.png"];
            [giftTypeBtn setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
            [giftTypeBtn addTarget:self
                            action:@selector(giftContinue:) forControlEvents:UIControlEventTouchDown];
            giftTypeBtn.titleLabel.textColor = [UIColor blackColor];
            giftTypeBtn.tag = 0;
            
            
            giftNo = [[CustomTextField alloc] init];
            giftNo.placeholder = NSLocalizedString(@"5_digit_code", nil);
            [giftNo awakeFromNib];
            //giftNo.textColor = [UIColor blackColor];
            giftNo.borderStyle = UITextBorderStyleRoundedRect;
            giftNo.keyboardType = UIKeyboardTypeNumberPad;
            
            
            giftID = [[CustomTextField alloc] init];
            giftID.placeholder = NSLocalizedString(@"16_digit_code", nil);
            [giftID awakeFromNib];
            //        giftID.textColor = [UIColor blackColor];
            giftID.borderStyle = UITextBorderStyleRoundedRect;
            
            
            cardStatusTxt = [[CustomTextField alloc] init];
            cardStatusTxt.placeholder = NSLocalizedString(@"status", nil);
            [cardStatusTxt awakeFromNib];
            //        cardStatusTxt.textColor = [UIColor blackColor];
            cardStatusTxt.borderStyle = UITextBorderStyleRoundedRect;
            
            
            cardIssuedOnTxt = [[CustomTextField alloc] init];
            cardIssuedOnTxt.placeholder = NSLocalizedString(@"issued_on", nil);
            [cardIssuedOnTxt awakeFromNib];
            //        cardIssuedOnTxt.textColor = [UIColor blackColor];
            giftNo.borderStyle = UITextBorderStyleRoundedRect;
            
            
            cardIssuedToTxt = [[CustomTextField alloc] init];
            cardIssuedToTxt.placeholder = NSLocalizedString(@"issued_to", nil);
            [cardIssuedToTxt awakeFromNib];
            //        cardIssuedToTxt.textColor = [UIColor blackColor];
            
            giftValidFrom = [[CustomTextField alloc] init];
            giftValidFrom.placeholder = NSLocalizedString(@"valide_from", nil);
            [giftValidFrom awakeFromNib];
            //        giftValidFrom.textColor = [UIColor blackColor];
            giftValidFrom.borderStyle = UITextBorderStyleRoundedRect;
            
            
            giftValidTo = [[CustomTextField alloc] init];
            giftValidTo.placeholder = NSLocalizedString(@"valide_to", nil);
            [giftValidTo awakeFromNib];
            //        giftValidTo.textColor = [UIColor blackColor];
            giftValidTo.borderStyle = UITextBorderStyleRoundedRect;
            
            
            giftAmt.textColor = [UIColor whiteColor];
            giftAmt.hidden = NO;
            giftAmt.borderStyle = UITextBorderStyleRoundedRect;
            
            avai_points = [[CustomTextField alloc] init];
            avai_points.placeholder = NSLocalizedString(@"0.00", nil);
            [avai_points awakeFromNib];
            //        avai_points.textColor = [UIColor blackColor];
            avai_points.borderStyle = UITextBorderStyleRoundedRect;
            
            recash = [[CustomTextField alloc] init];
            recash.placeholder = NSLocalizedString(@"0.00", nil);
            [recash awakeFromNib];
            //        recash.textColor = [UIColor blackColor];
            recash.borderStyle = UITextBorderStyleRoundedRect;
            recash.delegate = self;
            recash.keyboardType = UIKeyboardTypeNumberPad;
            
            enterOtpTxt = [[CustomTextField alloc] init];
            enterOtpTxt.placeholder = NSLocalizedString(@"enter_otp", nil);
            [enterOtpTxt awakeFromNib];
            enterOtpTxt.backgroundColor = [UIColor blackColor];
            //        enterOtpTxt.textColor = [UIColor blackColor];
            enterOtpTxt.borderStyle = UITextBorderStyleRoundedRect;
            enterOtpTxt.delegate = self;
            enterOtpTxt.keyboardType = UIKeyboardTypeNumberPad;
            
            giftOkBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [giftOkBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
            giftOkBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            giftOkBtn.titleLabel.textColor = [UIColor whiteColor];
            giftOkBtn.backgroundColor = [UIColor grayColor];
            giftOkBtn.layer.cornerRadius = 5;
            
            giftCancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [giftCancelBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
            giftCancelBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            giftCancelBtn.titleLabel.textColor = [UIColor whiteColor];
            giftCancelBtn.backgroundColor = [UIColor grayColor];
            giftCancelBtn.layer.cornerRadius = 5;
            
            
            generateOtpBackGroundLbl = [[UILabel alloc] init];
            generateOtpBackGroundLbl.backgroundColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4];
            generateOtpBackGroundLbl.textAlignment = NSTextAlignmentCenter;
            generateOtpBackGroundLbl.numberOfLines = 2;
            generateOtpBackGroundLbl.layer.borderColor = [UIColor grayColor].CGColor;
            generateOtpBackGroundLbl.layer.borderWidth = .7;
            generateOtpBackGroundLbl.layer.masksToBounds = YES;
            
            generateOtpBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [generateOtpBtn addTarget:self action:@selector(generatedCustomerOtp) forControlEvents:UIControlEventTouchUpInside];
            generateOtpBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
            generateOtpBtn.backgroundColor = [UIColor grayColor];
            generateOtpBtn.layer.cornerRadius = 5;
            
            //Added By Bhargav.v on 16/08/2018
            fetchDataButton = [UIButton buttonWithType:UIButtonTypeCustom];
            [fetchDataButton addTarget:self action:@selector(fetchCustomerLoyaltyData) forControlEvents:UIControlEventTouchUpInside];
            fetchDataButton.titleLabel.textAlignment = NSTextAlignmentCenter;
            fetchDataButton.titleLabel.textColor = [UIColor whiteColor];
            fetchDataButton.backgroundColor = [UIColor grayColor];
            fetchDataButton.layer.cornerRadius = 5;
            
            billValueLabel = [[UILabel alloc] init];
            billValueLabel.backgroundColor = [UIColor clearColor];
            billValueLabel.textColor = [UIColor whiteColor];
            
            minimumValueText = [[CustomTextField alloc] init];
            minimumValueText.placeholder = NSLocalizedString(@"min_val", nil);
            [minimumValueText awakeFromNib];
            
            maximumValueText = [[CustomTextField alloc] init];
            maximumValueText.placeholder = NSLocalizedString(@"max_val", nil);
            [maximumValueText awakeFromNib];
        }
        else {
            
        }
        
        [giftView addSubview:giftViewHeaderLbl];
        [giftView addSubview:backbutton];
        
        
        [loyaltyScrollView addSubview:giftTypeLbl];
        [loyaltyScrollView addSubview:cardNumber];
        [loyaltyScrollView addSubview:cardID];
        [loyaltyScrollView addSubview:giftIssuedOnLbl];
        [loyaltyScrollView addSubview:giftIssuedToLbl];
        [loyaltyScrollView addSubview:giftStatusLbl];
        [loyaltyScrollView addSubview:giftValideFromLbl];
        [loyaltyScrollView addSubview:giftValideToLbl];
        [loyaltyScrollView addSubview:avai_points_label];
        [loyaltyScrollView addSubview:amtLabel];
        [loyaltyScrollView addSubview:recash_label];
        [loyaltyScrollView addSubview:billValueLabel];
        
        
        [loyaltyScrollView addSubview:giftType];
        [loyaltyScrollView addSubview:phoneNumberText];
        [loyaltyScrollView addSubview:giftTypeBtn];
        [loyaltyScrollView addSubview:giftNo];
        [loyaltyScrollView addSubview:giftID];
        [loyaltyScrollView addSubview:cardStatusTxt];
        [loyaltyScrollView addSubview:giftValidFrom];
        [loyaltyScrollView addSubview:giftValidTo];
        [loyaltyScrollView addSubview:cardIssuedOnTxt];
        [loyaltyScrollView addSubview:cardIssuedToTxt];
        [loyaltyScrollView addSubview:giftAmt];
        [loyaltyScrollView addSubview:avai_points];
        [loyaltyScrollView addSubview:recash];
        
        [loyaltyScrollView addSubview:minimumValueText];
        [loyaltyScrollView addSubview:maximumValueText];
        
        
        //added By Bhargav.v on 16/08/2018...
        
        [loyaltyScrollView addSubview:fetchDataButton];
        
        //added on 26/04/2018....
        
        cardIssuedOnTxt.userInteractionEnabled = NO;
        cardIssuedToTxt.userInteractionEnabled = NO;
        giftValidFrom.userInteractionEnabled = NO;
        giftValidTo.userInteractionEnabled = NO;
        cardStatusTxt.userInteractionEnabled = NO;
        giftAmt.userInteractionEnabled = NO;
        avai_points.userInteractionEnabled = NO;
        
        [loyaltyScrollView addSubview:generateOtpBackGroundLbl];
        [loyaltyScrollView addSubview:generateOtpBtn];
        [loyaltyScrollView addSubview:enterOtpTxt];
        
        [giftView addSubview:loyaltyScrollView];
        
        [giftView addSubview:giftOkBtn];
        [giftView addSubview:giftCancelBtn];
        
        [self.view addSubview:giftView];
        giftView.hidden = NO;
        
        @try {
            
            giftViewHeaderLbl.text = NSLocalizedString(@"gift_voucher_coupon_loyalty_card", nil);
            
            giftTypeLbl.text = NSLocalizedString(@"type", nil);
            cardNumber.text = NSLocalizedString(@"coupon_code", nil);
            cardID.text = NSLocalizedString(@"coupon_id", nil);
            giftIssuedOnLbl.text = NSLocalizedString(@"issued_on", nil);
            giftIssuedToLbl.text = NSLocalizedString(@"issued_to", nil);
            giftStatusLbl.text = NSLocalizedString(@"coupon_status", nil);
            giftValideFromLbl.text = NSLocalizedString(@"valide_from", nil);
            giftValideToLbl.text = NSLocalizedString(@"valide_to", nil);
            avai_points_label.text = NSLocalizedString(@"avail_points_", nil);
            amtLabel.text = NSLocalizedString(@"available_cash_", nil);
            recash_label.text = NSLocalizedString(@"encashing_amount", nil);
            
            // added by roja on 28-09-2018..
            //amtLabel.text = NSLocalizedString(@"cash_value", nil);
            
            
            giftType.placeholder = NSLocalizedString(@"select_type", nil);
            
            giftOkBtn.tag = 1;
            giftCancelBtn.tag = 2;
            [giftOkBtn setTitle:NSLocalizedString(@"OK", nil)    forState:UIControlStateNormal];
            [giftCancelBtn setTitle:NSLocalizedString(@"cancel", nil)    forState:UIControlStateNormal];
            [generateOtpBtn setTitle:NSLocalizedString(@"generate_otp", nil)    forState:UIControlStateNormal];
            
            [fetchDataButton setTitle:NSLocalizedString(@"fetch_data",nil) forState:UIControlStateNormal];
            billValueLabel.text = NSLocalizedString(@"bill_val",nil);
        }
        @catch(NSException * exception) {
            
        }
        
        giftNo.delegate = self;
        giftID.delegate = self;
        //added on 15/10/2018...
        if(![giftType.text length]){
            giftType.text = giftTypeArrayList[0];
            giftView.tag = 0;
            giftTypeBtn.tag = 0;
        }
        
        if([giftType.text length] > 0) {
            
            if([giftType.text isEqualToString:@"Loyalty Card"]){
                
                giftTypeString = @"loyaltycard";
                giftScannerBtn.tag = 2;
            }
            else  if([giftType.text isEqualToString:@"Coupon"]){
                
                giftTypeString = @"coupon";
                giftScannerBtn.tag = 1;
            }
            else{
                
                giftTypeString = @"giftvoucher";
                giftScannerBtn.tag = 3;
            }
            
            //giftType.text = [giftTypeArrayList objectAtIndex:indexPath.row];
            giftType.backgroundColor = [UIColor whiteColor];
            //giftView.tag = indexPath.row;
            [giftTypeTableView setHidden:YES];
            [editPricePopOver dismissPopoverAnimated:YES];
            giftTypeBtn.tag = 0;
            
        }
        
        [self showgiftView];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  in this method we change the frames based on custom selected payment coupon type....
 * @date
 * @method       showgiftView
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 03/01/2018....
 * @reason       added the comments, exception handling and constants....
 *
 * @verified By
 * @verified On
 *
 */

// gift type methods ..
- (void) showgiftView {
    
    @try {
        
        generateOtpBtn.tag = 2;
        enterOtpTxt.tag = 2;
        enterOtpTxt.text = @"";
        phoneNumberText.hidden = NO;
        //added by Srinivasulu on 17/10/2018....
        giftAmt.tag = 2;
        giftValidTo.text = @"";
        giftValidFrom.text = @"";
        amtLabel.text = NSLocalizedString(@"cash_value", nil);
        minimumValueText.userInteractionEnabled = NO;
        maximumValueText.userInteractionEnabled = NO;
        giftAmt.userInteractionEnabled = NO;
        
        if (giftView.tag == 0 ) {
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                }
                else {
                }
                
                giftValideToLbl.textAlignment = NSTextAlignmentLeft;
                giftViewHeaderLbl.frame = CGRectMake(0, 0, 680, 60);
                backbutton.frame = CGRectMake( giftViewHeaderLbl.frame.size.width - 70, 10.0, 45.0, 45.0);
                
                
                giftTypeLbl.frame = CGRectMake( 5, 10, (giftViewHeaderLbl.frame.size.width - 40)/4, 35);
                
                giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 20), 35);
                
                giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
                
                cardNumber.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftTypeLbl.frame.origin.y + giftTypeLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftNo.frame = CGRectMake( giftType.frame.origin.x, cardNumber.frame.origin.y,(giftType.frame.size.width)/3, giftType.frame.size.height);
                
                phoneNumberText.frame = CGRectMake( giftNo.frame.origin.x + giftNo.frame.size.width + 10, giftNo.frame.origin.y, (giftType.frame.size.width)/2.8,giftType.frame.size.height);
                
                //Added By Bhargav.v on 16/08/2018...
                fetchDataButton.frame = CGRectMake(phoneNumberText.frame.origin.x + phoneNumberText.frame.size.width + 15,phoneNumberText.frame.origin.y,120,35);
                //upto here..
                cardID.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardNumber.frame.origin.y + cardNumber.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftID.frame = CGRectMake( giftType.frame.origin.x, cardID.frame.origin.y, giftType.frame.size.width, giftType.frame.size.height);
                
                giftIssuedOnLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardID.frame.origin.y + cardID.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                cardIssuedOnTxt.frame = CGRectMake( giftType.frame.origin.x, giftIssuedOnLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftIssuedToLbl.textAlignment = NSTextAlignmentCenter;
                giftIssuedToLbl.frame = CGRectMake( cardIssuedOnTxt.frame.origin.x + cardIssuedOnTxt.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width , giftTypeLbl.frame.size.height);
                
                cardIssuedToTxt.frame = CGRectMake( giftID.frame.origin.x + giftID.frame.size.width - giftTypeLbl.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftStatusLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftIssuedOnLbl.frame.origin.y + giftIssuedOnLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                cardStatusTxt.frame = CGRectMake( giftType.frame.origin.x, giftStatusLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftValideFromLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftStatusLbl.frame.origin.y + giftStatusLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidFrom.frame = CGRectMake( giftType.frame.origin.x, giftValideFromLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftValideToLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftValideFromLbl.frame.origin.y + giftValideFromLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidTo.frame = CGRectMake( giftType.frame.origin.x, giftValideToLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                amtLabel.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftValideToLbl.frame.origin.y + giftValideToLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftAmt.frame = CGRectMake( giftType.frame.origin.x, amtLabel.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                
                loyaltyScrollView.frame = CGRectMake( 0, giftViewHeaderLbl.frame.origin.y + giftViewHeaderLbl.frame.size.height, giftViewHeaderLbl.frame.size.width, amtLabel.frame.origin.y + amtLabel.frame.size.height + 10);
                
                
                generateOtpBackGroundLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x + 35, cardStatusTxt.frame.origin.y, cardIssuedToTxt.frame.origin.x + cardIssuedToTxt.frame.size.width - (giftIssuedToLbl.frame.origin.x + 35), loyaltyScrollView.frame.size.height - (cardStatusTxt.frame.origin.y + 10));
                
                
                generateOtpBtn.frame = CGRectMake( generateOtpBackGroundLbl.frame.origin.x + ((generateOtpBackGroundLbl.frame.size.width - 140)/2), generateOtpBackGroundLbl.frame.origin.y + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), 140, 40);
                
                enterOtpTxt.frame = CGRectMake( generateOtpBtn.frame.origin.x, generateOtpBtn.frame.origin.y + generateOtpBtn.frame.size.height + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), generateOtpBtn.frame.size.width, generateOtpBtn.frame.size.height);
                
                
                
                giftOkBtn.frame = CGRectMake( giftTypeLbl.frame.origin.x, loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height, 120, 40);
                giftCancelBtn.frame = CGRectMake( giftOkBtn.frame.origin.x + giftOkBtn.frame.size.width + 20, giftOkBtn.frame.origin.y, giftOkBtn.frame.size.width, giftOkBtn.frame.size.height);
                
                giftView.frame = CGRectMake( (self.view.frame.size.width - giftViewHeaderLbl.frame.size.width)/2, (self.view.frame.size.height - (loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height))/2, giftViewHeaderLbl.frame.size.width, giftOkBtn.frame.origin.y + giftOkBtn.frame.size.height + 10);
                
                
                
                [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:giftView andSubViews:YES fontSize:20.0f cornerRadius:0];
                
            }
            else{
                
            }
            
            //            //phoneNumberText.hidden = YES;
            //            if (giftView.tag == 1) {
            //                cardNumber.text = @"Coupon Code";
            //                cardID.text = @"Coupon ID";
            //
            //
            //
            //
            //            }
            //else {
            
            cardNumber.text = @"Voucher Id";
            cardID.text = @"Voucher Code";
            
            //}
            [avai_points_label setHidden:TRUE];
            [avai_points        setHidden:TRUE];
            [recash_label       setHidden:TRUE];
            [recash              setHidden:TRUE];
            [giftScannerBtn     setHidden:TRUE];
            [billValueLabel     setHidden:TRUE];
            [minimumValueText   setHidden:TRUE];
            [maximumValueText   setHidden:TRUE];
            
            giftNo.text        = @"";
            giftValidFrom.text = @"";
            giftValidTo.text   = @"";
            giftAmt.text       = @"0.0";
//            savebtn.tag = 0;
            minimumValueText.text = @"";
            maximumValueText.text = @"";
            cardStatusTxt.text = @"";
            giftID.text = @"";
            phoneNumberText.text =@"";
        }
        
        else if (giftView.tag == 1){
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                }
                else {
                }
                
                giftValideToLbl.textAlignment = NSTextAlignmentCenter;
                
                giftViewHeaderLbl.frame = CGRectMake(0, 0, 680, 60);
                backbutton.frame = CGRectMake( giftViewHeaderLbl.frame.size.width - 70, 10.0, 45.0, 45.0);
                
                
                giftTypeLbl.frame = CGRectMake( 5, 10, (giftViewHeaderLbl.frame.size.width - 40)/4, 35);
                
                //Commented By Bhargav.v as per GUI specification on 16/08/2018...
                //giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 40), 35);
                
                giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 20), 35);
                
                giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
                
                cardNumber.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftTypeLbl.frame.origin.y + giftTypeLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                //Frames changed As per latest GUI Specification
                giftNo.frame = CGRectMake( giftType.frame.origin.x, cardNumber.frame.origin.y,(giftType.frame.size.width)/3, giftType.frame.size.height);
                
                phoneNumberText.frame = CGRectMake( giftNo.frame.origin.x + giftNo.frame.size.width + 10, giftNo.frame.origin.y, (giftType.frame.size.width)/2.8,giftType.frame.size.height);
                
                //Added By Bhargav.v on 16/08/2018...
                fetchDataButton.frame = CGRectMake(phoneNumberText.frame.origin.x + phoneNumberText.frame.size.width + 15,phoneNumberText.frame.origin.y,120,35);
                //upto here..
                
                cardID.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardNumber.frame.origin.y + cardNumber.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftID.frame = CGRectMake( giftType.frame.origin.x, cardID.frame.origin.y, giftType.frame.size.width, giftType.frame.size.height);
                
                giftIssuedOnLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardID.frame.origin.y + cardID.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                cardIssuedOnTxt.frame = CGRectMake( giftType.frame.origin.x, giftIssuedOnLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftIssuedToLbl.textAlignment = NSTextAlignmentCenter;
                giftIssuedToLbl.frame = CGRectMake( cardIssuedOnTxt.frame.origin.x + cardIssuedOnTxt.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width , giftTypeLbl.frame.size.height);
                
                cardIssuedToTxt.frame = CGRectMake( giftID.frame.origin.x + giftID.frame.size.width - giftTypeLbl.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                
                //giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftNo.frame.size.width - 20)/2, 35);
                
                //giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
                
                
                giftValideFromLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftIssuedOnLbl.frame.origin.y + giftIssuedOnLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidFrom.frame = CGRectMake( giftType.frame.origin.x, giftValideFromLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftValideToLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x, giftValideFromLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidTo.frame = CGRectMake( cardIssuedToTxt.frame.origin.x, giftValideToLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftStatusLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftValideToLbl.frame.origin.y + giftValideToLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                cardStatusTxt.frame = CGRectMake( giftType.frame.origin.x, giftStatusLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                //avai_points_label.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftStatusLbl.frame.origin.y + giftStatusLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                //avai_points.frame = CGRectMake( giftType.frame.origin.x, avai_points_label.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                amtLabel.frame = CGRectMake(giftTypeLbl.frame.origin.x, giftStatusLbl.frame.origin.y + giftStatusLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftAmt.frame = CGRectMake( giftType.frame.origin.x, amtLabel.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                
                billValueLabel.frame = CGRectMake( giftTypeLbl.frame.origin.x, amtLabel.frame.origin.y + amtLabel.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                minimumValueText.frame = CGRectMake( giftType.frame.origin.x, billValueLabel.frame.origin.y, (giftIssuedOnLbl.frame.size.width)/2.1, giftType.frame.size.height);
                
                maximumValueText.frame = CGRectMake( minimumValueText.frame.origin.x + minimumValueText.frame.size.width + 5, billValueLabel.frame.origin.y, (minimumValueText.frame.size.width), giftType.frame.size.height);
                
                //recash_label.frame = CGRectMake( giftTypeLbl.frame.origin.x, amtLabel.frame.origin.y + amtLabel.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                //recash.frame = CGRectMake( giftType.frame.origin.x, recash_label.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                loyaltyScrollView.frame = CGRectMake( 0, giftViewHeaderLbl.frame.origin.y + giftViewHeaderLbl.frame.size.height, giftViewHeaderLbl.frame.size.width, billValueLabel.frame.origin.y + billValueLabel.frame.size.height + 10);
                
                generateOtpBackGroundLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x + 35, cardStatusTxt.frame.origin.y, cardIssuedToTxt.frame.origin.x + cardIssuedToTxt.frame.size.width - (giftIssuedToLbl.frame.origin.x + 35), loyaltyScrollView.frame.size.height - (cardStatusTxt.frame.origin.y + 10));
                
                generateOtpBtn.frame = CGRectMake( generateOtpBackGroundLbl.frame.origin.x + ((generateOtpBackGroundLbl.frame.size.width - 140)/2), generateOtpBackGroundLbl.frame.origin.y + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), 140, 40);
                
                enterOtpTxt.frame = CGRectMake( generateOtpBtn.frame.origin.x, generateOtpBtn.frame.origin.y + generateOtpBtn.frame.size.height + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), generateOtpBtn.frame.size.width, generateOtpBtn.frame.size.height);
                
                giftOkBtn.frame = CGRectMake( giftTypeLbl.frame.origin.x, loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height, 120, 40);
                giftCancelBtn.frame = CGRectMake( giftOkBtn.frame.origin.x + giftOkBtn.frame.size.width + 20, giftOkBtn.frame.origin.y, giftOkBtn.frame.size.width, giftOkBtn.frame.size.height);
                
                giftView.frame = CGRectMake( (self.view.frame.size.width - giftViewHeaderLbl.frame.size.width)/2, (self.view.frame.size.height - (loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height))/2, giftViewHeaderLbl.frame.size.width, giftOkBtn.frame.origin.y + giftOkBtn.frame.size.height + 10);
                
                [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:giftView andSubViews:YES fontSize:20.0f cornerRadius:0];
                
            }
            
            cardNumber.text = @"Coupon Code";
            cardID.text = @"Coupon ID";
            
            [avai_points_label  setHidden:TRUE];
            [avai_points        setHidden:TRUE];
            [recash_label       setHidden:TRUE];
            [recash             setHidden:TRUE];
            [giftScannerBtn     setHidden:TRUE];
            
            [billValueLabel     setHidden:FALSE];
            [minimumValueText   setHidden:FALSE];
            [maximumValueText   setHidden:FALSE];
            
            
            giftNo.text        = @"";
            giftValidFrom.text = @"";
            giftValidTo.text   = @"";
            giftAmt.text       = @"0.0";
//            savebtn.tag = 0;
            minimumValueText.text = @"";
            maximumValueText.text = @"";
            cardStatusTxt.text = @"";
            giftID.text = @"";
            phoneNumberText.text =@"";
        }
        
        else {
            amtLabel.text = NSLocalizedString(@"available_cash_", nil);

            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOrientation == UIDeviceOrientationLandscapeLeft || currentOrientation == UIDeviceOrientationLandscapeRight) {
                }
                else {
                }
                
                giftValideToLbl.textAlignment = NSTextAlignmentCenter;
                
                giftViewHeaderLbl.frame = CGRectMake(0, 0, 680, 60);
                backbutton.frame = CGRectMake( giftViewHeaderLbl.frame.size.width - 70, 10.0, 45.0, 45.0);
                
                
                giftTypeLbl.frame = CGRectMake( 5, 10, (giftViewHeaderLbl.frame.size.width - 40)/4, 35);
                
                //Commented By Bhargav.v as per GUI specification on 16/08/2018...
                //giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 40), 35);
                
                giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 20), 35);
                
                giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
                
                cardNumber.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftTypeLbl.frame.origin.y + giftTypeLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                //Frames changed As per latest GUI Specification
                giftNo.frame = CGRectMake( giftType.frame.origin.x, cardNumber.frame.origin.y,(giftType.frame.size.width)/3, giftType.frame.size.height);
                
                phoneNumberText.frame = CGRectMake( giftNo.frame.origin.x + giftNo.frame.size.width + 10, giftNo.frame.origin.y, (giftType.frame.size.width)/2.8,giftType.frame.size.height);
                
                //Added By Bhargav.v on 16/08/2018...
                fetchDataButton.frame = CGRectMake(phoneNumberText.frame.origin.x + phoneNumberText.frame.size.width + 15,phoneNumberText.frame.origin.y,120,35);
                //upto here..
                
                cardID.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardNumber.frame.origin.y + cardNumber.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftID.frame = CGRectMake( giftType.frame.origin.x, cardID.frame.origin.y, giftType.frame.size.width, giftType.frame.size.height);
                
                giftIssuedOnLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardID.frame.origin.y + cardID.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                cardIssuedOnTxt.frame = CGRectMake( giftType.frame.origin.x, giftIssuedOnLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftIssuedToLbl.textAlignment = NSTextAlignmentCenter;
                giftIssuedToLbl.frame = CGRectMake( cardIssuedOnTxt.frame.origin.x + cardIssuedOnTxt.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width , giftTypeLbl.frame.size.height);
                
                cardIssuedToTxt.frame = CGRectMake( giftID.frame.origin.x + giftID.frame.size.width - giftTypeLbl.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                
                //giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftNo.frame.size.width - 20)/2, 35);
                
                //giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
                
                
                giftValideFromLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftIssuedOnLbl.frame.origin.y + giftIssuedOnLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidFrom.frame = CGRectMake( giftType.frame.origin.x, giftValideFromLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftValideToLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x, giftValideFromLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidTo.frame = CGRectMake( cardIssuedToTxt.frame.origin.x, giftValideToLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftStatusLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftValideToLbl.frame.origin.y + giftValideToLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                cardStatusTxt.frame = CGRectMake( giftType.frame.origin.x, giftStatusLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                avai_points_label.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftStatusLbl.frame.origin.y + giftStatusLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                avai_points.frame = CGRectMake( giftType.frame.origin.x, avai_points_label.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                amtLabel.frame = CGRectMake( giftTypeLbl.frame.origin.x, avai_points_label.frame.origin.y + avai_points_label.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftAmt.frame = CGRectMake( giftType.frame.origin.x, amtLabel.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                recash_label.frame = CGRectMake( giftTypeLbl.frame.origin.x, amtLabel.frame.origin.y + amtLabel.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                recash.frame = CGRectMake( giftType.frame.origin.x, recash_label.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                loyaltyScrollView.frame = CGRectMake( 0, giftViewHeaderLbl.frame.origin.y + giftViewHeaderLbl.frame.size.height, giftViewHeaderLbl.frame.size.width, recash_label.frame.origin.y + recash_label.frame.size.height + 10);
                
                
                generateOtpBackGroundLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x + 35, cardStatusTxt.frame.origin.y, cardIssuedToTxt.frame.origin.x + cardIssuedToTxt.frame.size.width - (giftIssuedToLbl.frame.origin.x + 35), loyaltyScrollView.frame.size.height - (cardStatusTxt.frame.origin.y + 10));
                
                
                generateOtpBtn.frame = CGRectMake( generateOtpBackGroundLbl.frame.origin.x + ((generateOtpBackGroundLbl.frame.size.width - 140)/2), generateOtpBackGroundLbl.frame.origin.y + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), 140, 40);
                
                enterOtpTxt.frame = CGRectMake( generateOtpBtn.frame.origin.x, generateOtpBtn.frame.origin.y + generateOtpBtn.frame.size.height + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), generateOtpBtn.frame.size.width, generateOtpBtn.frame.size.height);
                
                
                
                giftOkBtn.frame = CGRectMake( giftTypeLbl.frame.origin.x, loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height, 120, 40);
                giftCancelBtn.frame = CGRectMake( giftOkBtn.frame.origin.x + giftOkBtn.frame.size.width + 20, giftOkBtn.frame.origin.y, giftOkBtn.frame.size.width, giftOkBtn.frame.size.height);
                
                giftView.frame = CGRectMake( (self.view.frame.size.width - giftViewHeaderLbl.frame.size.width)/2, (self.view.frame.size.height - (loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height))/2, giftViewHeaderLbl.frame.size.width, giftOkBtn.frame.origin.y + giftOkBtn.frame.size.height + 10);
                
                [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:giftView andSubViews:YES fontSize:20.0f cornerRadius:0];
                
            }
            else{
                
            }
            
            cardNumber.text = @"Loyalty Id";
            cardID.text = @"Loyalty Code";
            
            
            [avai_points_label  setHidden:FALSE];
            [avai_points        setHidden:FALSE];
            [recash_label       setHidden:FALSE];
            [recash             setHidden:FALSE];
            
            [billValueLabel     setHidden:TRUE];
            [minimumValueText   setHidden:TRUE];
            [maximumValueText   setHidden:TRUE];
            
            //        [giftScannerBtn     setHidden:FALSE];
            
            phoneNumberText.hidden = NO;
            if ([customerPhoneValue.text length] != 0) {
                phoneNumberText.text = customerPhoneValue.text;
                [self textChange:nil];
            }
            
            giftNo.text        = @"";
            giftValidFrom.text = @"";
            giftValidTo.text   = @"";
            giftAmt.text       = @"0.0";
            avai_points.text   = @"";
            recash.text        = @"0.0";
            minimumValueText.text = @"";
            maximumValueText.text = @"";
            cardStatusTxt.text = @"";
            giftID.text = @"";
            phoneNumberText.text =@"";
        }
        
    } @catch (NSException *exception) {
        
    }
}
/**
 * @description  Instead of making a service call dynamically we are calling it manually by using a Button action..
 * @date         16/08/2018
 * @method       fetchCustomerLoyaltyData
 * @author       Bhargav.v
 * @param        -------
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)fetchCustomerLoyaltyData {
    
    @try {
        
        if(giftSearchBtn == nil) {
            giftSearchBtn = [[UIButton alloc] init];
            giftSearchBtn.tag = 3;
        }
        
        if ([giftNo.text length] == 0  && [giftID.text length] == 0 && [phoneNumberText.text length] == 0) {
            
            float y_axis = giftView.frame.origin.y + giftView.frame.size.height - 200;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"Please enter the Voucher/Coupon code before fetching",nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:400 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
            return;
        }
        
        else {
            
            if (giftNo.text.length >= 5) {
                [giftNo resignFirstResponder];
                giftID.text = nil;
                //[[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
                if (![giftVoucherArr containsObject:giftNo.text] && [giftID.text length] == 0) {
                    [self giftContinue:(UIButton *)giftSearchBtn];
                }
                else {
                    UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [validalert show];
                }
            }
            else  if (giftID.text.length == 16) {
                [giftID resignFirstResponder];
                giftNo.text = nil;
                //[[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
                if (![giftVoucherArr containsObject:giftID.text] && [giftNo.text length] == 0) {
                    [self giftContinue:(UIButton *)giftSearchBtn];
                }
                else {
                    UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [validalert show];
                }
            }
            
            else if (phoneNumberText.text.length == 10) {
                [phoneNumberText resignFirstResponder];
                giftNo.text = nil;
                //[[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
                if (![giftVoucherArr containsObject:giftID.text] && [giftNo.text length] == 0) {
                    [self giftContinue:(UIButton *)giftSearchBtn];
                }
                else {
                    UIAlertView * validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [validalert show];
                }
            }
        }
    }
    @catch(NSException * exception){
        
    }
    @finally {
        
    }
}
#pragma -mark service call used  in the GiftVouchers, GiftCoupons && LoylityCard

/**
 * @description  in this method we calling generate otp servives....
 * @date         29/12/2017....
 * @method       generatedCustomerOtp
 * @author
 * @param
 * @param        UIButton
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)generatedCustomerOtp{
    
    @try {
        
        //showing the hud....
        [HUD setHidden:NO];
        
        //text format of the HUD...
        [HUD setLabelText:NSLocalizedString(@"please_wait..", nil)];
        
        
        NSMutableDictionary * generateOtpDetailsDic = [[NSMutableDictionary alloc] init];
        
        //setting requestHeader....
        generateOtpDetailsDic[REQUEST_HEADER] = [RequestHeader getRequestHeader];
        
        //setting for phoneNumber....
        generateOtpDetailsDic[CUSTOMER_PHONE] = phoneNumberText.text;
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:generateOtpDetailsDic options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * webServiceController = [WebServiceController new];
        webServiceController.customerServiceDelegate = self;
        [webServiceController generateCustomerOtp:quoteRequestJsonString];
        
    } @catch (NSException * exception) {
        
        [HUD setHidden:YES];
        
        float y_axis = self.view.frame.size.height - 120;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"unable_to_process_your_request", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
        
        NSLog(@"----exception in Service Call---%@",exception);
    }
}

/**
 * @description  in this method we calling validate otp servives....
 * @date         29/12/2017....
 * @method       valideCustomerOtp
 * @author
 * @param
 * @param        UIButton
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)valideCustomerOtp{
    
    @try {
        
        //showing the hud....
        [HUD setHidden:NO];
        
        //text format of the HUD...
        [HUD setLabelText:NSLocalizedString(@"please_wait..", nil)];
        
        
        NSMutableDictionary  * valideOtpDetailsDic = [[NSMutableDictionary alloc] init];
        
        //setting requestHeader....
        valideOtpDetailsDic[REQUEST_HEADER] = [RequestHeader getRequestHeader];
        
        //                private String otpCode;
        //                private String phone=null;
        //setting for phoneNumber....
        valideOtpDetailsDic[CUSTOMER_PHONE] = phoneNumberText.text;
        valideOtpDetailsDic[OTP_CODE] = enterOtpTxt.text;
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:valideOtpDetailsDic options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * webServiceController = [WebServiceController new];
        webServiceController.customerServiceDelegate = self;
        [webServiceController generateCustomerOtp:quoteRequestJsonString];
        
    } @catch (NSException * exception) {
        
        [HUD setHidden:YES];
        
        float y_axis = self.view.frame.size.height - 120;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"unable_to_process_your_request", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
        
        NSLog(@"----exception in Service Call---%@",exception);
    }
}

/**
 * @description  in this method we change the frames based on custom selected payment coupon type....
 * @date         29/12/2017....
 * @method       showOtpView:--
 * @author       Srinivasulu
 * @param
 * @param        UIButton
 * @param
 *
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)validateUserEnteredOtp:(UIButton *)sender{
    
    @try {
        
        [self valideCustomerOtp];
        
    } @catch (NSException *exception) {
        
    }
}
#pragma -mark start service call response handling  in the GiftVouchers, GiftCoupons && LoylityCard

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       generateOtpForCustomerSuccessReponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSDictionary
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)generateOtpForCustomerSuccessReponse:(NSDictionary *)sucessDictionary{
    @try {
        
        generateOtpBtn.tag = 4;
        enterOtpTxt.tag = 4;
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       generateOtpForCustomerErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)generateOtpForCustomerErrorResponse:(NSString *)error{
    @try {
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       validateOtpForCustomerSuccessResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSDictionary
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)validateOtpForCustomerSuccessResponse:(NSDictionary *)sucessDictionary{
    @try {
        
        generateOtpBtn.tag = 2;
        enterOtpTxt.tag = 4;
        
        // added by roja on 28-09-2018..
        generateOtpBtn.userInteractionEnabled = YES;
        enterOtpTxt.userInteractionEnabled = YES;
        generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
        UIButton * btn = [[UIButton alloc] init];
        btn.tag = 1;
        [self giftContinue:btn];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       validateForCustomerErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)validateForCustomerErrorResponse:(NSString *)error{
    @try {
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       validateForCustomerErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getGiftVoucherDetailsSuccessReponse:(NSDictionary *)sucessDictionary{
    
    @try {
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:sucessDictionary options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        [self getVoucherDetailsHandler:quoteRequestJsonString];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  in this method will be executed when error resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       getGiftVoucherDetailsErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getGiftVoucherDetailsErrorResponse:(NSString*)error{
    
    @try {
        
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       getGiftCouponDetailsSuccessReponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getGiftCouponDetailsSuccessReponse:(NSDictionary*)sucessDictionary{
    
    @try {
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:sucessDictionary options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        [self getCouponDetailsHandler:quoteRequestJsonString];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  in this method will be executed when error resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       getGiftCouponDetailsErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getGiftCouponDetailsErrorResponse:(NSString*)error{
    
    @try {
        
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}

/**
 * @description  in this method will be executed when success resposne is received from service for loyality service call....
 * @date         29/12/2017....
 * @method       getLoyaltycardDetailsSuccessReponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getLoyaltycardDetailsSuccessReponse:(NSDictionary*)sucessDictionary{
    
    @try {
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:sucessDictionary options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        [self getLoyalcardDetailsHandler:quoteRequestJsonString];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  in this method will be executed when error resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       getLoyaltycardDetailsErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getLoyaltycardDetailsErrorResponse:(NSString*)error{
    
    @try {
        
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}


/**
 * @description  in this method success response for giftvouchers service call is handling....
 * @method       getVoucherDetailsHandler:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 03/01/2018....
 * @reason       added the comments, exception handling and constants....
 *
 * @verified By
 * @verified On
 *
 */

- (void) getVoucherDetailsHandler: (NSString *) value {
    
    
    @try {
        [HUD setHidden:YES];
        
        // Handle errors
        if([value isKindOfClass:[NSError class]]) {
            NSLog(@"%@", value);
            return;
        }
        
        
        
        // Do something with the NSString* result
        NSString* result = (NSString*)value;
        NSError *e;
        NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [result dataUsingEncoding:NSUTF8StringEncoding]
                                                             options: NSJSONReadingMutableContainers
                                                               error: &e];
        if ([[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_CODE] isEqualToString:@"0"]) {
            
            giftClaimStatus = [[JSON valueForKey:CLAIM_STATUS] boolValue];
            if (!giftClaimStatus) {
                if (((NSArray *)[JSON valueForKey:GIFT_VOUCHER_DETAILS]).count>0) {
                    
                    NSDictionary *details = [JSON valueForKey:GIFT_VOUCHER_DETAILS];
                    
                    giftValidFrom.text = [[details valueForKey:CREATED_ON] componentsSeparatedByString:@" "][0];
                    giftValidTo.text   = [[details valueForKey:EXPIRYDATE] componentsSeparatedByString:@" "][0];
                    giftAmt.text       = [[details valueForKey:UNIT_CASH_VALUE] stringValue];
                    
                    cardStatusTxt.text = [details valueForKey:STATUS];
                    
                    enterOtpTxt.tag = 2;
                    generateOtpBtn.tag  = 2;
                    generateOtpBtn.userInteractionEnabled =  YES;
                    enterOtpTxt.userInteractionEnabled = YES;
                    generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
                    
                    
                    if(![[self checkGivenValueIsNullOrNil:[details valueForKey:OTP_REQUIREMENT] defaultReturn:@"0"] boolValue]){
                        
                        enterOtpTxt.tag = 4;
                        generateOtpBtn.tag  = 2;
                        generateOtpBtn.userInteractionEnabled =  NO;
                        enterOtpTxt.userInteractionEnabled = NO;
                        generateOtpBtn.titleLabel.textColor = [UIColor lightGrayColor];
                    }
                    
                    
                }
                if (((NSArray *)[JSON valueForKey:GIFT_VOUCHERS]).count>0) {
                    NSDictionary *details = [JSON valueForKey:GIFT_VOUCHERS];
                    giftID.text = [details valueForKey:VOUCHER_CODE];
                    if (!([[details valueForKey:VOUCHER_ID] isKindOfClass:[NSNull class]])) {
                        giftNo.text = [details valueForKey:VOUCHER_ID];
                    }
                }
                
            }
            else {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher Already Used" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
        }
        else {
            
            UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Invalid" message:[NSString stringWithFormat:@"%@",[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE]]  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [validalert show];
            
        }
        
    } @catch (NSException *exception) {
        
        NSLog(@"----exception in BillingHome page -- in getCouponDeatilsHandler---");
        NSLog(@"----%@",exception);
        
    } @finally {
        //added by Srinivasulu on 29/12/2017....
        //upto here on 29/12/2017....
    }
}


/**
 * @description  in this method success response for giftvouchers service call is handling....
 * @method       getCouponDetailsHandler:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 29/12/2017....
 * @reason       added the comments, exception handling and constants....
 *
 * @verified By
 * @verified On
 *
 */

-(void)getCouponDetailsHandler:(NSString *)response {
    
    
    //added by Srinivasulu on 19/01/2017....added exception handling....
    @try {
        [HUD setHidden:YES];
        
        
        // Handle errors
        if([response isKindOfClass:[NSError class]]) {
            NSLog(@"%@", response);
            return;
        }
        
        
        
        // Do something with the NSString* result
        NSString* result = (NSString*)response;
        NSError *e;
        NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [result dataUsingEncoding:NSUTF8StringEncoding]
                                                             options: NSJSONReadingMutableContainers
                                                               error: &e];
        if ([[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_CODE] isEqualToString:@"0"]) {
            giftClaimStatus = [[JSON valueForKey:CLAIM_STATUS] boolValue];
            
            if (!giftClaimStatus) {
                if (((NSArray *)[JSON valueForKey:COUPON_DETAILS]).count>0) {
                    
                    
                    NSDictionary *couponDetails = [JSON valueForKey:COUPON];
                    giftID.text = [couponDetails valueForKey:COUPON_CODE];
                    giftNo.text = [couponDetails valueForKey:COUPON_ID];
                    
                    
                    NSDictionary *details = [JSON valueForKey:COUPON_DETAILS];
                    
                    giftValidFrom.text = [[details valueForKey:CREATED_ON] componentsSeparatedByString:@" "][0];
                    giftValidTo.text   = [[details valueForKey:EXPIRYDATE] componentsSeparatedByString:@" "][0];
                    
                    giftAmt.text  = [[details valueForKey:UNIT_CASH_VALUE] stringValue];
                    
                    
                    
                    //added by Srinivasulu on 17/10/2018....
                    couponUnitCashPercentageValue = [[self checkGivenValueIsNullOrNil:[details valueForKey:UNIT_CASH_VALUE] defaultReturn:@"0"] floatValue];

                    
                    //added by roja on 28-09-2018...
                    minimumValueText.text = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[details valueForKey:MIN_SALE_AMOUNT] defaultReturn:@"0"] floatValue]];
                    
                    maximumValueText.text = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[details valueForKey:MAX_DISCOUNT_AMOUNT] defaultReturn:@"0"] floatValue]];
                    cardStatusTxt.text = [details valueForKey:STATUS];
                    
                    
                    
                    giftAmt.tag = 2;
                    if([[details valueForKey:DISCOUNT_TYPE] caseInsensitiveCompare:Percentage] == NSOrderedSame){
                        giftAmt.tag = 4;

                        if(([billDueValue.text floatValue] * couponUnitCashPercentageValue / 100) <= [maximumValueText.text  floatValue]){
                            
                            giftAmt.text =[NSString stringWithFormat:@"%.2f",([billDueValue.text floatValue] * couponUnitCashPercentageValue / 100)];
                        }
                        else{
                            
                            giftAmt.text = maximumValueText.text;
                        }
                    }
                    //upto here on 17/10/2018....
                    
                   
                    enterOtpTxt.tag = 2;
                    generateOtpBtn.tag  = 2;
                    generateOtpBtn.userInteractionEnabled =  YES;
                    enterOtpTxt.userInteractionEnabled = YES;
                    generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
                    
                    
                    if(![[self checkGivenValueIsNullOrNil:[details valueForKey:OTP_REQUIREMENT] defaultReturn:@"0"] boolValue]){
                        
                        enterOtpTxt.tag = 4;
                        generateOtpBtn.tag  = 2;
                        generateOtpBtn.userInteractionEnabled =  NO;
                        enterOtpTxt.userInteractionEnabled = NO;
                        generateOtpBtn.titleLabel.textColor = [UIColor lightGrayColor];
                    }
                    
                }
                if (((NSArray *)[JSON valueForKey:GIFT_COUPONS]).count>0) {
                    NSDictionary *details = [JSON valueForKey:GIFT_COUPONS];
                    giftID.text = [details valueForKey:COUPON_CODE];
                    if (!([[details valueForKey:COUPON_ID] isKindOfClass:[NSNull class]])) {
                        giftNo.text = [details valueForKey:COUPON_ID];
                    }
                }
                
                //added by Roja on 17/10/2018....
                if( [[JSON allKeys] containsObject:CUSTOMER_GIFT_COUPONS_LIST] && !([[JSON valueForKey:CUSTOMER_GIFT_COUPONS_LIST] isKindOfClass:[NSNull class]])){
                    
                    for(NSDictionary *customerGiftCouponsDic in [JSON valueForKey:CUSTOMER_GIFT_COUPONS_LIST]){
                        
                        phoneNumberText.text = [NSString stringWithFormat:@"%@",[self checkGivenValueIsNullOrNil:[customerGiftCouponsDic valueForKey:CUSTOMER_MOBILE] defaultReturn:@""]];
                        
                        
                        cardIssuedToTxt.text = [NSString stringWithFormat:@"%@",[self checkGivenValueIsNullOrNil:[customerGiftCouponsDic valueForKey:ISSUED_TO] defaultReturn:@""]];
                        
                        cardIssuedOnTxt.text = [NSString stringWithFormat:@"%@",[self checkGivenValueIsNullOrNil:[customerGiftCouponsDic[ISSUE_DATE] componentsSeparatedByString:@" "][0] defaultReturn:@""]];
                        
                        break;
                    }
                }
                //upto here on 17/10/2018....
            }
            else {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Coupon Already Used" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
            
        }
        else {
            
            if ((giftValidFrom.text).length == 0 && (giftValidTo.text).length == 0) {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Invalid" message:[NSString stringWithFormat:@"%@",[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE]]  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
        }
    } @catch (NSException *exception) {
        NSLog(@"----exception in BillingHome page -- in getCouponDeatilsHandler---");
        NSLog(@"----%@",exception);
        
    } @finally {
        //added by Srinivasulu on 19/01/2017....
        //upto here on 19/01/2017....
    }
    
    
    
}

/**
 * @description  in this method success response for giftvouchers service call is handling....
 * @method       getCouponDetailsHandler:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 29/12/2017....
 * @reason       added the comments, exception handling and constants....
 *
 * @verified By
 * @verified On
 *
 */
- (void) getLoyalcardDetailsHandler: (NSString *) value {
    
    
    //added by Srinivasulu on 19/01/2017........added exception handling....   
    @try {
        
        [HUD setHidden:YES];
        
        // Handle errors
        if([value isKindOfClass:[NSError class]]) {
            NSLog(@"%@", value);
            return;
        }
        
        // Handle faults
        //    if([value isKindOfClass:[SoapFault class]]) {
        //        NSLog(@"%@", value);
        //
        //        UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Loyalty Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [validalert show];
        //        [validalert release];
        //        return;
        //    }
        
        
        // Do something with the NSString* result
        NSString* result = (NSString*)value;
        NSError *e;
        NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [result dataUsingEncoding:NSUTF8StringEncoding]
                                                             options: NSJSONReadingMutableContainers
                                                               error: &e];
        //NSArray *list = [result componentsSeparatedByString:@"#"];
        //[list removeObjectAtIndex:0];
        
        [HUD setHidden:YES];
        
        
        if ([[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_CODE] intValue]==0) {
            
            NSDictionary *loyaltyDic = [JSON valueForKey:CUSTOMER_LOYALTY_CARDS];
            
            if (![[NSString stringWithFormat:@"%@",loyaltyDic[LOYALITY_CARD_NUMBER]] isEqualToString:@"<null>"]) {
                
                //giftNo.text = nil;
                
                giftValidFrom.text = [NSString stringWithFormat:@"%@",[loyaltyDic[VALID_FROM] componentsSeparatedByString:@" "][0]];
                giftValidTo.text   = [NSString stringWithFormat:@"%@",[loyaltyDic[VALID_TO] componentsSeparatedByString:@" "][0]];
                if ([[NSString stringWithFormat:@"%@",loyaltyDic[cash]] isEqualToString:@"<null>"]) {
                    
                    giftAmt.text = @"0.0";
                    
                }
                else {
                    giftAmt.text = [NSString stringWithFormat:@"%@",loyaltyDic[cash]];
                    
                }
                //   giftAmt.text       = [NSString stringWithFormat:@"%.2f",[[JSON objectForKey:@"cash"] floatValue]];
                
                if ([[NSString stringWithFormat:@"%@",loyaltyDic[POINTS_REMAINING]] isEqualToString:@"<null>"]) {
                    
                    avai_points.text = @"0.0";
                    
                }
                else {
                    avai_points.text = [NSString stringWithFormat:@"%@",loyaltyDic[POINTS_REMAINING]];
                    
                }
                
                giftNo.text = [loyaltyDic valueForKey:CARD_ID];
                giftID.text = [loyaltyDic valueForKey:LOYALITY_CARD_NUMBER];
                
                //commented by Srinivasulu on 28/12/2017....
                
                //                [[NSNotificationCenter defaultCenter] removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
                phoneNumberText.text = [self checkGivenValueIsNullOrNil:[loyaltyDic valueForKey:PHONE_NUM] defaultReturn:@""];
                //                [self generatedCustomerOtp];
                
                //upto here on 28/12/2017....
                
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
                
                generateOtpBtn.tag = 2;
                enterOtpTxt.tag = 2;
                
                
                generateOtpBtn.tag = 2;
                enterOtpTxt.tag = 4;
                
                enterOtpTxt.tag = 2;
                generateOtpBtn.tag  = 2;
                generateOtpBtn.userInteractionEnabled =  YES;
                enterOtpTxt.userInteractionEnabled = YES;
                generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
                
                if(![[self checkGivenValueIsNullOrNil:[loyaltyDic valueForKey:OTP_REQUIREMENT] defaultReturn:@"0"] boolValue]){
                    
                    enterOtpTxt.tag = 4;
                    generateOtpBtn.tag  = 2;
                    generateOtpBtn.userInteractionEnabled =  NO;
                    enterOtpTxt.userInteractionEnabled = NO;
                    generateOtpBtn.titleLabel.textColor = [UIColor lightGrayColor];
                }
                
            }
            else {
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
                
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Loyalty Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
                giftValidFrom.text = @"";
                giftValidTo.text = @"";
                giftAmt.text = @"";
                avai_points.text = @"";
            }
            
        }
        else {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
        }
        
    } @catch (NSException *exception) {
        NSLog(@"----exception in BillingHome page -- in getLoyalcardDetailsHandler---");
        NSLog(@"----%@",exception);
    } @finally {
        //added by Srinivasulu on 19/01/2017....
        //upto here on 19/01/2017....
        
    }
    
}

-(id) imageFromImage:(UIImage*)image  imageBackGroundColor:(UIColor*)backGroundColor  string:(NSString*)string  color:(UIColor*)color  font:(int)fontSize   width:(float)labelWidth height:(float)labelHeight fontType:(NSString *)fontType imageWidth:(float)imageWidth imageHeight:(float)imageHeight{
    
    @try {
        UIImageView  *returnView =  [[UIImageView alloc] init];
        
        UIImageView  *imageView =  [[UIImageView alloc] init];
        
        UIGraphicsBeginImageContext(CGSizeMake(imageWidth, imageHeight));
        [image drawInRect:CGRectMake(0, 0, imageWidth, imageHeight)];
        UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        
        imageView.image = newImage;
        imageView.contentMode = UIViewContentModeCenter;
        
        UILabel *label = [[UILabel alloc] init];
        label.backgroundColor =[UIColor clearColor];
        label.textAlignment =  NSTextAlignmentCenter;
        label.textColor = [UIColor blackColor];
        label.font = [UIFont fontWithName:fontType size:fontSize];
        label.text = string;
        label.textColor = color;
        
        
        //frame setting.....
        returnView.frame = CGRectMake(0, 0, labelWidth, imageHeight + labelHeight);
        imageView.frame = CGRectMake( (labelWidth - imageWidth)/2, 0,  imageWidth, imageHeight);
        label.frame = CGRectMake(0, imageHeight,labelWidth, labelHeight);
        
        
        imageView.backgroundColor = backGroundColor;//[UIColor clearColor];
        
        [returnView addSubview:imageView];
        [returnView addSubview:label];
        
        UIGraphicsBeginImageContextWithOptions(returnView.bounds.size, false, 0);
        
        [returnView.layer renderInContext:UIGraphicsGetCurrentContext()];
        UIImage *imageWithText = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        
        return imageWithText;
    }
    @catch (NSException *exception) {
        
        return image;
    }
    @finally {
        
    }
}

#pragma  -mark xml parser methods including delegate.. start from here with are used for E.......

/**
 * @description  in this method we are prasning the data form xmlfile and setting delegate to it....
 * @date         08/07/2016
 * @method       pasringXml:
 * @author       Srinivasulu
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(NSString *) parsingXml:(NSString *)xmlFile
{
    
    NSXMLParser * parserXml;
    NSString * printStr = @"";
    
    //parsering the XmlFile data....
    parserXml = [[NSXMLParser alloc] initWithData:[NSData dataWithContentsOfFile:xmlFile]];
    parserXml.delegate = self;
    
    //used for dynamic offline printing....
    offlineDynamicPrintDic = [NSMutableDictionary new];
    [offlineDynamicPrintDic setValue:[NSMutableArray new] forKey:SEQUENCE_OF_OBJECT];
    
    tempPrintInfoArr = [NSMutableArray new];
    tempParaMetersArr = [NSMutableArray new];
    tempSubParaMetersArr = [NSMutableArray new];
    maxPrintLength = 0;
    
    @try {
        [parserXml parse];
        
        NSString * tempPrintStr = @"";
        for(NSString * str in [offlineDynamicPrintDic valueForKey:SEQUENCE_OF_OBJECT]){
            
            if([str caseInsensitiveCompare:LOGO] != NSOrderedSame)
//                printStr = [NSString stringWithFormat:@"%@%@", printStr, [offlineDynamicPrintDic valueForKey:str]];
                tempPrintStr = [NSString stringWithFormat:@"%@%@", tempPrintStr, [offlineDynamicPrintDic valueForKey:str]];
        }
//        NSLog(@"---%@",printStr); //printStr
        if([tempPrintStr length])
        for(NSString * tempStr in [tempPrintStr componentsSeparatedByString:@"\n"]){

            if([tempStr length] <= maxPrintLength){

                printStr = [NSString stringWithFormat:@"%@%@%@",printStr,tempStr,@"\n"];
            }
            else{

                NSString * splitStr = [NSString stringWithFormat:@"%@\n%@", [tempStr substringWithRange:NSMakeRange(0, maxPrintLength)],[tempStr substringWithRange:NSMakeRange(maxPrintLength, (tempStr.length - (maxPrintLength)))]];
                printStr = [NSString stringWithFormat:@"%@%@%@",printStr,splitStr,@"\n"];
            }
        }
    }
    @catch (NSException *exception) {
        printStr = @"";
        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"error", nil),@"\n",NSLocalizedString(@"error_in_parsing_the_xml", nil)];
        printStr = NSLocalizedString(@"error_in_parsing_the_xml", nil);
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:self.view.frame.size.height - 150  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
    }
    @finally{
        
        return printStr;
    }
}

/**
 * @description  in this method we are prasning the data form xmlfile and setting delegate to it....
 * @date         08/07/2016
 * @method       parser: didStartElement: namespaceURI: qualifiedName:  attributes:
 * @author       Srinivasulu
 * @param        NSXMLParser
 * @param        NSString
 * @param        NSString
 * @param        NSString
 * @param        NSDictionary
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 */

-(void) parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict1
{
    @try {
        
        if([elementName caseInsensitiveCompare:PART] == NSOrderedSame){
            
            isObjectSequenceEnded = true;
            isToStoreSequeceContent = true;
            sequeceNameStr = [attributeDict1 valueForKey:KEY_NAME];
            sequeceContentStr = @"";
            
            if(maxPrintLength == 0 && [sequeceNameStr caseInsensitiveCompare:ITEM_DETAILS] == NSOrderedSame)
                maxPrintLength = [[attributeDict1 valueForKey:MAX_WIDTH] integerValue];
            
            if([tempPrintInfoArr count])
                [tempPrintInfoArr removeAllObjects];
            if([tempParaMetersArr count])
                [tempParaMetersArr removeAllObjects];
            if([tempSubParaMetersArr count])
                [tempSubParaMetersArr removeAllObjects];
        }
        else if([sequeceNameStr caseInsensitiveCompare:ITEM_DETAILS] == NSOrderedSame && sequeceNameStr != nil)
        {
            if(isParaMetersExistUnderPart){
                
                paraMetersExistUnderPartStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempParaMetersArr addObject:dic];
                }
            }
            else{
                sequenceContentKeyNameStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempPrintInfoArr addObject:dic];
                }
            }
        }
        else if([sequeceNameStr caseInsensitiveCompare:RETURN_ITEM_DETAILS] == NSOrderedSame && sequeceNameStr != nil)
        {
            if(isParaMetersExistUnderPart){
                
                paraMetersExistUnderPartStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempParaMetersArr addObject:dic];
                }
            }
            else{
                sequenceContentKeyNameStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count] && [elementName  caseInsensitiveCompare:@"text"] != NSOrderedSame){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempPrintInfoArr addObject:dic];
                }
            }
        }
        else if([sequeceNameStr caseInsensitiveCompare:EXCHANGE_ITEM_DETAILS] == NSOrderedSame && sequeceNameStr != nil)
        {
            if(isParaMetersExistUnderPart){
                
                paraMetersExistUnderPartStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempParaMetersArr addObject:dic];
                }
            }
            else{
                sequenceContentKeyNameStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count] && [elementName  caseInsensitiveCompare:@"text"] != NSOrderedSame){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempPrintInfoArr addObject:dic];
                }
            }
        }
        else if([sequeceNameStr caseInsensitiveCompare:BILL_DETAILS] == NSOrderedSame && sequeceNameStr != nil)
        {
            if(isParaMetersExistUnderPart){
                
                paraMetersExistUnderPartStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempParaMetersArr addObject:dic];
                }
            }
            else{
                sequenceContentKeyNameStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempPrintInfoArr addObject:dic];
                }
            }
        }
        else if([sequeceNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST] == NSOrderedSame && sequeceNameStr != nil)
        {
            if(isParaMetersExistUnderPart){
                
                paraMetersExistUnderPartStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempParaMetersArr addObject:dic];
                }
            }
            else{
                sequenceContentKeyNameStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempPrintInfoArr addObject:dic];
                }
            }
        }
        else if([sequeceNameStr caseInsensitiveCompare:TRANSACTION_DETAILS] == NSOrderedSame && sequeceNameStr != nil)
        {
            if(isParaMetersExistUnderPart){
                
                paraMetersExistUnderPartStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempParaMetersArr addObject:dic];
                }
            }
            else{
                sequenceContentKeyNameStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempPrintInfoArr addObject:dic];
                }
            }
        }
        else if([sequeceNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST_BY_TAX_RATE] == NSOrderedSame && sequeceNameStr != nil)
        {
            if(isParaMetersExistUnderPart){
                
                paraMetersExistUnderPartStr = elementName;
                isKeyInSequeceContent = true;
                
                
                //isSubParaMetersExistUnderPart
                if([paraMetersExistUnderPartStr caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame){
                    subParaMetersExistUnderPartStr = paraMetersExistUnderPartStr;
                    isSubParaMetersExistUnderPart = true;
                    isKeyInSequeceContent = false;
                }
                else if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    
                    if(isSubParaMetersExistUnderPart)
                        [tempSubParaMetersArr addObject:dic];
                    else
                        [tempParaMetersArr addObject:dic];
                }
            }
            else{
                sequenceContentKeyNameStr = elementName;
                isKeyInSequeceContent = true;
                
                if([[attributeDict1 allKeys] count]){
                    isKeyInSequeceContent = false;
                    NSDictionary * dic = [NSDictionary dictionaryWithObject:attributeDict1 forKey:elementName];
                    [tempPrintInfoArr addObject:dic];
                }
            }
        }
        else{
            sequenceContentKeyNameStr = elementName;
            if(isToStoreSequeceContent)
                isKeyInSequeceContent = true;
        }
    }
    @catch (NSException *exception) {
        
    }
}

/**
 * @description  this is delegate method which will be executed for every character of text which are deyond the parameters....
 * @date         17/08/2018....
 * @method       parser:-- foundCharacters:--
 * @author       Srinivasulu
 *
 * @param        NSString
 * @param        NSDictionary
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 */

- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string{
    
    @try {
        
        if(isObjectSequenceEnded && isKeyInSequeceContent && [sequeceNameStr caseInsensitiveCompare:ITEM_DETAILS] != NSOrderedSame && [sequeceNameStr caseInsensitiveCompare:BILL_DETAILS] != NSOrderedSame && [sequeceNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST] != NSOrderedSame && [sequeceNameStr caseInsensitiveCompare:TRANSACTION_DETAILS] != NSOrderedSame && [sequeceNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST_BY_TAX_RATE] != NSOrderedSame && [sequeceNameStr caseInsensitiveCompare:RETURN_ITEM_DETAILS] != NSOrderedSame && [sequeceNameStr caseInsensitiveCompare:EXCHANGE_ITEM_DETAILS] != NSOrderedSame)
            [self handlingSapcesAndContent:string];
        
        if([sequeceNameStr caseInsensitiveCompare:ITEM_DETAILS] == NSOrderedSame && isKeyInSequeceContent)
        {
            
            NSDictionary * dic = [NSDictionary dictionaryWithObject:string forKey:sequenceContentKeyNameStr];
            
            if(isParaMetersExistUnderPart){
                
                dic = [NSDictionary dictionaryWithObject:string forKey:paraMetersExistUnderPartStr];
                [tempParaMetersArr addObject:dic];
            }
            else if([sequenceContentKeyNameStr caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame && !isParaMetersExistUnderPart)
                isParaMetersExistUnderPart = true;
            else
                [tempPrintInfoArr addObject:dic];
        }
        else  if([sequeceNameStr caseInsensitiveCompare:RETURN_ITEM_DETAILS] == NSOrderedSame && isKeyInSequeceContent)
        {
            
            NSDictionary * dic = [NSDictionary dictionaryWithObject:string forKey:sequenceContentKeyNameStr];
            
            if(isParaMetersExistUnderPart){
                
                dic = [NSDictionary dictionaryWithObject:string forKey:paraMetersExistUnderPartStr];
                [tempParaMetersArr addObject:dic];
            }
            else if([sequenceContentKeyNameStr caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame && !isParaMetersExistUnderPart)
                isParaMetersExistUnderPart = true;
            else
                [tempPrintInfoArr addObject:dic];
        }
        else  if([sequeceNameStr caseInsensitiveCompare:EXCHANGE_ITEM_DETAILS] == NSOrderedSame && isKeyInSequeceContent)
        {
            
            NSDictionary * dic = [NSDictionary dictionaryWithObject:string forKey:sequenceContentKeyNameStr];
            
            if(isParaMetersExistUnderPart){
                
                dic = [NSDictionary dictionaryWithObject:string forKey:paraMetersExistUnderPartStr];
                [tempParaMetersArr addObject:dic];
            }
            else if([sequenceContentKeyNameStr caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame && !isParaMetersExistUnderPart)
                isParaMetersExistUnderPart = true;
            else
                [tempPrintInfoArr addObject:dic];
        }
        else if([sequeceNameStr caseInsensitiveCompare:BILL_DETAILS] == NSOrderedSame && isKeyInSequeceContent)
        {
            
            NSDictionary * dic = [NSDictionary dictionaryWithObject:string forKey:sequenceContentKeyNameStr];
            
            if(isParaMetersExistUnderPart){
                
                dic = [NSDictionary dictionaryWithObject:string forKey:paraMetersExistUnderPartStr];
                [tempParaMetersArr addObject:dic];
            }
            else if([sequenceContentKeyNameStr caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame && !isParaMetersExistUnderPart)
                isParaMetersExistUnderPart = true;
            else
                [tempPrintInfoArr addObject:dic];
        }
        else if([sequeceNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST] == NSOrderedSame && isKeyInSequeceContent)
        {
            
            NSDictionary * dic = [NSDictionary dictionaryWithObject:string forKey:sequenceContentKeyNameStr];
            
            if(isParaMetersExistUnderPart){
                
                dic = [NSDictionary dictionaryWithObject:string forKey:paraMetersExistUnderPartStr];
                [tempParaMetersArr addObject:dic];
            }
            else if([sequenceContentKeyNameStr caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame && !isParaMetersExistUnderPart)
                isParaMetersExistUnderPart = true;
            else
                [tempPrintInfoArr addObject:dic];
        }
        else if([sequeceNameStr caseInsensitiveCompare:TRANSACTION_DETAILS] == NSOrderedSame && isKeyInSequeceContent)
        {
            
            NSDictionary * dic = [NSDictionary dictionaryWithObject:string forKey:sequenceContentKeyNameStr];
            
            if(isParaMetersExistUnderPart){
                
                dic = [NSDictionary dictionaryWithObject:string forKey:paraMetersExistUnderPartStr];
                [tempParaMetersArr addObject:dic];
            }
            else if([sequenceContentKeyNameStr caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame && !isParaMetersExistUnderPart)
                isParaMetersExistUnderPart = true;
            else
                [tempPrintInfoArr addObject:dic];
        }
        else if([sequeceNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST_BY_TAX_RATE] == NSOrderedSame && isKeyInSequeceContent)
        {
            
            NSDictionary * dic = [NSDictionary dictionaryWithObject:string forKey:sequenceContentKeyNameStr];
            
            if(isParaMetersExistUnderPart){
                
                dic = [NSDictionary dictionaryWithObject:string forKey:paraMetersExistUnderPartStr];
                
                if(isSubParaMetersExistUnderPart){
                    [tempSubParaMetersArr addObject:dic];
                }
                else{
                    [tempParaMetersArr addObject:dic];
                }
            }
            else if([sequenceContentKeyNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST_BY_TAX_RATE] == NSOrderedSame && !isParaMetersExistUnderPart)
                isParaMetersExistUnderPart = true;
            else
                [tempPrintInfoArr addObject:dic];
        }
        isKeyInSequeceContent = false;
        
    } @catch (NSException *exception) {
    
    }
}

/**
 * @description  this is delegate method which will be executed for every node/parameter end....
 * @date         17/08/2018....
 * @method       parser:-- didEndElement:-- namespaceURI:-- qualifiedName:--
 * @author       Srinivasulu
 *
 * @param        NSXMLParser
 * @param        NSString
 * @param        NSString
 * @param        NSString
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 */

- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(nullable NSString *)namespaceURI qualifiedName:(nullable NSString *)qName{
    
    @try {
        
        
        if(!isObjectSequenceEnded){
            
            [self formObjectSequenceInOfflinePrintResponse:elementName];
        }
        else if(isKeyInSequeceContent){
            
            [self handlingKeysInContent:elementName];
        }
        else if([elementName caseInsensitiveCompare:PART] == NSOrderedSame){
            
            if([sequeceNameStr caseInsensitiveCompare:ITEM_DETAILS] == NSOrderedSame){
                
                NSArray * tempItemsArr =  [offlineBillDeatilsInfoDic valueForKey:BILL_ITEMS];
                for (int i = 0; i < [tempItemsArr count]; i++) {
                    //                for(NSDictionary * tempDic in tempPrintInfoArr){ offlineBillDeatilsInfoDic
                    for (int j = 0; j < [tempPrintInfoArr count]; j++) {
                        NSDictionary * tempDic  = [tempPrintInfoArr objectAtIndex:j];
                        [self handlingItemDetailsInPrint:tempDic itemDeatilsInfo:[tempItemsArr objectAtIndex:i]];
                    }
                }
                
            }
            else if([sequeceNameStr caseInsensitiveCompare:RETURN_ITEM_DETAILS] == NSOrderedSame){
                if([[offlineBillDeatilsInfoDic allKeys] containsObject:RETURN_ITEMS_LIST] && ![[offlineBillDeatilsInfoDic valueForKey:RETURN_ITEMS_LIST] isKindOfClass:[NSNull class]] ){
                    
                    NSArray * tempItemsArr =  [offlineBillDeatilsInfoDic valueForKey:RETURN_ITEMS_LIST];
                    for (int i = 0; i < [tempItemsArr count]; i++) {
                        //                for(NSDictionary * tempDic in tempPrintInfoArr){ offlineBillDeatilsInfoDic
                        for (int j = 0; j < [tempPrintInfoArr count]; j++) {
                            NSDictionary * tempDic  = [tempPrintInfoArr objectAtIndex:j];
                            [self handlingItemDetailsInPrint:tempDic itemDeatilsInfo:[tempItemsArr objectAtIndex:i]];
                        }
                    }
                }
            }
            else if([sequeceNameStr caseInsensitiveCompare:EXCHANGE_ITEM_DETAILS] == NSOrderedSame){
                
                if([[offlineBillDeatilsInfoDic allKeys] containsObject:EXCHANGE_ITEMS_LIST] && ![[offlineBillDeatilsInfoDic valueForKey:EXCHANGE_ITEMS_LIST] isKindOfClass:[NSNull class]] ){
                    NSArray * tempItemsArr =  [offlineBillDeatilsInfoDic valueForKey:EXCHANGE_ITEMS_LIST];
                    for (int i = 0; i < [tempItemsArr count]; i++) {
                        //                for(NSDictionary * tempDic in tempPrintInfoArr){ offlineBillDeatilsInfoDic
                        for (int j = 0; j < [tempPrintInfoArr count]; j++) {
                            NSDictionary * tempDic  = [tempPrintInfoArr objectAtIndex:j];
                            [self handlingItemDetailsInPrint:tempDic itemDeatilsInfo:[tempItemsArr objectAtIndex:i]];
                        }
                    }
                }
            }
            
            else  if([sequeceNameStr caseInsensitiveCompare:BILL_DETAILS] == NSOrderedSame){
                
                //                for(NSDictionary * tempDic in tempPrintInfoArr){ offlineBillDeatilsInfoDic
                for (int j = 0; j < [tempPrintInfoArr count]; j++) {
                    NSDictionary * tempDic  = [tempPrintInfoArr objectAtIndex:j];
                    [self handlingBillDetailsInPrint:tempDic];
                }
                
            }
            else if([sequeceNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST] == NSOrderedSame){
                
                NSMutableArray * tempItemsTaxArr =  [[offlineBillDeatilsInfoDic valueForKey:TAX_AGGREGATION_LIST] mutableCopy];
                
                
                if(![tempItemsTaxArr count]){
                    NSMutableDictionary * itemTaxDic = [NSMutableDictionary new];
                    [itemTaxDic setValue:@"CGST" forKey:TAX_CODE];
                    [itemTaxDic setValue:@"0.00" forKey:TAX_RATE];
                    [itemTaxDic setValue:@"0.00" forKey:TAX_VALUE];
                    [tempItemsTaxArr addObject:itemTaxDic];
                    
                    NSMutableDictionary *itemTaxDic1 = [NSMutableDictionary new];
                    [itemTaxDic1 setValue:@"SGST" forKey:TAX_CODE];
                    [itemTaxDic1 setValue:@"0.00" forKey:TAX_RATE];
                    [itemTaxDic1 setValue:@"0.00" forKey:TAX_VALUE];
                    [tempItemsTaxArr addObject:itemTaxDic1];
                }
                
                
                for (int i = 0; i < [tempItemsTaxArr count]; i++) {
                    //                for(NSDictionary * tempDic in tempPrintInfoArr){ offlineBillDeatilsInfoDic
                    for (int j = 0; j < [tempPrintInfoArr count]; j++) {
                        NSDictionary * tempDic  = [tempPrintInfoArr objectAtIndex:j];
                        [self handlingItemDetailsInPrint:tempDic itemDeatilsInfo:[tempItemsTaxArr objectAtIndex:i]];
                    }
                }
                
            }
            else if([sequeceNameStr caseInsensitiveCompare:TRANSACTION_DETAILS] == NSOrderedSame){
                
                NSMutableArray * tempTranactionDetailsArr =  [[offlineBillDeatilsInfoDic valueForKey:AGGREGATE_TRANSACTION_LIST] mutableCopy];
                
                if(! [tempTranactionDetailsArr count])
                    tempTranactionDetailsArr =  [[offlineBillDeatilsInfoDic valueForKey:BILLING_TRANSACTIONS] mutableCopy];
                
                float changeReturnAmount = 0;
                
                for (int i = 0; i < [tempTranactionDetailsArr count]; i++) {
                    NSMutableDictionary * tempTransDic = [[tempTranactionDetailsArr objectAtIndex:i] mutableCopy];
                    changeReturnAmount = changeReturnAmount + [[self checkGivenValueIsNullOrNil:[tempTransDic valueForKey:CHANGE_RETURN] defaultReturn:@"0.00"] floatValue];
                    //                for(NSDictionary * tempDic in tempPrintInfoArr){ offlineBillDeatilsInfoDic
                    for (int j = 0; j < [tempPrintInfoArr count]; j++) {
                        NSDictionary * tempDic  = [tempPrintInfoArr objectAtIndex:j];
                        
                        
                        if([[[tempDic allKeys] objectAtIndex:0] isEqualToString:@"Change-Returns:"] && i !=  ([tempPrintInfoArr count] - 1))
                            break;
                        else{
                            
                            [tempTransDic setValue:[NSString stringWithFormat:@"%.2f", changeReturnAmount]  forKey:CHANGE_RETURNED_AMOUNT];
                        }
                        
                        [self handlingItemDetailsInPrint:tempDic itemDeatilsInfo:tempTransDic];
                    }
                }
                
            }
            else if([sequeceNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST_BY_TAX_RATE] == NSOrderedSame){
                
                
                NSMutableArray * tempItemsTaxAggregationListArr =  [[offlineBillDeatilsInfoDic valueForKey:TAX_AGGREGATION_LIST_BY_TAX_RATE] mutableCopy];
                
                
                if([tempItemsTaxAggregationListArr count]){
                    
                    for (int i = 0; i < [tempPrintInfoArr count]; i++) {
                        
                        NSDictionary * tempDic  = [tempPrintInfoArr objectAtIndex:i];
                        
                        if([[[tempDic allKeys] objectAtIndex:0] caseInsensitiveCompare:TAX_AGGREGATION_LIST_BY_TAX_RATE] == NSOrderedSame){
                            for(NSDictionary * billResTempTaxArrDic in tempItemsTaxAggregationListArr){
                                
                                for(NSDictionary * tempXmlRes in [tempDic valueForKey:TAX_AGGREGATION_LIST_BY_TAX_RATE]){
                                    
                                    if([[[tempDic allKeys] objectAtIndex:0] caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame){
                                        
                                        for(NSDictionary * billTaxDic in [billResTempTaxArrDic valueForKey:ITEM_TAXES_LIST])
                                            for(NSDictionary * tempXmlTaxRes in [tempDic valueForKey:TAX_AGGREGATION_LIST_BY_TAX_RATE])
                                                [self handlingItemDetailsInPrint:tempXmlTaxRes itemDeatilsInfo:billTaxDic];
                                    }
                                    else{
                                        [self handlingItemDetailsInPrint:tempXmlRes itemDeatilsInfo:billResTempTaxArrDic];
                                    }
                                }
                            }
                            
                        }
                        else{
                            [self handlingBillDetailsInPrint:tempDic];
                        }
                    }
                }
                
            }
            isToStoreSequeceContent = false;
            
//            NSString * tempPrintStr = [sequeceContentStr mutableCopy];
//            sequeceContentStr = @"";
//            if([tempPrintStr length])
//                for(NSString * tempStr in [tempPrintStr componentsSeparatedByString:@"\n"]){
//
//                    if([tempStr length] <= maxPrintLength){
//
//                        sequeceContentStr = [NSString stringWithFormat:@"%@%@%@",sequeceContentStr,tempStr,@"\n"];
//                    }
//                    else{
//
//                        NSString * splitStr = [NSString stringWithFormat:@"%@\n%@", [tempStr substringWithRange:NSMakeRange(0, maxPrintLength)],[tempStr substringWithRange:NSMakeRange(maxPrintLength, (tempStr.length - (maxPrintLength)))]];
//                        sequeceContentStr = [NSString stringWithFormat:@"%@%@%@",sequeceContentStr,splitStr,@"\n"];
//                    }
//                }
            
            [offlineDynamicPrintDic setValue:sequeceContentStr forKey:sequeceNameStr];
        }
        else  if([elementName caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame){
            
            NSDictionary * dic = [NSDictionary dictionaryWithObject:tempParaMetersArr forKey:sequenceContentKeyNameStr];
            
            if([sequeceNameStr caseInsensitiveCompare:TAX_AGGREGATION_LIST_BY_TAX_RATE] == NSOrderedSame){
                
                dic = [NSDictionary dictionaryWithObject:tempSubParaMetersArr forKey:subParaMetersExistUnderPartStr];
                isSubParaMetersExistUnderPart = false;
                [tempParaMetersArr addObject:dic];
            }
            else{
                isParaMetersExistUnderPart = false;
                
                [tempPrintInfoArr addObject:dic];
            }
        }
        else  if([elementName caseInsensitiveCompare:TAX_AGGREGATION_LIST_BY_TAX_RATE] == NSOrderedSame){
            
            NSDictionary * dic = [NSDictionary dictionaryWithObject:tempParaMetersArr forKey:sequenceContentKeyNameStr];
            [tempPrintInfoArr addObject:dic];
            isParaMetersExistUnderPart = false;
        }
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  this is delegate method which will be executed if any error in xml file....
 * @date         17/08/2018....
 * @method       parser:-- parseErrorOccurred:--
 * @author       Srinivasulu
 *
 * @param        NSXMLParser
 * @param        NSError
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 */

- (void)parser:(NSXMLParser *)parser parseErrorOccurred:(NSError *)parseError{
    
}
// ...and this reports a fatal error to the delegate. The parser will stop parsing.

- (void)parser:(NSXMLParser *)parser validationErrorOccurred:(NSError *)validationError{
    
}

/**
 * @description  in this method we are forming the offline print objects in squence....
 * @date         17/08/2018....
 * @method       formObjectSequenceInOfflinePrintResponse:--
 * @author       Srinivasulu
 *
 * @param
 * @param        void
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 */

-(void)formObjectSequenceInOfflinePrintResponse:(NSString *)elementNameStr {
    
    @try {
        
        NSMutableArray * mutArr = [offlineDynamicPrintDic valueForKey:SEQUENCE_OF_OBJECT];
        [mutArr addObject:elementNameStr];
        [offlineDynamicPrintDic setValue:mutArr forKey:SEQUENCE_OF_OBJECT];
        
        if([elementNameStr caseInsensitiveCompare:LOGO] != NSOrderedSame)
            [offlineDynamicPrintDic setValue:@"" forKey:elementNameStr];
        //        NSLog(@"%@ --- %li",elementNameStr,mutArr.count);
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  in this method we are handling the xml text content....
 * @date         17/08/2018....
 * @method       handlingSapcesAndContent:--
 * @author       Srinivasulu
 *
 * @param
 * @param        void
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 */

-(void)handlingSapcesAndContent:(NSString *)contentStr {
    
    @try {
        
        NSArray * switchCaseObjectArr = [NSArray arrayWithObjects:SPACE_SEP,LINE_SEP,TEXT, nil];
        
        int switchedInt = (int)[switchCaseObjectArr indexOfObject:sequenceContentKeyNameStr];
        
        switch (switchedInt) {
            case 0:
                for(int i = 0; i <= [contentStr intValue]; i++)
                    sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,@" "];
                break;
            case 1:
                sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,@"\n"];
                break;
            case 2:
                sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,contentStr];
                break;
            default:
                break;
        }
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  in this method we are handling the xml text content which can be consider as keys....
 * @date         17/08/2018....
 * @method       handlingKeysInContent:--
 * @author       Srinivasulu
 *
 * @param
 * @param        void
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 */

-(void)handlingKeysInContent:(NSString *)contentStr {
    
    @try {
        
        NSArray * switchCaseObjectArr = [NSArray arrayWithObjects:HEADER,BODY,BODY_OTHER_DETAILS,ITEM_DETAILS,BILL_DETAILS,TAX_AGGREGATION_LIST,TRANSACTION_DETAILS,FOOTER,CUSTOMER_INFO, nil];
        
        int switchedInt = (int)[switchCaseObjectArr indexOfObject:sequeceNameStr];
        NSUserDefaults * defaults  = [[NSUserDefaults alloc] init];
        
        
        switch (switchedInt) {
            case 0:
                if([contentStr caseInsensitiveCompare:GST_IN] == NSOrderedSame){
                    
                    sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,customerGstinStr];
                }
                else{
                    if ( [[defaults dictionaryRepresentation].allKeys containsObject:contentStr] && ![[defaults valueForKey:contentStr] isKindOfClass:[NSNull class]])
                        sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,[defaults valueForKey:contentStr]];
                }
                break;
            case 1:
                //no body releated code is founded in XML file itself..
                break;
            case 2:
                sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,[self checkGivenValueIsNullOrNil:[offlineBillDeatilsInfoDic valueForKey:contentStr]  defaultReturn:@""]];
                break;
            case 3:
                
                break;
            case 4:
                
                break;
            case 5:
                
                break;
            case 6:
                
                break;
            case 7:
                if ( [[defaults dictionaryRepresentation].allKeys containsObject:STORE_EMAIL] && ![[defaults valueForKey:STORE_EMAIL] isKindOfClass:[NSNull class]])
                    sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,[defaults valueForKey:STORE_EMAIL]];
                break;
            case 8:
                sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,[self checkGivenValueIsNullOrNil:[offlineBillDeatilsInfoDic valueForKey:contentStr]  defaultReturn:@""]];
                break;
            default:
                break;
        }
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  in this method we are handling the xml content....
 * @date         17/08/2018....
 * @method       handlingItemDetailsInPrint:-- itemDeatilsInfo:--
 * @author       Srinivasulu
 *
 * @param
 * @param        void
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 */

-(void)handlingItemDetailsInPrint:(NSDictionary *)contentDic  itemDeatilsInfo:(NSDictionary *)itemInfoDic {
    
    @try {
        if([[[contentDic allKeys] objectAtIndex:0] caseInsensitiveCompare:ITEM_TAXES_LIST] == NSOrderedSame){
            
            NSArray * billTaxArr = [offlineBillDeatilsInfoDic valueForKey:BILL_ITEM_TAXES];
            
            NSMutableArray * itemTaxArrList = [NSMutableArray new];
            for(int j = 0; j < [billTaxArr count]; j++){
                NSDictionary * tempTaxDic = [billTaxArr objectAtIndex:j];
                if([[tempTaxDic valueForKey:@"plu_code"] isEqualToString:[itemInfoDic valueForKey:PLU_CODE]]){
                    [itemTaxArrList addObject:tempTaxDic];
                }
            }
            if(![itemTaxArrList count])
                itemTaxArrList = [[itemInfoDic valueForKey:ITEM_TAXES_LIST] mutableCopy];
            
            if(![itemTaxArrList count]){
                NSMutableDictionary * itemTaxDic = [NSMutableDictionary new];
                [itemTaxDic setValue:@"GST" forKey:TAX_CATEGORY];
                [itemTaxDic setValue:@"CGST" forKey:Tax_code];
                [itemTaxDic setValue:@"" forKey:TAX_TYPE];
                [itemTaxDic setValue:@"0.00" forKey:Tax_rate];
                [itemTaxDic setValue:@"0.00" forKey:Tax_value];
                [itemTaxArrList addObject:itemTaxDic];
                
                NSMutableDictionary *itemTaxDic1 = [NSMutableDictionary new];
                [itemTaxDic1 setValue:@"GST" forKey:TAX_CATEGORY];
                [itemTaxDic1 setValue:@"SGST" forKey:Tax_code];
                [itemTaxDic1 setValue:@"" forKey:TAX_TYPE];
                [itemTaxDic1 setValue:@"0.00" forKey:Tax_rate];
                [itemTaxDic1 setValue:@"0.00" forKey:Tax_value];
                [itemTaxArrList addObject:itemTaxDic1];
            }
            else{}
            
            for(NSDictionary * taxInfoDic in itemTaxArrList){
                for(NSDictionary * tempXmlChildDic in [contentDic valueForKey:ITEM_TAXES_LIST]){
                    NSString * contentStr = [[tempXmlChildDic allKeys] objectAtIndex:0];
                    NSArray * switchCaseObjectArr = [NSArray arrayWithObjects:SPACE_SEP,LINE_SEP,TEXT, nil];
                    
                    int switchedInt = (int)[switchCaseObjectArr indexOfObject:contentStr];
                    
                    switch (switchedInt) {
                        case 0:
                            for(int i = 0; i <= [[tempXmlChildDic valueForKey:contentStr] intValue]; i++)
                                sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,@" "];
                            break;
                        case 1:
                            sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,@"\n"];
                            break;
                        case 2:
                            sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,[tempXmlChildDic valueForKey:contentStr]];
                            break;
                        default:
                            
                            @try {
                                
                                NSString * dispalyNameStr   = @"";
                                
                                if([[self checkGivenValueIsNullOrNil:[taxInfoDic valueForKey:contentStr] defaultReturn:@""] isKindOfClass:[NSString class]]){
                                    
                                    dispalyNameStr = [self checkGivenValueIsNullOrNil:[taxInfoDic valueForKey:contentStr] defaultReturn:@""];
                                }
                                else if([[self checkGivenValueIsNullOrNil:[taxInfoDic valueForKey:contentStr] defaultReturn:@""] isKindOfClass:[NSNumber class]]){
                                    
                                    dispalyNameStr = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[taxInfoDic valueForKey:contentStr] defaultReturn:@"0.00"] floatValue]];
                                }
                                
                                
                                NSString * maxWidthStr = [self checkGivenValueIsNullOrNil:[[tempXmlChildDic valueForKey:contentStr] valueForKey:MAX_WIDTH] defaultReturn:@"0"];
                                NSString * textAlignStr = [self checkGivenValueIsNullOrNil:[[tempXmlChildDic valueForKey:contentStr] valueForKey:TEXT_ALIGN] defaultReturn:@"left"];
                                
                                if([textAlignStr caseInsensitiveCompare:@"left"] == NSOrderedSame){
                                    
                                    int dispalyNameStrLength = (int)dispalyNameStr.length;
                                    if (dispalyNameStrLength >= [maxWidthStr integerValue]) {
                                        
                                        dispalyNameStr = [NSString stringWithFormat:@"%@",[dispalyNameStr substringWithRange:NSMakeRange(0, [maxWidthStr integerValue])]];
                                    } else {
                                        for (int j = 0; j < [maxWidthStr integerValue] - dispalyNameStrLength; j++) {
                                            
                                            dispalyNameStr = [NSString stringWithFormat:@"%@%@",dispalyNameStr,@" "];
                                        }
                                    }
                                }
                                else{
                                    
                                    int dispalyNameStrLength = (int)dispalyNameStr.length;
                                    if (dispalyNameStrLength >= [maxWidthStr integerValue]) {
                                        
                                        dispalyNameStr = [NSString stringWithFormat:@"%@",[dispalyNameStr substringWithRange:NSMakeRange(0, [maxWidthStr integerValue])]];
                                    } else {
                                        for (int j = 0; j < [maxWidthStr integerValue] - dispalyNameStrLength; j++) {
                                            
                                            dispalyNameStr = [NSString stringWithFormat:@"%@%@",@" ",dispalyNameStr];
                                        }
                                    }
                                }
                                
                                sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,dispalyNameStr];
                                
                            } @catch (NSException *exception) {
                                
                            }
                            
                            break;
                    }
                }
            }
        }
        else if([[contentDic allKeys] count]){
            NSString * contentStr = [[contentDic allKeys] objectAtIndex:0];
            NSArray * switchCaseObjectArr = [NSArray arrayWithObjects:SPACE_SEP,LINE_SEP,TEXT, nil];
            
            int switchedInt = (int)[switchCaseObjectArr indexOfObject:contentStr];
            
            switch (switchedInt) {
                case 0:
                    for(int i = 0; i <= [[contentDic valueForKey:contentStr] intValue]; i++)
                        sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,@" "];
                    break;
                case 1:
                    sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,@"\n"];
                    break;
                case 2:
                    sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,[contentDic valueForKey:contentStr]];
                    break;
                default:
                    
                    @try {
                        NSString * dispalyNameStr = @"";
                        
                        if([[self checkGivenValueIsNullOrNil:[itemInfoDic valueForKey:contentStr] defaultReturn:@""] isKindOfClass:[NSString class]]){
                            
                            dispalyNameStr = [self checkGivenValueIsNullOrNil:[itemInfoDic valueForKey:contentStr] defaultReturn:@""];
                        }
                        else if([[self checkGivenValueIsNullOrNil:[itemInfoDic valueForKey:contentStr] defaultReturn:@""] isKindOfClass:[NSNumber class]]){
                            
                            dispalyNameStr = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[itemInfoDic valueForKey:contentStr] defaultReturn:@"0.00"] floatValue]];
                        }
                        
                        //offlineBillDeatilsInfoDic
                        NSString * maxWidthStr = [self checkGivenValueIsNullOrNil:[[contentDic valueForKey:contentStr] valueForKey:MAX_WIDTH] defaultReturn:@"0"];
                        NSString * textAlignStr = [self checkGivenValueIsNullOrNil:[[contentDic valueForKey:contentStr] valueForKey:TEXT_ALIGN] defaultReturn:@"left"];
                        
                        if([textAlignStr caseInsensitiveCompare:@"left"] == NSOrderedSame){
                            
                            int dispalyNameStrLength = (int)dispalyNameStr.length;
                            if (dispalyNameStrLength >= [maxWidthStr integerValue]) {
                                
                                dispalyNameStr = [NSString stringWithFormat:@"%@",[dispalyNameStr substringWithRange:NSMakeRange(0, [maxWidthStr integerValue])]];
                            } else {
                                for (int j = 0; j < [maxWidthStr integerValue] - dispalyNameStrLength; j++) {
                                    
                                    dispalyNameStr = [NSString stringWithFormat:@"%@%@",dispalyNameStr,@" "];
                                }
                            }
                        }
                        else{
                            
                            int dispalyNameStrLength = (int)dispalyNameStr.length;
                            if (dispalyNameStrLength >= [maxWidthStr integerValue]) {
                                
                                dispalyNameStr = [NSString stringWithFormat:@"%@",[dispalyNameStr substringWithRange:NSMakeRange(0, [maxWidthStr integerValue])]];
                            } else {
                                for (int j = 0; j < [maxWidthStr integerValue] - dispalyNameStrLength; j++) {
                                    
                                    dispalyNameStr = [NSString stringWithFormat:@"%@%@",@" ",dispalyNameStr];
                                }
                            }
                        }
                        
                        sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,dispalyNameStr];
                    } @catch (NSException *exception) {
                        
                    }
                    
                    break;
            }
        }
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  in this method we are handling the xml content....
 * @date         17/08/2018....
 * @method       handlingBillDetailsInPrint:--
 * @author       Srinivasulu
 *
 * @param
 * @param        void
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 */

-(void)handlingBillDetailsInPrint:(NSDictionary *)contentDic{
    
    @try {
        NSString * contentStr = [[contentDic allKeys] objectAtIndex:0];
        
        
        NSArray * switchCaseObjectArr = [NSArray arrayWithObjects:SPACE_SEP,LINE_SEP,TEXT, nil];
        
        int switchedInt = (int)[switchCaseObjectArr indexOfObject:contentStr];
        
        switch (switchedInt) {
            case 0:
                for(int i = 0; i <= [[contentDic valueForKey:contentStr] intValue]; i++)
                    sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,@" "];
                break;
            case 1:
                sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,@"\n"];
                break;
            case 2:
                sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,[contentDic valueForKey:contentStr]];
                break;
            default:
                
                @try {
                    NSString * dispalyNameStr   = @"";
                    
                    if([[self checkGivenValueIsNullOrNil:[offlineBillDeatilsInfoDic valueForKey:contentStr] defaultReturn:@""] isKindOfClass:[NSString class]]){
                        
                        dispalyNameStr = [self checkGivenValueIsNullOrNil:[offlineBillDeatilsInfoDic valueForKey:contentStr] defaultReturn:@""];
                    }
                    else if([[self checkGivenValueIsNullOrNil:[offlineBillDeatilsInfoDic valueForKey:contentStr] defaultReturn:@""] isKindOfClass:[NSNumber class]]){
                        
                        dispalyNameStr = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[offlineBillDeatilsInfoDic valueForKey:contentStr] defaultReturn:@"0.00"] floatValue]];
                    }
                    
                    //added for handling case - 4..
                    NSString * maxWidthStr = [self checkGivenValueIsNullOrNil:[[contentDic valueForKey:contentStr] valueForKey:MAX_WIDTH] defaultReturn:@"0"];
                    NSString * textAlignStr = [self checkGivenValueIsNullOrNil:[[contentDic valueForKey:contentStr] valueForKey:TEXT_ALIGN] defaultReturn:@"left"];
                    
                    if([textAlignStr caseInsensitiveCompare:@"left"] == NSOrderedSame){
                        
                        int dispalyNameStrLength = (int)dispalyNameStr.length;
                        if (dispalyNameStrLength >= [maxWidthStr integerValue]) {
                            
                            dispalyNameStr = [NSString stringWithFormat:@"%@",[dispalyNameStr substringWithRange:NSMakeRange(0, [maxWidthStr integerValue])]];
                        } else {
                            for (int j = 0; j < [maxWidthStr integerValue] - dispalyNameStrLength; j++) {
                                
                                dispalyNameStr = [NSString stringWithFormat:@"%@%@",dispalyNameStr,@" "];
                            }
                        }
                    }
                    else{
                        
                        int dispalyNameStrLength = (int)dispalyNameStr.length;
                        if (dispalyNameStrLength >= [maxWidthStr integerValue]) {
                            
                            dispalyNameStr = [NSString stringWithFormat:@"%@",[dispalyNameStr substringWithRange:NSMakeRange(0, [maxWidthStr integerValue])]];
                        } else {
                            for (int j = 0; j < [maxWidthStr integerValue] - dispalyNameStrLength; j++) {
                                
                                dispalyNameStr = [NSString stringWithFormat:@"%@%@",@" ",dispalyNameStr];
                            }
                        }
                    }
                    sequeceContentStr = [NSString stringWithFormat:@"%@%@",sequeceContentStr,dispalyNameStr];
                } @catch (NSException *exception) {
                    
                }
                
                break;
        }
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  in this method we are handling sending print steram to POW POS....
 * @date         17/08/2018....
 * @method       printReceipt:--
 * @author
 *
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 11/07/2017 && 20/12/2017 && 07/06/2017 && 19/06/2017
 * @reason       changed logic for giving the print to one method && Returnitems Print && logo handling && handle the startPrinter
 *
 * @verified By
 * @verified On
 *
 */

-(void)printReceipt:(NSString *)receiptType {
    
    @try {
        
        
        //changed logic for giving the print on 11/07/2017....
        
        if (printer) {
        
            @try {
                NSString *str;
                
                if ([receiptType isEqualToString:@"Estimate Print"]) {
                    str = [self printMessageForEstimate];
                }
                else {
                    if (!returnScrollView.hidden && tempReturnDetails.count > 0) {
                        
                        str = [self printMessageForReturningItems];
                    }
                    else {
                        str = [self printMessage];
                    }
                }
                
                PowaPrinterSettings *settings = [PowaPrinterSettings defaultSettings];
                settings.leftMargin = 5;
                settings.quality = 1;
                settings.speed = PowaPrinterSpeedAuto;
                
                [printer setPrinterSettings:settings];
                
                [printer startReceipt];
                
                if (str.length>0) {
                    
                    if(isOfflineService){
                        
                        if([custID caseInsensitiveCompare:@"CID8995433"] == NSOrderedSame){
                            
                            [printer printImage:[UIImage imageNamed:@"sampoorna.jpg"] threshold:0.5];
                        }
                        
                        else{
                            
                            NSArray * paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
                            NSString * documentsDirectory = paths[0];
                            
                            NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
                            
                            NSString * savedImagePath = [documentsDirectory stringByAppendingPathComponent:[[defaults valueForKey:LOGO_URL] componentsSeparatedByString:@"/"].lastObject];
                            
                            if([UIImage imageWithContentsOfFile:savedImagePath] != nil)
                                [printer printImage:[UIImage imageWithContentsOfFile:savedImagePath] threshold:0.5];
                            
                            //                        UIImageView *denomImg = [[UIImageView alloc] init];
                            //                        denomImg.backgroundColor = [UIColor clearColor];
                            //                        denomImg.image = [UIImage imageWithContentsOfFile:savedImagePath];
                        }
                        
                    }
                    else{
                        NSUserDefaults *   defaults = [[NSUserDefaults alloc]init];
                        
                        if(([[defaults valueForKey:LOGO_URL] length] > 0) && (! [[defaults valueForKey:LOGO_URL]  isKindOfClass:[NSNull class]])){
                            
                            
                            NSURL * url = [NSURL URLWithString:[defaults valueForKey:LOGO_URL]];
                            
                            
                            //getting images usings Synchronous Calling....
                            NSData *imgData = [NSData dataWithContentsOfURL:url];
                            
                            
                            if (imgData != nil && [UIImage imageWithData:imgData] != nil) {
                                
                                
                                [printer printImage:[UIImage imageWithData:imgData] threshold:0.5];
                            }
                            else{
                                
                                if([custID caseInsensitiveCompare:@"CID8995433"] == NSOrderedSame){
                                    
                                    [printer printImage:[UIImage imageNamed:@"sampoorna.jpg"] threshold:0.5];
                                }
                                
                                
                            }
                            
                        }
                    }
                    //upto here on 02/06/2017....
                    
                    //                [printer printImage:logoImg threshold:0.5];
                    
                    [printer printText:str];
                    [printer printReceipt];
                    if (![receiptType isEqualToString:@"Estimate Print"]) {
                        if (isPrinterConnected) {
                            NSLog(@"after connecting delegate called manually");
                            [self tseriesPrinterResult:PowaTSeriesPrinterResultSuccessfull];
                        }
                    }
                    
                }
                else {
                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"print_templete_response_is_not_avaliable", nil) message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                }
            } @catch (NSException *exception) {
                
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"unable_to_provide_print_for_this_bill", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
                [alert show];
            }
        }
        else{
            
            //reason is used for starIO_print....
            
            [HUD setHidden:NO];
            [HUD setLabelText:NSLocalizedString(@"printing_bill..", nil)];
            
            NSArray *portInfoArray;
            
            //              case 1  :     // LAN
            portInfoArray = [SMPort searchPrinter:@"TCP:"];
            
            if(portInfoArray.count){
                
                NSString * portName   = [OmniRetailerAppDelegate getPortName];
                NSString * modelName  = [OmniRetailerAppDelegate getModelName];
                NSString * macAddress = [OmniRetailerAppDelegate getMacAddress];
                
                for (PortInfo *portInfo in portInfoArray) {
                    
                    portName = portInfo.portName;
                    modelName = portInfo.modelName;
                    macAddress = portInfo.macAddress;
                    
                    break;
                    
                }
                
                if(!isPrinted){
                    
                    ModelIndex modelIndex = [ModelCapability modelIndexAtModelName:modelName];
                    
                    portSettings = [ModelCapability portSettingsAtModelIndex:modelIndex];
                    emulation    = [ModelCapability emulationAtModelIndex   :modelIndex];
                    
                    isPrinted = true;
                    
                }
                
                if([self printMessage].length){
                    
                    
                    NSData * commands = [self createRasterReceiptData:emulation printMessage:[self printMessage]];
                    
                    [Communication sendCommands:commands portName:portName portSettings:portSettings timeout:10000 completionHandler:^(BOOL result, NSString *title, NSString *message) {     // 10000mS!!!
                        
                        self->printAlertView = [[UIAlertView alloc] initWithTitle:title message:message delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
                        [self->printAlertView show];
                    }];
                }
                else{
                    
                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"unable_to_provide_print_for_this_bill", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
                    [alert show];
                }
            }
            else{
                
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"unable_to_find_the_printer_please_check_the_printer_cable", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
                [alert show];
            }
        }
    } @catch (NSException *exception) {
        
        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"unable_to_spot_the_printer_please_check_the_printer_cable", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
        [alert show];
    } @finally {
        
        [HUD setHidden:YES];
    }
}

/**
 * @description  in this method we are forming the estimation print for bill....
 * @date
 * @method       printMessageForEstimate
 * @author
 *
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 22/04/2017 && 22/04/2017 && 25/04/2017
 * @reason       changed itemHeader && CustumerDetails && Cerdit Bill
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)printMessageForEstimate {
    NSString *finalPrintMessage = @"";
    @try {
        NSString *storeAddress = [WebServiceUtility getStoreAddress];
        
        NSString *estimateString = @"############E S T I M A T E \n";
        
        NSString * itemHeader = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@"Item Name#######Qty#######Rate#######Amount\n",@"--------------------------------------------\n"];
        
        itemHeader = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@"Item Name#######Qty#######Rate#######Amount\n",@"--------------------------------------------\n"];
    
        int quantity = 0;
        NSString *allItems = @"";
        for (int i = 0; i < tempArrayItems.count; i++) {
            NSDictionary *temp3 = tempArrayItems[i];
            
            NSString *item = [NSString stringWithFormat:@"%@",[temp3 valueForKey:ITEM_NAME]];
            int itemLength = (int)item.length;
            if (itemLength >= 17) {
                item = [NSString stringWithFormat:@"%@%@",[item substringWithRange:NSMakeRange(0, 15)],@"##"];
            } else {
                for (int j = 0; j < 17 - itemLength; j++) {
                    item = [NSString stringWithFormat:@"%@%@",item,@"#"];
                    //item += "#";
                }
            }
            quantity = quantity + [[temp3 valueForKey:QUANTITY] intValue];
            NSString *qty = [NSString stringWithFormat:@"%@",[temp3 valueForKey:QUANTITY]];
            int qtyLength = (int)qty.length;
            for (int j = 0; j < 10 - qtyLength; j++) {
                
                qty = [NSString stringWithFormat:@"%@%@",qty,@"#"];
                //qty += "#";
            }
            NSString *rate = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:ITEM_TOTAL_PRICE] floatValue] / [[temp3 valueForKey:QUANTITY] intValue])];
            
            int rateLength = (int)rate.length;
            for (int k = 0; k < 11 - rateLength; k++) {
                rate = [NSString stringWithFormat:@"%@%@",rate,@"#"];
                //rate += "#";
                
            }
            NSString *amount = [NSString stringWithFormat:@"%.02f",[[temp3 valueForKey:ITEM_TOTAL_PRICE] floatValue]];
            allItems = [NSString stringWithFormat:@"%@%@%@%@%@%@",allItems,item,qty,rate,amount,@"\n"];
            //allItems += item + qty + rate + amount + "\n";
            
        }
        
        allItems = [NSString stringWithFormat:@"%@%@",allItems,@"--------------------------------------------\n"];
        
        NSString *totalQTY = [NSString stringWithFormat:@"%@%@%@%@",@"TOTAL ITEMS :",@"#############",[NSString stringWithFormat:@"%d",quantity],@"\n"];
        
        NSString *totalAmount = [NSString stringWithFormat:@"%@%@%@%@%@",@"TOTAL AMOUNT :",@"########################",[NSString stringWithFormat:@"%@",totalBillValue.text],@"\n",@"--------------------------------------------\n\n\n\n\n\n"];
        
        NSString * customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  TAKE AWAY\n",@"--------------------------------------------\n"];
        

        if([paymentTypeVal.text isEqualToString:@"Door Delivery"] ){
            
            customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  HOME DELIVERY\n",@"--------------------------------------------\n"];

            if(customerObj.allKeys.count)
                customerDetailsStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",@"Customer Name :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"name"] defaultReturn:@"--"],@"\n",@"Mobile NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"phone"] defaultReturn:@"--"],@"\n",@"HOME DELIVERY",@"\n",@"House NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"houseNo"] defaultReturn:@"--"],@"\n",@"Street Name:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"street"] defaultReturn:@"--"],@"\n",@"Land Mark:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"landMark"] defaultReturn:@"--"],@" \n",@"--------------------------------------------\n"];
        }
        
        if([billStatusStr containsString:@"CB"] ){
            
            customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  CREDIT BILL\n",@"--------------------------------------------\n"];
            
            if(customerObj.allKeys.count)
                customerDetailsStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",@"Customer Name :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"name"] defaultReturn:@"--"],@"\n",@"Mobile NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"phone"] defaultReturn:@"--"],@"\n",@"CREDIT BILL",@"\n",@"House NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"houseNo"] defaultReturn:@"--"],@"\n",@"Street Name:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"street"] defaultReturn:@"--"],@"\n",@"Land Mark:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"landMark"] defaultReturn:@"--"],@" \n",@"--------------------------------------------\n"];
        }
        
        //        finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@",storeAddress,estimateString,itemHeader,allItems,totalQTY,totalAmount];
        finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",storeAddress,estimateString,itemHeader,allItems,totalQTY,totalAmount,customerDetailsStr];
        
        finalPrintMessage = [finalPrintMessage stringByReplacingOccurrencesOfString:@"#" withString:@" "];
    }
    @catch (NSException *exception) {

        finalPrintMessage = @"";
        NSLog(@"%@",exception);
    }
    @finally {
        
        return finalPrintMessage;
    }
}

/**
 * @description  in this method we are forming the estimation print for bill....
 * @date
 * @method       printMessageForReturningItems
 * @author
 *
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 13/10/2017 && 22/04/2017 && 25/04/2017
 * @reason       changed paymentStr credit not has to be obtained && CustumerDetails && Cerdit Bill
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)printMessageForReturningItems {
    NSString *finalPrintMessage = @"";
    @try {

        NSString *storeAddress = [WebServiceUtility getStoreAddress];
        
        NSMutableAttributedString *storeAddressSringWithAttr = [[NSMutableAttributedString alloc] initWithString:storeAddress];
        [storeAddressSringWithAttr addAttribute:NSFontAttributeName
                                          value:[UIFont boldSystemFontOfSize:20]
                                          range:NSMakeRange(0,storeAddress.length)];
        
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        
        NSString *posString = [NSString stringWithFormat:@"%@%@",@"Pos  : ",counterName];
        if (printCount.intValue!=0) {
            
            posString = [NSString stringWithFormat:@"%@%@%@%@",posString,@"#########Duplicate - ",printCount,@"\n"];
        }
        else {
            posString = [NSString stringWithFormat:@"%@%@",posString,@"\n"];
            
        }
        NSString *userId = [NSString stringWithFormat:@"%@%@%@",@"User  : ",firstName,@"\n"];
        //        userId = [userId uppercaseString];
        NSString *Date = [NSString stringWithFormat:@"%@%@%@",@"DATE :",currentdate,@"\n"];
        NSString *bill = [NSString stringWithFormat:@"%@%@%@",@"BILL NO :",pastBillField.text,@"\n"];
        
        NSString *itemHeader = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@"Item Name#######Qty#######Rate#######Amount\n",@"--------------------------------------------\n"];
        int quantity = 0;
        NSString *allItems = @"";
        float totalBillAmount = 0.0f;
        for (int i = 0; i < tempReturnDetails.count; i++) {
            NSDictionary *temp3 = tempReturnDetails[i];
            
            NSString *item = [NSString stringWithFormat:@"%@",[temp3 valueForKey:ITEM_NAME]];
            int itemLength = (int)item.length;
            if (itemLength >= 17) {
                item = [NSString stringWithFormat:@"%@%@",[item substringWithRange:NSMakeRange(0, 15)],@"##"];
            } else {
                for (int j = 0; j < 17 - itemLength; j++) {
                    item = [NSString stringWithFormat:@"%@%@",item,@"#"];
                    //item += "#";
                }
            }
            quantity = quantity + [[temp3 valueForKey:QUANTITY] floatValue];
            NSString *qty = [NSString stringWithFormat:@"%.2f",(0- [[temp3 valueForKey:QUANTITY] floatValue])];
            int qtyLength = (int)qty.length;
            for (int j = 0; j < 10 - qtyLength; j++) {
                
                qty = [NSString stringWithFormat:@"%@%@",qty,@"#"];
                //qty += "#";
            }
            NSString *rate = @"";
            
            rate = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:ITEM_UNIT_PRICE] floatValue])];
            
            //added by Srinivasulu on 01/08/2017....
            
            //            [dic setValue:[NSString stringWithFormat:@"%.2f",[[temp valueForKey:RETURN_QUANTITY] floatValue]] forKey:@"quantity"];
            //
            //            if (([[temp  allKeys] containsObject:@"billedItemUnitPrice"] && ![[temp objectForKey:@"billedItemUnitPrice"] isKindOfClass:[NSNull class]])) {
            //
            //                [dic setObject:[temp objectForKey:@"billedItemUnitPrice"] forKey:@"price"];
            //
            //                [dic setValue:[NSString stringWithFormat:@"%.2f",([[dic valueForKey:@"price"] floatValue] * [[dic valueForKey:@"quantity"] floatValue])] forKey:@"cost"];
            //            }
            
            //upto here on 01/08/2017....
            
            int rateLength = (int)rate.length;
            for (int k = 0; k < 11 - rateLength; k++) {
                rate = [NSString stringWithFormat:@"%@%@",rate,@"#"];
                //rate += "#";
                
            }
            NSString *amount = @"";
            amount = [NSString stringWithFormat:@"%.02f",(0- [[temp3 valueForKey:COST] floatValue])];
            allItems = [NSString stringWithFormat:@"%@%@%@%@%@%@",allItems,item,qty,rate,amount,@"\n"];
            //allItems += item + qty + rate + amount + "\n";
            totalBillAmount += [[temp3 valueForKey:COST] floatValue];
        }
        
        allItems = [NSString stringWithFormat:@"%@%@",allItems,@"--------------------------------------------\n"];
        
        NSString *totalQTY = [NSString stringWithFormat:@"%@%@%@%@",@"TOTAL ITEMS :",@"#############",[NSString stringWithFormat:@"%d",(0 - quantity)],@"\n"];
        NSString *discountString = @"";
        
        NSString *totalAmount = [NSString stringWithFormat:@"%@%@%@%@%@",@"TOTAL AMOUNT :",@"########################",[NSString stringWithFormat:@"%.2f",(0- totalBillAmount)],@"\n",@"--------------------------------------------\n"];
        NSString *grandTotoal = [NSString stringWithFormat:@"%@%@%@%@%@",@"TOTAL :",@"##############################",[NSString stringWithFormat:@"%.2f",(0- totalBillAmount)],@"\n",@"--------------------------------------------\n"];
        
        NSString * paymentString = @"";
     
        //        paymentString = [NSString stringWithFormat:@"%@%@%.2f%@",paymentString,@"Change  -CASH#########################",totalBillAmount,@"\n"];
        
        if(creditNoteNumberStr != nil && creditNoteNumberStr.length){
            
            paymentString = [NSString stringWithFormat:@"%@%@%.2f%@",paymentString,@"Change  -CASH#########################",totalBillAmount,@"\n"];
            paymentString = [NSString stringWithFormat:@"%@%@",creditNoteNumberStr,@"\n"];
        }
        else{
            
            paymentString = [NSString stringWithFormat:@"%@%@%.2f%@",paymentString,@"Change  -CASH#########################",totalBillAmount,@"\n"];
        }

        paymentString = [NSString stringWithFormat:@"%@%@",paymentString,@"--------------------------------------------\n"];
        
        NSString * wishMsg = [NSString stringWithFormat:@"%@%@%@",@"REFUND against bill No : ",pastBillField.text,@"\n"];
        wishMsg = [NSString stringWithFormat:@"%@%@",wishMsg,@"################** REFUND ** \n"];
        wishMsg = [NSString stringWithFormat:@"%@%@",wishMsg,@"###########Reason : SALES RETURN\n\n"];
        wishMsg = [NSString stringWithFormat:@"%@%@",wishMsg,@"###########THANK YOU VISIT AGAIN\n\n\n\n\n"];

        NSString * customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  TAKE AWAY\n",@"--------------------------------------------\n"];
        
         if([paymentTypeVal.text isEqualToString:@"Door Delivery"] ){
            
            customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  HOME DELIVERY\n",@"--------------------------------------------\n"];
    
            if(customerObj.allKeys.count)
                customerDetailsStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",@"Customer Name :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"name"] defaultReturn:@"--"],@"\n",@"Mobile NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"phone"] defaultReturn:@"--"],@"\n",@"HOME DELIVERY",@"\n",@"House NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"houseNo"] defaultReturn:@"--"],@"\n",@"Street Name:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"street"] defaultReturn:@"--"],@"\n",@"Land Mark:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"landMark"] defaultReturn:@"--"],@" \n",@"--------------------------------------------\n"];
         }
        
        if([billStatusStr containsString:@"CB"] ){
            
            customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  CREDIT BILL\n",@"--------------------------------------------\n"];
            
            if(customerObj.allKeys.count)
                customerDetailsStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",@"Customer Name :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"name"] defaultReturn:@"--"],@"\n",@"Mobile NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"phone"] defaultReturn:@"--"],@"\n",@"CREDIT BILL",@"\n",@"House NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"houseNo"] defaultReturn:@"--"],@"\n",@"Street Name:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"street"] defaultReturn:@"--"],@"\n",@"Land Mark:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"landMark"] defaultReturn:@"--"],@" \n",@"--------------------------------------------\n"];
        }
     
        if ((discountValue.text).floatValue > 0) {
  
            //            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,posString,userId,Date,bill,itemHeader,allItems,totalQTY,discountString,totalAmount,grandTotoal,paymentString,wishMsg];
            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,posString,userId,Date,bill,itemHeader,allItems,totalQTY,discountString,totalAmount,grandTotoal,paymentString,customerDetailsStr,wishMsg];
        }
        else{

            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,posString,userId,Date,bill,itemHeader,allItems,totalQTY,totalAmount,grandTotoal,paymentString,customerDetailsStr,wishMsg];
        }
        finalPrintMessage = [finalPrintMessage stringByReplacingOccurrencesOfString:@"#" withString:@" "];
        
    }
    @catch (NSException *exception) {
        
        finalPrintMessage = @"";
        NSLog(@"%@",exception);
        
    }
    @finally {
        
        return finalPrintMessage;
    }
}

#pragma -mark methods used for printing bill throught starPrinter....

/**
 * @description  here we are converting printStream string into image and then to NSData.....
 * @date         20/06/2017....
 * @method       createRasterReceiptData:
 * @author       Srinivasulu
 * @param
 * @param        StarIoExtEmulation
 * @param
 * @return       NSData
 * @verified By
 * @verified On
 *
 */


- (NSData *)createRasterReceiptData:(StarIoExtEmulation)emulation printMessage:(NSString *)msgStr{
    
    @try {
        
        
        
        UIImage * image =  [self imageWithString:msgStr font:[UIFont fontWithName:kLabelFont size:23] width:834];
        
        ISCBBuilder * builder = [StarIoExt createCommandBuilder:emulation];
        
        [builder beginDocument];
        
        [builder appendBitmap:image diffusion:NO];
        
        [builder appendCutPaper:SCBCutPaperActionPartialCutWithFeed];
        
        [builder endDocument];
        
        return [builder.commands copy];
        
    } @catch (NSException *exception) {
        
    }
    
}


/**
 * @description  here we are converting printStream string into image and then to NSData.....
 * @date         20/06/2017....
 * @method       imageWithString:--  font:--  width:--
 * @author       Srinivasulu
 * @param
 * @param        StarIoExtEmulation
 * @param
 * @return       NSData
 * @verified By
 * @verified On
 *
 */

- (UIImage *)imageWithString:(NSString *)string font:(UIFont *)font width:(CGFloat)width {
    
    @try {
        
        NSDictionary *attributeDic = @{NSFontAttributeName:font};
        
        CGSize size = [string boundingRectWithSize:CGSizeMake(width, 10000)
                                           options:NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingTruncatesLastVisibleLine
                                        attributes:attributeDic
                                           context:nil].size;
        
        if ([UIScreen.mainScreen respondsToSelector:@selector(scale)]) {
            if (UIScreen.mainScreen.scale == 2.0) {
                UIGraphicsBeginImageContextWithOptions(size, NO, 1.0);
            } else {
                UIGraphicsBeginImageContext(size);
            }
        } else {
            UIGraphicsBeginImageContext(size);
        }
        
        CGContextRef context = UIGraphicsGetCurrentContext();
        
        [[UIColor whiteColor] set];
        
        CGRect rect = CGRectMake(0, 0, size.width + 1, size.height + 1);
        
        CGContextFillRect(context, rect);
        
        NSDictionary *attributes = @ {
        NSForegroundColorAttributeName:[UIColor blackColor],
        NSFontAttributeName:font
        };
        
        
        string = [string stringByReplacingOccurrencesOfString:@"--" withString:@"---"];
        
        if(isOfflineService){
            
            string = [string stringByReplacingOccurrencesOfString:@" " withString:@"  "];
            
        }
        else{
            string = [string stringByReplacingOccurrencesOfString:@"  " withString:@"    "];
            
            
            
        }
        
        
        [string drawInRect:rect withAttributes:attributes];
        
        
        
        
        
        UIImage * imageToPrint = UIGraphicsGetImageFromCurrentImageContext();
        
        
        //added by Srinivasulu on 21/06/2017....
        @try {
            
            NSUserDefaults *   defaults = [[NSUserDefaults alloc]init];
            
            if((([[defaults valueForKey:LOGO_URL] length] > 0) && (! [[defaults valueForKey:LOGO_URL]  isKindOfClass:[NSNull class]])) && (!isOfflineService)){
                
                
                NSURL * url = [NSURL URLWithString:[defaults valueForKey:LOGO_URL]];
                
                
                //getting images usings Synchronous Calling....
                NSData *imgData = [NSData dataWithContentsOfURL:url];
                
                
                if (imgData != nil && [UIImage imageWithData:imgData] != nil) {
                    
                    
                    UIImage *image2 = [UIImage imageWithData:imgData];
                    
                    CGSize size1 = CGSizeMake(imageToPrint.size.width, imageToPrint.size.height + image2.size.height);
                    
                    UIGraphicsBeginImageContext(size);
                    
                    [image2 drawInRect:CGRectMake(0,0,size1.width, image2.size.height)];
                    [imageToPrint drawInRect:CGRectMake(0,image2.size.height,size1.width, imageToPrint.size.height)];
                    
                    UIImage *finalImage = UIGraphicsGetImageFromCurrentImageContext();
                    
                    UIGraphicsEndImageContext();
                    
                    //set finalImage to IBOulet UIImageView
                    imageToPrint = finalImage;
                }
                
            }
            
        } @catch (NSException *exception) {
            
        }
        
        //upto here on 21/06/2017...
        
        
        UIGraphicsEndImageContext();
        
        return imageToPrint;
        
    } @catch (NSException *exception) {
        
    }
    
}

#pragma -mark method used for formation PrintStream.....

/**
 * @description  in this method we are formating printStream....
 * @date         22/08/2017....
 * @method       printMessage
 * @author       Srinivasulu
 * @param
 * @param
 *
 * @return       NSString
 *
 * @modified By  Srinivasulu on 22/08/2017....
 * @reason       changed the items display content....
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)printMessage
{
    NSString * finalPrintMessage = @"";
    
    @try {
        if(!isOfflineService){
            if(printFormatMapObj.allKeys.count){
                
                NSArray * printSequenceArr;
                
                if(([printFormatMapObj.allKeys containsObject:SEQUENCE_OF_OBJECT]) && (! [[printFormatMapObj valueForKey:SEQUENCE_OF_OBJECT]  isKindOfClass:[NSNull class]])){
                    
                    printSequenceArr = [printFormatMapObj valueForKey:SEQUENCE_OF_OBJECT];
                }
                else{
                    
                    printSequenceArr = @[HEADER,BODY,BODY_OTHER_DETAILS,kItemDetails,BILL_DETAILS,TRANSACTION_DETAILS,FOOTER];
                }
                
                for(NSString * str in printSequenceArr){
                    
                    if([str caseInsensitiveCompare:LOGO] != NSOrderedSame){
                        
                        if(([printFormatMapObj.allKeys containsObject:str]) && (! [[printFormatMapObj valueForKey:str]  isKindOfClass:[NSNull class]])){
                            
                            if(([[[printFormatMapObj valueForKey:str] allKeys] containsObject:CONTENT]) && (! [[[printFormatMapObj valueForKey:str] valueForKey:CONTENT]  isKindOfClass:[NSNull class]])){
                                
                                finalPrintMessage = [NSString stringWithFormat:@"%@%@", finalPrintMessage,[[printFormatMapObj valueForKey:str] valueForKey:CONTENT]];
                                
                            }
                        }
                        
                    }
                    
                }
                
            }
        }
        else{
            
            NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
            if([[defaults valueForKey:PRINT_BILL_URL] length]){
                if([[[[[defaults valueForKey:PRINT_BILL_URL] componentsSeparatedByString:@"/"] lastObject] componentsSeparatedByString:@"."] count] >= 2){
                    //                    NSString * flieNameStr = [[[defaults valueForKey:PRINT_BILL_URL] componentsSeparatedByString:@"/"] lastObject];
                    //                    NSString * flieTypeStr = [[[[[defaults valueForKey:PRINT_BILL_URL] componentsSeparatedByString:@"/"] lastObject] componentsSeparatedByString:@"."] objectAtIndex:1];
                    
                    //                    NSString * xmlFile = [[NSBundle mainBundle] pathForResource:flieNameStr ofType:flieTypeStr];
                    
                    NSArray * paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
                    NSString * documentsDirectory = [paths objectAtIndex:0];
                    NSString * savedFilePath = [documentsDirectory stringByAppendingPathComponent:[[[defaults valueForKey:PRINT_BILL_URL] componentsSeparatedByString:@"/"] lastObject]];
                    
                    //Need to be delete written by Srinivasulu on 16/08/2018...
//                    savedFilePath = [documentsDirectory stringByAppendingPathComponent:@"24mantra.xml"];
                    
                    
//                    savedFilePath = [documentsDirectory stringByAppendingPathComponent:OFFLINE_PRINT_XML];
                    
//                    finalPrintMessage = [self parsingXml:savedFilePath];

                    
                    //                    NSLog(@"==========--------%@",finalPrintMessage);
                    if(!finalPrintMessage.length)
                    finalPrintMessage = [self printOfflineStaticPrint];
                }
            }
        }
    }
    @catch (NSException *exception) {
        
        //changed by Srinivasulu on 14/04/2017....
        finalPrintMessage = @"";
    }
    @finally{
        
        return finalPrintMessage;
    }
}

/**
 * @description  in this method we are formating printStream....
 * @date         21/08/2018....
 * @method       printOfflineStaticPrint
 * @author       Srinivasulu
 * @param
 * @param
 *
 * @return       NSString
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)printOfflineStaticPrint{
    
    NSString * finalPrintMessage = @"";
    
    @try {
        
        if ([custID caseInsensitiveCompare:@"CID8995450"] == NSOrderedSame){
            
            NSString * storeAddress = [NSString stringWithFormat:@"%@%@%@%@",@"############",NSLocalizedString(@"tax_invoice", nil),@"\n##########",NSLocalizedString(@"globus_stores_pvt_ltd", nil)] ;
            storeAddress = [NSString stringWithFormat:@"%@%@%@",storeAddress,@"\n",[WebServiceUtility getStoreAddress]];
            
            //            NSMutableAttributedString * storeAddressSringWithAttr = [[NSMutableAttributedString alloc] initWithString:storeAddress];
            //            [storeAddressSringWithAttr addAttribute:NSFontAttributeName
            //                                              value:[UIFont boldSystemFontOfSize:20]
            //                                              range:NSMakeRange(0,storeAddress.length)];
            
            NSString * allItemsStr = @"";
            
            float totalQty = 0.0;
            float promoDiscCountValue = 0.0;
          
            NSString * billIdStr = [NSString stringWithFormat:@"%@%@%@",@"Invoice NO : ",pastBillField.text,@"\n"];
            billIdStr = [NSString stringWithFormat:@"%@%@%@",@"Invoice NO : ",serialBillIdStr,@"\n"];
           
            
            NSString * customerStr = [NSString stringWithFormat:@"%@%@%@",@"Cust.Name : ",customerNameValue.text,@"\n"];
            customerStr = [NSString  stringWithFormat:@"%@%@%@%@",customerStr,@"Cust.Contact_No :",customerPhoneValue.text,@"\n"];
            customerStr = [NSString  stringWithFormat:@"%@%@%@%@",customerStr,@"Cust.GSTIN :",customerGstinStr,@"\n"];
            
            
            NSString * billInfoStr = [NSString stringWithFormat:@"%@%@%@",@"Counter No :- ",counterName,@"\n"];
            if(cashierId != nil)
                billInfoStr = [NSString stringWithFormat:@"%@%@%@",@"Counter No :- ",cashierId,@"\n"];
            if(counterIdStr.length)
                billInfoStr = [NSString stringWithFormat:@"%@%@%@",@"Counter No :- ",counterIdStr,@"\n"];
   
            
            NSDate * today = [NSDate date];
            NSDateFormatter * f = [[NSDateFormatter alloc] init];
            f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
            NSString * currentdate = [f stringFromDate:today];
            
            billInfoStr = [NSString  stringWithFormat:@"%@%@%@%@",billInfoStr,@"Date :-",currentdate,@"\n"];
            billInfoStr = [NSString  stringWithFormat:@"%@%@%@%@",billInfoStr,@"Cashier No :-",firstName,@"\n"];
            
            
            NSString * itemHeaderStr = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@"Item Code##HSN Code##Mrp##Qty##Disc####Total\n",@"--------------------------------------------\n"];
            
            NSMutableArray * billTaxDispalyArr = [NSMutableArray new];
            float roundOffValue = 0.00;
            
            for (int i = 0; i < tempArrayItems.count; i++) {
                
                NSDictionary * itemDetailsDic = tempArrayItems[i];
                
                NSString * itemIdStr;
                NSString * hnsCodeStr;
                NSString * priceStr = @"";
                
                
                //related to skuId display logic....
                itemIdStr = [NSString stringWithFormat:@"%@",[self checkGivenValueIsNullOrNil:[itemDetailsDic valueForKey:SKU_ID] defaultReturn:@""]];
                
                hnsCodeStr = [self checkGivenValueIsNullOrNil:[itemDetailsDic valueForKey:HSN_CODE] defaultReturn:@""];
                
                
                if ([[itemDetailsDic valueForKey:EDITED_PRICE] floatValue] == 0) {
                    
                    priceStr = [NSString stringWithFormat:@"%.02f",([[itemDetailsDic valueForKey:ITEMUNITPRICE] floatValue])];
                    
                }
                else {
                    priceStr = [NSString stringWithFormat:@"%.02f",([[itemDetailsDic valueForKey:EDITED_PRICE] floatValue])];
                    
                }
                
                totalQty = totalQty + [[itemDetailsDic valueForKey:QUANTITY] floatValue];
                
                NSString * itemQtyStr = [NSString stringWithFormat:@"%.2f",[[itemDetailsDic valueForKey:QUANTITY] floatValue]];
                
                NSString * itemDiscStr = @"0.00";
                
                if (![[itemDetailsDic valueForKey:ITEM_DISCOUNT] isKindOfClass:[NSNull class]]) {
                    itemDiscStr = [NSString stringWithFormat:@"%.02f",[[itemDetailsDic valueForKey:ITEM_DISCOUNT] floatValue]];
                }
                
                if (![[itemDetailsDic valueForKey:DISCOUNT_PRICE_3] isKindOfClass:[NSNull class]]) {
                    
                    itemDiscStr = [NSString stringWithFormat:@"%.02f",(itemDiscStr.floatValue + [[itemDetailsDic valueForKey:DISCOUNT_PRICE_3] floatValue])];
                }
                
                NSString * itemTotalAmountStr = @"0.00";
                
                if ([[itemDetailsDic valueForKey:EDITED_PRICE] floatValue] == 0) {
                    
                    itemTotalAmountStr = [NSString stringWithFormat:@"%.02f",[[itemDetailsDic valueForKey:ITEM_TOTAL_PRICE] floatValue]];
                }
                else {
                    
                    itemTotalAmountStr = [NSString stringWithFormat:@"%.02f",([[itemDetailsDic valueForKey:EDITED_PRICE] floatValue] * [[itemDetailsDic valueForKey:QUANTITY] floatValue])];
                }
                
                float itemTaxValue = 0;
                NSString * printTaxStr = @"";
                
                
                
                if(taxArr.count > i)
                    for(NSDictionary * itemLevelTaxDic in taxArr[i]){
                        
                        if(([[itemDetailsDic valueForKey:SKU_ID] isEqualToString:[itemLevelTaxDic valueForKey:SKU_ID]]) && ([[itemDetailsDic valueForKey:PLU_CODE] isEqualToString:[itemLevelTaxDic valueForKey:@"plu_code"]])){
                            
                            printTaxStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",printTaxStr,[itemLevelTaxDic valueForKey:@"taxCode"],@"#####",[itemLevelTaxDic valueForKey:@"taxRate"],@"####",[itemLevelTaxDic valueForKey:@"tax_value"],@"\n"];
                            
                            itemTaxValue += [[itemLevelTaxDic valueForKey:@"tax_value"] floatValue];
 
                            BOOL isNewDisplay = true;
                            
                            int j = 0;
                            
                            NSMutableDictionary * taxDic;
                            
                            
                            if(billTaxDispalyArr.count){
                                
                                for(j = 0; j < billTaxDispalyArr.count; j++){
                                    
                                    taxDic = [billTaxDispalyArr[j] mutableCopy];
                                    
                                    if( ([[taxDic valueForKey:TAX_RATE] isEqualToString:[itemLevelTaxDic valueForKey:TAX_RATE]])  && ([[taxDic valueForKey:TAX_CODE] isEqualToString:[itemLevelTaxDic valueForKey:TAX_CODE]])){
                                        
                                        float value =  [[itemLevelTaxDic valueForKey:Tax_value] floatValue] +  [[taxDic valueForKey:Tax_value] floatValue];
                                        [taxDic setValue:[NSString stringWithFormat:@"%.2f",value]  forKey:Tax_value];
                                        isNewDisplay = false;
                                        break;
                                    }
                                }
                            }
                            
                            
                            if(isNewDisplay){
                                
                                NSMutableDictionary * dic = [NSMutableDictionary new];
                                
                                [dic setValue:[itemLevelTaxDic valueForKey:TAX_CODE] forKey:TAX_CODE];
                                [dic setValue:[itemLevelTaxDic valueForKey:TAX_RATE] forKey:TAX_RATE];
                                [dic setValue:[itemLevelTaxDic valueForKey:Tax_value] forKey:Tax_value];
                                
                                [billTaxDispalyArr addObject:dic];
                            }
                            else{
                                
                                billTaxDispalyArr[j] = taxDic;
                            }
                        }
                    }
                
                
                itemTotalAmountStr = [NSString stringWithFormat:@"%.2f", itemTotalAmountStr.floatValue - itemDiscStr.floatValue];
                
                roundOffValue  =  roundf(itemTotalAmountStr.floatValue) - itemTotalAmountStr.floatValue;
                
                
                NSString * itemPriceWithTaxStr = @"PR:#############";

                NSString * reducePrice = @"0.0";
        
                reducePrice = itemTotalAmountStr;
                
                if([[itemDetailsDic valueForKey:TAX_INCLUSIVE] integerValue])
                    itemPriceWithTaxStr = [NSString stringWithFormat:@"%@%@%.2f%@%@",@"\n",itemPriceWithTaxStr,(reducePrice.floatValue - itemTaxValue) ,@"\n",printTaxStr ];
                else
                    itemPriceWithTaxStr = [NSString stringWithFormat:@"%@%@%.2f%@%@",@"\n",itemPriceWithTaxStr,reducePrice.floatValue ,@"\n",printTaxStr ];
                
                
                if([[itemDetailsDic valueForKey:TAX_INCLUSIVE] integerValue])
                    itemPriceWithTaxStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",itemPriceWithTaxStr,@"################------",@"\n",@"################",reducePrice ,@"\n",@"################------" ];
                else
                    itemPriceWithTaxStr = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%@",itemPriceWithTaxStr,@"################------",@"\n",@"################",(reducePrice.floatValue + itemTaxValue) ,@"\n",@"################------" ];
                
                //it needs to be removed.... written by Srinivasulu on 22/08/2017....
                
                if (![[itemDetailsDic valueForKey:DISCOUNT_PRICE_3] isKindOfClass:[NSNull class]]) {
                    
                    
                    itemDiscStr = [NSString stringWithFormat:@"%.02f",(itemDiscStr.floatValue - [[itemDetailsDic valueForKey:DISCOUNT_PRICE_3] floatValue])];
                    
                    //commented due to service side change's.... written by Srinivasulu on 23/08/2017....
                    
                    //                        itemTotalAmountStr = [NSString stringWithFormat:@"%.2f", [itemTotalAmountStr floatValue] + [[itemDetailsDic valueForKey:DISCOUNT_PRICE_3] floatValue]];
                    
                    promoDiscCountValue = promoDiscCountValue + [[itemDetailsDic valueForKey:DISCOUNT_PRICE_3] floatValue];
                }
                
                //upto here on 22/08/2017.....
         
                //allignment related logic.......
                //for SKU_ID....
                int itemLength = (int)itemIdStr.length;
                if (itemLength >= 10) {
                    
                    itemIdStr = [NSString stringWithFormat:@"%@",[itemIdStr substringWithRange:NSMakeRange(0, 10)]];
                } else {
                    for (int j = 0; j < 10 - itemLength; j++) {
                        
                        itemIdStr = [NSString stringWithFormat:@"%@%@",itemIdStr,@"#"];
                    }
                }
                
                //for Related HSN_CODE....
                
                int hnsCodeLength = (int)hnsCodeStr.length;
                
                if (hnsCodeLength >= 8) {
                    
                    hnsCodeStr = [NSString stringWithFormat:@"%@",[hnsCodeStr substringWithRange:NSMakeRange(0, 8)]];
                } else {
                    
                    if(8 - hnsCodeStr.length){
                        
                        hnsCodeStr = [NSString stringWithFormat:@"%@%@",@"#",hnsCodeStr];
                        hnsCodeLength = (int)hnsCodeStr.length;
                        
                        for (int k = 0; k < 8 - hnsCodeLength; k++) {
                            hnsCodeStr = [NSString stringWithFormat:@"%@%@",hnsCodeStr,@"#"];
                            
                        }
                    }
                }
                
            
                int priceLength = (int)priceStr.length;
                
                if (priceLength >= 7) {
                    
                    priceStr = [NSString stringWithFormat:@"%@",[priceStr substringWithRange:NSMakeRange(0, 7)]];
                } else {
                    
                    if(7 - priceStr.length)
                        for (int k = 0; k < 7 - priceLength; k++) {
                            priceStr = [NSString stringWithFormat:@"%@%@",@"#",priceStr];
                        }
                }
                
                //for Related Quantity....
                
                int qtyLength = (int)itemQtyStr.length;
                
                if (qtyLength >= 5) {
                    
                    itemQtyStr = [NSString stringWithFormat:@"%@",[itemQtyStr substringWithRange:NSMakeRange( 0, 5)]];
                } else {
                    
                    if(5 - itemQtyStr.length)
                        for (int k = 0; k < 5 - qtyLength; k++) {
                            itemQtyStr = [NSString stringWithFormat:@"%@%@",@"#",itemQtyStr];
                            
                        }
                }
                
                //for Related itemDiscount....
                
                int itemDiscLength = (int)itemDiscStr.length;
                
                if (itemDiscLength >= 6) {
                    
                    itemDiscStr = [NSString stringWithFormat:@"%@",[itemDiscStr substringWithRange:NSMakeRange( 0, 6)]];
                } else {
                    
                    if(6 - itemDiscStr.length)
                        for (int k = 0; k < 6 - itemDiscLength; k++) {
                            itemDiscStr = [NSString stringWithFormat:@"%@%@",@"#",itemDiscStr];
                            
                        }
                }
                
                //for Related itemTotalPrice....
                
                int itemTotalAmountLength = (int)itemTotalAmountStr.length;
                
                if (itemTotalAmountLength >= 8) {
                    
                    itemTotalAmountStr = [NSString stringWithFormat:@"%@",[itemTotalAmountStr substringWithRange:NSMakeRange( 0, 8)]];
                } else {
                    
                    if(8 - itemTotalAmountStr.length)
                        for (int k = 0; k < 8 - itemTotalAmountLength; k++) {
                            itemTotalAmountStr = [NSString stringWithFormat:@"%@%@",@"#",itemTotalAmountStr];
                        }
                }
                
                allItemsStr =  [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@",allItemsStr,itemIdStr,hnsCodeStr,priceStr,itemQtyStr,itemDiscStr,itemTotalAmountStr,@"\n",itemPriceWithTaxStr,@"\n"];
                
                if(taxArr.count > i)
                    for(NSDictionary * itemLevelTaxDic in taxArr[i]){
                        
                        if(([[itemDetailsDic valueForKey:SKU_ID] isEqualToString:[itemLevelTaxDic valueForKey:SKU_ID]]) && ([[itemDetailsDic valueForKey:PLU_CODE] isEqualToString:[itemLevelTaxDic valueForKey:@"plu_code"]])){
                            
                            BOOL isNewDisplay = true;
                            
                            int j = 0;
                            
                            NSMutableDictionary * taxDic;
                            
                            for( j = 0; j < billTaxDispalyArr.count; j++){
                                
                                taxDic = [billTaxDispalyArr[j] mutableCopy];
                                
                                if( ([[taxDic valueForKey:TAX_RATE] isEqualToString:[itemLevelTaxDic valueForKey:TAX_RATE]])  && ([[taxDic valueForKey:TAX_CODE] isEqualToString:[itemLevelTaxDic valueForKey:TAX_CODE]])){
                                    
                                    float totalBaseAmt =  reducePrice.floatValue;
                                    
                                    if([[itemDetailsDic valueForKey:TAX_INCLUSIVE] integerValue])
                                        totalBaseAmt -= itemTaxValue;
                                    
                                    else
                                        totalBaseAmt += itemTaxValue;
                                    
                                    if([taxDic.allKeys containsObject:Base_amount])
                                        totalBaseAmt +=   [[taxDic valueForKey:Base_amount] floatValue];
                                    
                                    [taxDic setValue:[NSString stringWithFormat:@"%.2f",totalBaseAmt]  forKey:Base_amount];
                                    
                                    //upto here on 21/08/2017....
                                    
                                    isNewDisplay = false;
                                    break;
                                }
                            }
                            
                            
                            if(isNewDisplay){
                                
//                                NSLog(@"=======9090234==========");
                            }
                            else{
                                
                                billTaxDispalyArr[j] = taxDic;
                            }
                        }
                    }
            }
            
            allItemsStr = [NSString stringWithFormat:@"%@%@",allItemsStr,@"--------------------------------------------\n"];
            
            
            //roundOffValue  =  roundf([amount floatValue]) - [amount floatValue];
            int itemsCount = (int)tempArrayItems.count;
            //  if (isRoundingRequired) {
            NSString * totalQTY = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@",@"Items/Qty :",@"##########",[NSString stringWithFormat:@"%d",itemsCount],@"/",[NSString stringWithFormat:@"%.2f",totalQty],@"####",@"Round:",[NSString stringWithFormat:@"%.2f",roundOffValue],@"\n"];
            
            //                        }
            //                        else {
            //                            totalQTY = [NSString stringWithFormat:@"%@%@%@%@%@%@",@"Items/Qty :",@"##########",[NSString stringWithFormat:@"%.2f",[[NSNumber numberWithInt:[tempArrayItems count]] floatValue]],@"/",[NSString stringWithFormat:@"%.2f",quantity],@"\n"];
            //
            //                        }
            
            
            
            NSString * totalAmount = [NSString stringWithFormat:@"%@%@%@%@",@"NET DUE :",@"#############################",[NSString stringWithFormat:@"%@",totalBillValue.text],@"\n"];
            
            
            NSString * grandTotoal = [NSString stringWithFormat:@"%@%@%@%@",@"NET TOTAL :",@"###########################",[NSString stringWithFormat:@"%@",totalBillValue.text],@"\n"];
            
            
            //changed by Srinivasulu on 23/08/2017....
            //reason changed simarly to online format....
            
            NSString * promoDiscountStr = [NSString stringWithFormat:@"%@%@%@%@",@"Promo Discount :",@"#######################",[NSString stringWithFormat:@"%.2f",promoDiscCountValue],@"\n"];
            
            
            
            
            //                 promoDiscountStr = [NSString stringWithFormat:@"%@",@"Promo Discount :"];
            //
            //                int promoLenghth = promoDiscountStr.length;
            //
            //                for (int k = promoLenghth; k < 45 - (promoLenghth + [NSString stringWithFormat:@"%.2f",promoDiscCountValue].length); k++) {
            //
            //                    promoDiscountStr = [NSString stringWithFormat:@"%@%@",promoDiscountStr,@"#"];
            //                }
            //
            //                promoDiscountStr = [NSString stringWithFormat:@"%@%@%@", promoDiscountStr, [NSString stringWithFormat:@"%.2f",promoDiscCountValue],@"\n"];
            //
            //
            //
            //                grandTotoal = [NSString stringWithFormat:@"%@",@"NET TOTAL :"];
            //
            //                int grandLenghth = grandTotoal.length;
            //
            //                for (int k = grandLenghth; k < 45 - (grandLenghth + [totalBillValue.text length]); k++) {
            //
            //                    grandTotoal = [NSString stringWithFormat:@"%@%@",grandTotoal,@"#"];
            //                }
            //
            //                grandTotoal = [NSString stringWithFormat:@"%@%@%@", grandTotoal, totalBillValue.text,@"\n"];
            
            
            
            
            //changed by Srinivasulu on 05/05/2017....
            
            if(billDueValue != nil)
                totalAmount = [NSString stringWithFormat:@"%@%@%@%@",@"NET DUE :",@"#############################",[NSString stringWithFormat:@"%@",billDueValue.text],@"\n"];
            
            
            //changed by Srinivasulu on 23/08/2017....
            //reason changed simarly to online format....
            
            
            grandTotoal = [NSString stringWithFormat:@"%@%@%@%@",@"NET DUE :",@"#############################",[NSString stringWithFormat:@"%@",totalBillValue.text],@"\n"];
            totalAmount = @"";
            
            
            //upto here on 23/08/2017....
            
            //commented by Srinivasulu on 23/08/2017....
            
            grandTotoal = [NSString stringWithFormat:@"%@%@",grandTotoal,@"--------------------------------------------\n"];
            
            
            
            //commented by Srinivasulu on 23/08/2017....
            //                totalAmount = [NSString stringWithFormat:@"%@%@",totalAmount,@"--------------------------------------------\n"];
            
            
            NSString *paymentString = @"";
            
            float cashTotal = 0.0f;
            float cardTotal = 0.0f;
            float sodexoTotal = 0.0f;
            float ticketTotal = 0.0f;
            float giftVouchTotal = 0.0f;
            float creditTotal = 0.0f;
            NSString *creditNoteNo = @"";
            
            for (NSDictionary *paymentDic in tempPaymentDetails) {
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Cash"]) {
                    cashTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Card"]) {
                    cardTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Sodexo"]) {
                    sodexoTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Ticket"]) {
                    ticketTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"giftvoucher"]) {
                    giftVouchTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Credit Note"]) {
                    creditTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                    creditNoteNo = [[paymentDic valueForKey:@"couponNumber"] uppercaseString];
                }
            }
            
            //added by Srinivasulu on 25/04/2017....
            
            if ( (cashTotal == 0) && (cardTotal == 0) && (sodexoTotal == 0) && (ticketTotal == 0) && (giftVouchTotal == 0) && (creditTotal == 0)){
                
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Cash###################",[NSString stringWithFormat:@"%.2f",cashTotal],@"\n"];
            }
            
            //upto here on 25/04/2017....
            
            
            if (cashTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Cash###################",[NSString stringWithFormat:@"%.2f",cashTotal],@"\n"];
                
            }
            if (cardTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Card###################",[NSString stringWithFormat:@"%.2f",cardTotal],@"\n"];
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Card ###",bankName,@"\n"];
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Appr ###",appCode,@"\n"];
                
            }
            if (sodexoTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Sodexo##################",[NSString stringWithFormat:@"%.2f",sodexoTotal],@"\n"];
                
            }
            if (ticketTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Ticket##################",[NSString stringWithFormat:@"%.2f",ticketTotal],@"\n"];
                
            }
            if (giftVouchTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Gift Voucher##############",[NSString stringWithFormat:@"%.2f",giftVouchTotal],@"\n"];
                
            }
            if (creditTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",paymentString,@"Amount Paid By Credit Note#############",[NSString stringWithFormat:@"%.2f",creditTotal],@"\n",@"Credit Note No############",creditNoteNo,@"\n"];
                
            }
            float returnAmount = 0.0f;
            for (NSDictionary *returnDic in denominations) {
                if ([[returnDic valueForKey:@"returnDenominationNo"] intValue] > 0 && [[returnDic valueForKey:@"paidDenominationNo"] intValue] == 0) {
                    returnAmount += [[returnDic valueForKey:@"returnAmount"] floatValue];
                }
            }
            if (totalChangeReturnStr.floatValue > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%.2f%@",paymentString,@"Amount Returned To Customer##############",totalChangeReturnStr.floatValue,@"\n"];
            }
            
            //added by Srinivasulu on 23/08/2017....
            //reason changed simarly to online format....
            
            else{
                
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Returned To Customer##############",@"0.00",@"\n"];
            }
            
            paymentString = [NSString stringWithFormat:@"%@%@",paymentString,@"--------------------------------------------\n"];
            
            //upto here on 23/08/2017...
            
            //                paymentString = [NSString stringWithFormat:@"%@%@",paymentString,@"*******************************************\n"];
            
            //                paymentString = [NSString stringWithFormat:@"%@%@",paymentString,@"--------------------------------------------\n"];
            
            NSString * taxesStr = @"";
            
            NSMutableOrderedSet * taxesKeys = [NSMutableOrderedSet new];
            
            for(NSDictionary * dic in billTaxDispalyArr)
                [taxesKeys addObject:[dic valueForKey:@"taxCode"]];
            
            for(NSString * taxNameStr in taxesKeys){
                
                taxesStr = [NSString stringWithFormat:@"%@%@%@%@%@", taxesStr, @"####", taxNameStr, @"####Rate#######Base_Amt####Tax_Amt", @"\n"];
                
                float totalBaseValue = 0.0;
                float totalTaxValue = 0.0;
                
                for(NSDictionary * dic in billTaxDispalyArr){
                    
                    if([[dic valueForKey:@"taxCode"] isEqualToString:taxNameStr]){
                        taxesStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@", taxesStr, @"############", [dic valueForKey:@"taxRate"],
                                    @"%",@"######",[dic valueForKey:@"base_amount"],@"######",[dic valueForKey:@"tax_value"],@"\n"];
                        
                        totalBaseValue +=  [[dic valueForKey:@"base_amount"] floatValue] ;
                        totalTaxValue += [[dic valueForKey:@"tax_value"] floatValue] ;
                        
                    }
                }
                
                taxesStr =  [NSString stringWithFormat:@"%@%@", taxesStr,@"#######################--------####-------"];
                
                taxesStr =  [NSString stringWithFormat:@"%@%@%@%.2f%@%.2f", taxesStr, @"\n",@"#######################",totalBaseValue,@"######",totalTaxValue];
                
                taxesStr =  [NSString stringWithFormat:@"%@%@%@%@", taxesStr, @"\n",@"#######################--------####-------",@"\n"];
                
            }
            
            
            taxesStr = [NSString stringWithFormat:@"%@%@%@", taxesStr,@"\n",@"--------------------------------------------\n"];
            
            
            NSString *wishMsg = [WebServiceUtility getFooter];
            
            wishMsg = [NSString stringWithFormat:@"%@%@",wishMsg,@"\n"];
            
            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,billIdStr,customerStr,billInfoStr,itemHeaderStr,allItemsStr,totalQTY,promoDiscountStr,grandTotoal,totalAmount,paymentString,taxesStr,wishMsg];
            
            
            NSString * customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  TAKE AWAY\n",@"--------------------------------------------\n"];
            
            
            
            if([paymentTypeVal.text isEqualToString:@"Door Delivery"] ){
                
                customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  HOME DELIVERY\n",@"--------------------------------------------\n"];
                
                //changed by Srinivasulu on 23/08/2017....
                //reason changed simarly to online format....
                
                //                    if([[customerObj allKeys] count])
                //                        customerDetailsStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",@"Customer Name :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"name"] defaultReturn:@"--"],@"\n",@"Mobile NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"phone"] defaultReturn:@"--"],@"\n",@"HOME DELIVERY",@"\n",@"House NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"houseNo"] defaultReturn:@"--"],@"\n",@"Street Name:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"street"] defaultReturn:@"--"],@"\n",@"Land Mark:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"landMark"] defaultReturn:@"--"],@" \n",@"--------------------------------------------\n"];
                
                
                
            }
            
            if([billStatusStr containsString:@"CB"] ){
                
                customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  CREDIT BILL\n",@"--------------------------------------------\n"];
                
                
                //changed by Srinivasulu on 23/08/2017....
                //reason changed simarly to online format....
                
                //                    if([[customerObj allKeys] count])
                //                        customerDetailsStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",@"Customer Name :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"name"] defaultReturn:@"--"],@"\n",@"Mobile NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"phone"] defaultReturn:@"--"],@"\n",@"CREDIT BILL",@"\n",@"House NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"houseNo"] defaultReturn:@"--"],@"\n",@"Street Name:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"street"] defaultReturn:@"--"],@"\n",@"Land Mark:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"landMark"] defaultReturn:@"--"],@" \n",@"--------------------------------------------\n"];
            }
            
            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,billIdStr,customerStr,billInfoStr,itemHeaderStr,allItemsStr,totalQTY,promoDiscountStr,grandTotoal,totalAmount,paymentString,taxesStr,customerDetailsStr,wishMsg];
        }
        else{
            
            NSString * storeAddress = [WebServiceUtility getStoreAddress] ;
            //                storeAddress = [NSString stringWithFormat:@"%@%@%@",storeAddress,@"\n",[WebServiceUtility getStoreAddress]];
            
            
            NSString *posString = [NSString stringWithFormat:@"%@%@",@"Counter No : ",counterName];
            
            if(billDoneValue != nil)
                posString = [NSString stringWithFormat:@"%@%@%@",@"Counter No :- ",billDoneValue.text,@"\n"];
            
            
            if(cashierId != nil)
                posString = [NSString stringWithFormat:@"%@%@%@",@"Counter No :- ",cashierId,@"\n"];
            
            //added by Srinivasulu on 20/09/2017....
            
            if(counterIdStr.length)
                posString = [NSString stringWithFormat:@"%@%@%@",@"Counter No :- ",counterIdStr,@"\n"];
            
            //upto here on 20/09/2017....
            
            if (printCount.intValue!=0) {
                
                posString = [NSString stringWithFormat:@"%@%@%@%@",posString,@"#########Duplicate - ",printCount,@"\n"];
            }
            else {
                posString = [NSString stringWithFormat:@"%@%@",posString,@"\n"];
                
            }
            
            NSDate * today = [NSDate date];
            NSDateFormatter * f = [[NSDateFormatter alloc] init];
            f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
            NSString * currentdate = [f stringFromDate:today];
            
            NSString *billHeader = [NSString stringWithFormat:@"%@%@",@" SALES BILL\n",@"--------------------------------------------\n"];
            NSString *session_Date = [NSString stringWithFormat:@"%@%@%@",@"Session No & Date  :-",currentdate,@"\n"];
            
            NSString *userId = [NSString stringWithFormat:@"%@%@%@",@"Cashier No :- ",firstName,@"\n"];
            //        userId = [userId uppercaseString];
            NSString *Date = [NSString stringWithFormat:@"%@%@%@",@"DATE :-",currentdate,@"\n"];
            NSString *bill = [NSString stringWithFormat:@"%@%@%@%@%@",@"Org Cd/BILL NO :-",presentLocation,@"/",pastBillField.text,@"\n"];
            
            
            if (isCustomerBillId)
                bill = [NSString stringWithFormat:@"%@%@%@%@%@",@"Invoice NO : ",presentLocation,@"/",serialBillIdStr,@"\n"];
           
            //changed by Srinivasulu on  25/04/2017....
            NSString * itemHeader = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@" SNo##Item/Desc\n#####Qty####Gross####Disc####Tax####Net\n",@"--------------------------------------------\n"];
            
            
            itemHeader = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@" SNo##Item/Desc############Price\n#####Qty####Gross####Disc####Tax####Net\n",@"--------------------------------------------\n"];
            
            
            itemHeader = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@" SNo##Item/Desc############Price##HSN Code\n#####Qty####Gross####Disc####Tax####Net\n",@"--------------------------------------------\n"];
            
            //upto here on 25/04/2017....
            
            
            // NSString *itemHeader = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@" SNo##Item Name\n#####Qty####Gross####Disc####Tax####Net\n",@"--------------------------------------------\n"];
            
            //   NSString *itemHeader = [NSString stringWithFormat:@"%@%@%@",@"--------------------------------------------\n",@"Item Name#######Qty#######Rate#######Amount\n",@"--------------------------------------------\n"];
            
            
            float quantity = 0;
            NSString *allItems = @"";
            
            
            //added by Srinivasulu
            float roundOffValue = 0.00;
            
            //added by Srinivasulu on 2504/2017....
            
            float netDiscountValue = 0.00;
            
            float netTotalForDiscountCalculationValue = 0.00;
            
            //upto here...
            
            //changed by Srinivaslulu on 21/08/2017...
            //reason changed in format....
            
            //            NSString * taxesStr = [NSString stringWithFormat:@"%@%@", @"####TaxCode####TaxRate####TaxAmount",@"\n"];
            NSString * taxesStr = [NSString stringWithFormat:@"%@%@", @"Tax Summary:",@"\n"];
            
            
            //upto here on 21/08/2017.....
            
            //added by Srinivasulu on 17/08/2017....
            
            NSMutableArray * billTaxDispalyArr = [NSMutableArray new];
            
            //upto here on 17/08/2017.....
            
            for (int i = 0; i < tempArrayItems.count; i++) {
                NSDictionary *temp3 = tempArrayItems[i];
                
                NSString *sNO = [NSString stringWithFormat:@"%d%@",i+1,@"##"];
                
                //  NSString *item = [NSString stringWithFormat:@"%@%@%@",[temp3 valueForKey:SKU_ID],@"/",[temp3 valueForKey:ITEM_NAME]];
                NSString *item = [NSString stringWithFormat:@"%@",[temp3 valueForKey:ITEM_NAME]];
                
                
                //chnaged by Srinivasulu on 25/04/2017....
                
                int itemLength = (int)item.length;
                if (itemLength >= 25) {
                    item = [NSString stringWithFormat:@"%@%@",[item substringWithRange:NSMakeRange(0, 22)],@"##"];
                } else {
                    for (int j = 0; j < 25 - itemLength; j++) {
                        item = [NSString stringWithFormat:@"%@%@",item,@"#"];
                        //item += "#";
                    }
                }
                
                //upto here on 25/04/2017....
                
                //added by Srinivasulu 25/04/2017....
                
                
                NSString * price = @"";
                if ([[temp3 valueForKey:EDITED_PRICE] floatValue] == 0) {
                    
                    
                    price = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:ITEMUNITPRICE] floatValue])];
                    
                }
                else {
                    
                    price = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:EDITED_PRICE] floatValue])];
                }
                
                //upto here on 25/04/2017....
                
                
                
                quantity = quantity + [[temp3 valueForKey:QUANTITY] floatValue];
                NSString *qty = [NSString stringWithFormat:@"%.2f",[[temp3 valueForKey:QUANTITY] floatValue]];
                int qtyLength = (int)qty.length;
                for (int j = 0; j < 8 - qtyLength; j++) {
                    
                    qty = [NSString stringWithFormat:@"%@%@",qty,@"#"];
                    //qty += "#";
                }
                
                NSString *tax = @"0.00";
                
                //changed by Srinivasulu on 01/02/2017....
                NSString *amount = @"0.00";
                
                //upto here on 01/05/2017....
                
                if ([[temp3 valueForKey:EDITED_PRICE] floatValue] == 0) {
                    
                    amount = [NSString stringWithFormat:@"%.02f",[[temp3 valueForKey:ITEM_TOTAL_PRICE] floatValue]];
                    
                }
                else {
                    amount = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:EDITED_PRICE] floatValue] * [[temp3 valueForKey:QUANTITY] floatValue])];
                    
                }
                
                
                NSString *disc = @"0.00";
                
                if (![[temp3 valueForKey:ITEM_DISCOUNT] isKindOfClass:[NSNull class]]) {
                    disc = [NSString stringWithFormat:@"%.02f",[[temp3 valueForKey:ITEM_DISCOUNT] floatValue]];
                }
                
                if (![[temp3 valueForKey:DISCOUNT_PRICE_3] isKindOfClass:[NSNull class]]) {
                    disc = [NSString stringWithFormat:@"%.02f",(disc.floatValue + [[temp3 valueForKey:DISCOUNT_PRICE_3] floatValue])];
                }
                
                
                //added by srnivasulu on 25/04/2017....
                
                netTotalForDiscountCalculationValue = amount.floatValue + netTotalForDiscountCalculationValue;
                
                netDiscountValue = disc.floatValue + netDiscountValue;
                
                //upto here on 25/04/2017....
                
                if ((amount.floatValue - disc.floatValue) >= 0) {
                    
                    amount = [NSString stringWithFormat:@"%.02f",(amount.floatValue - disc.floatValue)];
                    
                    roundOffValue  =  roundf(amount.floatValue) - amount.floatValue;
                }
                
                
                if (![[temp3 valueForKey:TAX_RATE] isKindOfClass:[NSNull class]]) {
                    
                    //changed by Srinivasulu on 17/08/2017.....
                    
                    float taxValue = [self calculateTax:amount.floatValue taxRate:[[temp3 valueForKey:TAX_RATE] floatValue]];
                    
                    tax = [NSString stringWithFormat:@"%.02f",taxValue];
                    
                    
                    //upto here on
                    
                    taxValue = 0;
                    
                    
                    if(taxArr.count > i)
                        for(NSDictionary * itemLevelTaxDic in taxArr[i]){
                            
                            if(([[temp3 valueForKey:SKU_ID] isEqualToString:[itemLevelTaxDic valueForKey:SKU_ID]]) && ([[temp3 valueForKey:PLU_CODE] isEqualToString:[itemLevelTaxDic valueForKey:@"plu_code"]])){
                                
                                taxValue += [[itemLevelTaxDic valueForKey:@"tax_value"] floatValue];
                            }
                            
                        }
                    
                    tax = [NSString stringWithFormat:@"%.02f",taxValue];
                    
                    //upto here on 17/08/2017.....
                    
                }
                
                
                NSString *rate = @"";
                if ([[temp3 valueForKey:EDITED_PRICE] floatValue] == 0) {
                    
                    
                    //                rate = [NSString stringWithFormat:@"%.02f",([[temp3 valueForKey:ITEM_TOTAL_PRICE] floatValue] / [[temp3 valueForKey:QUANTITY] intValue])];
                    
                    rate = [NSString stringWithFormat:@"%.02f",(([[temp3 valueForKey:ITEMUNITPRICE] floatValue] * [[temp3 valueForKey:QUANTITY] floatValue]) - tax.floatValue)];
                    
                    
                    
                    //added by srinivasulu on 23/08/2016
                    //                roundOffValue = roundOffValue + ([rate floatValue] - [tax floatValue] - ([[temp3 valueForKey:ITEM_TOTAL_PRICE] floatValue] / [[temp3 valueForKey:QUANTITY] intValue]));
                }
                else {
                    rate = [NSString stringWithFormat:@"%.02f",(([[temp3 valueForKey:EDITED_PRICE] floatValue] * [[temp3 valueForKey:QUANTITY] floatValue]) - tax.floatValue)];
                    
                    //                roundOffValue = roundOffValue + ([rate floatValue] - [tax floatValue] - ([[temp3 valueForKey:EDITED_PRICE] floatValue]));
                    
                }
                int rateLength = (int)rate.length;
                for (int k = 0; k < 9 - rateLength; k++) {
                    rate = [NSString stringWithFormat:@"%@%@",rate,@"#"];
                    //rate += "#";
                    
                }
                
                int amtLength = (int)amount.length;
                for (int k = 0; k < 9 - amtLength; k++) {
                    amount = [NSString stringWithFormat:@"%@%@",amount,@"#"];
                    //rate += "#";
                    
                }
                
                
                //chnaged by Srinivasulu on 25/04/2017....
                
                
                //            allItems = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",allItems,sNO,item,@"\n",@"####",qty,rate,disc,@"###",tax,@"###",amount,@"\n"];
                
                //changed && added by Srinivasulu on 12/07/2017....
                
                NSString * hnsCodeStr = [self checkGivenValueIsNullOrNil:[temp3 valueForKey:HSN_CODE] defaultReturn:@""];
                int hnsCodeLength = (int)hnsCodeStr.length;
                if(12 - hnsCodeStr.length)
                    for (int k = 0; k < 12 - hnsCodeLength; k++) {
                        hnsCodeStr = [NSString stringWithFormat:@"%@%@",@"#",hnsCodeStr];
                        //rate += "#";
                        
                    }
                
                float itemTaxValue = 0.00;
                
                NSString * printTaxStr = @"";
                
                
                
                //added by Srinivasulu on 21/08/2017....
                
                
                //                if (([[temp3 allKeys] containsObject:@"discountPrice"] && ![[temp3 objectForKey:@"discountPrice"] isKindOfClass:[NSNull class]])) {
                //
                //                    amount = [NSString stringWithFormat:@"%.2f", ([amount floatValue] - [[temp3 objectForKey:@"discountPrice"] floatValue])];
                //                }
                
                //upto hereon 21/08/2017.....
                
                if(taxArr.count > i)
                    for(NSDictionary * itemLevelTaxDic in taxArr[i]){
                        
                        if(([[temp3 valueForKey:SKU_ID] isEqualToString:[itemLevelTaxDic valueForKey:SKU_ID]]) && ([[temp3 valueForKey:PLU_CODE] isEqualToString:[itemLevelTaxDic valueForKey:@"plu_code"]])){
                            
                            itemTaxValue += [[itemLevelTaxDic valueForKey:@"tax_value"] floatValue];
                            
                            printTaxStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",printTaxStr,[itemLevelTaxDic valueForKey:@"taxCode"],@"#####",[itemLevelTaxDic valueForKey:@"taxRate"],@"####",[itemLevelTaxDic valueForKey:@"tax_value"],@"\n"];
                            
                            
                            
                            
                            //commented by Srinivasulu on 17/08/2017....
                            
                            //added by Srinivasulu on 17/08/2017....
                            
                            BOOL isNewDisplay = true;
                            
                            int i = 0;
                            
                            NSMutableDictionary * taxDic;
                            
                            
                            if(billTaxDispalyArr.count){
                                
                                
                                for(i = 0; i < billTaxDispalyArr.count; i++){
                                    
                                    taxDic = [billTaxDispalyArr[i] mutableCopy];
                                    
                                    if( ([[taxDic valueForKey:@"taxRate"] isEqualToString:[itemLevelTaxDic valueForKey:@"taxRate"]])  && ([[taxDic valueForKey:@"taxCode"] isEqualToString:[itemLevelTaxDic valueForKey:@"taxCode"]])){
                                        
                                        float value =  [[itemLevelTaxDic valueForKey:@"tax_value"] floatValue] +  [[taxDic valueForKey:@"tax_value"] floatValue];
                                        
                                        
                                        
                                        
                                        [taxDic setValue:[NSString stringWithFormat:@"%.2f",value]  forKey:@"tax_value"];
                                        
                                        
                                        
                                        
                                        //added by Srinivasulu on 21/08/2017.....
                                        
                                        //                                        float totalBaseAmt =  ([amount floatValue] - [[itemLevelTaxDic valueForKey:@"tax_value"] floatValue]) +  [[taxDic valueForKey:@"base_amount"] floatValue];
                                        //                                        float totalBaseAmt =  [amount floatValue] +  [[taxDic valueForKey:@"base_amount"] floatValue];
                                        
                                        
                                        //                                        [taxDic setValue:[NSString stringWithFormat:@"%.2f",totalBaseAmt]  forKey:@"base_amount"];
                                        
                                        //upto here on 21/08/2017....
                                        
                                        isNewDisplay = false;
                                        break;
                                        
                                    }
                                    
                                }
                                
                            }
                            
                            
                            if(isNewDisplay){
                                
                                NSMutableDictionary * dic = [NSMutableDictionary new];
                                
                                [dic setValue:[itemLevelTaxDic valueForKey:@"taxCode"] forKey:@"taxCode"];
                                [dic setValue:[itemLevelTaxDic valueForKey:@"taxRate"] forKey:@"taxRate"];
                                [dic setValue:[itemLevelTaxDic valueForKey:@"tax_value"] forKey:@"tax_value"];
                                
                                //added by Srinivasulu on 21/08/2017.....
                                
                                //                                [dic setValue:[NSString stringWithFormat:@"%.2f",([amount floatValue] - [[itemLevelTaxDic valueForKey:@"tax_value"] floatValue])] forKey:@"base_amount"];
                                
                                //                                [dic setValue:[NSString stringWithFormat:@"%.2f",[amount floatValue]] forKey:@"base_amount"];
                                
                                
                                //upto here on 21/08/2017....
                                
                                [billTaxDispalyArr addObject:dic];
                            }
                            else{
                                
                                billTaxDispalyArr[i] = taxDic;
                                
                            }
                            
                            
                            
                            //upto here on 17/08/2017....
                            
                        }
                        
                    }
                
                
                //forming taxes string......
                
                NSString * itemPriceWithTaxStr = @"PR:#############";
                
                //added by Srinivasulu on 05/04/2017....
                
                
                NSString * reducePrice = @"0.0";
                
                //                 if (([[temp3  allKeys] containsObject:@"billedItemUnitPrice"] && ![[temp3 objectForKey:@"billedItemUnitPrice"] isKindOfClass:[NSNull class]])) {
                //
                //                     reducePrice = [NSString stringWithFormat:@"%.2f", [[temp3 objectForKey:@"billedItemUnitPrice"] floatValue] ];
                //                 }
                
                reducePrice = amount;
                
                //upot here on 05/08/2017....
                
                //                if(printTaxStr.length - price.length)
                //                for (int k = 0; k <  (printTaxStr.length - price.length); k++) {
                //                    itemPriceWithTaxStr = [NSString stringWithFormat:@"%@%@",itemPriceWithTaxStr,@"#"];
                //
                //
                //                }
                
                if([[temp3 valueForKey:TAX_INCLUSIVE] integerValue])
                    itemPriceWithTaxStr = [NSString stringWithFormat:@"%@%@%.2f%@%@",@"\n",itemPriceWithTaxStr,(reducePrice.floatValue - itemTaxValue) ,@"\n",printTaxStr ];
                else
                    itemPriceWithTaxStr = [NSString stringWithFormat:@"%@%@%.2f%@%@",@"\n",itemPriceWithTaxStr,reducePrice.floatValue ,@"\n",printTaxStr ];
                
                
                
                //added by Srinivasulu on 21/082/107.......
                
                
                if(taxArr.count > i)
                    for(NSDictionary * itemLevelTaxDic in taxArr[i]){
                        
                        if(([[temp3 valueForKey:SKU_ID] isEqualToString:[itemLevelTaxDic valueForKey:SKU_ID]]) && ([[temp3 valueForKey:PLU_CODE] isEqualToString:[itemLevelTaxDic valueForKey:@"plu_code"]])){
                            
                            
                            BOOL isNewDisplay = true;
                            
                            int j = 0;
                            
                            NSMutableDictionary * taxDic;
                            
                            for( j = 0; j < billTaxDispalyArr.count; j++){
                                
                                taxDic = [billTaxDispalyArr[j] mutableCopy];
                                
                                if( ([[taxDic valueForKey:@"taxRate"] isEqualToString:[itemLevelTaxDic valueForKey:@"taxRate"]])  && ([[taxDic valueForKey:@"taxCode"] isEqualToString:[itemLevelTaxDic valueForKey:@"taxCode"]])){
                                    
                                    
                                    float totalBaseAmt =  reducePrice.floatValue;
                                    
                                    if([[temp3 valueForKey:TAX_INCLUSIVE] integerValue])
                                        totalBaseAmt -= itemTaxValue;
                                    
                                    else
                                        totalBaseAmt += itemTaxValue;
                                    
                                    
                                    
                                    if([taxDic.allKeys containsObject:@"base_amount"])
                                        totalBaseAmt +=   [[taxDic valueForKey:@"base_amount"] floatValue];
                                    
                                    [taxDic setValue:[NSString stringWithFormat:@"%.2f",totalBaseAmt]  forKey:@"base_amount"];
                                    
                                    //upto here on 21/08/2017....
                                    
                                    isNewDisplay = false;
                                    break;
                                    
                                    
                                }
                                
                            }
                            
                            
                            if(isNewDisplay){
                                
                                NSLog(@"=======9090234==========");
                                
                            }
                            else{
                                
                                billTaxDispalyArr[j] = taxDic;
                                
                            }
                            
                            
                            
                        }
                        
                    }
                
                
                
                
                //upto here on 21/08/2017....
                
                
                if([[temp3 valueForKey:TAX_INCLUSIVE] integerValue])
                    itemPriceWithTaxStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",itemPriceWithTaxStr,@"################------",@"\n",@"################",reducePrice ,@"\n",@"################------" ];
                else
                    itemPriceWithTaxStr = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%@",itemPriceWithTaxStr,@"################------",@"\n",@"################",(reducePrice.floatValue + itemTaxValue) ,@"\n",@"################------" ];
                
                
                
                allItems = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",allItems,sNO,item,price,hnsCodeStr,@"\n",@"####",qty,rate,disc,@"###",tax,@"###",amount,itemPriceWithTaxStr,@"\n"];
                
                
                
                
                
                //                allItems = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",allItems,sNO,item,price,hnsCodeStr,@"\n",@"####",qty,rate,disc,@"###",tax,@"###",amount,@"\n"];
                
                
                
                //upto here on 25/07/2017......
                
                
                //upto here on 25/04/2017....
                
                //allItems += item + qty + rate + amount + "\n";
                
            }
            
            //chagned by Srinivasulu on 18/08/2017....
            
            float totalTaxValue = 0.00;
            
            
            for(NSDictionary * dic in billTaxDispalyArr){
                
                //                for(NSString  * key  in [dic allKeys]){
                
                totalTaxValue += [[dic valueForKey:@"tax_value"] floatValue];
                
                //                }
                
                
                
            }
            
            
            //upto hereo n 18/08/2017....
            
            
            
            allItems = [NSString stringWithFormat:@"%@%@",allItems,@"--------------------------------------------\n"];
            
            // NSString *totalQTY = @"";
            
            NSString * totalQTY = [NSString stringWithFormat:@"%@%@%@%@",@"TOTAL ITEMS :",@"#############",[NSString stringWithFormat:@"%.2f",quantity],@"\n"];
            //  if (isRoundingRequired) {
            int itemsCount = (int)tempArrayItems.count;
            totalQTY = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@",@"Items/Qty :",@"##########",[NSString stringWithFormat:@"%d",itemsCount],@"/",[NSString stringWithFormat:@"%.2f",quantity],@"####",@"Round:",[NSString stringWithFormat:@"%.2f",roundOffValue],@"\n"];
            
            //        }
            //        else {
            //            totalQTY = [NSString stringWithFormat:@"%@%@%@%@%@%@",@"Items/Qty :",@"##########",[NSString stringWithFormat:@"%.2f",[[NSNumber numberWithInt:[tempArrayItems count]] floatValue]],@"/",[NSString stringWithFormat:@"%.2f",quantity],@"\n"];
            //
            //        }
            NSString *discountString = @"";
            if ((discountValue.text).floatValue > 0) {
                discountString = [NSString stringWithFormat:@"%@%@%@",@"Promo Discount :######################",discountValue.text,@"\n"];
            }
            
            
            NSString *totalAmount = [NSString stringWithFormat:@"%@%@%@%@",@"NET DUE :",@"#############################",[NSString stringWithFormat:@"%@",totalBillValue.text],@"\n"];
            
            
            
            //chagned by Srinivasulu on 18/08/2017....
            
            //            NSString *taxValue = [NSString stringWithFormat:@"%@%@%@%@%@",@"TAX :",@"#################################",[NSString stringWithFormat:@"%@",taxlblValue.text],@"\n",@"--------------------------------------------\n"];
            
            NSString * taxValue = [NSString stringWithFormat:@"%@%@%@%@%@",@"TAX :",@"#################################",[NSString stringWithFormat:@"%.2f",totalTaxValue],@"\n",@"--------------------------------------------\n"];
            
            
            //upto here on 18/08/2017....
            
            
            NSString *grandTotoal = [NSString stringWithFormat:@"%@%@%@%@%@",@"TOTAL :",@"##############################",[NSString stringWithFormat:@"%@",totalBillValue.text],@"\n",@"--------------------------------------------\n"];
            
            //changed by Srinivasulu on 05/05/2017....
            
            if(billDueValue != nil)
                totalAmount = [NSString stringWithFormat:@"%@%@%@%@",@"NET DUE :",@"#############################",[NSString stringWithFormat:@"%@",billDueValue.text],@"\n"];
            
            grandTotoal = [NSString stringWithFormat:@"%@%@%@%@",@"NET TOTAL :",@"###########################",[NSString stringWithFormat:@"%@",totalBillValue.text],@"\n"];
            
            //upto here on 05/05/2017....
            
            
            NSString *paymentString = @"";
            
            float cashTotal = 0.0f;
            float cardTotal = 0.0f;
            float sodexoTotal = 0.0f;
            float ticketTotal = 0.0f;
            float giftVouchTotal = 0.0f;
            float creditTotal = 0.0f;
            NSString *creditNoteNo = @"";
            
            for (NSDictionary *paymentDic in tempPaymentDetails) {
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Cash"]) {
                    cashTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Card"]) {
                    cardTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Sodexo"]) {
                    sodexoTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Ticket"]) {
                    ticketTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"giftvoucher"]) {
                    giftVouchTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                }
                if ([[paymentDic valueForKey:MODE_OF_PAY] isEqualToString:@"Credit Note"]) {
                    creditTotal += [[paymentDic valueForKey:RECEIVED_AMOUNT] floatValue];
                    creditNoteNo = [[paymentDic valueForKey:@"couponNumber"] uppercaseString];
                }
            }
            
            //added by Srinivasulu on 25/04/2017....
            if ( (cashTotal == 0) && (cardTotal == 0) && (sodexoTotal == 0) && (ticketTotal == 0) && (giftVouchTotal == 0) && (creditTotal == 0)){
                
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Cash###################",[NSString stringWithFormat:@"%.2f",cashTotal],@"\n"];
                
            }
            
            
            
            //upto here on 25/04/2017....
            
            
            if (cashTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Cash###################",[NSString stringWithFormat:@"%.2f",cashTotal],@"\n"];
                
            }
            if (cardTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Card###################",[NSString stringWithFormat:@"%.2f",cardTotal],@"\n"];
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Card ###",bankName,@"\n"];
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Appr ###",appCode,@"\n"];
                
            }
            if (sodexoTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Sodexo##################",[NSString stringWithFormat:@"%.2f",sodexoTotal],@"\n"];
                
            }
            if (ticketTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Ticket##################",[NSString stringWithFormat:@"%.2f",ticketTotal],@"\n"];
                
            }
            if (giftVouchTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@",paymentString,@"Amount Paid by Gift Voucher##############",[NSString stringWithFormat:@"%.2f",giftVouchTotal],@"\n"];
                
            }
            if (creditTotal > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",paymentString,@"Amount Paid By Credit Note#############",[NSString stringWithFormat:@"%.2f",creditTotal],@"\n",@"Credit Note No############",creditNoteNo,@"\n"];
                
            }
            float returnAmount = 0.0f;
            for (NSDictionary *returnDic in denominations) {
                if ([[returnDic valueForKey:@"returnDenominationNo"] intValue] > 0 && [[returnDic valueForKey:@"paidDenominationNo"] intValue] == 0) {
                    returnAmount += [[returnDic valueForKey:@"returnAmount"] floatValue];
                }
            }
            if (totalChangeReturnStr.floatValue > 0) {
                paymentString = [NSString stringWithFormat:@"%@%@%.2f%@",paymentString,@"Amount Returned To Customer##############",totalChangeReturnStr.floatValue,@"\n"];
            }
            
            paymentString = [NSString stringWithFormat:@"%@%@",paymentString,@"*******************************************\n"];
            
            //        NSString *wishMsg = [NSString stringWithFormat:@"%@",@"#####We accept Sodexo & Ticket Restuarant\n"];
            //        wishMsg = [NSString stringWithFormat:@"%@%@",wishMsg,@"#####We accept all major credit cards\n\n\n\n\n"];
            //        wishMsg = [NSString stringWithFormat:@"%@%@",wishMsg,@"#####We accept all major credit card\n\n\n\n\n"];
            
            
            //added by Srinivasulu on 22/04/20217....
            NSString * netSavingStr;
            
            if((netTotalForDiscountCalculationValue - (totalBillValue.text).floatValue) > 0)
                
                netSavingStr = [NSString stringWithFormat:@"%@%@%@%@%@",@"Net Savings :",@"#########################",[NSString stringWithFormat:@"%.2f",(netTotalForDiscountCalculationValue - (totalBillValue.text).floatValue)] ,@"\n",@"--------------------------------------------\n"];
            
            else
                
                netSavingStr = [NSString stringWithFormat:@"%@%@%@%@%@",@"Net Savings :",@"#########################",[NSString stringWithFormat:@"%.2f",((discountValue.text).floatValue + netDiscountValue)] ,@"\n",@"--------------------------------------------\n"];
            
            
            
            NSString * customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  TAKE AWAY\n",@"--------------------------------------------\n"];
            
            
            
            if([paymentTypeVal.text isEqualToString:@"Door Delivery"] ){
                
                customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  HOME DELIVERY\n",@"--------------------------------------------\n"];
                
                
                if(customerObj.allKeys.count)
                    customerDetailsStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",@"Customer Name :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"name"] defaultReturn:@"--"],@"\n",@"Mobile NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"phone"] defaultReturn:@"--"],@"\n",@"HOME DELIVERY",@"\n",@"House NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"houseNo"] defaultReturn:@"--"],@"\n",@"Street Name:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"street"] defaultReturn:@"--"],@"\n",@"Land Mark:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"landMark"] defaultReturn:@"--"],@" \n",@"--------------------------------------------\n"];
                
                
            }
            
            //added by Srinivasulu on 25/04/2017....
            
            if([billStatusStr containsString:@"CB"] ){
                
                customerDetailsStr = [NSString stringWithFormat:@"%@%@",@"                  CREDIT BILL\n",@"--------------------------------------------\n"];
                
                if(customerObj.allKeys.count)
                    customerDetailsStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",@"Customer Name :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"name"] defaultReturn:@"--"],@"\n",@"Mobile NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"phone"] defaultReturn:@"--"],@"\n",@"CREDIT BILL",@"\n",@"House NO :",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"houseNo"] defaultReturn:@"--"],@"\n",@"Street Name:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"street"] defaultReturn:@"--"],@"\n",@"Land Mark:",@"##",[self checkGivenValueIsNullOrNil:[customerObj valueForKey:@"landMark"] defaultReturn:@"--"],@" \n",@"--------------------------------------------\n"];
                
                
            }
            
            //upto here on 25/04/217....
            
            
            
            
            //upto here on 22/04/2017....
            
            NSString *wishMsg = [WebServiceUtility getFooter];
            
            wishMsg = [NSString stringWithFormat:@"%@%@",wishMsg,@"\n\n\n\n\n"];
            
            if ((discountValue.text).floatValue > 0) {
                //changed by Srinivasul on 22/04/2017....
                
                //            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,billHeader,posString,userId,Date,session_Date,bill,itemHeader,allItems,totalQTY,discountString,totalAmount,taxValue,paymentString,wishMsg];
                finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,billHeader,posString,userId,Date,session_Date,bill,itemHeader,allItems,totalQTY,discountString,totalAmount,taxValue,paymentString,netSavingStr,customerDetailsStr,wishMsg];
                
                
                //changed by Srinivasulu on 05/05/2017...
                
                if(billDueValue != nil)
                    finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,billHeader,posString,userId,Date,session_Date,bill,itemHeader,allItems,totalQTY,discountString,grandTotoal,totalAmount,taxValue,paymentString,netSavingStr,customerDetailsStr,wishMsg];
                
                
                //upto here on 05/05/2017....
                
                
                
                //upto here on 22/04/2017....
                
            }
            else{
                //changed by Srinivasul on 22/04/2017....
                
                //            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,billHeader,bill,posString,Date,userId,session_Date,itemHeader,allItems,totalQTY,totalAmount,taxValue,paymentString,wishMsg];
                
                finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,billHeader,bill,posString,Date,userId,session_Date,itemHeader,allItems,totalQTY,totalAmount,taxValue,paymentString,netSavingStr,customerDetailsStr,wishMsg];
                
                
                //changed by Srinivasulu on 05/05/2017...
                
                if(billDueValue != nil)
                    finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,billHeader,bill,posString,Date,userId,session_Date,itemHeader,allItems,totalQTY,grandTotoal,totalAmount,taxValue,paymentString,netSavingStr,customerDetailsStr,wishMsg];
                
                
                //upto here on 05/05/2017....
                
                //upto here on 22/04/2017....
                
            }
            
            //added by Srinivasulu on 12/07/2017.....
            
            //added by Srinivasulu on 17/08/2017.....
            
            //changed by Srinivaslulu on 21/08/2017...
            //reason changed in format....
            
            //            for(NSDictionary * dic in billTaxDispalyArr)
            //                taxesStr =[NSString stringWithFormat:@"%@%@%@%@%@%@%@%@",taxesStr,@"####",[dic valueForKey:@"taxCode"],@"#######",[dic valueForKey:@"taxRate"],@"#####",[dic valueForKey:@"tax_value"],@"\n"];
            
            NSMutableOrderedSet * taxesKeys = [NSMutableOrderedSet new];
            
            
            for(NSDictionary * dic in billTaxDispalyArr)
                [taxesKeys addObject:[dic valueForKey:@"taxCode"]];
            
            for(NSString * taxNameStr in taxesKeys){
                
                taxesStr = [NSString stringWithFormat:@"%@%@%@%@%@", taxesStr, @"####", taxNameStr, @"####Rate#######Base_Amt####Tax_Amt", @"\n"];
                
                float totalBaseValue = 0.0;
                float totalTaxValue = 0.0;
                
                for(NSDictionary * dic in billTaxDispalyArr){
                    
                    if([[dic valueForKey:@"taxCode"] isEqualToString:taxNameStr]){
                        taxesStr = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@", taxesStr, @"############", [dic valueForKey:@"taxRate"],
                                    @"%",@"######",[dic valueForKey:@"base_amount"],@"######",[dic valueForKey:@"tax_value"],@"\n"];
                        
                        totalBaseValue +=  [[dic valueForKey:@"base_amount"] floatValue] ;
                        totalTaxValue += [[dic valueForKey:@"tax_value"] floatValue] ;
                        
                    }
                }
                
                taxesStr =  [NSString stringWithFormat:@"%@%@", taxesStr,@"#######################--------####-------"];
                
                taxesStr =  [NSString stringWithFormat:@"%@%@%@%.2f%@%.2f", taxesStr, @"\n",@"#######################",totalBaseValue,@"######",totalTaxValue];
                
                taxesStr =  [NSString stringWithFormat:@"%@%@%@%@", taxesStr, @"\n",@"#######################--------####-------",@"\n"];
                
                
            }
            
            //            for(NSDictionary * dic in billTaxDispalyArr){
            //
            //                taxesStr =[NSString stringWithFormat:@"%@%@%@%@%@%@%@%@",taxesStr,@"####",[dic valueForKey:@"taxCode"],@"#######",[dic valueForKey:@"taxRate"],@"#####",[dic valueForKey:@"tax_value"],@"\n"];
            //
            //                    taxesStr =[NSString stringWithFormat:@"%@%@%@%@%@%@%@%@",taxesStr,@"####",[dic valueForKey:@"taxCode"],@"#######",[dic valueForKey:@"taxRate"],@"#####",[dic valueForKey:@"tax_value"],@"\n"];
            //            }
            //upto here on 21/08/2017....
            
            
            //upto here on 17/08/2017....
            
            taxesStr = [NSString stringWithFormat:@"%@%@%@", taxesStr,@"\n",@"--------------------------------------------\n"];
            
            finalPrintMessage = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",storeAddress,billHeader,bill,posString,Date,userId,session_Date,itemHeader,allItems,totalQTY,grandTotoal,totalAmount,taxValue,taxesStr,paymentString,netSavingStr,customerDetailsStr,wishMsg];
            
            //upto here on 12/07/2017....
        }
        
        finalPrintMessage = [finalPrintMessage stringByReplacingOccurrencesOfString:@"#" withString:@" "];
    }
    @catch (NSException *exception) {
        
        finalPrintMessage = @"";
    }
    @finally{
        
        return finalPrintMessage;
    }
}

@end
