
//
//  OfflineServices.m
//  OmniRetailer
//
//  Created by Sonali on 7/10/15.
//
//

#import "OfflineBillingServices.h"
#import "sqlite3.h"
#import "DataBaseConnection.h"
#import "SkuServiceSvc.h"
#import "Global.h"
#import "CurrentDeals.h"
#import "Offers.h"
#import "UtilityMasterServiceSvc.h"
#import "WebServiceController.h"
#import "RequestHeader.h"
#import "OmniHomePage.h"
#import "ProducGroupMasterServicesSvc.h"
#import "CampaignRequestModel.h"
#import "OfferModel.h"
#import "ApplyOfferModel.h"
#import "OfferRangesModel.h"
#import "DealModel.h"
#import "ApplyDealModel.h"
#import "DealRangesModel.h"
#import "SkuDetailsModel.h"

#import "OfferProducts.h"
//<CommonCrypto/CommonCryptor.h>
#import <CommonCrypto/CommonCryptor.h>

static sqlite3 * database = nil;
static sqlite3_stmt * insertStmt = nil;
static sqlite3_stmt * deleteStmt = nil;
static sqlite3_stmt * selectStmt = nil;
static sqlite3_stmt * selectStmt_ = nil;
//static sqlite3_stmt *createStmt = nil;


NSMutableArray *rangesArr;
NSMutableDictionary *dealsDic;
NSMutableDictionary *offersDic;
NSMutableDictionary *billDetails;

int skuStartIndex_ = 0;
int totalRecords_ = 0;
int priceStartIndex_ = 0;
int groupsStartIndex = 0;
int totalAvailableGroups = 0;
int groupsChildsStartIndex = 0;
int totalAvailableGroupsChilds = 0;

@implementation OfflineBillingServices
#pragma -mark Creation of all offline tables along with indexes....

-(void)CreateAllOfflineTablesAlongWithIndexes{
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    static sqlite3 * localDatabase = nil;
    @try {
        NSLog(@"----Start Time ---- SKU_MASTER----");
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char * errMsg;
           
//            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
//            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
//            {
//                isCompleteDataInserted = true;
//                NSLog(@"----Committed -- SKU_MASTER ----");
//            }
//            else
//            {
//                isCompleteDataInserted = false;
//                NSLog(@"----Commit -- failed -- SKU_MASTER ----");
//            }
            //skuMaster related.. -- 1
            const char * createTableSqlStatement  = "create table if not exists `sku_master` (  `sku_Id` VARCHAR(100) NOT NULL,  `product_Id` VARCHAR(100) NOT NULL,  `ean` VARCHAR(100) NULL DEFAULT NULL,  `supplier_name` VARCHAR(150) NULL DEFAULT NULL,  `brand_code` VARCHAR(100) NULL DEFAULT NULL,  `status` VARCHAR(100) NULL DEFAULT NULL,  `manufacturer_code` VARCHAR(100) NULL DEFAULT NULL,  `manufacturer_name` VARCHAR(200) NULL DEFAULT NULL,  `uom` VARCHAR(50) NULL DEFAULT NULL,  `uom1` VARCHAR(20) NULL DEFAULT NULL,  `uom2` VARCHAR(20) NULL DEFAULT NULL,  `quantity` FLOAT NULL DEFAULT NULL,  `pack_size` INT(11) NULL DEFAULT NULL,  `color` VARCHAR(100) NULL DEFAULT NULL,  `pattern_code` VARCHAR(100) NULL DEFAULT NULL,  `re_order_point` FLOAT NULL DEFAULT NULL,  `order_quantity` FLOAT NULL DEFAULT NULL,  `min_sale_qty` FLOAT NULL DEFAULT NULL,  `lead_time_days` INT(50) NULL DEFAULT NULL,  `max_stock` FLOAT NULL DEFAULT NULL,  `stock` FLOAT NULL DEFAULT NULL,  `tax_code` VARCHAR(50) NULL DEFAULT NULL,  `fr_tax_code` INT(11) NULL DEFAULT NULL,  `mark_up` VARCHAR(100) NULL DEFAULT NULL,  `mark_down` VARCHAR(100) NULL DEFAULT NULL,  `running_plu_number` VARCHAR(100) NULL DEFAULT NULL,  `model` VARCHAR(100) NULL DEFAULT NULL,  `open_rate` FLOAT NULL DEFAULT NULL,  `last_cost` FLOAT NULL DEFAULT NULL,  `average_cost` FLOAT NULL DEFAULT NULL,  `minimum_price` FLOAT NULL DEFAULT NULL,  `created_date` DATE NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `not_taxable` TINYINT(4) NULL DEFAULT NULL,  `jit_stock` TINYINT(4) NULL DEFAULT NULL,  `hsn_code` CHAR(50) NULL DEFAULT NULL,  `zero_stock` TINYINT(4) NULL DEFAULT NULL,  `picture1` VARCHAR(150) NULL DEFAULT NULL,  `picture2` VARCHAR(150) NULL DEFAULT NULL,  `picture3` VARCHAR(150) NULL DEFAULT NULL,  `discountable` TINYINT(4) NULL DEFAULT NULL,  `allow_decimals` TINYINT(4) NULL DEFAULT NULL,  `store_location` VARCHAR(1000) NULL DEFAULT NULL,  `short_description` VARCHAR(250) NULL DEFAULT NULL,  `waranty_details` VARCHAR(250) NULL DEFAULT NULL,  `remarks` VARCHAR(250) NULL DEFAULT NULL,  `editable` TINYINT(4) NULL DEFAULT NULL,  `is_cost_price_editable` TINYINT(4) NULL DEFAULT '1',  `uom_label` CHAR(20) NULL DEFAULT NULL,  `alternate_sku_id` CHAR(100) NULL DEFAULT NULL,  `season_code` CHAR(25) NULL DEFAULT NULL,  `alias_name` VARCHAR(200) NULL DEFAULT NULL,  `item_type` CHAR(50) NULL DEFAULT NULL,  `item_design` CHAR(50) NULL DEFAULT NULL,  `is_manufactured_Item` TINYINT(4) NULL DEFAULT '0',  `is_packed` TINYINT(4) NULL DEFAULT '0',  `is_tax_exclusive` TINYINT(4) NULL DEFAULT '0',  `is_tax_on_discounted_price` TINYINT(4) NULL DEFAULT '1',  `net_realizable_value` DECIMAL(10,2) NULL DEFAULT '0.00',  `section` CHAR(60) NULL DEFAULT '',  `fabric` CHAR(60) NULL DEFAULT '',  `product_class` CHAR(100) NULL DEFAULT NULL,  `tracking_recquired` TINYINT(4) NULL DEFAULT '0',  `product_category` CHAR(50) NULL DEFAULT NULL,  `product_subcategory` CHAR(50) NULL DEFAULT NULL,  `product_usage` VARCHAR(250) NULL DEFAULT NULL,  `product_side_effects` VARCHAR(250) NULL DEFAULT NULL,  `product_precautions` VARCHAR(250) NULL DEFAULT NULL,  `product_handing` VARCHAR(50) NULL DEFAULT NULL,  `product_consumption_interaction` VARCHAR(100) NULL DEFAULT NULL,  `is_combo` TINYINT(4) NULL DEFAULT '0',  `primary_department` VARCHAR(100) NULL DEFAULT NULL,  `secondary_department` VARCHAR(100) NULL DEFAULT NULL,  PRIMARY KEY (`sku_Id`) )";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- SKU_MASTER TABLE Created Sucessfully ----");
            }
            
            
            const char * createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS sku_master_index ON sku_master (sku_Id,ean,short_description)";

            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- SKU_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            //skuEans related.. -- 2
             createTableSqlStatement  = "create table if not exists sku_eans (s_no int, sku_id text, ean text,status text,remarks text,updated_date text,store_location text,PRIMARY KEY(s_no))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- SKU_EANS TABLE Created Sucessfully ----");
            }
            
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS sku_eans_index ON sku_eans (sku_id,ean)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- SKU_EANS TABLE INDEX Created Sucessfully ----");
            }
            
            //skuPriceList related.. -- 3
            createTableSqlStatement  = "create table if not exists `sku_price_list` (  `sku_id` VARCHAR(100) NOT NULL, `cost_price` FLOAT NULL DEFAULT NULL, `description` VARCHAR(250) NULL DEFAULT NULL, `ean` VARCHAR(250) NULL DEFAULT NULL, `price` FLOAT NULL DEFAULT NULL, `sale_price` FLOAT NOT NULL, `wholesale_price` FLOAT NOT NULL, `extra_price` FLOAT NULL DEFAULT NULL, `plu_code` VARCHAR(100) NULL DEFAULT NULL, `created_date` DATE NULL DEFAULT NULL, `updated_date` DATE NULL DEFAULT NULL, `expiry_date` DATETIME NULL DEFAULT NULL, `size` VARCHAR(100) NULL DEFAULT NULL, `color` VARCHAR(100) NULL DEFAULT NULL, `color_shade` VARCHAR(100) NULL DEFAULT NULL, `mbq` VARCHAR(100) NULL DEFAULT NULL, `quantity_in_hand` DOUBLE NOT NULL, `acp` VARCHAR(100) NULL DEFAULT NULL, `store_location` VARCHAR(100) NULL DEFAULT NULL, `best_before_date` DATETIME NULL DEFAULT NULL, `effective_from_date` DATETIME NULL DEFAULT NULL, `blocked_quantity` FLOAT NULL DEFAULT NULL, `scraped_quantity` FLOAT NULL DEFAULT NULL, `product_range` VARCHAR(100) NULL DEFAULT NULL, `measure_range` VARCHAR(100) NULL DEFAULT NULL, `style_range` CHAR(50) NULL DEFAULT NULL, `alternate_plu_code` VARCHAR(100) NULL DEFAULT NULL, `conf_price` CHAR(25) NULL DEFAULT NULL, `product_batch_no` CHAR(25) NULL DEFAULT NULL, `product_ser_no` CHAR(25) NULL DEFAULT NULL, `manufacturing_date` DATETIME NULL DEFAULT NULL, `manufacturer_id` CHAR(200) NULL DEFAULT NULL, `package_id` CHAR(25) NULL DEFAULT NULL, `rfid_tag` CHAR(25) NULL DEFAULT NULL, `warranty_period` DATETIME NULL DEFAULT NULL, `set_code` CHAR(30) NULL DEFAULT NULL, `cash_discount` DECIMAL(10,2) NULL DEFAULT NULL, `reorder_point` DECIMAL(10,1) NULL DEFAULT '0.0', `discount_type` CHAR(60) NULL DEFAULT NULL, `discount` FLOAT NULL DEFAULT NULL, `utility` VARCHAR(300) NULL DEFAULT NULL, `business_category` VARCHAR(50) NULL DEFAULT NULL, `business_sub_category` VARCHAR(50) NULL DEFAULT NULL, `technical_specification` VARCHAR(250) NULL DEFAULT NULL, `product_sub_class` CHAR(100) NULL DEFAULT NULL, `packaging_date` DATE NULL DEFAULT NULL, `pack_size` INT(11) NULL DEFAULT '1', `min_sale_qty` DECIMAL(10,2) NULL DEFAULT '1.00', `sku_status` TINYINT(4) NULL DEFAULT '1', PRIMARY KEY (plu_code))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- SKU_PRICE_LIST TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS sku_price_list_index ON sku_price_list (sku_Id,ean,plu_code,description)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- SKU_PRICE_LIST TABLE INDEX Created Sucessfully ----");
            }
            
            //deal related.. -- 4
            createTableSqlStatement  = "CREATE TABLE IF NOT EXISTS `deal` (  `deal_Id` VARCHAR(255) NOT NULL,  `claim_coupons` TINYINT(4) NULL DEFAULT NULL,  `claim_loyalty_points` TINYINT(4) NULL DEFAULT NULL,  `claim_gift_vouchers` TINYINT(4) NULL DEFAULT NULL,  `deal_category` VARCHAR(255) NULL DEFAULT NULL,  `deal_description` VARCHAR(255) NULL DEFAULT NULL,  `deal_image` VARCHAR(150) NULL DEFAULT NULL,  `deal_name` VARCHAR(255) NULL DEFAULT NULL,  `deal_status` CHAR(15) NULL DEFAULT NULL,  `end_date` DATETIME NULL DEFAULT NULL,  `priority` TINYINT(4) NULL DEFAULT NULL,  `deal_plu_code` VARCHAR(250) NULL DEFAULT NULL,  `sell_plu_code` VARCHAR(250) NULL DEFAULT NULL,  `deal_skus` VARCHAR(255) NULL DEFAULT NULL,  `deal_products` VARCHAR(250) NULL DEFAULT NULL,  `sell_sku_ids` VARCHAR(255) NULL DEFAULT NULL,  `sell_products` VARCHAR(255) NULL DEFAULT NULL,  `start_date` DATE NULL DEFAULT NULL,  `store_location` VARCHAR(255) NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `deal_image_text` VARCHAR(250) NULL DEFAULT NULL,  `deal_image_text_font` VARCHAR(45) NULL DEFAULT NULL,  `deal_image_size` VARCHAR(45) NULL DEFAULT NULL,  `deal_image_color` VARCHAR(45) NULL DEFAULT NULL,  `deal_image_bold` TINYINT(4) NULL DEFAULT NULL,  `deal_image_italic` TINYINT(4) NULL DEFAULT NULL,  `deal_image_strike` TINYINT(4) NULL DEFAULT NULL,  `sale_price_text` VARCHAR(250) NULL DEFAULT NULL,  `sale_price_font` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_size` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_color` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_bold` TINYINT(4) NULL DEFAULT NULL,  `sale_price_italic` TINYINT(4) NULL DEFAULT NULL,  `sale_price_strike` TINYINT(4) NULL DEFAULT NULL,  `deal_price_text` VARCHAR(250) NULL DEFAULT NULL,  `deal_price_font` VARCHAR(45) NULL DEFAULT NULL,  `deal_price_size` VARCHAR(45) NULL DEFAULT NULL,  `deal_price_color` VARCHAR(45) NULL DEFAULT NULL,  `deal_price_bold` TINYINT(4) NULL DEFAULT NULL,  `deal_price_italic` TINYINT(4) NULL DEFAULT NULL,  `deal_price_strike` TINYINT(4) NULL DEFAULT NULL,  `is_banner` TINYINT(4) NULL DEFAULT NULL,  `authorised_by` VARCHAR(50) NULL DEFAULT NULL,  `closed_by` VARCHAR(50) NULL DEFAULT NULL,  `closed_on` DATE NULL DEFAULT NULL,  `closed_reason` VARCHAR(200) NULL DEFAULT NULL,  `isRepeat` TINYINT(4) NULL DEFAULT NULL,  `allow_multiple_discounts` TINYINT(4) NULL DEFAULT NULL,  `day1` TINYINT(4) NULL DEFAULT NULL,  `day2` TINYINT(4) NULL DEFAULT NULL,  `day3` TINYINT(4) NULL DEFAULT NULL,  `day4` TINYINT(4) NULL DEFAULT NULL,  `day5` TINYINT(4) NULL DEFAULT NULL,  `day6` TINYINT(4) NULL DEFAULT NULL,  `day7` TINYINT(4) NULL DEFAULT NULL,  `deal_start_time` TIME NULL DEFAULT NULL,  `deal_end_time` TIME NULL DEFAULT NULL,  `sell_group_id` VARCHAR(50) NULL DEFAULT NULL,  `deal_group_id` VARCHAR(50) NULL DEFAULT NULL,  `sale_product_category` VARCHAR(100) NULL DEFAULT NULL,  `sale_product_sub_category` VARCHAR(100) NULL DEFAULT NULL,  `deal_product_category` VARCHAR(100) NULL DEFAULT NULL,  `is_combo` TINYINT(4) NULL DEFAULT '0',  `is_lowest_price_item` TINYINT(4) NULL DEFAULT '0',  `access_sequence_num` INT(11) NULL DEFAULT '0',  `deal_product_sub_category` VARCHAR(100) NULL DEFAULT NULL,  `is_customer_specific` TINYINT(4) NULL DEFAULT '0',  `created_date` DATETIME NULL DEFAULT NULL,  `user_name` VARCHAR(50) NULL DEFAULT NULL,  `role_name` VARCHAR(100) NULL DEFAULT NULL,  PRIMARY KEY (`deal_Id`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- DEAL TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS deal_index ON deal (deal_Id, deal_category, deal_description, deal_name)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- DEAL TABLE INDEX Created Sucessfully ----");
            }
            
            //deal_ranges related.. -- 5
            createTableSqlStatement  = "create table if not exists deals_ranges (deal_id text,deal_quantity float,minimum_purchase_quantity float,minimum_purchase_amount double,range_ID text,description text, updatedDate text, group_id text, item_id text, reward_type text, range_mode text, PRIMARY KEY (range_ID))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- DEAL_RANGES TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS deals_ranges_index ON deals_ranges (deal_Id, reward_type)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- DEAL_RANGES TABLE INDEX Created Sucessfully ----");
            }
            
            //offer related.. -- 6
            createTableSqlStatement  = "CREATE TABLE IF NOT EXISTS `offer` (  `offer_Id` VARCHAR(255) NOT NULL,  `claim_coupons` INT(11) NULL DEFAULT NULL,  `claim_loyalty_points` INT(11) NULL DEFAULT NULL,  `claim_gift_vouchers` INT(11) NULL DEFAULT NULL,  `end_date` DATETIME NULL DEFAULT NULL,  `offer_category` VARCHAR(255) NULL DEFAULT NULL,  `offer_description` VARCHAR(255) NULL DEFAULT NULL,  `offer_image` VARCHAR(150) NULL DEFAULT NULL,  `offer_name` VARCHAR(255) NULL DEFAULT NULL,  `offer_status` INT(11) NULL DEFAULT NULL,  `priority` INT(11) NULL DEFAULT NULL,  `product_category` VARCHAR(100) NULL DEFAULT NULL,  `sell_products` VARCHAR(255) NULL DEFAULT NULL,  `sell_sku_ids` VARCHAR(255) NULL DEFAULT NULL,  `start_date` DATETIME NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `store_location` VARCHAR(255) NULL DEFAULT NULL,  `reward_type` VARCHAR(50) NULL DEFAULT NULL,  `sell_plu_code` VARCHAR(200) NULL DEFAULT NULL,  `offer_image_text` VARCHAR(250) NULL DEFAULT NULL,  `offer_image_text_font` VARCHAR(45) NULL DEFAULT NULL,  `offer_image_size` VARCHAR(45) NULL DEFAULT NULL,  `offer_image_color` VARCHAR(45) NULL DEFAULT NULL,  `offer_image_bold` TINYINT(4) NULL DEFAULT NULL,  `offer_image_italic` TINYINT(4) NULL DEFAULT NULL,  `offer_image_strike` TINYINT(4) NULL DEFAULT NULL,  `sale_price_text` VARCHAR(250) NULL DEFAULT NULL,  `sale_price_font` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_size` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_color` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_bold` TINYINT(4) NULL DEFAULT NULL,  `sale_price_italic` TINYINT(4) NULL DEFAULT NULL,  `sale_price_strike` TINYINT(4) NULL DEFAULT NULL,  `offer_price_text` VARCHAR(250) NULL DEFAULT NULL,  `offer_price_font` VARCHAR(45) NULL DEFAULT NULL,  `offer_price_size` VARCHAR(45) NULL DEFAULT NULL,  `offer_price_color` VARCHAR(45) NULL DEFAULT NULL,  `offer_price_bold` TINYINT(4) NULL DEFAULT NULL,  `offer_price_italic` TINYINT(4) NULL DEFAULT NULL,  `offer_price_strike` TINYINT(4) NULL DEFAULT NULL,  `is_banner` TINYINT(4) NULL DEFAULT NULL,  `authorised_by` VARCHAR(50) NULL DEFAULT NULL,  `closed_by` VARCHAR(50) NULL DEFAULT NULL,  `closed_on` DATE NULL DEFAULT NULL,  `closed_reason` VARCHAR(200) NULL DEFAULT NULL,  `allow_multiple_discounts` TINYINT(4) NULL DEFAULT NULL,  `day1` TINYINT(4) NULL DEFAULT NULL,  `day2` TINYINT(4) NULL DEFAULT NULL,  `day3` TINYINT(4) NULL DEFAULT NULL,  `day4` TINYINT(4) NULL DEFAULT NULL,  `day5` TINYINT(4) NULL DEFAULT NULL,  `day6` TINYINT(4) NULL DEFAULT NULL,  `day7` TINYINT(4) NULL DEFAULT NULL,  `isRepeat` TINYINT(4) NULL DEFAULT NULL,  `offer_start_time` TIME NULL DEFAULT NULL,  `offer_end_time` TIME NULL DEFAULT NULL,  `sell_group_id` VARCHAR(50) NULL DEFAULT NULL,  `product_sub_category` VARCHAR(100) NULL DEFAULT NULL,  `is_combo` TINYINT(1) NULL DEFAULT '0',  `is_lowest_price_item` TINYINT(1) NULL DEFAULT '0',  `access_sequence_num` INT(11) NULL DEFAULT '0',  `is_customer_specific` TINYINT(4) NULL DEFAULT '0',  `created_date` DATETIME NULL DEFAULT NULL,  `product_specific_flag` TINYINT(4) NULL DEFAULT '0',  `is_price_based_configuration` TINYINT(4) NULL DEFAULT '0',  `is_for_all_items` TINYINT(4) NULL DEFAULT '0',  `is_allow_exchanges` TINYINT(4) NULL DEFAULT '0',  `is_allow_returns` TINYINT(4) NULL DEFAULT '0',  `brand` VARCHAR(50) NULL DEFAULT NULL,  `section` VARCHAR(60) NULL DEFAULT NULL,  `product_department` VARCHAR(100) NULL DEFAULT NULL,  `supplier_id` VARCHAR(50) NULL DEFAULT NULL,  `transfer_to_customer` TINYINT(4) NULL DEFAULT '0',  `user_name` VARCHAR(50) NULL DEFAULT NULL,  `role_name` VARCHAR(100) NULL DEFAULT NULL,  PRIMARY KEY (`offer_Id`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- OFFER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS offer_index ON offer (offer_Id, offer_category, offer_description, offer_name)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- OFFER TABLE INDEX Created Sucessfully ----");
            }
            
            //offer_ranges related.. -- 7
            createTableSqlStatement  = "create table if not exists offer_ranges (offer_id text,minimum_purchase_quantity float,minimum_purchase_amount double,range_ID text,description text,reward_value text, item_id text, group_id text, reward_type text, range_mode text, reward_qty int,start_price_range float,end_price_range float, PRIMARY KEY (range_ID))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- OFFER_RANGES TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS offer_ranges_index ON offer_ranges (offer_id, reward_type)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- OFFER_RANGES TABLE INDEX Created Sucessfully ----");
            }
            
            //customer_filter related.. -- 8
            createTableSqlStatement  = "create table if not exists customer_filter(s_no INT(11) NOT NULL ,discount_id VARCHAR(20) NULL DEFAULT NULL,`discount_type` VARCHAR(20) NULL DEFAULT NULL,`country` VARCHAR(50) NULL DEFAULT NULL,`customer_type` VARCHAR(50) NULL DEFAULT NULL,`region` VARCHAR(50) NULL DEFAULT NULL,`age` VARCHAR(50) NULL DEFAULT NULL,`city` VARCHAR(50) NULL DEFAULT NULL,`gender` VARCHAR(10) NULL DEFAULT NULL,`sales_zone` VARCHAR(50) NULL DEFAULT NULL,`referrals` VARCHAR(100) NULL DEFAULT NULL,`rating` FLOAT NULL DEFAULT NULL,`start_date` TEXT ,`end_date` TEXT ,`purchase_channel` VARCHAR(50) NULL DEFAULT NULL,`product_category` VARCHAR(50) NULL DEFAULT NULL,`product` VARCHAR(100) NULL DEFAULT NULL,`turn_over_start_price` FLOAT NULL DEFAULT NULL,`turn_over_end_price` FLOAT NULL DEFAULT NULL,`apply_rules_engine` INT DEFAULT '1',`remarks` VARCHAR(50) NULL DEFAULT NULL,`maritial_status` VARCHAR(50) NULL DEFAULT NULL,`occupation` VARCHAR(50) NULL DEFAULT NULL,`income_group` VARCHAR(50) NULL DEFAULT NULL,`service_rating` FLOAT NULL DEFAULT NULL,`children` VARCHAR(50) NULL DEFAULT NULL,`other_details` VARCHAR(200) NULL DEFAULT NULL,`department` CHAR(60) NULL DEFAULT NULL,`sub_department` CHAR(60) NULL DEFAULT NULL,PRIMARY KEY (`s_no`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMER_FILTER TABLE Created Sucessfully ----");
            }
            
            
            //customer_filter related.. -- 9
            createTableSqlStatement  = "create table if not exists `offer_products` ( `sno` INT(11),  `offer_id` CHAR(15) NULL DEFAULT NULL,  `sku_id` VARCHAR(25) NULL DEFAULT NULL,  `plucode` VARCHAR(25) NULL DEFAULT NULL,  `sku_description` VARCHAR(250) NULL DEFAULT NULL,  `min_purchase_qty` FLOAT NULL DEFAULT '0',  `reward_qty` FLOAT NULL DEFAULT '0',  `reward_value` FLOAT NULL DEFAULT '0',  `category` VARCHAR(100) NULL DEFAULT NULL,  `sub_category` VARCHAR(100) NULL DEFAULT NULL,  `brand` VARCHAR(50) NULL DEFAULT NULL,  `section` VARCHAR(60) NULL DEFAULT NULL,  `department` CHAR(50) NULL DEFAULT NULL,  `model` VARCHAR(50) NULL DEFAULT NULL,  `size` CHAR(60) NULL DEFAULT NULL,  `discount_type` CHAR(60) NULL DEFAULT NULL,  `ean` VARCHAR(50) NULL DEFAULT NULL,  PRIMARY KEY (`offer_id`,'plucode'))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- OFFER_PRODUCTS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS offer_products_index ON offer_products (offer_id, sku_id, plucode)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- OFFER_PRODUCTS TABLE INDEX Created Sucessfully ----");
            }
            
            //group_master related.. -- 10
            createTableSqlStatement  = "create table if not exists groups_master (group_id text,group_description text,group_status integer,group_product_category text,group_product_sub_category text,created_date text, updated_date text, group_comments text, PRIMARY KEY (group_id))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GROUPS_MASTER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS groups_master_index ON groups_master (group_id, group_description)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GROUPS_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            //groups_child related.. -- 11
            createTableSqlStatement  = "create table if not exists groups_child (s_no int,group_id text,sku_Id text,plu_code text,date_and_time text,comments text,status int,PRIMARY KEY(s_no))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GROUPS_CHILD TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS groups_child_index ON groups_child (group_id, sku_Id, plu_code)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GROUPS_CHILD TABLE INDEX Created Sucessfully ----");
            }
            
            //store_taxation related.. -- 12
            createTableSqlStatement  = "create table if not exists store_taxation ( tax_code CHAR(30) NOT NULL, location VARCHAR(45) NULL DEFAULT NULL, tax_category_name VARCHAR(100) NULL DEFAULT NULL, tax_type VARCHAR(45) NULL DEFAULT NULL, tax_name VARCHAR(45) NULL DEFAULT NULL, tax_rate FLOAT NULL DEFAULT NULL, remarks VARCHAR(200) NULL DEFAULT NULL, updated_date DATETIME NULL DEFAULT NULL, effective_from DATETIME NULL DEFAULT NULL, tax_description VARCHAR(200) NULL DEFAULT NULL, user_name VARCHAR(45) NULL DEFAULT NULL, role_name VARCHAR(45) NULL DEFAULT NULL, status VARCHAR(50) NULL DEFAULT NULL, PRIMARY KEY (tax_code))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- STORE_TAXATION TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS store_taxation_index ON store_taxation (tax_code, tax_category_name, tax_name, tax_rate)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- STORE_TAXATION TABLE INDEX Created Sucessfully ----");
            }
            
            //tax_sale_ranges related.. -- 13
            createTableSqlStatement  = "CREATE TABLE if not exists tax_sale_ranges ( sno INT(11) NOT NULL, tax_code CHAR(30) NOT NULL, sale_value_from DECIMAL(10,2) NOT NULL DEFAULT '0.00', sale_value_to DECIMAL(10,2) NOT NULL DEFAULT '0.00', tax_rate FLOAT NOT NULL DEFAULT '0', PRIMARY KEY (`sno`))";
        
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- TAX_SALE_RANGES TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS tax_sale_ranges_index ON tax_sale_ranges (tax_code, sale_value_from, sale_value_to, tax_rate)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- TAX_SALE_RANGES TABLE INDEX Created Sucessfully ----");
            }
          
            //employee_master related.. -- 14
            createTableSqlStatement  = "create table if not exists employee_master(employee_code VARCHAR(50) NOT NULL,first_name VARCHAR(100) NOT NULL,last_name VARCHAR(100) NOT NULL,middle_name VARCHAR(100) NULL DEFAULT NULL,date_of_joining TEXT NOT NULL,designation VARCHAR(100) NOT NULL,location VARCHAR(100) NOT NULL,date_of_birth TEXT NOT NULL,department VARCHAR(50) NOT NULL,reporting_manager VARCHAR(50) NULL DEFAULT NULL, service_type VARCHAR(50) NOT NULL,highest_qualification VARCHAR(50) NOT NULL,years_of_experience FLOAT NOT NULL,remarks VARCHAR(200) NULL DEFAULT NULL,shift_id INT(50) NULL DEFAULT NULL,email_id VARCHAR(150) NULL DEFAULT NULL,created_date TEXT NULL DEFAULT NULL,updated_date TEXT NULL DEFAULT NULL,user_name CHAR(80) NULL DEFAULT NULL,role_name CHAR(80) NULL DEFAULT NULL,PRIMARY KEY (employee_code))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- EMPLOYEE_MASTER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS employee_master_index ON employee_master (employee_code, first_name, last_name, department)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- EMPLOYEE_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            //denomination_master related.. -- 15
            createTableSqlStatement  = "create table if not exists denomination_master(den_name CHAR(50) NOT NULL,den_value FLOAT NOT NULL,den_type INT NOT NULL,den_image VARCHAR(100) NULL DEFAULT NULL,description VARCHAR(250),created_date TEXT,updated_date VARCHAR(50),role_name VARCHAR(50) NULL DEFAULT NULL, user_name VARCHAR(50),status int,currency_code text,PRIMARY KEY (den_value,den_type,currency_code))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- DENOMINATION_MASTER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS denomination_master_index ON denomination_master (den_name, den_value, den_type, den_image)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- DENOMINATION_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            //menu related.. -- 16
            createTableSqlStatement  = "CREATE TABLE IF NOT EXISTS menu (menu_name varchar(200) NOT NULL, outlet_name varchar(50) NOT NULL, menu_desc varchar(30) DEFAULT NULL, user_name char(50) DEFAULT NULL, role_name char(50) DEFAULT NULL, created_date datetime NOT NULL, updated_date datetime NOT NULL, menu_status tinyint(4) NOT NULL, remarks varchar(100) DEFAULT NULL, PRIMARY KEY (menu_name,outlet_name))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MENU TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS menu_index ON menu (menu_name, menu_desc)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MENU TABLE INDEX Created Sucessfully ----");
            }
            
            //menu_categories related.. -- 17
            createTableSqlStatement  = "CREATE TABLE IF NOT EXISTS menu_categories ( s_no varchar(50) NOT NULL, menu_name varchar(200) NOT NULL, status varchar(50) DEFAULT NULL, created_on datetime DEFAULT NULL, updated_on datetime NOT NULL, category_name varchar(200) DEFAULT NULL, category_desc varchar(200) DEFAULT NULL, category_icon varchar(150) DEFAULT NULL, outlet_name varchar(50) DEFAULT NULL, remarks varchar(400) DEFAULT NULL, priority int(11) DEFAULT NULL, PRIMARY KEY (`s_no`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MENU_CATEGORIES TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS menu_categories_index ON menu_categories (menu_name, category_name, category_desc)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MENU_CATEGORIES TABLE INDEX Created Sucessfully ----");
            }
            
            //menu_items related.. -- 18
            createTableSqlStatement  = "CREATE TABLE IF NOT EXISTS menu_items ( s_no varchar(50) NOT NULL, menu_name varchar(200) NOT NULL, outlet_name varchar(45) NOT NULL, category_name varchar(200) NOT NULL, item_name varchar(200) NOT NULL, pluCode varchar(50) DEFAULT NULL, item_desc varchar(400) NOT NULL, item_type varchar(45) NOT NULL, unit_of_measurement varchar(45) NOT NULL, created_date datetime DEFAULT NULL, updated_date datetime DEFAULT NULL, unit_price float NOT NULL, item_availability TINYINT(4) NULL DEFAULT NULL, item_icon varchar(150) DEFAULT NULL, item_picture1 varchar(150) DEFAULT NULL, item_picture2 varchar(150) DEFAULT NULL, quantity float DEFAULT NULL, PRIMARY KEY (menu_name,outlet_name,category_name,item_name))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MENU_ITEMS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS menu_items_index ON menu_items (menu_name, category_name, item_name, pluCode)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MENU_ITEMS TABLE INDEX Created Sucessfully ----");
            }
            
            //member_details related.. -- 19
            createTableSqlStatement  = "CREATE TABLE  IF NOT EXISTS  `member_details` (  `email` VARCHAR(150) NOT NULL,  `user_id` CHAR(25) NULL DEFAULT NULL,  `password` CHAR(25) NULL DEFAULT NULL,  `role` VARCHAR(100) NOT NULL,  `first_name` CHAR(30) NULL DEFAULT NULL,  `last_name` CHAR(25) NULL DEFAULT NULL,  `account_status` CHAR(10) NULL DEFAULT NULL,  `contact_office` CHAR(20) NULL DEFAULT NULL,  `contact_personnel` CHAR(20) NULL DEFAULT NULL,  `work_location` VARCHAR(50) NULL DEFAULT NULL,  `flag` INT(2) NULL DEFAULT NULL,  `otp_code` CHAR(10) NULL DEFAULT NULL,  `otp_date` DATETIME NULL DEFAULT NULL,  `otp_url` VARCHAR(300) NULL DEFAULT NULL,  `user_type` CHAR(50) NULL DEFAULT NULL,  `customer_id` CHAR(20) NULL DEFAULT NULL,  `employee_id` VARCHAR(300) NULL DEFAULT NULL,  `created_date` DATETIME NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `created_user` CHAR(50) NULL DEFAULT NULL,  `created_role` CHAR(255) NULL DEFAULT NULL,  PRIMARY KEY (`email`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MEMBER_DETAILS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS member_details_index ON member_details (email, user_id, password, first_name)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MEMBER_DETAILS TABLE INDEX Created Sucessfully ----");
            }
            
            
            //member_roles related.. -- 20
            createTableSqlStatement  = "CREATE TABLE  IF NOT EXISTS  `member_roles` ( `email` CHAR(50) NOT NULL, `role_name` CHAR(50) NULL DEFAULT NULL, `s_no` INT(11) NOT NULL, PRIMARY KEY (`s_no`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MEMBER_ROLES TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS member_roles_index ON member_roles (email, role_name)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MEMBER_ROLES TABLE INDEX Created Sucessfully ----");
            }
            
            
            //role related.. -- 21
            createTableSqlStatement  = "CREATE TABLE  IF NOT EXISTS  `role` (  `role_name` VARCHAR(255) NOT NULL,  `created_by` VARCHAR(255) NULL DEFAULT NULL,  `created_date` DATETIME NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `created_role` VARCHAR(50) NULL DEFAULT NULL,  `role_description` VARCHAR(255) NULL DEFAULT NULL,  `role_status` VARCHAR(255) NULL DEFAULT NULL,  `valid_date` VARCHAR(255) NULL DEFAULT NULL,  PRIMARY KEY (`role_name`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- ROLE TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS role_index ON role (role_name, role_description)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- ROLE TABLE INDEX Created Sucessfully ----");
            }
            
            
            //access_control related.. -- 22
            createTableSqlStatement  = "CREATE TABLE  IF NOT EXISTS  `access_control` ( `s_no` INT (10)  NOT NULL,  `role_name` CHAR(50) NULL DEFAULT NULL,  `app_name` VARCHAR(150) NULL DEFAULT NULL,  `app_flow` VARCHAR(150) NULL DEFAULT NULL,  `app_subflow` VARCHAR(150) NULL DEFAULT NULL,  `app_document` VARCHAR(150) NULL DEFAULT NULL,  `app_sub_document` VARCHAR(150) NULL DEFAULT NULL,  `location` VARCHAR(255) NULL DEFAULT NULL,  `role_read` BIT(1) NULL DEFAULT NULL,  `role_write` BIT(1) NULL DEFAULT NULL,  `role_cc` BIT(1) NULL DEFAULT '0',  PRIMARY KEY (`s_no`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- ACCESS_CONTROL TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS access_control_index ON access_control (role_name, app_document, app_sub_document)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- ACCESS_CONTROL TABLE INDEX Created Sucessfully ----");
            }
            
            
            //customers related.. -- 23
            createTableSqlStatement  = "CREATE TABLE IF NOT EXISTS `customers` (`first_name` VARCHAR(100) NULL DEFAULT NULL,  `last_name` VARCHAR(100) NULL DEFAULT NULL,  `middle_name` VARCHAR(100) NULL DEFAULT NULL,  `aadhaar_number` CHAR(20) NULL DEFAULT NULL,  `insurance_policy` TINYINT(4) NULL DEFAULT '0',  `marital_status` CHAR(10) NULL DEFAULT NULL,  `children` INT(11) NULL DEFAULT '0',  `know_how` VARCHAR(150) NULL DEFAULT NULL,  `allergies` VARCHAR(250) NULL DEFAULT NULL,  `allergies_comments` VARCHAR(250) NULL DEFAULT NULL,  `medicines` VARCHAR(250) NULL DEFAULT NULL,  `medicines_comments` VARCHAR(250) NULL DEFAULT NULL,  `customer_photo` VARCHAR(250) NULL DEFAULT NULL,  `email` VARCHAR(150) NULL DEFAULT NULL,  `phone_number` CHAR(60) NOT NULL DEFAULT '',  `status` TINYINT(1) NULL DEFAULT NULL,  `street` VARCHAR(150) NULL DEFAULT NULL,  `location` VARCHAR(100) NULL DEFAULT NULL,  `locality` VARCHAR(150) NULL DEFAULT NULL,  `city` VARCHAR(100) NULL DEFAULT NULL,  `pin_no` VARCHAR(45) NULL DEFAULT NULL,  `gender` VARCHAR(10) NULL DEFAULT NULL,  `age` INT(50) NULL DEFAULT NULL,  `notifications` TINYINT(2) NULL DEFAULT NULL,  `rating` FLOAT NULL DEFAULT NULL,  `cust_feedback` VARCHAR(250) NULL DEFAULT NULL,  `shopping_count` INT(50) NULL DEFAULT NULL,  `shopping_amount` FLOAT NULL DEFAULT NULL,  `country` VARCHAR(100) NULL DEFAULT NULL,  `category` VARCHAR(100) NULL DEFAULT NULL,  `customer_id` VARCHAR(100) NULL DEFAULT NULL,  `customer_type` VARCHAR(100) NULL DEFAULT NULL,  `nationality` VARCHAR(100) NULL DEFAULT NULL,  `designation` VARCHAR(100) NULL DEFAULT NULL,  `alt_phone_number` VARCHAR(100) NULL DEFAULT NULL,  `dob` DATE NULL DEFAULT NULL,  `marriage_date` DATE NULL DEFAULT NULL,  `photo` VARCHAR(150) NULL DEFAULT NULL,  `address_proof` VARCHAR(150) NULL DEFAULT NULL,  `customer_id_proof` VARCHAR(150) NULL DEFAULT NULL,  `land_mark` VARCHAR(250) NULL DEFAULT NULL,  `company_name` VARCHAR(250) NULL DEFAULT NULL,  `date_and_time` DATETIME NULL DEFAULT NULL,  `state` VARCHAR(100) NULL DEFAULT NULL,  `signature` VARCHAR(150) NULL DEFAULT NULL,  `house_no` VARCHAR(150) NULL DEFAULT NULL,  `relation_ship_status` VARCHAR(50) NULL DEFAULT NULL,  `family_size` INT(11) NULL DEFAULT '0',  `hobbies` VARCHAR(250) NULL DEFAULT NULL,  `monthly_income` VARCHAR(100) NULL DEFAULT NULL,  `qualification` VARCHAR(100) NULL DEFAULT NULL,  `password` VARCHAR(100) NULL DEFAULT NULL,  `primary_contact_number` CHAR(20) NULL DEFAULT NULL,  `otp_code` CHAR(20) NULL DEFAULT NULL,  `otp_expire_on` DATETIME NULL DEFAULT NULL,  `site_url` VARCHAR(150) NULL DEFAULT NULL,  `title` CHAR(20) NULL DEFAULT NULL,  `customer_gstin` CHAR(20) NULL DEFAULT NULL,  `is_membership_customer` TINYINT(4) NULL DEFAULT '0',   `need_to_update_online` TINYINT(4) NULL DEFAULT '0',  PRIMARY KEY (`phone_number`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMERS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS customers_index ON customers (first_name, phone_number, customer_type)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMERS TABLE INDEX Created Sucessfully ----");
            }
            
            //billing related Tables.. used in offline...
            
            //billing -- billing_table related.. -- 24
            createTableSqlStatement  = "create table if not exists billing_table (bill_id text, date_and_time text, cashier_id text,counter_ID text,Total_discount text,discount_type text,discount_type_id text,tax text,total_price text,due_amount text,status text,email_id text,phone_number text,store_location text,customer_name text,shift_id text,save_status text,print_count int,change_return double,other_discount double,business_cycle_date text,scan_start_time text,scan_end_time text,print_time text,bill_time_duration int,bill_time_duration_accept_print int,serial_billId text,other_discount_desc text,register text,employee_sale_id text,cashier_name text,sub_total text,last_updated_date text,customer_gstin text,bill_amount text,billCancelReason text,comments text,sales_order_id text,shipping_charges text,is_offline_bill text,  PRIMARY KEY (bill_id))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_TABLE TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS billing_table_index ON billing_table (bill_id, date_and_time, status)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_TABLE TABLE INDEX Created Sucessfully ----");
            }
            
            //billing -- billing_items related.. -- 25
            createTableSqlStatement  = "create table if not exists billing_items (bill_item_id int, bill_id text, sku_id text,item_name text,quantity float,item_total_price double,tax_code text,tax_value text,status text,plu_code text, edited_price double, discount_type text, discount_id text, discount_price double,mrpPrice double, item_discount double, item_discount_desc text,item_scan_code text,promo_item_flag text,is_manufactured_item int,is_packed int,category text,sub_category text,product_range text,measure_range text,brand text,model text,item_unit_price text,item_scan_flag text,employee_sale_id text, department text, sub_department text, employee_name text, tax_cost text, style text, pattern text, batch text, color text, size text, section text, hsn_code text, utility text,is_tax_inclusive text,product_class text,product_sub_class text,style_range text,edit_price_reason text,voidItemReason text,expiry_date text,pack_size text, PRIMARY KEY (bill_item_id))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_ITEMS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS billing_items_index ON billing_items (bill_id)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_ITEMS TABLE INDEX Created Sucessfully ----");
            }
            
            //billing -- exchange_items related.. -- 26
            createTableSqlStatement  = "create table if not exists exchange_items (s_no int, bill_id text, sku_id text,item_name text,quantity float,price double,cost double,date_and_time text,counter_id text,reason text,exchanged_bill_id text,status text,tax_code text, tax_value double, plu_code text)";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- EXCHANGE_ITEMS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS exchange_items_index ON exchange_items (bill_id)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- EXCHANGE_ITEMS TABLE INDEX Created Sucessfully ----");
            }
            
            //billing -- return_items related.. -- 27
            createTableSqlStatement  = "create table if not exists return_items (s_no int, bill_id text, sku_id text,item_name text,quantity float,price double,cost double,date_and_time text,counter_id text,reason text,status text, tax_code text, tax_value double, plu_code text)";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- RETURN_ITEMS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS return_items_index ON return_items (bill_id)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- RETURN_ITEMS TABLE INDEX Created Sucessfully ----");
            }
            
            //billing -- billing_taxes related.. -- 28
            createTableSqlStatement  = "create table if not exists billing_taxes (bill_id text, tax_id text, tax_name text,tax_price double,bill_date text,remarks text,transaction_id text,updated_date text)";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_TAXES TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS billing_taxes_index ON billing_taxes (bill_id)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_TAXES TABLE INDEX Created Sucessfully ----");
            }
            
            //billing -- billing_taxes related.. -- 29
            createTableSqlStatement  = "create table if not exists billing_item_taxes (bill_id text, sku_id text, plu_code text,tax_category text,tax_code text,tax_type text,tax_rate text,tax_value text)";
        
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_ITEM_TAXES TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS billing_item_taxes_index ON billing_item_taxes (bill_id)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_ITEM_TAXES TABLE INDEX Created Sucessfully ----");
            }
            
            //billing -- billing_discounts related.. -- 30
            createTableSqlStatement  = "create table if not exists billing_discounts (s_no INT (10)  NOT NULL,discount_type  VARCHAR (100),bill_id        VARCHAR (100) NOT NULL DEFAULT '0',discount_id    VARCHAR (100) DEFAULT '0',item_name      VARCHAR (100) DEFAULT '0',sku_id    CHAR (50)     DEFAULT '0',plu_code  CHAR (50)   DEFAULT '0',discount_value FLOAT DEFAULT '0',item_price  FLOAT     DEFAULT '0',date    text DEFAULT NULL,remarks  VARCHAR (250) DEFAULT '0',PRIMARY KEY (s_no))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_DISCOUNTS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS billing_discounts_index ON billing_discounts_taxes (bill_id)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_DISCOUNTS TABLE INDEX Created Sucessfully ----");
            }
            
            //billing -- billing_denomination related.. -- 31
            createTableSqlStatement  = "create table if not exists billing_denomination (bill_id text,cash_denomination text,paid_denom_no text,paid_amount text,return_denom_no text,return_amount text,date text,transaction_id text)";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_DENOMINATION TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS billing_denomination_index ON billing_denomination (bill_id)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_DENOMINATION TABLE INDEX Created Sucessfully ----");
            }
            
            //billing -- billing_transactions related.. -- 32
            createTableSqlStatement  = "create table if not exists billing_transactions (bill_id text,mode_of_payment text,transaction_id text,card_type text,card_subtype text,card_no text,paid_amount text,date_and_time text,card_info text,approval_code text,bank_name text,change_return double,received_amt double,tender_Mode text,tender_key INT,transaction_type text, PRIMARY KEY (transaction_id))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_TRANSACTIONS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS billing_transactions_index ON billing_transactions (bill_id)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_TRANSACTIONS TABLE INDEX Created Sucessfully ----");
            }
            
            //billing -- billing_return_note related.. -- 33
            createTableSqlStatement  = "CREATE TABLE IF NOT EXISTS `billing_return_note` (  `credit_note_no` VARCHAR(50) NOT NULL,  `bill_id` CHAR(20) NOT NULL,  `customer_mobile` VARCHAR(15) NULL DEFAULT NULL,  `credit_amount` FLOAT NULL DEFAULT NULL,  `credit_remarks` VARCHAR(50) NULL DEFAULT NULL,  `date` DATETIME NULL DEFAULT NULL,  `status` TINYINT(2) NULL DEFAULT '0',  `store_location` VARCHAR(100) NULL DEFAULT '',  `counter_id` VARCHAR(100) NULL DEFAULT '',  `customer_id` VARCHAR(100) NULL DEFAULT '',  `bal_amt` FLOAT NULL DEFAULT '0',  `expiry_date` DATETIME NULL DEFAULT NULL,  `row_created_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,  `row_updated_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,  PRIMARY KEY (`credit_note_no`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_RETURN_NOTE TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS billing_return_note_index ON billing_return_note (bill_id)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- BILLING_RETURN_NOTE TABLE INDEX Created Sucessfully ----");
            }
            
            //membership_users related.. -- 34
            createTableSqlStatement  = "CREATE TABLE `membership_users` (  `member_ship_id` VARCHAR(50) NOT NULL,  `phone_num` VARCHAR(15) NULL DEFAULT NULL,  `email_id` VARCHAR(50) NULL DEFAULT NULL,  `name` VARCHAR(50) NULL DEFAULT NULL,  `customer_category` VARCHAR(50) NULL DEFAULT NULL,  `status` TINYINT(4) NULL DEFAULT '0',  `start_date` DATE NULL DEFAULT NULL,  `end_date` DATE NULL DEFAULT NULL,  `created_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,  PRIMARY KEY (`member_ship_id`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MEMBERSHIP_USERS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS membership_users_index ON membership_users (member_ship_id, customer_category)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MEMBERSHIP_USERS TABLE INDEX Created Sucessfully ----");
            }
            
            
            
            
            
            
            
            
            
            
            
            
            //product_master related.. -- N-1 -- which are not in use....
            createTableSqlStatement  = "create table if not exists product_master(product_ID VARCHAR(50)NOT NULL,product_name VARCHAR(255) DEFAULT NULL,item_status VARCHAR(50) DEFAULT NULL,product_description VARCHAR(1000) DEFAULT NULL,category VARCHAR(100) DEFAULT NULL,sub_category VARCHAR(100) DEFAULT NULL,storage_location VARCHAR(50)  DEFAULT NULL,abc_category VARCHAR(50) DEFAULT NULL,retail_stocking_unit VARCHAR(50) DEFAULT NULL,lead_time_days  INT(11) DEFAULT NULL,primary_supplier VARCHAR(100) DEFAULT NULL,buy_UOM VARCHAR(30) DEFAULT NULL,buy_unit_price INT(11) DEFAULT NULL,sell_UOM VARCHAR(30) DEFAULT NULL,sell_unit_price INT(11) DEFAULT NULL,stock_in_hand VARCHAR(30) DEFAULT NULL,warehouse VARCHAR(100) DEFAULT NULL,min_stock FLOAT DEFAULT NULL, max_stock FLOAT DEFAULT NULL,re_order_point VARCHAR(30) DEFAULT NULL,Taxable CHAR(1) DEFAULT NULL,asset_category VARCHAR(100) DEFAULT NULL,warehouse_stocking_unit VARCHAR(50) DEFAULT NULL,updated_date VARCHAR(50) DEFAULT NULL,PRIMARY KEY(product_ID))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_MASTER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS product_master_index ON product_master (product_ID, category, sub_category)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            //product_category_master related.. -- N-2 -- which are not in use....
            createTableSqlStatement  = "create table if not exists product_category_master(category_name VARCHAR(50) NOT NULL,category_description VARCHAR(250)DEFAULT NULL,category_image VARCHAR(150)DEFAULT NULL,PRIMARY KEY(category_name))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_CATEGORY_MASTER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS product_category_master_index ON product_category_master (category_name, category_description)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_CATEGORY_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            //product_category_master related.. -- N-2 -- which are not in use....
            createTableSqlStatement  = "create table if not exists product_category_master(category_name VARCHAR(50) NOT NULL,category_description VARCHAR(250)DEFAULT NULL,category_image VARCHAR(150)DEFAULT NULL,PRIMARY KEY(category_name))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_CATEGORY_MASTER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS product_category_master_index ON product_category_master (category_name, category_description)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_CATEGORY_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            //product_subcategory_master related.. -- N-3 -- which are not in use....
            createTableSqlStatement  = "create table if not exists product_subcategory_master(category_name VARCHAR(50) NOT NULL,category_description VARCHAR(250)DEFAULT NULL,category_image VARCHAR(150)DEFAULT NULL,PRIMARY KEY(category_name))";
            
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_SUBCATEGORY_MASTER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS product_subcategory_master_master_index ON product_subcategory_master (category_name, category_description)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_SUBCATEGORY_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            
            
            
            
            //added by roja on 06/05/2019...
            // loyalty_cards related table..
            createTableSqlStatement  = "create table if not exists 'loyalty_cards' (`loyalty_card_number` VARCHAR(50) NOT NULL, `assigned_status` TINYINT(5) NOT NULL, `card_status` TINYINT(5) NOT NULL, `loyalty_program_number` VARCHAR(50) NOT NULL, `card_id` VARCHAR(50) NULL DEFAULT NULL, `otp_required` TINYINT(4) NULL DEFAULT '0', `assigned_cust_Id` CHAR(12) NULL DEFAULT NULL, `start_date` DATETIME NULL DEFAULT NULL,  `end_date` DATETIME NULL DEFAULT NULL, `offline_loyalty_sync_status` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY (`loyalty_card_number`))";
            
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- LOYALTY_CARDS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS loyalty_cards_index ON loyalty_cards (loyalty_card_number)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- LOYALTY_CARDS TABLE INDEX Created Sucessfully ----");
            }
         
            // customer_loyalty_cards related table..
            createTableSqlStatement  = "create table if not exists 'customer_loyalty_cards' (`loyalty_card_number` VARCHAR(50) NOT NULL, `customer_name` VARCHAR(250) NULL DEFAULT NULL, `phone_num` VARCHAR(15) NOT NULL, `email` VARCHAR(50) NULL DEFAULT NULL, `loyalty_program_number` VARCHAR(50) NOT NULL, `card_id` VARCHAR(25) NOT NULL, `points_earned` INT(11) NULL DEFAULT '0', `points_used` INT(11) NULL DEFAULT '0', `points_remaining` INT(11) NULL DEFAULT '0', `cash` FLOAT NULL DEFAULT NULL, `id_card_type` VARCHAR(50) NULL DEFAULT NULL, `id_card_number` VARCHAR(50) NULL DEFAULT NULL, `status` TINYINT(1) NULL DEFAULT '0', `issued_on` DATETIME NULL DEFAULT CURRENT_TIMESTAMP, `issued_to` DATETIME NULL DEFAULT NULL, `offline_loyalty_sync_status` TINYINT(4) NULL DEFAULT '0', `need_to_update_online` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY (`loyalty_card_number`))";
            
            // offline_loyalty_sync_statu - (taking a static flag) if its true then need to issue in online also..
            //need_to_update_online - (taking a static flag) if its true then need to update/sync to online..
            
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMER_LOYALTY_CARDS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS customer_loyalty_cards_index ON customer_loyalty_cards (loyalty_card_number, customer_name, phone_num, loyalty_program_number)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMER_LOYALTY_CARDS TABLE INDEX Created Sucessfully ----");
            }
            
            
            // loyalty_card_master related table..
            createTableSqlStatement  = "create table if not exists 'loyalty_card_master' (`loyalty_program_number` VARCHAR(20) NOT NULL,`loyalty_program_name` VARCHAR(50) NOT NULL, `loyality_program_description` VARCHAR(255) NULL DEFAULT NULL, `loyalty_card_type` VARCHAR(30) NOT NULL, `valid_from` DATETIME NOT NULL,  `valid_to` DATETIME NOT NULL, `otp_requirement` TINYINT(4) NULL DEFAULT NULL, `start_date` DATE NULL DEFAULT NULL, `end_date` DATE NULL DEFAULT NULL, `reward_life_span` INT(8) NULL DEFAULT NULL, `validity_period` INT(8) NULL DEFAULT NULL, `reward_type` VARCHAR(10) NOT NULL, `reward_criteria` VARCHAR(30) NULL DEFAULT NULL, `reward_conversion_ratio` FLOAT NULL DEFAULT NULL, `status` CHAR(10) NOT NULL, `created_date` DATE NULL DEFAULT NULL, `updated_date` DATE NULL DEFAULT NULL, `user_name` VARCHAR(30) NULL DEFAULT NULL, `role_name` VARCHAR(30) NULL DEFAULT NULL, `no_of_cards` INT(10) NULL DEFAULT NULL, `auto_issue` TINYINT(1) NULL DEFAULT NULL, `base_points` DECIMAL(10,2) NULL DEFAULT '0.00', `min_redeem_points` DECIMAL(10,2) NULL DEFAULT '0.00', `min_claim_points` DECIMAL(10,2) NOT NULL, PRIMARY KEY (`loyalty_program_number`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- LOYALTY_CARD_MASTER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS loyalty_card_master_index ON loyalty_card_master (loyalty_program_number,loyalty_program_name,loyality_program_description)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- LOYALTY_CARD_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            
            // Table related to loyalty_purchase_ranges...
            createTableSqlStatement  = "create table if not exists 'loyalty_purchase_ranges' (`sno` INT(11) NOT NULL, `loyalty_program_number` VARCHAR(50) NULL DEFAULT NULL, `min_purchase_value` DECIMAL(10,2) NULL DEFAULT NULL, `max_purchase_value` DECIMAL(10,2) NULL DEFAULT NULL, `reward_type` VARCHAR(20) NULL DEFAULT NULL, `reward_value` DECIMAL(10,2) NULL DEFAULT '0.00',`reward_criteria` VARCHAR(20) NULL DEFAULT NULL )";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- LOYALTY_PURCHASE_RANGES TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS loyalty_purchase_ranges_index ON loyalty_purchase_ranges (loyalty_program_number)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- LOYALTY_PURCHASE_RANGES TABLE INDEX Created Sucessfully ----");
            }
            
            
            // Table related to loyalty_card_ledger...
            createTableSqlStatement  = "create table if not exists 'loyalty_card_ledger' (`sno` INT(11) NOT NULL, `loyalty_card_number` VARCHAR(50) NULL DEFAULT NULL, `points_credited` INT(11) NULL DEFAULT '0', `points_debited` INT(11) NULL DEFAULT '0', `created_date` DATETIME NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL, `points_remaining` INT(11) NULL DEFAULT '0', PRIMARY KEY (`sno`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- LOYALTY_CARD_LEDGER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS loyalty_card_ledger_index ON loyalty_card_ledger (loyalty_card_number)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- LOYALTY_CARD_LEDGER TABLE INDEX Created Sucessfully ----");
            }
            
            // ----------------> START OF COUPONS RELATED TABLES  <----------------
            // Related to customer_gift_coupons
            createTableSqlStatement  = "create table if not exists 'customer_gift_coupons' (`s_no` INT(11) NOT NULL, `coupon_code` VARCHAR(50) NOT NULL DEFAULT '', `coupon_program_code` VARCHAR(50) NULL DEFAULT NULL, `issued_to` VARCHAR(50) NULL DEFAULT NULL, `issue_date` DATE NULL DEFAULT NULL, `issued_at` VARCHAR(50) NOT NULL, `customer_name` VARCHAR(50) NOT NULL, `customer_email` VARCHAR(60) NULL DEFAULT NULL, `customer_mobile` VARCHAR(60) NULL DEFAULT NULL, `claim_status` TINYINT(4) NULL DEFAULT NULL, `claimed_at` VARCHAR(50) NULL DEFAULT NULL, `bill_ref` VARCHAR(100) NULL DEFAULT NULL, `coupon_value` FLOAT NULL DEFAULT NULL, `validity_date` DATE NULL DEFAULT NULL, `coupon_id` VARCHAR(50) NULL DEFAULT NULL, `no_of_claims` INT(4) NULL DEFAULT '0', `offline_gift_coupon_sync_status` TINYINT(4) NULL DEFAULT '0', `need_to_update_online` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY (`s_no`))";
            
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMER_GIFT_COUPONS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS customer_gift_coupons_index ON customer_gift_coupons (coupon_code)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMER_GIFT_COUPONS TABLE INDEX Created Sucessfully ----");
            }
            
            
            // Related to gift_coupons
            createTableSqlStatement  = "create table if not exists 'gift_coupons' (`coupon_code` VARCHAR(50) NOT NULL, `coupon_program_code` VARCHAR(50) NOT NULL, `assigned_status` TINYINT(5) NOT NULL, `coupon_status` TINYINT(5) NOT NULL, `coupon_id` VARCHAR(50) NULL DEFAULT NULL, `start_date` DATE NULL DEFAULT NULL, `end_date` DATE NULL DEFAULT NULL, `no_of_claims` INT(11) NULL DEFAULT NULL, `offline_gift_coupon_sync_status` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY (`coupon_code`))";
            
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GIFT_COUPONS TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS gift_coupons_index ON gift_coupons (coupon_code)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GIFT_COUPONS TABLE INDEX Created Sucessfully ----");
            }
            
            
            // Related to gift_coupons_master
            createTableSqlStatement  = "create table if not exists 'gift_coupons_master' (`coupon_program_code` VARCHAR(50) NOT NULL, `promo_name` VARCHAR(45) NOT NULL, `unit_cash_value` FLOAT NOT NULL, `total_cash_value` FLOAT NULL DEFAULT NULL, `created_on` DATE NOT NULL, `expiry_date` DATE NOT NULL, `validity_period` INT(11) NOT NULL, `country` VARCHAR(45) NOT NULL, `status` VARCHAR(15) NULL DEFAULT NULL, `description` VARCHAR(250) NULL DEFAULT NULL, `discount_type` VARCHAR(30) NULL DEFAULT NULL, `otp_requirement` TINYINT(4) NOT NULL, `multiples` TINYINT(4) NOT NULL, `updated_date` DATE NULL DEFAULT NULL, `no_of_claims` INT(11) NULL DEFAULT NULL, `min_sale_amount` DECIMAL(10,2) NULL DEFAULT '0.00', `max_discount_amount` DECIMAL(10,2) NULL DEFAULT '0.00', `limited_use` TINYINT(4) NULL DEFAULT '0', `no_of_claims_limited` INT(4) NULL DEFAULT '0', PRIMARY KEY (`coupon_program_code`))";
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GIFT_COUPONS_MASTER TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS gift_coupons_master_index ON gift_coupons_master (coupon_program_code)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GIFT_COUPONS_MASTER TABLE INDEX Created Sucessfully ----");
            }
            
            
            // Related to gift_coupons_locations
            createTableSqlStatement  = "create table if not exists 'gift_coupons_locations' (`ref_no` INT(15) NOT NULL, `coupon_promo_code` VARCHAR(50) NOT NULL, `valid_locations` CHAR(50) NOT NULL, `zoneId` VARCHAR(50) NULL DEFAULT NULL, PRIMARY KEY (`ref_no`))";
            
            
            if (sqlite3_exec(localDatabase, createTableSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GIFT_COUPONS_LOCATION TABLE Created Sucessfully ----");
            }
            
            createIndexSqlStatement  = "CREATE INDEX IF NOT EXISTS gift_coupons_locations_index ON gift_coupons_locations (coupon_promo_code, valid_locations, zoneId)";
            
            if (sqlite3_exec(localDatabase, createIndexSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GIFT_COUPONS_LOCATION TABLE INDEX Created Sucessfully ----");
            }
            
            // Upto here added by roja on 06/05/2019...
            
        }
        else{
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}


#pragma -mark START of Methods Related to DownLoading & Saving Online Data to Offline

#pragma -mark START sku_master related downloading and retriving methods....

/**
 * @description  In this method we are calling the web service with startIndex inorder to get sku_master data....
 * @date
 * @method       getSkuDetails:--  totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017.. and before also &  09/07/2018....
 * @reason       reason -- chaning returning value to final & for cleaning....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getSkuDetails:(int)startIndex totalRecords:(int)totalRecords {
    BOOL status = false;
    
    @try {
        
        NSArray * keys = @[ITEM_SKU,REQUEST_HEADER,START_INDEX,STORE_LOCATION,TOTAL_SKUS,LAST_SKU_UPDATED_DATE,FILE_REQUIRED];
        NSArray * objects = @[EMPTY_STRING,[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,[NSString stringWithFormat:@"%d",totalRecords],@"",[NSNumber numberWithBool:isFileDownload]];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        if([[defaults valueForKey:LAST_SKU_UPDATED] length]){
            
            NSLog(@"----SKU_MASTER----Download----%@",[defaults valueForKey:LAST_SKU_UPDATED]);
            objects = @[EMPTY_STRING,[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,[NSString stringWithFormat:@"%d",totalRecords],[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_SKU_UPDATED]],[NSNumber numberWithBool:isFileDownload]];
        }
        //added by Srinivasulu on 12/11/2018..
        else if(startIndex == 0){
            [self CreateAllOfflineTablesAlongWithIndexes];
        }
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController *controll = [[WebServiceController alloc] init];
        controll.skuServiceDelegate = self;
        status = [controll getSkuDetails:salesReportJsonString];
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from services....
 * @date
 * @method       getSkuDetailsSuccessResponse:--
 * @author
 * @param        NSDictionaty
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017.& before also & 10/07/2018....
 * @reason       reason -- added the exception handling and changing returning value to final & removed the loop....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getSkuDetailsSuccessResponse:(NSDictionary *)sucess {
    BOOL status = false;
    
    @try {
        
        totalAvailSkuRecords = [[sucess valueForKey:TOTAL_SKUS] intValue];
        
        if(isFileDownload){
            NSString * fileUrlStr = [self checkGivenValueIsNullOrNil:[sucess valueForKey:FILE_URL] defaultReturn:@""];
            if(fileUrlStr.length){
                
                status = [self DownLoadFileAndInsertItInLoadDB:fileUrlStr dataType:SKU_MASTER];
                totalAvailSkuRecords = 0;
            }
        }
        else{
            
            NSArray * sku_list = [sucess valueForKey:SKU_LIST];
            if (sku_list.count > 0) {
                status =  [self saveProducts:sku_list];
            }
        }
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from service....
 * @date
 * @method       getProductsErrorResponse:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getSkuDetailsFailureResponse:(NSString *)failure {
    BOOL status = false;
    
    @try {
        if ([failure caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            
            status = TRUE;
        }
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are save products related informating in sku_master....
 * @date
 * @method       saveProducts:--
 * @author
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017..and before also & 10/07/2018....
 * @reason       added comments and SQL related object need to make them as local & changed the completed insert query's into transaction commit....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveProducts:(NSArray *)itemList {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- SKU_MASTER----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char * errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists `sku_master` (  `sku_Id` VARCHAR(100) NOT NULL,  `product_Id` VARCHAR(100) NOT NULL,  `ean` VARCHAR(100) NULL DEFAULT NULL,  `supplier_name` VARCHAR(150) NULL DEFAULT NULL,  `brand_code` VARCHAR(100) NULL DEFAULT NULL,  `status` VARCHAR(100) NULL DEFAULT NULL,  `manufacturer_code` VARCHAR(100) NULL DEFAULT NULL,  `manufacturer_name` VARCHAR(200) NULL DEFAULT NULL,  `uom` VARCHAR(50) NULL DEFAULT NULL,  `uom1` VARCHAR(20) NULL DEFAULT NULL,  `uom2` VARCHAR(20) NULL DEFAULT NULL,  `quantity` FLOAT NULL DEFAULT NULL,  `pack_size` INT(11) NULL DEFAULT NULL,  `color` VARCHAR(100) NULL DEFAULT NULL,  `pattern_code` VARCHAR(100) NULL DEFAULT NULL,  `re_order_point` FLOAT NULL DEFAULT NULL,  `order_quantity` FLOAT NULL DEFAULT NULL,  `min_sale_qty` FLOAT NULL DEFAULT NULL,  `lead_time_days` INT(50) NULL DEFAULT NULL,  `max_stock` FLOAT NULL DEFAULT NULL,  `stock` FLOAT NULL DEFAULT NULL,  `tax_code` VARCHAR(50) NULL DEFAULT NULL,  `fr_tax_code` INT(11) NULL DEFAULT NULL,  `mark_up` VARCHAR(100) NULL DEFAULT NULL,  `mark_down` VARCHAR(100) NULL DEFAULT NULL,  `running_plu_number` VARCHAR(100) NULL DEFAULT NULL,  `model` VARCHAR(100) NULL DEFAULT NULL,  `open_rate` FLOAT NULL DEFAULT NULL,  `last_cost` FLOAT NULL DEFAULT NULL,  `average_cost` FLOAT NULL DEFAULT NULL,  `minimum_price` FLOAT NULL DEFAULT NULL,  `created_date` DATE NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `not_taxable` TINYINT(4) NULL DEFAULT NULL,  `jit_stock` TINYINT(4) NULL DEFAULT NULL,  `hsn_code` CHAR(50) NULL DEFAULT NULL,  `zero_stock` TINYINT(4) NULL DEFAULT NULL,  `picture1` VARCHAR(150) NULL DEFAULT NULL,  `picture2` VARCHAR(150) NULL DEFAULT NULL,  `picture3` VARCHAR(150) NULL DEFAULT NULL,  `discountable` TINYINT(4) NULL DEFAULT NULL,  `allow_decimals` TINYINT(4) NULL DEFAULT NULL,  `store_location` VARCHAR(1000) NULL DEFAULT NULL,  `short_description` VARCHAR(250) NULL DEFAULT NULL,  `waranty_details` VARCHAR(250) NULL DEFAULT NULL,  `remarks` VARCHAR(250) NULL DEFAULT NULL,  `editable` TINYINT(4) NULL DEFAULT NULL,  `is_cost_price_editable` TINYINT(4) NULL DEFAULT '1',  `uom_label` CHAR(20) NULL DEFAULT NULL,  `alternate_sku_id` CHAR(100) NULL DEFAULT NULL,  `season_code` CHAR(25) NULL DEFAULT NULL,  `alias_name` VARCHAR(200) NULL DEFAULT NULL,  `item_type` CHAR(50) NULL DEFAULT NULL,  `item_design` CHAR(50) NULL DEFAULT NULL,  `is_manufactured_Item` TINYINT(4) NULL DEFAULT '0',  `is_packed` TINYINT(4) NULL DEFAULT '0',  `is_tax_exclusive` TINYINT(4) NULL DEFAULT '0',  `is_tax_on_discounted_price` TINYINT(4) NULL DEFAULT '1',  `net_realizable_value` DECIMAL(10,2) NULL DEFAULT '0.00',  `section` CHAR(60) NULL DEFAULT '',  `fabric` CHAR(60) NULL DEFAULT '',  `product_class` CHAR(100) NULL DEFAULT NULL,  `tracking_recquired` TINYINT(4) NULL DEFAULT '0',  `product_category` CHAR(50) NULL DEFAULT NULL,  `product_subcategory` CHAR(50) NULL DEFAULT NULL,  `product_usage` VARCHAR(250) NULL DEFAULT NULL,  `product_side_effects` VARCHAR(250) NULL DEFAULT NULL,  `product_precautions` VARCHAR(250) NULL DEFAULT NULL,  `product_handing` VARCHAR(50) NULL DEFAULT NULL,  `product_consumption_interaction` VARCHAR(100) NULL DEFAULT NULL,  `is_combo` TINYINT(4) NULL DEFAULT '0',  `primary_department` VARCHAR(100) NULL DEFAULT NULL,  `secondary_department` VARCHAR(100) NULL DEFAULT NULL,  PRIMARY KEY (`sku_Id`) )";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- SKU_MASTER TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `sku_master` (`sku_Id`, `product_Id`, `ean`, `supplier_name`, `brand_code`, `status`, `manufacturer_code`, `manufacturer_name`, `uom`, `uom1`, `uom2`, `quantity`, `pack_size`, `color`, `pattern_code`, `re_order_point`, `order_quantity`, `min_sale_qty`, `lead_time_days`, `max_stock`, `stock`, `tax_code`, `fr_tax_code`, `mark_up`, `mark_down`, `running_plu_number`, `model`, `open_rate`, `last_cost`, `average_cost`, `minimum_price`, `created_date`, `updated_date`, `not_taxable`, `jit_stock`, `hsn_code`, `zero_stock`, `picture1`, `picture2`, `picture3`, `discountable`, `allow_decimals`, `store_location`, `short_description`, `waranty_details`, `remarks`, `editable`, `is_cost_price_editable`, `uom_label`, `alternate_sku_id`, `season_code`, `alias_name`, `item_type`, `item_design`, `is_manufactured_Item`, `is_packed`, `is_tax_exclusive`, `is_tax_on_discounted_price`, `net_realizable_value`, `section`, `fabric`, `product_class`, `tracking_recquired`, `product_category`, `product_subcategory`, `product_usage`, `product_side_effects`, `product_precautions`, `product_handing`, `product_consumption_interaction`, `is_combo`, `primary_department`, `secondary_department`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in itemList) {
                    
                    if (![[temp valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_ID] && ![[temp valueForKey:PRODUCT_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 2, [[temp valueForKey:PRODUCT_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else if (![[temp valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:EAN] && ![[temp valueForKey:EAN] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 3, [[temp valueForKey:EAN] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SUPPLIER_NAME] && ![[temp valueForKey:SUPPLIER_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 4, [[temp valueForKey:SUPPLIER_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kProductBrand] && ![[temp valueForKey:kProductBrand] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5, [[temp valueForKey:kProductBrand] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:BILL_STATUS] && ![[temp valueForKey:BILL_STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6, [[temp valueForKey:BILL_STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MANUFACTURER_CODE] && ![[temp valueForKey:MANUFACTURER_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7, [[temp valueForKey:MANUFACTURER_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MANUFACTURER_NAME] && ![[temp valueForKey:MANUFACTURER_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8, [[temp valueForKey:MANUFACTURER_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SELL_UOM] && ![[temp valueForKey:SELL_UOM] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9, [[temp valueForKey:SELL_UOM] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:UOM_1] && ![[temp valueForKey:UOM_1] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 10, [[temp valueForKey:UOM_1] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:UOM_2] && ![[temp valueForKey:UOM_2] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 11, [[temp valueForKey:UOM_2] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:STOCK] && ![[temp valueForKey:STOCK] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 12, [[temp valueForKey:STOCK] doubleValue]);
                    }
                    else if ([temp.allKeys containsObject:QUANTITY] && ![[temp valueForKey:QUANTITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 12, [[temp valueForKey:QUANTITY] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 12, 0);
                    }
                    
                    if ([temp.allKeys containsObject:PACK_SIZE] && ![[temp valueForKey:PACK_SIZE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 13, [[temp valueForKey:PACK_SIZE] intValue]);
                    }
                    else if ([temp.allKeys containsObject:Pack_Size] && ![[temp valueForKey:Pack_Size] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 13, [[temp valueForKey:Pack_Size] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 13, 0);
                    }
                    
                    if ([temp.allKeys containsObject:COLOR] && ![[temp valueForKey:COLOR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 14, [[temp valueForKey:COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PATTERN_CODE] && ![[temp valueForKey:PATTERN_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 15, [[temp valueForKey:PATTERN_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:REORDER_POINT] && ![[temp valueForKey:REORDER_POINT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double( localInsertStmt, 16, [[temp valueForKey:REORDER_POINT] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double( localInsertStmt, 16, 0.00);
                    }
                    
                    if ([temp.allKeys containsObject:ORDER_QUANTITY] && ![[temp valueForKey:ORDER_QUANTITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 17, [[temp valueForKey:ORDER_QUANTITY] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 17, 0.00);
                    }
                    
                    if ([temp.allKeys containsObject:MIN_SALE_QTY] && ![[temp valueForKey:MIN_SALE_QTY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double( localInsertStmt, 18, [[temp valueForKey:MIN_SALE_QTY] doubleValue]);
                    }//
                    else if ([temp.allKeys containsObject:Min_Sale_Qty] && ![[temp valueForKey:Min_Sale_Qty] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double( localInsertStmt, 18, [[temp valueForKey:Min_Sale_Qty] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 18, 0.00);
                    }
                    
                    if ([temp.allKeys containsObject:LEAD_TIME_DAYS] && ![[temp valueForKey:LEAD_TIME_DAYS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 19, [[temp valueForKey:LEAD_TIME_DAYS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 19, 0);
                    }
                    
                    if ([temp.allKeys containsObject:MAX_STOCK] && ![[temp valueForKey:MAX_STOCK] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 20, [[temp valueForKey:MAX_STOCK] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 20, 0);
                    }
                    
                    if ([temp.allKeys containsObject:STOCK] && ![[temp valueForKey:STOCK] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 21, [[temp valueForKey:STOCK] doubleValue]);
                    }
                    else if ([temp.allKeys containsObject:QUANTITY] && ![[temp valueForKey:QUANTITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 21, [[temp valueForKey:QUANTITY] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 21, 0);
                    }
                    
                    if ([temp.allKeys containsObject:TAX_CODE] && ![[temp valueForKey:TAX_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 22, [[temp valueForKey:TAX_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 22, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:FR_TAX_CODE] && ![[temp valueForKey:FR_TAX_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 23, [[temp valueForKey:FR_TAX_CODE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 23, 0);
                    }
                    
                    if ([temp.allKeys containsObject:MARK_UP] && ![[temp valueForKey:MARK_UP] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 24, [[temp valueForKey:MARK_UP] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 24, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MARK_DOWN] && ![[temp valueForKey:MARK_DOWN] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 25, [[temp valueForKey:MARK_DOWN] UTF8String], -1, SQLITE_TRANSIENT);
                        
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 25, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:RUNNING_PLU_NUMBER] && ![[temp valueForKey:RUNNING_PLU_NUMBER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 26, [[temp valueForKey:RUNNING_PLU_NUMBER] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 26, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MODEL] && ![[temp valueForKey:MODEL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 27, [[temp valueForKey:MODEL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 27, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:OPEN_RATE] && ![[temp valueForKey:OPEN_RATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 28, [[temp valueForKey:OPEN_RATE] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 28, 0);
                    }
                    
                    if ([temp.allKeys containsObject:LAST_COST] && ![[temp valueForKey:LAST_COST] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 29, [[temp valueForKey:LAST_COST] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 29, 0);
                    }
                    
                    if ([temp.allKeys containsObject:AVG_COST] && ![[temp valueForKey:AVG_COST] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 30, [[temp valueForKey:AVG_COST] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 30, 0);
                    }
                    
                    if ([temp.allKeys containsObject:MINIMUM_PRICE] && ![[temp valueForKey:MINIMUM_PRICE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 31, [[temp valueForKey:MINIMUM_PRICE] doubleValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 31, 0);
                        
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_Date] && ![[temp valueForKey:CREATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 32, [[temp valueForKey:CREATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 32, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:UPDATED_Date] && ![[temp valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 33, [[temp valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 33, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:NON_TAXABLE] && ![[temp valueForKey:NON_TAXABLE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 34, [[temp valueForKey:NON_TAXABLE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 34, 0);
                    }
                    
                    if ([temp.allKeys containsObject:JIT_STOCK] && ![[temp valueForKey:JIT_STOCK] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 35, [[temp valueForKey:JIT_STOCK] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 35, 0);
                    }
                    
                    if ([temp.allKeys containsObject:HSN_CODE] && ![[temp valueForKey:HSN_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 36, [[temp valueForKey:HSN_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 36, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ZERO_STOCK] && ![[temp valueForKey:ZERO_STOCK] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 37, [[temp valueForKey:ZERO_STOCK] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 37, 1);
                    }
                    
                    if ([temp.allKeys containsObject:PICTURE_1] && ![[temp valueForKey:PICTURE_1] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 38, [[temp valueForKey:PICTURE_1] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 38, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PICTURE_2] && ![[temp valueForKey:PICTURE_2] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 39, [[temp valueForKey:PICTURE_2] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 39, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PICTURE_3] && ![[temp valueForKey:PICTURE_3] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 40, [[temp valueForKey:PICTURE_3] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 40, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:DISCOUNTABLE] && ![[temp valueForKey:DISCOUNTABLE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 41, [[temp valueForKey:DISCOUNTABLE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 41, 0);
                    }
                    
                    if ([temp.allKeys containsObject:ALLOW_DECIMALS] && ![[temp valueForKey:ALLOW_DECIMALS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 42, [[temp valueForKey:ALLOW_DECIMALS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 42, 0);
                    }
                    
                    if ([temp.allKeys containsObject:STORELOCATION] && ![[temp valueForKey:STORELOCATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 43, [[temp valueForKey:STORELOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 43, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SHORT_DESCRIPTION] && ![[temp valueForKey:SHORT_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 44, [[temp valueForKey:SHORT_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 44, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:WARANTY_DETAILS] && ![[temp valueForKey:WARANTY_DETAILS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 45, [[temp valueForKey:WARANTY_DETAILS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 45, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:REMARKS] && ![[temp valueForKey:REMARKS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 46, [[temp valueForKey:REMARKS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 46, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:EDITABLE] && ![[temp valueForKey:EDITABLE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 47, [[temp valueForKey:EDITABLE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 47, 0);
                    }
                    
                    if ([temp.allKeys containsObject:IS_COST_PRICE_EDITABLE] && ![[temp valueForKey:IS_COST_PRICE_EDITABLE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 48, [[temp valueForKey:IS_COST_PRICE_EDITABLE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 48, 0);
                    }
                    
                    if ([temp.allKeys containsObject:UOM_LABEL] && ![[temp valueForKey:UOM_LABEL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 49, [[temp valueForKey:UOM_LABEL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 49, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ALTERNATE_SKU_ID] && ![[temp valueForKey:ALTERNATE_SKU_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 50, [[temp valueForKey:ALTERNATE_SKU_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 50, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SEASON_CODE] && ![[temp valueForKey:SEASON_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 51, [[temp valueForKey:SEASON_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 51, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ALIAS_NAME] && ![[temp valueForKey:ALIAS_NAME] isKindOfClass:[NSNull class]]) {
                        
                        sqlite3_bind_text(localInsertStmt, 52, [[temp valueForKey:ALIAS_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 52, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ITEM_TYPE_] && ![[temp valueForKey:ITEM_TYPE_] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 53, [[temp valueForKey:ITEM_TYPE_] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 53, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ITEM_DESIGN] && ![[temp valueForKey:ITEM_DESIGN] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 54, [[temp valueForKey:ITEM_DESIGN] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 54, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kIsManuFacturedItem] && ![[temp valueForKey:kIsManuFacturedItem] isKindOfClass:[NSNull class]]) {
                        
                        sqlite3_bind_int(localInsertStmt, 55,  [[temp valueForKey:kIsManuFacturedItem] boolValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 55, 0);
                    }
                    
                    if ([temp.allKeys containsObject:kPackagedType] && ![[temp valueForKey:kPackagedType] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 56,  [[temp valueForKey:kPackagedType] boolValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 56, 0);
                    }
                    
                    if ([temp.allKeys containsObject:kItemTaxExclusive] && ![[temp valueForKey:kItemTaxExclusive] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 57,  [[temp valueForKey:kItemTaxExclusive] boolValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 57, 0);
                    }
                    
                    if ([temp.allKeys containsObject: TAXATION_ON_DISCOUNT_PRICE] && ![[temp valueForKey:TAXATION_ON_DISCOUNT_PRICE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 58, [[temp valueForKey:TAXATION_ON_DISCOUNT_PRICE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 58, 1);
                    }
                    
                    if ([temp.allKeys containsObject:NET_REALIZABLE_VALUE] && ![[temp valueForKey:NET_REALIZABLE_VALUE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 59,  [[temp valueForKey:NET_REALIZABLE_VALUE] floatValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 59, 0);
                    }
                    
                    if ([temp.allKeys containsObject:SECTION] && ![[temp valueForKey:SECTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 60, [[temp valueForKey:SECTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 60, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:FABRIC] && ![[temp valueForKey:FABRIC] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 61, [[temp valueForKey:FABRIC] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 61, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_CLASS] && ![[temp valueForKey:PRODUCT_CLASS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 62, [[temp valueForKey:PRODUCT_CLASS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 62, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:TRACKING_REQUIRED] && ![[temp valueForKey:TRACKING_REQUIRED] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 63, [[temp valueForKey:TRACKING_REQUIRED] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 63, 0);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_CATEGORY] && ![[temp valueForKey:PRODUCT_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 64, [[temp valueForKey:PRODUCT_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else  if ([temp.allKeys containsObject:ITEM_CATEGORY] && ![[temp valueForKey:ITEM_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 64, [[temp valueForKey:ITEM_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 64, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SUB_CATEGORY] && ![[temp valueForKey:SUB_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 65, [[temp valueForKey:SUB_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 65, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_USAGE] && ![[temp valueForKey:PRODUCT_USAGE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 66, [[temp valueForKey:PRODUCT_USAGE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 66, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_SIDE_EFFECTS] && ![[temp valueForKey:PRODUCT_SIDE_EFFECTS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 67, [[temp valueForKey:PRODUCT_SIDE_EFFECTS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 67, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_PRECAUTIONS] && ![[temp valueForKey:PRODUCT_PRECAUTIONS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 68, [[temp valueForKey:PRODUCT_PRECAUTIONS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 68, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_HANDLING] && ![[temp valueForKey:PRODUCT_HANDLING] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 69, [[temp valueForKey:PRODUCT_HANDLING] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 69, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_CONSUMPTION_INTERACTION] && ![[temp valueForKey:PRODUCT_CONSUMPTION_INTERACTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text( localInsertStmt, 70, [[temp valueForKey:PRODUCT_CONSUMPTION_INTERACTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text( localInsertStmt, 70, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    
                    if ([temp.allKeys containsObject:IS_COMBO] && ![[temp valueForKey:IS_COMBO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 71, [[temp valueForKey:IS_COMBO] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 71, 0);
                    }
                    
                    if ([temp.allKeys containsObject:kPrimaryDepartment] && ![[temp valueForKey:kPrimaryDepartment] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 72, [[temp valueForKey:kPrimaryDepartment] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 72, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SECONDARY_DEPARTMENT] && ![[temp valueForKey:SECONDARY_DEPARTMENT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 73, [[temp valueForKey:SECONDARY_DEPARTMENT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 73, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        NSLog(@"sku becomes false in due error while inserting into database");
                    }
                    else {
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- SKU_MASTER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- SKU_MASTER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
        
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- SKU_MASTER----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
    
    /**** perivous code ****/
    
    //    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    //    BOOL status = FALSE;
    //
    //    @try {
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            if (deleteStmt == nil) {
    //                char *errMsg;
    //
    //                //added by following new keys on 08/07/2017 & 12/08/2017 & 20/02/2018 & 06/03/2018....
    //
    //               //hsn_code,net_realizable_value,section,fabric,product_class,category,sub_category,is_tax_on_discounted_price,tracking_required
    //
    //                //upto here on 08/07/2017....
    //
    //                const char * sqlStatement  = "create table if not exists sku_master(`sku_Id` VARCHAR(100) NOT NULL,product_Id VARCHAR(100) NOT NULL,ean VARCHAR(100) NULL DEFAULT NULL,supplier_name VARCHAR(150) NULL DEFAULT NULL,brand_code VARCHAR(100) NULL DEFAULT NULL,status VARCHAR(100) NULL DEFAULT NULL,manufacturer_code VARCHAR(100) NULL DEFAULT NULL,manufacturer_name VARCHAR(200) NULL DEFAULT NULL,uom VARCHAR(50) NULL DEFAULT NULL,quantity FLOAT NULL DEFAULT NULL,pack_size INT(11) NULL DEFAULT NULL,color VARCHAR(100) NULL DEFAULT NULL,pattern_code VARCHAR(100) NULL DEFAULT NULL,re_order_point FLOAT NULL DEFAULT NULL,order_quantity FLOAT NULL DEFAULT NULL,min_sale_qty FLOAT NULL DEFAULT NULL,lead_time_days INT(50) NULL DEFAULT NULL,max_stock FLOAT NULL DEFAULT NULL,stock FLOAT NULL DEFAULT NULL,tax_code VARCHAR(50) NULL DEFAULT NULL,fr_tax_code INT(11) NULL DEFAULT NULL,mark_up VARCHAR(100) NULL DEFAULT NULL,mark_down VARCHAR(100) NULL DEFAULT NULL,running_plu_number VARCHAR(100) NULL DEFAULT NULL,model VARCHAR(100) NULL DEFAULT NULL,open_rate FLOAT NULL DEFAULT NULL,last_cost FLOAT NULL DEFAULT NULL,average_cost FLOAT NULL DEFAULT NULL,minimum_price FLOAT NULL DEFAULT NULL,created_date DATE NULL DEFAULT NULL,updated_date DATETIME NULL DEFAULT NULL,not_taxable TINYINT(4) NULL DEFAULT NULL,jit_stock TINYINT(4) NULL DEFAULT NULL,zero_stock TINYINT(4) NULL DEFAULT NULL,picture1 VARCHAR(150) NULL DEFAULT NULL,picture2 VARCHAR(150) NULL DEFAULT NULL,picture3 VARCHAR(150) NULL DEFAULT NULL,discountable TINYINT(4) NULL DEFAULT NULL,allow_decimals TINYINT(4) NULL DEFAULT NULL,store_location VARCHAR(1000) NULL DEFAULT NULL,primary_department VARCHAR(100) NULL DEFAULT NULL,short_description VARCHAR(250) NULL DEFAULT NULL,waranty_details VARCHAR(250) NULL DEFAULT NULL,remarks VARCHAR(250) NULL DEFAULT NULL,editable TINYINT(4) NULL DEFAULT NULL,secondary_department VARCHAR(100) NULL DEFAULT NULL,uom_label CHAR(20) NULL DEFAULT NULL,alternate_sku_id CHAR(100) NULL DEFAULT NULL,season_code CHAR(25) NULL DEFAULT NULL,alias_name VARCHAR(200) NULL DEFAULT NULL,item_type CHAR(50) NULL DEFAULT NULL,item_design CHAR(50) NULL DEFAULT NULL,is_manufactured_item TINYINT(4) NULL DEFAULT '0',is_packed INT  DEFAULT '0',is_tax_exclusive INT  DEFAULT '0',`hsn_code` CHAR(50) NULL DEFAULT NULL,`net_realizable_value` DECIMAL(10,2) NULL DEFAULT '0.00',`section` CHAR(60) NULL DEFAULT '',`fabric` CHAR(60) NULL DEFAULT '',`product_class` CHAR(100) NULL DEFAULT '',`category` CHAR(100) NULL DEFAULT '',`sub_category` CHAR(100) NULL DEFAULT '',is_tax_on_discounted_price TINYINT(4) NULL DEFAULT NULL,tracking_required TINYINT(4) NULL DEFAULT NULL,PRIMARY KEY(sku_id))";
    //
    //                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
    //                    == SQLITE_OK) {
    //
    //                    NSLog(@"Success");
    //                }
    //            }
    //        }
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            if (insertStmt == nil) {
    //
    //                const char * sqlStatement = "INSERT OR REPLACE into sku_master(sku_Id,product_Id,ean ,supplier_name,brand_code,status,manufacturer_code,manufacturer_name,uom,quantity,pack_size,color,pattern_code,re_order_point,order_quantity,min_sale_qty,lead_time_days,max_stock,stock,tax_code,fr_tax_code,mark_up,mark_down,running_plu_number,model,open_rate,last_cost,average_cost,minimum_price,created_date,updated_date,not_taxable,jit_stock,zero_stock,picture1,picture2,picture3,discountable,allow_decimals,store_location,primary_department,short_description,waranty_details,remarks,editable,secondary_department,uom_label,alternate_sku_id,season_code,alias_name,item_type,item_design  ,is_manufactured_Item ,is_packed ,is_tax_exclusive,hsn_code,net_realizable_value,section,fabric,product_class,category,sub_category,is_tax_on_discounted_price,tracking_required) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    //
    //                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
    //
    //
    //
    //                    for (int i=0; i<[itemList count]; i++) {
    //
    //                        NSDictionary *temp = [itemList objectAtIndex:i] ;
    //
    //
    //                        if (![[temp valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,1, [[temp valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,1, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"productId"] && ![[temp valueForKey:@"productId"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,2, [[temp valueForKey:@"productId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,2, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        sqlite3_bind_text(insertStmt, 3,  [[temp valueForKey:EAN] UTF8String], -1, SQLITE_TRANSIENT);
    //                        if ([[temp allKeys] containsObject:@"supplierName"] && ![[temp valueForKey:@"supplierName"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,4, [[temp valueForKey:@"supplierName"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,4, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"brandCode"] && ![[temp valueForKey:@"brandCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,5, [[temp valueForKey:@"brandCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,5, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"status"] && ![[temp valueForKey:@"status"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,6, [[temp valueForKey:@"status"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,6, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"manufacturerCode"] && ![[temp valueForKey:@"manufacturerCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,7, [[temp valueForKey:@"manufacturerCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,7, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"manufacturerName"] && ![[temp valueForKey:@"manufacturerName"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,8, [[temp valueForKey:@"manufacturerName"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,8, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"uom"] && ![[temp valueForKey:@"uom"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,9, [[temp valueForKey:@"uom"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,9, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"stock"] && ![[temp valueForKey:@"stock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,10,[[temp valueForKey:@"stock"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,10,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:PACK_SIZE] && ![[temp valueForKey:PACK_SIZE] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt,11,[[temp valueForKey:PACK_SIZE] intValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt,11,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:COLOR] && ![[temp valueForKey:COLOR] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,12, [[temp valueForKey:COLOR] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,12, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"patternCode"] && ![[temp valueForKey:@"patternCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,13, [[temp valueForKey:@"patternCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,13, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"reorderPoint"] && ![[temp valueForKey:@"reorderPoint"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,14,[[temp valueForKey:@"reorderPoint"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,14,[[temp valueForKey:@"reorderPoint"] doubleValue]);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"orderQuantity"] && ![[temp valueForKey:@"orderQuantity"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,15,[[temp valueForKey:@"orderQuantity"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,15,[[temp valueForKey:@"orderQuantity"] doubleValue]);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"minSaleQty"] && ![[temp valueForKey:@"minSaleQty"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,16,[[temp valueForKey:@"minSaleQty"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,16,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"leadTimeDays"] && ![[temp valueForKey:@"leadTimeDays"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt,17,[[temp valueForKey:@"leadTimeDays"] intValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt,17,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"maxStock"] && ![[temp valueForKey:@"maxStock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,18,[[temp valueForKey:@"maxStock"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,18,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"stock"] && ![[temp valueForKey:@"stock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,19,[[temp valueForKey:@"stock"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,19,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"taxCode"] && ![[temp valueForKey:@"taxCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,20, [[temp valueForKey:@"taxCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,20, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"frTaxCode"] && ![[temp valueForKey:@"frTaxCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt,21,[[temp valueForKey:@"frTaxCode"] intValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt,21,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"markUp"] && ![[temp valueForKey:@"markUp"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,22, [[temp valueForKey:@"markUp"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,22, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"markDown"] && ![[temp valueForKey:@"markDown"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,23, [[temp valueForKey:@"markDown"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,23, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"runningPluNumber"] && ![[temp valueForKey:@"runningPluNumber"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,24, [[temp valueForKey:@"runningPluNumber"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,24, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"model"] && ![[temp valueForKey:@"model"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,25, [[temp valueForKey:@"model"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,25, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"openRate"] && ![[temp valueForKey:@"openRate"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,26,[[temp valueForKey:@"openRate"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,26,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"lastCost"] && ![[temp valueForKey:@"lastCost"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,27,[[temp valueForKey:@"lastCost"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,27,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"avgCost"] && ![[temp valueForKey:@"avgCost"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,28,[[temp valueForKey:@"avgCost"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,28,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"minimumPrice"] && ![[temp valueForKey:@"minimumPrice"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,29,[[temp valueForKey:@"minimumPrice"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,29,0);
    //
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"createdDate"] && ![[temp valueForKey:@"createdDate"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,30, [[temp valueForKey:@"createdDate"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,30, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"updatedDate"] && ![[temp valueForKey:@"updatedDate"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,31, [[temp valueForKey:@"updatedDate"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,31, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"nonTaxable"] && ![[temp valueForKey:@"nonTaxable"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 32, [[temp valueForKey:@"nonTaxable"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 32, 0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"jitStock"] && ![[temp valueForKey:@"jitStock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 33, [[temp valueForKey:@"jitStock"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 33, 0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"zeroStock"] && ![[temp valueForKey:@"zeroStock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 34, [[temp valueForKey:@"zeroStock"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 34, 1);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"picture1"] && ![[temp valueForKey:@"picture1"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,35, [[temp valueForKey:@"picture1"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,35, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"picture2"] && ![[temp valueForKey:@"picture2"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,36, [[temp valueForKey:@"picture2"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,36, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"picture3"] && ![[temp valueForKey:@"picture3"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,37, [[temp valueForKey:@"picture3"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,37, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"discountable"] && ![[temp valueForKey:@"discountable"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 38, [[temp valueForKey:@"discountable"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 38, 0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"allowDecimals"] && ![[temp valueForKey:@"allowDecimals"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 39, [[temp valueForKey:@"allowDecimals"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 39, 0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"storeLocation"] && ![[temp valueForKey:@"storeLocation"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,40, [[temp valueForKey:@"storeLocation"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,40, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"primaryDepartment"] && ![[temp valueForKey:@"primaryDepartment"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,41, [[temp valueForKey:@"primaryDepartment"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,41, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"description"] && ![[temp valueForKey:@"description"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,42, [[temp valueForKey:@"description"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,42, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"warantyDetails"] && ![[temp valueForKey:@"warantyDetails"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,43, [[temp valueForKey:@"warantyDetails"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,43, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"remarks"] && ![[temp valueForKey:@"remarks"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,44, [[temp valueForKey:@"remarks"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,44, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"editable"] && ![[temp valueForKey:@"editable"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 45, [[temp valueForKey:@"editable"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 45, 0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"secondaryDepartment"] && ![[temp valueForKey:@"secondaryDepartment"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,46, [[temp valueForKey:@"secondaryDepartment"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,46, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"uomLabel"] && ![[temp valueForKey:@"uomLabel"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,47, [[temp valueForKey:@"uomLabel"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,47, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"alternateSkuId"] && ![[temp valueForKey:@"alternateSkuId"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,48, [[temp valueForKey:@"alternateSkuId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,48, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"seasonCode"] && ![[temp valueForKey:@"seasonCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,49, [[temp valueForKey:@"seasonCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,49, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"aliasName"] && ![[temp valueForKey:@"aliasName"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,50, [[temp valueForKey:@"aliasName"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,50, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"itemType"] && ![[temp valueForKey:@"itemType"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,51, [[temp valueForKey:@"itemType"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,51, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"itemDesign"] && ![[temp valueForKey:@"itemDesign"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,52, [[temp valueForKey:@"itemDesign"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,52, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kIsManuFacturedItem] && ![[temp valueForKey:kIsManuFacturedItem] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 53,  [[temp valueForKey:kIsManuFacturedItem] boolValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 53, 0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kPackagedType] && ![[temp valueForKey:kPackagedType] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 54,  [[temp valueForKey:kPackagedType] boolValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 54, 0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kItemTaxExclusive] && ![[temp valueForKey:kItemTaxExclusive] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 55,  [[temp valueForKey:kItemTaxExclusive] boolValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 55, 0);
    //                        }
    //
    //                        //added by Srinivasulu on 08/07/2017....
    //
    //                        //hsn_code,net_realizable_value,section,fabric)
    //                        if ([[temp allKeys] containsObject:HSN_CODE] && ![[temp valueForKey:HSN_CODE] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,56, [[temp valueForKey:HSN_CODE] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,56, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"netRealizableValue"] && ![[temp valueForKey:@"netRealizableValue"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 57,  [[temp valueForKey:@"netRealizableValue"] floatValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 57, 0.00);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:SECTION] && ![[temp valueForKey:SECTION] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,58, [[temp valueForKey:SECTION] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,58, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"fabric"] && ![[temp valueForKey:@"fabric"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,59, [[temp valueForKey:@"fabric"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,59, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        //product_class added on 12/08/2017....
    //
    //
    //                        if ([[temp allKeys] containsObject:PRODUCT_CLASS] && ![[temp valueForKey:PRODUCT_CLASS] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text( insertStmt, 60, [[temp valueForKey:PRODUCT_CLASS] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text( insertStmt, 60, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kProductCategory] && ![[temp valueForKey:kProductCategory] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text( insertStmt, 61, [[temp valueForKey:kProductCategory] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text( insertStmt, 61, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kProductSubCategory] && ![[temp valueForKey:kProductSubCategory] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text( insertStmt, 62, [[temp valueForKey:kProductSubCategory] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text( insertStmt, 62, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //
    //                        if ([[temp allKeys] containsObject: TAXATION_ON_DISCOUNT_PRICE] && ![[temp valueForKey:TAXATION_ON_DISCOUNT_PRICE] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 63, [[temp valueForKey:TAXATION_ON_DISCOUNT_PRICE] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 63, 1);
    //                        }
    //
    //
    //                        if ([[temp allKeys] containsObject:TRACKING_REQUIRED] && ![[temp valueForKey:TRACKING_REQUIRED] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 64, [[temp valueForKey:TRACKING_REQUIRED] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 64, 0);
    //                        }
    //
    //                        if(SQLITE_DONE != sqlite3_step(insertStmt)){
    //
    //                            status = FALSE;
    //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
    //                            NSLog(@"sku becomes false in due error while inserting into database");
    //                        }
    //                        else {
    //
    //                            status = true;
    //                        }
    //
    //                        sqlite3_reset(insertStmt);
    //                    }
    //
    //                }
    //                else {
    //
    //                    NSLog(@"%s",sqlite3_errmsg(database));
    //                }
    //
    //            }
    //            insertStmt = nil;
    //        }
    //    }
    //    @catch (NSException *exception) {
    //
    //    }
    //    @finally {
    //        NSDate *today = [NSDate date];
    //        NSDateFormatter *f = [[NSDateFormatter alloc] init];
    //        [f setDateFormat:@"dd/MM/yyyy HH:mm:ss"];
    //        NSString* currentdate = [f stringFromDate:today];
    //        NSLog(@"-----End Time---------%@",currentdate);
    //        sqlite3_finalize(insertStmt);
    //
    //        sqlite3_close(database);
    //        insertStmt = nil;
    //        deleteStmt = nil;
    //    }
    
    
    
    //    return status;
    
}

-(BOOL)saveSKUMasterDataFromCSVFile:(NSArray *)skuItemList {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- SKU_MASTER----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char * errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists `sku_master` (  `sku_Id` VARCHAR(100) NOT NULL,  `product_Id` VARCHAR(100) NOT NULL,  `ean` VARCHAR(100) NULL DEFAULT NULL,  `supplier_name` VARCHAR(150) NULL DEFAULT NULL,  `brand_code` VARCHAR(100) NULL DEFAULT NULL,  `status` VARCHAR(100) NULL DEFAULT NULL,  `manufacturer_code` VARCHAR(100) NULL DEFAULT NULL,  `manufacturer_name` VARCHAR(200) NULL DEFAULT NULL,  `uom` VARCHAR(50) NULL DEFAULT NULL,  `uom1` VARCHAR(20) NULL DEFAULT NULL,  `uom2` VARCHAR(20) NULL DEFAULT NULL,  `quantity` FLOAT NULL DEFAULT NULL,  `pack_size` INT(11) NULL DEFAULT NULL,  `color` VARCHAR(100) NULL DEFAULT NULL,  `pattern_code` VARCHAR(100) NULL DEFAULT NULL,  `re_order_point` FLOAT NULL DEFAULT NULL,  `order_quantity` FLOAT NULL DEFAULT NULL,  `min_sale_qty` FLOAT NULL DEFAULT NULL,  `lead_time_days` INT(50) NULL DEFAULT NULL,  `max_stock` FLOAT NULL DEFAULT NULL,  `stock` FLOAT NULL DEFAULT NULL,  `tax_code` VARCHAR(50) NULL DEFAULT NULL,  `fr_tax_code` INT(11) NULL DEFAULT NULL,  `mark_up` VARCHAR(100) NULL DEFAULT NULL,  `mark_down` VARCHAR(100) NULL DEFAULT NULL,  `running_plu_number` VARCHAR(100) NULL DEFAULT NULL,  `model` VARCHAR(100) NULL DEFAULT NULL,  `open_rate` FLOAT NULL DEFAULT NULL,  `last_cost` FLOAT NULL DEFAULT NULL,  `average_cost` FLOAT NULL DEFAULT NULL,  `minimum_price` FLOAT NULL DEFAULT NULL,  `created_date` DATE NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `not_taxable` TINYINT(4) NULL DEFAULT NULL,  `jit_stock` TINYINT(4) NULL DEFAULT NULL,  `hsn_code` CHAR(50) NULL DEFAULT NULL,  `zero_stock` TINYINT(4) NULL DEFAULT NULL,  `picture1` VARCHAR(150) NULL DEFAULT NULL,  `picture2` VARCHAR(150) NULL DEFAULT NULL,  `picture3` VARCHAR(150) NULL DEFAULT NULL,  `discountable` TINYINT(4) NULL DEFAULT NULL,  `allow_decimals` TINYINT(4) NULL DEFAULT NULL,  `store_location` VARCHAR(1000) NULL DEFAULT NULL,  `short_description` VARCHAR(250) NULL DEFAULT NULL,  `waranty_details` VARCHAR(250) NULL DEFAULT NULL,  `remarks` VARCHAR(250) NULL DEFAULT NULL,  `editable` TINYINT(4) NULL DEFAULT NULL,  `is_cost_price_editable` TINYINT(4) NULL DEFAULT '1',  `uom_label` CHAR(20) NULL DEFAULT NULL,  `alternate_sku_id` CHAR(100) NULL DEFAULT NULL,  `season_code` CHAR(25) NULL DEFAULT NULL,  `alias_name` VARCHAR(200) NULL DEFAULT NULL,  `item_type` CHAR(50) NULL DEFAULT NULL,  `item_design` CHAR(50) NULL DEFAULT NULL,  `is_manufactured_Item` TINYINT(4) NULL DEFAULT '0',  `is_packed` TINYINT(4) NULL DEFAULT '0',  `is_tax_exclusive` TINYINT(4) NULL DEFAULT '0',  `is_tax_on_discounted_price` TINYINT(4) NULL DEFAULT '1',  `net_realizable_value` DECIMAL(10,2) NULL DEFAULT '0.00',  `section` CHAR(60) NULL DEFAULT '',  `fabric` CHAR(60) NULL DEFAULT '',  `product_class` CHAR(100) NULL DEFAULT NULL,  `tracking_recquired` TINYINT(4) NULL DEFAULT '0',  `product_category` CHAR(50) NULL DEFAULT NULL,  `product_subcategory` CHAR(50) NULL DEFAULT NULL,  `product_usage` VARCHAR(250) NULL DEFAULT NULL,  `product_side_effects` VARCHAR(250) NULL DEFAULT NULL,  `product_precautions` VARCHAR(250) NULL DEFAULT NULL,  `product_handing` VARCHAR(50) NULL DEFAULT NULL,  `product_consumption_interaction` VARCHAR(100) NULL DEFAULT NULL,  `is_combo` TINYINT(4) NULL DEFAULT '0',  `primary_department` VARCHAR(100) NULL DEFAULT NULL,  `secondary_department` VARCHAR(100) NULL DEFAULT NULL,  PRIMARY KEY (`sku_Id`) )";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- SKU_MASTER TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `sku_master` (`sku_Id`, `product_Id`, `ean`, `supplier_name`, `brand_code`, `status`, `manufacturer_code`, `manufacturer_name`, `uom`, `uom1`, `uom2`, `quantity`, `pack_size`, `color`, `pattern_code`, `re_order_point`, `order_quantity`, `min_sale_qty`, `lead_time_days`, `max_stock`, `stock`, `tax_code`, `fr_tax_code`, `mark_up`, `mark_down`, `running_plu_number`, `model`, `open_rate`, `last_cost`, `average_cost`, `minimum_price`, `created_date`, `updated_date`, `not_taxable`, `jit_stock`, `hsn_code`, `zero_stock`, `picture1`, `picture2`, `picture3`, `discountable`, `allow_decimals`, `store_location`, `short_description`, `waranty_details`, `remarks`, `editable`, `is_cost_price_editable`, `uom_label`, `alternate_sku_id`, `season_code`, `alias_name`, `item_type`, `item_design`, `is_manufactured_Item`, `is_packed`, `is_tax_exclusive`, `is_tax_on_discounted_price`, `net_realizable_value`, `section`, `fabric`, `product_class`, `tracking_recquired`, `product_category`, `product_subcategory`, `product_usage`, `product_side_effects`, `product_precautions`, `product_handing`, `product_consumption_interaction`, `is_combo`, `primary_department`, `secondary_department`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                
                for ( NSString * itemListStr in skuItemList) {
                    
                    
                    NSArray * itemList = [itemListStr componentsSeparatedByString:@","];
                    
                    if([itemList count] >= 72){
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 7, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:6] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 8, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:7] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 9, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:8] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 10, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:9] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 11, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:10] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 12, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:11] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_int(localInsertStmt, 13, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:12] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_text(localInsertStmt, 14, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:13] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 15, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:14] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 16, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:15] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 17, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:16] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 18, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:17] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_int(localInsertStmt, 19, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:18] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_double(localInsertStmt, 20, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:19] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 21, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:20] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 22, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:21] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt, 23, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:22] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_text(localInsertStmt, 24, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:23] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 25, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:24] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 26, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:25] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 27, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:26] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 28, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:27] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 29, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:28] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 30, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:29] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 31, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:30] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 32, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:31] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 33, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:32] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt, 34, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:33] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_int(localInsertStmt, 35, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:34] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_text(localInsertStmt, 36, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:35] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt, 37, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:36] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_text(localInsertStmt, 38, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:37] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 39, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:38] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 40, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:39] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt, 41, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:40] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_int(localInsertStmt, 42, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:41] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_text(localInsertStmt, 43, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:42] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 44, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:43] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 45, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:44] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 46, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:45] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt, 47, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:46] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_int(localInsertStmt, 48, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:47] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_text(localInsertStmt, 49, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:48] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 50, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:49] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 51, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:50] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 52, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:51] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 53, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:52] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 54, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:53] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt, 55, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:54] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_int(localInsertStmt, 56, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:55] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_int(localInsertStmt, 57, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:56] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_int(localInsertStmt, 58, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:57] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_double(localInsertStmt, 59, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:58] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 60, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:59] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 61, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:60] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 62, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:61] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt, 63, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:62] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_text(localInsertStmt, 64, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:63] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 65, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:64] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 66, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:65] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 67, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:66] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 68, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:67] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 69, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:68] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 70, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:69] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt, 71, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:70] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_text(localInsertStmt, 72, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:71] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 73, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:72] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"sku becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- SKU_MASTER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- SKU_MASTER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- SKU_MASTER----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
    
    /**** perivous code ****/
    
    //    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    //    BOOL status = FALSE;
    //
    //    @try {
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            if (deleteStmt == nil) {
    //                char *errMsg;
    //
    //                //added by following new keys on 08/07/2017 & 12/08/2017 & 20/02/2018 & 06/03/2018....
    //
    //               //hsn_code,net_realizable_value,section,fabric,product_class,category,sub_category,is_tax_on_discounted_price,tracking_required
    //
    //                //upto here on 08/07/2017....
    //
    //                const char * sqlStatement  = "create table if not exists sku_master(`sku_Id` VARCHAR(100) NOT NULL,product_Id VARCHAR(100) NOT NULL,ean VARCHAR(100) NULL DEFAULT NULL,supplier_name VARCHAR(150) NULL DEFAULT NULL,brand_code VARCHAR(100) NULL DEFAULT NULL,status VARCHAR(100) NULL DEFAULT NULL,manufacturer_code VARCHAR(100) NULL DEFAULT NULL,manufacturer_name VARCHAR(200) NULL DEFAULT NULL,uom VARCHAR(50) NULL DEFAULT NULL,quantity FLOAT NULL DEFAULT NULL,pack_size INT(11) NULL DEFAULT NULL,color VARCHAR(100) NULL DEFAULT NULL,pattern_code VARCHAR(100) NULL DEFAULT NULL,re_order_point FLOAT NULL DEFAULT NULL,order_quantity FLOAT NULL DEFAULT NULL,min_sale_qty FLOAT NULL DEFAULT NULL,lead_time_days INT(50) NULL DEFAULT NULL,max_stock FLOAT NULL DEFAULT NULL,stock FLOAT NULL DEFAULT NULL,tax_code VARCHAR(50) NULL DEFAULT NULL,fr_tax_code INT(11) NULL DEFAULT NULL,mark_up VARCHAR(100) NULL DEFAULT NULL,mark_down VARCHAR(100) NULL DEFAULT NULL,running_plu_number VARCHAR(100) NULL DEFAULT NULL,model VARCHAR(100) NULL DEFAULT NULL,open_rate FLOAT NULL DEFAULT NULL,last_cost FLOAT NULL DEFAULT NULL,average_cost FLOAT NULL DEFAULT NULL,minimum_price FLOAT NULL DEFAULT NULL,created_date DATE NULL DEFAULT NULL,updated_date DATETIME NULL DEFAULT NULL,not_taxable TINYINT(4) NULL DEFAULT NULL,jit_stock TINYINT(4) NULL DEFAULT NULL,zero_stock TINYINT(4) NULL DEFAULT NULL,picture1 VARCHAR(150) NULL DEFAULT NULL,picture2 VARCHAR(150) NULL DEFAULT NULL,picture3 VARCHAR(150) NULL DEFAULT NULL,discountable TINYINT(4) NULL DEFAULT NULL,allow_decimals TINYINT(4) NULL DEFAULT NULL,store_location VARCHAR(1000) NULL DEFAULT NULL,primary_department VARCHAR(100) NULL DEFAULT NULL,short_description VARCHAR(250) NULL DEFAULT NULL,waranty_details VARCHAR(250) NULL DEFAULT NULL,remarks VARCHAR(250) NULL DEFAULT NULL,editable TINYINT(4) NULL DEFAULT NULL,secondary_department VARCHAR(100) NULL DEFAULT NULL,uom_label CHAR(20) NULL DEFAULT NULL,alternate_sku_id CHAR(100) NULL DEFAULT NULL,season_code CHAR(25) NULL DEFAULT NULL,alias_name VARCHAR(200) NULL DEFAULT NULL,item_type CHAR(50) NULL DEFAULT NULL,item_design CHAR(50) NULL DEFAULT NULL,is_manufactured_item TINYINT(4) NULL DEFAULT '0',is_packed INT  DEFAULT '0',is_tax_exclusive INT  DEFAULT '0',`hsn_code` CHAR(50) NULL DEFAULT NULL,`net_realizable_value` DECIMAL(10,2) NULL DEFAULT '0.00',`section` CHAR(60) NULL DEFAULT '',`fabric` CHAR(60) NULL DEFAULT '',`product_class` CHAR(100) NULL DEFAULT '',`category` CHAR(100) NULL DEFAULT '',`sub_category` CHAR(100) NULL DEFAULT '',is_tax_on_discounted_price TINYINT(4) NULL DEFAULT NULL,tracking_required TINYINT(4) NULL DEFAULT NULL,PRIMARY KEY(sku_id))";
    //
    //                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
    //                    == SQLITE_OK) {
    //
    //                    NSLog(@"Success");
    //                }
    //            }
    //        }
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            if (insertStmt == nil) {
    //
    //                const char * sqlStatement = "INSERT OR REPLACE into sku_master(sku_Id,product_Id,ean ,supplier_name,brand_code,status,manufacturer_code,manufacturer_name,uom,quantity,pack_size,color,pattern_code,re_order_point,order_quantity,min_sale_qty,lead_time_days,max_stock,stock,tax_code,fr_tax_code,mark_up,mark_down,running_plu_number,model,open_rate,last_cost,average_cost,minimum_price,created_date,updated_date,not_taxable,jit_stock,zero_stock,picture1,picture2,picture3,discountable,allow_decimals,store_location,primary_department,short_description,waranty_details,remarks,editable,secondary_department,uom_label,alternate_sku_id,season_code,alias_name,item_type,item_design  ,is_manufactured_Item ,is_packed ,is_tax_exclusive,hsn_code,net_realizable_value,section,fabric,product_class,category,sub_category,is_tax_on_discounted_price,tracking_required) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    //
    //                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
    //
    //
    //
    //                    for (int i=0; i<[itemList count]; i++) {
    //
    //                        NSDictionary *temp = [itemList objectAtIndex:i] ;
    //
    //
    //                        if (![[temp valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,1, [[temp valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,1, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"productId"] && ![[temp valueForKey:@"productId"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,2, [[temp valueForKey:@"productId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,2, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        sqlite3_bind_text(insertStmt, 3,  [[temp valueForKey:EAN] UTF8String], -1, SQLITE_TRANSIENT);
    //                        if ([[temp allKeys] containsObject:@"supplierName"] && ![[temp valueForKey:@"supplierName"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,4, [[temp valueForKey:@"supplierName"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,4, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"brandCode"] && ![[temp valueForKey:@"brandCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,5, [[temp valueForKey:@"brandCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,5, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"status"] && ![[temp valueForKey:@"status"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,6, [[temp valueForKey:@"status"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,6, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"manufacturerCode"] && ![[temp valueForKey:@"manufacturerCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,7, [[temp valueForKey:@"manufacturerCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,7, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"manufacturerName"] && ![[temp valueForKey:@"manufacturerName"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,8, [[temp valueForKey:@"manufacturerName"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,8, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"uom"] && ![[temp valueForKey:@"uom"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,9, [[temp valueForKey:@"uom"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,9, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"stock"] && ![[temp valueForKey:@"stock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,10,[[temp valueForKey:@"stock"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,10,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:PACK_SIZE] && ![[temp valueForKey:PACK_SIZE] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt,11,[[temp valueForKey:PACK_SIZE] intValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt,11,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:COLOR] && ![[temp valueForKey:COLOR] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,12, [[temp valueForKey:COLOR] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,12, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"patternCode"] && ![[temp valueForKey:@"patternCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,13, [[temp valueForKey:@"patternCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,13, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"reorderPoint"] && ![[temp valueForKey:@"reorderPoint"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,14,[[temp valueForKey:@"reorderPoint"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,14,[[temp valueForKey:@"reorderPoint"] doubleValue]);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"orderQuantity"] && ![[temp valueForKey:@"orderQuantity"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,15,[[temp valueForKey:@"orderQuantity"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,15,[[temp valueForKey:@"orderQuantity"] doubleValue]);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"minSaleQty"] && ![[temp valueForKey:@"minSaleQty"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,16,[[temp valueForKey:@"minSaleQty"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,16,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"leadTimeDays"] && ![[temp valueForKey:@"leadTimeDays"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt,17,[[temp valueForKey:@"leadTimeDays"] intValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt,17,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"maxStock"] && ![[temp valueForKey:@"maxStock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,18,[[temp valueForKey:@"maxStock"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,18,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"stock"] && ![[temp valueForKey:@"stock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,19,[[temp valueForKey:@"stock"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,19,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"taxCode"] && ![[temp valueForKey:@"taxCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,20, [[temp valueForKey:@"taxCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,20, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"frTaxCode"] && ![[temp valueForKey:@"frTaxCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt,21,[[temp valueForKey:@"frTaxCode"] intValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt,21,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"markUp"] && ![[temp valueForKey:@"markUp"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,22, [[temp valueForKey:@"markUp"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,22, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"markDown"] && ![[temp valueForKey:@"markDown"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,23, [[temp valueForKey:@"markDown"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,23, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"runningPluNumber"] && ![[temp valueForKey:@"runningPluNumber"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,24, [[temp valueForKey:@"runningPluNumber"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,24, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"model"] && ![[temp valueForKey:@"model"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,25, [[temp valueForKey:@"model"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,25, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"openRate"] && ![[temp valueForKey:@"openRate"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,26,[[temp valueForKey:@"openRate"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,26,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"lastCost"] && ![[temp valueForKey:@"lastCost"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,27,[[temp valueForKey:@"lastCost"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,27,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"avgCost"] && ![[temp valueForKey:@"avgCost"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,28,[[temp valueForKey:@"avgCost"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,28,0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"minimumPrice"] && ![[temp valueForKey:@"minimumPrice"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_double(insertStmt,29,[[temp valueForKey:@"minimumPrice"] doubleValue]);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,29,0);
    //
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"createdDate"] && ![[temp valueForKey:@"createdDate"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,30, [[temp valueForKey:@"createdDate"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,30, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"updatedDate"] && ![[temp valueForKey:@"updatedDate"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,31, [[temp valueForKey:@"updatedDate"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,31, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"nonTaxable"] && ![[temp valueForKey:@"nonTaxable"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 32, [[temp valueForKey:@"nonTaxable"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 32, 0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"jitStock"] && ![[temp valueForKey:@"jitStock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 33, [[temp valueForKey:@"jitStock"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 33, 0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"zeroStock"] && ![[temp valueForKey:@"zeroStock"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 34, [[temp valueForKey:@"zeroStock"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 34, 1);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"picture1"] && ![[temp valueForKey:@"picture1"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,35, [[temp valueForKey:@"picture1"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,35, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"picture2"] && ![[temp valueForKey:@"picture2"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,36, [[temp valueForKey:@"picture2"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,36, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"picture3"] && ![[temp valueForKey:@"picture3"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,37, [[temp valueForKey:@"picture3"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,37, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"discountable"] && ![[temp valueForKey:@"discountable"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 38, [[temp valueForKey:@"discountable"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 38, 0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"allowDecimals"] && ![[temp valueForKey:@"allowDecimals"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 39, [[temp valueForKey:@"allowDecimals"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 39, 0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"storeLocation"] && ![[temp valueForKey:@"storeLocation"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,40, [[temp valueForKey:@"storeLocation"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,40, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"primaryDepartment"] && ![[temp valueForKey:@"primaryDepartment"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,41, [[temp valueForKey:@"primaryDepartment"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,41, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"description"] && ![[temp valueForKey:@"description"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,42, [[temp valueForKey:@"description"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,42, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"warantyDetails"] && ![[temp valueForKey:@"warantyDetails"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,43, [[temp valueForKey:@"warantyDetails"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,43, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"remarks"] && ![[temp valueForKey:@"remarks"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,44, [[temp valueForKey:@"remarks"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,44, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"editable"] && ![[temp valueForKey:@"editable"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 45, [[temp valueForKey:@"editable"] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 45, 0);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"secondaryDepartment"] && ![[temp valueForKey:@"secondaryDepartment"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,46, [[temp valueForKey:@"secondaryDepartment"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,46, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"uomLabel"] && ![[temp valueForKey:@"uomLabel"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,47, [[temp valueForKey:@"uomLabel"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,47, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"alternateSkuId"] && ![[temp valueForKey:@"alternateSkuId"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,48, [[temp valueForKey:@"alternateSkuId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,48, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"seasonCode"] && ![[temp valueForKey:@"seasonCode"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,49, [[temp valueForKey:@"seasonCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,49, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp allKeys] containsObject:@"aliasName"] && ![[temp valueForKey:@"aliasName"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,50, [[temp valueForKey:@"aliasName"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,50, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"itemType"] && ![[temp valueForKey:@"itemType"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,51, [[temp valueForKey:@"itemType"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,51, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"itemDesign"] && ![[temp valueForKey:@"itemDesign"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,52, [[temp valueForKey:@"itemDesign"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,52, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kIsManuFacturedItem] && ![[temp valueForKey:kIsManuFacturedItem] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 53,  [[temp valueForKey:kIsManuFacturedItem] boolValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 53, 0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kPackagedType] && ![[temp valueForKey:kPackagedType] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 54,  [[temp valueForKey:kPackagedType] boolValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 54, 0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kItemTaxExclusive] && ![[temp valueForKey:kItemTaxExclusive] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 55,  [[temp valueForKey:kItemTaxExclusive] boolValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 55, 0);
    //                        }
    //
    //                        //added by Srinivasulu on 08/07/2017....
    //
    //                        //hsn_code,net_realizable_value,section,fabric)
    //                        if ([[temp allKeys] containsObject:HSN_CODE] && ![[temp valueForKey:HSN_CODE] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,56, [[temp valueForKey:HSN_CODE] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,56, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"netRealizableValue"] && ![[temp valueForKey:@"netRealizableValue"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 57,  [[temp valueForKey:@"netRealizableValue"] floatValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 57, 0.00);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:SECTION] && ![[temp valueForKey:SECTION] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,58, [[temp valueForKey:SECTION] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,58, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"fabric"] && ![[temp valueForKey:@"fabric"] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt,59, [[temp valueForKey:@"fabric"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,59, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        //product_class added on 12/08/2017....
    //
    //
    //                        if ([[temp allKeys] containsObject:PRODUCT_CLASS] && ![[temp valueForKey:PRODUCT_CLASS] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text( insertStmt, 60, [[temp valueForKey:PRODUCT_CLASS] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text( insertStmt, 60, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kProductCategory] && ![[temp valueForKey:kProductCategory] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text( insertStmt, 61, [[temp valueForKey:kProductCategory] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text( insertStmt, 61, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:kProductSubCategory] && ![[temp valueForKey:kProductSubCategory] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text( insertStmt, 62, [[temp valueForKey:kProductSubCategory] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text( insertStmt, 62, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //
    //                        if ([[temp allKeys] containsObject: TAXATION_ON_DISCOUNT_PRICE] && ![[temp valueForKey:TAXATION_ON_DISCOUNT_PRICE] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 63, [[temp valueForKey:TAXATION_ON_DISCOUNT_PRICE] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 63, 1);
    //                        }
    //
    //
    //                        if ([[temp allKeys] containsObject:TRACKING_REQUIRED] && ![[temp valueForKey:TRACKING_REQUIRED] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_int(insertStmt, 64, [[temp valueForKey:TRACKING_REQUIRED] intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 64, 0);
    //                        }
    //
    //                        if(SQLITE_DONE != sqlite3_step(insertStmt)){
    //
    //                            status = FALSE;
    //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
    //                            NSLog(@"sku becomes false in due error while inserting into database");
    //                        }
    //                        else {
    //
    //                            status = true;
    //                        }
    //
    //                        sqlite3_reset(insertStmt);
    //                    }
    //
    //                }
    //                else {
    //
    //                    NSLog(@"%s",sqlite3_errmsg(database));
    //                }
    //
    //            }
    //            insertStmt = nil;
    //        }
    //    }
    //    @catch (NSException *exception) {
    //
    //    }
    //    @finally {
    //        NSDate *today = [NSDate date];
    //        NSDateFormatter *f = [[NSDateFormatter alloc] init];
    //        [f setDateFormat:@"dd/MM/yyyy HH:mm:ss"];
    //        NSString* currentdate = [f stringFromDate:today];
    //        NSLog(@"-----End Time---------%@",currentdate);
    //        sqlite3_finalize(insertStmt);
    //
    //        sqlite3_close(database);
    //        insertStmt = nil;
    //        deleteStmt = nil;
    //    }
    
    
    
    //    return status;
    
}
#pragma -mark start sku_eans related downloading and retriving methods....

/**
 * @description  In this method we are calling the web service with startIndex inorder to get sku_eans data....
 * @date
 * @method       getSkuEanDetails:--  totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getSkuEanDetails:(int)startIndex totalRecords:(int)totalRecords {
    BOOL status = false;
    
    @try {
        
        NSArray *keys = @[ITEM_SKU,REQUEST_HEADER,START_INDEX,kStoreLocation,TOTAL_SKUS,LAST_SKU_PRICE_UPDATED_DATE,REPORT_DATE,FILE_REQUIRED];
        NSArray * objects = @[EMPTY_STRING,[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,[NSString stringWithFormat:@"%d",totalRecords],EMPTY_STRING,EMPTY_STRING,[NSNumber numberWithBool:isFileDownload]];
        
        NSUserDefaults *defaults = [[NSUserDefaults alloc] init];
        
        if ([[defaults valueForKey:LAST_SKU_EAN_UPDATED] length]){
            
            NSLog(@"----SKU_EAN----Download----%@",[defaults valueForKey:LAST_SKU_EAN_UPDATED]);
            objects = @[@"",[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,[NSString stringWithFormat:@"%d",totalRecords],[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_SKU_EAN_UPDATED]],[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_SKU_EAN_UPDATED]],[NSNumber numberWithBool:isFileDownload]];
        }
        
        NSDictionary * dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController *controll = [[WebServiceController alloc] init];
        controll.skuServiceDelegate = self;
        status = [controll getSkuEans:salesReportJsonString];
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from services....
 * @date
 * @method       getSkuEanssSuccessResponse:--
 * @author
 * @param        NSDictionaty
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017 & before also & 10/07/2018....
 * @reason       reason -- added the exception handling and changing returning value to final & removed the for loop....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getSkuEanssSuccessResponse:(NSDictionary *)sucess {
    BOOL status = false;
    
    @try {
        
        totalAvailSkuEans = [[sucess valueForKey:TOTAL_SKUS] intValue];
        
        if(isFileDownload){
            NSString * fileUrlStr = [self checkGivenValueIsNullOrNil:[sucess valueForKey:FILE_URL] defaultReturn:@""];
            if(fileUrlStr.length){
                
                status = [self DownLoadFileAndInsertItInLoadDB:fileUrlStr dataType:SKU_EAN];
                totalAvailSkuEans = 0;
            }
        }
        else{
            
            NSArray * sku_ean_list = [sucess valueForKey:SKU_EAN_LIST];
            
            if (sku_ean_list.count > 0) {
                
                status =  [self saveProductsEAN:sku_ean_list];
            }
        }
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from service....
 * @date
 * @method       getSkuEansErrorResponse:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017 & before also....
 * @reason       reason -- added the exception handling && chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getSkuEansErrorResponse:(NSString *)failure {
    BOOL status = false;
    
    @try {
        
        if ([failure caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            
            status = TRUE;
        }
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are save products related informating in sku_eans....
 * @date
 * @method       saveProductsEAN:--
 * @author
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017. and before also & 10/07/2018....
 * @reason       reason -- added comments and SQL related object need to make them as local & changed the completed insert query's into transaction commit....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveProductsEAN:(NSArray *)itemEanArr {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- SKU_EAN----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists sku_eans (s_no int, sku_id text, ean text,status text,remarks text,updated_date text,store_location text,PRIMARY KEY(s_no))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- SKU_EAN TABLE Created Sucessfully ----");
            }
            
            NSString *item_id = [NSString stringWithFormat:@"%d",1];
            BOOL  itemIdExists = FALSE;
            const char * sqlSelectStmt = "select s_no from sku_eans order by s_no DESC LIMIT 1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    item_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                    itemIdExists = TRUE;
                }
                sqlite3_finalize(localSelectStmt);
            }
            
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into sku_eans(s_no, sku_id,ean,status,remarks,updated_date,store_location) Values(?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in itemEanArr) {
                    
                    sqlite3_bind_int(localInsertStmt, 1, item_id.intValue);
                    
                    item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                    
                    if ([[temp valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]] || [temp valueForKey:ITEM_SKU] == nil) {
                        sqlite3_bind_text(localInsertStmt, 2,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([[temp valueForKey:EAN] isKindOfClass:[NSNull class]] || [temp valueForKey:EAN] == nil) {
                        sqlite3_bind_text(localInsertStmt, 3,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3,  [[temp valueForKey:EAN] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([[temp valueForKey:SKU_EAN_STATUS] isKindOfClass:[NSNull class]] || [temp valueForKey:SKU_EAN_STATUS] == nil) {
                        sqlite3_bind_text(localInsertStmt, 4,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4,  [[temp valueForKey:SKU_EAN_STATUS]  UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([[temp valueForKey:REMARKS] isKindOfClass:[NSNull class]] || [temp valueForKey:REMARKS] == nil) {
                        sqlite3_bind_text(localInsertStmt, 5,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5,  [[temp valueForKey:REMARKS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([[temp valueForKey:LAST_SKU_UPDATED_DATE] isKindOfClass:[NSNull class]] || [temp valueForKey:LAST_SKU_UPDATED_DATE] == nil) {
                        sqlite3_bind_text(localInsertStmt, 6,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 6,  [[temp valueForKey:LAST_SKU_UPDATED_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([[temp valueForKey:STORE_LOCATION] isKindOfClass:[NSNull class]] || [temp valueForKey:STORE_LOCATION] == nil) {
                        sqlite3_bind_text(localInsertStmt, 7,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7,  [[temp valueForKey:STORE_LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        
                        //                        isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        NSLog(@"sku becomes false in due error while inserting into database");
                    }
                    else {
                        
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- SKU_EAN ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- SKU_EAN ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- SKU_EAN----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
    
    
    //    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    //    BOOL status = FALSE;
    //
    //    @try {
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            if (deleteStmt == nil) {
    //                char *errMsg;
    //                const char *sqlStatement = "create table if not exists sku_eans (s_no int, sku_id text, ean text,status text,remarks text,updated_date text,store_location text,PRIMARY KEY(s_no))";
    //
    //                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
    //                    == SQLITE_OK) {
    //
    //                    NSLog(@"Success");
    //
    //                }
    //            }
    //        }
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            if (deleteStmt == nil) {
    //                char *errMsg;
    //                const char *sqlStatement = "CREATE INDEX IF NOT EXISTS ean_index ON sku_eans(ean)";
    //
    //                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
    //                    == SQLITE_OK) {
    //
    //                    NSLog(@"Success");
    //
    //                }
    //                else {
    //                    NSLog(@"%s",sqlite3_errmsg(database));
    //
    //                }
    //
    //            }
    //
    //        }
    //
    //
    //        //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //        //
    //        //            if (deleteStmt == nil) {
    //        //                const char *sqlStatement = "delete from sku_eans";
    //        //
    //        //                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
    //        //
    //        //                    if(SQLITE_DONE != sqlite3_step(deleteStmt))
    //        //                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
    //        //
    //        //                    sqlite3_reset(deleteStmt);
    //        //                }
    //        //
    //        //            }
    //        //
    //        //        }
    //        //        deleteStmt = nil;
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            if (insertStmt == nil) {
    //                const char * sqlStatement = "INSERT OR REPLACE into sku_eans(s_no, sku_id,ean,status,remarks,updated_date,store_location) Values(?,?,?,?,?,?,?)";
    //
    //                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
    //
    //                    const char *sqlStatement = "select s_no from sku_eans order by s_no DESC LIMIT 1";
    //
    //                    NSString *item_id;
    //                    BOOL  itemIdExists = FALSE;
    //
    //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
    //                        //                        int count = sqlite3_column_count(selectStmt);
    //                        if (sqlite3_step(selectStmt) == SQLITE_ROW) {
    //
    //                            item_id = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
    //                            item_id = [NSString stringWithFormat:@"%d",[item_id intValue]+1];
    //                            itemIdExists = TRUE;
    //
    //
    //                        }
    //                        else {
    //                            //int random = arc4random_uniform(90000)+10000;
    //                            item_id = [NSString stringWithFormat:@"%d",1];
    //                        }
    //                        sqlite3_finalize(selectStmt);
    //                    }
    //
    //
    //                    for (int i=0; i<[itemEanArr count]; i++) {
    //
    //                        NSDictionary *temp = [itemEanArr objectAtIndex:i] ;
    //
    //                        sqlite3_bind_int(insertStmt, 1, [item_id intValue]);
    //                        item_id = [NSString stringWithFormat:@"%d",[item_id intValue]+1];
    //
    //                        sqlite3_bind_text(insertStmt, 2, [[temp valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
    //                        sqlite3_bind_text(insertStmt, 3,  [[temp valueForKey:EAN] UTF8String], -1, SQLITE_TRANSIENT);
    //                        if ([[temp valueForKey:SKU_EAN_STATUS] isKindOfClass:[NSNull class]] || [temp valueForKey:SKU_EAN_STATUS] == nil) {
    //                            sqlite3_bind_text(insertStmt, 4,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 4,  [[temp valueForKey:SKU_EAN_STATUS]  UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp valueForKey:REMARKS] isKindOfClass:[NSNull class]] || [temp valueForKey:REMARKS] == nil) {
    //                            sqlite3_bind_text(insertStmt, 5,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 5,  [[temp valueForKey:REMARKS] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp valueForKey:LAST_SKU_UPDATED_DATE] isKindOfClass:[NSNull class]] || [temp valueForKey:LAST_SKU_UPDATED_DATE] == nil) {
    //                            sqlite3_bind_text(insertStmt, 6,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else{
    //                            sqlite3_bind_text(insertStmt, 6,  [[temp valueForKey:LAST_SKU_UPDATED_DATE] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        if ([[temp valueForKey:STORE_LOCATION] isKindOfClass:[NSNull class]] || [temp valueForKey:STORE_LOCATION] == nil) {
    //                            sqlite3_bind_text(insertStmt, 7,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 7,  [[temp valueForKey:STORE_LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if(SQLITE_DONE != sqlite3_step(insertStmt)){
    //                            status = FALSE;
    //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
    //                            NSLog(@"sku becomes false in due error while inserting into database");
    //
    //                        }
    //                        else {
    //                            status = true;
    //
    //                        }
    //
    //                        sqlite3_reset(insertStmt);
    //
    //                    }
    //
    //                }
    //                else {
    //
    //                    NSLog(@"%s",sqlite3_errmsg(database));
    //                }
    //
    //            }
    //            insertStmt = nil;
    //        }
    //    }
    //    @catch (NSException *exception) {
    //
    //
    //    }
    //    @finally {
    //
    //        sqlite3_close(database);
    //        insertStmt = nil;
    //        deleteStmt = nil;
    //    }
    //    return status;
    
}

/**
 * @description  In this method we are save products related informating in sku_eans....
 * @date
 * @method       saveProductsEAN:--
 * @author
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017. and before also & 10/07/2018....
 * @reason       reason -- added comments and SQL related object need to make them as local & changed the completed insert query's into transaction commit....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveProductsEANDataFromCSVFile:(NSArray *)skuItemList {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- SKU_EAN----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists `sku_eans` ( `s_no` INT(10) NOT NULL, `sku_id` VARCHAR(100) NULL DEFAULT NULL, `ean` CHAR(25) NULL DEFAULT NULL, `status` VARCHAR(100) NULL DEFAULT NULL, `remarks` VARCHAR(250) NULL DEFAULT NULL, `updated_date` DATETIME NULL DEFAULT NULL, `store_location` VARCHAR(50) NULL DEFAULT NULL, PRIMARY KEY (`s_no`) )";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- SKU_EAN TABLE Created Sucessfully ----");
            }
            
            NSString *item_id = [NSString stringWithFormat:@"%d",1];
            BOOL  itemIdExists = FALSE;
            const char * sqlSelectStmt = "select s_no from sku_eans order by s_no DESC LIMIT 1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    item_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                    itemIdExists = TRUE;
                }
                sqlite3_finalize(localSelectStmt);
            }
            
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `sku_eans` (`s_no`, `sku_id`, `ean`, `status`, `remarks`, `updated_date`, `store_location`) VALUES (?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                    
                    for ( NSString * itemListStr in skuItemList) {
                        
                        NSArray * itemList = [itemListStr componentsSeparatedByString:@","];
                        
                        if([itemList count] >= 7){
                            sqlite3_bind_int(localInsertStmt, 1, item_id.intValue);
                            sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 7, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:6] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                            
                            item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                            
                            
                            
                            if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                                
                                //                        isCompleteDataInserted = FALSE;
                                NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                                NSLog(@"sku becomes false in due error while inserting into database");
                            }
                            else {
                                
                                //                        isCompleteDataInserted = true;
                            }
                            
                            sqlite3_reset(localInsertStmt);
                        }
                    }
                    
                    if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                    {
                        isCompleteDataInserted = true;
                        NSLog(@"----Committed -- SKU_EAN ----");
                    }
                    else
                    {
                        isCompleteDataInserted = false;
                        NSLog(@"----Commit -- failed -- SKU_EAN ----");
                    }
                    sqlite3_finalize(localInsertStmt);
                }
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- SKU_EAN----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

#pragma -mark start sku_price_list related downloading and retriving methods....

/**
 * @description  In this method we are calling the web service with startIndex inorder to get sku_price_list data....
 * @date
 * @method       getPriceLists:--  totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getPriceLists:(int)startIndex totalRecords:(int)totalRecords {
    BOOL status = false;
    
    @try {
        
        NSArray * keys = @[SKU_ID,REQUEST_HEADER,START_INDEX,kStoreLocation,TOTAL_SKUS,LAST_SKU_PRICE_UPDATED_DATE,FILE_REQUIRED];
        NSArray * objects = @[EMPTY_STRING,[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,[NSString stringWithFormat:@"%d",totalRecords],EMPTY_STRING,[NSNumber numberWithBool:isFileDownload]];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        if ([[defaults valueForKey:LAST_PRICE_UPDATED] length]) {
            
            NSLog(@"----SKU_PRICE_LIST----Download----%@",[defaults valueForKey:LAST_PRICE_UPDATED]);
            objects = @[EMPTY_STRING,[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,[NSString stringWithFormat:@"%d",totalRecords],[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_PRICE_UPDATED]],[NSNumber numberWithBool:isFileDownload]];
        }
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController *controller = [[WebServiceController alloc]init];
        controller.skuServiceDelegate = self;
        status  =   [controller getPriceList:salesReportJsonString];
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally{
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from services....
 * @date
 * @method       getSkuEanssSuccessResponse:--
 * @author
 * @param        NSDictionaty
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added the exception handling and changing returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getPriceListSuccessResponse:(NSDictionary *)success{
    BOOL isSaved = FALSE;
    
    @try {
        
        totalAvailPriceRecords = [[success valueForKey:TOTAL_SKUS] intValue];
        
        if(isFileDownload){
            NSString * fileUrlStr = [self checkGivenValueIsNullOrNil:[success valueForKey:FILE_URL] defaultReturn:@""];
            if(fileUrlStr.length){
                
                isSaved = [self DownLoadFileAndInsertItInLoadDB:fileUrlStr dataType:SKU_PRICE_LIST_TABLE];
                totalAvailPriceRecords = 0;
            }
        }
        else{
            NSArray * sku_price_list = [success valueForKey:SKU_PRICE_LIST];
            
            if (sku_price_list.count > 0) {
                //            NSMutableArray *itemArr = [[NSMutableArray alloc]init];
                //            for (int i=0; i<[sku_list count]; i++) {
                //
                //                NSDictionary *dic = [sku_list objectAtIndex:i];
                //                [itemArr addObject:dic];
                //            }
                isSaved =  [self savePricesList:sku_price_list];
            }
        }
    } @catch (NSException *exception) {
        
        isSaved = FALSE;
    } @finally {
        
        return isSaved;
    }
}

/**
 * @description  In this method we are save products related informating in sku_price_list....
 * @date
 * @method       savePricesList:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)savePricesList:(NSArray *)priceArray{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- SKU_PRICE_LIST----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists `sku_price_list` (  `sku_id` VARCHAR(100) NOT NULL, `cost_price` FLOAT NULL DEFAULT NULL, `description` VARCHAR(250) NULL DEFAULT NULL, `ean` VARCHAR(250) NULL DEFAULT NULL, `price` FLOAT NULL DEFAULT NULL, `sale_price` FLOAT NOT NULL, `wholesale_price` FLOAT NOT NULL, `extra_price` FLOAT NULL DEFAULT NULL, `plu_code` VARCHAR(100) NULL DEFAULT NULL, `created_date` DATE NULL DEFAULT NULL, `updated_date` DATE NULL DEFAULT NULL, `expiry_date` DATETIME NULL DEFAULT NULL, `size` VARCHAR(100) NULL DEFAULT NULL, `color` VARCHAR(100) NULL DEFAULT NULL, `color_shade` VARCHAR(100) NULL DEFAULT NULL, `mbq` VARCHAR(100) NULL DEFAULT NULL, `quantity_in_hand` DOUBLE NOT NULL, `acp` VARCHAR(100) NULL DEFAULT NULL, `store_location` VARCHAR(100) NULL DEFAULT NULL, `best_before_date` DATETIME NULL DEFAULT NULL, `effective_from_date` DATETIME NULL DEFAULT NULL, `blocked_quantity` FLOAT NULL DEFAULT NULL, `scraped_quantity` FLOAT NULL DEFAULT NULL, `product_range` VARCHAR(100) NULL DEFAULT NULL, `measure_range` VARCHAR(100) NULL DEFAULT NULL, `style_range` CHAR(50) NULL DEFAULT NULL, `alternate_plu_code` VARCHAR(100) NULL DEFAULT NULL, `conf_price` CHAR(25) NULL DEFAULT NULL, `product_batch_no` CHAR(25) NULL DEFAULT NULL, `product_ser_no` CHAR(25) NULL DEFAULT NULL, `manufacturing_date` DATETIME NULL DEFAULT NULL, `manufacturer_id` CHAR(200) NULL DEFAULT NULL, `package_id` CHAR(25) NULL DEFAULT NULL, `rfid_tag` CHAR(25) NULL DEFAULT NULL, `warranty_period` DATETIME NULL DEFAULT NULL, `set_code` CHAR(30) NULL DEFAULT NULL, `cash_discount` DECIMAL(10,2) NULL DEFAULT NULL, `reorder_point` DECIMAL(10,1) NULL DEFAULT '0.0', `discount_type` CHAR(60) NULL DEFAULT NULL, `discount` FLOAT NULL DEFAULT NULL, `utility` VARCHAR(300) NULL DEFAULT NULL, `business_category` VARCHAR(50) NULL DEFAULT NULL, `business_sub_category` VARCHAR(50) NULL DEFAULT NULL, `technical_specification` VARCHAR(250) NULL DEFAULT NULL, `product_sub_class` CHAR(100) NULL DEFAULT NULL, `packaging_date` DATE NULL DEFAULT NULL, `pack_size` INT(11) NULL DEFAULT '1', `min_sale_qty` DECIMAL(10,2) NULL DEFAULT '1.00', `sku_status` TINYINT(4) NULL DEFAULT '1', PRIMARY KEY (plu_code))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- SKU_PRICE_LIST TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `sku_price_list` (`sku_id`, `cost_price`, `description`, `ean`, `price`, `sale_price`, `wholesale_price`, `extra_price`, `plu_code`, `created_date`, `updated_date`, `expiry_date`, `size`, `color`, `color_shade`, `mbq`, `quantity_in_hand`, `acp`, `store_location`, `best_before_date`, `effective_from_date`, `blocked_quantity`, `scraped_quantity`, `product_range`, `measure_range`, `style_range`, `alternate_plu_code`, `conf_price`, `product_batch_no`, `product_ser_no`, `manufacturing_date`, `manufacturer_id`, `package_id`, `rfid_tag`, `warranty_period`, `set_code`, `cash_discount`, `reorder_point`, `discount_type`, `discount`, `utility`, `business_category`, `business_sub_category`, `technical_specification`, `product_sub_class`, `packaging_date`, `pack_size`, `min_sale_qty`, `sku_status`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in priceArray) {
                    
                    if ([temp.allKeys containsObject:ITEM_SKU] && ![[temp valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ITEM_PRICE] && ![[temp valueForKey:ITEM_PRICE] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_double(localInsertStmt, 2, [[temp valueForKey:ITEM_PRICE] doubleValue]);
                    }
                    else{
                        sqlite3_bind_double(localInsertStmt, 2, 0.0);
                    }
                    
                    if ([temp.allKeys containsObject:ITEM_DESCRIPTION] && ![[temp valueForKey:ITEM_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 3, [[temp valueForKey:ITEM_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:EAN] && ![[temp valueForKey:EAN] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4, [[temp valueForKey:EAN] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ITEM_UNIT_PRICE] && ![[temp valueForKey:ITEM_UNIT_PRICE] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_double(localInsertStmt, 5, [[temp valueForKey:ITEM_UNIT_PRICE] floatValue]);
                    }
                    else
                    {
                        sqlite3_bind_double(localInsertStmt, 5, 0.0);
                    }
                    
                    if ([temp.allKeys containsObject:SALE_PRICE] && ![[temp valueForKey:SALE_PRICE] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_double(localInsertStmt, 6, [[temp valueForKey:SALE_PRICE] floatValue]);
                    }
                    else{
                        sqlite3_bind_double(localInsertStmt, 6, 0.0);
                    }
                    
                    if ([temp.allKeys containsObject:WHOLESALE_PRICE] && ![[temp valueForKey:WHOLESALE_PRICE] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_double(localInsertStmt, 7, [[temp valueForKey:WHOLESALE_PRICE] doubleValue]);
                    }
                    else{
                        sqlite3_bind_double(localInsertStmt, 7, 0.0);
                    }
                    
                    if ([temp.allKeys containsObject:EXTRA_PRICE] && ![[temp valueForKey:EXTRA_PRICE] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_double(localInsertStmt,8,[[temp valueForKey:EXTRA_PRICE] floatValue]);
                    }
                    else{
                        sqlite3_bind_double(localInsertStmt, 8, 0.0);
                    }
                    
                    if ([temp.allKeys containsObject:PLU_CODE] && ![[temp valueForKey:PLU_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9, [[temp valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_DATE] && ![[temp valueForKey:CREATED_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 10, [[temp valueForKey:CREATED_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:UPDATED_Date] && ![[temp valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 11, [[temp valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:EXPIRY_DATE] && ![[temp valueForKey:EXPIRY_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 12, [[temp valueForKey:EXPIRY_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 12, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SIZE] && ![[temp valueForKey:SIZE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 13, [[temp valueForKey:SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 13, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:COLOR] && ![[temp valueForKey:COLOR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 14, [[temp valueForKey:COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:COLOR_SHADE] && ![[temp valueForKey:COLOR_SHADE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 15, [[temp valueForKey:COLOR_SHADE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MBQ] && ![[temp valueForKey:MBQ] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 16, [[temp valueForKey:MBQ]intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 16, 0);
                    }
                    
                    if ([temp.allKeys containsObject:QUANTITY_IN_HAND] && ![[temp valueForKey:QUANTITY_IN_HAND] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 17,[[temp valueForKey:QUANTITY_IN_HAND] floatValue]);
                    }
                    else if ([temp.allKeys containsObject:QUANTITY] && ![[temp valueForKey:QUANTITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 17,[[temp valueForKey:QUANTITY] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 17, 0);
                    }
                    
                    if ([temp.allKeys containsObject:ACP] && ![[temp valueForKey:ACP] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 18, [[temp valueForKey:ACP] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 18, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:STORE_LOCATION] && ![[temp valueForKey:STORE_LOCATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 19, [[temp valueForKey:STORE_LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 19, presentLocation.UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:BEST_BEFORE] && ![[temp valueForKey:BEST_BEFORE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 20, [[temp valueForKey:BEST_BEFORE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 20, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:EFFECTIVE_FROM_DATE_STR] && ![[temp valueForKey:EFFECTIVE_FROM_DATE_STR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 21, [[temp valueForKey:EFFECTIVE_FROM_DATE_STR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 21, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:BLOCKED_QUANTITY] && ![[temp valueForKey:BLOCKED_QUANTITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 22, [[temp valueForKey:BLOCKED_QUANTITY] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 22, 0);
                    }
                    
                    if ([temp.allKeys containsObject:SCRAPED_QUANTITY] && ![[temp valueForKey:SCRAPED_QUANTITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 23, [[temp valueForKey:SCRAPED_QUANTITY] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 23, 0);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_RANGE] && ![[temp valueForKey:PRODUCT_RANGE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 24, [[temp valueForKey:PRODUCT_RANGE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 24, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kMeasureRange] &&  ![[temp valueForKey:kMeasureRange] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 25, [[temp valueForKey:kMeasureRange] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 25, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:STYLE_RANGE] &&  ![[temp valueForKey:STYLE_RANGE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 26, [[temp valueForKey:STYLE_RANGE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 26, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ALTERNATE_PLUCODE] &&  ![[temp valueForKey:ALTERNATE_PLUCODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 27, [[temp valueForKey:ALTERNATE_PLUCODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 27, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CONFIRM_PROMPT_PRICE] &&  ![[temp valueForKey:CONFIRM_PROMPT_PRICE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 28, [[temp valueForKey:CONFIRM_PROMPT_PRICE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 28, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_BATCH_NO] && ![[temp valueForKey:PRODUCT_BATCH_NO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 29, [[temp valueForKey:PRODUCT_BATCH_NO] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 29, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_SER_NO] &&  ![[temp valueForKey:PRODUCT_SER_NO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 30, [[temp valueForKey:PRODUCT_SER_NO] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 30, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MANUFACTURED_DATE_STR] && ![[temp valueForKey:MANUFACTURED_DATE_STR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 31, [[temp valueForKey:MANUFACTURED_DATE_STR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 31, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MANUFACTURE_ID] &&  ![[temp valueForKey:MANUFACTURE_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 32, [[temp valueForKey:MANUFACTURE_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 32, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PACKAGE_ID] &&  ![[temp valueForKey:PACKAGE_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 33, [[temp valueForKey:PACKAGE_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 33, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:RFID_TAG] &&  ![[temp valueForKey:RFID_TAG] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 34, [[temp valueForKey:RFID_TAG] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 34, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:WARRANTY_PERIOD_STR] && ![[temp valueForKey:WARRANTY_PERIOD_STR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 35, [[temp valueForKey:WARRANTY_PERIOD_STR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 35, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SET_CODE] && ![[temp valueForKey:SET_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 36, [[temp valueForKey:SET_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 36, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CASH_DISCOUNT] && ![[temp valueForKey:CASH_DISCOUNT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt,37,[[temp valueForKey:CASH_DISCOUNT] floatValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 37, 0);
                    }
                    
                    if ([temp.allKeys containsObject:REORDER_POINT] && ![[temp valueForKey:REORDER_POINT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 38, [[temp valueForKey:REORDER_POINT] floatValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 38, 0.00);
                    }
                    
                    if ([temp.allKeys containsObject:DISCOUNT_TYPE] && ![[temp valueForKey:DISCOUNT_TYPE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 39, [[temp valueForKey:DISCOUNT_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 39, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:DISCOUNT] && ![[temp valueForKey:DISCOUNT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt,40,[[temp valueForKey:DISCOUNT] floatValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 40, 0.00);
                    }
                    
                    if ([temp.allKeys containsObject:UTILITY] && ![[temp valueForKey:UTILITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 41, [[temp valueForKey:UTILITY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 41, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:BUSINESS_CATEGORY] && ![[temp valueForKey:BUSINESS_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 42, [[temp valueForKey:BUSINESS_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 42, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:BUSINESS_SUB_CATEGORY] && ![[temp valueForKey:BUSINESS_SUB_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 43, [[temp valueForKey:BUSINESS_SUB_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 43, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:TECHNICAL_SPECIFICATION] && ![[temp valueForKey:TECHNICAL_SPECIFICATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 44, [[temp valueForKey:TECHNICAL_SPECIFICATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 44, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRODUCT_SUB_CLASS] && ![[temp valueForKey:PRODUCT_SUB_CLASS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 45, [[temp valueForKey:PRODUCT_SUB_CLASS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 45, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PACKAGING_DATE_] && ![[temp valueForKey:PACKAGING_DATE_] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 46, [[temp valueForKey:PACKAGING_DATE_] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 46, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PACK_SIZE] && ![[temp valueForKey:PACK_SIZE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt,47,[[temp valueForKey:PACK_SIZE] floatValue]);
                    }
                    else if ([temp.allKeys containsObject:Pack_Size] && ![[temp valueForKey:Pack_Size] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt,47,[[temp valueForKey:Pack_Size] floatValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 47, 0.00);
                    }
                    
                    if ([temp.allKeys containsObject:MIN_SALE_QTY] && ![[temp valueForKey:MIN_SALE_QTY] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_double(localInsertStmt,48,[[temp valueForKey:MIN_SALE_QTY] floatValue]);
                    }
                    else if ([temp.allKeys containsObject:Min_Sale_Qty] && ![[temp valueForKey:Min_Sale_Qty] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_double(localInsertStmt,48,[[temp valueForKey:Min_Sale_Qty] floatValue]);
                    }
                    else{
                        sqlite3_bind_double(localInsertStmt, 48, 0.0);
                    }
                    
                    if ([temp.allKeys containsObject:SKU_STATUS] && ![[temp valueForKey:SKU_STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt,49,[[temp valueForKey:SKU_STATUS] floatValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 49, 0);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        NSLog(@"sku becomes false in due to error in inserting into database");
                    }
                    else {
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- SKU_PRICE_LIST ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- SKU_PRICE_LIST ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- SKU_PRICE_LIST----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
    
    /**** perivous code ****/
    
    //    //added by Srinivasulu on 16/08/2017....
    //    //commented by Srinivasulu on 03/10/2017....
    //    //reason duplication was stopped from service end....
    //
    //    //    @try {
    //    //
    //    //        NSMutableOrderedSet * skuIdsOrderSet = [NSMutableOrderedSet new];
    //    //
    //    //        for(NSDictionary * tempDic in priceArray){
    //    //
    //    //            if ([[tempDic allKeys] containsObject:ITEM_SKU] && ![[tempDic valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]) {
    //    //
    //    //                [skuIdsOrderSet addObject:[tempDic valueForKey:ITEM_SKU]];
    //    //            }
    //    //
    //    //        }
    //    //        //commented by Srinivasulu on 03/10/2017....
    //    //        //reason duplication was stopped from service end....
    //    //
    //    ////        if([skuIdsOrderSet count])
    //    ////            [self deleteItemsFromSkuPriceList:skuIdsOrderSet];
    //    //
    //    //        //        -(void)deleteItemsFromSkuPriceList:(NSOrderedSet *)skuIdsOrderset {
    //    //
    //    //    } @catch (NSException *exception) {
    //    //
    //    //    }
    //
    //    //upto here on 16/08/2017....
    //
    //    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    //    BOOL status = FALSE;
    //
    //    @try {
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            if (deleteStmt == nil) {
    //                char *errMsg;
    //
    //                //added by Srinivasulu on 08/07/2017 - 12/08/2017 - 13/09/2017....
    //                //cash_discount - reorder_point - discount_type - discount - utility - business_category - business_sub_category - packaging_date - techanical_specition - product_sub_class
    //
    //                const char *sqlStatement = "create table if not exists sku_price_list (sku_id  VARCHAR (100) NOT NULL,cost_price    FLOAT   DEFAULT NULL,description VARCHAR (250) DEFAULT NULL,ean   VARCHAR (250) DEFAULT NULL,price     FLOAT    DEFAULT NULL,sale_price   FLOAT    NOT NULL,wholesale_price FLOAT    NOT NULL,extra_price FLOAT  DEFAULT NULL,plu_code   VARCHAR (100) DEFAULT NULL,created_date   text DEFAULT NULL,updated_date   text   DEFAULT NULL,expiry_date  text  DEFAULT NULL,size  VARCHAR (100) DEFAULT NULL,color VARCHAR (100) DEFAULT NULL,color_shade VARCHAR (100) DEFAULT NULL,mbq  VARCHAR (100) DEFAULT NULL,quantity_in_hand   DOUBLE  NOT NULL,acp VARCHAR (100) DEFAULT NULL,store_location   VARCHAR (100) DEFAULT NULL,best_before_date   text  DEFAULT NULL,effective_from_date text  DEFAULT NULL,blocked_quantity  FLOAT    DEFAULT NULL,scraped_quantity  FLOAT   DEFAULT NULL,product_range   VARCHAR (100) DEFAULT NULL,measure_range   VARCHAR (100) DEFAULT NULL,style_range   CHAR (50)  DEFAULT NULL,alternate_plu_code  VARCHAR (100) DEFAULT NULL,conf_price  CHAR (25)  DEFAULT NULL,product_batch_no    CHAR (25)  DEFAULT NULL,product_ser_no   CHAR (25)  DEFAULT NULL,manufacturing_date  text  DEFAULT NULL,manufacturer_id   CHAR (25)  DEFAULT NULL,package_id   CHAR (25)  DEFAULT NULL,rfid_tag  CHAR (25)  DEFAULT NULL,warranty_period text  DEFAULT NULL,set_code  CHAR (30) DEFAULT NULL,`cash_discount` DECIMAL(10,2) NULL DEFAULT NULL,`reorder_point` DECIMAL(10,1) NULL DEFAULT '0.0',`discount_type` CHAR(60) NULL DEFAULT NULL,`discount` FLOAT NULL DEFAULT NULL,`utility` VARCHAR(300) NULL DEFAULT NULL,`technical_specification` VARCHAR(250) NULL DEFAULT NULL,`product_sub_class` VARCHAR(250) NULL DEFAULT NULL,`business_category` VARCHAR(50) NULL DEFAULT NULL,`business_sub_category` VARCHAR(50) NULL DEFAULT NULL,`packaging_date` text NULL DEFAULT NULL, PRIMARY KEY (plu_code))";
    //
    //                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
    //                    == SQLITE_OK) {
    //
    //                    NSLog(@"Success");
    //                }
    //            }
    //        }
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            if (insertStmt == nil) {
    //
    //                const char * sqlStatement = "INSERT OR REPLACE into sku_price_list(sku_id ,cost_price,description ,ean,price ,sale_price ,wholesale_price ,extra_price,plu_code ,created_date ,updated_date ,expiry_date,size ,color,color_shade ,mbq,quantity_in_hand,acp,store_location,best_before_date,effective_from_date,blocked_quantity,scraped_quantity,product_range,measure_range,style_range,alternate_plu_code,conf_price,product_batch_no,product_ser_no,manufacturing_date,manufacturer_id,package_id,rfid_tag,warranty_period,set_code,cash_discount,reorder_point,discount_type,discount,utility,product_sub_class,business_category,business_sub_category,packaging_date) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    //
    //                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
    //
    //
    //                    for (int i=0; i<[priceArray count]; i++) {
    //
    //                        NSDictionary *temp = [priceArray objectAtIndex:i] ;
    //
    //                        if (![[temp valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt,1, [[temp valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,1, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:ITEM_PRICE] && ![[temp valueForKey:ITEM_PRICE] isKindOfClass:[NSNull class]])
    //                        {
    //                            sqlite3_bind_double(insertStmt,2,[[temp valueForKey:ITEM_PRICE] doubleValue]);
    //                        }
    //                        else{
    //                            sqlite3_bind_double(insertStmt,2,0.0);
    //                        }
    //
    //
    //
    //                        if (![[temp valueForKey:ITEM_DESCRIPTION] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 3, [[temp valueForKey:ITEM_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 3, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:EAN] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 4, [[temp valueForKey:EAN] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 4, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:ITEM_UNIT_PRICE] && ![[temp valueForKey:ITEM_UNIT_PRICE] isKindOfClass:[NSNull class]])
    //                        {
    //                            sqlite3_bind_double(insertStmt,5,[[temp valueForKey:ITEM_UNIT_PRICE] floatValue]);
    //                        }
    //                        else
    //                        {
    //                            sqlite3_bind_double(insertStmt,5,0.0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:SALE_PRICE] && ![[temp valueForKey:SALE_PRICE] isKindOfClass:[NSNull class]])
    //                        {
    //                            sqlite3_bind_double(insertStmt,6,[[temp valueForKey:SALE_PRICE] floatValue]);
    //                        }
    //                        else{
    //                            sqlite3_bind_double(insertStmt,6,0.0);
    //                        }
    //
    //                        sqlite3_bind_double(insertStmt,7,[[temp valueForKey:WHOLESALE_PRICE] doubleValue]);
    //
    //                        sqlite3_bind_double(insertStmt,8,[[temp valueForKey:EXTRA_PRICE] floatValue]);
    //
    //                        if (![[temp valueForKey:PLU_CODE] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt,9, [[temp valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,9, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:CREATED_DATE] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 10, [[temp valueForKey:CREATED_DATE] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 10, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"updatedDate"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt,11, [[temp valueForKey:@"updatedDate"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt,11, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:EXPIRY_DATE] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt,12, [[temp valueForKey:EXPIRY_DATE] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 12, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:SIZE] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 13, [[temp valueForKey:SIZE] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 13, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //
    //                        if (![[temp valueForKey:COLOR] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt,14, [[temp valueForKey:COLOR] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 14, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:COLOR_SHADE] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 15, [[temp valueForKey:COLOR_SHADE] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 15, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:MBQ] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_int(insertStmt, 16, [[temp valueForKey:MBQ]intValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 16, 0);
    //                        }
    //
    //                        if (![[temp valueForKey:QUANTITY_IN_HAND] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_double(insertStmt,17,[[temp valueForKey:QUANTITY_IN_HAND] floatValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,17,0);
    //                        }
    //
    //                        if (![[temp valueForKey:ACP] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 18, [[temp valueForKey:ACP] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 18, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //
    //                        if (![[temp valueForKey:STORE_LOCATION] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 19, [[temp valueForKey:STORE_LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 19, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"bestBefore"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 20, [[temp valueForKey:@"bestBefore"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 20, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //
    //                        if ([[temp allKeys] containsObject:@"effectiveFromDateStr"] && ![[temp valueForKey:@"effectiveFromDateStr"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 21, [[temp valueForKey:@"effectiveFromDateStr"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 21, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"blockedQuantity"] && ![[temp valueForKey:@"blockedQuantity"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_double(insertStmt,22,[[temp valueForKey:@"blockedQuantity"] floatValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,22,0);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"scrapedQuantity"] && ![[temp valueForKey:@"scrapedQuantity"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_double(insertStmt,23,[[temp valueForKey:@"scrapedQuantity"] floatValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_double(insertStmt,23,0);
    //                        }
    //
    //                        if (![[temp valueForKey:@"productRange"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 24, [[temp valueForKey:@"productRange"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 24, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"measureRange"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 25, [[temp valueForKey:@"measureRange"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 25, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"styleRange"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 26, [[temp valueForKey:@"styleRange"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 26, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"alternatePluCode"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 27, [[temp valueForKey:@"alternatePluCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 27, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"confirmPromptPrice"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 28, [[temp valueForKey:@"confirmPromptPrice"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 28, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"productBatchNo"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 29, [[temp valueForKey:@"productBatchNo"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 29, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"productSerNo"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 30, [[temp valueForKey:@"productSerNo"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 30, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"manufacturedDateStr"] && ![[temp valueForKey:@"manufacturedDateStr"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 31, [[temp valueForKey:@"manufacturedDateStr"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 31, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"manufactureId"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 32, [[temp valueForKey:@"manufactureId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 32, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"packageId"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 33, [[temp valueForKey:@"packageId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 33, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if (![[temp valueForKey:@"rfidTag"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 34, [[temp valueForKey:@"rfidTag"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 34, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"warrantyPeriodStr"] && ![[temp valueForKey:@"warrantyPeriodStr"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 35, [[temp valueForKey:@"warrantyPeriodStr"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 35, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"setCode"] && ![[temp valueForKey:@"setCode"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 36, [[temp valueForKey:@"setCode"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 36, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"cashDiscount"] && ![[temp valueForKey:@"cashDiscount"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_double(insertStmt,37,[[temp valueForKey:@"cashDiscount"] floatValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 37, 0.00);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"reorderPoint"] && ![[temp valueForKey:@"reorderPoint"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_double(insertStmt,38,[[temp valueForKey:@"reorderPoint"] floatValue]);
    //                        }
    //                        else {
    //
    //                            sqlite3_bind_int(insertStmt, 38, 0.00);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"discountType"] && ![[temp valueForKey:@"discountType"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 39, [[temp valueForKey:@"discountType"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 39, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"discount"] && ![[temp valueForKey:@"discount"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_double(insertStmt,40,[[temp valueForKey:@"discount"] floatValue]);
    //                        }
    //                        else {
    //                            sqlite3_bind_int(insertStmt, 40, 0.00);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"utility"] && ![[temp valueForKey:@"utility"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 41, [[temp valueForKey:@"utility"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 41, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //
    //
    //                        if ([[temp allKeys] containsObject:PRODUCT_SUB_CLASS] && ![[temp valueForKey:PRODUCT_SUB_CLASS] isKindOfClass:[NSNull class]]) {
    //
    //                            sqlite3_bind_text(insertStmt, 42, [[temp valueForKey:PRODUCT_SUB_CLASS] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 42, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"business_category"] && ![[temp valueForKey:@"business_category"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 43, [[temp valueForKey:@"business_category"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 43, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"business_sub_category"] && ![[temp valueForKey:@"business_sub_category"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 44, [[temp valueForKey:@"business_sub_category"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 44, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if ([[temp allKeys] containsObject:@"packaging_date_"] && ![[temp valueForKey:@"packaging_date_"] isKindOfClass:[NSNull class]]) {
    //                            sqlite3_bind_text(insertStmt, 45, [[temp valueForKey:@"packaging_date_"] UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //                        else {
    //                            sqlite3_bind_text(insertStmt, 45, [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                        }
    //
    //                        if(SQLITE_DONE != sqlite3_step(insertStmt)){
    //                            status = FALSE;
    //                            //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
    //                            NSLog(@"sku becomes false in due to error in inserting into database");
    //
    //                        }
    //                        else {
    //
    //                            status = true;
    //                        }
    //
    //                        sqlite3_reset(insertStmt);
    //                    }
    //
    //                }
    //                else {
    //                    NSLog(@"%s",sqlite3_errmsg(database));
    //                }
    //
    //            }
    //            insertStmt = nil;
    //        }
    //    }
    //    @catch (NSException *exception) {
    //        NSLog(@"%@",exception);
    //
    //    }
    //    @finally {
    //        sqlite3_finalize(insertStmt);
    //
    //        sqlite3_close(database);
    //        insertStmt = nil;
    //        deleteStmt = nil;
    //    }
    //    return status;
}

/**
 * @description  In this method we are save products related informating in sku_price_list....
 * @date
 * @method       savePricesList:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @modified By  Roja on 17/05/2019...
 * @reason       reason -- changed the data inserting statments bcoz all the columns are mapped with sluId i.e., [itemList objectAtIndex:0]
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)savePricesListDataFromCSVFile:(NSArray *)skuItemList{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- SKU_PRICE_LIST----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists `sku_price_list` (  `sku_id` VARCHAR(100) NOT NULL, `cost_price` FLOAT NULL DEFAULT NULL, `description` VARCHAR(250) NULL DEFAULT NULL, `ean` VARCHAR(250) NULL DEFAULT NULL, `price` FLOAT NULL DEFAULT NULL, `sale_price` FLOAT NOT NULL, `wholesale_price` FLOAT NOT NULL, `extra_price` FLOAT NULL DEFAULT NULL, `plu_code` VARCHAR(100) NULL DEFAULT NULL, `created_date` DATE NULL DEFAULT NULL, `updated_date` DATE NULL DEFAULT NULL, `expiry_date` DATETIME NULL DEFAULT NULL, `size` VARCHAR(100) NULL DEFAULT NULL, `color` VARCHAR(100) NULL DEFAULT NULL, `color_shade` VARCHAR(100) NULL DEFAULT NULL, `mbq` VARCHAR(100) NULL DEFAULT NULL, `quantity_in_hand` DOUBLE NOT NULL, `acp` VARCHAR(100) NULL DEFAULT NULL, `store_location` VARCHAR(100) NULL DEFAULT NULL, `best_before_date` DATETIME NULL DEFAULT NULL, `effective_from_date` DATETIME NULL DEFAULT NULL, `blocked_quantity` FLOAT NULL DEFAULT NULL, `scraped_quantity` FLOAT NULL DEFAULT NULL, `product_range` VARCHAR(100) NULL DEFAULT NULL, `measure_range` VARCHAR(100) NULL DEFAULT NULL, `style_range` CHAR(50) NULL DEFAULT NULL, `alternate_plu_code` VARCHAR(100) NULL DEFAULT NULL, `conf_price` CHAR(25) NULL DEFAULT NULL, `product_batch_no` CHAR(25) NULL DEFAULT NULL, `product_ser_no` CHAR(25) NULL DEFAULT NULL, `manufacturing_date` DATETIME NULL DEFAULT NULL, `manufacturer_id` CHAR(200) NULL DEFAULT NULL, `package_id` CHAR(25) NULL DEFAULT NULL, `rfid_tag` CHAR(25) NULL DEFAULT NULL, `warranty_period` DATETIME NULL DEFAULT NULL, `set_code` CHAR(30) NULL DEFAULT NULL, `cash_discount` DECIMAL(10,2) NULL DEFAULT NULL, `reorder_point` DECIMAL(10,1) NULL DEFAULT '0.0', `discount_type` CHAR(60) NULL DEFAULT NULL, `discount` FLOAT NULL DEFAULT NULL, `utility` VARCHAR(300) NULL DEFAULT NULL, `business_category` VARCHAR(50) NULL DEFAULT NULL, `business_sub_category` VARCHAR(50) NULL DEFAULT NULL, `technical_specification` VARCHAR(250) NULL DEFAULT NULL, `product_sub_class` CHAR(100) NULL DEFAULT NULL, `packaging_date` DATE NULL DEFAULT NULL, `pack_size` INT(11) NULL DEFAULT '1', `min_sale_qty` DECIMAL(10,2) NULL DEFAULT '1.00', `sku_status` TINYINT(4) NULL DEFAULT '1', PRIMARY KEY (plu_code))";
            
            
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- SKU_PRICE_LIST TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `sku_price_list` (`sku_id`, `cost_price`, `description`, `ean`, `price`, `sale_price`, `wholesale_price`, `extra_price`, `plu_code`, `created_date`, `updated_date`, `expiry_date`, `size`, `color`, `color_shade`, `mbq`, `quantity_in_hand`, `acp`, `store_location`, `best_before_date`, `effective_from_date`, `blocked_quantity`, `scraped_quantity`, `product_range`, `measure_range`, `style_range`, `alternate_plu_code`, `conf_price`, `product_batch_no`, `product_ser_no`, `manufacturing_date`, `manufacturer_id`, `package_id`, `rfid_tag`, `warranty_period`, `set_code`, `cash_discount`, `reorder_point`, `discount_type`, `discount`, `utility`, `business_category`, `business_sub_category`, `technical_specification`, `product_sub_class`, `packaging_date`, `pack_size`, `min_sale_qty`, `sku_status`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * itemListStr in skuItemList) {
                    
                    NSArray * itemList = [itemListStr componentsSeparatedByString:@","];
                    
                    if([itemList count] >= 49){
                        
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 2, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:1] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 5, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:4] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 6, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:5] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 7, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:6] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 8, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:7] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 9, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:8] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 10, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:9] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 11, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:10] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 12, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:11] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 13, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:12] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 14, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:13] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 15, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:14] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 16, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:15] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 17, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:16] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 18, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:17] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 19, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:18] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 20, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:19] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 21, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:20] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 22, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:21] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 23, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:22] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 24, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:23] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 25, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:24] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 26, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:25] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 27, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:26] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 28, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:27] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 29, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:28] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 30, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:29] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 31, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:30] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 32, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:31] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 33, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:32] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 34, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:33] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 365, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:34] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 36, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:35] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 37, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:36] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 38, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:37] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 39, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:38] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 40, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:39] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 41, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:40] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 42, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:41] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 43, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:42] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 44, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:43] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 45, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:44] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 46, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:45] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(localInsertStmt, 47, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:46] defaultReturn:@"0"] doubleValue]);
                        sqlite3_bind_int(localInsertStmt, 48, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:47] defaultReturn:@"0"] intValue]);
                        sqlite3_bind_text(localInsertStmt, 49, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:48] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"sku becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- SKU_PRICE_LIST ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- SKU_PRICE_LIST ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- SKU_PRICE_LIST----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

#pragma mark start deals related downloading and retriving methods....

/**
 * @description  In this method we are calling the web service with startIndex inorder to get deals data....
 * @date
 * @method       deals
 * @author
 * @param
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getDeals {
    
    Boolean isAllDealsDownloaded = false;
    
    @try{
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        while (dealsStartIndex <= totalDealRecordsCount) {
            
            NSArray * loyaltyKeys = @[kStoreLocation,START_INDEX,REQUEST_HEADER,LAST_SKU_PRICE_UPDATED_DATE,MAX_RECORDS];
            NSArray * loyaltyObjects = @[presentLocation,[NSString stringWithFormat:@"%d",dealsStartIndex],[RequestHeader getRequestHeader],@"",@"1000"];
            
            
            if ([[defaults valueForKey:LAST_DEALS_UPDATED] length]) {
                
                NSLog(@"----DEALS----Download----%@",[defaults valueForKey:LAST_DEALS_UPDATED]);
                loyaltyObjects = @[presentLocation,[NSString stringWithFormat:@"%d",dealsStartIndex],[RequestHeader getRequestHeader],@"",@"1000"];
            }
            
            
            NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
            
            NSError * err_;
            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err_];
            NSString * getDeals = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
            
            
            WebServiceController *controller = [[WebServiceController alloc]init];
            controller.getAllDealsDelegate = self;
            isAllDealsDownloaded  =  [controller getAllDealsWithDataThroughSynchronousRequest:getDeals];
            dealsStartIndex += 1000;
        }
        
        //        if (dealsStartIndex >= totalDealRecordsCount) {
        //            NSDate *today = [NSDate date];
        //            NSDateFormatter * tempDateFormate = [[NSDateFormatter alloc] init];
        //            //                [tempDateFormate setDateFormat:@"dd/MM/yyyy HH:mm:ss"];
        //            [tempDateFormate setDateFormat:@"dd/MM/yyyy"];
        //            NSString * currentdate = [tempDateFormate stringFromDate:today];
        //
        //            currentdate = [NSString stringWithFormat:@"%@%@",currentdate,@" 00:00:00"];
        //
        //            [defaults setObject:currentdate forKey:LAST_DEALS_UPDATED];
        //            [defaults synchronize];
        //        }
    }
    @catch(NSException * excpetion){
        
    }
    @finally{
        
        return isAllDealsDownloaded;
    }
    
    /**** perivous code ****/
    
    //    BOOL isSaved = FALSE;
    //    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
    //
    //    @try {
    //
    //        int dealStartIndex = 0;
    //        int totalRecords = 0;
    //
    //        while (dealStartIndex <= totalRecords) {
    //
    //            NSArray * loyaltyKeys = [NSArray arrayWithObjects:kStoreLocation,START_INDEX,REQUEST_HEADER,LAST_SKU_PRICE_UPDATED_DATE,MAX_RECORDS, nil];
    //            NSArray * loyaltyObjects = [NSArray arrayWithObjects:presentLocation,[NSString stringWithFormat:@"%d",dealStartIndex],[RequestHeader getRequestHeader],@"",@"1000", nil];
    //
    ////            NSLog(@"----DEAL----Download----%@",[defaults valueForKey:LAST_DEALS_UPDATED]);
    //
    //            if ([[defaults valueForKey:LAST_DEALS_UPDATED] length]) {
    //                loyaltyObjects = [NSArray arrayWithObjects:presentLocation,[NSString stringWithFormat:@"%d",dealStartIndex],[RequestHeader getRequestHeader],@"",@"1000", nil];
    //            }
    //
    //
    //            NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
    //
    //            NSError * err_;
    //            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err_];
    //            NSString * getDeals = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
    //
    //            NSString *serviceUrl = [WebServiceUtility getURLFor:GET_ALL_DEALS];
    //            serviceUrl = [NSString stringWithFormat:@"%@%@",serviceUrl,getDeals];
    //            serviceUrl = [WebServiceUtility addPercentEscapesFor:serviceUrl];
    //
    //            NSURL *url = [NSURL URLWithString:serviceUrl];
    //            NSMutableURLRequest  *request = [NSMutableURLRequest  requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy
    //                                                                 timeoutInterval:60.0];
    //            [request setHTTPMethod: @"GET"];
    //            NSError *error = nil;
    //            NSHTTPURLResponse *responseCode = nil;
    //            NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&responseCode error:&error];
    //
    //            NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData:data options:0
    //                                                                   error:NULL];
    //            NSArray *temp = [JSON objectForKey:@"dealsList"];
    //            if ([[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE] isEqualToString:@"No Records Found "]) {
    //
    //                //changed by Srinivasulu on 21/09/2017....
    //
    //                //                    return TRUE;
    //
    //                isSaved = true;
    //
    //                //upto here on 21/09/2017....
    //            }
    //            if ([temp count] > 0) {
    //                totalRecords = [[JSON valueForKey:@"totalRecords"] intValue];
    //                NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    //                rangesArr = [[NSMutableArray alloc]init];
    //
    //                @try {
    //
    //                    //                if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //                    //
    //                    //                    if (deleteStmt == nil) {
    //                    //                        const char *sqlStatement = "drop table deals";
    //                    //
    //                    //                        if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
    //                    //
    //                    //                            if(SQLITE_DONE != sqlite3_step(deleteStmt))
    //                    //                                NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
    //                    //
    //                    //                            sqlite3_reset(deleteStmt);
    //                    //                        }
    //                    //
    //                    //                    }
    //                    //
    //                    //                }
    //                    //                deleteStmt = nil;
    //
    //                    if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //
    //                        if (deleteStmt == nil) {
    //                            char *errMsg;
    //                            //                        private final String        CREATE_DEALS_TABLE                    = "CREATE TABLE if not exists `deal` (    `deal_Id` TEXT,    `claim_coupons` TINYINT,    "
    //                            //                        + "`claim_loyalty_points` TINYINT,    `claim_gift_vouchers` TINYINT,    `deal_category` TEXT,    `deal_description` TEXT,    "
    //                            //                        + "`deal_image` LONGBLOB ,    `deal_name` TEXT,    `deal_status` TEXT,    `end_date` TEXT,    `priority` TINYINT,`deal_plu_code` TEXT,"
    //                            //                        + "`sell_plu_code` TEXT,    `product_category` TEXT,"
    //                            //                        + "    `deal_skus` TEXT,    `deal_products` TEXT,    `sell_sku_ids` TEXT,    `sell_products` TEXT,    `start_date` TEXT,    `store_location` TEXT,"
    //                            //                        + " 'updatedDate' TEXT,  `closed_by` TEXT,  `closed_on` TEXT, `closed_reason` TEXT,      `isRepeat` TINYINT,      `allow_multiple_discounts` TINYINT,      `day1` TINYINT,      `day2` TINYINT,      `day3` TINYINT,      `day4` TINYINT,      `day5` TINYINT,      `day6` TINYINT,      `day7` TINYINT,      `deal_start_time` TEXT,      `deal_end_time` TEXT,      `sell_group_id` TEXT,      `deal_group_id` TEXT,      `sale_product_category` TEXT,      `sale_product_sub_category` TEXT,      `deal_product_sub_category` TEXT,      `deal_product_category` TEXT,      `is_combo` TINYINT,      `is_lowest_price_item` TINYINT,  )";
    //
    //                            const char *sqlStatement = "create table if not exists deals (deal_id text, claim_coupons integer, claim_loyalty_points integer,claim_gift_vouchers integer,deal_category text,deal_description double,deal_name text,deal_status text,end_date text,priority integer,deal_skus text,deal_products text,sell_sku_ids text,sell_products text,start_date text,store_location text, updatedDate text, closed_by text, closed_on text, closed_reason text, isRepeat integer, allow_multiple_discounts integer, day1 integer,day2 integer,day3 integer,day4 integer,day5 integer,day6 integer,day7 integer, deal_start_time text, deal_end_time text, sell_group_id text, deal_group_id text, sale_product_category text, sale_product_sub_category text, deal_product_sub_category text, deal_product_category text, is_combo integer, is_lowest_price_item integer,is_customer_specific integer, PRIMARY KEY (deal_id))";
    //
    //                            if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
    //                                == SQLITE_OK) {
    //
    //                                NSLog(@"Success");
    //
    //                            }
    //                            else {
    //                                NSLog(@"%s",sqlite3_errmsg(database));
    //
    //                            }
    //                        }
    //                    }
    //
    //                    // NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
    //
    //
    //
    //                    //                if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //                    //
    //                    //                    if (deleteStmt == nil) {
    //                    //                        const char *sqlStatement = "delete from deals";
    //                    //
    //                    //                        if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
    //                    //
    //                    //                            if(SQLITE_DONE != sqlite3_step(deleteStmt))
    //                    //                                NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
    //                    //
    //                    //                            sqlite3_reset(deleteStmt);
    //                    //                        }
    //                    //
    //                    //                    }
    //                    //
    //                    //                }
    //                    //                deleteStmt = nil;
    //
    //
    //                    if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //                        if (insertStmt == nil) {
    //                            const char *sqlStatement = "INSERT OR REPLACE into deals(deal_id, claim_coupons,claim_loyalty_points,claim_gift_vouchers,deal_category,deal_description,deal_name,deal_status,end_date,priority,deal_skus,deal_products,sell_sku_ids,sell_products,start_date,store_location,updatedDate,closed_by,closed_on,closed_reason,isRepeat,allow_multiple_discounts,day1,day2,day3,day4,day5,day6,day7,deal_start_time,deal_end_time,sell_group_id,deal_group_id,sale_product_category,sale_product_sub_category,deal_product_sub_category,deal_product_category,is_combo,is_lowest_price_item,is_customer_specific) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    //
    //                            char *sqliteErr;
    //
    //                            sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
    //
    //                            if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
    //
    //                                for (int i=0; i<[temp count]; i++) {
    //
    //                                    NSDictionary *dic = [temp objectAtIndex:i];
    //                                    //                                NSData *data;
    //                                    //
    //                                    //                                NSArray *imgArr = [dic valueForKey:@"deal_image"];
    //                                    //                                if ([imgArr count]!=0) {
    //                                    //
    //                                    //                                    unsigned c = [imgArr count];
    //                                    //                                    uint8_t *bytes = (uint8_t *) malloc(sizeof(*bytes) * c);
    //                                    //
    //                                    //                                    for (unsigned i = 0; i < c; i++)
    //                                    //                                    {
    //                                    //                                        NSString *str = [imgArr objectAtIndex:i];
    //                                    //                                        int byte = [str intValue];
    //                                    //                                        bytes[i] = byte;
    //                                    //                                    }
    //                                    //                                    data = [NSData dataWithBytesNoCopy:bytes length:c freeWhenDone:YES];
    //                                    //
    //                                    //                                }
    //
    //
    //
    //                                    sqlite3_bind_text(insertStmt, 1, [[dic valueForKey:@"dealID"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_int(insertStmt, 2, [[dic valueForKey:@"claimCoupons_int"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 3, [[dic valueForKey:@"claimLoyaltypoints_int"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 4, [[dic valueForKey:@"claimgiftvouchers_int"] intValue]);
    //                                    sqlite3_bind_text(insertStmt, 5,  [[dic valueForKey:@"dealCategory"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    if ([[dic valueForKey:@"dealDescription"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"dealDescription"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 6,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 6,  [[dic valueForKey:@"dealDescription"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    //                                sqlite3_bind_blob(insertStmt, 7, [data bytes], [data length], SQLITE_TRANSIENT);
    //                                    if ([[dic valueForKey:@"dealName"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"dealName"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 7,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 7,  [[dic valueForKey:@"dealName"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                                    }
    //                                    sqlite3_bind_text(insertStmt, 8,  [[[dic valueForKey:@"dealStatus_int"] stringValue] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_text(insertStmt, 9,  [[dic valueForKey:@"dealEndDate"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_int(insertStmt, 10, [[dic valueForKey:@"priority_int"] intValue]);
    //                                    if ([[dic valueForKey:@"dealSkus"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"dealSkus"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 11,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 11,  [[dic valueForKey:@"dealSkus"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                                    }
    //                                    if ([[dic valueForKey:@"dealProducts"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"dealProducts"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 12,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 12,  [[dic valueForKey:@"dealProducts"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    if ([[dic valueForKey:@"sellSkuids"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"sellSkuids"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 13,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 13,  [[dic valueForKey:@"sellSkuids"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    if ([[dic valueForKey:@"sellProducts"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"sellProducts"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 14,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //
    //                                        sqlite3_bind_text(insertStmt, 14,  [[dic valueForKey:@"sellProducts"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    sqlite3_bind_text(insertStmt, 15,  [[dic valueForKey:@"dealStartDate"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_text(insertStmt, 16,  [[dic valueForKey:@"storeLocation"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_text(insertStmt, 17,  [[dic valueForKey:@"updatedDate"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_text(insertStmt, 18,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_text(insertStmt, 19,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_text(insertStmt, 20,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_int(insertStmt, 21, [[dic valueForKey:@"repeat"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 22, [[dic valueForKey:@"allowMultipleDiscounts"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 23, [[dic valueForKey:@"day1"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 24, [[dic valueForKey:@"day2"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 25, [[dic valueForKey:@"day3"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 26, [[dic valueForKey:@"day4"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 27, [[dic valueForKey:@"day5"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 28, [[dic valueForKey:@"day6"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 29, [[dic valueForKey:@"day7"] intValue]);
    //                                    sqlite3_bind_text(insertStmt, 30,  [[dic valueForKey:@"dealStartTime"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    sqlite3_bind_text(insertStmt, 31,  [[dic valueForKey:@"dealEndTime"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    if ([[dic valueForKey:@"sellGroupId"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"sellGroupId"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 32,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 32,  [[dic valueForKey:@"sellGroupId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    if ([[dic valueForKey:@"dealGroupId"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"dealGroupId"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 33,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 33,  [[dic valueForKey:@"dealGroupId"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                                    }
    //                                    if ([[dic valueForKey:@"saleProductCategory"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"saleProductCategory"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 34,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 34,  [[dic valueForKey:@"saleProductCategory"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    if ([[dic valueForKey:@"saleProductSubCategory"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"saleProductSubCategory"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 35,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 35,  [[dic valueForKey:@"saleProductSubCategory"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                                    }
    //                                    if ([[dic valueForKey:@"dealProductSubCategory"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"dealProductSubCategory"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 36,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 36,  [[dic valueForKey:@"dealProductSubCategory"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                                    }
    //                                    if ([[dic valueForKey:@"dealProductCategory"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"dealProductCategory"] == nil) {
    //                                        sqlite3_bind_text(insertStmt, 37,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_text(insertStmt, 37,  [[dic valueForKey:@"dealProductCategory"] UTF8String], -1, SQLITE_TRANSIENT);
    //
    //                                    }
    //
    //                                    sqlite3_bind_int(insertStmt, 38, [[dic valueForKey:@"isCombo"] intValue]);
    //                                    sqlite3_bind_int(insertStmt, 39, [[dic valueForKey:@"isLowestPriceItem"] intValue]);
    //                                    //                                if ([[dic allKeys] containsObject:@"priority_int"] && ![[dic valueForKey:@"priority_int"] isKindOfClass:[NSNull class]]) {
    //                                    //                                    sqlite3_bind_int(insertStmt, 40,  [[dic valueForKey:@"priority_int"] intValue]);
    //                                    //                                }
    //                                    //                                else {
    //                                    //                                    sqlite3_bind_int(insertStmt, 40,  0);
    //                                    //
    //                                    //                                }
    //
    //                                    if ([[dic allKeys] containsObject:@"isCustomerSpecific"] && ![[dic valueForKey:@"isCustomerSpecific"] isKindOfClass:[NSNull class]]) {
    //                                        sqlite3_bind_int(insertStmt, 40,  [[dic valueForKey:@"isCustomerSpecific"] intValue]);
    //                                    }
    //                                    else {
    //                                        sqlite3_bind_int(insertStmt, 40,  0);
    //
    //                                    }
    //
    //                                    if(SQLITE_DONE != sqlite3_step(insertStmt)){
    //                                        isSaved = FALSE;
    //                                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
    //
    //                                    }
    //                                    else {
    //                                        isSaved = TRUE;
    //                                    }
    //
    //                                    sqlite3_reset(insertStmt);
    //
    //                                    [rangesArr addObject:[dic valueForKey:@"rangeList"]];
    //
    //                                }
    //
    //                            }
    //                            else {
    //                                NSLog(@"%s",sqlite3_errmsg(database));
    //                            }
    //
    //                            sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
    //                            sqlite3_finalize(insertStmt);
    //
    //                        }
    //                        insertStmt = nil;
    //                    }
    //                }
    //                @catch (NSException *exception) {
    //
    //                }Ø
    //                @finally {
    //
    //                    sqlite3_close(database);
    //                    insertStmt = nil;
    //                    deleteStmt = nil;
    //                }
    //                isSaved = [self saveDealRanges:rangesArr];
    //            }
    //
    //            dealStartIndex += 1000;
    //            NSLog(@"%d",dealStartIndex);
    //            if (dealStartIndex >= totalRecords) {
    //                NSDate *today = [NSDate date];
    //                NSDateFormatter *f = [[NSDateFormatter alloc] init];
    //                [f setDateFormat:@"dd/MM/yyyy HH:mm:ss"];
    //                NSString* currentdate = [f stringFromDate:today];
    //
    //                [defaults setObject:currentdate forKey:LAST_DEALS_UPDATED];
    //
    //                [defaults synchronize];
    //            }
    //        }
    //    } @catch (NSException *exception) {
    //
    //    } @finally {
    //
    //        return isSaved;
    //    }
}

/**
 * @description  here we are handling the success response received from service call..
 * @date         11/07/2018..
 * @method       getAllDealsSuccessResponseAndReturnSaveStatus:--
 * @author       Srinivasulu
 * @param        NSDictionary
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)getAllDealsSuccessResponseAndReturnSaveStatus:(NSDictionary *)successDictionary{
    BOOL isSaved = FALSE;
    
    @try {
        
        totalDealRecordsCount = [[successDictionary valueForKey:TOTAL_SKUS] intValue];
        NSArray * completeDealsList = successDictionary[DEALS_LIST];
        
        if (completeDealsList.count > 0) {
            
            isSaved =  [self saveDeals:completeDealsList];
        }
    } @catch (NSException *exception) {
        
        isSaved = FALSE;
    } @finally {
        
        return isSaved;
    }
}

/**
 * @description  here we are handling the error response received from service call..
 * @date         11/07/2018..
 * @method       getAllDealsErrorResponseAndReturnSaveStatus:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)getAllDealsErrorResponseAndReturnSaveStatus:(NSString *)errorResponse{
    BOOL status = false;
    
    @try {
        errorResponse = [errorResponse stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
        
        if ([errorResponse caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            
            status = TRUE;
        }
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are save deal ranges into deals_ranges which was retrive from above service call....
 * @date
 * @method       saveDealRanges:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveDeals:(NSArray *)dealsList {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- DEALS----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    NSMutableArray * dealRangesList = [[NSMutableArray alloc] init];
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "CREATE TABLE IF NOT EXISTS `deal` (  `deal_Id` VARCHAR(255) NOT NULL,  `claim_coupons` TINYINT(4) NULL DEFAULT NULL,  `claim_loyalty_points` TINYINT(4) NULL DEFAULT NULL,  `claim_gift_vouchers` TINYINT(4) NULL DEFAULT NULL,  `deal_category` VARCHAR(255) NULL DEFAULT NULL,  `deal_description` VARCHAR(255) NULL DEFAULT NULL,  `deal_image` VARCHAR(150) NULL DEFAULT NULL,  `deal_name` VARCHAR(255) NULL DEFAULT NULL,  `deal_status` CHAR(15) NULL DEFAULT NULL,  `end_date` DATETIME NULL DEFAULT NULL,  `priority` TINYINT(4) NULL DEFAULT NULL,  `deal_plu_code` VARCHAR(250) NULL DEFAULT NULL,  `sell_plu_code` VARCHAR(250) NULL DEFAULT NULL,  `deal_skus` VARCHAR(255) NULL DEFAULT NULL,  `deal_products` VARCHAR(250) NULL DEFAULT NULL,  `sell_sku_ids` VARCHAR(255) NULL DEFAULT NULL,  `sell_products` VARCHAR(255) NULL DEFAULT NULL,  `start_date` DATE NULL DEFAULT NULL,  `store_location` VARCHAR(255) NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `deal_image_text` VARCHAR(250) NULL DEFAULT NULL,  `deal_image_text_font` VARCHAR(45) NULL DEFAULT NULL,  `deal_image_size` VARCHAR(45) NULL DEFAULT NULL,  `deal_image_color` VARCHAR(45) NULL DEFAULT NULL,  `deal_image_bold` TINYINT(4) NULL DEFAULT NULL,  `deal_image_italic` TINYINT(4) NULL DEFAULT NULL,  `deal_image_strike` TINYINT(4) NULL DEFAULT NULL,  `sale_price_text` VARCHAR(250) NULL DEFAULT NULL,  `sale_price_font` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_size` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_color` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_bold` TINYINT(4) NULL DEFAULT NULL,  `sale_price_italic` TINYINT(4) NULL DEFAULT NULL,  `sale_price_strike` TINYINT(4) NULL DEFAULT NULL,  `deal_price_text` VARCHAR(250) NULL DEFAULT NULL,  `deal_price_font` VARCHAR(45) NULL DEFAULT NULL,  `deal_price_size` VARCHAR(45) NULL DEFAULT NULL,  `deal_price_color` VARCHAR(45) NULL DEFAULT NULL,  `deal_price_bold` TINYINT(4) NULL DEFAULT NULL,  `deal_price_italic` TINYINT(4) NULL DEFAULT NULL,  `deal_price_strike` TINYINT(4) NULL DEFAULT NULL,  `is_banner` TINYINT(4) NULL DEFAULT NULL,  `authorised_by` VARCHAR(50) NULL DEFAULT NULL,  `closed_by` VARCHAR(50) NULL DEFAULT NULL,  `closed_on` DATE NULL DEFAULT NULL,  `closed_reason` VARCHAR(200) NULL DEFAULT NULL,  `isRepeat` TINYINT(4) NULL DEFAULT NULL,  `allow_multiple_discounts` TINYINT(4) NULL DEFAULT NULL,  `day1` TINYINT(4) NULL DEFAULT NULL,  `day2` TINYINT(4) NULL DEFAULT NULL,  `day3` TINYINT(4) NULL DEFAULT NULL,  `day4` TINYINT(4) NULL DEFAULT NULL,  `day5` TINYINT(4) NULL DEFAULT NULL,  `day6` TINYINT(4) NULL DEFAULT NULL,  `day7` TINYINT(4) NULL DEFAULT NULL,  `deal_start_time` TIME NULL DEFAULT NULL,  `deal_end_time` TIME NULL DEFAULT NULL,  `sell_group_id` VARCHAR(50) NULL DEFAULT NULL,  `deal_group_id` VARCHAR(50) NULL DEFAULT NULL,  `sale_product_category` VARCHAR(100) NULL DEFAULT NULL,  `sale_product_sub_category` VARCHAR(100) NULL DEFAULT NULL,  `deal_product_category` VARCHAR(100) NULL DEFAULT NULL,  `is_combo` TINYINT(4) NULL DEFAULT '0',  `is_lowest_price_item` TINYINT(4) NULL DEFAULT '0',  `access_sequence_num` INT(11) NULL DEFAULT '0',  `deal_product_sub_category` VARCHAR(100) NULL DEFAULT NULL,  `is_customer_specific` TINYINT(4) NULL DEFAULT '0',  `created_date` DATETIME NULL DEFAULT NULL,  `user_name` VARCHAR(50) NULL DEFAULT NULL,  `role_name` VARCHAR(100) NULL DEFAULT NULL,  PRIMARY KEY (`deal_Id`))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- DEALS Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE INTO   `deal` (`deal_Id`, `claim_coupons`, `claim_loyalty_points`, `claim_gift_vouchers`, `deal_category`, `deal_description`, `deal_image`, `deal_name`, `deal_status`, `end_date`, `priority`, `deal_plu_code`, `sell_plu_code`, `deal_skus`, `deal_products`, `sell_sku_ids`, `sell_products`, `start_date`, `store_location`, `updated_date`, `deal_image_text`, `deal_image_text_font`, `deal_image_size`, `deal_image_color`, `deal_image_bold`, `deal_image_italic`, `deal_image_strike`, `sale_price_text`, `sale_price_font`, `sale_price_size`, `sale_price_color`, `sale_price_bold`, `sale_price_italic`, `sale_price_strike`, `deal_price_text`, `deal_price_font`, `deal_price_size`, `deal_price_color`, `deal_price_bold`, `deal_price_italic`, `deal_price_strike`, `is_banner`, `authorised_by`, `closed_by`, `closed_on`, `closed_reason`, `isRepeat`, `allow_multiple_discounts`, `day1`, `day2`, `day3`, `day4`, `day5`, `day6`, `day7`, `deal_start_time`, `deal_end_time`, `sell_group_id`, `deal_group_id`, `sale_product_category`, `sale_product_sub_category`, `deal_product_category`, `is_combo`, `is_lowest_price_item`, `access_sequence_num`, `deal_product_sub_category`, `is_customer_specific`, `created_date`, `user_name`, `role_name`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * dic in dealsList) {
                    
                    if ([dic.allKeys containsObject:DEAL_ID] && ![[dic valueForKey:DEAL_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[dic valueForKey:DEAL_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CLAIM_COUPONS_INT] && ![[dic valueForKey:CLAIM_COUPONS_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 2, [[dic valueForKey:CLAIM_COUPONS_INT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 2, 0);
                    }
                    
                    if ([dic.allKeys containsObject:CLAIM_LOYALTY_POINTS_INT] && ![[dic valueForKey:CLAIM_LOYALTY_POINTS_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 3, [[dic valueForKey:CLAIM_LOYALTY_POINTS_INT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 3, 0);
                    }
                    
                    if ([dic.allKeys containsObject:CLAIM_GIFT_VOUCHERS_INT] && ![[dic valueForKey:CLAIM_GIFT_VOUCHERS_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 4, [[dic valueForKey:CLAIM_GIFT_VOUCHERS_INT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 4, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_CATEGORY] && ![[dic valueForKey:DEAL_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5,  [[dic valueForKey:DEAL_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_DESCRIPTION] && ![[dic valueForKey:DEAL_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6,  [[dic valueForKey:DEAL_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_IMAGE] && ![[dic valueForKey:DEAL_IMAGE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7,  [[dic valueForKey:DEAL_IMAGE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_NAME] && ![[dic valueForKey:DEAL_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8,  [[dic valueForKey:DEAL_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_STATUS_INT] && ![[dic valueForKey:DEAL_STATUS_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9,  [[dic valueForKey:DEAL_STATUS_INT] stringValue].UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_END_DATE] && ![[dic valueForKey:DEAL_END_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 10,  [[dic valueForKey:DEAL_END_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:PRIORITY_INT] && ![[dic valueForKey:PRIORITY_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 11, [[dic valueForKey:PRIORITY_INT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 11, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PLU_CODE] && ![[dic valueForKey:DEAL_PLU_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 12,  [[dic valueForKey:DEAL_PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 12, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SELL_PLU_CODE] && ![[dic valueForKey:SELL_PLU_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 13,  [[dic valueForKey:SELL_PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 13, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_SKUS] && ![[dic valueForKey:DEAL_SKUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 14,  [[dic valueForKey:DEAL_SKUS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRODUCTS] && ![[dic valueForKey:DEAL_PRODUCTS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 15,  [[dic valueForKey:DEAL_PRODUCTS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SELL_SKU_IDS] && ![[dic valueForKey:SELL_SKU_IDS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 16,  [[dic valueForKey:SELL_SKU_IDS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 16, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SELL_PRODUCTS] && ![[dic valueForKey:SELL_PRODUCTS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 17,  [[dic valueForKey:SELL_PRODUCTS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 17, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_START_DATE] && ![[dic valueForKey:DEAL_START_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 18,  [[dic valueForKey:DEAL_START_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 18, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:STORELOCATION] && ![[dic valueForKey:STORELOCATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 19,  [[dic valueForKey:STORELOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 19, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:UPDATED_Date] && ![[dic valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 20,  [[dic valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 20, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_IMAGE_TEXT] && ![[dic valueForKey:DEAL_IMAGE_TEXT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 21,  [[dic valueForKey:DEAL_IMAGE_TEXT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 21, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_IMAGE_TEXT_FONT] && ![[dic valueForKey:DEAL_IMAGE_TEXT_FONT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 22,  [[dic valueForKey:DEAL_IMAGE_TEXT_FONT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 22, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_IMAGE_SIZE] && ![[dic valueForKey:DEAL_IMAGE_SIZE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 23,  [[dic valueForKey:DEAL_IMAGE_SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 23, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_IMAGE_COLOR] && ![[dic valueForKey:DEAL_IMAGE_COLOR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 24,  [[dic valueForKey:DEAL_IMAGE_COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 24, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_IMAGE_BOLD] && ![[dic valueForKey:DEAL_IMAGE_BOLD] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 25, [[dic valueForKey:DEAL_IMAGE_BOLD] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 25, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_IMAGE_ITALIC] && ![[dic valueForKey:DEAL_IMAGE_ITALIC] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 26, [[dic valueForKey:DEAL_IMAGE_ITALIC] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 26, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_IMAGE_STRIKE] && ![[dic valueForKey:DEAL_IMAGE_STRIKE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 27, [[dic valueForKey:DEAL_IMAGE_STRIKE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 27, 0);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_TEXT] && ![[dic valueForKey:SALE_PRICE_TEXT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 28,  [[dic valueForKey:SALE_PRICE_TEXT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 28, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_FONT] && ![[dic valueForKey:SALE_PRICE_FONT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 29,  [[dic valueForKey:SALE_PRICE_FONT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 29, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_SIZE] && ![[dic valueForKey:SALE_PRICE_SIZE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 30,  [[dic valueForKey:SALE_PRICE_SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 30, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_COLOR] && ![[dic valueForKey:SALE_PRICE_COLOR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 31,  [[dic valueForKey:SALE_PRICE_COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 31, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_BOLD] && ![[dic valueForKey:SALE_PRICE_BOLD] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 32, [[dic valueForKey:SALE_PRICE_BOLD] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 32, 0);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_ITALIC] && ![[dic valueForKey:SALE_PRICE_ITALIC] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 33, [[dic valueForKey:SALE_PRICE_ITALIC] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 33, 0);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_STRIKE] && ![[dic valueForKey:SALE_PRICE_STRIKE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 34, [[dic valueForKey:SALE_PRICE_STRIKE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 34, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRICE_TEXT] && ![[dic valueForKey:DEAL_PRICE_TEXT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 35,  [[dic valueForKey:DEAL_PRICE_TEXT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 35, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRICE_FONT] && ![[dic valueForKey:DEAL_PRICE_FONT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 36,  [[dic valueForKey:DEAL_PRICE_FONT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 36, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRICE_SIZE] && ![[dic valueForKey:DEAL_PRICE_SIZE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 37,  [[dic valueForKey:DEAL_PRICE_SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 37, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRICE_COLOR] && ![[dic valueForKey:DEAL_PRICE_COLOR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 38,  [[dic valueForKey:DEAL_PRICE_COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 38, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRICE_BOLD] && ![[dic valueForKey:DEAL_PRICE_BOLD] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 39, [[dic valueForKey:DEAL_PRICE_BOLD] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 39, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRICE_ITALIC] && ![[dic valueForKey:DEAL_PRICE_ITALIC] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 40, [[dic valueForKey:DEAL_PRICE_ITALIC] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 40, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRICE_STRIKE] && ![[dic valueForKey:DEAL_PRICE_STRIKE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 41, [[dic valueForKey:DEAL_PRICE_STRIKE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 41, 0);
                    }
                    
                    if ([dic.allKeys containsObject:BANNER] && ![[dic valueForKey:BANNER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 42, [[dic valueForKey:BANNER] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 42, 0);
                    }
                    
                    if ([dic.allKeys containsObject:AUTHORISED_BY] && ![[dic valueForKey:AUTHORISED_BY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 43,  [[dic valueForKey:AUTHORISED_BY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 43, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CLOSED_BY] && ![[dic valueForKey:CLOSED_BY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 44,  [[dic valueForKey:CLOSED_BY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 44, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CLOSED_ON] && ![[dic valueForKey:CLOSED_ON] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 45,  [[dic valueForKey:CLOSED_ON] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 45, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:BANNER] && ![[dic valueForKey:BANNER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 46, [[dic valueForKey:BANNER] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 46, 0);
                    }
                    
                    if ([dic.allKeys containsObject:ALLOW_MULTIPLE_DISCOUNTS] && ![[dic valueForKey:ALLOW_MULTIPLE_DISCOUNTS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 48, [[dic valueForKey:ALLOW_MULTIPLE_DISCOUNTS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 48, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_1] && ![[dic valueForKey:DAY_1] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 49, [[dic valueForKey:DAY_1] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 49, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_2] && ![[dic valueForKey:DAY_2] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 50, [[dic valueForKey:DAY_2] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 50, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_3] && ![[dic valueForKey:DAY_3] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 51, [[dic valueForKey:DAY_3] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 51, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_4] && ![[dic valueForKey:DAY_4] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 52, [[dic valueForKey:DAY_4] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 52, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_5] && ![[dic valueForKey:DAY_5] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 53, [[dic valueForKey:DAY_5] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 53, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_6] && ![[dic valueForKey:DAY_6] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 54, [[dic valueForKey:DAY_6] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 54, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_7] && ![[dic valueForKey:DAY_7] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 55, [[dic valueForKey:DAY_7] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 55, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_START_TIME] && ![[dic valueForKey:DEAL_START_TIME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 56,  [[dic valueForKey:DEAL_START_TIME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 56, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_END_TIME] && ![[dic valueForKey:DEAL_END_TIME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 57,  [[dic valueForKey:DEAL_END_TIME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 57, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SELL_GROUP_ID] && ![[dic valueForKey:SELL_GROUP_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 58,  [[dic valueForKey:SELL_GROUP_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 58, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_GROUP_ID] && ![[dic valueForKey:DEAL_GROUP_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 59,  [[dic valueForKey:DEAL_GROUP_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 59, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRODUCT_CATEGORY] && ![[dic valueForKey:SALE_PRODUCT_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 60,  [[dic valueForKey:SALE_PRODUCT_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 60, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRODUCT_SUB_CATEGORY] && ![[dic valueForKey:SALE_PRODUCT_SUB_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 61,  [[dic valueForKey:SALE_PRODUCT_SUB_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 61, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRODUCT_CATEGORY] && ![[dic valueForKey:DEAL_PRODUCT_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 62,  [[dic valueForKey:DEAL_PRODUCT_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 62, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:COMBO] && ![[dic valueForKey:COMBO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 63, [[dic valueForKey:COMBO] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 63, 0);
                    }
                    
                    if ([dic.allKeys containsObject:LOW_PRICE_ITEM] && ![[dic valueForKey:LOW_PRICE_ITEM] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 64, [[dic valueForKey:LOW_PRICE_ITEM] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 64, 0);
                    }
                    
                    if ([dic.allKeys containsObject:ACCESS_SEQUENCE_NUM] && ![[dic valueForKey:ACCESS_SEQUENCE_NUM] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 65, [[dic valueForKey:ACCESS_SEQUENCE_NUM] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 65, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DEAL_PRODUCT_SUB_CATEGORY] && ![[dic valueForKey:DEAL_PRODUCT_SUB_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 66,  [[dic valueForKey:DEAL_PRODUCT_SUB_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 66, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CUSOMER_SPECIFIC] && ![[dic valueForKey:CUSOMER_SPECIFIC] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 67, [[dic valueForKey:CUSOMER_SPECIFIC] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 67, 0);
                    }
                    
                    if ([dic.allKeys containsObject:CREATED_DATE] && ![[dic valueForKey:CREATED_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 68,  [[dic valueForKey:CREATED_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 68, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:USERNAME] && ![[dic valueForKey:USERNAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 69,  [[dic valueForKey:USERNAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 69, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:ROLE_NAME] && ![[dic valueForKey:ROLE_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 70,  [[dic valueForKey:ROLE_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 70, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        //                        isCompleteDataInserted = TRUE;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                    
                    [dealRangesList addObject:[dic valueForKey:RANGE_LIST]];
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = TRUE;
                    NSLog(@"----Committed -- DEAL ----");
                }
                else
                {
                    isCompleteDataInserted = FALSE;
                    NSLog(@"----Commit -- failed -- DEAL ----");
                }
                sqlite3_finalize(localInsertStmt);
                
            }
            
            isCompleteDataInserted = [self saveDealRanges:dealRangesList];
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- DEALS----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

/**
 * @description  In this method we are save deal ranges into deals_ranges which was retrive from above service call....
 * @date
 * @method       saveDealRanges:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveDealRanges:(NSArray *)ranges {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- DEALRANGES----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists deals_ranges (deal_id text,deal_quantity float,minimum_purchase_quantity float,minimum_purchase_amount double,range_ID text,description text, updatedDate text, group_id text, item_id text, reward_type text, range_mode text, PRIMARY KEY (range_ID))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- DEAL_RANGES Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into deals_ranges(deal_id,deal_quantity,minimum_purchase_quantity,minimum_purchase_amount,range_ID,description,updatedDate,group_id,item_id,               reward_type,range_mode) Values(?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                
                for(NSArray * locArrangeArr in ranges)
                    for ( NSDictionary * dic in locArrangeArr) {
                        
                        if ([dic.allKeys containsObject:DEAL_Id] && ![[dic valueForKey:DEAL_Id] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 1, [[dic valueForKey:DEAL_Id] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:DEAL_QUANTITY] && ![[dic valueForKey:DEAL_QUANTITY] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 2, [[dic valueForKey:DEAL_QUANTITY]floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 2, 0.00);
                        }
                        
                        if ([dic.allKeys containsObject:MINIMUM_PURCHASE_QTY] && ![[dic valueForKey:MINIMUM_PURCHASE_QTY] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 3, [[dic valueForKey:MINIMUM_PURCHASE_QTY]floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 3, 0.00);
                        }
                        
                        if ([dic.allKeys containsObject:MINIMUM_PURCHASE_AMT] && ![[dic valueForKey:MINIMUM_PURCHASE_AMT] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 4, [[dic valueForKey:MINIMUM_PURCHASE_AMT]floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 4, 0.00);
                        }
                        
                        if ([dic.allKeys containsObject:RANGE] && ![[dic valueForKey:RANGE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 5,[[dic valueForKey:RANGE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:ITEM_DESCRIPTION] && ![[dic valueForKey:ITEM_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 6,[[dic valueForKey:ITEM_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:UPDATED_Date] && ![[dic valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 7,[[dic valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:GROUP_ID] && ![[dic valueForKey:GROUP_ID] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 8,[[dic valueForKey:GROUP_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:ITEM_ID] && ![[dic valueForKey:ITEM_ID] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 9,[[dic valueForKey:ITEM_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:RANGE_REWARD_TYPE] && ![[dic valueForKey:RANGE_REWARD_TYPE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 10,[[dic valueForKey:RANGE_REWARD_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:RANGE_MODE] && ![[dic valueForKey:RANGE_MODE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 11,[[dic valueForKey:RANGE_MODE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)) {
                            //                            isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        }
                        else {
                            //                            isCompleteDataInserted = TRUE;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = TRUE;
                    NSLog(@"----Committed -- DEAL_RANGES ----");
                }
                else
                {
                    isCompleteDataInserted = FALSE;
                    NSLog(@"----Commit -- failed -- DEAL_RANGS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- DEAL_RANGES----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
    
    //    BOOL status = FALSE;
    //
    //    if ([ranges count] > 0) {
    //
    //        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    //        //        static sqlite3_stmt *insertStmt1 = nil;
    //        //        static sqlite3_stmt *deleteStmt1 = nil;
    //
    //        @try {
    //            //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //            //
    //            //                if (deleteStmt == nil) {
    //            //                    const char *sqlStatement = "drop table deals_ranges";
    //            //
    //            //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
    //            //
    //            //                        if(SQLITE_DONE != sqlite3_step(deleteStmt))
    //            //                            NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
    //            //
    //            //                        sqlite3_reset(deleteStmt);
    //            //                    }
    //            //
    //            //                }
    //            //
    //            //            }
    //            //            deleteStmt = nil;
    //
    //
    //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //                if (deleteStmt == nil) {
    //                    char *errMsg;
    //                    //                    private final String        CREATE_DEALS_RANGES_TABLE            = "CREATE TABLE if not exists `deal_ranges` (    `s_no` INTEGER,    `deal_ID` TEXT,"
    //                    //                    + "    `deal_quantity` FLOAT ,    `minimum_purchase_quantity` FLOAT ,    `minimum_purchase_amount` FLOAT ,    `range_ID` TEXT,    `description` TEXT,"
    //                    //                    + " `updatedDate` TEXT,  `group_id` TEXT,  `item_id` TEXT,  `reward_type` TEXT,  `range_mode` TEXT,)";
    //
    //                    const char *sqlStatement = "create table if not exists deals_ranges (deal_id text,deal_quantity float,minimum_purchase_quantity float,minimum_purchase_amount double,range_ID text,description text, updatedDate text, group_id text, item_id text, reward_type text, range_mode text, PRIMARY KEY (range_ID))";
    //
    //                    if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
    //                        == SQLITE_OK) {
    //
    //                        NSLog(@"Success");
    //
    //                    }
    //
    //                }
    //
    //            }
    //
    //            // NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
    //
    //
    //
    //            //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //            //
    //            //                if (deleteStmt == nil) {
    //            //                    const char *sqlStatement = "delete from deals_ranges";
    //            //
    //            //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
    //            //
    //            //                        if(SQLITE_DONE != sqlite3_step(deleteStmt))
    //            //                            NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
    //            //
    //            //                        sqlite3_reset(deleteStmt);
    //            //                    }
    //            //
    //            //                }
    //            //
    //            //            }
    //            //            deleteStmt = nil;
    //            //
    //
    //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //                if (insertStmt == nil) {
    //                    const char *sqlStatement = "INSERT OR REPLACE into deals_ranges(deal_id,deal_quantity,minimum_purchase_quantity,minimum_purchase_amount,range_ID,description,updatedDate,group_id,item_id,               reward_type,range_mode) Values(?,?,?,?,?,?,?,?,?,?,?)";
    //
    //                    char *sqliteErr;
    //
    //                    sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
    //
    //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
    //
    //                        for (int i=0; i<[ranges count]; i++) {
    //
    //                            NSArray *temp = [rangesArr objectAtIndex:i];
    //
    //                            for (int j=0; j<[temp count]; j++) {
    //
    //                                NSDictionary *dic = [temp objectAtIndex:j];
    //
    //                                sqlite3_bind_text(insertStmt, 1, [[dic valueForKey:@"dealId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                sqlite3_bind_double(insertStmt, 2, [[dic valueForKey:@"dealQuantity"]floatValue]);
    //                                sqlite3_bind_double(insertStmt, 3, [[dic valueForKey:@"minimumPurchaseQuantity"]floatValue]);
    //                                sqlite3_bind_double(insertStmt, 4, [[dic valueForKey:@"minimumPurchaseamount"]floatValue]);
    //                                sqlite3_bind_text(insertStmt, 5,[[dic valueForKey:@"range"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                if ([[dic valueForKey:@"description"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"description"] == nil) {
    //                                    sqlite3_bind_text(insertStmt, 6,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                else {
    //                                    sqlite3_bind_text(insertStmt, 6,[[dic valueForKey:@"description"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                if ([[dic valueForKey:@"updatedDate"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"updatedDate"] == nil) {
    //                                    sqlite3_bind_text(insertStmt, 7,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                else {
    //                                    sqlite3_bind_text(insertStmt, 7,[[dic valueForKey:@"updatedDate"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                if ([[dic valueForKey:@"groupId"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"groupId"] == nil) {
    //                                    sqlite3_bind_text(insertStmt, 8,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                else {
    //                                    sqlite3_bind_text(insertStmt, 8,[[dic valueForKey:@"groupId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                if ([[dic valueForKey:@"itemId"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"itemId"] == nil) {
    //                                    sqlite3_bind_text(insertStmt, 9,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                else {
    //                                    sqlite3_bind_text(insertStmt, 9,[[dic valueForKey:@"itemId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                if ([[dic valueForKey:@"rangeRewardType"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"rangeRewardType"] == nil) {
    //                                    sqlite3_bind_text(insertStmt, 10,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                else {
    //                                    sqlite3_bind_text(insertStmt, 10,[[dic valueForKey:@"rangeRewardType"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                if ([[dic valueForKey:@"rangeMode"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"rangeMode"] == nil) {
    //                                    sqlite3_bind_text(insertStmt, 11,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                else {
    //                                    sqlite3_bind_text(insertStmt, 11,[[dic valueForKey:@"rangeMode"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //
    //                                if(SQLITE_DONE != sqlite3_step(insertStmt)) {
    //                                    status = FALSE;
    //                                    NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
    //
    //                                }
    //                                else {
    //                                    status = TRUE;
    //                                }
    //
    //                                sqlite3_reset(insertStmt);
    //                            }
    //
    //
    //                        }
    //
    //                    }
    //
    //                    sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
    //                    sqlite3_finalize(insertStmt);
    //
    //                }
    //                insertStmt = nil;
    //            }
    //        }
    //        @catch (NSException *exception) {
    //
    //
    //        }
    //        @finally {
    //
    //            sqlite3_close(database);
    //            insertStmt = nil;
    //            deleteStmt = nil;
    //        }
    //    }
    //    return status;
}

#pragma mark start offers related downloading and retriving methods....

/**
 * @description  In this method we are calling the web service with startIndex inorder to get offers data....
 * @date         10/07/2018
 * @method       getOffers
 * @author       Srinivasulu
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getOffers{
    Boolean isAllOFFersDownloaded = false;
    
    @try{
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        while (offersStartIndex <= totalOffersRecordsCount) {
            
            
            NSArray * loyaltyKeys = @[STORELOCATION,STORE_LOCATION,START_INDEX,REQUEST_HEADER,LAST_SKU_PRICE_UPDATED_DATE,MAX_RECORDS];
            
            NSArray * loyaltyObjects = @[presentLocation,presentLocation,[NSString stringWithFormat:@"%d",offersStartIndex],[RequestHeader getRequestHeader],@"",@"1000"];
            
            if ([[defaults valueForKey:LAST_OFFERS_UPDATED] length]) {
                
                NSLog(@"----OFFERS----Download----%@",[defaults valueForKey:LAST_OFFERS_UPDATED]);
                loyaltyObjects = @[presentLocation,presentLocation,[NSString stringWithFormat:@"%d",offersStartIndex],[RequestHeader getRequestHeader],@"",@"1000"];
            }
            
            NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
            
            NSError * err_;
            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err_];
            NSString * getDeals = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
            
            WebServiceController *controller = [[WebServiceController alloc]init];
            controller.getAllOffersDelegate = self;
//            isAllOFFersDownloaded  =  [controller getAllOffersWithDataThroughSoapSynchronousRequest:getDeals];
            isAllOFFersDownloaded  =  [controller getAllOffersWithData:getDeals]; // changed by roja on 17/10/2019...
            
            offersStartIndex += 1000;
        }
        
        //        if (offersStartIndex >= totalOffersRecordsCount) {
        //            NSDate *today = [NSDate date];
        //            NSDateFormatter * tempDateFormate = [[NSDateFormatter alloc] init];
        //            //                [tempDateFormate setDateFormat:@"dd/MM/yyyy HH:mm:ss"];
        //            [tempDateFormate setDateFormat:@"dd/MM/yyyy"];
        //            NSString * currentdate = [tempDateFormate stringFromDate:today];
        //
        //            currentdate = [NSString stringWithFormat:@"%@%@",currentdate,@" 00:00:00"];
        //
        //            [defaults setObject:currentdate forKey:LAST_OFFERS_UPDATED];
        //            [defaults synchronize];
        //        }
    }
    @catch(NSException * excpetion){
        
    }
    @finally{
        
        return isAllOFFersDownloaded;
    }
    
    
}


- (BOOL)getAllOffersSuccessResponseAndReturnSaveStatus:(NSDictionary *)successDictionary{
    BOOL isSaved = FALSE;
    
    @try {
        
        totalOffersRecordsCount = [[successDictionary valueForKey:TOTAL_SKUS] intValue];
        NSArray * completeOffersList = successDictionary[OFFER_LIST];
        
        if (completeOffersList.count > 0) {
            
            isSaved =  [self saveOffers:completeOffersList];
        }
    } @catch (NSException *exception) {
        
        isSaved = FALSE;
    } @finally {
        
        return isSaved;
    }
}


- (BOOL)getAllOffersErrorResponseAndReturnSaveStatus:(NSString *)errorResponse{
    BOOL status = false;
    
    @try {
        errorResponse = [errorResponse stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
        
        if ([errorResponse caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            
            status = TRUE;
        }
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are save deal ranges into deals_ranges which was retrive from above service call....
 * @date
 * @method       saveDealRanges:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveOffers:(NSArray *)offersList {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- OFFERS----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    NSMutableArray * offersRangesList = [[NSMutableArray alloc] init];
    NSMutableArray * localCustomerFilterList = [[NSMutableArray alloc] init];
    NSMutableArray * offersProductsList = [[NSMutableArray alloc] init];
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "CREATE TABLE IF NOT EXISTS `offer` (  `offer_Id` VARCHAR(255) NOT NULL,  `claim_coupons` INT(11) NULL DEFAULT NULL,  `claim_loyalty_points` INT(11) NULL DEFAULT NULL,  `claim_gift_vouchers` INT(11) NULL DEFAULT NULL,  `end_date` DATETIME NULL DEFAULT NULL,  `offer_category` VARCHAR(255) NULL DEFAULT NULL,  `offer_description` VARCHAR(255) NULL DEFAULT NULL,  `offer_image` VARCHAR(150) NULL DEFAULT NULL,  `offer_name` VARCHAR(255) NULL DEFAULT NULL,  `offer_status` INT(11) NULL DEFAULT NULL,  `priority` INT(11) NULL DEFAULT NULL,  `product_category` VARCHAR(100) NULL DEFAULT NULL,  `sell_products` VARCHAR(255) NULL DEFAULT NULL,  `sell_sku_ids` VARCHAR(255) NULL DEFAULT NULL,  `start_date` DATETIME NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `store_location` VARCHAR(255) NULL DEFAULT NULL,  `reward_type` VARCHAR(50) NULL DEFAULT NULL,  `sell_plu_code` VARCHAR(200) NULL DEFAULT NULL,  `offer_image_text` VARCHAR(250) NULL DEFAULT NULL,  `offer_image_text_font` VARCHAR(45) NULL DEFAULT NULL,  `offer_image_size` VARCHAR(45) NULL DEFAULT NULL,  `offer_image_color` VARCHAR(45) NULL DEFAULT NULL,  `offer_image_bold` TINYINT(4) NULL DEFAULT NULL,  `offer_image_italic` TINYINT(4) NULL DEFAULT NULL,  `offer_image_strike` TINYINT(4) NULL DEFAULT NULL,  `sale_price_text` VARCHAR(250) NULL DEFAULT NULL,  `sale_price_font` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_size` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_color` VARCHAR(45) NULL DEFAULT NULL,  `sale_price_bold` TINYINT(4) NULL DEFAULT NULL,  `sale_price_italic` TINYINT(4) NULL DEFAULT NULL,  `sale_price_strike` TINYINT(4) NULL DEFAULT NULL,  `offer_price_text` VARCHAR(250) NULL DEFAULT NULL,  `offer_price_font` VARCHAR(45) NULL DEFAULT NULL,  `offer_price_size` VARCHAR(45) NULL DEFAULT NULL,  `offer_price_color` VARCHAR(45) NULL DEFAULT NULL,  `offer_price_bold` TINYINT(4) NULL DEFAULT NULL,  `offer_price_italic` TINYINT(4) NULL DEFAULT NULL,  `offer_price_strike` TINYINT(4) NULL DEFAULT NULL,  `is_banner` TINYINT(4) NULL DEFAULT NULL,  `authorised_by` VARCHAR(50) NULL DEFAULT NULL,  `closed_by` VARCHAR(50) NULL DEFAULT NULL,  `closed_on` DATE NULL DEFAULT NULL,  `closed_reason` VARCHAR(200) NULL DEFAULT NULL,  `allow_multiple_discounts` TINYINT(4) NULL DEFAULT NULL,  `day1` TINYINT(4) NULL DEFAULT NULL,  `day2` TINYINT(4) NULL DEFAULT NULL,  `day3` TINYINT(4) NULL DEFAULT NULL,  `day4` TINYINT(4) NULL DEFAULT NULL,  `day5` TINYINT(4) NULL DEFAULT NULL,  `day6` TINYINT(4) NULL DEFAULT NULL,  `day7` TINYINT(4) NULL DEFAULT NULL,  `isRepeat` TINYINT(4) NULL DEFAULT NULL,  `offer_start_time` TIME NULL DEFAULT NULL,  `offer_end_time` TIME NULL DEFAULT NULL,  `sell_group_id` VARCHAR(50) NULL DEFAULT NULL,  `product_sub_category` VARCHAR(100) NULL DEFAULT NULL,  `is_combo` TINYINT(1) NULL DEFAULT '0',  `is_lowest_price_item` TINYINT(1) NULL DEFAULT '0',  `access_sequence_num` INT(11) NULL DEFAULT '0',  `is_customer_specific` TINYINT(4) NULL DEFAULT '0',  `created_date` DATETIME NULL DEFAULT NULL,  `product_specific_flag` TINYINT(4) NULL DEFAULT '0',  `is_price_based_configuration` TINYINT(4) NULL DEFAULT '0',  `is_for_all_items` TINYINT(4) NULL DEFAULT '0',  `is_allow_exchanges` TINYINT(4) NULL DEFAULT '0',  `is_allow_returns` TINYINT(4) NULL DEFAULT '0',  `brand` VARCHAR(50) NULL DEFAULT NULL,  `section` VARCHAR(60) NULL DEFAULT NULL,  `product_department` VARCHAR(100) NULL DEFAULT NULL,  `supplier_id` VARCHAR(50) NULL DEFAULT NULL,  `transfer_to_customer` TINYINT(4) NULL DEFAULT '0',  `user_name` VARCHAR(50) NULL DEFAULT NULL,  `role_name` VARCHAR(100) NULL DEFAULT NULL,  PRIMARY KEY (`offer_Id`))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- OFFERS Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE INTO   `offer` (`offer_Id`, `claim_coupons`, `claim_loyalty_points`, `claim_gift_vouchers`, `end_date`, `offer_category`, `offer_description`, `offer_image`, `offer_name`, `offer_status`, `priority`, `product_category`, `sell_products`, `sell_sku_ids`, `start_date`, `updated_date`, `store_location`, `reward_type`, `sell_plu_code`, `offer_image_text`, `offer_image_text_font`, `offer_image_size`, `offer_image_color`, `offer_image_bold`, `offer_image_italic`, `offer_image_strike`, `sale_price_text`, `sale_price_font`, `sale_price_size`, `sale_price_color`, `sale_price_bold`, `sale_price_italic`, `sale_price_strike`, `offer_price_text`, `offer_price_font`, `offer_price_size`, `offer_price_color`, `offer_price_bold`, `offer_price_italic`, `offer_price_strike`, `is_banner`, `authorised_by`, `closed_by`, `closed_on`, `closed_reason`, `allow_multiple_discounts`, `day1`, `day2`, `day3`, `day4`, `day5`, `day6`, `day7`, `isRepeat`, `offer_start_time`, `offer_end_time`, `sell_group_id`, `product_sub_category`, `is_combo`, `is_lowest_price_item`, `access_sequence_num`, `is_customer_specific`, `created_date`, `product_specific_flag`, `is_price_based_configuration`, `is_for_all_items`, `is_allow_exchanges`, `is_allow_returns`, `brand`, `section`, `product_department`, `supplier_id`, `transfer_to_customer`, `user_name`, `role_name`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * dic in offersList) {
                    
                    if ([dic.allKeys containsObject:OFFER_ID] && ![[dic valueForKey:OFFER_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[dic valueForKey:OFFER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CLAIM_COUPONS_INT] && ![[dic valueForKey:CLAIM_COUPONS_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 2, [[dic valueForKey:CLAIM_COUPONS_INT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 2, 0);
                    }
                    
                    if ([dic.allKeys containsObject:CLAIM_LOYALTY_POINTS_INT] && ![[dic valueForKey:CLAIM_LOYALTY_POINTS_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 3, [[dic valueForKey:CLAIM_LOYALTY_POINTS_INT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 3, 0);
                    }
                    
                    if ([dic.allKeys containsObject:CLAIM_GIFT_VOUCHERS_INT] && ![[dic valueForKey:CLAIM_GIFT_VOUCHERS_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 4, [[dic valueForKey:CLAIM_GIFT_VOUCHERS_INT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 4, 0);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_END_DATE] && ![[dic valueForKey:OFFER_END_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5,  [[dic valueForKey:OFFER_END_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_CATEGORY] && ![[dic valueForKey:OFFER_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6,  [[dic valueForKey:OFFER_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_DESCRIPTION] && ![[dic valueForKey:OFFER_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7,  [[dic valueForKey:OFFER_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_IMAGE] && ![[dic valueForKey:OFFER_IMAGE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8,  [[dic valueForKey:OFFER_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_NAME] && ![[dic valueForKey:OFFER_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9,  [[dic valueForKey:OFFER_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_STATUS_INT] && ![[dic valueForKey:OFFER_STATUS_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 10, [[dic valueForKey:OFFER_STATUS_INT] intValue]);
                        
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 10, 0);
                    }
                    
                    if ([dic.allKeys containsObject:PRIORITY_INT] && ![[dic valueForKey:PRIORITY_INT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 11, [[dic valueForKey:PRIORITY_INT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 11, 0);
                    }
                    
                    if ([dic.allKeys containsObject:PRODUCT_CATEGORY] && ![[dic valueForKey:PRODUCT_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 12,  [[dic valueForKey:PRODUCT_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 12, (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SELL_PRODUCTS] && ![[dic valueForKey:SELL_PRODUCTS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 13,  [[dic valueForKey:SELL_PRODUCTS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 13, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SELL_SKU_IDS] && ![[dic valueForKey:SELL_SKU_IDS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 14,  [[dic valueForKey:SELL_SKU_IDS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_START_DATE] && ![[dic valueForKey:OFFER_START_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 15,  [[dic valueForKey:OFFER_START_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:UPDATED_Date] && ![[dic valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 16,  [[dic valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 16, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:kStoreLocation] && ![[dic valueForKey:kStoreLocation] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 17,  [[dic valueForKey:kStoreLocation] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 17, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:REWARD_TYPE] && ![[dic valueForKey:REWARD_TYPE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 18,  [[dic valueForKey:REWARD_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 18, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SELL_PLU_CODE] && ![[dic valueForKey:SELL_PLU_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 19,  [[dic valueForKey:SELL_PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 19, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_IMAGE_TEXT] && ![[dic valueForKey:OFFER_IMAGE_TEXT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 20,  [[dic valueForKey:OFFER_IMAGE_TEXT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 20, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_IMAGE_TEXT_FONT] && ![[dic valueForKey:OFFER_IMAGE_TEXT_FONT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 21,  [[dic valueForKey:OFFER_IMAGE_TEXT_FONT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 21, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_IMAGE_SIZE] && ![[dic valueForKey:OFFER_IMAGE_SIZE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 22,  [[dic valueForKey:OFFER_IMAGE_SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 22, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_IMAGE_COLOR] && ![[dic valueForKey:OFFER_IMAGE_COLOR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 23,  [[dic valueForKey:OFFER_IMAGE_COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 23, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_IMAGE_BOLD] && ![[dic valueForKey:OFFER_IMAGE_BOLD] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 24, [[dic valueForKey:OFFER_IMAGE_BOLD] intValue]);
                        
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 24, 0);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_IMAGE_ITALIC] && ![[dic valueForKey:OFFER_IMAGE_ITALIC] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 25, [[dic valueForKey:OFFER_IMAGE_ITALIC] intValue]);
                        
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 25, 0);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_IMAGE_STRIKE] && ![[dic valueForKey:OFFER_IMAGE_STRIKE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 26, [[dic valueForKey:OFFER_IMAGE_STRIKE] intValue]);
                        
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 26, 0);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_TEXT] && ![[dic valueForKey:SALE_PRICE_TEXT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 27,  [[dic valueForKey:SALE_PRICE_TEXT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 27, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_FONT] && ![[dic valueForKey:SALE_PRICE_FONT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 28,  [[dic valueForKey:SALE_PRICE_FONT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 28, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_SIZE] && ![[dic valueForKey:SALE_PRICE_SIZE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 29,  [[dic valueForKey:SALE_PRICE_SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 29, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_COLOR] && ![[dic valueForKey:SALE_PRICE_COLOR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 30,  [[dic valueForKey:SALE_PRICE_COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 30, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_BOLD] && ![[dic valueForKey:SALE_PRICE_BOLD] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 31, [[dic valueForKey:SALE_PRICE_BOLD] intValue]);
                        
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 31, 0);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_ITALIC] && ![[dic valueForKey:SALE_PRICE_ITALIC] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 32, [[dic valueForKey:SALE_PRICE_ITALIC] intValue]);
                        
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 32, 0);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_PRICE_STRIKE] && ![[dic valueForKey:SALE_PRICE_STRIKE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 33, [[dic valueForKey:SALE_PRICE_STRIKE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 33, 0);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_PRICE_TEXT] && ![[dic valueForKey:OFFER_PRICE_TEXT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 34,  [[dic valueForKey:OFFER_PRICE_TEXT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 34, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_PRICE_FONT] && ![[dic valueForKey:OFFER_PRICE_FONT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 35,  [[dic valueForKey:OFFER_PRICE_FONT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 35, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_PRICE_SIZE] && ![[dic valueForKey:OFFER_PRICE_SIZE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 36,  [[dic valueForKey:OFFER_PRICE_SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 36, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_PRICE_COLOR] && ![[dic valueForKey:OFFER_PRICE_COLOR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 37,  [[dic valueForKey:OFFER_PRICE_COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 37, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_PRICE_BOLD] && ![[dic valueForKey:OFFER_PRICE_BOLD] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 38, [[dic valueForKey:OFFER_PRICE_BOLD] intValue]);
                        
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 38, 0);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_PRICE_ITALIC] && ![[dic valueForKey:OFFER_PRICE_ITALIC] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 39, [[dic valueForKey:OFFER_PRICE_ITALIC] intValue]);
                        
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 39, 0);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_PRICE_STRIKE] && ![[dic valueForKey:OFFER_PRICE_STRIKE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 40, [[dic valueForKey:OFFER_PRICE_STRIKE] intValue]);
                        
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 40, 0);
                    }
                    
                    if ([dic.allKeys containsObject:IS_BANNER] && ![[dic valueForKey:IS_BANNER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 41, [[dic valueForKey:IS_BANNER] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 41, 0);
                    }
                    
                    if ([dic.allKeys containsObject:AUTHORISED_BY] && ![[dic valueForKey:AUTHORISED_BY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 42,  [[dic valueForKey:AUTHORISED_BY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 42, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CLOSED_BY] && ![[dic valueForKey:CLOSED_BY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 43,  [[dic valueForKey:CLOSED_BY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 43, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CLOSED_ON] && ![[dic valueForKey:CLOSED_ON] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 44,  [[dic valueForKey:CLOSED_ON] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 44, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CLOSED_REASON] && ![[dic valueForKey:CLOSED_REASON] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 45,  [[dic valueForKey:CLOSED_REASON] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 45, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:ALLOW_MULTIPLE_DISCOUNTS] && ![[dic valueForKey:ALLOW_MULTIPLE_DISCOUNTS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 46, [[dic valueForKey:ALLOW_MULTIPLE_DISCOUNTS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 46, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_1] && ![[dic valueForKey:DAY_1] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 47, [[dic valueForKey:DAY_1] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 47, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_2] && ![[dic valueForKey:DAY_2] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 48, [[dic valueForKey:DAY_2] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 48, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_3] && ![[dic valueForKey:DAY_3] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 49, [[dic valueForKey:DAY_3] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 49, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_4] && ![[dic valueForKey:DAY_4] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 50, [[dic valueForKey:DAY_4] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 50, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_5] && ![[dic valueForKey:DAY_5] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 51, [[dic valueForKey:DAY_5] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 51, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_6] && ![[dic valueForKey:DAY_6] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 52, [[dic valueForKey:DAY_6] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 52, 0);
                    }
                    
                    if ([dic.allKeys containsObject:DAY_7] && ![[dic valueForKey:DAY_7] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 53, [[dic valueForKey:DAY_7] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 53, 0);
                    }
                    
                    if ([dic.allKeys containsObject:REPEAT] && ![[dic valueForKey:REPEAT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 54, [[dic valueForKey:REPEAT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 54, 0);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_START_TIME] && ![[dic valueForKey:OFFER_START_TIME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 55,  [[dic valueForKey:OFFER_START_TIME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 55, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OFFER_END_TIME] && ![[dic valueForKey:OFFER_END_TIME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 56,  [[dic valueForKey:OFFER_END_TIME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 56, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SELL_GROUP_ID] && ![[dic valueForKey:SELL_GROUP_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 57,  [[dic valueForKey:SELL_GROUP_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 57, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:PRODUCT_SUB_CATEGORY] && ![[dic valueForKey:PRODUCT_SUB_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 58,  [[dic valueForKey:PRODUCT_SUB_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 58, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:COMBO] && ![[dic valueForKey:COMBO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 59, [[dic valueForKey:COMBO] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 59, 0);
                    }
                    
                    if ([dic.allKeys containsObject:LOW_PRICE_ITEM] && ![[dic valueForKey:LOW_PRICE_ITEM] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 60, [[dic valueForKey:LOW_PRICE_ITEM] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 60, 0);
                    }
                    
                    if ([dic.allKeys containsObject:ACCESS_SEQUENCE_NUM] && ![[dic valueForKey:ACCESS_SEQUENCE_NUM] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 61, [[dic valueForKey:ACCESS_SEQUENCE_NUM] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 61, 0);
                    }
                    
                    if ([dic.allKeys containsObject:IS_CUSTOMER_SPECIFIC] && ![[dic valueForKey:IS_CUSTOMER_SPECIFIC] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 62, [[dic valueForKey:IS_CUSTOMER_SPECIFIC] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 62, 0);
                    }
                    
                    if ([dic.allKeys containsObject:CREATED_Date] && ![[dic valueForKey:CREATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 63,  [[dic valueForKey:CREATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 63, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:PRODUCT_SPECIFIC_FLAG] && ![[dic valueForKey:PRODUCT_SPECIFIC_FLAG] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 64, [[dic valueForKey:PRODUCT_SPECIFIC_FLAG] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 64, 0);
                    }
                    
                    if ([dic.allKeys containsObject:PRICE_BASED_CONFIGURATION] && ![[dic valueForKey:PRICE_BASED_CONFIGURATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 65, [[dic valueForKey:PRICE_BASED_CONFIGURATION] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 65, 0);
                    }
                    
                    if ([dic.allKeys containsObject:APPLY_FOR_ALL_ITEMS] && ![[dic valueForKey:APPLY_FOR_ALL_ITEMS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 66, [[dic valueForKey:APPLY_FOR_ALL_ITEMS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 66, 0);
                    }
                    
                    if ([dic.allKeys containsObject:ALLOW_EXCHANGES] && ![[dic valueForKey:ALLOW_EXCHANGES] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 67, [[dic valueForKey:ALLOW_EXCHANGES] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 67, 0);
                    }
                    
                    if ([dic.allKeys containsObject:ALLOW_RETURNS] && ![[dic valueForKey:ALLOW_RETURNS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 68, [[dic valueForKey:ALLOW_RETURNS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 68, 0);
                    }
                    
                    if ([dic.allKeys containsObject:kBrand] && ![[dic valueForKey:kBrand] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 69,  [[dic valueForKey:kBrand] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 69, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SECTION] && ![[dic valueForKey:SECTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 70,  [[dic valueForKey:SECTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 70, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:PRODUCT_DEPARTMENT] && ![[dic valueForKey:PRODUCT_DEPARTMENT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 71,  [[dic valueForKey:PRODUCT_DEPARTMENT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 71, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    
                    if ([dic.allKeys containsObject:SUPPLIER_ID] && ![[dic valueForKey:SUPPLIER_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 72,  [[dic valueForKey:SUPPLIER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 72, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:TRANSFER_TO_CUSTOMER] && ![[dic valueForKey:TRANSFER_TO_CUSTOMER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 73, [[dic valueForKey:TRANSFER_TO_CUSTOMER] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 73, 0);
                    }
                    
                    if ([dic.allKeys containsObject:USERNAME] && ![[dic valueForKey:USERNAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 74,  [[dic valueForKey:USERNAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 74, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:ROLE_NAME] && ![[dic valueForKey:ROLE_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 75,  [[dic valueForKey:ROLE_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 75, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        //                        isCompleteDataInserted = TRUE;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                    
                    if ([dic.allKeys containsObject:OFFER_RANGES_LIST] && ![[dic valueForKey:OFFER_RANGES_LIST] isKindOfClass:[NSNull class]])
                        [offersRangesList addObject:[dic valueForKey:OFFER_RANGES_LIST]];
                    
                    if ([dic.allKeys containsObject:CUSTOMER_FILTER] && ![[dic valueForKey:CUSTOMER_FILTER] isKindOfClass:[NSNull class]])
                        [localCustomerFilterList addObject:[dic valueForKey:CUSTOMER_FILTER]];
                    
                    if ([dic.allKeys containsObject:OFFER_PRODUCTS] && ![[dic valueForKey:OFFER_PRODUCTS] isKindOfClass:[NSNull class]])
                        [offersProductsList addObject:[dic valueForKey:OFFER_PRODUCTS]];
                    
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = TRUE;
                    NSLog(@"----Committed -- OFFERS ----");
                }
                else
                {
                    isCompleteDataInserted = FALSE;
                    NSLog(@"----Commit -- failed -- OFFERS ----");
                }
                sqlite3_finalize(localInsertStmt);
                
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- OFFERS----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        @try {
            isCompleteDataInserted = [self saveOfferRanges:offersRangesList];
            isCompleteDataInserted = [self saveCustomerFilters:localCustomerFilterList];
            isCompleteDataInserted = [self saveOfferProductDetails:offersProductsList];
        } @catch (NSException *exception) {
            
        }
        return isCompleteDataInserted;
    }
}

/**
 * @description  In this method we are save deal ranges into offer_ranges which was retrive from above service call....
 * @date
 * @method       saveOfferRanges:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveOfferRanges:(NSArray *)ranges{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- OFFER_RANGES----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists offer_ranges (offer_id text,minimum_purchase_quantity float,minimum_purchase_amount double,range_ID text,description text,reward_value text, item_id text, group_id text, reward_type text, range_mode text, reward_qty int,start_price_range float,end_price_range float, PRIMARY KEY (range_ID))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- OFFER_RANGES Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into offer_ranges(offer_id,minimum_purchase_quantity,minimum_purchase_amount,range_ID,description,reward_value,item_id,group_id,reward_type,                    range_mode,reward_qty,start_price_range,end_price_range) Values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for(NSArray * locArrangeArr in ranges)
                    for ( NSDictionary * dic in locArrangeArr) {
                        
                        if ([dic.allKeys containsObject:OFFER_Id] && ![[dic valueForKey:OFFER_Id] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 1, [[dic valueForKey:OFFER_Id] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:MINIMUM_PURCHASE_QTY] && ![[dic valueForKey:MINIMUM_PURCHASE_QTY] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 2, [[dic valueForKey:MINIMUM_PURCHASE_QTY]floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 2, 0.00);
                        }
                        
                        if ([dic.allKeys containsObject:MINIMUM_PURCHASE_AMT] && ![[dic valueForKey:MINIMUM_PURCHASE_AMT] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 3, [[dic valueForKey:MINIMUM_PURCHASE_AMT] floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 3, 0.00);
                        }
                        
                        if ([dic.allKeys containsObject:RANGE] && ![[dic valueForKey:RANGE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 4, [[dic valueForKey:RANGE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:ITEM_DESCRIPTION] && ![[dic valueForKey:ITEM_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 5,[[dic valueForKey:ITEM_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:REWARD_VALUE] && ![[dic valueForKey:REWARD_VALUE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 6, [[[dic valueForKey:REWARD_VALUE] stringValue] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:ITEM_ID] && ![[dic valueForKey:ITEM_ID] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 7,[[dic valueForKey:ITEM_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:GROUP_ID] && ![[dic valueForKey:GROUP_ID] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 8,[[dic valueForKey:GROUP_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:RANGE_REWARD_TYPE] && ![[dic valueForKey:RANGE_REWARD_TYPE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 9,[[dic valueForKey:RANGE_REWARD_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:RANGE_MODE] && ![[dic valueForKey:RANGE_MODE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 10,[[dic valueForKey:RANGE_MODE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:REWARD_QTY] && ![[dic valueForKey:REWARD_QTY] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 11,[[[dic valueForKey:REWARD_QTY] stringValue] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:START_PRICE] && ![[dic valueForKey:START_PRICE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 12, [[dic valueForKey:START_PRICE]floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 12, 0.00);
                        }
                        
                        if ([dic.allKeys containsObject:END_PRICE] && ![[dic valueForKey:END_PRICE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 13, [[dic valueForKey:END_PRICE] floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 13, 0.00);
                        }
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)) {
                            //                            isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        }
                        else {
                            //                            isCompleteDataInserted = TRUE;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = TRUE;
                    NSLog(@"----Committed -- OFFER_RANGES ----");
                }
                else
                {
                    isCompleteDataInserted = FALSE;
                    NSLog(@"----Commit -- failed -- OFFER_RANGES ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- OFFER_RANGES----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
    
    
    
    
    
    //    BOOL status = FALSE;
    //
    //    if ([ranges count] > 0) {
    //
    //        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    //        //        static sqlite3_stmt *insertStmt1 = nil;
    //        //        static sqlite3_stmt *deleteStmt1 = nil;
    //
    //        @try {
    //
    //            //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //            //
    //            //                if (deleteStmt == nil) {
    //            //                    const char *sqlStatement = "drop table offer_ranges";
    //            //
    //            //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
    //            //
    //            //                        if(SQLITE_DONE != sqlite3_step(deleteStmt))
    //            //                            NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
    //            //
    //            //                        sqlite3_reset(deleteStmt);
    //            //                    }
    //            //
    //            //                }
    //            //
    //            //            }
    //            //            deleteStmt = nil;
    //
    //
    //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //                if (deleteStmt == nil) {
    //                    char *errMsg;
    //
    //                    /*
    //
    //                     ALTER TABLE `offer`
    //                     ADD COLUMN `is_price_based_configuration` TINYINT(4) NULL DEFAULT '0' AFTER `product_specific_flag`;
    //
    //                     ALTER TABLE `offer_ranges`
    //                     ADD COLUMN `start_price_range` FLOAT NULL DEFAULT '0' AFTER `reward_quantity`,
    //                     ADD COLUMN `end_price_range` FLOAT NULL DEFAULT '0' AFTER `start_price_range`;
    //
    //                     */
    //
    //                    //changed by Srinivasulu on 17/08/2017....
    //                    //added the new key start_price_range -------- end_price_range as integerater....
    //
    //                    //                    const char *sqlStatement = "create table if not exists offer_ranges (offer_id text,minimum_purchase_quantity float,minimum_purchase_amount double,range_ID text,description text,reward_value text, item_id text, group_id text, reward_type text, range_mode text, reward_qty int, PRIMARY KEY (range_ID))";
    //
    //                    const char * sqlStatement = "create table if not exists offer_ranges (offer_id text,minimum_purchase_quantity float,minimum_purchase_amount double,range_ID text,description text,reward_value text, item_id text, group_id text, reward_type text, range_mode text, reward_qty int,start_price_range float,end_price_range float, PRIMARY KEY (range_ID))";
    //
    //
    //                    //upto here on 17/08/2017....
    //
    //
    //
    //
    //
    //                    if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
    //                        == SQLITE_OK) {
    //
    //                        NSLog(@"Success");
    //
    //                    }
    //
    //                }
    //
    //            }
    //
    //            // NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
    //
    //
    //
    //            //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //            //
    //            //                if (deleteStmt == nil) {
    //            //                    const char *sqlStatement = "delete from offer_ranges";
    //            //
    //            //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
    //            //
    //            //                        if(SQLITE_DONE != sqlite3_step(deleteStmt))
    //            //                            NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
    //            //
    //            //                        sqlite3_reset(deleteStmt);
    //            //                    }
    //            //
    //            //                }
    //            //
    //            //            }
    //            //            deleteStmt = nil;
    //
    //
    //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //                if (insertStmt == nil) {
    //
    //                    //changed by Srinivasulu on 17/08/2017....
    //                    //added the new key start_price_range -------- end_price_range as integerater....
    //
    //                    //                    const char *sqlStatement = "INSERT OR REPLACE into offer_ranges(offer_id,minimum_purchase_quantity,minimum_purchase_amount,range_ID,description,reward_value,item_id,group_id,reward_type,                    range_mode,reward_qty) Values(?,?,?,?,?,?,?,?,?,?,?)";
    //
    //                    const char * sqlStatement = "INSERT OR REPLACE into offer_ranges(offer_id,minimum_purchase_quantity,minimum_purchase_amount,range_ID,description,reward_value,item_id,group_id,reward_type,                    range_mode,reward_qty,start_price_range,end_price_range) Values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
    //
    //
    //                    //upto here on  on 17/08/2017....
    //                    //added the new key start_price_range -------- end_price_range as integerater....
    //
    //                    char *sqliteErr;
    //
    //                    sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
    //
    //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
    //
    //                        for (int i=0; i<[ranges count]; i++) {
    //
    //                            NSArray *temp = [rangesArr objectAtIndex:i];
    //
    //                            for (int j=0; j<[temp count]; j++) {
    //
    //                                NSDictionary *dic = [temp objectAtIndex:j];
    //
    //                                sqlite3_bind_text(insertStmt, 1, [[dic valueForKey:@"offerId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                sqlite3_bind_double(insertStmt, 2, [[dic valueForKey:@"minimumPurchaseQuantity"]floatValue]);
    //                                sqlite3_bind_double(insertStmt, 3, [[dic valueForKey:@"minimumPurchaseamount"]floatValue]);
    //                                sqlite3_bind_text(insertStmt, 4,[[dic valueForKey:@"range"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                if ([[dic valueForKey:@"description"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"description"] == nil) {
    //                                    sqlite3_bind_text(insertStmt, 5,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                else {
    //                                    sqlite3_bind_text(insertStmt, 5,[[dic valueForKey:@"description"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                }
    //                                sqlite3_bind_text(insertStmt, 6,[[[dic valueForKey:@"rewardValue"] stringValue] UTF8String], -1, SQLITE_TRANSIENT);
    //                                sqlite3_bind_text(insertStmt, 7,[[dic valueForKey:@"itemId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                sqlite3_bind_text(insertStmt, 8,[[dic valueForKey:@"groupId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                sqlite3_bind_text(insertStmt, 9,[[dic valueForKey:@"rangeRewardType"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                sqlite3_bind_text(insertStmt, 10,[[dic valueForKey:@"rangeMode"] UTF8String], -1, SQLITE_TRANSIENT);
    //                                sqlite3_bind_int(insertStmt, 11, [[dic valueForKey:@"rewardQty"] intValue]);
    //
    //
    //                                //changed by Srinivasulu on 17/08/2017....
    //                                //added the new key start_price_range -------- end_price_range as integerater....
    //
    //                                //                                NSLog(@"--%.2f", [[dic valueForKey:@"startPrice"] floatValue]);
    //                                //                                NSLog(@"--%.2f", [[dic valueForKey:@"endPrice"] floatValue]);
    //
    //                                if ([[dic allKeys] containsObject:@"startPrice"] && ![[dic valueForKey:@"startPrice"] isKindOfClass:[NSNull class]]) {
    //
    //                                    sqlite3_bind_double(insertStmt, 12,  [[dic valueForKey:@"startPrice"] floatValue]);
    //                                }
    //                                else{
    //
    //                                    sqlite3_bind_double(insertStmt, 12,  0);
    //                                }
    //
    //
    //                                if ([[dic allKeys] containsObject:@"endPrice"] && ![[dic valueForKey:@"endPrice"] isKindOfClass:[NSNull class]]) {
    //
    //                                    sqlite3_bind_double(insertStmt, 13, [[dic valueForKey:@"endPrice"] floatValue]);
    //                                }
    //                                else{
    //
    //                                    sqlite3_bind_double(insertStmt, 13,  0);
    //                                }
    //
    //                                //upto here on 17/08/2017....
    //
    //
    //                                if(SQLITE_DONE != sqlite3_step(insertStmt)){
    //                                    status = FALSE;
    //                                    NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
    //
    //                                }
    //                                else {
    //                                    status = TRUE;
    //                                }
    //
    //                                sqlite3_reset(insertStmt);
    //                            }
    //
    //
    //                        }
    //
    //                    }
    //
    //                    sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
    //                    sqlite3_finalize(insertStmt);
    //
    //                }
    //                insertStmt = nil;
    //            }
    //        }
    //        @catch (NSException *exception) {
    //
    //
    //        }
    //        @finally {
    //
    //            sqlite3_close(database);
    //            insertStmt = nil;
    //            deleteStmt = nil;
    //        }
    //    }
    //    return status;
}

/**
 * @description  In this method we are save deal ranges into customer_filters which was retrive from above service call....
 * @date
 * @method       saveCustomerFilters:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveCustomerFilters:(NSMutableArray *)customerFilterArr {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- CUSTOMER_FILTER ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    NSMutableArray * offersRangesList = [[NSMutableArray alloc] init];
    NSMutableArray * localCustomerFilterList = [[NSMutableArray alloc] init];
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists customer_filter(s_no INT(11) NOT NULL ,discount_id VARCHAR(20) NULL DEFAULT NULL,`discount_type` VARCHAR(20) NULL DEFAULT NULL,`country` VARCHAR(50) NULL DEFAULT NULL,`customer_type` VARCHAR(50) NULL DEFAULT NULL,`region` VARCHAR(50) NULL DEFAULT NULL,`age` VARCHAR(50) NULL DEFAULT NULL,`city` VARCHAR(50) NULL DEFAULT NULL,`gender` VARCHAR(10) NULL DEFAULT NULL,`sales_zone` VARCHAR(50) NULL DEFAULT NULL,`referrals` VARCHAR(100) NULL DEFAULT NULL,`rating` FLOAT NULL DEFAULT NULL,`start_date` TEXT ,`end_date` TEXT ,`purchase_channel` VARCHAR(50) NULL DEFAULT NULL,`product_category` VARCHAR(50) NULL DEFAULT NULL,`product` VARCHAR(100) NULL DEFAULT NULL,`turn_over_start_price` FLOAT NULL DEFAULT NULL,`turn_over_end_price` FLOAT NULL DEFAULT NULL,`apply_rules_engine` INT DEFAULT '1',`remarks` VARCHAR(50) NULL DEFAULT NULL,`maritial_status` VARCHAR(50) NULL DEFAULT NULL,`occupation` VARCHAR(50) NULL DEFAULT NULL,`income_group` VARCHAR(50) NULL DEFAULT NULL,`service_rating` FLOAT NULL DEFAULT NULL,`children` VARCHAR(50) NULL DEFAULT NULL,`other_details` VARCHAR(200) NULL DEFAULT NULL,`department` CHAR(60) NULL DEFAULT NULL,`sub_department` CHAR(60) NULL DEFAULT NULL,PRIMARY KEY (`s_no`))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)== SQLITE_OK) {
                
                NSLog(@"---- CUSTOMER_FILTERS Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into customer_filter(s_no,discount_id,discount_type,country,customer_type,region,age,city,gender,                    sales_zone,referrals,rating,start_date,end_date,purchase_channel,product_category,product,turn_over_start_price,turn_over_end_price,apply_rules_engine,remarks,maritial_status,occupation,income_group,service_rating,children,other_details,department,sub_department) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * dic in customerFilterArr) {
                    
                    
                    if ([dic.allKeys containsObject:SERIAL_NUM] && ![[dic valueForKey:SERIAL_NUM] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[dic valueForKey:SERIAL_NUM] stringValue].UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DISCOUNT_ID] && ![[dic valueForKey:DISCOUNT_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 2, [[dic valueForKey:DISCOUNT_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:DISCOUNT_TYPE] && ![[dic valueForKey:DISCOUNT_TYPE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 3, [[dic valueForKey:DISCOUNT_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:COUNTRY] && ![[dic valueForKey:COUNTRY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4,  [[dic valueForKey:COUNTRY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CUSTOMER_TYPE] && ![[dic valueForKey:CUSTOMER_TYPE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5,  [[dic valueForKey:CUSTOMER_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:REGION] && ![[dic valueForKey:REGION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6,  [[dic valueForKey:REGION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CUSTOMER_AGE] && ![[dic valueForKey:CUSTOMER_AGE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7,  [[dic valueForKey:CUSTOMER_AGE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CUSTOMER_CITY] && ![[dic valueForKey:CUSTOMER_CITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8,  [[dic valueForKey:CUSTOMER_CITY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CUSTOMER_GENDER] && ![[dic valueForKey:CUSTOMER_GENDER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9,  [[dic valueForKey:CUSTOMER_GENDER] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALES_ZONE] && ![[dic valueForKey:SALES_ZONE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 10,  [[dic valueForKey:SALES_ZONE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CUSTOMER_REFERAL] && ![[dic valueForKey:CUSTOMER_REFERAL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 11,  [[dic valueForKey:CUSTOMER_REFERAL] stringValue].UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:RATING] && ![[dic valueForKey:RATING] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 12,  [[dic valueForKey:RATING] stringValue].UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 12, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:start_date] && ![[dic valueForKey:start_date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 13,  [[dic valueForKey:start_date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 13, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:end_date] && ![[dic valueForKey:end_date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 14,  [[dic valueForKey:end_date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:PURCHASE_CHANNEL] && ![[dic valueForKey:PURCHASE_CHANNEL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 15,  [[dic valueForKey:PURCHASE_CHANNEL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CUSTOMER_CATEGORY] && ![[dic valueForKey:CUSTOMER_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 16,  [[dic valueForKey:CUSTOMER_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 16, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:PRODUCT] && ![[dic valueForKey:PRODUCT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 17,  [[dic valueForKey:PRODUCT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 17, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:TURN_OVER_START_PRICE] && ![[dic valueForKey:TURN_OVER_START_PRICE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 18, [[dic valueForKey:TURN_OVER_START_PRICE] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 18, 0.00);
                    }
                    
                    if ([dic.allKeys containsObject:TURN_OVER_END_PRICE] && ![[dic valueForKey:TURN_OVER_END_PRICE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 19, [[dic valueForKey:TURN_OVER_END_PRICE]floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 19, 0.00);
                    }
                    
                    if ([dic.allKeys containsObject:APPLY_ROOLS_ENGLINE] && ![[dic valueForKey:APPLY_ROOLS_ENGLINE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 20, [[dic valueForKey:APPLY_ROOLS_ENGLINE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 20, 0);
                    }
                    
                    if ([dic.allKeys containsObject:REMARKS] && ![[dic valueForKey:REMARKS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 21,  [[dic valueForKey:REMARKS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 21, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:MARITIAL_STATUS] && ![[dic valueForKey:MARITIAL_STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 22,  [[dic valueForKey:MARITIAL_STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 22, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OCCUPATION] && ![[dic valueForKey:OCCUPATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 23,  [[dic valueForKey:OCCUPATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 23, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:INCOME_GROUP] && ![[dic valueForKey:INCOME_GROUP] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 24,  [[dic valueForKey:INCOME_GROUP] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 24, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:CUSTOMER_RATING] && ![[dic valueForKey:CUSTOMER_RATING] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 25, [[dic valueForKey:CUSTOMER_RATING] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 25, 0);
                    }
                    
                    if ([dic.allKeys containsObject:CHILDREN] && ![[dic valueForKey:CHILDREN] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 26,  [[dic valueForKey:CHILDREN] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 26, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:OTHER_DETAILS] && ![[dic valueForKey:OTHER_DETAILS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 27,  [[dic valueForKey:OTHER_DETAILS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 27, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:kItemDept] && ![[dic valueForKey:kItemDept] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 28,  [[dic valueForKey:kItemDept] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 28, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:kItemSubDept] && ![[dic valueForKey:kItemSubDept] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 29,  [[dic valueForKey:kItemSubDept] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 29, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                        //                        isCompleteDataInserted = TRUE;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                    
                    if ([dic.allKeys containsObject:OFFER_RANGES_LIST] && ![[dic valueForKey:OFFER_RANGES_LIST] isKindOfClass:[NSNull class]])
                        [offersRangesList addObject:[dic valueForKey:OFFER_RANGES_LIST]];
                    
                    if ([dic.allKeys containsObject:CUSTOMER_FILTER] && ![[dic valueForKey:CUSTOMER_FILTER] isKindOfClass:[NSNull class]])
                        [localCustomerFilterList addObject:[dic valueForKey:CUSTOMER_FILTER]];
                    
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = TRUE;
                    NSLog(@"----Committed -- CUSTOMER_FILTERS ----");
                }
                else
                {
                    isCompleteDataInserted = FALSE;
                    NSLog(@"----Commit -- Failed -- CUSTOMER_FILTERS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- CUSTOMER_FILTER ----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
    
    
    
    //    BOOL status = FALSE;
    //
    //    if ([customerFilterArr count] > 0) {
    //
    //        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    //        //        static sqlite3_stmt *insertStmt1 = nil;
    //        //        static sqlite3_stmt *deleteStmt1 = nil;
    //
    //        @try {
    //
    //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //                if (deleteStmt == nil) {
    //                    char *errMsg;
    //
    //                    const char *sqlStatement = "create table if not exists customer_filter(s_no INT(11) NOT NULL ,discount_id VARCHAR(20) NULL DEFAULT NULL,`discount_type` VARCHAR(20) NULL DEFAULT NULL,`country` VARCHAR(50) NULL DEFAULT NULL,`customer_type` VARCHAR(50) NULL DEFAULT NULL,`region` VARCHAR(50) NULL DEFAULT NULL,`age` VARCHAR(50) NULL DEFAULT NULL,`city` VARCHAR(50) NULL DEFAULT NULL,`gender` VARCHAR(10) NULL DEFAULT NULL,`sales_zone` VARCHAR(50) NULL DEFAULT NULL,`referrals` VARCHAR(100) NULL DEFAULT NULL,`rating` FLOAT NULL DEFAULT NULL,`start_date` TEXT ,`end_date` TEXT ,`purchase_channel` VARCHAR(50) NULL DEFAULT NULL,`product_category` VARCHAR(50) NULL DEFAULT NULL,`product` VARCHAR(100) NULL DEFAULT NULL,`turn_over_start_price` FLOAT NULL DEFAULT NULL,`turn_over_end_price` FLOAT NULL DEFAULT NULL,`apply_rules_engine` INT DEFAULT '1',`remarks` VARCHAR(50) NULL DEFAULT NULL,`maritial_status` VARCHAR(50) NULL DEFAULT NULL,`occupation` VARCHAR(50) NULL DEFAULT NULL,`income_group` VARCHAR(50) NULL DEFAULT NULL,`service_rating` FLOAT NULL DEFAULT NULL,`children` VARCHAR(50) NULL DEFAULT NULL,`other_details` VARCHAR(200) NULL DEFAULT NULL,`department` CHAR(60) NULL DEFAULT NULL,`sub_department` CHAR(60) NULL DEFAULT NULL,PRIMARY KEY (`s_no`))";
    //
    //                    if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
    //                        == SQLITE_OK) {
    //
    //                        NSLog(@"Success");
    //
    //                    }
    //
    //                }
    //
    //            }
    //
    //            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //                if (insertStmt == nil) {
    //                    const char *sqlStatement = "INSERT OR REPLACE into offer_ranges(s_no,discount_id,discount_type,country,customer_type,region,age,city,gender,                    sales_zone,referrals,rating,start_date,end_date,purchase_channel,product_category,product,turn_over_start_price,turn_over_end_price,apply_rules_engine,remarks,maritial_status,occupation,income_group,service_rating,children,other_details,department,sub_department) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    //
    //                    char *sqliteErr;
    //
    //                    sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
    //
    //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
    //
    //                        for (NSDictionary *dic in customerFilterArr) {
    //
    //                            sqlite3_bind_int(insertStmt, 1, [[dic valueForKey:@"serialNum"] intValue]);
    //
    //                            if ([[dic valueForKey:@"discountId"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"discountId"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 2,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 2,[[dic valueForKey:@"discountId"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            if ([[dic valueForKey:@"discountType"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"discountType"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 3,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 3,[[dic valueForKey:@"discountType"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"country"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"country"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 4,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 4,[[dic valueForKey:@"country"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"customerType"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"customerType"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 5,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 5,[[dic valueForKey:@"customerType"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"region"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"region"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 6,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 6,[[dic valueForKey:@"region"]  UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"age"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"age"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 7,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 7,[[dic valueForKey:@"age"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"city"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"city"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 8,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 8,[[dic valueForKey:@"city"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"gender"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"gender"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 9,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 9,[[dic valueForKey:@"gender"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"referrals"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"referrals"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 11,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 11,[[dic valueForKey:@"referrals"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            sqlite3_bind_double(insertStmt, 12, [[dic valueForKey:@"rating"] floatValue]);
    //
    //                            if ([[dic valueForKey:@"start_date"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"start_date"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 13,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 13,[[dic valueForKey:@"start_date"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            if ([[dic valueForKey:@"end_date"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"end_date"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 14,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 14,[[dic valueForKey:@"end_date"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            if ([[dic valueForKey:@"purchaseChannel"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"purchaseChannel"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 15,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 15,[[dic valueForKey:@"purchaseChannel"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"productCategory"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"productCategory"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 16,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 16,[[dic valueForKey:@"productCategory"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"product"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"product"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 17,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 17,[[dic valueForKey:@"product"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            sqlite3_bind_double(insertStmt, 18, [[dic valueForKey:@"turnOverStartPrice"] floatValue]);
    //                            sqlite3_bind_double(insertStmt, 19, [[dic valueForKey:@"turnOverEndPrice"] floatValue]);
    //
    //                            sqlite3_bind_int(insertStmt, 20, [[dic valueForKey:@"applyRoolsEngine"] intValue]);
    //
    //                            if ([[dic valueForKey:@"remarks"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"remarks"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 21,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 21,[[dic valueForKey:@"remarks"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"maritialStatus"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"maritialStatus"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 22,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 22,[[dic valueForKey:@"maritialStatus"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"occupation"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"occupation"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 23,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 23,[[dic valueForKey:@"occupation"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"incomeGroup"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"incomeGroup"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 24,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 24,[[dic valueForKey:@"incomeGroup"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            sqlite3_bind_double(insertStmt, 25, [[dic valueForKey:@"customerRating"] floatValue]);
    //
    //                            if ([[dic valueForKey:@"children"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"children"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 26,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 26,[[dic valueForKey:@"children"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            if ([[dic valueForKey:@"otherDetails"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"otherDetails"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 27,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 27,[[dic valueForKey:@"otherDetails"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"department"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"department"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 28,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 28,[[dic valueForKey:@"department"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //                            if ([[dic valueForKey:@"subDepartment"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"subDepartment"] == nil) {
    //                                sqlite3_bind_text(insertStmt, 29,[@"" UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //                            else {
    //                                sqlite3_bind_text(insertStmt, 29,[[dic valueForKey:@"subDepartment"] UTF8String], -1, SQLITE_TRANSIENT);
    //                            }
    //
    //
    //                            if(SQLITE_DONE != sqlite3_step(insertStmt)){
    //                                status = FALSE;
    //                                NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
    //                            }
    //                            else {
    //                                status = TRUE;
    //                            }
    //
    //                            sqlite3_reset(insertStmt);
    //                        }
    //                    }
    //
    //                    sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
    //                    sqlite3_finalize(insertStmt);
    //
    //                }
    //                insertStmt = nil;
    //            }
    //        }
    //        @catch (NSException *exception) {
    //
    //        }
    //        @finally {
    //
    //            sqlite3_close(database);
    //            insertStmt = nil;
    //            deleteStmt = nil;
    //        }
    //    }
    //
    //    //added by Srinivasulu on 03/10/2017....
    //    //reason --  in case of count is zero then also it has to return the the true....
    //    else{
    //
    //        status = true;
    //    }
    //
    //    //upto here on 03/10/2017....
    //
    //    return status;
}

/**
 * @description  In this method we are calling the web service implemented methods to get groups && groupsChlid data....
 * @date
 * @method       saveOfferProductDetails:
 * @author       Srinivasulu
 * @param
 * @param        NSMutableArray
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveOfferProductDetails:(NSMutableArray *)offersProductsArr {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- OFFER_PRODUCTS ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    NSMutableArray * offersRangesList = [[NSMutableArray alloc] init];
    NSMutableArray * localCustomerFilterList = [[NSMutableArray alloc] init];
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localSelectStmt = nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "create table if not exists `offer_products` ( `sno` INT(11),  `offer_id` CHAR(15) NULL DEFAULT NULL,  `sku_id` VARCHAR(25) NULL DEFAULT NULL,  `plucode` VARCHAR(25) NULL DEFAULT NULL,  `sku_description` VARCHAR(250) NULL DEFAULT NULL,  `min_purchase_qty` FLOAT NULL DEFAULT '0',  `reward_qty` FLOAT NULL DEFAULT '0',  `reward_value` FLOAT NULL DEFAULT '0',  `category` VARCHAR(100) NULL DEFAULT NULL,  `sub_category` VARCHAR(100) NULL DEFAULT NULL,  `brand` VARCHAR(50) NULL DEFAULT NULL,  `section` VARCHAR(60) NULL DEFAULT NULL,  `department` CHAR(50) NULL DEFAULT NULL,  `model` VARCHAR(50) NULL DEFAULT NULL,  `size` CHAR(60) NULL DEFAULT NULL,  `discount_type` CHAR(60) NULL DEFAULT NULL,  `ean` VARCHAR(50) NULL DEFAULT NULL,  PRIMARY KEY (`offer_id`,'plucode'))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)== SQLITE_OK) {
                
                NSLog(@"---- OFFER_PRODUCTS Table Created Sucessfully ----");
            }
            
            NSString * item_id = [NSString stringWithFormat:@"%d",1];
            BOOL  itemIdExists = FALSE;
            const char * sqlSelectStmt = "select sno from offer_products order by sno DESC LIMIT 1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    item_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                    itemIdExists = TRUE;
                }
                sqlite3_finalize(localSelectStmt);
            }
            
            
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `offer_products` (`sno`, `offer_id`, `sku_id`, `plucode`, `sku_description`, `min_purchase_qty`, `reward_qty`, `reward_value`, `category`, `sub_category`, `brand`, `section`, `department`, `model`, `size`, `discount_type`, `ean`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for(NSArray * tempProductsArr in offersProductsArr)
                    for ( NSDictionary * dic in tempProductsArr) {
                        
                        sqlite3_bind_int(localInsertStmt, 1, [item_id intValue]);
                        item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                        
                        
                        if ([dic.allKeys containsObject:OFFER_Id] && ![[dic valueForKey:OFFER_Id] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 2, [[dic valueForKey:OFFER_Id] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:ITEM_SKU] && ![[dic valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 3, [[dic valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:Plu_code] && ![[dic valueForKey:Plu_code] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 4, [[dic valueForKey:Plu_code] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:ITEM_DESC] && ![[dic valueForKey:ITEM_DESC] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 5,  [[dic valueForKey:ITEM_DESC] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:MIN_PURCHASE_QTY] && ![[dic valueForKey:MIN_PURCHASE_QTY] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 6, [[dic valueForKey:MIN_PURCHASE_QTY]floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 6, 0.00);
                        }
                        
                        if ([dic.allKeys containsObject:REWARD_QTY] && ![[dic valueForKey:REWARD_QTY] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 7, [[dic valueForKey:REWARD_QTY] floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 7, 0.00);
                        }
                        
                        if ([dic.allKeys containsObject:REWARD_VALUE] && ![[dic valueForKey:REWARD_VALUE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_double(localInsertStmt, 8, [[dic valueForKey:REWARD_VALUE] floatValue]);
                        }
                        else {
                            sqlite3_bind_double(localInsertStmt, 8, 0.00);
                        }
                        
                        if ([dic.allKeys containsObject:ITEM_CATEGORY] && ![[dic valueForKey:ITEM_CATEGORY] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 9, [[dic valueForKey:ITEM_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 9, (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:SUB_CATEGORY] && ![[dic valueForKey:SUB_CATEGORY] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 10, [[dic valueForKey:SUB_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:kBrand] && ![[dic valueForKey:kBrand] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 11, [[dic valueForKey:kBrand] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:SECTION] && ![[dic valueForKey:SECTION] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 12, [[dic valueForKey:SECTION] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 12, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:kItemDept] && ![[dic valueForKey:kItemDept] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 13,  [[dic valueForKey:kItemDept] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 13, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:MODEL] && ![[dic valueForKey:MODEL] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 14,  [[dic valueForKey:MODEL    ] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:SIZE] && ![[dic valueForKey:SIZE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 15,  [[dic valueForKey:SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:DISCOUNT_TYPE] && ![[dic valueForKey:DISCOUNT_TYPE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 16,  [[dic valueForKey:DISCOUNT_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 16, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:EAN] && ![[dic valueForKey:EAN] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 17,  [[dic valueForKey:EAN] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 17, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        }
                        else {
                        }
                        
                        sqlite3_reset(localInsertStmt);
                        
                        if ([dic.allKeys containsObject:OFFER_RANGES_LIST] && ![[dic valueForKey:OFFER_RANGES_LIST] isKindOfClass:[NSNull class]])
                            [offersRangesList addObject:[dic valueForKey:OFFER_RANGES_LIST]];
                        
                        if ([dic.allKeys containsObject:CUSTOMER_FILTER] && ![[dic valueForKey:CUSTOMER_FILTER] isKindOfClass:[NSNull class]])
                            [localCustomerFilterList addObject:[dic valueForKey:CUSTOMER_FILTER]];
                        
                    }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = TRUE;
                    NSLog(@"----Committed -- OFFER_PRODUCTS ----");
                }
                else
                {
                    isCompleteDataInserted = FALSE;
                    NSLog(@"----Commit -- Failed -- OFFER_PRODUCTS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- OFFER_PRODUCTS ----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

#pragma mark start groups related downloading and retriving methods....

/**
 * @description  In this method we are calling the web service implemented methods to get groups && groupsChlid data....
 * @date
 * @method       getGroupItems
 * @author
 * @param
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(void)getGroupItems{
    BOOL status = true;
    
    @try {
        
        groupsStartIndex = 0;
        status = [self saveGroupsInfo:groupsStartIndex totalRecords:DOWNLOAD_RATE];
        groupsStartIndex = groupsStartIndex + DOWNLOAD_RATE;
        while (groupsStartIndex<=totalAvailableGroups) {
            
            //            NSLog(@"%d",groupsStartIndex);
            status = [self saveGroupsInfo:groupsStartIndex totalRecords:DOWNLOAD_RATE];
            groupsStartIndex = groupsStartIndex + DOWNLOAD_RATE;
        }
        
        if (groupsStartIndex >= totalAvailableGroups && status) {
            NSDate * today = [NSDate date];
            NSDateFormatter * tempDateFormate = [[NSDateFormatter alloc] init];
            //                [tempDateFormate setDateFormat:@"dd/MM/yyyy HH:mm:ss"];
            tempDateFormate.dateFormat = @"dd/MM/yyyy";
            NSString * currentdate = [tempDateFormate stringFromDate:today];
            
            currentdate = [NSString stringWithFormat:@"%@%@",currentdate,@" 00:00:00"];
            
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            [defaults setObject:currentdate forKey:LAST_GROUPS_UPDATED];
            
            [defaults synchronize];
        }
        
        if (status) {
            groupsChildsStartIndex = 0;
            status = [self getGroupChilds:groupsChildsStartIndex maxRecords:DOWNLOAD_RATE];
            groupsChildsStartIndex = groupsChildsStartIndex + DOWNLOAD_RATE;
            while (groupsChildsStartIndex<=totalAvailableGroupsChilds) {
                //                NSLog(@"%d",groupsChildsStartIndex);
                status = [self getGroupChilds:groupsChildsStartIndex maxRecords:DOWNLOAD_RATE];
                groupsChildsStartIndex = groupsChildsStartIndex + DOWNLOAD_RATE;
            }
            
            if (groupsChildsStartIndex >= totalAvailableGroupsChilds  && status) {
                NSDate * today = [NSDate date];
                NSDateFormatter * tempDateFormate = [[NSDateFormatter alloc] init];
                //                [tempDateFormate setDateFormat:@"dd/MM/yyyy HH:mm:ss"];
                tempDateFormate.dateFormat = @"dd/MM/yyyy";
                NSString * currentdate = [tempDateFormate stringFromDate:today];
                
                currentdate = [NSString stringWithFormat:@"%@%@",currentdate,@" 00:00:00"];
                
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                [defaults setObject:currentdate forKey:LAST_GROUP_CHILDS_UPDATED];
                
                [defaults synchronize];
            }
            
            //added by Srinivasulu on 22/02/2018....
            if((groupsStartIndex == DOWNLOAD_RATE && totalAvailableGroups == 0) || (groupsChildsStartIndex == DOWNLOAD_RATE && totalAvailableGroupsChilds == 0) ) {
                
                [self createGroupChildTableInLocal];
            }
            //upto here on22/02/2018....
        }
        //added on 16/11/2018....
        [self getAllMemberShipUsers:0];
        [self getAllGiftCouponDetails:00];
    } @catch (NSException *exception) {
        
        status = true;
        NSLog(@"%@",exception);
    } @finally {
        
    }
}

/**
 * @description  In this method we are calling the web service with startIndex inorder to get groups data....
 * @date
 * @method       saveGroupsInfo:-- totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveGroupsInfo:(int)startIndex totalRecords:(int)totalRecords{
    
    NSDictionary *groupDataDic;
    
    BOOL status = FALSE;
    
    @try {
        
        NSArray * loyaltyKeys = @[GROUP_ID,REQUEST_HEADER,START_INDEX,STORE_LOCATION,kStoreLocation,kMaxRecords,START_DATE];
        NSArray * loyaltyObjects = @[EMPTY_STRING,[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,presentLocation,[NSString stringWithFormat:@"%d",totalRecords],@""];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        if ([[defaults valueForKey:LAST_GROUPS_UPDATED] length]) {
            
            NSLog(@"%@",[defaults valueForKey:LAST_GROUPS_UPDATED]);
            loyaltyObjects = @[@"",[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,presentLocation,[NSString stringWithFormat:@"%d",totalRecords],[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_GROUPS_UPDATED]]];
        }
        
        NSDictionary * dictionary = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err_];
        NSString * getOffers = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        
        NSString * serviceUrl = [WebServiceUtility getURLFor:GET_PRODUCT_GROUPS];
        serviceUrl = [NSString stringWithFormat:@"%@%@",serviceUrl,getOffers];
        serviceUrl = [WebServiceUtility addPercentEscapesFor:serviceUrl];
        
        NSURL * url = [NSURL URLWithString:serviceUrl];
        NSMutableURLRequest  *request = [NSMutableURLRequest  requestWithURL:url cachePolicy:NSURLCacheStorageAllowed timeoutInterval:60.0];
        request.HTTPMethod = @"GET";
        
        NSError *connectionError=nil;
        NSURLResponse *response=nil;
        NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&connectionError];
        
        if (data.length > 0 && connectionError == nil)
        {
            NSError * err;
            
            NSDictionary * JSON  = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
            groupDataDic = [JSON mutableCopy];
            
            if([groupDataDic.allKeys containsObject:RESPONSE_HEADER] && [[[groupDataDic valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_CODE] intValue] == 0) {
                totalAvailableGroups = [[JSON valueForKey:TOTAL_SKUS] intValue];
                status = [self saveGroupsIntoTable:[groupDataDic valueForKey:GROUP_LIST]];
            }
            else {
                status = true;
            }
        }
    }
    @catch(NSException *exception){
        NSLog(@"%@",exception.name);
    }
    @finally{
        
        return status;
    }
}

/**
 * @description  In this method we are calling the web service with startIndex inorder to get groupChlids data....
 * @date
 * @method       getGroupChilds:-- totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getGroupChilds:(int)startIndex maxRecords:(int)maxRecords {
    
    BOOL status = false;
    @try {
        
        NSArray * loyaltyKeys = @[GROUP_ID,REQUEST_HEADER,START_INDEX,STORE_LOCATION,kStoreLocation,kMaxRecords,kStartDate,FILE_REQUIRED];
        NSArray * loyaltyObjects = @[@"",[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,presentLocation,[NSString stringWithFormat:@"%d",maxRecords],@"",[NSNumber numberWithBool:isFileDownload]];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        if ([[defaults valueForKey:LAST_GROUP_CHILDS_UPDATED] length]) {
            
            NSLog(@"%@",[defaults valueForKey:LAST_GROUP_CHILDS_UPDATED]);
            loyaltyObjects = @[@"",[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,presentLocation,[NSString stringWithFormat:@"%d",maxRecords],[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_GROUP_CHILDS_UPDATED]],[NSNumber numberWithBool:isFileDownload]];
        }
        
        NSDictionary * dictionary = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err_];
        NSString * getOffers = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        NSString * serviceUrl = [WebServiceUtility getURLFor:GET_GROUP_ITEMS];
        serviceUrl = [NSString stringWithFormat:@"%@%@",serviceUrl,getOffers];
        serviceUrl = [WebServiceUtility addPercentEscapesFor:serviceUrl];
        
        NSURL *url = [NSURL URLWithString:serviceUrl];
        NSMutableURLRequest  *request = [NSMutableURLRequest  requestWithURL:url cachePolicy:NSURLCacheStorageAllowed timeoutInterval:60.0];
        request.HTTPMethod = @"GET";
        
        NSError *connectionError=nil;
        NSURLResponse *response=nil;
        NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&connectionError];
        
        if (data.length > 0 && connectionError == nil)
        {
            NSError *err;
            
            NSDictionary *JSON  = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&err];
            
            if([JSON.allKeys containsObject:RESPONSE_HEADER] && [[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_CODE] intValue] == 0) {
                
                totalAvailableGroupsChilds = [[JSON valueForKey:TOTAL_SKUS] intValue];
                
                if(isFileDownload){
                    NSString * fileUrlStr = [self checkGivenValueIsNullOrNil:[JSON valueForKey:FILE_URL] defaultReturn:@""];
                    if(fileUrlStr.length){
                        
                        status = [self DownLoadFileAndInsertItInLoadDB:fileUrlStr dataType:GROUP_CHILD_TABLE];
                    }
                }
                else{
                    
                    status = [self saveGroupsChildsIntoTable:[JSON valueForKey:GROUP_CHILD_LISTS]];
                }
            }
            else {
                if ([[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE] caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame)
                    status = true;
            }
        }
    }
    @catch(NSException *exception){
        NSLog(@"%@",exception);
    }
    return status;
}

/**
 * @description  here we are insertin the data into table
 * @date
 * @method       saveGroupsChildsIntoTable:--
 * @author
 * @param        NSArray
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/07/2018
 * @reason       Change one by one commit into single Transaction.
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveGroupsIntoTable:(NSArray *)groupsDataArr{
    BOOL status = FALSE;
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            char *errMsg;
            
            const char * sqlStatement = "create table if not exists groups_master (group_id text,group_description text,group_status integer,group_product_category text,group_product_sub_category text,created_date text, updated_date text, group_comments text, PRIMARY KEY (group_id))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- GROUPS Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "INSERT OR REPLACE into groups_master(group_id,group_description,group_status,group_product_category,group_product_sub_category,created_date,updated_date,group_comments) Values(?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (NSDictionary * temp in groupsDataArr) {
                    
                    if ([temp.allKeys containsObject:GROUP_ID] && ![[temp valueForKey:GROUP_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:GROUP_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:GROUP_DESCRIPTION] && ![[temp valueForKey:GROUP_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:GROUP_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:GROUP_STATUS] && ![[temp valueForKey:GROUP_STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 3, [[temp valueForKey:GROUP_STATUS]intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 3, 0);
                    }
                    
                    if ([temp.allKeys containsObject:GROUP_PRODUCT_CATEGORY] && ![[temp valueForKey:GROUP_PRODUCT_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4, [[temp valueForKey:GROUP_PRODUCT_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:GROUP_PRODUCT_SUB_CATEGORY] && ![[temp valueForKey:GROUP_PRODUCT_SUB_CATEGORY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5, [[temp valueForKey:GROUP_PRODUCT_SUB_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_Date] && ![[temp valueForKey:CREATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6, [[temp valueForKey:CREATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:UPDATED_Date] && ![[temp valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7, [[temp valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:GROUP_COMMENTS] && ![[temp valueForKey:GROUP_COMMENTS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8, [[temp valueForKey:GROUP_COMMENTS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        status = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                        //                        status = TRUE;
                    }
                    sqlite3_reset(localInsertStmt);
                }
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                status = TRUE;
                NSLog(@"----Committed -- GROUPS ----");
            }
            else
            {
                status = FALSE;
                NSLog(@"----Commit -- failed -- GROUP ----");
            }
            sqlite3_finalize(localInsertStmt);
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
        NSDate * today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- GROUPS_MASTER ----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
    }
    return status;
}

/**
 * @description  here we are insertin the data into table
 * @date
 * @method       saveGroupsChildsIntoTable:--
 * @author
 * @param        NSArray
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/07/2018
 * @reason       Change one by one commit into single Transaction.
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveGroupsChildsIntoTable:(NSArray *)ranges{
    BOOL status = FALSE;
    
    if (ranges.count > 0) {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        static sqlite3 * localDatabase = nil;
        static sqlite3_stmt * localInsertStmt =nil;
        static sqlite3_stmt * localSelectStmt = nil;
        
        @try {
            
            if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
                
                char * errMsg;
                const char * sqlStatement = "create table if not exists groups_child (s_no int,group_id text,sku_Id text,plu_code text,date_and_time text,comments text,status int,PRIMARY KEY(s_no))";
                
                if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                    NSLog(@"---- GROUPS_CHILD Table Created Sucessfully ----");
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase));
                }
                
                
                NSString *item_id = [NSString stringWithFormat:@"%d",1];
                const char * sqlSelectStmt = "select s_no from groups_child order by s_no DESC LIMIT 1";
                
                if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        item_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                        item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                    }
                    sqlite3_finalize(localSelectStmt);
                }
                
                sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
                
                
                const char * sqlInsertStatement = "INSERT OR REPLACE into groups_child(s_no,group_id,sku_Id,plu_code,date_and_time,comments,status) Values(?,?,?,?,?,?,?)";
                
                if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                    
                    for ( NSDictionary * dic in ranges) {
                        sqlite3_bind_int(localInsertStmt, 1, item_id.intValue);
                        
                        item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                        
                        
                        if ([dic.allKeys containsObject:GROUP_ID] && ![[dic valueForKey:GROUP_ID] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 2, [[dic valueForKey:GROUP_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:ITEM_SKU] && ![[dic valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 3, [[dic valueForKey:ITEM_SKU] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:PLU_CODE] && ![[dic valueForKey:PLU_CODE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 4, [[dic valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:DATE_AND_TIME] && ![[dic valueForKey:DATE_AND_TIME] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 5, [[dic valueForKey:DATE_AND_TIME] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:kComments] && ![[dic valueForKey:kComments] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(localInsertStmt, 6, [[dic valueForKey:kComments] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([dic.allKeys containsObject:ITEM_STATUS] && ![[dic valueForKey:ITEM_STATUS] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_int(localInsertStmt, 7, [[dic valueForKey:ITEM_STATUS] intValue]);
                        }
                        else {
                            sqlite3_bind_int(localInsertStmt, 7, 0);
                        }
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                            status = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        }
                        else {
                            //                            status = TRUE;
                        }
                        sqlite3_reset(localInsertStmt);
                    }
                    
                    if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                    {
                        status = TRUE;
                        NSLog(@"----Committed -- GROUP_CHILDS ----");
                    }
                    else
                    {
                        status = FALSE;
                        NSLog(@"----Commit -- Failed -- GROUP_CHILDS ----");
                    }
                    sqlite3_finalize(localInsertStmt);
                    
                }
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
        }
        @catch (NSException *exception) {
            
        }
        @finally {
            NSDate * today = [NSDate date];
            NSDateFormatter *f = [[NSDateFormatter alloc] init];
            f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
            NSString* currentdate = [f stringFromDate:today];
            NSLog(@"-----End Time ---- GROUP_CHILDS ----%@",currentdate);
            
            localInsertStmt = nil;
            sqlite3_close(localDatabase);
        }
    }
    return status;
}


/**
 * @description  In this method we are calling the web service with startIndex inorder to get groupChlids data....
 * @date         12/07/2018..
 * @method       createGroupChildTableInLocal
 * @author       Srinivasulu
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)createGroupChildTableInLocal{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char *errMsg;
            
            const char *sqlStatement = "create table if not exists groups_master (group_id text,group_description text,group_status integer,group_product_category text,group_product_sub_category text,created_date text, updated_date text, group_comments text, PRIMARY KEY (group_id))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"Success");
            }
            
            sqlStatement = "create table if not exists groups_child (s_no int,group_id text,sku_Id text,plu_code text,date_and_time text,comments text,status int,PRIMARY KEY(s_no))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"Success");
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        sqlite3_finalize(localSelectStmt);
        sqlite3_close(localDatabase);
    }
}


/**
 * @description  here we are insertin the data into table
 * @date
 * @method       saveGroupsChildsIntoTable:--
 * @author
 * @param        NSArray
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/07/2018
 * @reason       Change one by one commit into single Transaction.
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveGroupsChildsDataFromCSVFileIntoTable:(NSArray *)skuItemList{
    BOOL status = FALSE;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            const char * sqlStatement = "create table if not exists groups_child (s_no int,group_id text,sku_Id text,plu_code text,date_and_time text,comments text,status int,PRIMARY KEY(s_no))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- GROUPS_CHILD Table Created Sucessfully ----");
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
            
            NSString *item_id = [NSString stringWithFormat:@"%d",1];
            const char * sqlSelectStmt = "select s_no from groups_child order by s_no DESC LIMIT 1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    item_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                }
                sqlite3_finalize(localSelectStmt);
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            
            const char * sqlInsertStatement = "INSERT OR REPLACE into groups_child(s_no,group_id,sku_Id,plu_code,date_and_time,comments,status) Values(?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * itemListStr in skuItemList) {
                    
                    NSArray * itemList = [itemListStr componentsSeparatedByString:@","];
                    
                    if([itemList count] >= 4){
                        sqlite3_bind_int(localInsertStmt, 1, item_id.intValue);
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt, 7, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:3] defaultReturn:@"0"] intValue]);
                        
                        item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"sku becomes false in due error while inserting into database");
                        }
                        else {
                            
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    status = TRUE;
                    NSLog(@"----Committed -- GROUP_CHILDS ----");
                }
                else
                {
                    status = FALSE;
                    NSLog(@"----Commit -- Failed -- GROUP_CHILDS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        NSDate * today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- GROUP_CHILDS ----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return status;
    }
}

#pragma mark start member_ship_users related downloading and retriving methods....

-(void)getAllMemberShipUsers:(int)startIndex{
    
    Boolean service_Call_Save_Status = false;
    
    @try {
        if(startIndex == 0)
            membersStartIndex = 0;
        
        NSMutableDictionary * menuDeatilsRequestDic = [[NSMutableDictionary alloc]init];
        
        [menuDeatilsRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_NAME];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_LOCATION];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithInt:startIndex] forKey:START_INDEX];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithInt:DOWNLOAD_RATE] forKey:MAX_RECORDS];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithBool:isFileDownload] forKey:FILE_REQUIRED];

        NSArray * tempLocArr = [NSArray arrayWithObjects:presentLocation, nil];
        [menuDeatilsRequestDic setValue:tempLocArr forKey:LOCATIONS];
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.memberServiceDelegate = self;
        service_Call_Save_Status = [serviceController getAllMemberShipUsersThroughSynchronousRequest:customerPurchasesRequestString];
    } @catch (NSException *exception) {
        
    } @finally {
        
//        return service_Call_Save_Status;
    }
}

-(BOOL)getAllMemberShipUsersSuccessResponseAndReturnSaveStatus:(NSDictionary *)successDictionary{
    BOOL isSaveTheList = false;
    
    @try {
        
        if([[successDictionary allKeys] containsObject:MEMBER_SHIPS_DETAILS] && ! [[successDictionary valueForKey:MEMBER_SHIPS_DETAILS] isKindOfClass:[NSNull class]]){
            
            totalMembersRecordsCount = [[successDictionary valueForKey:TOTAL_BILLS] intValue];
           
            if(isFileDownload){
                NSString * fileUrlStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:FILE_URL] defaultReturn:@""];
                if(fileUrlStr.length){
                    
                    isSaveTheList = [self DownLoadFileAndInsertItInLoadDB:fileUrlStr dataType:MEMBER_SHIP_USERS];
                    totalAvailSkuRecords = 0;
                }
            }
            else{
              
                isSaveTheList = [self saveMemberShipUsersDetails:[successDictionary valueForKey:MEMBER_SHIPS_DETAILS]];
                membersStartIndex = membersStartIndex + DOWNLOAD_RATE;
            }
            
            
            if(totalMembersRecordsCount > membersStartIndex){
                isSaveTheList = [self callGetCustomerList:membersStartIndex];
            }
        }
    } @catch (NSException *exception) {
        isSaveTheList = false;
    } @finally {
        return isSaveTheList;
    }
}

-(BOOL)getAllMemberShipUsersErrorResponseAndReturnSaveStatus:(NSString *)errorResponse{
    BOOL isSaveTheList = false;
    
    @try {
        
        if ([errorResponse caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            isSaveTheList =  TRUE;
        }
    } @catch (NSException *exception) {
        isSaveTheList = false;
    } @finally {
        return isSaveTheList;
    }
}

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         16/11/2018
 * @method       saveMemberShipUsersDetails:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveMemberShipUsersDetails:(NSArray *)MembersDetailsArray{
    
    NSDate * today = [NSDate date];
    NSDateFormatter * f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString *currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- MembersShipUsers ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char * errMsg;
            
            const char * createSkuMasterSqlStatement  = "CREATE TABLE `membership_users` (  `member_ship_id` VARCHAR(50) NOT NULL,  `phone_num` VARCHAR(15) NULL DEFAULT NULL,  `email_id` VARCHAR(50) NULL DEFAULT NULL,  `name` VARCHAR(50) NULL DEFAULT NULL,  `customer_category` VARCHAR(50) NULL DEFAULT NULL,  `status` TINYINT(4) NULL DEFAULT '0',  `start_date` DATE NULL DEFAULT NULL,  `end_date` DATE NULL DEFAULT NULL,  `created_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,  PRIMARY KEY (`member_ship_id`))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MembersShipUsers TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `membership_users` (`member_ship_id`, `phone_num`, `email_id`, `name`, `customer_category`, `status`, `start_date`, `end_date`, `created_date`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in MembersDetailsArray) {
                    
                    if ([temp.allKeys containsObject:MEMBER_SHIP_ID] && ![[temp valueForKey:MEMBER_SHIP_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:MEMBER_SHIP_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:Phone_Num] && ![[temp valueForKey:Phone_Num] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:Phone_Num] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:EMAIL_ID] && ![[temp valueForKey:EMAIL_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 3, [[temp valueForKey:EMAIL_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kFirstName] && ![[temp valueForKey:kFirstName] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4, [[temp valueForKey:kFirstName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:Customer_Category] && ![[temp valueForKey:Customer_Category] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5, [[temp valueForKey:Customer_Category] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:STATUS] && ![[temp valueForKey:STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 6, [[temp valueForKey:STATUS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 6, 0);
                    }
                    
                    if ([temp.allKeys containsObject:start_date] && ![[temp valueForKey:start_date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7, [[temp valueForKey:start_date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:end_date] && ![[temp valueForKey:end_date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8, [[temp valueForKey:end_date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_DATE] && ![[temp valueForKey:CREATED_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9, [[temp valueForKey:CREATED_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        NSLog(@"customers becomes false in due to error in inserting into database");
                    }
                    else {
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- MembersShipUsers ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- MembersShipUsers ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- MembersShipUsers----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

-(BOOL)saveMemberShipUsersDetailsFromCSVFile:(NSArray *)skuItemList {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- MembersShipUsers ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char * errMsg;
            
            const char * createSkuMasterSqlStatement  = "CREATE TABLE `membership_users` (  `member_ship_id` VARCHAR(50) NOT NULL,  `phone_num` VARCHAR(15) NULL DEFAULT NULL,  `email_id` VARCHAR(50) NULL DEFAULT NULL,  `name` VARCHAR(50) NULL DEFAULT NULL,  `customer_category` VARCHAR(50) NULL DEFAULT NULL,  `status` TINYINT(4) NULL DEFAULT '0',  `start_date` DATE NULL DEFAULT NULL,  `end_date` DATE NULL DEFAULT NULL,  `created_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,  PRIMARY KEY (`member_ship_id`))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MembersShipUsers TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `membership_users` (`member_ship_id`, `phone_num`, `email_id`, `name`, `customer_category`, `status`, `start_date`, `end_date`, `created_date`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                
                for ( NSString * itemListStr in skuItemList) {
                    
                    
                    NSArray * itemList = [itemListStr componentsSeparatedByString:@","];
                    
                    if([itemList count] >= 72){
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_int(localInsertStmt, 6, [[self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:5] defaultReturn:@""] intValue]);

                        sqlite3_bind_text(localInsertStmt, 7, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:6] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 8, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:7] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 9, [self checkGivenValueFromFileIsNullOrNil:[itemList objectAtIndex:8] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                       
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"sku becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- MembersShipUsers ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- MembersShipUsers ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- MembersShipUsers----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}


#pragma mark start gift_coupons related downloading and retriving methods....


-(void)getAllGiftCouponDetails:(int)startIndex{
    
    Boolean service_Call_Save_Status = false;
    
    @try {
        if(startIndex == 0)
            membersStartIndex = 0;
        
        NSMutableDictionary * menuDeatilsRequestDic = [[NSMutableDictionary alloc]init];
        
        [menuDeatilsRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_NAME];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_LOCATION];
        [menuDeatilsRequestDic setValue:NEGATIVE_ONE forKey:START_INDEX];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithInt:DOWNLOAD_RATE] forKey:MAX_RECORDS];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithBool:isFileDownload] forKey:FILE_REQUIRED];
        
        NSArray * tempLocArr = [NSArray arrayWithObjects:presentLocation, nil];
        [menuDeatilsRequestDic setValue:tempLocArr forKey:LOCATIONS];
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.giftCouponServicesDelegate = self;
        service_Call_Save_Status = [serviceController getAllGiftCouponsMasterThroughSynchronousRequest:customerPurchasesRequestString];
    } @catch (NSException *exception) {
        
    } @finally {
        
        //        return service_Call_Save_Status;
    }
}
#pragma -mark methods used for downloading the taxes

/**
 * @description  In this method we are calling the web service with startIndex inorder to get product_subcategory_master data....
 * @date         Srinivasulu
 * @method       getStoreTaxationDetails
 * @author
 * @param
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....  ---- it is not in used currently soapService are working......
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getStoreTaxationDetails{
    BOOL status = false;
    
    @try {
        
        NSArray *keys = @[REQUEST_HEADER,START_INDEX,STORE_LOCATION,LOCATION];
        NSArray *objects = @[[RequestHeader getRequestHeader],@"-1",presentLocation,presentLocation];
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController *controll = [[WebServiceController alloc] init];
        controll.storeTaxationDelegate = self;
        status = [controll getStoreTaxesInDetail:salesReportJsonString];
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
    
}

/**
 * @description  In this method we are calling the web service with startIndex inorder to get product_subcategory_master data....
 * @date         Srinivasulu
 * @method       getStoreTaxationDetailsThroughtSoapServices
 * @author
 * @param
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....  ---- pagnation service calls has to be implement....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getStoreTaxationDetailsThroughtSoapServices {
    BOOL status = false;
    
    @try {
        
        NSArray *keys = @[REQUEST_HEADER,START_INDEX,STORE_LOCATION,LOCATION];
        NSArray *objects = @[[RequestHeader getRequestHeader], @"-1", presentLocation, presentLocation];
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController *controll = [[WebServiceController alloc] init];
        controll.storeTaxationDelegate = self;
        status = [controll getStoreTaxesInDetailThroughSoapServiceCall:salesReportJsonString];
        
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
    
}

/**
 * @description  In this method we are handling the success response received from services....
 * @date
 * @method       getStoreTaxesInDetailSuccessResponse:--
 * @author
 * @param        NSDictionaty
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added the exception handling and changing returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getStoreTaxesInDetailSuccessResponse:(NSDictionary *)successDictionary{
    BOOL status = false;
    
    @try {
        
        NSMutableArray * taxArr = [NSMutableArray new];
        NSMutableArray * saleRangesArr = [NSMutableArray new];
        
        for( NSDictionary * dic in [successDictionary valueForKey:STORE_TAXATION_LIST]){
            
            [taxArr addObject:dic];
            
            for( NSDictionary * saleRangesDic in [dic valueForKey:SALE_RANGES_LIST]){
                
                [saleRangesArr addObject:saleRangesDic];
            }
        }
        
        if(taxArr.count && saleRangesArr.count){
            if( [self saveStoreTaxesDetails:taxArr] && [self saveTaxSaleRangesInDetails:saleRangesArr])
                status = true;
            else
                status = false;
        }
        else if(taxArr.count)
            status = [self saveStoreTaxesDetails:taxArr];
        else if(saleRangesArr.count)
            status = [self saveTaxSaleRangesInDetails:saleRangesArr];
        
    } @catch (NSException *exception) {
        status = false;
        
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from service....
 * @date
 * @method       getStoreTaxesInDeatailErrorResponse:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getStoreTaxesInDeatailErrorResponse:(NSString *)errorResponse{
    BOOL isSaved = false;
    
    @try {
        
        if ([errorResponse caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame ) {
            
            isSaved = TRUE;
        }
        else  if ([errorResponse isEqualToString:@"No Records Found "] || [errorResponse caseInsensitiveCompare:@"No Records Found "] == NSOrderedSame ) {
            
            isSaved = TRUE;
        }
    } @catch (NSException *exception) {
        
        isSaved = false;
    } @finally {
        
        return isSaved;
    }
    
}

/**
 * @description  In this method we are save products related informating in store_taxation....
 * @date
 * @method       saveStoreTaxesDetails:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveStoreTaxesDetails:(NSArray *)taxArr {
    BOOL isSaved = FALSE;
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localdelectStmt = nil;
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            
            const char * sqlStatement = "create table if not exists store_taxation ( tax_code CHAR(30) NOT NULL, location VARCHAR(45) NULL DEFAULT NULL, tax_category_name VARCHAR(100) NULL DEFAULT NULL, tax_type VARCHAR(45) NULL DEFAULT NULL, tax_name VARCHAR(45) NULL DEFAULT NULL, tax_rate FLOAT NULL DEFAULT NULL, remarks VARCHAR(200) NULL DEFAULT NULL, updated_date DATETIME NULL DEFAULT NULL, effective_from DATETIME NULL DEFAULT NULL, tax_description VARCHAR(200) NULL DEFAULT NULL, user_name VARCHAR(45) NULL DEFAULT NULL, role_name VARCHAR(45) NULL DEFAULT NULL, status VARCHAR(50) NULL DEFAULT NULL, PRIMARY KEY (tax_code) )";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- STORE_TAXATION Table Created Sucessfully ----");
            }
            
            const char * sqlDeleteStatement = "delete from store_taxation";
            
            if(sqlite3_prepare_v2(localDatabase, sqlDeleteStatement, -1, &localdelectStmt, NULL) == SQLITE_OK) {
                
                if(SQLITE_DONE != sqlite3_step(localdelectStmt))
                    NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(localDatabase));
                
                sqlite3_reset(localdelectStmt);
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "insert into store_taxation( tax_code, location, tax_category_name, tax_type, tax_name, tax_rate, remarks, updated_date, effective_from, tax_description, user_name, role_name, status) Values( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (NSDictionary * locDic in taxArr) {
                    
                    if ([locDic.allKeys containsObject:TAX_CODE] && ![[locDic valueForKey:TAX_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[locDic valueForKey:TAX_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:LOCATION] && ![[locDic valueForKey:LOCATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 2,  [[locDic valueForKey:LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:TAX_CATEGORY_NAME] && ![[locDic valueForKey:TAX_CATEGORY_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 3, [[locDic valueForKey:TAX_CATEGORY_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:TAX_TYPE] && ![[locDic valueForKey:TAX_TYPE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4, [[locDic valueForKey:TAX_TYPE]  UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:TAX_NAME] && ![[locDic valueForKey:TAX_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5, [[locDic valueForKey:TAX_NAME]  UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:TAX_RATE] && ![[locDic valueForKey:TAX_RATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 6,[[locDic valueForKey:TAX_RATE] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 6,0.00);
                    }
                    
                    if ([locDic.allKeys containsObject:REMARKS] && ![[locDic valueForKey:REMARKS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7, [[locDic valueForKey:REMARKS]  UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:LAST_SKU_PRICE_UPDATED_DATE] && ![[locDic valueForKey:LAST_SKU_PRICE_UPDATED_DATE] isKindOfClass:[NSNull class]]) {
                        
                        sqlite3_bind_text(localInsertStmt, 8, [[locDic valueForKey:LAST_SKU_PRICE_UPDATED_DATE]  UTF8String], -1, SQLITE_TRANSIENT);
                        
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:EFFECTIVE_FROM] && ![[locDic valueForKey:EFFECTIVE_FROM] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9, [[locDic valueForKey:EFFECTIVE_FROM]  UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ( [locDic.allKeys containsObject:TAX_DESCRIPTION] && ![[locDic valueForKey:TAX_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 10, [[locDic valueForKey:TAX_DESCRIPTION]  UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:USER_NAME] && ![[locDic valueForKey:@"USER_NAME"] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 11, [[locDic valueForKey:USER_NAME]  UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:ROLE_NAME] && ![[locDic valueForKey:ROLE_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 12, [[locDic valueForKey:ROLE_NAME]  UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 12, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([locDic.allKeys containsObject:STATUS] && ![[locDic valueForKey:STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 13, [[locDic valueForKey:STATUS]  UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 13, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isSaved = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                        //                        isSaved = TRUE;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                isSaved = TRUE;
                NSLog(@"----Committed -- STORE_TAXATION ----");
            }
            else
            {
                isSaved = FALSE;
                NSLog(@"----Commit -- Failed -- STORE_TAXATION ----");
            }
            sqlite3_finalize(localInsertStmt);
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        
    }
    @finally {
        
        localdelectStmt = nil;
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isSaved;
    }
}

/**
 * @description  In this method we are save products related informating in tax_sale_ranges....
 * @date
 * @method       saveTaxSaleRangesInDetails:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveTaxSaleRangesInDetails:(NSArray *)taxArr {
    BOOL isSaved = FALSE;
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localdelectStmt = nil;
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char *errMsg;
            
            const char * sqlStatement = "CREATE TABLE if not exists tax_sale_ranges ( sno INT(11) NOT NULL, tax_code CHAR(30) NOT NULL, sale_value_from DECIMAL(10,2) NOT NULL DEFAULT '0.00', sale_value_to DECIMAL(10,2) NOT NULL DEFAULT '0.00', tax_rate FLOAT NOT NULL DEFAULT '0', PRIMARY KEY (`sno`) )";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- TAX_SALE_RANGES Table Created Sucessfully ----");
            }
            
            const char * sqlDeleteStatement = "delete from tax_sale_ranges";
            
            if(sqlite3_prepare_v2(localDatabase, sqlDeleteStatement, -1, &localdelectStmt, NULL) == SQLITE_OK) {
                
                if(SQLITE_DONE != sqlite3_step(localdelectStmt))
                    NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(localDatabase));
                
                sqlite3_reset(localdelectStmt);
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "insert into tax_sale_ranges( sno, tax_code, sale_value_from, sale_value_to, tax_rate) Values( ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                int i = 0;
                for (NSDictionary * dic in taxArr) {
                    
                    sqlite3_bind_text(localInsertStmt, 1, [NSString stringWithFormat:@"%i",i].UTF8String, -1, SQLITE_TRANSIENT);
                    i = i + 1;
                    
                    if ([dic.allKeys containsObject:TAX_CODE] && ![[dic valueForKey:TAX_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 2,  [[dic valueForKey:TAX_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_VALUE_FROM] && ![[dic valueForKey:SALE_VALUE_FROM] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 3, [[dic valueForKey:SALE_VALUE_FROM] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 3, 0.00);
                    }
                    
                    if ([dic.allKeys containsObject:SALE_VALUE_TO] && ![[dic valueForKey:SALE_VALUE_TO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 4, [[dic valueForKey:SALE_VALUE_TO] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 4, 0.00);
                    }
                    
                    if ([dic.allKeys containsObject:TAX_RATE] && ![[dic valueForKey:TAX_RATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 5, [[dic valueForKey:TAX_RATE] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 5, 0.00);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        isSaved = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                        isSaved = TRUE;
                    }
                    sqlite3_reset(localInsertStmt);
                }
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                isSaved = TRUE;
                NSLog(@"----Committed -- TAX_SALE_RANGES ----");
            }
            else
            {
                isSaved = FALSE;
                NSLog(@"----Commit -- failed -- TAX_SALE_RANGES ----");
            }
            sqlite3_finalize(localInsertStmt);
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
    }
    @finally {
        
        localdelectStmt = nil;
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isSaved;
    }
}

#pragma -mark methods used for downloading the taxes

/**
 * @description  In this method we are calling the web service with startIndex inorder to get employee_master data....
 * @date
 * @method       getEmployeeDetails:--  totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getEmployeeDetails:(int)startIndex totalRecords:(int)totalRecords {
    BOOL status = false;
    
    @try {
        
        NSArray *keys = @[REQUEST_HEADER,START_INDEX,LOCATION,kMaxRecords,kStartDate];
        
        NSArray * objects = @[[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,[NSString stringWithFormat:@"%d",totalRecords],@""];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        //        NSLog(@"%@",[defaults valueForKey:LAST_EMPL_UPDATED_DATE]);
        [defaults setValue:@"" forKey:LAST_EMPL_UPDATED_DATE];
        if ([[defaults valueForKey:LAST_EMPL_UPDATED_DATE] length]){
            
            objects = @[[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],presentLocation,[NSString stringWithFormat:@"%d",totalRecords],[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_EMPL_UPDATED_DATE]]];
        }
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController *controll = [[WebServiceController alloc] init];
        controll.employeeServiceDelegate = self;
        status = [controll getEmployeeMaster:salesReportJsonString];
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from services....
 * @date
 * @method       getEmployeeDetailsSucessResponse:--
 * @author
 * @param        NSDictionaty
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added the exception handling and changing returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getEmployeeDetailsSucessResponse:(NSDictionary *)success {
    BOOL status = false;
    
    @try {
        
        totalAvailEmployees = [[success valueForKey:TOTAL_SKUS] intValue];
        
        NSArray * employeeList = [success valueForKey:kEmplyeesList];
        status =  [self saveEmployeeDetails:employeeList];
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from service....
 * @date
 * @method       getEmployeeErrorResponse:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added the exception handling && chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getEmployeeErrorResponse:(NSString *)failure {
    BOOL status = false;
    
    @try {
        if ([failure isEqualToString:NO_RECORDS_FOUND]) {
            
            status = TRUE;
        }
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are save products related informating in employee_master and saving images in appData....
 * @date
 * @method       saveEmployeeDetails:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveEmployeeDetails:(NSArray *)employeeList {
    BOOL status = FALSE;
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            
            const char *sqlStatement  = "create table if not exists employee_master(employee_code VARCHAR(50) NOT NULL,first_name VARCHAR(100) NOT NULL,last_name VARCHAR(100) NOT NULL,middle_name VARCHAR(100) NULL DEFAULT NULL,date_of_joining TEXT NOT NULL,designation VARCHAR(100) NOT NULL,location VARCHAR(100) NOT NULL,date_of_birth TEXT NOT NULL,department VARCHAR(50) NOT NULL,reporting_manager VARCHAR(50) NULL DEFAULT NULL, service_type VARCHAR(50) NOT NULL,highest_qualification VARCHAR(50) NOT NULL,years_of_experience FLOAT NOT NULL,remarks VARCHAR(200) NULL DEFAULT NULL,shift_id INT(50) NULL DEFAULT NULL,email_id VARCHAR(150) NULL DEFAULT NULL,created_date TEXT NULL DEFAULT NULL,updated_date TEXT NULL DEFAULT NULL,user_name CHAR(80) NULL DEFAULT NULL,role_name CHAR(80) NULL DEFAULT NULL,PRIMARY KEY (employee_code))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- EMPLOYEE Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "INSERT OR REPLACE into employee_master(employee_code ,first_name ,last_name  ,middle_name ,date_of_joining ,designation ,location,date_of_birth ,department ,reporting_manager ,service_type ,highest_qualification ,years_of_experience,remarks,shift_id,email_id,created_date,updated_date,user_name,role_name) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (NSDictionary * temp in employeeList) {
                    
                    if ([temp.allKeys containsObject:EMPLOYEE_CODE] && ![[temp valueForKey:EMPLOYEE_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:EMPLOYEE_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:FIRST_NAME] && ![[temp valueForKey:FIRST_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:FIRST_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_LAST_NAME] && ![[temp valueForKey:CUSTOMER_LAST_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 3, [[temp valueForKey:CUSTOMER_LAST_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MIDDLE_NAME] && ![[temp valueForKey:MIDDLE_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4, [[temp valueForKey:MIDDLE_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:DATE_OF_JOININGING_STR] && ![[temp valueForKey:DATE_OF_JOININGING_STR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5, [[temp valueForKey:DATE_OF_JOININGING_STR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_DESIGNATION] && ![[temp valueForKey:CUSTOMER_DESIGNATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6, [[temp valueForKey:CUSTOMER_DESIGNATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:LOCATION] && ![[temp valueForKey:LOCATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7, [[temp valueForKey:LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:BOD_STR] && ![[temp valueForKey:BOD_STR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8, [[temp valueForKey:BOD_STR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kItemDept] && ![[temp valueForKey:kItemDept] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9, [[temp valueForKey:kItemDept] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:REPORTING_MANAGER] && ![[temp valueForKey:REPORTING_MANAGER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 10, [[temp valueForKey:REPORTING_MANAGER] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SERVICE_TYPE] && ![[temp valueForKey:SERVICE_TYPE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 11, [[temp valueForKey:SERVICE_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:HIGHEST_QUALIFICATION] && ![[temp valueForKey:HIGHEST_QUALIFICATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 12, [[temp valueForKey:HIGHEST_QUALIFICATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 12, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:YEAR_OF_EXPERIENCE] && ![[temp valueForKey:YEAR_OF_EXPERIENCE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 13,[[temp valueForKey:YEAR_OF_EXPERIENCE] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 13,0.00);
                    }
                    
                    if ([temp.allKeys containsObject:REMARKS] && ![[temp valueForKey:REMARKS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 14, [[temp valueForKey:REMARKS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SHIFT_ID] && ![[temp valueForKey:SHIFT_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 15, [[temp valueForKey:SHIFT_ID] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 15, 0);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_EMAIL] && ![[temp valueForKey:CUSTOMER_EMAIL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 16, [[temp valueForKey:CUSTOMER_EMAIL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 16, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_Date] && ![[temp valueForKey:CREATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 17, [[temp valueForKey:CREATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 17, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:UPDATED_Date] && ![[temp valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 18, [[temp valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 18, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:USERNAME] && ![[temp valueForKey:USERNAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 19, [[temp valueForKey:USERNAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 19, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kRoleName] && ![[temp valueForKey:kRoleName] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 20, [[temp valueForKey:kRoleName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 20, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                status = TRUE;
                NSLog(@"----Committed -- EMPLOYEE_MASTER ----");
            }
            else
            {
                status = FALSE;
                NSLog(@"----Commit -- Failed -- EMPLOYEE_MASTER ----");
            }
            sqlite3_finalize(localInsertStmt);
            
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return status;
    }
}

#pragma -mark start denomination_master related downloading and retriving methods....

/**
 * @description  In this method we are calling the web service with startIndex inorder to get denomination_master data....
 * @date
 * @method       getDenominationsDetails:--  totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getDenominationsDetails:(int)startIndex totalRecords:(int)totalRecords {
    BOOL status = false;
    
    @try {
        
        NSArray * keys = @[REQUEST_HEADER,START_INDEX,kMaxRecords,kStartDateStr];
        NSArray * objects = @[[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],[NSString stringWithFormat:@"%d",totalRecords],@""];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        //        NSLog(@"%@",[defaults valueForKey:LAST_DENOMINATIONS_UPDATE_DATE]);
        [defaults setValue:@"" forKey:LAST_DENOMINATIONS_UPDATE_DATE];
        
        if (([[defaults valueForKey:LAST_DENOMINATIONS_UPDATE_DATE] length]) || (startIndex != -1)) {
            
            objects = @[[RequestHeader getRequestHeader],[NSString stringWithFormat:@"%d",startIndex],[NSString stringWithFormat:@"%d",totalRecords],[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_DENOMINATIONS_UPDATE_DATE]]];
        }
        
        NSDictionary * dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController *controll = [[WebServiceController alloc] init];
        controll.DenominationDelegate = self;
        status = [controll getdenominations:salesReportJsonString];
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from services....
 * @date
 * @method       getDenominationsSuccessResponse:--
 * @author
 * @param        NSDictionaty
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getDenominationsSuccessResponse:(NSDictionary *)successDictionary {
    BOOL status = false;
    
    @try {
        
        totalAvailDenominations = [[successDictionary valueForKey:@"totalRecords"] intValue];
        
        NSArray *denominationsArr = [successDictionary valueForKey:kDenominations];
        status =  [self saveDenominationsLocally:denominationsArr];
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from service....
 * @date
 * @method       getProductsErrorResponse:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getDenominationsErrorResponse:(NSString *)errorResponse {
    BOOL status = false;
    
    @try {
        if ([errorResponse caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            
            status = TRUE;
        }
    } @catch (NSException *exception) {
        
        status = FALSE;
    } @finally {
        
        return status;
    }
    
}

/**
 * @description  In this method we are save products related informating in denomination_master and saving images in appData....
 * @date
 * @method       saveDenominationsLocally:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local.... added new column curren code on 15/11/2017....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveDenominationsLocally:(NSArray*)denominations {
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL status = FALSE;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            
            const char * sqlStatement  = "create table if not exists denomination_master(den_name CHAR(50) NOT NULL,den_value FLOAT NOT NULL,den_type INT NOT NULL,den_image VARCHAR(100) NULL DEFAULT NULL,description VARCHAR(250),created_date TEXT,updated_date VARCHAR(50),role_name VARCHAR(50) NULL DEFAULT NULL, user_name VARCHAR(50),status int,currency_code text,PRIMARY KEY (den_value,den_type,currency_code))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- DENOMINATIONS Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            
            const char * sqlInsertStatement = "INSERT OR REPLACE into denomination_master(den_name ,den_value ,den_type  ,den_image ,description ,created_date ,updated_date,role_name ,user_name,status,currency_code) Values(?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                
                for (NSDictionary *temp in denominations) {
                    
                    NSString *denomImg = @"";
                    
                    @try {
                        
                        NSString *imageStr = [temp valueForKey:kDenomImage];
                        
                        if (imageStr.length > 0) {
                            
                            imageStr = [imageStr stringByReplacingOccurrencesOfString:@"\\""" withString:@"/"];
                            
                            NSURL * url = [NSURL URLWithString:[imageStr stringByReplacingOccurrencesOfString:@"\\""" withString:@"/"]];
                            
                            NSData * imgData = [NSData dataWithContentsOfURL:url];
                            
                            if (imgData != nil) {
                                
                                NSData * imageData = [NSData dataWithData:UIImagePNGRepresentation([UIImage imageWithData:imgData])];
                                
                                NSArray * paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
                                NSString * documentsDirectory = [paths[0] stringByAppendingString:@"/DenominationImagesFolder"];
                                
                                NSError *error = nil;
                                
                                if (![[NSFileManager defaultManager] fileExistsAtPath:documentsDirectory]) {
                                    [[NSFileManager defaultManager] createDirectoryAtPath:documentsDirectory withIntermediateDirectories:NO attributes:nil error:&error]; //Create folder
                                }
                                NSString *imageName = [imageStr componentsSeparatedByString:@"/"].lastObject;
                                NSString *savedImagePath = [documentsDirectory stringByAppendingPathComponent:imageName];
                                BOOL saveStatus = [imageData writeToFile:savedImagePath atomically:NO];
                                
                                if (saveStatus) {
                                    
                                    denomImg = imageName;
                                }
                            }
                        }
                    }
                    @catch (NSException *exception) {
                        
                    }
                    
                    if ([temp.allKeys containsObject:kDenomName] && ![[temp valueForKey:kDenomName] isKindOfClass:[NSNull class]]) {
                        
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:kDenomName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    sqlite3_bind_double(localInsertStmt, 2, [[temp valueForKey:kDenomValue] floatValue]);
                    sqlite3_bind_int(localInsertStmt, 3, [[temp valueForKey:kDenomType] intValue]);
                    sqlite3_bind_text(localInsertStmt, 4,  denomImg.UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:ITEM_DESCRIPTION] && ![[temp valueForKey:ITEM_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5,  [[temp valueForKey:ITEM_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kStartDateStr] && ![[temp valueForKey:kStartDateStr] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6,  [[temp valueForKey:kStartDateStr] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:UPDATED_DATE_STR] && ![[temp valueForKey:UPDATED_DATE_STR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7,  [[temp valueForKey:UPDATED_DATE_STR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kRoleName] && ![[temp valueForKey:kRoleName] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8,  [[temp valueForKey:kRoleName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kUserName] && ![[temp valueForKey:kUserName] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9,  [[temp valueForKey:kUserName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:DENOMINATION_STATUS] && ![[temp valueForKey:DENOMINATION_STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 10, [[temp valueForKey:DENOMINATION_STATUS] intValue]);
                    }
                    
                    if ([temp.allKeys containsObject:CURRENCY_CODE] && ![[temp valueForKey:CURRENCY_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 11,  [[temp valueForKey:CURRENCY_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        NSLog(@"%s",sqlite3_errmsg(localDatabase));
                        
                        status = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                        status = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                status = TRUE;
                NSLog(@"----Committed -- DENOMINATIONS ----");
            }
            else
            {
                status = FALSE;
                NSLog(@"----Commit -- Failed -- DENOMINATIONS ----");
            }
            sqlite3_finalize(localInsertStmt);
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch (NSException *exception) {
        status = false;
    }
    @finally {
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return status;
    }
}

#pragma -mark Methods used for Product Menu Display..

/**
 * @description  In this method we are calling the services to get the productMenu names details....
 * @date         30/05/2018
 * @method       callMenuDetails
 * @author       Srinivasulu
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)callMenuDetails{
    
    @try {
        
        NSMutableDictionary * menuDeatilsRequestDic = [[NSMutableDictionary alloc]init];
        
        [menuDeatilsRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_NAME];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_LOCATION];
        [menuDeatilsRequestDic setValue:ZERO_CONSTANT forKey:START_INDEX];
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.menuServiceDelegate = self;
        [serviceController getMenuDetailsInfo:customerPurchasesRequestString];
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  In this method we are calling the services to get the productMenu names details....
 * @date         30/05/2018
 * @method       callMenuCategoriesDetailsInfo:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)callMenuCategoriesDetailsInfo:(NSString *)menuNameStr{
    
    @try {
        NSMutableDictionary * menuDeatilsRequestDic = [[NSMutableDictionary alloc]init];
        
        [menuDeatilsRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_NAME];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_LOCATION];
        [menuDeatilsRequestDic setValue:menuNameStr forKey:MENU_NAME];
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.menuServiceDelegate = self;
        [serviceController getMenuCategoryDetailsInfo:customerPurchasesRequestString];
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  In this method we are handling the servcie call response of get the productMenu names details....
 * @date         30/05/2018
 * @method       callMenuCategoriesDetailsInfo:--
 * @author       Srinivasulu
 * @param        NSDictionary
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getMenuDetailsSuccessResponse:(NSDictionary *)successDictionary{
    @try {
        
        NSMutableArray * menuNamesArr = [NSMutableArray new];
        
        for(NSDictionary * dic in [successDictionary valueForKey:MENU_CATEGORIES]){
            
            [menuNamesArr addObject:[dic valueForKey:MENU_NAME]];
        }
        
        if([[successDictionary valueForKey:MENU_CATEGORIES] count]){
            [self saveProductMenu:[successDictionary valueForKey:MENU_CATEGORIES]];
            if(menuNamesArr.count)
                [self callMenuCategoriesDetailsInfo:menuNamesArr[0]];
        }
        //        [self saveProductMenu:successDictionary];
    } @catch (NSException *exception) {
    } @finally {
        
    }
}

/**
 * @description  In this method we are handling the servcie call error response of get the productMenu names details....
 * @date         30/05/2018
 * @method       getMenuDeatilsErrorResponse:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getMenuDeatilsErrorResponse:(NSString *)errorResponse{
    @try {
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  In this method we are handling the servcie call success response of get the menuCategory details....
 * @date         30/05/2018
 * @method       getMenuCategoryDetailsSuccessResponse:--
 * @author       Srinivasulu
 * @param        NSDictionary
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getMenuCategoryDetailsSuccessResponse:(NSDictionary *)successDictionary{
    @try {
        
        [self saveProductCategoryMenu:[successDictionary valueForKey:MENU_CATEGORY_DETAILS]];
        [self saveProductMenuCategoryItems:[successDictionary valueForKey:MENU_CATEGORY_DETAILS]];
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  In this method we are handling the servcie call error response of get the productMenu names details....
 * @date         30/05/2018
 * @method       getMenuDeatilsErrorResponse:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getMenuCategoryDeatilsErrorResponse:(NSString *)errorResponse{
    @try {
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  In this method we are saving.
 * @date         30/05/2018
 * @method       saveProductMenu:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)saveProductMenu:(NSArray *)menuDeatailsArr{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            
            const char * sqlStatement  = "CREATE TABLE IF NOT EXISTS menu (menu_name varchar(200) NOT NULL, outlet_name varchar(50) NOT NULL, menu_desc varchar(30) DEFAULT NULL, user_name char(50) DEFAULT NULL, role_name char(50) DEFAULT NULL, created_date datetime NOT NULL, updated_date datetime NOT NULL, menu_status tinyint(4) NOT NULL, remarks varchar(100) DEFAULT NULL, PRIMARY KEY (menu_name,outlet_name))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- MENU Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "INSERT OR REPLACE into menu( menu_name, outlet_name, menu_desc, user_name, role_name, created_date, updated_date, menu_status, remarks) Values(?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (int i=0; i<menuDeatailsArr.count; i++) {
                    
                    NSDictionary * tempDic = menuDeatailsArr[i] ;
                    
                    if ([tempDic.allKeys containsObject:MENU_NAME] && ![[tempDic valueForKey:MENU_NAME] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 1, [[tempDic valueForKey:MENU_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt,1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:OUTLET_NAME] && ![[tempDic valueForKey:OUTLET_NAME] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 2, [[tempDic valueForKey:OUTLET_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:MENU_DESC] && ![[tempDic valueForKey:MENU_DESC] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 3, [[tempDic valueForKey:MENU_DESC] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:USER_NAME] && ![[tempDic valueForKey:USER_NAME] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 4, [[tempDic valueForKey:USER_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:ROLE_NAME] && ![[tempDic valueForKey:ROLE_NAME] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 5, [[tempDic valueForKey:ROLE_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:CREATED_ON] && ![[tempDic valueForKey:CREATED_ON] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 6, [[tempDic valueForKey:CREATED_ON] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt,6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:LAST_SKU_PRICE_UPDATED_DATE] && ![[tempDic valueForKey:LAST_SKU_PRICE_UPDATED_DATE] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 7, [[tempDic valueForKey:LAST_SKU_PRICE_UPDATED_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt,7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:MENU_STATUS] && ![[tempDic valueForKey:MENU_STATUS] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_int(localInsertStmt, 8, [[tempDic valueForKey:MENU_STATUS] intValue]);
                    }
                    else{
                        sqlite3_bind_int(localInsertStmt, 8, 0);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                    }
                    sqlite3_reset(localInsertStmt);
                    break;
                }
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                NSLog(@"----Committed -- MENU ----");
            }
            else
            {
                NSLog(@"----Commit -- Failed -- MENU ----");
            }
            sqlite3_finalize(localInsertStmt);
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    } @catch (NSException *exception) {
        
    } @finally {
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
    }
}

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         30/05/2018
 * @method       saveProductCategoryMenu:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)saveProductCategoryMenu:(NSArray *)menuDeatailsArr{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char *errMsg;
            
            const char * sqlStatement  = "CREATE TABLE IF NOT EXISTS menu_categories ( s_no varchar(50) NOT NULL, menu_name varchar(200) NOT NULL, status varchar(50) DEFAULT NULL, created_on datetime DEFAULT NULL, updated_on datetime NOT NULL, category_name varchar(200) DEFAULT NULL, category_desc varchar(200) DEFAULT NULL, category_icon varchar(150) DEFAULT NULL, outlet_name varchar(50) DEFAULT NULL, remarks varchar(400) DEFAULT NULL, priority int(11) DEFAULT NULL, PRIMARY KEY (`s_no`))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MENU_CATEGORY Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "INSERT OR REPLACE into menu_categories( s_no, menu_name, status, created_on, updated_on, category_name, category_desc, category_icon, outlet_name,remarks,priority) Values(?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (int i=0; i<menuDeatailsArr.count; i++) {
                    
                    NSDictionary * tempDic = menuDeatailsArr[i] ;
                    
                    sqlite3_bind_int(localInsertStmt, 1, i + 1);
                    
                    
                    if ([tempDic.allKeys containsObject:MENU_NAME] && ![[tempDic valueForKey:MENU_NAME] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 2, [[tempDic valueForKey:MENU_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt,2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:MENU_STATUS] && ![[tempDic valueForKey:MENU_STATUS] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_int(localInsertStmt, 3, [[tempDic valueForKey:MENU_STATUS] intValue]);
                    }
                    else{
                        sqlite3_bind_int(localInsertStmt, 3, 0);
                    }
                    
                    if ([tempDic.allKeys containsObject:CREATED_ON] && ![[tempDic valueForKey:CREATED_ON] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 4, [[tempDic valueForKey:CREATED_ON] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:UPDATED_ON] && ![[tempDic valueForKey:UPDATED_ON] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 5, [[tempDic valueForKey:UPDATED_ON] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:CATEGORY_NAME] && ![[tempDic valueForKey:CATEGORY_NAME] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 6, [[tempDic valueForKey:CATEGORY_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:CATEGORY_DESC] && ![[tempDic valueForKey:CATEGORY_DESC] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 7, [[tempDic valueForKey:CATEGORY_DESC] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt,7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:CATEGORY_ICON] && ![[tempDic valueForKey:CATEGORY_ICON] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 8, [[tempDic valueForKey:CATEGORY_ICON] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt,8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:OUTLET_NAME] && ![[tempDic valueForKey:OUTLET_NAME] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 9, [[tempDic valueForKey:OUTLET_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt,9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:REMARKS] && ![[tempDic valueForKey:REMARKS] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 10, [[tempDic valueForKey:REMARKS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:PRIORITY] && ![[tempDic valueForKey:PRIORITY] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_int(localInsertStmt, 11, [[tempDic valueForKey:PRIORITY] intValue]);
                    }
                    else{
                        sqlite3_bind_int(localInsertStmt, 11, 0);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                    }
                    sqlite3_reset(localInsertStmt);
                }
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                NSLog(@"----Committed -- MENU_CATEGORIES ----");
            }
            else
            {
                NSLog(@"----Commit -- Failed -- MENU_CATEGORIES ----");
            }
            sqlite3_finalize(localInsertStmt);
            
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
    }
}

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         30/05/2018
 * @method       saveProductMenuCategoryItems:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)saveProductMenuCategoryItems:(NSArray *)menuDeatailsArr{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt =nil;
    static sqlite3_stmt * localInsertStmt =nil;
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            
            const char * sqlStatement  = "CREATE TABLE IF NOT EXISTS menu_items ( s_no varchar(50) NOT NULL, menu_name varchar(200) NOT NULL, outlet_name varchar(45) NOT NULL, category_name varchar(200) NOT NULL, item_name varchar(200) NOT NULL, pluCode varchar(50) DEFAULT NULL, item_desc varchar(400) NOT NULL, item_type varchar(45) NOT NULL, unit_of_measurement varchar(45) NOT NULL, created_date datetime DEFAULT NULL, updated_date datetime DEFAULT NULL, unit_price float NOT NULL, item_availability TINYINT(4) NULL DEFAULT NULL, item_icon varchar(150) DEFAULT NULL, item_picture1 varchar(150) DEFAULT NULL, item_picture2 varchar(150) DEFAULT NULL, quantity float DEFAULT NULL, PRIMARY KEY (menu_name,outlet_name,category_name,item_name))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- MENU_ITEMS Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "INSERT OR REPLACE into menu_items( s_no, menu_name, outlet_name, category_name, item_name, pluCode, item_desc, item_type,  unit_of_measurement, created_date, updated_date, unit_price, item_availability, item_icon, item_picture1,item_picture2,quantity) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                int snoCount = 0;
                for (int i=0; i<menuDeatailsArr.count; i++) {
                    NSDictionary * categoryDetailsDic = menuDeatailsArr[i] ;
                    
                    int j=0;
                    for (j=0; j<[[categoryDetailsDic valueForKey:MENU_ITEMS_LIST] count]; j++) {
                        NSDictionary * tempDic = [categoryDetailsDic valueForKey:MENU_ITEMS_LIST][j] ;
                        
                        sqlite3_bind_int(localInsertStmt, 1, j + 1 + snoCount);
                        
                        
                        if ([tempDic.allKeys containsObject:MENU_NAME] && ![[tempDic valueForKey:MENU_NAME] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 2, [[tempDic valueForKey:MENU_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt,2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:OUTLET_NAME] && ![[tempDic valueForKey:OUTLET_NAME] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 3, [[tempDic valueForKey:OUTLET_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt,3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:CATEGORY_NAME] && ![[tempDic valueForKey:CATEGORY_NAME] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 4, [[tempDic valueForKey:CATEGORY_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:ITEM_NAME] && ![[tempDic valueForKey:ITEM_NAME] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 5, [[tempDic valueForKey:ITEM_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:PLU_CODE] && ![[tempDic valueForKey:PLU_CODE] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 6, [[tempDic valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:ITEM__DESC] && ![[tempDic valueForKey:ITEM__DESC] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 7, [[tempDic valueForKey:ITEM__DESC] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt,7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:ITEM_TYPE] && ![[tempDic valueForKey:ITEM_TYPE] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 8, [[tempDic valueForKey:ITEM_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt,8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:UNIT_OF_MEASUREMENT] && ![[tempDic valueForKey:UNIT_OF_MEASUREMENT] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 9, [[tempDic valueForKey:UNIT_OF_MEASUREMENT] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt,9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:CREATED_ON] && ![[tempDic valueForKey:CREATED_ON] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 10, [[tempDic valueForKey:CREATED_ON] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:UPDATED_ON] && ![[tempDic valueForKey:UPDATED_ON] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_int(localInsertStmt, 11, [[tempDic valueForKey:UPDATED_ON] intValue]);
                        }
                        else{
                            sqlite3_bind_int(localInsertStmt, 11, 0);
                        }
                        
                        if ([tempDic.allKeys containsObject:UNIT_PRICE] && ![[tempDic valueForKey:UNIT_PRICE] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_double(localInsertStmt, 12, [[tempDic valueForKey:UNIT_PRICE] floatValue]);
                        }
                        else{
                            sqlite3_bind_double(localInsertStmt, 12, 0);
                        }
                        
                        if ([tempDic.allKeys containsObject:ITEM_AVAILABILITY] && ![[tempDic valueForKey:ITEM_AVAILABILITY] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_int(localInsertStmt, 13, [[tempDic valueForKey:ITEM_AVAILABILITY] intValue]);
                        }
                        else {
                            sqlite3_bind_int(localInsertStmt, 13, 0);
                        }
                        
                        if ([tempDic.allKeys containsObject:ITEM_ICON] && ![[tempDic valueForKey:ITEM_ICON] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 14, [[tempDic valueForKey:ITEM_ICON] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:ITEM_PICTURE_1] && ![[tempDic valueForKey:ITEM_PICTURE_1] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 15, [[tempDic valueForKey:ITEM_PICTURE_1] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:ITEM_PICTURE_2] && ![[tempDic valueForKey:ITEM_PICTURE_2] isKindOfClass:[NSNull class]])
                        {
                            sqlite3_bind_text(localInsertStmt, 16, [[tempDic valueForKey:ITEM_PICTURE_2] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt, 16, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([tempDic.allKeys containsObject:QUANTITY] && ![[tempDic valueForKey:QUANTITY] isKindOfClass:[NSNull class]])
                        {
                            
                            sqlite3_bind_double(localInsertStmt, 17, [[tempDic valueForKey:QUANTITY] floatValue]);
                        }
                        else{
                            sqlite3_bind_double(localInsertStmt, 17, 0.00);
                        }
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        }
                        else {
                        }
                        sqlite3_reset(localInsertStmt);
                    }
                    snoCount = snoCount + j - 1;
                    
                }
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                NSLog(@"----Committed -- MENU_CATEGORY_ITEMS ----");
            }
            else
            {
                NSLog(@"----Commit -- Failed -- MENU_CATEGORY_ITEMS ----");
            }
            sqlite3_finalize(localInsertStmt);
            
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    } @catch (NSException *exception) {
        
    } @finally {
        localSelectStmt = nil;
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
    }
}

#pragma -mark Methods used for handling the all members of the store..

/**
 * @description  In this method we are calling the services to get the members details present in online....
 * @date         10/09/2018
 * @method       callGetMemberDetails:--
 * @author       Srinivasulu
 * @param
 * @param        int
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)callGetMemberDetails:(int)startIndex{
    
    Boolean service_Call_Save_Status = false;
    
    @try {
        if(startIndex == 0)
            membersStartIndex = 0;
        
        NSMutableDictionary * menuDeatilsRequestDic = [[NSMutableDictionary alloc]init];
        
        [menuDeatilsRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_NAME];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_LOCATION];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithInt:startIndex] forKey:START_INDEX];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithInt:DOWNLOAD_RATE] forKey:MAX_RECORDS];
        
        NSArray * tempLocArr = [NSArray arrayWithObjects:presentLocation, nil];
        
        [menuDeatilsRequestDic setValue:tempLocArr forKey:LOCATIONS];
        
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.memberServiceDelegate = self;
        service_Call_Save_Status = [serviceController getAllMembersDetailsThroughSynchronousRequest:customerPurchasesRequestString];
    } @catch (NSException *exception) {
        
    } @finally {
        
        return service_Call_Save_Status;
    }
}

/**
 * @description  In this method we are handling the servcie call sucess response of get the getMembers details....
 * @date         10/09/2018
 * @method       getAllMembersDetailsSuccessResponseAndReturnSaveStatus:--
 * @author       Srinivasulu
 * @param        NSDictionary
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)getAllMembersDetailsSuccessResponseAndReturnSaveStatus:(NSDictionary *)successDictionary{
    BOOL isSaveTheList = false;
    
    @try {
        
        if([[successDictionary allKeys] containsObject:MEMBERS] && ! [[successDictionary valueForKey:MEMBERS] isKindOfClass:[NSNull class]]){
            
            totalMembersRecordsCount = [[successDictionary valueForKey:TOTAL_BILLS] intValue];
            isSaveTheList = [self saveMembersDetails:[successDictionary valueForKey:MEMBERS]];
            
            if([[successDictionary allKeys] containsObject:MEMBER_ROLES] && ! [[successDictionary valueForKey:MEMBER_ROLES] isKindOfClass:[NSNull class]])
                isSaveTheList = [self saveMemberRoles:[successDictionary valueForKey:MEMBER_ROLES]];
            
            membersStartIndex = membersStartIndex + DOWNLOAD_RATE;
            
            if(totalMembersRecordsCount > membersStartIndex){
                isSaveTheList = [self callGetCustomerList:membersStartIndex];
            }
            else{
                
                for(NSString * roleNameStr in [self getCompleteRolesListBasedOnEmailId:@""])
                    isSaveTheList =  [self callGetRolesDetails:0 roleName:roleNameStr];
            }
        }
        //        [self decode];
    } @catch (NSException *exception) {
        isSaveTheList = false;
    } @finally {
        return isSaveTheList;
    }
}

/**
 * @description  In this method we are handling the servcie call error response of get the getMembers names details....
 * @date         10/09/2018
 * @method       getAllMembersDetailsErrorResponseAndReturnSaveStatus:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)getAllMembersDetailsErrorResponseAndReturnSaveStatus:(NSString *)errorResponse{
    BOOL isSaveTheList = false;
    
    @try {
        
        if ([errorResponse caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            isSaveTheList =  TRUE;
        }
    } @catch (NSException *exception) {
        isSaveTheList = false;
    } @finally {
        return isSaveTheList;
    }
}

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         11/09/2018
 * @method       saveMembersDetails:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveMembersDetails:(NSArray *)MembersDetailsArray{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- MembersDetail ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "CREATE TABLE  IF NOT EXISTS  `member_details` (  `email` VARCHAR(150) NOT NULL,  `user_id` CHAR(25) NULL DEFAULT NULL,  `password` CHAR(25) NULL DEFAULT NULL,  `role` VARCHAR(100) NOT NULL,  `first_name` CHAR(30) NULL DEFAULT NULL,  `last_name` CHAR(25) NULL DEFAULT NULL,  `account_status` CHAR(10) NULL DEFAULT NULL,  `contact_office` CHAR(20) NULL DEFAULT NULL,  `contact_personnel` CHAR(20) NULL DEFAULT NULL,  `work_location` VARCHAR(50) NULL DEFAULT NULL,  `flag` INT(2) NULL DEFAULT NULL,  `otp_code` CHAR(10) NULL DEFAULT NULL,  `otp_date` DATETIME NULL DEFAULT NULL,  `otp_url` VARCHAR(300) NULL DEFAULT NULL,  `user_type` CHAR(50) NULL DEFAULT NULL,  `customer_id` CHAR(20) NULL DEFAULT NULL,  `employee_id` VARCHAR(300) NULL DEFAULT NULL,  `created_date` DATETIME NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `created_user` CHAR(50) NULL DEFAULT NULL,  `created_role` CHAR(255) NULL DEFAULT NULL,  PRIMARY KEY (`email`) )";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- MembersDetail TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `member_details` (`email`, `user_id`, `password`, `role`, `first_name`, `last_name`, `account_status`, `contact_office`, `contact_personnel`, `work_location`, `flag`, `otp_code`, `otp_date`, `otp_url`, `user_type`, `customer_id`, `employee_id`, `created_date`, `updated_date`, `created_user`, `created_role`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in MembersDetailsArray) {
                    
                    if ([temp.allKeys containsObject:CUSTOMER_MAIL] && ![[temp valueForKey:CUSTOMER_MAIL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:CUSTOMER_MAIL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:USER_ID] && ![[temp valueForKey:USER_ID] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:USER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PASSWORD] && ![[temp valueForKey:PASSWORD] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 3, [[temp valueForKey:PASSWORD] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ROLE] && ![[temp valueForKey:ROLE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4, [[temp valueForKey:ROLE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:FIRST_NAME] && ![[temp valueForKey:FIRST_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5, [[temp valueForKey:FIRST_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:LAST_NAME] && ![[temp valueForKey:LAST_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6, [[temp valueForKey:LAST_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ACCOUNT_STATUS] && ![[temp valueForKey:ACCOUNT_STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7, [[temp valueForKey:ACCOUNT_STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CONTACT_OFFICE] && ![[temp valueForKey:CONTACT_OFFICE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8, [[temp valueForKey:CONTACT_OFFICE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CONTACT_PERSONNEL] && ![[temp valueForKey:CONTACT_PERSONNEL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9, [[temp valueForKey:CONTACT_PERSONNEL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:WORK_LOCATION] && ![[temp valueForKey:WORK_LOCATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 10, [[temp valueForKey:WORK_LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    
                    if ([temp.allKeys containsObject:FLAG] && ![[temp valueForKey:FLAG] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 11, [[temp valueForKey:FLAG] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 11, 0);
                    }
                    
                    if ([temp.allKeys containsObject:OTP_CODE] && ![[temp valueForKey:OTP_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 12, [[temp valueForKey:OTP_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 13, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:OTP_DATE] && ![[temp valueForKey:OTP_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 13, [[temp valueForKey:OTP_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 13, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:OTP_URL] && ![[temp valueForKey:OTP_URL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 14, [[temp valueForKey:OTP_URL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:USER_TYPE] && ![[temp valueForKey:USER_TYPE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 15, [[temp valueForKey:USER_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_ID] && ![[temp valueForKey:CUSTOMER_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 16, [[temp valueForKey:CUSTOMER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 16, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:EMPLOYEE_ID] && ![[temp valueForKey:EMPLOYEE_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 17, [[temp valueForKey:EMPLOYEE_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 17, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_Date] && ![[temp valueForKey:CREATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 18, [[temp valueForKey:CREATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 18, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:UPDATED_Date] && ![[temp valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 19, [[temp valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 19, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_USER] && ![[temp valueForKey:CREATED_USER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 20, [[temp valueForKey:CREATED_USER] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 20, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_ROLE] && ![[temp valueForKey:CREATED_ROLE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 21, [[temp valueForKey:CREATED_ROLE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 21, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        NSLog(@"customers becomes false in due to error in inserting into database");
                    }
                    else {
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- MembersDetail ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- MembersDetail ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- MembersDetail----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}


/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         11/09/2018
 * @method       saveMembersDetails:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveMemberRoles:(NSArray *)MemberRolesArray{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- MEMBER_ROLES ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "CREATE TABLE  IF NOT EXISTS  `member_roles` ( `email` CHAR(50) NOT NULL, `role_name` CHAR(50) NULL DEFAULT NULL, `s_no` INT(11) NOT NULL, PRIMARY KEY (`s_no`))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- member_roles TABLE Created Sucessfully ----");
            }
            
            NSString *item_id = [NSString stringWithFormat:@"%d",1];
            BOOL  itemIdExists = FALSE;
            const char * sqlSelectStmt = "select s_no from member_roles order by s_no DESC LIMIT 1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    item_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    item_id = [NSString stringWithFormat:@"%d",item_id.intValue + 1];
                    itemIdExists = TRUE;
                }
                sqlite3_finalize(localSelectStmt);
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `member_roles` (`email`, `role_name`, `s_no`) VALUES ( ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in MemberRolesArray) {
                    
                    if ([temp.allKeys containsObject:CUSTOMER_MAIL] && ![[temp valueForKey:CUSTOMER_MAIL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:CUSTOMER_MAIL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kRoleName] && ![[temp valueForKey:kRoleName] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:kRoleName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    sqlite3_bind_int(localInsertStmt, 3, item_id.intValue);
                    
                    item_id = [NSString stringWithFormat:@"%d",item_id.intValue + 1];
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        NSLog(@"customers becomes false in due to error in inserting into database");
                    }
                    else {
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- MEMBER_ROLES ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- MEMBER_ROLES ----");
                }
                sqlite3_finalize(localInsertStmt);
                item_id = [NSString stringWithFormat:@"%d",item_id.intValue + 1];
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- MEMBER_ROLES----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

-(NSArray *)getCompleteRolesListBasedOnEmailId:(NSString *)emailIdStr{
    
    NSMutableArray * completeRolesListArr = [[NSMutableArray alloc]init];
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt =nil;
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSString * query = @"select distinct(role_name) from member_roles";
            
            if([emailIdStr length])
                [NSString stringWithFormat:@"select distinct(role_name) from member_roles where email = '%@'",emailIdStr];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt,0))
                        [completeRolesListArr addObject:@((char *)sqlite3_column_text(localSelectStmt, 0))];
                }
                sqlite3_finalize(localSelectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
            
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
        sqlite3_close(localDatabase);
        return completeRolesListArr;
    }
}

/**
 * @description  In this method we are calling the services to get the members details present in online....
 * @date         10/09/2018
 * @method       callGetMemberDetails:--
 * @author       Srinivasulu
 * @param
 * @param        int
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)callGetRolesDetails:(int)startIndex roleName:(NSString *)rquiredRoleNameStr{
    
    Boolean service_Call_Save_Status = false;
    
    @try {
        if(startIndex == 0)
            membersStartIndex = 0;
        
        NSMutableDictionary * menuDeatilsRequestDic = [[NSMutableDictionary alloc]init];
        
        [menuDeatilsRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [menuDeatilsRequestDic setValue:rquiredRoleNameStr forKey:kRoleName];
        [menuDeatilsRequestDic setValue:EMPTY_STRING forKey:SEARCH_CRITERIA];
        //        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_NAME];
        //        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_LOCATION];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithInt:startIndex] forKey:START_INDEX];
        //        [menuDeatilsRequestDic setValue:[NSNumber numberWithInt:DOWNLOAD_RATE] forKey:MAX_RECORDS];
        
        
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.roleServiceDelegate = self;
        service_Call_Save_Status = [serviceController getAllRolesDetailsThroughSynchronousRequest:customerPurchasesRequestString];
    } @catch (NSException *exception) {
        
    } @finally {
        
        return service_Call_Save_Status;
    }
}

/**
 * @description  In this method we are handling the servcie call sucess response of get the getRoles details....
 * @date         11/09/2018
 * @method       getAllRolesDetailsSuccessResponseAndReturnSaveStatus:--
 * @author       Srinivasulu
 * @param        NSDictionary
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)getAllRolesDetailsSuccessResponseAndReturnSaveStatus:(NSDictionary *)successDictionary{
    BOOL isSaveTheList = false;
    
    @try {
        
        for(NSDictionary * tempDic in [successDictionary valueForKey:ROLE_LIST]){
            isSaveTheList = [self saveRolesDetails:[NSArray arrayWithObject:tempDic]];
            if([[tempDic allKeys] containsObject:kAccessControl] && ! [[tempDic valueForKey:kAccessControl] isKindOfClass:[NSNull class]]){
                
                NSArray * tempArr = [tempDic valueForKey:kAccessControl];
                isSaveTheList = [self saveAccessControls:tempArr];
            }
        }
    } @catch (NSException *exception) {
        isSaveTheList = false;
    } @finally {
        return isSaveTheList;
    }
}

/**
 * @description  In this method we are handling the servcie call error response of get the getRoles names details....
 * @date         11/09/2018
 * @method       getAllRolesDetailsErrorResponseAndReturnSaveStatus:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)getAllRolesDetailsErrorResponseAndReturnSaveStatus:(NSString *)errorResponse{
    BOOL isSaveTheList = false;
    
    @try {
        
        if ([errorResponse caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            isSaveTheList =  TRUE;
        }
    } @catch (NSException *exception) {
        isSaveTheList = false;
    } @finally {
        return isSaveTheList;
    }
}

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         11/09/2018
 * @method       saveRolesDetails:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveRolesDetails:(NSArray *)MembersDetailsArray{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- ROLE ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    //    NSMutableArray * accessControlsArr = [NSMutableArray new];
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "CREATE TABLE  IF NOT EXISTS  `role` (  `role_name` VARCHAR(255) NOT NULL,  `created_by` VARCHAR(255) NULL DEFAULT NULL,  `created_date` DATETIME NULL DEFAULT NULL,  `updated_date` DATETIME NULL DEFAULT NULL,  `created_role` VARCHAR(50) NULL DEFAULT NULL,  `role_description` VARCHAR(255) NULL DEFAULT NULL,  `role_status` VARCHAR(255) NULL DEFAULT NULL,  `valid_date` VARCHAR(255) NULL DEFAULT NULL,  PRIMARY KEY (`role_name`))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- Role TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `role` (`role_name`, `created_by`, `created_date`, `updated_date`, `created_role`, `role_description`, `role_status`, `valid_date`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in MembersDetailsArray) {
                    
                    if ([temp.allKeys containsObject:kRoleName] && ![[temp valueForKey:kRoleName] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:kRoleName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_BY] && ![[temp valueForKey:CREATED_BY] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:CREATED_BY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_Date] && ![[temp valueForKey:CREATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 3, [[temp valueForKey:CREATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:UPDATED_Date] && ![[temp valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4, [[temp valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CREATED_ROLE] && ![[temp valueForKey:CREATED_ROLE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5, [[temp valueForKey:CREATED_ROLE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ROLE_DESCRIPTION] && ![[temp valueForKey:ROLE_DESCRIPTION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6, [[temp valueForKey:ROLE_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ROLE_STATUS] && ![[temp valueForKey:ROLE_STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7, [[temp valueForKey:ROLE_STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:VALID_DATE] && ![[temp valueForKey:VALID_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8, [[temp valueForKey:VALID_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        NSLog(@"customers becomes false in due to error in inserting into database");
                    }
                    else {
                        //                        isCompleteDataInserted = true;
                    }
                    
                    //                    if ([temp.allKeys containsObject:kAccessControl] && ![[temp valueForKey:kAccessControl] isKindOfClass:[NSNull class]]) {
                    //
                    //                        for(NSDictionary * tempDic in [temp valueForKey:kAccessControl])
                    //                            [accessControlsArr addObject:tempDic];
                    //                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- Role ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- Role ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- Role----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        
        //            @try {
        //                if([accessControlsArr count])
        //                    isCompleteDataInserted = [self saveAccessControls:accessControlsArr];
        //            } @catch (NSException *exception) {
        //
        //            }
        
        return isCompleteDataInserted;
    }
}


/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         11/09/2018
 * @method       saveRolesDetails:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveAccessControls:(NSArray *)AccessControlsArray{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- access_control ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "CREATE TABLE  IF NOT EXISTS  `access_control` ( `s_no` INT (10)  NOT NULL,  `role_name` CHAR(50) NULL DEFAULT NULL,  `app_name` VARCHAR(150) NULL DEFAULT NULL,  `app_flow` VARCHAR(150) NULL DEFAULT NULL,  `app_subflow` VARCHAR(150) NULL DEFAULT NULL,  `app_document` VARCHAR(150) NULL DEFAULT NULL,  `app_sub_document` VARCHAR(150) NULL DEFAULT NULL,  `location` VARCHAR(255) NULL DEFAULT NULL,  `role_read` BIT(1) NULL DEFAULT NULL,  `role_write` BIT(1) NULL DEFAULT NULL,  `role_cc` BIT(1) NULL DEFAULT '0',  PRIMARY KEY (`s_no`))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- access_control TABLE Created Sucessfully ----");
            }
            
            NSString * item_id = [NSString stringWithFormat:@"%d",1];
            BOOL  itemIdExists = FALSE;
            const char * sqlSelectStmt = "select s_no from access_control order by s_no DESC LIMIT 1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    item_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    item_id = [NSString stringWithFormat:@"%d",item_id.intValue + 1];
                    itemIdExists = TRUE;
                }
                sqlite3_finalize(localSelectStmt);
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `access_control` (`s_no`, `role_name`, `app_name`, `app_flow`, `app_subflow`, `app_document`, `app_sub_document`, `location`, `role_read`, `role_write`, `role_cc`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in AccessControlsArray) {
                    
                    sqlite3_bind_int(localInsertStmt, 1, item_id.intValue);
                    
                    if ([temp.allKeys containsObject:kRoleName] && ![[temp valueForKey:kRoleName] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:kRoleName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kAppName] && ![[temp valueForKey:kAppName] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 3, [[temp valueForKey:kAppName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kAppFlow] && ![[temp valueForKey:kAppFlow] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4, [[temp valueForKey:kAppFlow] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kAppSubFlow] && ![[temp valueForKey:kAppSubFlow] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 5, [[temp valueForKey:kAppSubFlow] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kAppDocument] && ![[temp valueForKey:kAppDocument] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6, [[temp valueForKey:kAppDocument] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:APP_SUB_DOCUMENT] && ![[temp valueForKey:APP_SUB_DOCUMENT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 7, [[temp valueForKey:APP_SUB_DOCUMENT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:LOCATION] && ![[temp valueForKey:LOCATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8, [[temp valueForKey:LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:READ] && ![[temp valueForKey:READ] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 9, [[temp valueForKey:READ] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 9, 0);
                    }
                    
                    if ([temp.allKeys containsObject:WRITE] && ![[temp valueForKey:WRITE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 10, [[temp valueForKey:WRITE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 10, 0);
                    }
                    
                    //it need to be changed..
                    if ([temp.allKeys containsObject:NO_OF_CHILDRENS] && ![[temp valueForKey:NO_OF_CHILDRENS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 11, [[temp valueForKey:NO_OF_CHILDRENS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 11, 0);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        NSLog(@"access_control becomes false in due to error in inserting into database");
                    }
                    else {
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                    item_id = [NSString stringWithFormat:@"%d", (item_id.intValue + 1)];
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- access_control ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- access_control ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- Role----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

/**
 * @description  In this method we are retriving the data saved in from service calls response....
 * @date         12/09/2018..
 * @method       isWhetherValideUserCredentials:--
 * @author       Srinivasulu
 * @param        NSDictionary
 * @param
 *
 * @return       NSMutableDictionary
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSDictionary *)isWhetherValideUserCredentials:(NSDictionary *)enteredInfoDic{
    
    NSDictionary * returnDic;
    Boolean isValideUser = false;
    NSMutableArray * rolesArrList = [NSMutableArray new];
    NSString * fristNameStr = @"";
    NSString * employeeIdStr = @"";
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt =nil;
    
    @try {
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        //        NSString * enteredCustomerIdStr = [enteredInfoDic valueForKey:CUSTOMER_ID];
        NSString * enteredCustomerEmailStr = [enteredInfoDic valueForKey:CUSTOMER_EMAIL];
        NSString * enteredCustomerPasswordStr = [enteredInfoDic valueForKey:PASSWORD];
        NSString * dbPasswordStr = @"";
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSString * query = [NSString stringWithFormat:@"select password,first_name,employee_id from  member_details where email='%@' COLLATE NOCASE",enteredCustomerEmailStr];
            
            const char * sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,0))
                        dbPasswordStr = @((char*)sqlite3_column_text(localSelectStmt,0));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,1))
                        fristNameStr = @((char*)sqlite3_column_text(localSelectStmt,1));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,2))
                        employeeIdStr = @((char*)sqlite3_column_text(localSelectStmt,2));
                }
                sqlite3_finalize(localSelectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
        }
        else{
            
        }
        
        if([dbPasswordStr length]){
            
            if([self checkPasswordIsValideOrNot:enteredCustomerPasswordStr existPassword:dbPasswordStr]){
                isValideUser = true;
                
                for(NSString * roleNameStr in [self getCompleteRolesListBasedOnEmailId:enteredCustomerEmailStr]){
                    
                    NSMutableDictionary * tempRoleDetailsDic = [NSMutableDictionary new];
                    
                    [tempRoleDetailsDic setValue:@"0" forKey:MAX_RECORDS];
                    
                    [tempRoleDetailsDic setValue:roleNameStr forKey:kRoleName];
                    
                    
                    NSDictionary * locDic = [self getCompleteRoleDetailsBasedOnRoleName:roleNameStr];
                    
                    [tempRoleDetailsDic setValue:[locDic valueForKey:CREATED_DATE_STR] forKey:kCreatedDateStr];
                    
                    [tempRoleDetailsDic setValue:[locDic valueForKey:UPDATED_DATE_STR] forKey:UPDATED_Date];
                    [tempRoleDetailsDic setValue:[locDic valueForKey:UPDATED_DATE_STR] forKey:UPDATED_DATE_STR];
                    [tempRoleDetailsDic setValue:[locDic valueForKey:VALID_DATE] forKey:VALID_DATE];
                    [tempRoleDetailsDic setValue:[locDic valueForKey:VALID_DATE] forKey:Valid_Date];
                    [tempRoleDetailsDic setValue:[locDic valueForKey:ROLE_STATUS] forKey:ROLE_STATUS];
                    [tempRoleDetailsDic setValue:[locDic valueForKey:CREATED_DATE_STR] forKey:CREATED_Date];
                    [tempRoleDetailsDic setValue:[locDic valueForKey:CREATED_DATE_STR] forKey:CREATED_BY];
                    [tempRoleDetailsDic setValue:[locDic valueForKey:CREATED_ROLE] forKey:CREATED_ROLE];
                    [tempRoleDetailsDic setValue:[locDic valueForKey:ROLE_DESCRIPTION] forKey:ROLE_DESCRIPTION];
                    
                    [tempRoleDetailsDic setValue:@"0" forKey:START_INDEX];
                    [tempRoleDetailsDic setValue:@"" forKey:ROLE_NAME_LIST];
                    [tempRoleDetailsDic setValue:@"" forKey:NON_DELETED_ITEMS];
                    [tempRoleDetailsDic setValue:@"" forKey:SEARCH_CRITERIA];
                    [tempRoleDetailsDic setValue:@"" forKey:RESPONSE_HEADER];
                    
                    NSMutableArray * tempAccessArr = [self getCompleteAccesDetailsBasedOnRoleName:roleNameStr];
                    
                    [tempRoleDetailsDic setValue:tempAccessArr forKey:kAccessControl];
                    [tempRoleDetailsDic setValue:tempAccessArr forKey:ACCESS_CONTROL_ACTIVITY];
                    [tempRoleDetailsDic setValue:@"list of accessControl" forKey:ROLE_LOCATIONS];
                    [tempRoleDetailsDic setValue:@"list of accessControl" forKey:DELETED_ITEMS];
                    [tempRoleDetailsDic setValue:tempAccessArr forKey:kAccessControlActivity];
                    
                    [rolesArrList addObject:tempRoleDetailsDic];
                }
            }
        }
    }
    @catch (NSException *exception) {
        
    } @finally {
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        
        if(rolesArrList == nil)
            rolesArrList = [[NSMutableArray alloc] init];
        
        returnDic = [NSDictionary dictionaryWithObjects:@[[NSNumber numberWithBool:isValideUser],rolesArrList,fristNameStr,employeeIdStr] forKeys:@[IS_VALIDE_USER,ROLES,FIRST_NAME,EMPLOYEE_ID]];
        
        return returnDic;
    }
}

/**
 * @description  In this method we are checking the user entered value equals to value in DB....
 * @date         25/09/2018..
 * @method       checkPasswordIsValideOrNot:-- existPassword:--
 * @author       Srinivasulu
 * @param        NSString
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)checkPasswordIsValideOrNot:(NSString *)enteredPasswordStr existPassword:(NSString *)dbValueStr{
    
    BOOL isValideUser = false;
    
    @try {
        
        NSData * encryptedData = [[NSData alloc] initWithBase64EncodedString:dbValueStr options:0];
        
        char * key = "TheBestSecretKey";
        NSUInteger dataLength = [encryptedData length];
        uint8_t unencryptedData[dataLength + kCCKeySizeAES128];
        size_t unencryptedLength;
        
        CCCrypt(kCCDecrypt, kCCAlgorithmAES, 0, key, kCCKeySizeAES128, NULL, [encryptedData bytes], dataLength, unencryptedData, dataLength, &unencryptedLength);
        
        NSString * decodedPasswordStr = [[NSString alloc] initWithBytes:unencryptedData length:unencryptedLength encoding:NSUTF8StringEncoding];
        
        NSLog(@"----%@",decodedPasswordStr);
        
        if(decodedPasswordStr != nil){
            
            //            decodedPasswordStr = [[NSString alloc] initWithData:[decodedPasswordStr dataUsingEncoding:NSUTF8StringEncoding] encoding:NSUTF8StringEncoding];
            
            if([decodedPasswordStr isEqualToString:enteredPasswordStr]){
                isValideUser = true;
            }
            
            if(!isValideUser){
                NSString * tempStr = @"";
                NSString * lastCharacterStr = [NSString stringWithFormat:@"%c",[decodedPasswordStr characterAtIndex:(decodedPasswordStr.length - 1)]];;
                
                for(NSString * firstStr in [decodedPasswordStr componentsSeparatedByString:lastCharacterStr]){
                    tempStr = firstStr;
                    break;
                }
                if([tempStr isEqualToString:enteredPasswordStr]){
                    isValideUser = true;
                }
            }
            
            
            
            
            //            if(!isValideUser)
            //                for(NSString * firstStr in [decodedPasswordStr componentsSeparatedByString:@"\'"]){
            //
            //                    if([firstStr isEqualToString:enteredPasswordStr]){
            //                        isValideUser = true;
            //                        break;
            //                    }
            //                }
            
            //            if(!isValideUser)
            //            if([decodedPasswordStr containsString:enteredPasswordStr] && !isValideUser){
            //                isValideUser = true;
            //            }
            
        }
        
    } @catch (NSException *exception) {
        
        isValideUser = false;
    } @finally {
        
        return isValideUser;
    }
}

/**
 * @description  In this method we are retriving the data from roles tabel baed on roleName....
 * @date         25/09/2018..
 * @method       getCompleteRoleDetailsBasedOnRoleName:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       NSDictionary
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSDictionary *)getCompleteRoleDetailsBasedOnRoleName:(NSString *)roleNameStr{
    
    NSDictionary * completeRolesListDic;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt =nil;
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSString * query = @"select role_name,created_by,created_date,updated_date,created_role,role_description,role_status,valid_date from role";
            
            if([roleNameStr length])
                query = [NSString stringWithFormat:@"select role_name,created_by,created_date,updated_date,created_role,role_description,role_status,valid_date from role where role_name = '%@'",roleNameStr];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    NSString  * roleNameStr = @"";
                    NSString  * createdByStr = @"";
                    NSString  * createdDateStr = @"";
                    NSString  * updateDateStr = @"";
                    NSString  * createdRoleStr = @"";
                    NSString  * roleDescriptionStr = @"0.00";
                    NSString  * roleStatusStr = @"1";
                    NSString  * validDateStr = @"";
                    
                    if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt,0))
                        roleNameStr = @((char*)sqlite3_column_text(localSelectStmt,0));
                    
                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                        createdByStr = @((char*)sqlite3_column_text(localSelectStmt,1));
                    
                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                        createdDateStr = @((char*)sqlite3_column_text(localSelectStmt,2));
                    
                    if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                        updateDateStr = @((char*)sqlite3_column_text(localSelectStmt,3));
                    
                    if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                        createdRoleStr = @((char*)sqlite3_column_text(localSelectStmt,4));
                    
                    if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
                        roleDescriptionStr = @((char*)sqlite3_column_text(localSelectStmt,5));
                    
                    if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
                        roleStatusStr = @((char*)sqlite3_column_text(localSelectStmt,6));
                    
                    if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt,7))
                        validDateStr = @((char*)sqlite3_column_text(localSelectStmt,7));
                    
                    completeRolesListDic = [NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:roleNameStr,createdByStr,createdDateStr,updateDateStr,createdRoleStr,roleDescriptionStr,roleStatusStr,validDateStr, nil] forKeys:[NSArray arrayWithObjects:kRoleName,CREATED_BY,CREATED_DATE_STR,UPDATED_DATE_STR,CREATED_ROLE,ROLE_DESCRIPTION,ROLE_STATUS,VALID_DATE, nil] ];
                }
                sqlite3_finalize(localSelectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
            
            sqlite3_close(localDatabase);
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
        if(completeRolesListDic == nil)
            completeRolesListDic = [[NSDictionary alloc] init];
        
        return completeRolesListDic;
    }
}

/**
 * @description  In this method we are retriving the data from access_control tabel baed on roleName....
 * @date         25/09/2018..
 * @method       getCompleteAccesDetailsBasedOnRoleName:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       NSDictionary
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableArray *)getCompleteAccesDetailsBasedOnRoleName:(NSString *)roleNameStr{
    
    NSMutableArray * completeRolesListArr = [NSMutableArray new];
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt =nil;
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSString * query = @"select role_name,app_name,app_flow,app_subflow,app_document,app_sub_document,location,role_read,role_write,role_cc from access_control";
            
            if([roleNameStr length])
                query = [NSString stringWithFormat:@"select role_name,app_name,app_flow,app_subflow,app_document,app_sub_document,location,role_read,role_write,role_cc from access_control where role_name = '%@'",roleNameStr];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    NSString  * roleNameStr = @"";
                    NSString  * appNameStr = @"";
                    NSString  * appFlowStr = @"";
                    NSString  * appSubFlowStr = @"";
                    NSString  * appDocumentStr = @"";
                    NSString  * appSubDocumentStr = @"";
                    NSString  * locaionStr = @"";
                    NSString  * readStr = @"0";
                    NSString  * writeStr = @"0";
                    NSString  * notificationStr = @"0";
                    
                    if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt,0))
                        roleNameStr = @((char*)sqlite3_column_text(localSelectStmt,0));
                    
                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                        appNameStr = @((char*)sqlite3_column_text(localSelectStmt,1));
                    
                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                        appFlowStr = @((char*)sqlite3_column_text(localSelectStmt,2));
                    
                    if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                        appSubFlowStr = @((char*)sqlite3_column_text(localSelectStmt,3));
                    
                    if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                        appDocumentStr = @((char*)sqlite3_column_text(localSelectStmt,4));
                    
                    if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
                        appSubDocumentStr = @((char*)sqlite3_column_text(localSelectStmt,5));
                    
                    if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
                        locaionStr = @((char*)sqlite3_column_text(localSelectStmt,6));
                    
                    if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt,7))
                        readStr = @((char*)sqlite3_column_text(localSelectStmt,7));
                    
                    if((sqlite3_column_text(localSelectStmt, 8) != nil) && (char *)sqlite3_column_text(localSelectStmt,8))
                        writeStr = @((char*)sqlite3_column_text(localSelectStmt,8));
                    
                    if((sqlite3_column_text(localSelectStmt, 9) != nil) && (char *)sqlite3_column_text(localSelectStmt, 9))
                        notificationStr = @((char*)sqlite3_column_text(localSelectStmt, 9));
                    
                    NSDictionary * tempDic = [NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:roleNameStr,appNameStr,appFlowStr,appSubFlowStr,appDocumentStr,appSubDocumentStr,locaionStr,notificationStr,readStr,writeStr, nil] forKeys:[NSArray arrayWithObjects:kRoleName,kAppName,kAppFlow,kAppSubFlow,kAppDocument,APP_SUB_DOCUMENT,kLocation,NOTIFICATION,READ,WRITE, nil]];
                    
                    [completeRolesListArr addObject:tempDic];
                }
                sqlite3_finalize(localSelectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
            
            sqlite3_close(localDatabase);
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
        return completeRolesListArr;
    }
}
#pragma -mark Methods used for handling the all customer in offline..

/**
 * @description  In this method we are calling the services to get the customer details present in online....
 * @date         06/09/2018
 * @method       callGetCustomerList:--
 * @author       Srinivasulu
 * @param
 * @param        int
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)callGetCustomerList:(int)startIndex{
    
    Boolean service_Call_Save_Status = false;
    
    @try {
        if(startIndex == 0)
            customerStartIndex = 0;
        
        NSMutableDictionary * menuDeatilsRequestDic = [[NSMutableDictionary alloc]init];
        
        [menuDeatilsRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_NAME];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_LOCATION];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithInt:startIndex] forKey:START_INDEX];
        [menuDeatilsRequestDic setValue:[NSNumber numberWithInt:DOWNLOAD_RATE] forKey:MAX_RECORDS];
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.customerServiceDelegate = self;
        service_Call_Save_Status = [serviceController getCustomerListThroughSynchronousRequest:customerPurchasesRequestString];
    } @catch (NSException *exception) {
        
    } @finally {
        
        return service_Call_Save_Status;
    }
}

/**
 * @description  In this method we are handling the servcie call sucess response of get the getCusotmerList names details....
 * @date         06/09/2018
 * @method       getCustomerListSuccessResponseReturnStatus:--
 * @author       Srinivasulu
 * @param        NSDictionary
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getCustomerListSuccessResponseReturnStatus:(NSDictionary*)sucessDictionary{
    BOOL isSaveTheList = false;
    
    @try {
        
        if([[sucessDictionary allKeys] containsObject:CUSTOMERS] && ! [[sucessDictionary valueForKey:CUSTOMERS] isKindOfClass:[NSNull class]]){
            
            totalCustomerRecordsCount = [[sucessDictionary valueForKey:TOTAL_RECORDS] intValue];
            isSaveTheList = [self saveCustomersList:[sucessDictionary valueForKey:CUSTOMERS]];
            customerStartIndex = customerStartIndex + DOWNLOAD_RATE;
            
            if(totalCustomerRecordsCount > customerStartIndex){
                isSaveTheList = [self callGetCustomerList:customerStartIndex];
            }
            else{
                
            }
        }
    } @catch (NSException *exception) {
        isSaveTheList = false;
    } @finally {
        return isSaveTheList;
    }
}

/**
 * @description  In this method we are handling the servcie call error response of get the getCusotmerList names details....
 * @date         06/09/2018
 * @method       getCustomerListErrorResponseReturnStatus:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getCustomerListErrorResponseReturnStatus:(NSString*)errorResponse{
    BOOL isSaveTheList = false;
    
    @try {
        
        if ([errorResponse caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            isSaveTheList =  TRUE;
        }
    } @catch (NSException *exception) {
        isSaveTheList = false;
    } @finally {
        return isSaveTheList;
    }
}

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         06/09/2018
 * @method       saveCustomersList:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveCustomersList:(NSArray *)customersListArray{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- CUSTOMERS----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createSkuMasterSqlStatement  = "CREATE TABLE IF NOT EXISTS `customers` (`first_name` VARCHAR(100) NULL DEFAULT NULL,  `last_name` VARCHAR(100) NULL DEFAULT NULL,  `middle_name` VARCHAR(100) NULL DEFAULT NULL,  `aadhaar_number` CHAR(20) NULL DEFAULT NULL,  `insurance_policy` TINYINT(4) NULL DEFAULT '0',  `marital_status` CHAR(10) NULL DEFAULT NULL,  `children` INT(11) NULL DEFAULT '0',  `know_how` VARCHAR(150) NULL DEFAULT NULL,  `allergies` VARCHAR(250) NULL DEFAULT NULL,  `allergies_comments` VARCHAR(250) NULL DEFAULT NULL,  `medicines` VARCHAR(250) NULL DEFAULT NULL,  `medicines_comments` VARCHAR(250) NULL DEFAULT NULL,  `customer_photo` VARCHAR(250) NULL DEFAULT NULL,  `email` VARCHAR(150) NULL DEFAULT NULL,  `phone_number` CHAR(60) NOT NULL DEFAULT '',  `status` TINYINT(1) NULL DEFAULT NULL,  `street` VARCHAR(150) NULL DEFAULT NULL,  `location` VARCHAR(100) NULL DEFAULT NULL,  `locality` VARCHAR(150) NULL DEFAULT NULL,  `city` VARCHAR(100) NULL DEFAULT NULL,  `pin_no` VARCHAR(45) NULL DEFAULT NULL,  `gender` VARCHAR(10) NULL DEFAULT NULL,  `age` INT(50) NULL DEFAULT NULL,  `notifications` TINYINT(2) NULL DEFAULT NULL,  `rating` FLOAT NULL DEFAULT NULL,  `cust_feedback` VARCHAR(250) NULL DEFAULT NULL,  `shopping_count` INT(50) NULL DEFAULT NULL,  `shopping_amount` FLOAT NULL DEFAULT NULL,  `country` VARCHAR(100) NULL DEFAULT NULL,  `category` VARCHAR(100) NULL DEFAULT NULL,  `customer_id` VARCHAR(100) NULL DEFAULT NULL,  `customer_type` VARCHAR(100) NULL DEFAULT NULL,  `nationality` VARCHAR(100) NULL DEFAULT NULL,  `designation` VARCHAR(100) NULL DEFAULT NULL,  `alt_phone_number` VARCHAR(100) NULL DEFAULT NULL,  `dob` DATE NULL DEFAULT NULL,  `marriage_date` DATE NULL DEFAULT NULL,  `photo` VARCHAR(150) NULL DEFAULT NULL,  `address_proof` VARCHAR(150) NULL DEFAULT NULL,  `customer_id_proof` VARCHAR(150) NULL DEFAULT NULL,  `land_mark` VARCHAR(250) NULL DEFAULT NULL,  `company_name` VARCHAR(250) NULL DEFAULT NULL,  `date_and_time` DATETIME NULL DEFAULT NULL,  `state` VARCHAR(100) NULL DEFAULT NULL,  `signature` VARCHAR(150) NULL DEFAULT NULL,  `house_no` VARCHAR(150) NULL DEFAULT NULL,  `relation_ship_status` VARCHAR(50) NULL DEFAULT NULL,  `family_size` INT(11) NULL DEFAULT '0',  `hobbies` VARCHAR(250) NULL DEFAULT NULL,  `monthly_income` VARCHAR(100) NULL DEFAULT NULL,  `qualification` VARCHAR(100) NULL DEFAULT NULL,  `password` VARCHAR(100) NULL DEFAULT NULL,  `primary_contact_number` CHAR(20) NULL DEFAULT NULL,  `otp_code` CHAR(20) NULL DEFAULT NULL,  `otp_expire_on` DATETIME NULL DEFAULT NULL,  `site_url` VARCHAR(150) NULL DEFAULT NULL,  `title` CHAR(20) NULL DEFAULT NULL,  `customer_gstin` CHAR(20) NULL DEFAULT NULL,  `is_membership_customer` TINYINT(4) NULL DEFAULT '0',   `need_to_update_online` TINYINT(4) NULL DEFAULT '0',  PRIMARY KEY (`phone_number`))";
            
            if (sqlite3_exec(localDatabase, createSkuMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMERS TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertSkuMasterSqlStatement = "INSERT OR REPLACE into `customers` (`first_name`, `last_name`, `middle_name`, `aadhaar_number`, `insurance_policy`, `marital_status`, `children`, `know_how`, `allergies`, `allergies_comments`, `medicines`, `medicines_comments`, `customer_photo`, `email`, `phone_number`, `status`, `street`, `location`, `locality`, `city`, `pin_no`, `gender`, `age`, `notifications`, `rating`, `cust_feedback`, `shopping_count`, `shopping_amount`, `country`, `category`, `customer_id`, `customer_type`, `nationality`, `designation`, `alt_phone_number`, `dob`, `marriage_date`, `photo`, `address_proof`, `customer_id_proof`, `land_mark`, `company_name`, `date_and_time`, `state`, `signature`, `house_no`, `relation_ship_status`, `family_size`, `hobbies`, `monthly_income`, `qualification`, `password`, `primary_contact_number`, `otp_code`, `otp_expire_on`, `site_url`, `title`, `customer_gstin`, `is_membership_customer`,`need_to_update_online`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertSkuMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in customersListArray) {
                    
                    if ([temp.allKeys containsObject:kFirstName] && ![[temp valueForKey:kFirstName] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:kFirstName] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_LAST_NAME] && ![[temp valueForKey:CUSTOMER_LAST_NAME] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 2, [[temp valueForKey:CUSTOMER_LAST_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MIDDLE_NAME] && ![[temp valueForKey:MIDDLE_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 3, [[temp valueForKey:MIDDLE_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ADHAR_NUMBER] && ![[temp valueForKey:ADHAR_NUMBER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 4, [[temp valueForKey:ADHAR_NUMBER] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:INSURANCE_POLICY] && ![[temp valueForKey:INSURANCE_POLICY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 5, [[temp valueForKey:INSURANCE_POLICY] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 5, 0);
                    }
                    
                    if ([temp.allKeys containsObject:MARITAL_STATUS] && ![[temp valueForKey:MARITAL_STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 6, [[temp valueForKey:MARITAL_STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:NO_OF_CHILDRENS] && ![[temp valueForKey:NO_OF_CHILDRENS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 7, [[temp valueForKey:NO_OF_CHILDRENS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 7, 0);
                    }
                    
                    if ([temp.allKeys containsObject:KNOW_HOW_ABOUT] && ![[temp valueForKey:KNOW_HOW_ABOUT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 8, [[temp valueForKey:KNOW_HOW_ABOUT] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ALLERGIES] && ![[temp valueForKey:ALLERGIES] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 9, [[temp valueForKey:ALLERGIES] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ALLERGIES_COMMENTS] && ![[temp valueForKey:ALLERGIES_COMMENTS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 10, [[temp valueForKey:ALLERGIES_COMMENTS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 10, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MEDICINES] && ![[temp valueForKey:MEDICINES] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 11, [[temp valueForKey:MEDICINES] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MEDICINE_COMMENTS] && ![[temp valueForKey:MEDICINE_COMMENTS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 12, [[temp valueForKey:MEDICINE_COMMENTS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 12, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_PHOTO] && ![[temp valueForKey:CUSTOMER_PHOTO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 13, [[temp valueForKey:CUSTOMER_PHOTO] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 13, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_MAIL] && ![[temp valueForKey:CUSTOMER_MAIL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 14, [[temp valueForKey:CUSTOMER_MAIL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_PHONE] && ![[temp valueForKey:CUSTOMER_PHONE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 15, [[temp valueForKey:CUSTOMER_PHONE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:STATUS] && ![[temp valueForKey:STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 16, [[temp valueForKey:STATUS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 16, 0);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_STREET] && ![[temp valueForKey:CUSTOMER_STREET] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 17, [[temp valueForKey:CUSTOMER_STREET] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 17, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:LOCATION] && ![[temp valueForKey:LOCATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 18, [[temp valueForKey:LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 18, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_LOCALITY] && ![[temp valueForKey:CUSTOMER_LOCALITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 19, [[temp valueForKey:CUSTOMER_LOCALITY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 19, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_CITY] && ![[temp valueForKey:CUSTOMER_CITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 20, [[temp valueForKey:CUSTOMER_CITY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 20, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_PIN_NO] && ![[temp valueForKey:CUSTOMER_PIN_NO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 21, [[temp valueForKey:CUSTOMER_PIN_NO] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 21, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_GENDER] && ![[temp valueForKey:CUSTOMER_GENDER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt, 22, [[temp valueForKey:CUSTOMER_GENDER] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt, 22, 0);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_AGE] && ![[temp valueForKey:CUSTOMER_AGE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 23, [[temp valueForKey:CUSTOMER_AGE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 23, 0);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_NOTIFICATIONS] && ![[temp valueForKey:CUSTOMER_NOTIFICATIONS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 24, [[temp valueForKey:CUSTOMER_NOTIFICATIONS] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 24, 0);
                    }
                    
                    if ([temp.allKeys containsObject:RATING] && ![[temp valueForKey:RATING] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt,25,[[temp valueForKey:RATING] floatValue]);
                    }
                    else {
                        sqlite3_bind_double(localInsertStmt,25,0.0);
                    }
                    
                    if ([temp.allKeys containsObject:CUST_FEED_BACK] &&  ![[temp valueForKey:CUST_FEED_BACK] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 26, [[temp valueForKey:CUST_FEED_BACK] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 26, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SHOPPING_COUNT] && ![[temp valueForKey:SHOPPING_COUNT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 27, [[temp valueForKey:SHOPPING_COUNT] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 27, 0);
                    }
                    
                    if ([temp.allKeys containsObject:SHOPPING_AMOUNT] && ![[temp valueForKey:SHOPPING_AMOUNT] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_double(localInsertStmt,28,[[temp valueForKey:SHOPPING_AMOUNT] floatValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 28, 0);
                    }
                    
                    if ([temp.allKeys containsObject:COUNTRY] && ![[temp valueForKey:COUNTRY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 29, [[temp valueForKey:COUNTRY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 29, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:kProductCategory] &&  ![[temp valueForKey:kProductCategory] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 30, [[temp valueForKey:kProductCategory] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 30, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_ID] && ![[temp valueForKey:CUSTOMER_ID] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 31, [[temp valueForKey:CUSTOMER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 31, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_TYPE] &&  ![[temp valueForKey:CUSTOMER_TYPE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 32, [[temp valueForKey:CUSTOMER_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 32, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:NATIONALITY] &&  ![[temp valueForKey:NATIONALITY] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 33, [[temp valueForKey:NATIONALITY] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 33, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_DESIGNATION] &&  ![[temp valueForKey:CUSTOMER_DESIGNATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 34, [[temp valueForKey:CUSTOMER_DESIGNATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 34, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ALTERNATE_PHONE_NUM] && ![[temp valueForKey:ALTERNATE_PHONE_NUM] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 35, [[temp valueForKey:ALTERNATE_PHONE_NUM] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 35, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_DOB] && ![[temp valueForKey:CUSTOMER_DOB] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 36, [[temp valueForKey:CUSTOMER_DOB] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 36, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MARRIAGE_DATE_STR] && ![[temp valueForKey:MARRIAGE_DATE_STR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 37, [[temp valueForKey:MARRIAGE_DATE_STR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 37, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PHOTO] && ![[temp valueForKey:PHOTO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 38, [[temp valueForKey:PHOTO] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 38, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:ADDRESS_PROOF] && ![[temp valueForKey:ADDRESS_PROOF] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 39, [[temp valueForKey:ADDRESS_PROOF] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 39, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_ID_PROOF] && ![[temp valueForKey:CUSTOMER_ID_PROOF] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 40, [[temp valueForKey:CUSTOMER_ID_PROOF] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 40, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:LAND_MARK] && ![[temp valueForKey:LAND_MARK] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 41, [[temp valueForKey:LAND_MARK] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 41, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:COMPANY_NAME] && ![[temp valueForKey:COMPANY_NAME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 42, [[temp valueForKey:COMPANY_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 42, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:DATE_TIME_STR] && ![[temp valueForKey:DATE_TIME_STR] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 43, [[temp valueForKey:DATE_TIME_STR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 43, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:STATE] && ![[temp valueForKey:STATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 44, [[temp valueForKey:STATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 44, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SIGNATURE] && ![[temp valueForKey:SIGNATURE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 45, [[temp valueForKey:SIGNATURE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 45, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:HOUSE_NO] && ![[temp valueForKey:HOUSE_NO] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 46, [[temp valueForKey:HOUSE_NO] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 46, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:RELATION_SHIP_STATUS] && ![[temp valueForKey:RELATION_SHIP_STATUS] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 47, [[temp valueForKey:RELATION_SHIP_STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 47, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:FAMILY_SIZE] && ![[temp valueForKey:@""] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt,48,[[temp valueForKey:FAMILY_SIZE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 48, 0);
                    }
                    
                    if ([temp.allKeys containsObject:HOBBIES] &&  ![[temp valueForKey:HOBBIES] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 49, [[temp valueForKey:HOBBIES] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 49, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:MONTHLY_INCOME] && ![[temp valueForKey:MONTHLY_INCOME] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 50, [[temp valueForKey:MONTHLY_INCOME] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 50, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:QUALIFICATION] && ![[temp valueForKey:QUALIFICATION] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 51, [[temp valueForKey:QUALIFICATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 51, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PASSWORD] && ![[temp valueForKey:PASSWORD] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 52, [[temp valueForKey:PASSWORD] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 52, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:PRIMARY_CONTACT_NUMBER] && ![[temp valueForKey:PRIMARY_CONTACT_NUMBER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 53, [[temp valueForKey:PRIMARY_CONTACT_NUMBER] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 53, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:OTP_CODE] && ![[temp valueForKey:OTP_CODE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 54, [[temp valueForKey:OTP_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 54, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:OTP_VALIDATION_DATE] && ![[temp valueForKey:OTP_VALIDATION_DATE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 55, [[temp valueForKey:OTP_VALIDATION_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 55, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:SITE_URL] && ![[temp valueForKey:SITE_URL] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 56, [[temp valueForKey:SITE_URL] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 56, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:TITLE] && ![[temp valueForKey:TITLE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 57, [[temp valueForKey:TITLE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 57, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:CUSTOMER_GSTIN] && ![[temp valueForKey:CUSTOMER_GSTIN] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_text(localInsertStmt, 58, [[temp valueForKey:CUSTOMER_GSTIN] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else {
                        sqlite3_bind_text(localInsertStmt, 58, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:IS_MEMBERSHIP_CUSTOMER] && ![[temp valueForKey:IS_MEMBERSHIP_CUSTOMER] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 59,[[temp valueForKey:IS_MEMBERSHIP_CUSTOMER] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 59, 0);
                    }
                    
                    if ([temp.allKeys containsObject:NEED_TO_UPDATE_ONLINE] && ![[temp valueForKey:NEED_TO_UPDATE_ONLINE] isKindOfClass:[NSNull class]]) {
                        sqlite3_bind_int(localInsertStmt, 60,[[temp valueForKey:NEED_TO_UPDATE_ONLINE] intValue]);
                    }
                    else {
                        sqlite3_bind_int(localInsertStmt, 60, 0);
                    }
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        //                        isCompleteDataInserted = FALSE;
                        //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        NSLog(@"customers becomes false in due to error in inserting into database");
                    }
                    else {
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- CUSTOMERS ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- CUSTOMERS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- CUSTOMERS----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

/**
 * @description  In this method we are retriving the Data of the customer based on this phone number from local DB....
 * @date         06/09/2018
 * @method       getCustomerDetailsBasedOnPhoneNo:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       NSDictionary
 *
 * @modified By Srinivasulu
 * @reason      added the commits.. this method is using in pervious.
 *
 * @verified By
 * @verified On
 *
 */

-(NSDictionary *)getCustomerDetailsBasedOnPhoneNo:(NSString *)phoneNo{
    
    NSDictionary * customerInfoDic;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt =nil;
    
    @try {
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSString * query = [NSString stringWithFormat:@"select first_name,last_name,phone_number,email,house_no,street,locality,land_mark,city,pin_no from customers where phone_number='%@'",phoneNo];
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    NSString  * nameStr = @"";
                    NSString  * lastNameStr = @"";
                    NSString  * phoneStr = @"";
                    NSString  * emailStr = @"";
                    NSString  * houseNoStr = @"";
                    NSString  * streetStr = @"";
                    NSString  * localityStr = @"";
                    NSString  * landMarkStr = @"";
                    NSString  * cityStr = @"";
                    NSString  * pin_noStr = @"";
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,0))
                        nameStr = @((char*)sqlite3_column_text(localSelectStmt,0));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,1))
                        lastNameStr = @((char*)sqlite3_column_text(localSelectStmt,1));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,2))
                        phoneStr = @((char*)sqlite3_column_text(localSelectStmt,2));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,3))
                        emailStr = @((char*)sqlite3_column_text(localSelectStmt,3));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,4))
                        houseNoStr = @((char*)sqlite3_column_text(localSelectStmt,4));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,5))
                        streetStr = @((char*)sqlite3_column_text(localSelectStmt,5));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,6))
                        localityStr = @((char*)sqlite3_column_text(localSelectStmt,6));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,7))
                        landMarkStr = @((char*)sqlite3_column_text(localSelectStmt,7));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,8))
                        cityStr = @((char*)sqlite3_column_text(localSelectStmt,8));
                    
                    if( (char *)sqlite3_column_text(localSelectStmt,9))
                        pin_noStr = @((char*)sqlite3_column_text(localSelectStmt,9));
                    
                    customerInfoDic = [NSDictionary dictionaryWithObjects:@[phoneStr,emailStr,streetStr,localityStr,cityStr,pin_noStr,nameStr,lastNameStr,houseNoStr,landMarkStr] forKeys:@[CUSTOMER_PHONE,CUSTOMER_MAIL,CUSTOMER_STREET,CUSTOMER_LOCALITY,CUSTOMER_CITY,CUSTOMER_PIN_NO,kFirstName,CUSTOMER_LAST_NAME,HOUSE_NO,LAND_MARK]];
                }
                sqlite3_finalize(localSelectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
        }
        else{
            
        }
    }
    @catch (NSException *exception) {
        
    } @finally {
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        
        if(customerInfoDic == nil)
            customerInfoDic = [[NSDictionary alloc] init];
        
        return customerInfoDic;
    }
}

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         06/09/2018
 * @method       saveCustomerDetailsBasedOnPhone:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       NSDictionary
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)saveCustomerDetailsBasedOnPhone:(NSDictionary *)custDetails{
    
    @try {
        NSMutableDictionary * tempDic = [custDetails mutableCopy];
        [tempDic setValue:[NSNumber numberWithBool:TRUE] forKey:NEED_TO_UPDATE_ONLINE];
        //        NSArray * tempArr = [NSArray arrayWithObjects:tempDic, nil];
        [self saveCustomersList:[NSArray arrayWithObjects:tempDic, nil]];
    }
    @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date         06/09/2018
 * @method       updateCustomerDetailsBasedOnStatus:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       NSDictionary
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *  @
 */

-(void)updateCustomerDetailsBasedOnStatus:(int)status{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelect_update_Stmt = nil;
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        int customerStatusCount = 0;
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            
            NSString * query = [NSString stringWithFormat:@"select count (*) from customers where need_to_update_online != '0'"];
            
            const char * sqlStatement = query.UTF8String;
            
            
            
            
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                //                if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                while (sqlite3_step(localSelect_update_Stmt) == SQLITE_ROW) {
                    
                    customerStatusCount = sqlite3_column_int(localSelect_update_Stmt, 0);
                }
                //                else {
                //
                //                }
                sqlite3_reset(localSelect_update_Stmt);
                //                sqlite3_finalize(localSelect_update_Stmt);
                localSelect_update_Stmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
            
            NSMutableArray * phoneNumberArr = [[NSMutableArray alloc]init];
            
            if(customerStatusCount){
                query = [NSString stringWithFormat:@"select phone_number from customers where need_to_update_online !='0'"];
                sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(localSelect_update_Stmt) == SQLITE_ROW) {
                        
                        NSString  * listOfPhoneNumbers = @((char *)sqlite3_column_text(localSelect_update_Stmt, 0));
                        [phoneNumberArr addObject:listOfPhoneNumbers];
                    }
                    
                    sqlite3_reset(localSelect_update_Stmt);
                    //                sqlite3_finalize(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            
            for(int i = 0; i < [phoneNumberArr count]; i++){
                
                NSString * phoneNoStr = [phoneNumberArr objectAtIndex:i];
                BOOL isToChangeTheStatus = false;
                
                query = [NSString stringWithFormat:@"select first_name,last_name,phone_number,email,house_no,street,locality,land_mark,city,pin_no from customers where phone_number='%@'",phoneNoStr];
                sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(localSelect_update_Stmt) == SQLITE_ROW) {
                        
                        NSString  * nameStr = @"";
                        NSString  * lastNameStr = @"";
                        NSString  * phoneStr = @"";
                        NSString  * emailStr = @"";
                        NSString  * houseNoStr = @"";
                        NSString  * streetStr = @"";
                        NSString  * localityStr = @"";
                        NSString  * landMarkStr = @"";
                        NSString  * cityStr = @"";
                        NSString  * pin_noStr = @"";
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,0))
                            nameStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,0));
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,1))
                            lastNameStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,1));
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,2))
                            phoneStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,2));
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,3))
                            emailStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,3));
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,4))
                            houseNoStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,4));
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,5))
                            streetStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,5));
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,6))
                            localityStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,6));
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,7))
                            landMarkStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,7));
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,8))
                            cityStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,8));
                        
                        if( (char *)sqlite3_column_text(localSelect_update_Stmt,9))
                            pin_noStr = @((char*)sqlite3_column_text(localSelect_update_Stmt,9));
                        
                        NSDictionary * menuDeatilsRequestDic = [NSDictionary dictionaryWithObjects:@[phoneStr,emailStr,streetStr,localityStr,cityStr,pin_noStr,nameStr,lastNameStr,houseNoStr,landMarkStr,[RequestHeader getRequestHeader],presentLocation,presentLocation] forKeys:@[CUSTOMER_PHONE,CUSTOMER_MAIL,CUSTOMER_STREET,CUSTOMER_LOCALITY,CUSTOMER_CITY,CUSTOMER_PIN_NO,kFirstName,CUSTOMER_LAST_NAME,HOUSE_NO,LAND_MARK,REQUEST_HEADER,OUTLET_NAME,OUTLET_LOCATION]];
                        
                        
                        NSError  * err;
                        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
                        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                        
                        WebServiceController * serviceController = [WebServiceController new];
                        serviceController.customerServiceDelegate = self;
                        isToChangeTheStatus = [serviceController getCustomerListThroughSynchronousRequest:customerPurchasesRequestString];
                        
                    }
                    //                        sqlite3_finalize(localSelect_update_Stmt);
                    sqlite3_reset(localSelect_update_Stmt);
                    sqlite3_reset(localSelect_update_Stmt);
                    //                sqlite3_finalize(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                    
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
                
                if(isToChangeTheStatus){
                    
                    [self changeCustomerUploadStatus:phoneNoStr statusValue:0];
                }
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
    }
    @finally {
        
        sqlite3_finalize(localSelect_update_Stmt);
        sqlite3_close(localDatabase);
    }
}


/**
 * @description  In this method we are changing customer sync value in local DB....
 * @date         06/09/2018
 * @method       changeCustomerUploadStatus:-- statusValue:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       NSDictionary
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)changeCustomerUploadStatus:(NSString *)customerPhoneNo statusValue:(int)newStatus{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelect_update_Stmt = nil;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            
            NSString * query = [NSString stringWithFormat:@"update  customers set  need_to_update_online = '%i' where phone_number = '%@'",newStatus,customerPhoneNo];
            
            const char * sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                    
                }
                else {
                    
                }
                
                sqlite3_finalize(localSelect_update_Stmt);
                localSelect_update_Stmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        //            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //            [alert show];
    }
    @finally {
        
        sqlite3_finalize(localSelect_update_Stmt);
        sqlite3_close(localDatabase);
    }
}

/**
 * @description  In this method we are handling the servcie call sucess response of get the update customer....
 * @date         06/09/2018
 * @method       updateCustomerDetailsSuccessResponseReturnStatus:--
 * @author       Srinivasulu
 * @param        NSDictionary
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)updateCustomerDetailsSuccessResponseReturnStatus:(NSDictionary*)sucessDictionary{
    
    return true;
}

/**
 * @description  In this method we are handling the servcie call error response of get the udpateCustomerDetails....
 * @date         06/09/2018
 * @method       updateCustomerDetailsErrorResponseReturnStatus:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)updateCustomerDetailsErrorResponseReturnStatus:(NSString*)errorResponse{
    
    return false;
}

#pragma -mark start methods related to customer handling perviously -- Note below methods can be removed after changing Campaign management in offline -- not confirmed....

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date
 * @method       saveCustomersList:--
 * @author
 * @param        NSString
 * @param
 *
 * @return       NSDictionary
 *
 * @modified By Srinivasulu on 06/09/2018
 * @reason      added the commits.. this method is using in pervious.
 *
 * @verified By
 * @verified On
 *
 */

-(NSDictionary *)getCustomerDetails:(NSString *)phoneNo{
    
    NSMutableDictionary * result = [NSMutableDictionary new];
    int count = 0;
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            
            query = [NSString stringWithFormat:@"select * from customer_details where phone_number='%@'",phoneNo];
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    count = sqlite3_column_int(selectStmt, 0);
                    
                    NSString  *phone = @((char *)sqlite3_column_text(selectStmt, 3));
                    NSString  *email = @((char *)sqlite3_column_text(selectStmt, 2));
                    
                    NSString  *street = @((char *)sqlite3_column_text(selectStmt, 5));
                    NSString  *locality = @((char *)sqlite3_column_text(selectStmt,6));
                    NSString  *city = @((char *)sqlite3_column_text(selectStmt,7));
                    NSString  *pin_no = @((char *)sqlite3_column_text(selectStmt,8));
                    
                    NSString *name = @((char*)sqlite3_column_text(selectStmt,0));
                    
                    //added by Srinivausulu on 04/05/2017....
                    
                    NSString * lastName = @"";
                    NSString * houseNo = @"";
                    NSString * landMark = @"";
                    
                    
                    if( (char *)sqlite3_column_text(selectStmt,2))
                        lastName = @((char*)sqlite3_column_text(selectStmt,2));
                    
                    if( (char *)sqlite3_column_text(selectStmt,18))
                        houseNo = @((char*)sqlite3_column_text(selectStmt,18));
                    
                    if( (char *)sqlite3_column_text(selectStmt,19))
                        landMark = @((char*)sqlite3_column_text(selectStmt,19));
                    
                    
                    //upto here on 03/05/2017....
                    
                    
                    //changed by Srinivasulu on 03/05/2017....
                    
                    //                        result = [NSMutableDictionary dictionaryWithObjects:[NSArray arrayWithObjects:phone,email,street,locality,city,pin_no,name, nil] forKeys:[NSArray arrayWithObjects:@"phone",@"email",@"street",@"locality",@"city",@"pin_no",@"name", nil]];
                    
                    result = [NSMutableDictionary dictionaryWithObjects:@[phone,email,street,locality,city,pin_no,name,lastName,houseNo,landMark] forKeys:@[@"phone",@"email",@"street",@"locality",@"city",@"pin_no",@"name",@"lastName",@"houseNo",@"landMark"]];
                    
                    //upto here on 03/05/2017....
                    
                    
                }
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
}

/**
 * @description  In this method we are saving the reponse received from services call in local DB....
 * @date
 * @method       saveCustomerDetails:--
 * @author
 * @param        NSString
 * @param
 *
 * @return       NSDictionary
 *
 * @modified By Srinivasulu on 06/09/2018
 * @reason      added the commits.. this method is using in pervious.
 *
 * @verified By
 * @verified On
 *
 */

-(void)saveCustomerDetails:(NSDictionary*)custDetails{
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL status = FALSE;
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                const char * sqlStatement;
                
                
                
                //changed by Srinivasulu on 03/05/2017....
                
                char *errMsg;
                
                //                sqlStatement = "SELECT * FROM sqlite_master WHERE name ='customer_details' and type='table'";
                //
                //                NSLog(@"------------------------%d", sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg));
                //
                //                sqlStatement = "SELECT * FROM sqlite_master WHERE name ='customer_detail' and type='table'";
                //
                //                NSLog(@"----------------------------%d", sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg));
                //
                //                sqlStatement = "SELECT coutn(*) FROM sqlite_master WHERE name ='customer_details' and type='table'";
                //
                //                NSLog(@"----------------------------%d", sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg));
                //
                //                sqlStatement = "SELECT coutn(*) FROM sqlite_master WHERE name ='customer' and type='table'";
                //
                //                NSLog(@"----------------------------%d", sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg));
                //
                //
                //
                //                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                //                    == SQLITE_OK) {
                //
                //                    NSLog(@"Success");
                //
                //                }
                
                
                //with new fields
                //houseNo -- landMark -- lastName
                //                sqlStatement = "create table if not exists customer_details(first_name text, last_name text, email text,phone_number text PRIMARY KEY,status text,street text,locality text,city text,pin_no text,gender text,age text,notifications text,rating text,cust_feedback text,shopping_count text,shopping_amount text,country text,houseNo text,landMark text)";
                
                //customer_gstin
                
                sqlStatement = "create table if not exists customer_details(first_name text, last_name text, email text,phone_number text PRIMARY KEY,status text,street text,locality text,city text,pin_no text,gender text,age text,notifications text,rating text,cust_feedback text,shopping_count text,shopping_amount text,country text,houseNo text,landMark text,customer_gstin text)";
                
                
                //                char *errMsg;
                //                const char * sqlStatement = "create table if not exists customer_details(first_name text, last_name text, email text,phone_number text PRIMARY KEY,status text,street text,locality text,city text,pin_no text,gender text,age text,notifications text,rating text,cust_feedback text,shopping_count text,shopping_amount text,country text)";
                
                //upto here on 03/05/2017....
                
                //                NSLog(@"----------------------------%d", sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg));
                
                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                    == SQLITE_OK) {
                    
                    NSLog(@"Success");
                    
                }
                
            }
            
        }
        
        // NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
        
        
        
        //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
        //
        //            if (deleteStmt == nil) {
        //                const char *sqlStatement = "delete from sku_price_list";
        //
        //                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
        //
        //                    if(SQLITE_DONE != sqlite3_step(deleteStmt))
        //                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
        //
        //                    sqlite3_reset(deleteStmt);
        //                }
        //
        //            }
        //
        //        }
        //  deleteStmt = nil;
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                
                //changed by Srinivasulu on 03/05/2017....
                
                //houseNo -- landMark -- lastName
                
                //                const char *sqlStatement = "insert or replace into customer_details(first_name, last_name,email,phone_number,status,street,locality,city,pin_no,gender,age,notifications,rating,cust_feedback,shopping_count,shopping_amount,country) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                //
                
                const char *sqlStatement =    "insert or replace into customer_details(first_name, last_name,email,phone_number,status,street,locality,city,pin_no,gender,age,notifications,rating,cust_feedback,shopping_count,shopping_amount,country,houseNo,landMark) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                
                //upto here on 03/05/2017....
                
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    
                    sqlite3_bind_text(insertStmt, 1, [[custDetails valueForKey:@"name"] UTF8String], -1, SQLITE_TRANSIENT);
                    sqlite3_bind_text(insertStmt, 3, [[custDetails valueForKey:@"email"] UTF8String], -1, SQLITE_TRANSIENT);
                    sqlite3_bind_text(insertStmt, 4, [[custDetails valueForKey:@"phone"] UTF8String], -1, SQLITE_TRANSIENT);
                    sqlite3_bind_text(insertStmt, 9, [[custDetails valueForKey:@"pin_no"] UTF8String], -1, SQLITE_TRANSIENT);
                    sqlite3_bind_text(insertStmt, 5, [[custDetails valueForKey:@"status"] UTF8String], -1, SQLITE_TRANSIENT);
                    
                    sqlite3_bind_text(insertStmt,6, [[custDetails valueForKey:@"street"] UTF8String], -1, SQLITE_TRANSIENT);
                    sqlite3_bind_text(insertStmt,7, [[custDetails valueForKey:@"locality"] UTF8String], -1, SQLITE_TRANSIENT);
                    sqlite3_bind_text(insertStmt,8, [[custDetails valueForKey:@"city"] UTF8String], -1, SQLITE_TRANSIENT);
                    
                    //added by Srinivausulu on 03/05/2017....
                    
                    if([custDetails.allKeys containsObject:@"lastName"])
                        sqlite3_bind_text(insertStmt, 2, [[custDetails valueForKey:@"lastName"] UTF8String], -1, SQLITE_TRANSIENT);
                    
                    if([custDetails.allKeys containsObject:@"houseNo"])
                        sqlite3_bind_text(insertStmt, 18, [[custDetails valueForKey:@"houseNo"] UTF8String], -1, SQLITE_TRANSIENT);
                    
                    if([custDetails.allKeys containsObject:@"landMark"])
                        sqlite3_bind_text(insertStmt, 19, [[custDetails valueForKey:@"landMark"] UTF8String], -1, SQLITE_TRANSIENT);
                    
                    //upto here on 03/05/2017....
                    
                    if(SQLITE_DONE != sqlite3_step(insertStmt)){
                        status = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        
                    }
                    else {
                        status = true;
                        
                    }
                    
                    sqlite3_reset(insertStmt);
                    
                    
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database));
                    
                    
                }
                
            }
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
    }
}

#pragma -mark start product_master related downloading and retriving methods -- Note below methods can be removed after changing Campaign management in offline....

/**
 * @description  In this method we are calling the web service with startIndex inorder to get product_master data....
 * @date
 * @method       getProducts:--  totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getProducts:(int)startIndex totalRecords:(int)totalRecords {
    
    BOOL status = false;
    
    @try {
        
        NSMutableDictionary * categorydic = [[NSMutableDictionary alloc] init];
        
        [categorydic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [categorydic setValue:[NSString stringWithFormat:@"%d",startIndex] forKey:PAGE_NO];
        [categorydic setValue:[NSString stringWithFormat:@"%d",totalRecords] forKey:MAX_RECORDS];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:categorydic options:0 error:&err];
        NSString * getProductsJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * webServiceController = [WebServiceController new];
        webServiceController.productMasterDelegate = self;
        status = [webServiceController getProducts:getProductsJsonString];
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from services....
 * @date
 * @method       getProductsSuccessResponse:--
 * @author
 * @param        NSDictionaty
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getProductsSuccessResponse:(NSDictionary *)successDictionary{
    
    BOOL status = false;
    
    @try {
        
        totalAvailableProducts  =  [[successDictionary valueForKey:TOTAL_BILLS]intValue];
        NSArray * productsList = [successDictionary valueForKey:SEARCH_RESULTS];
        
        status =  [self saveProductsList:productsList];
    }
    @catch (NSException * exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from service....
 * @date
 * @method       getProductsErrorResponse:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getProductsErrorResponse:(NSString *)errorResponse {
    BOOL status = false;
    
    @try{
        if ([errorResponse caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
            status =  TRUE;
        }
    }
    @catch (NSException * exception) {
        
        status = false;
    }
    @finally {
        
        return  status;
    }
}

/**
 * @description  In this method we are save products related informating in product_master....
 * @date
 * @method       saveProductsList:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveProductsList:(NSArray *)productsList {
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL status = FALSE;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            
            const char * sqlStatement  = "create table if not exists product_master(product_ID VARCHAR(50)NOT NULL,product_name VARCHAR(255) DEFAULT NULL,item_status VARCHAR(50) DEFAULT NULL,product_description VARCHAR(1000) DEFAULT NULL,category VARCHAR(100) DEFAULT NULL,sub_category VARCHAR(100) DEFAULT NULL,storage_location VARCHAR(50)  DEFAULT NULL,abc_category VARCHAR(50) DEFAULT NULL,retail_stocking_unit VARCHAR(50) DEFAULT NULL,lead_time_days  INT(11) DEFAULT NULL,primary_supplier VARCHAR(100) DEFAULT NULL,buy_UOM VARCHAR(30) DEFAULT NULL,buy_unit_price INT(11) DEFAULT NULL,sell_UOM VARCHAR(30) DEFAULT NULL,sell_unit_price INT(11) DEFAULT NULL,stock_in_hand VARCHAR(30) DEFAULT NULL,warehouse VARCHAR(100) DEFAULT NULL,min_stock FLOAT DEFAULT NULL, max_stock FLOAT DEFAULT NULL,re_order_point VARCHAR(30) DEFAULT NULL,Taxable CHAR(1) DEFAULT NULL,asset_category VARCHAR(100) DEFAULT NULL,warehouse_stocking_unit VARCHAR(50) DEFAULT NULL,updated_date VARCHAR(50) DEFAULT NULL,PRIMARY KEY(product_ID))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_MASTER Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char *sqlInsertStatement = "INSERT OR REPLACE into product_master(product_ID,product_name,item_status,product_description,category,sub_category,storage_location,abc_category,retail_stocking_unit,lead_time_days,primary_supplier,buy_UOM,buy_unit_price,sell_UOM,sell_unit_price,stock_in_hand,warehouse,min_stock,max_stock,re_order_point,Taxable,asset_category,warehouse_stocking_unit,updated_date) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (int i=0; i<productsList.count; i++) {
                    
                    NSDictionary *temp = productsList[i] ;
                    
                    
                    if ([temp.allKeys containsObject:PRODUCT_ID] && ![[temp valueForKey:PRODUCT_ID] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_text(localInsertStmt,1,  [[temp valueForKey:PRODUCT_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 1,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:PRODUCT_NAME] && ![[temp valueForKey:PRODUCT_NAME] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_text(localInsertStmt, 2,  [[temp valueForKey:PRODUCT_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 2,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:ITEM_STATUS] && ![[temp valueForKey:ITEM_STATUS] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 3,  [[temp valueForKey:ITEM_STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 3,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:product_description] && ![[temp valueForKey:product_description] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 4,  [[temp valueForKey:product_description] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 4,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:ITEM_CATEGORY] && ![[temp valueForKey:ITEM_CATEGORY] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 5,  [[temp valueForKey:ITEM_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 5,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:SUB_CATEGORY] && ![[temp valueForKey:SUB_CATEGORY] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 6,  [[temp valueForKey:SUB_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 6,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:STORAGE_LOCATION] && ![[temp valueForKey:STORAGE_LOCATION] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 7,  [[temp valueForKey:STORAGE_LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 7,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([temp.allKeys containsObject:ABC_CATEGORY] && ![[temp valueForKey:ABC_CATEGORY] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 8,  [[temp valueForKey:ABC_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 8,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:RETAIL_STOCKING_UNIT] && ![[temp valueForKey:RETAIL_STOCKING_UNIT] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 9,  [[temp valueForKey:RETAIL_STOCKING_UNIT] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 9,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([temp.allKeys containsObject:lead_time_days] && ![[temp valueForKey:lead_time_days] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 10,  [[temp valueForKey:lead_time_days] intValue]);
                    else
                        sqlite3_bind_text(localInsertStmt, 10,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    
                    if ([temp.allKeys containsObject:PRIMARY_SUPPLIER] && ![[temp valueForKey:PRIMARY_SUPPLIER] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 11,  [[temp valueForKey:PRIMARY_SUPPLIER] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 11,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([temp.allKeys containsObject:BUY_UOM] && ![[temp valueForKey:BUY_UOM] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 12,  [[temp valueForKey:BUY_UOM] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 12,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:BUY_UNIT_PRICE] && ![[temp valueForKey:BUY_UNIT_PRICE] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 13,  [[temp valueForKey:BUY_UNIT_PRICE] intValue]);
                    else
                        sqlite3_bind_int(localInsertStmt, 13,  0);
                    
                    if ([temp.allKeys containsObject:sell_uom] && ![[temp valueForKey:sell_uom] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 14,  [[temp valueForKey:sell_uom] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 14,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:SELL_UNIT_PRICE] && ![[temp valueForKey:SELL_UNIT_PRICE] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 15,  [[temp valueForKey:SELL_UNIT_PRICE] intValue]);
                    else
                        sqlite3_bind_int(localInsertStmt, 15,  0);
                    
                    if ([temp.allKeys containsObject:STOCK_IN_HAND] && ![[temp valueForKey:STOCK_IN_HAND] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 17,  [[temp valueForKey:STOCK_IN_HAND] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 17,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:WAREHOUSE] && ![[temp valueForKey:WAREHOUSE] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 18,  [[temp valueForKey:WAREHOUSE] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 18,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:MIN_STOCK] && ![[temp valueForKey:MIN_STOCK] isKindOfClass:[NSNull class]])
                        sqlite3_bind_double(localInsertStmt, 18,[[temp valueForKey:MIN_STOCK] floatValue]);
                    else
                        sqlite3_bind_double(localInsertStmt, 18, 0.00);
                    
                    if ([temp.allKeys containsObject:max_stock] && ![[temp valueForKey:max_stock] isKindOfClass:[NSNull class]])
                        sqlite3_bind_double(localInsertStmt, 19,[[temp valueForKey:max_stock] floatValue]);
                    else
                        sqlite3_bind_double(localInsertStmt, 19, 0.00);
                    
                    if ([temp.allKeys containsObject:RE_ORDER_POINT] && ![[temp valueForKey:RE_ORDER_POINT] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 20,  [[temp valueForKey:RE_ORDER_POINT] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 20,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:TAXABLE] && ![[temp valueForKey:TAXABLE] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 21,  [[temp valueForKey:TAXABLE] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 21,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:ASSET_CATEGORY] && ![[temp valueForKey:ASSET_CATEGORY] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 22,  [[temp valueForKey:ASSET_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 22,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:WAREHOUSE_STOCKING_UNIT] && ![[temp valueForKey:WAREHOUSE_STOCKING_UNIT] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 23,  [[temp valueForKey:WAREHOUSE_STOCKING_UNIT] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 23,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:UPDATED_Date] && ![[temp valueForKey:UPDATED_Date] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 24,  [[temp valueForKey:UPDATED_Date] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 24,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        status = FALSE;
                        NSLog(@"%s",sqlite3_errmsg(localDatabase));
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                        status = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                status = TRUE;
                NSLog(@"----Committed -- PRODUCT_MASTER ----");
            }
            else
            {
                status = FALSE;
                NSLog(@"----Commit -- Failed -- PRODUCT_MASTER ----");
            }
            sqlite3_finalize(localInsertStmt);
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally {
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return status;
    }
}

/**
 * @description  In this method we are getting the required field values from product_master....
 * @date
 * @method       getProducts:--  subCat:--
 * @author
 * @param        NSString
 * @param        NSString
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason --  added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableArray *)getProducts:(NSString *)categoryString subCat:(NSString *)subCategoryString {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            
            query = [NSString stringWithFormat:@"select distinct(product_ID) from product_master where category = '%@' and sub_category = '%@'",categoryString,subCategoryString];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                // int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSMutableDictionary *productList = [[NSMutableDictionary alloc]init];
                    
                    count = sqlite3_column_int(selectStmt, 0);
                    
                    NSString  * productID = [NSString stringWithFormat:@"%s",(const char*)sqlite3_column_text(selectStmt, 0)];
                    
                    productList = [NSMutableDictionary dictionaryWithObject:productID forKey:@"productId"];
                    
                    [result addObject:productList];
                }
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
}

#pragma -mark start product_category_master related downloading and retriving methods....

/**
 * @description  In this method we are calling the web service with startIndex inorder to get product_category_master data....
 * @date
 * @method       getProductCategories:--  totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getProductCategories:(int)startIndex totalRecords:(int)totalRecords{
    
    BOOL status = false;
    @try {
        
        NSMutableDictionary * categorydic = [[NSMutableDictionary alloc] init];
        
        [categorydic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [categorydic setValue:[NSString stringWithFormat:@"%d",startIndex] forKey:START_INDEX];
        [categorydic setValue:[NSString stringWithFormat:@"%d",totalRecords] forKey:MAX_RECORDS];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:categorydic options:0 error:&err];
        NSString * getProductsJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * webServiceController = [WebServiceController new];
        webServiceController.utilityMasterDelegate = self;
        status = [webServiceController getProductCategories:getProductsJsonString];
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from services....
 * @date
 * @method       getProductCategoriesSuccessResponse:--
 * @author
 * @param        NSDictionaty
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getProductCategoriesSuccessResponse:(NSDictionary *)successDictionary {
    BOOL status = false;
    
    @try {
        
        totalAvailableCategories = [[successDictionary valueForKey:@"totalRecords"]intValue];
        NSArray * categoryList = [successDictionary valueForKey:@"productDetails"];
        status =  [self saveCategoriesList:categoryList];
        
    }
    @catch (NSException * exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from service....
 * @date
 * @method       getProductsErrorResponse:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getProductCategoriesErrorResponse:(NSString *)errorResponse {
    
    BOOL status = false;
    @try {
        if ([errorResponse isEqualToString:@"No Categories Found"]) {
            status =  TRUE;
        }
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are save products related informating in product_category_master....
 * @date
 * @method       saveCategoriesList:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveCategoriesList:(NSArray *)categoriesList {
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL status = FALSE;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            
            const char *sqlStatement  = "create table if not exists product_category_master(category_name VARCHAR(50) NOT NULL,category_description VARCHAR(250)DEFAULT NULL,category_image VARCHAR(150)DEFAULT NULL,PRIMARY KEY(category_name))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                
                NSLog(@"---- PRODUCT_CATGORY_MASTER Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "INSERT OR REPLACE into product_category_master(category_name,category_description,category_image) Values(?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (int i=0; i<categoriesList.count; i++) {
                    
                    NSDictionary *temp = categoriesList[i] ;
                    
                    if ([temp.allKeys containsObject:kCategoryName] && ![[temp valueForKey:kCategoryName] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 1,  [[temp valueForKey:kCategoryName] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 1,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:CATEGORY_DESCRIPTION] && ![[temp valueForKey:CATEGORY_DESCRIPTION] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 2,  [[temp valueForKey:CATEGORY_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 2,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    //--image needs to be insert written by srinivasulu on 13/07/2018...
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        status = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                        status = true;
                    }
                    sqlite3_reset(localInsertStmt);
                }
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                status = TRUE;
                NSLog(@"----Committed -- PRODUCT_CATEGORY_MASTER ----");
            }
            else
            {
                status = FALSE;
                NSLog(@"----Commit -- Failed -- PRODUCT_CATEGORY_MASTER ----");
            }
            sqlite3_finalize(localInsertStmt);
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch (NSException *exception) {
        status = FALSE;
    }
    @finally {
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return status;
    }
}

/**
 * @description  In this method we are getting the required field values from product_category_master....
 * @date
 * @method       getCategoriesList
 * @author
 * @param
 * @param
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason --  added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableArray *)getCategoriesList {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    
    //commented by Srinivasulu on /09/2017....
    
    //    int count = 0;
    
    //upto here on 29/09/2017....
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            
            query = [NSString stringWithFormat:@"select category_name from product_category_master"];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                // int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSMutableDictionary *list = [[NSMutableDictionary alloc]init];
                    
                    NSString  *categoryName = @((char *)sqlite3_column_text(selectStmt, 0));
                    
                    list = [[NSMutableDictionary alloc]initWithObjects:@[categoryName] forKeys:@[@"categoryName"]];
                    
                    [result addObject:list];
                    
                }
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        
    }
    @finally {
        
        sqlite3_close(database);
    }
    return result;
    
}


#pragma -mark start product_subcategory_master related downloading and retriving methods....

/**
 * @description  In this method we are calling the web service with startIndex inorder to get product_subcategory_master data....
 * @date
 * @method       getSubCategories:--  totalRecords:--
 * @author
 * @param        int
 * @param        int
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getSubCategories:(int)startIndex totalRecords:(int)totalRecords{
    
    BOOL status = false;
    
    @try {
        
        NSMutableDictionary * categorydic = [[NSMutableDictionary alloc] init];
        
        [categorydic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [categorydic setValue:[NSString stringWithFormat:@"%d",startIndex] forKey:START_INDEX];
        [categorydic setValue:[NSString stringWithFormat:@"%d",totalRecords] forKey:MAX_RECORDS];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:categorydic options:0 error:&err];
        NSString * getProductsJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        //        NSLog(@"%@--json product Categories String--",getProductsJsonString);
        WebServiceController * webServiceController = [WebServiceController new];
        webServiceController.utilityMasterDelegate = self;
        status = [webServiceController getProductSubCategories:getProductsJsonString];
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from services....
 * @date
 * @method       getProductSubCategoriesSuccessResponse:--
 * @author
 * @param        NSDictionaty
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getProductSubCategoriesSuccessResponse:(NSDictionary *)successDictionary {
    
    BOOL status = false;
    @try {
        
        totalAvailableSubCategories  =  [[successDictionary valueForKey:@"totalRecords"]intValue];
        NSArray* subCategoryList = [successDictionary valueForKey:@"productDetails"];
        status =  [self saveSubCategories:subCategoryList];
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are handling the success response received from service....
 * @date
 * @method       getProductsErrorResponse:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- chaning returning value to final....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getProductSubCategoriesErrorResponse:(NSString *)errorResponse{
    
    BOOL status = false;
    
    @try {
        if ([errorResponse isEqualToString:@"No Categories Found"]) {
            status = TRUE;
        }
    }
    @catch (NSException *exception) {
        
        status = false;
    }
    @finally {
        
        return status;
    }
}

/**
 * @description  In this method we are save products related informating in product_subcategory_master....
 * @date
 * @method       saveSubCategories:--
 * @author
 * @param        NSArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveSubCategories:(NSArray *)subCategoryList {
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL status = FALSE;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            
            const char * sqlStatement  = "create table if not exists product_subcategory_master(subcategory_name VARCHAR(150),subcategory_description VARCHAR(250)DEFAULT NULL,category_name VARCHAR(200)DEFAULT NULL,PRIMARY KEY(subcategory_name))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- PRODUCT_SUB_CATEGORY Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "INSERT OR REPLACE into product_subcategory_master(subcategory_name,subcategory_description,category_name) Values(?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (int i=0; i<subCategoryList.count; i++) {
                    
                    NSDictionary *temp = subCategoryList[i] ;
                    
                    if ([temp.allKeys containsObject:kSubCategoryName] && ![[temp valueForKey:kSubCategoryName] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:kSubCategoryName] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:SUB_CAT_DESCRIPTION] && ![[temp valueForKey:SUB_CAT_DESCRIPTION] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 2,  [[temp valueForKey:SUB_CAT_DESCRIPTION] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:kCategoryName] && ![[temp valueForKey:kCategoryName] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 3,  [[temp valueForKey:kCategoryName] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        status = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                        status = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                status = TRUE;
                NSLog(@"----Committed -- PRODUCT_SUB_CATEGORY_MASTER ----");
            }
            else
            {
                status = FALSE;
                NSLog(@"----Commit -- Failed -- PRODUCT_SUB_CATEGORY_MASTER ----");
            }
            sqlite3_finalize(localInsertStmt);
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch (NSException *exception) {
        status = FALSE;
    }
    @finally {
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return status;
    }
}

/**
 * @description  In this method we are getting the required field values from product_subcategory_master....
 * @date
 * @method       getSubCategories:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason --  added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableArray *)getSubCategories:(NSString *)subCategoryString {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            
            query = [NSString stringWithFormat:@"select distinct(subcategory_name) from product_subcategory_master where category_name = '%@'",subCategoryString];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                // int count = sqlite3_column_count(selectStmt);
                
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSMutableDictionary *list = [[NSMutableDictionary alloc]init];
                    
                    count = sqlite3_column_int(selectStmt, 0);
                    
                    NSString  * subCategoryName = @((char *)sqlite3_column_text(selectStmt, 0));
                    
                    list = [[NSMutableDictionary alloc]initWithObjects:@[subCategoryName] forKeys:@[@"subcategoryName"]];
                    
                    //                    [list setObject:subCategoryName forKey:@"subcategoryName"];
                    
                    [result addObject:list];
                }
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    @finally {
        
        sqlite3_close(database);
    }
    return result;
}


#pragma -mark start loyalty_cards related downloading and retriving methods....


/**
 * @description  Here we are calling loyalty card download service to get loyalty tables URL's  ....
 * @date         10/05/2019
 * @method       getLoyaltyCardDownloadDetailsInCSVFileForm:--
 * @author       Roja
 * @param
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getLoyaltyCardDownloadDetailsInCSVFileForm{
    
    BOOL status = false;
    
    @try {
        
//        NSArray *loyaltyKeys = @[@"loyaltyCardNumber", @"loyaltyProgramNumber", @"phoneNum", REQUEST_HEADER, START_DATE, END_DATE, FILE_REQUIRED];
//
//        NSArray * loyaltyObjects = @[@"", @"", @"", [RequestHeader getRequestHeader], @"", @"", [NSNumber numberWithBool:isFileDownload]];
        
        NSArray *loyaltyKeys = @[REQUEST_HEADER]; //, START_DATE
        NSArray * loyaltyObjects = @[[RequestHeader getRequestHeader]]; //, @""
        
        NSUserDefaults *defaults = [[NSUserDefaults alloc] init];
        
//        if ([[defaults valueForKey:LAST_LOYALTY_CARDS_UPDATED_DATE] length]){
//
//            NSLog(@"----LOYALTY_CARDS----Download----%@",[defaults valueForKey:LAST_LOYALTY_CARDS_UPDATED_DATE]);
//             loyaltyObjects = @[[RequestHeader getRequestHeader], [NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_LOYALTY_CARDS_UPDATED_DATE]]];
//        }
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        WebServiceController * controller = [[WebServiceController alloc] init];
        controller.loyaltyCardServcDelegate = self;
        // which call is correct need to check syncronous or asyncronous call?
         status = [controller getLoyaltyCardDownloadsDetails:loyaltyString];
        
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}


/**
 * @description  Here we Handling Error response of getLoyaltyCardDownload   ....
 * @date         10/05/2019
 * @method       getLoyaltyCardDownloadDetailsErrorResponse:--
 * @author       Roja
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)getLoyaltyCardDownloadDetailsErrorResponse:(NSString *)failureString{
    
    BOOL status = false;
    
    @try { if ([failureString caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
        
        status = TRUE;
    }
    } @catch (NSException *exception) {
        
        status = false;
        
    } @finally {
        
        return status;
    }
}



/**
 * @description  Here we Handling success response of getLoyaltyCardDownload   ....
 * @date         10/05/2019
 * @method       getLoyaltyCardDownloadDetailsSuccessResponse:--
 * @author       Roja
 * @param        NSDictionary
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)getLoyaltyCardDownloadDetailsSuccessResponse:(NSDictionary *)successDictionary{
    
    BOOL status = false;

    BOOL fileUrlStrStatus = false;
    BOOL customerLoyaltyStatus = false;
    BOOL loyaltyCardPurchaseStatus = false;
    BOOL loyaltyCardStatus = false;
    BOOL loyaltycardLedgeStatus = false;

    @try {
        
        if(isFileDownload){
            
            NSString * fileUrlStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:FILE_PATH] defaultReturn:@""];
            
            NSString * customerLoyaltyCardURLStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:CUSTOMER_LOYALTY_CARD_URL] defaultReturn:@""];
            
            NSString * loyaltyCardPurchaseRangesURLStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:LOYALTY_CARD_PURCHASE_RANGES_URL] defaultReturn:@""];
            
            NSString * loyaltyCardURLStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:LOYALTY_CARD_URL] defaultReturn:@""];
            
            NSString * loyaltycardLedgeURLStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:LOYALTY_CARD_LEDGER_URL] defaultReturn:@""];
            
        
            if(fileUrlStr.length){
                
                fileUrlStrStatus = [self DownLoadFileAndInsertItInLoadDB:fileUrlStr dataType:LOYALTY_CARD_MASTER];
            }
            if(customerLoyaltyCardURLStr.length){
                
                customerLoyaltyStatus = [self DownLoadFileAndInsertItInLoadDB:customerLoyaltyCardURLStr dataType:CUSTOMER_LOYALTY_CARD];
            }
            if(loyaltyCardPurchaseRangesURLStr.length){
                
                loyaltyCardPurchaseStatus = [self DownLoadFileAndInsertItInLoadDB:loyaltyCardPurchaseRangesURLStr dataType:LOYALTY_CARD_PURCHASE_RANGE];
            }
            if(loyaltyCardURLStr.length){
                
                loyaltyCardStatus = [self DownLoadFileAndInsertItInLoadDB:loyaltyCardURLStr  dataType:LOYALTY_CARD];
            }
            if(loyaltycardLedgeURLStr.length){
                
                loyaltycardLedgeStatus = [self DownLoadFileAndInsertItInLoadDB:loyaltycardLedgeURLStr dataType:LOYALTY_CARD_LEDGER];
            }
        }
        
    } @catch (NSException *exception) {
        
        status = false;
        
    } @finally {
     
        if(fileUrlStrStatus && customerLoyaltyStatus && loyaltyCardPurchaseStatus && loyaltyCardStatus && loyaltycardLedgeStatus){
            status = true;
        }
        
        return status;
    }
    
}


/**
 * @description  In this method we are  saving loyalty_card related informating in loyalty_card table....
 * @date         10/05/2019
 * @method       saveLoyalytyCardDetailsFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveLoyalytyCardDetailsFromCSVFile:(NSArray *)loyaltyCardsInfoArr {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- LOYALTY_CARD----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createLoyaltyCardsSqlStatement  = "create table if not exists 'loyalty_cards' (`loyalty_card_number` VARCHAR(50) NOT NULL, `assigned_status` TINYINT(5) NOT NULL, `card_status` TINYINT(5) NOT NULL, `loyalty_program_number` VARCHAR(50) NOT NULL, `card_id` VARCHAR(50) NULL DEFAULT NULL, `otp_required` TINYINT(4) NULL DEFAULT '0', `assigned_cust_Id` CHAR(12) NULL DEFAULT NULL, `start_date` DATETIME NULL DEFAULT NULL, `end_date` DATETIME NULL DEFAULT NULL, `offline_loyalty_sync_status` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY (`loyalty_card_number`))";
            
            if (sqlite3_exec(localDatabase, createLoyaltyCardsSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- LOYALTY_CARDS TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertLoyaltyCardsSqlStatement = "INSERT OR REPLACE into loyalty_cards(loyalty_card_number, assigned_status, card_status, loyalty_program_number, card_id, otp_required, assigned_cust_Id, start_date, end_date, offline_loyalty_sync_status) Values(?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardsSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * loyaltyCardsStr in loyaltyCardsInfoArr) {
                    
                    NSArray * loyaltyCardsArr = [loyaltyCardsStr componentsSeparatedByString:@","];
                    
                    if([loyaltyCardsArr count] >= 9){ // doubt
                        
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 2, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:1] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_int(localInsertStmt, 3, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:2] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 6, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:5] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_text(localInsertStmt, 7, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:6] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 8, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:7] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 9, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:8] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_int(localInsertStmt, 10, 0); // sync to online flag..putting default value

                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"loyalty_cards becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- LOYALTY_CARDS ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- LOYALTY_CARDS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- LOYALTY_CARD----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}


/**
 * @description  In this method we are  saving loyalty_card_master related informating in loyalty_card_master table....
 * @date         10/05/2019
 * @method       saveLoyalytyCardMasterFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveLoyalytyCardMasterFromCSVFile:(NSArray *)loyaltyCardsMasterInfoArr { //NSMutableArray ||  NSArray
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- LOYALTY_CARDS_MASTER----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createLoyaltyCardMasterSqlStatement  = "create table if not exists 'loyalty_card_master' (`loyalty_program_number` VARCHAR(20) NOT NULL, `loyalty_program_name` VARCHAR(50) NOT NULL, `loyality_program_description` VARCHAR(255) NULL DEFAULT NULL, `loyalty_card_type` VARCHAR(30) NOT NULL, `valid_from` DATETIME NOT NULL, `valid_to` DATETIME NOT NULL, `otp_requirement` TINYINT(4) NULL DEFAULT NULL, `start_date` DATE NULL DEFAULT NULL, `end_date` DATE NULL DEFAULT NULL, `reward_life_span` INT(8) NULL DEFAULT NULL, `validity_period` INT(8) NULL DEFAULT NULL, `reward_type` VARCHAR(10) NOT NULL, `reward_criteria` VARCHAR(30) NULL DEFAULT NULL, `reward_conversion_ratio` FLOAT NULL DEFAULT NULL, `status` CHAR(10) NOT NULL, `created_date` DATE NULL DEFAULT NULL, `updated_date` DATE NULL DEFAULT NULL, `user_name` VARCHAR(30) NULL DEFAULT NULL, `role_name` VARCHAR(30) NULL DEFAULT NULL, `no_of_cards` INT(10) NULL DEFAULT NULL, `auto_issue` TINYINT(1) NULL DEFAULT NULL, `base_points` DECIMAL(10,2) NULL DEFAULT '0.00', `min_redeem_points` DECIMAL(10,2) NULL DEFAULT '0.00', `min_claim_points` DECIMAL(10,2) NOT NULL, PRIMARY KEY (`loyalty_program_number`))";
            
            if (sqlite3_exec(localDatabase, createLoyaltyCardMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- loyalty_card_master TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            
            const char * InsertLoyaltyCardMasterSqlStatement = "INSERT OR REPLACE into loyalty_card_master(loyalty_program_number, loyalty_program_name, loyality_program_description, loyalty_card_type, valid_from, valid_to, otp_requirement, start_date, end_date, reward_life_span, validity_period, reward_type, reward_criteria, reward_conversion_ratio, status, created_date, updated_date, user_name, role_name, no_of_cards, auto_issue, base_points, min_redeem_points, min_claim_points) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * loyaltyCardsStr in loyaltyCardsMasterInfoArr) { // doubt
                    
                    NSArray * loyaltyCardsArr = [loyaltyCardsStr componentsSeparatedByString:@","]; // doubt
                    
                    if([loyaltyCardsArr count] >= 24){ // doubt
                        
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_int(localInsertStmt, 7, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:6] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_text(localInsertStmt, 8, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:7] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 9, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:8] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 10, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:9] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_int(localInsertStmt, 11, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:10] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_text(localInsertStmt, 12, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:11] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 13, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:12] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_double(localInsertStmt, 14, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:13] defaultReturn:@"0"] doubleValue]);

                        sqlite3_bind_int(localInsertStmt, 15, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:14] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_text(localInsertStmt, 16, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:15] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 17, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:16] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 18, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:17] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 19, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:18] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 20, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:19] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_int(localInsertStmt, 21, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:20] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_double(localInsertStmt, 22, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:21] defaultReturn:@"0"] doubleValue]);
                        
                        sqlite3_bind_double(localInsertStmt, 23, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:22] defaultReturn:@"0"] doubleValue]);
                        
                        sqlite3_bind_double(localInsertStmt, 24, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:23] defaultReturn:@"0"] doubleValue]);

                        
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"loyalty_cards becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- LOYALTY_CARDS_MASTER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- LOYALTY_CARDS_MASTER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- LOYALTY_CARDS_MASTER----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}


/**
 * @description  In this method we are  saving customer_loyalty_cards related informating in customer_loyalty_cards table....
 * @date         10/05/2019
 * @method       saveCustomerLoyaltyCardFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveCustomerLoyaltyCardFromCSVFile:(NSArray *)customerLoyaltyCardsInfoArr { //NSMutableArray ||  NSArray
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- CUSTOMER_LOYALTY_CARDS----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createCustomerLoyaltyCardsSqlStatement  = "create table if not exists 'customer_loyalty_cards' (`loyalty_card_number` VARCHAR(50) NOT NULL, `customer_name` VARCHAR(250) NULL DEFAULT NULL, `phone_num` VARCHAR(15) NOT NULL, `email` VARCHAR(50) NULL DEFAULT NULL, `loyalty_program_number` VARCHAR(50) NOT NULL, `card_id` VARCHAR(25) NOT NULL, `points_earned` INT(11) NULL DEFAULT '0', `points_used` INT(11) NULL DEFAULT '0', `points_remaining` INT(11) NULL DEFAULT '0', `cash` FLOAT NULL DEFAULT NULL, `id_card_type` VARCHAR(50) NULL DEFAULT NULL, `id_card_number` VARCHAR(50) NULL DEFAULT NULL, `status` TINYINT(1) NULL DEFAULT '0', `issued_on` DATETIME NULL DEFAULT CURRENT_TIMESTAMP, `issued_to` DATETIME NULL DEFAULT NULL, `offline_loyalty_sync_status` TINYINT(4) NULL DEFAULT '0', `need_to_update_online` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY ('loyalty_card_number'))";
            // offline_loyalty_sync_statu - (taking a static flag) if its true then need to issue in online also..
            //need_to_update_online - (taking a static flag) if its true then need to update/sync to online..
            
            
            if (sqlite3_exec(localDatabase, createCustomerLoyaltyCardsSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- customer_loyalty_cards TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            
            const char * InsertCustomerLoyaltyCardsSqlStatement = "INSERT OR REPLACE into customer_loyalty_cards(loyalty_card_number, customer_name, phone_num, email, loyalty_program_number, card_id, points_earned, points_used, points_remaining, cash, id_card_type, id_card_number, status, issued_on, issued_to, offline_loyalty_sync_status, need_to_update_online) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertCustomerLoyaltyCardsSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * loyaltyCardsStr in customerLoyaltyCardsInfoArr) {
                    
                    NSArray * loyaltyCardsArr = [loyaltyCardsStr componentsSeparatedByString:@","];
                    
                    if([loyaltyCardsArr count] >= 15){ // doubt
                        
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//loy_num
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//cust_name
                        
                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//phn_no
                        
                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//email
                        
                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);// prog_num
                        
                        sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//card_id
                        
                        sqlite3_bind_int(localInsertStmt, 7, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:6] defaultReturn:@"0"] intValue]);//pts_earned
                        
                        sqlite3_bind_int(localInsertStmt, 8, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:7] defaultReturn:@"0"] intValue]);// pts_used

                        sqlite3_bind_int(localInsertStmt, 9, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:8] defaultReturn:@"0"] intValue]);//pts_remaining

                        sqlite3_bind_double(localInsertStmt, 10, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:9] defaultReturn:@"0.0"] doubleValue]);//cash
                        
                        sqlite3_bind_text(localInsertStmt, 11, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:10] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//id_card_type

                        sqlite3_bind_text(localInsertStmt, 12, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:11] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//id_card_num

                        sqlite3_bind_int(localInsertStmt, 13, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:12] defaultReturn:@"0"] intValue]);//status

                        sqlite3_bind_text(localInsertStmt, 14, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:13] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//issued_on
                        
                        sqlite3_bind_text(localInsertStmt, 15, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:14] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//issued_to
                        
                        sqlite3_bind_int(localInsertStmt, 16, 0);// default -0 (status flag for issue)

                        sqlite3_bind_int(localInsertStmt, 17, 0);// default -0 (status flag for update/sync)

                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"loyalty_cards becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- CUSTOMER_LOYALTY_CARDS ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- CUSTOMER_LOYALTY_CARDS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- CUSTOMER_LOYALTY_CARDS----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}



/**
 * @description  In this method we are  saving saveLoyaltyPurchaseRanges related informating in loyalty_purchase_ranges table....
 * @date         10/05/2019
 * @method       saveLoyaltyCardPurchaseRangesFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveLoyaltyCardPurchaseRangesFromCSVFile:(NSArray *)loyaltyCardsPurchaseRangesArr { //NSMutableArray ||  NSArray
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- LOYALTY_CARDS_PURCHASE_RANGES----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createLoyaltyCardPurchaseRangeSqlStatement  = "create table if not exists 'loyalty_purchase_ranges' ( `sno` INT(11) NOT NULL, `loyalty_program_number` VARCHAR(50) NULL DEFAULT NULL, `min_purchase_value` DECIMAL(10,2) NULL DEFAULT NULL, `max_purchase_value` DECIMAL(10,2) NULL DEFAULT NULL, `reward_type` VARCHAR(20) NULL DEFAULT NULL, `reward_value` DECIMAL(10,2) NULL DEFAULT '0.00', `reward_criteria` VARCHAR(20) NULL DEFAULT NULL)";
            
            if (sqlite3_exec(localDatabase, createLoyaltyCardPurchaseRangeSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- loyalty_purchase_ranges TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertLoyaltyCardPurchaseRangeSqlStatement = "INSERT OR REPLACE into loyalty_purchase_ranges(sno, loyalty_program_number, min_purchase_value, max_purchase_value, reward_type, reward_value, reward_criteria) Values(?,?,?,?,?,?,?)";
            
//            // SNo value increment Process..
//            const char * sqlSelectStatement = "select sno from loyalty_purchase_ranges order by sno DESC LIMIT 1";
//
//            NSString * sNoValue = @"1";
//
//            if(sqlite3_prepare_v2(localDatabase, sqlSelectStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
//
//                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
//
//                    sNoValue = @((char *)sqlite3_column_text(localSelectStmt, 0));
//                    sNoValue = [NSString stringWithFormat:@"%d", sNoValue.intValue+1];
//                }
//                sqlite3_reset(localSelectStmt);
//                localSelectStmt = nil;
//            }
//            //Upto here SNo value increment Process..
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardPurchaseRangeSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * loyaltyCardsStr in loyaltyCardsPurchaseRangesArr) { // doubt
                    
                    NSArray * loyaltyCardsArr = [loyaltyCardsStr componentsSeparatedByString:@","]; // doubt
                    
                    if([loyaltyCardsArr count] >= 7){ // doubt
                        
//                        sqlite3_bind_int(localInsertStmt, 1, sNoValue.intValue);
                        
                        sqlite3_bind_int(localInsertStmt, 1, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:0] defaultReturn:@"0"] intValue]);//sno
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_double(localInsertStmt, 3, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:2] defaultReturn:@"0"] doubleValue]);
                        
                        sqlite3_bind_double(localInsertStmt, 4, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:3] defaultReturn:@"0"] doubleValue]);

                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_double(localInsertStmt, 6, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:5] defaultReturn:@"0"] doubleValue]);

                        sqlite3_bind_text(localInsertStmt, 7, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:6] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

//                        sNoValue = [NSString stringWithFormat:@"%d",sNoValue.intValue+1];

                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"loyalty_cards becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed --  LOYALTY_CARDS_PURCHASE_RANGE ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- LOYALTY_CARDS_PURCHASE_RANGE ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- LOYALTY_CARDS_PURCHASE_RANGES----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}




/**
 * @description  In this method we are  saving LoyaltyCardLedger related informating in loyalty_card_ledger table....
 * @date         10/05/2019
 * @method       saveLoyaltyCardLedgerFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveLoyaltyCardLedgerFromCSVFile:(NSArray *)loyaltyCardLedgerArr { //NSMutableArray ||  NSArray
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- LOYALTY_CARDS_LEDGER----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createLoyaltyCardLedgerSqlStatement  = "create table if not exists 'loyalty_card_ledger' (`sno` INT(11) NOT NULL, `loyalty_card_number` VARCHAR(50) NULL DEFAULT NULL, `points_credited` INT(11) NULL DEFAULT '0', `points_debited` INT(11) NULL DEFAULT '0', `created_date` DATETIME NULL DEFAULT NULL, `updated_date` DATETIME NULL DEFAULT NULL, `points_remaining` INT(11) NULL DEFAULT '0', PRIMARY KEY (`sno`))";
            
            
            if (sqlite3_exec(localDatabase, createLoyaltyCardLedgerSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- loyalty_card_ledger TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            
            const char * InsertLoyaltyCardLedgerSqlStatement = "INSERT OR REPLACE into loyalty_card_ledger(sno, loyalty_card_number, points_credited, points_debited, created_date, updated_date, points_remaining) Values(?,?,?,?,?,?,?)";
            
//            // SNo value increment Process..
//            const char * sqlSelectStatement = "select sno from loyalty_card_ledger order by sno DESC LIMIT 1";
//
//            NSString * sNoValue = @"1";
//
//            if(sqlite3_prepare_v2(localDatabase, sqlSelectStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
//
//                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
//
//                    sNoValue = @((char *)sqlite3_column_text(localSelectStmt, 1));
//                    sNoValue = [NSString stringWithFormat:@"%d", sNoValue.intValue+1];
//                }
//                sqlite3_reset(localSelectStmt);
//                localSelectStmt = nil;
//            }
//            //Upto here SNo value increment Process..
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardLedgerSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * loyaltyCardsStr in loyaltyCardLedgerArr) { // doubt
                    
                    NSArray * loyaltyCardsArr = [loyaltyCardsStr componentsSeparatedByString:@","]; // doubt
                    
                    if([loyaltyCardsArr count] >= 7){ // doubt
                        
                        sqlite3_bind_int(localInsertStmt, 1, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:0] defaultReturn:@"0"] intValue]); // sno
                        
//                        sqlite3_bind_int(localInsertStmt, 1, sNoValue.intValue);
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);// loy_num

                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_double(localInsertStmt, 4, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:3] defaultReturn:@"0"] doubleValue]);
                        
                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_double(localInsertStmt, 7, [[self checkGivenValueFromFileIsNullOrNil:[loyaltyCardsArr objectAtIndex:6] defaultReturn:@"0"] doubleValue]);

                        
//                        sNoValue = [NSString stringWithFormat:@"%d",sNoValue.intValue+1];

                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"loyalty_cards becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed --  LOYALTY_CARDS_LEDGER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- LOYALTY_CARDS_LEDGER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- LOYALTY_CARDS_LEDGER----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}
#pragma -mark End of loyalty_cards related downloading and retriving methods....

# pragma mark Start of Updating,Inserting and fetching loyalty details.....
/**
 * @description  In this method we are trying to read the data from customer_loyalty_cards table based on Phone Number or giftId(Loyalty Card num).
 * @date         08/05/2019...
 * @method       fetchLoyaltyCardDetailsFromSqlite:--  withGiftId:-- 
 * @author
 * @param        NSString
 * @param        NSString
 * @param
 *
 * @return       NSMutableDictionary
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableDictionary *)fetchLoyaltyCardDetailsFromSqliteWithPhoneNumber:(NSString *)phoneNumberStr withGiftId:(NSString *)giftIdStr {
    
    NSMutableDictionary * loyaltyCardDetailsDic = [NSMutableDictionary new];
    NSMutableDictionary * customerLoyaltyCardDic;
    NSMutableDictionary *responseHeaderDic = [[NSMutableDictionary alloc] init];
    // Default setting success..
    [responseHeaderDic setValue:[NSNumber numberWithInt:1] forKey:@"responseCode"];
    [responseHeaderDic setValue:@"" forKey:@"responseMessage"];
    
    [loyaltyCardDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
    
    
    NSString * dbPath;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try {
        
        dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if (sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            //            NSString * loyaltyCardFetchQuery = [NSString stringWithFormat:@"select loyaltyCardNumber, customerName, phoneNum, email, loyaltyProgramNumber, cardId, pointsEarned, pointsUsed, pointsRemaining, cash, idCardType, idCardNumber, status, issuedOn, issueTo from customer_loyalty_cards where phoneNum= '%@' or loyaltyCardNumber= '%@' LIMIT 1", phoneNumberStr,giftIdStr];
            
            NSString * customerLoyaltyCardFetchQuery = [NSString stringWithFormat:@"select loyalty_card_number, customer_name, phone_num, email, loyalty_program_number, card_id, points_earned, points_used, points_remaining, cash, id_card_type, id_card_number, status, issued_on, issued_to from customer_loyalty_cards where status = 1 and (phone_num= '%@' or loyalty_card_number= '%@') LIMIT 1", phoneNumberStr,giftIdStr];
            
            const char *sqlStatement = customerLoyaltyCardFetchQuery.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                     customerLoyaltyCardDic = [[NSMutableDictionary alloc] init];
                    
                    NSString  * loyaltyCardNumber = @"";
                    NSString  * customerName = @"";
                    NSString  * phoneNum = @"";
                    NSString  * email = @"";
                    NSString  * loyaltyProgramNumber = @"0.00";
                    NSString  * cardId = @"";
                    int pointsEarned = 0;
                    int pointsUsed = 0;
                    int pointsRemaining = 0;
                    float cashVal = 0;
                    NSString  * idCardType = @"";
                    NSString  * idCardNumber = @"";
                    NSString  * issuedOn = @"";
                    NSString  * issueTo = @"";
                    Boolean status = false;
                    
                    
                    if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
                        loyaltyCardNumber = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    
                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
                        customerName  = @((char *)sqlite3_column_text(localSelectStmt, 1));
                    
                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                        phoneNum = @((char *)sqlite3_column_text(localSelectStmt, 2));
                    
                    if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                        email = @((char *)sqlite3_column_text(localSelectStmt, 3));
                    
                    if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                        loyaltyProgramNumber = @((char *)sqlite3_column_text(localSelectStmt, 4));
                    
                    if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt, 5))
                        cardId = @((char *)sqlite3_column_text(localSelectStmt, 5));
                    
                    if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
                        pointsEarned = sqlite3_column_int(localSelectStmt, 6);
                    
                    if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt,7))
                        pointsUsed = sqlite3_column_int(localSelectStmt, 7);
                    
                    if((sqlite3_column_text(localSelectStmt, 8) != nil) && (char *)sqlite3_column_text(localSelectStmt,8))
                        pointsRemaining = sqlite3_column_int(localSelectStmt, 8);
                    
                    if((sqlite3_column_text(localSelectStmt, 9) != nil) && (char *)sqlite3_column_text(localSelectStmt,9))
                        cashVal = sqlite3_column_double(localSelectStmt, 9);
                    
                    if((sqlite3_column_text(localSelectStmt, 10) != nil) && (char *)sqlite3_column_text(localSelectStmt,10))
                        idCardType = @((char *)sqlite3_column_text(localSelectStmt, 10));
                    
                    if((sqlite3_column_text(localSelectStmt, 11) != nil) && (char *)sqlite3_column_text(localSelectStmt,11))
                        idCardNumber = @((char *)sqlite3_column_text(localSelectStmt, 11));
                    
                    if((sqlite3_column_text(localSelectStmt, 12) != nil) && (char *)sqlite3_column_text(localSelectStmt,12))
                        status = sqlite3_column_int(localSelectStmt, 12);
                    
                    if((sqlite3_column_text(localSelectStmt, 13) != nil) && (char *)sqlite3_column_text(localSelectStmt,13))
                        issuedOn = @((char *)sqlite3_column_text(localSelectStmt, 13));
                    
                    if((sqlite3_column_text(localSelectStmt, 14) != nil) && (char *)sqlite3_column_text(localSelectStmt,14))
                        issueTo = @((char *)sqlite3_column_text(localSelectStmt, 14));
                    
                    
                    
                    [customerLoyaltyCardDic setValue:loyaltyCardNumber forKey:@"loyaltyCardNumber"];
                    [customerLoyaltyCardDic setValue:customerName forKey:@"customerName"];
                    [customerLoyaltyCardDic setValue:phoneNum forKey:@"phoneNum"];
                    [customerLoyaltyCardDic setValue:email forKey:@"email"];
                    [customerLoyaltyCardDic setValue:loyaltyProgramNumber forKey:@"loyaltyProgramNumber"];
                    [customerLoyaltyCardDic setValue:cardId forKey:@"cardId"];
                    [customerLoyaltyCardDic setValue:[NSNumber numberWithInt:pointsEarned]  forKey:@"pointsEarned"]; //int
                    [customerLoyaltyCardDic setValue:[NSNumber numberWithInt:pointsUsed]  forKey:@"pointsUsed"]; //int
                    [customerLoyaltyCardDic setValue:[NSNumber numberWithInt:pointsRemaining]  forKey:@"pointsRemaining"]; //int
                    [customerLoyaltyCardDic setValue:[NSNumber numberWithFloat:cashVal]  forKey:@"cash"]; //float
                    [customerLoyaltyCardDic setValue:idCardType forKey:@"idCardType"];
                    [customerLoyaltyCardDic setValue:idCardNumber forKey:@"idCardNumber"];
                    [customerLoyaltyCardDic setValue:issuedOn forKey:@"issuedOn"];
                    [customerLoyaltyCardDic setValue:issueTo forKey:@"issueTo"];
                    [customerLoyaltyCardDic setValue:[NSNumber numberWithInt:status] forKey:@"status"]; //bool
                    
                    break;
                }
                sqlite3_finalize(localSelectStmt);
                localSelectStmt = nil;
                //                sqlite3_reset(localSelectStmt);
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                
                return loyaltyCardDetailsDic;
            }
            
            
            
            //Also need to fetch some information from loyalty_card_master and append values to loyaltyCardDetailsDic and return..
            if(customerLoyaltyCardDic != nil){
                
                NSString *loyaltyProgramNumStr = [self checkGivenValueIsNullOrNil:[customerLoyaltyCardDic valueForKey:@"loyaltyProgramNumber"] defaultReturn:@""];
                
                
                NSString * loyaltyCardMasterFetchQuery = [NSString stringWithFormat:@"select loyalty_program_name, valid_from, valid_to, otp_requirement, reward_conversion_ratio, min_redeem_points, min_claim_points from loyalty_card_master where loyalty_program_number= '%@' LIMIT 1",loyaltyProgramNumStr];
                
                
                const char * sqlStatement2 = loyaltyCardMasterFetchQuery.UTF8String;
                if(sqlite3_prepare_v2(localDatabase, sqlStatement2, -1, &localSelectStmt, NULL) == SQLITE_OK){
                    
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        NSString  * loyaltyProgramName = @"";
                        NSString  * validFrom = @"";
                        NSString  * validTo = @"";
                        int otpRequired = 0;
                        float rewardConversionRatio = 0.0;
                        double minRedeemPoints = 0;
                        double minClaimPoints = 0;
                        
                        if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
                            loyaltyProgramName = @((char *)sqlite3_column_text(localSelectStmt, 0));
                        
                        if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
                            validFrom  = @((char *)sqlite3_column_text(localSelectStmt, 1));
                        
                        if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                            validTo = @((char *)sqlite3_column_text(localSelectStmt, 2));
                        
                        if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                            otpRequired = sqlite3_column_int(localSelectStmt, 3);
                        
                        if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                            rewardConversionRatio = sqlite3_column_double(localSelectStmt, 4);
                        
                        if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
                            minRedeemPoints = sqlite3_column_double(localSelectStmt, 5);
                        
                        if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
                            minClaimPoints = sqlite3_column_double(localSelectStmt, 6);
                        
                        
                        [customerLoyaltyCardDic setValue:loyaltyProgramName forKey:@"loyaltyProgramName"];
                        [customerLoyaltyCardDic setValue:validFrom forKey:@"validFrom"];
                        [customerLoyaltyCardDic setValue:validTo forKey:@"validTo"];
                        [customerLoyaltyCardDic setValue:[NSNumber numberWithInt:otpRequired]  forKey:@"otpRequired"];
                        [customerLoyaltyCardDic setValue:[NSNumber numberWithFloat:rewardConversionRatio]  forKey:@"rewardConversionRatio"];
                        [customerLoyaltyCardDic setValue:[NSNumber numberWithFloat:minRedeemPoints]  forKey:@"minRedeemPoints"];
                        [customerLoyaltyCardDic setValue:[NSNumber numberWithFloat:minClaimPoints]   forKey:@"minClaimPoints"];
                        break;
                        
                    }
                    sqlite3_finalize(localSelectStmt);
                    
                }// if(sqlite3_prepare_v2...) close
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase));
                    return loyaltyCardDetailsDic;
                }
            } // if(loyaltyCardDetailsDic related ) --close
        } // if(sqlite3_open...) -- close
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    } @finally {
        
        @try {
            // setting customerLoyaltyCardDic(subDic) and ResponseHeader(subDic) Dictionaries to loyaltyCardDetailsDic(MainDic)...
            if(customerLoyaltyCardDic != nil){
                
                [loyaltyCardDetailsDic setValue:customerLoyaltyCardDic forKey:@"customerLoyaltyCards"];
                
                [responseHeaderDic setValue:[NSNumber numberWithInt:0] forKey:@"responseCode"];
                [responseHeaderDic setValue:@"Success" forKey:@"responseMessage"];
                
                [loyaltyCardDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
            }
            else{
                [loyaltyCardDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
            }
            
        } @catch (NSException *exception) {
            
        }
        sqlite3_close(localDatabase);
    }
    
    return loyaltyCardDetailsDic;
    
    /*
     loyaltyCardDetailsDic ={
     cardId = 28901;
     cash = 50;
     customerName = Roja;
     email = "roja1@gmail.com";
     idCardNumber = "";
     idCardType = Fixed;
     issueTo = "2019-06-08 17:57:35";
     issuedOn = "2019-05-09 17:57:35";
     loyaltyCardNumber = LC10000000300106;
     loyaltyProgramName = 100000;
     loyaltyProgramNumber = 100000;
     minClaimPoints = 50;
     minRedeemPoints = 500;
     otpRequired = 0;
     phoneNum = 9440838286;
     pointsEarned = 160;
     pointsRemaining = 50;
     pointsUsed = 110;
     rewardConversionRatio = 1;
     status = 1;
     validFrom = "2019-05-01 00:00:00";
     validTo = "2019-05-31 00:00:00";
     }
     
     */
}


/**
 * @description  In this method we are updating the customer loyalty card details into customer_loyalty_card table.
 * @date         10/05/2019...
 * @method       updateCustomerLoyaltyTable:-- pointsEarnedValue:-- pointsRemainingValue:-- pointsUsedValue:-
 * @author
 * @param        NSString
 * @param        int,int,int,float
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(void)updateCustomerLoyaltyTable:(NSString *)loyaltyCardNumber pointsEarnedValue:(int)pointsEarned pointsRemainingValue:(int)pointsRemaining pointsUsedValue:(int)pointsUsed cashValue:(float)cashVal{
    
    BOOL saveStatus = false;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            NSString *query = [NSString stringWithFormat:@"update customer_loyalty_cards SET points_earned='%d', points_remaining='%d', points_used='%d', cash='%f', offline_loyalty_sync_status = '1' where loyalty_card_number='%@'",pointsEarned, pointsRemaining, pointsUsed, cashVal, loyaltyCardNumber];
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                
                if (sqlite3_step(insertStmt) == SQLITE_DONE) {
                    
                    saveStatus = true;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database));
                }
                
                sqlite3_finalize(insertStmt);
                insertStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database));
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    @finally {
        sqlite3_close(database);
        insertStmt = nil;
    }
    
}

/**
 * @description  In this method we are trying to read the data from loyalty_purchase_ranges table based on loyaltyProgramNumber.
 * @date         10/05/2019...
 * @method       getLoyaltyProgramPurchaseRangesFromSqlite:--  withGiftId:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableArray *)getLoyaltyProgramPurchaseRangesFromSqlite:(NSString *)loyaltyProgramNumber{
    
    NSString * dbPath;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    NSMutableDictionary * loyaltyPurchaseRangeDetailsDic;
    NSMutableArray* loyaltyPurchaseRangeArr = [[NSMutableArray alloc] init];
    
    @try {
        dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSString * loyaltyPurchaseRangeFetchQuery = [NSString stringWithFormat:@"select min_purchase_value, max_purchase_value, reward_type, reward_value, reward_criteria from loyalty_purchase_ranges where loyalty_program_number = '%@'", loyaltyProgramNumber];
            
            const char *sqlStatement = loyaltyPurchaseRangeFetchQuery.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    loyaltyPurchaseRangeDetailsDic = [[NSMutableDictionary alloc] init];
                    
                    float minPurchaseValue = 0.0;
                    float maxPurchaseValue = 0.0;
                    NSString  * rewardType = @"";
                    float rewardValue = 0.0;
                    NSString  * rewardCriteria = @"";
                    
                    
                    if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
                        minPurchaseValue = sqlite3_column_double(localSelectStmt, 0);
                    
                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
                        maxPurchaseValue  = sqlite3_column_double(localSelectStmt, 1);
                    
                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                        rewardType = @((char *)sqlite3_column_text(localSelectStmt, 2));
                    
                    if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                        rewardValue = sqlite3_column_double(localSelectStmt, 3);
                    
                    if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                        rewardCriteria = @((char *)sqlite3_column_text(localSelectStmt, 4));
                    
                    
                    [loyaltyPurchaseRangeDetailsDic setValue:[NSNumber numberWithFloat:minPurchaseValue]  forKey:@"minPurchaseValue"];
                    [loyaltyPurchaseRangeDetailsDic setValue:[NSNumber numberWithFloat:maxPurchaseValue]  forKey:@"maxPurchaseValue"];
                    [loyaltyPurchaseRangeDetailsDic setValue:rewardType forKey:@"rewardType"];
                    [loyaltyPurchaseRangeDetailsDic setValue:[NSNumber numberWithFloat:rewardValue]  forKey:@"rewardValue"];
                    [loyaltyPurchaseRangeDetailsDic setValue:rewardCriteria forKey:@"rewardCriteria"];
                    
                    [loyaltyPurchaseRangeArr addObject:loyaltyPurchaseRangeDetailsDic];
                    
                }
                sqlite3_finalize(localSelectStmt);
                // sqlite3_reset(localSelectStmt);
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                return loyaltyPurchaseRangeArr;
            }
        }
        localSelectStmt = nil;
        
    } @catch (NSException *exception) {
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    } @finally {
        
        sqlite3_close(localDatabase);
    }
    
    return loyaltyPurchaseRangeArr;
    
}









/**
 * @description  Here we are making a service call to issue loyalty card (which are already issued in offline) in Online.
 // also after issue, need to change the status in offline..
 * @date         21/05/2019
 * @method       loyaltyCardUpdatingToOnlineDbBasedOnStatus:--
 * @author       Roja
 * @param        int
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *  @
 */
// This method is related to sync loyalty card details from Offline to Online (updating loyalty card details only)..
-(void)loyaltyCardUpdatingToOnlineDbBasedOnStatus:(int)status{ 
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        int loyaltyCardUpdateCount = 0;
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSString * query = [NSString stringWithFormat:@"select count (*) from customer_loyalty_cards where offline_loyalty_sync_status != '0' "];//need_to_update_online != '0'
            
            const char * sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    loyaltyCardUpdateCount = sqlite3_column_int(localSelectStmt, 0);
                }
                
                sqlite3_reset(localSelectStmt);
                localSelectStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
            
            NSMutableArray * loyaltyCardsArr = [[NSMutableArray alloc]init];
            
            if(loyaltyCardUpdateCount){
                
                query = [NSString stringWithFormat:@"select loyalty_card_number from customer_loyalty_cards where offline_loyalty_sync_status != '0'"];// and need_to_update_online != '0'
                
                sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        NSString  * listOfLoyaltyCards = @((char *)sqlite3_column_text(localSelectStmt, 0));
                        [loyaltyCardsArr addObject:listOfLoyaltyCards];
                    }
                    
                    sqlite3_reset(localSelectStmt);
                    localSelectStmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            for(int i = 0; i < [loyaltyCardsArr count]; i++){
                
                NSString * loyaltyCardNumStr = [loyaltyCardsArr objectAtIndex:i];
                BOOL isToChangeTheStatus = false;
                
                query = [NSString stringWithFormat:@"select loyalty_card_number,customer_name,phone_num,email,loyalty_program_number,card_id,points_earned,points_used,points_remaining,cash,id_card_type,id_card_number,status,issued_on,issued_to from customer_loyalty_cards where loyalty_card_number ='%@'",loyaltyCardNumStr];
                
                sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        NSString  * loyaltyCarNumber = @"";
                        NSString  * customerName = @"";
                        NSString  * phoneNum = @"";
                        NSString  * email = @"";
                        NSString  * loyaltyProgramNumber = @"";
                        NSString  * cardId = @"";
                        int pointsEarned = 0;
                        int pointsUsed = 0;
                        int pointsRemaining = 0;
                        float cashValue = 0;
                        NSString  * idCardType = @"";
                        NSString  * idCardNumber = @"";
                        int status = 0;
                        NSString  * issued_on = @"";
                        NSString  * issued_to = @"";
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,0))
                            loyaltyCarNumber = @((char*)sqlite3_column_text(localSelectStmt,0));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,1))
                            customerName = @((char*)sqlite3_column_text(localSelectStmt,1));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,2))
                            phoneNum = @((char*)sqlite3_column_text(localSelectStmt,2));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,3))
                            email = @((char*)sqlite3_column_text(localSelectStmt,3));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,4))
                            loyaltyProgramNumber = @((char*)sqlite3_column_text(localSelectStmt,4));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,5))
                            cardId = @((char*)sqlite3_column_text(localSelectStmt,5));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,6))
                            pointsEarned = sqlite3_column_int(localSelectStmt, 6);
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,7))
                            pointsUsed = sqlite3_column_int(localSelectStmt,7);
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,8))
                            pointsRemaining = sqlite3_column_int(localSelectStmt,8);
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,9))
                            cashValue = sqlite3_column_double(localSelectStmt,9);
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,10))
                            idCardType = @((char*)sqlite3_column_text(localSelectStmt,10));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,11))
                            idCardNumber = @((char*)sqlite3_column_text(localSelectStmt,11));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,12))
                            status = sqlite3_column_int(localSelectStmt,12);
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,13))
                            issued_on = @((char*)sqlite3_column_text(localSelectStmt,13));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,14))
                            issued_to = @((char*)sqlite3_column_text(localSelectStmt,14));
                        
                        
                        
                        NSMutableArray * loyaltyCardList = [[NSMutableArray alloc] init];
                        
                        NSDictionary * loyaltyCardDic = [NSDictionary dictionaryWithObjects:@[loyaltyCarNumber, customerName, phoneNum, email, loyaltyProgramNumber, cardId, [NSNumber numberWithInt:pointsEarned], [NSNumber numberWithInt:pointsUsed], [NSNumber numberWithInt:pointsRemaining], [NSNumber numberWithFloat:cashValue], idCardType, idCardNumber, [NSNumber numberWithInt:status], issued_on, issued_to] forKeys:@[@"loyaltyCardNumber",@"customerName",@"phoneNum",@"email",@"loyaltyProgramName",@"cardId",@"pointsEarned",@"pointsUsed",@"pointsRemaining",@"cash",@"idCardType",@"idCardNumber",@"status",@"issuedOn",@"issueTo"]];
                        
                        [loyaltyCardList addObject:loyaltyCardDic];
                        
                        NSDictionary * issueLoyaltyCardDetailsDic = [NSDictionary dictionaryWithObjects:@[loyaltyCardList,[RequestHeader getRequestHeader]] forKeys:@[@"LoyaltyCardList",REQUEST_HEADER]];
                        
                        NSError  * err;
                        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:issueLoyaltyCardDetailsDic options:0 error:&err];
                        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                        
                        WebServiceController * serviceController = [WebServiceController new];
                        serviceController.loyaltyCardServcDelegate = self;
                        isToChangeTheStatus = [serviceController issueLoyaltyCardToCustomer:customerPurchasesRequestString];
                    }
                    //                        sqlite3_finalize(localSelectStmt);
                    sqlite3_reset(localSelectStmt);

                    localSelectStmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
                if(isToChangeTheStatus){
                    
                    //                    [self changeCustomerLoyaltyCardOfflineSyncStatus:1 onlineUpdateStatus:1];
                    
                    [self changeStatusForCustomerLoyaltyCard:loyaltyCardNumStr offlineLoyaltyIssueStatus:0];//onlineSyncStatus:0
                    
                }
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
    }
    @finally {
        
        sqlite3_finalize(localSelectStmt);
        sqlite3_close(localDatabase);
    }
}


/**
 * @description  Here we are status of Offline_loyalty_card_status and need_to_update_online.
 * @date         21/05/2019
 * @method       changeStatusForCustomerLoyaltyCard:--
 * @author       Roja
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *  @
 */

//changeCustomerLoyaltyCardOfflineSyncStatus
-(void)changeStatusForCustomerLoyaltyCard:(NSString *)loyaltyCardNumber  offlineLoyaltyIssueStatus:(int)offlineStatus {
    //onlineSyncStatus:(int)onlineUpdateStatus
    
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelect_update_Stmt = nil;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSString * query = [NSString stringWithFormat:@"update  customer_loyalty_cards set  offline_loyalty_sync_status = '%i' where loyalty_card_number = '%@'",offlineStatus,loyaltyCardNumber]; //and need_to_update_online = '%i'
            
            const char * sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                
                if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                    
                }
                else {
                    
                }
                
                sqlite3_finalize(localSelect_update_Stmt);
                localSelect_update_Stmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
    }
    @finally {
        
        sqlite3_finalize(localSelect_update_Stmt);
        sqlite3_close(localDatabase);
    }
}

-(BOOL)issueLoyaltyCardToCustomerSuccessResponse:(NSDictionary *)successDictionary{
    
    return true;
}


-(BOOL)issueLoyaltyCardToCustomerErrorResponse:(NSString *)failureString{
    
    return false;
}


# pragma mark End of Updating Loyalty tables after Billing..


# pragma mark present this methods are not required --> Auto Issuing the loyalty card to customer

/**
 * @description  In this method getting the loyalty card(which is not assigned to any one) and issuing that card to the customer..
 * @date         18/05/2019...
 * @method       issueLoyaltyCardToTheCustomerWithPhoneNumber:--  withEmailId:-- withName:- netBillValue:-
 * @author
 * @param        NSString
 * @param        NSString
 * @param        float
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)issueLoyaltyCardToTheCustomerWithPhoneNumber:(NSString *)customerMobileNum withEmailId:(NSString *)customerEmailId withName:(NSString *)customerNameStr netBillValue:(float)netValue {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    
    
    BOOL issuedSuccessfully = false;
    NSMutableDictionary * masterDetailsDic;
    NSMutableDictionary * loyaltyCardDetailsDic;
    NSMutableDictionary * customerDetailsDic;
    
    NSMutableArray  * masterDetailsArr = [[NSMutableArray alloc] init];
    
    NSString * loyaltyProgramNumStr = @"";
    
    NSString * dbPath;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try {
        
        dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if (sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            // First need to get auto_issuable Program_num from "loyalty_card_master" table...
            NSString * loyaltyMasterDetailsFetchQuery = [NSString stringWithFormat:@"select loyalty_program_number, base_points, reward_conversion_ratio, status, reward_type from loyalty_card_master where status = 1 and auto_issue = 1"];
            
            const char *sqlStatement = loyaltyMasterDetailsFetchQuery.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    masterDetailsDic = [[NSMutableDictionary alloc] init];
                    
                    NSString * loyaltyProgramNumber = @"";
                    float basePoints = 0.0;
                    float rewardConversionRatio = 0.0;
                    BOOL status = false;
                    NSString * rewardType = @"";
                    
                    
                    if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
                        loyaltyProgramNumber = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    
                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                        basePoints = sqlite3_column_double(localSelectStmt, 1);
                    
                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                        rewardConversionRatio = sqlite3_column_double(localSelectStmt, 2);
                    
                    if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                        status = sqlite3_column_int(localSelectStmt, 3);
                    
                    if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt, 4))
                        rewardType = @((char *)sqlite3_column_text(localSelectStmt, 4));
                    
                    
                    [masterDetailsDic setValue:loyaltyProgramNumber forKey:@"loyaltyProgramNumber"];
                    [masterDetailsDic setValue:[NSNumber numberWithFloat:basePoints] forKey:@"basePoints"];
                    [masterDetailsDic setValue:[NSNumber numberWithFloat:rewardConversionRatio] forKey:@"rewardConversionRatio"];
                    [masterDetailsDic setValue:[NSNumber numberWithBool:status] forKey:@"status"];
                    [masterDetailsDic setValue:rewardType forKey:@"rewardType"];
                    
                    [masterDetailsArr addObject: masterDetailsDic];
                    
                }
            }
            localSelectStmt = nil;
            
            // Here are checking for available Loyalty_card_number with assigned status true in(loyalty_cards)Table. Based on loyalty_program_number...
            
            if([masterDetailsArr count]){
                for (NSDictionary * tempDic in masterDetailsArr) {
                    
                    loyaltyProgramNumStr =  [tempDic valueForKey:@"loyaltyProgramNumber"];
                    
                    
                    NSString * loyaltyCardDetailsFetchQuery = [NSString stringWithFormat:@"select loyalty_card_number, card_id, loyalty_program_number from loyalty_cards where assigned_status = 0 and card_status = 1 and loyalty_program_number = '%@' LIMIT 1",loyaltyProgramNumStr];
                    
                    const char * loyaltyCardSelectStatement = loyaltyCardDetailsFetchQuery.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, loyaltyCardSelectStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
                        
                        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                            
                            loyaltyCardDetailsDic = [[NSMutableDictionary alloc] init];
                            
                            NSString *loyaltyCardNumber = @"";
                            NSString *cardID = @"";
                            NSString *loyaltyProgramNumber = @"";
                            
                            if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
                                loyaltyCardNumber = @((char *)sqlite3_column_text(localSelectStmt, 0));
                            
                            if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
                                cardID = @((char *)sqlite3_column_text(localSelectStmt, 1));
                            
                            if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt, 2))
                                loyaltyProgramNumber = @((char *)sqlite3_column_text(localSelectStmt, 2));
                            
                            [loyaltyCardDetailsDic setValue:loyaltyCardNumber forKey:@"loyaltyCardNumber"];
                            [loyaltyCardDetailsDic setValue:cardID forKey:@"cardId"];
                            [loyaltyCardDetailsDic setValue:loyaltyProgramNumber forKey:@"loyaltyProgramNumber"];
                            
                            break;
                        } // Whle - end
                    } //sqlite3_prepare_v2 - end
                    
                    //                    localSelectStmt = nil;
                    
                } // for -end
                
            } // if(masterDetailsArr) -condition- end
            
            sqlite3_finalize(localSelectStmt);
            localSelectStmt = nil;
            
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
        
        sqlite3_close(localDatabase); // here close bcoz, down we are opening the DB again(if i don't close here then we get a error called:database is locked)
        
        
        // start of forming customerdetailsDic from the above information...
        if(loyaltyCardDetailsDic != nil){
            
            for (NSDictionary * loyaltyMasterDic in masterDetailsArr) {
                
                if([[loyaltyMasterDic valueForKey: @"loyaltyProgramNumber"] isEqualToString:[loyaltyCardDetailsDic valueForKey: @"loyaltyProgramNumber"]]){
                    
                    float rewardValue = 0.0;
                    float rewardRatio = 0;
                    float cashValue = 0.0;
                    int totalPointsEarned = 0;
                    NSString *rewardCriteria = @"";
                    NSString * rewardType = @"";
                    
                    customerDetailsDic = [[NSMutableDictionary alloc] init];
                    
                    // getting Purchase ranges list, In order to increase customer points for there payment..
                    NSArray *purchaseRangeArr = [self getLoyaltyProgramPurchaseRangesFromSqlite:[loyaltyMasterDic valueForKey: @"loyaltyProgramNumber"]];
                    
                    for (NSDictionary * purchaseRangeDic in purchaseRangeArr) {
                        if(netValue >= [[purchaseRangeDic valueForKey:@"minPurchaseValue"] floatValue] && netValue <= [[purchaseRangeDic valueForKey:@"maxPurchaseValue"] floatValue]){
                            
                            rewardValue = [[purchaseRangeDic valueForKey:@"rewardValue"] floatValue];
                            rewardCriteria = [purchaseRangeDic valueForKey:@"rewardCriteria"];
                            break;
                        }
                    }
                    // upto here Purchase ranges...
                    
                    totalPointsEarned = [[loyaltyMasterDic valueForKey:@"basePoints"] floatValue] + rewardValue;
                    rewardRatio = [[loyaltyMasterDic valueForKey:@"rewardConversionRatio"] floatValue];
                    
                    rewardType = [loyaltyMasterDic valueForKey:@"rewardType"] ;
                    
                    if([rewardType caseInsensitiveCompare:@"Fixed"] == NSOrderedSame){
                        
                        cashValue = totalPointsEarned * rewardRatio;
                    }
                    
                    [customerDetailsDic setValue:[loyaltyCardDetailsDic valueForKey:@"loyaltyCardNumber"] forKey:@"loyaltyCardNumber"];
                    [customerDetailsDic setValue:[loyaltyCardDetailsDic valueForKey:@"cardId"] forKey:@"cardId"];
                    
                    [customerDetailsDic setValue:[loyaltyCardDetailsDic valueForKey:@"loyaltyProgramNumber"] forKey:@"loyaltyProgramNumber"];
                    [customerDetailsDic setValue:[loyaltyMasterDic valueForKey:@"rewardType"] forKey:@"idCardType"];
                    [customerDetailsDic setValue:@"" forKey:@"idCardNumber"];
                    [customerDetailsDic setValue:[loyaltyMasterDic valueForKey:@"status"] forKey:@"status"]; // doubt
                    [customerDetailsDic setValue:[NSNumber numberWithInt:totalPointsEarned] forKey:@"pointsEarned"];
                    [customerDetailsDic setValue:[NSNumber numberWithInt:0] forKey:@"pointsUsed"];
                    [customerDetailsDic setValue:[NSNumber numberWithInt:totalPointsEarned]   forKey:@"pointsRemaining"];
                    [customerDetailsDic setValue:[NSNumber numberWithFloat:cashValue]  forKey:@"cash"];
                    [customerDetailsDic setValue:customerNameStr forKey:@"customerName"];
                    [customerDetailsDic setValue:customerMobileNum  forKey:@"phoneNum"];
                    [customerDetailsDic setValue:customerEmailId forKey:@"email"];
                    
                    [customerDetailsDic setValue:currentdate forKey:@"issuedOn"]; // put current date
                    //   [customerDetailsDic setValue:NSNull forKey:@"issuedOn"]; // put current date
                    
                    [customerDetailsDic setValue:@"" forKey:@"issueTo"];
                    
                } // if(comparision) condition - end
            }// for loop - end
        }//if(loyaltyCardDetailsDic) - close
        
        
    }
    @catch(NSException *exception){
        
    }
    @finally{
        
        // start of issuing the loyalty card
        if(customerDetailsDic != nil){
            
            issuedSuccessfully = [self saveCustomerLoyaltyCardsInfo:customerDetailsDic];//loyaltyProgramNumStr
        }
        
        return issuedSuccessfully;
    }
}

/**
 * @description  Here we are inserting customer loyalty card details into customer_loyalty_card_table..
 * @date         18/05/2019...
 * @method       saveCustomerLoyaltyCardsInfo:--
 * @author
 * @param        NSMutableDictionary
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(BOOL)saveCustomerLoyaltyCardsInfo:(NSMutableDictionary *)loyaltyDetailsDic {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- CUSTOMER_LOYALTY_CARD ISSUE ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createCustomerLoyaltyCardsSqlStatement  = "create table if not exists 'customer_loyalty_cards' (`loyalty_card_number` VARCHAR(50) NOT NULL, `customer_name` VARCHAR(250) NULL DEFAULT NULL, `phone_num` VARCHAR(15) NOT NULL, `email` VARCHAR(50) NULL DEFAULT NULL, `loyalty_program_number` VARCHAR(50) NOT NULL, `card_id` VARCHAR(25) NOT NULL, `points_earned` INT(11) NULL DEFAULT '0', `points_used` INT(11) NULL DEFAULT '0', `points_remaining` INT(11) NULL DEFAULT '0', `cash` FLOAT NULL DEFAULT NULL, `id_card_type` VARCHAR(50) NULL DEFAULT NULL, `id_card_number` VARCHAR(50) NULL DEFAULT NULL, `status` TINYINT(1) NULL DEFAULT '0', `issued_on` DATETIME NULL DEFAULT CURRENT_TIMESTAMP, `issued_to` DATETIME NULL DEFAULT NULL, `offline_loyalty_sync_status` TINYINT(4) NULL DEFAULT '0', `need_to_update_online` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY ('loyalty_card_number'))";
            // offline_loyalty_sync_statu - (taking a static flag) if its true then need to issue in online also..
            //need_to_update_online - (taking a static flag) if its true then need to update/sync to online..
            
            
            if (sqlite3_exec(localDatabase, createCustomerLoyaltyCardsSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- customer_loyalty_card TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            // <------------------ Here we are inserting loyalty card details into customer table (ISSUE Loyalty Process->bcoz customer don't have loyalty card)------>
            const char * InsertCustomerLoyaltyCardsSqlStatement = "INSERT into customer_loyalty_cards(loyalty_card_number, customer_name, phone_num, email, loyalty_program_number, card_id, points_earned, points_used, points_remaining, cash, id_card_type, id_card_number, status, issued_on, issued_to, offline_loyalty_sync_status, need_to_update_online) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            
            if(sqlite3_prepare_v2(localDatabase, InsertCustomerLoyaltyCardsSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                if(loyaltyDetailsDic != nil){
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"loyaltyCardNumber"] && ![[loyaltyDetailsDic valueForKey:@"loyaltyCardNumber"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_text(localInsertStmt, 1, [[loyaltyDetailsDic valueForKey:@"loyaltyCardNumber"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 1,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"customerName"] && ![[loyaltyDetailsDic valueForKey:@"customerName"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 2,  [[loyaltyDetailsDic valueForKey:@"customerName"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        
                        sqlite3_bind_text(localInsertStmt, 2,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"phoneNum"] && ![[loyaltyDetailsDic valueForKey:@"phoneNum"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 3,  [[loyaltyDetailsDic valueForKey:@"phoneNum"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        
                        sqlite3_bind_text(localInsertStmt, 3,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"email"] && ![[loyaltyDetailsDic valueForKey:@"email"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 4,  [[loyaltyDetailsDic valueForKey:@"email"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else
                        sqlite3_bind_text(localInsertStmt, 4,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"loyaltyProgramNumber"] && ![[loyaltyDetailsDic valueForKey:@"loyaltyProgramNumber"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 5,  [[loyaltyDetailsDic valueForKey:@"loyaltyProgramNumber"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 5,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"cardId"] && ![[loyaltyDetailsDic valueForKey:@"cardId"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 6,  [[loyaltyDetailsDic valueForKey:@"cardId"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else
                        sqlite3_bind_text(localInsertStmt, 6,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"pointsEarned"] && ![[loyaltyDetailsDic valueForKey:@"pointsEarned"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 7, [[loyaltyDetailsDic valueForKey:@"pointsEarned"] intValue]);
                    
                    else
                        sqlite3_bind_int(localInsertStmt, 7, 0);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"pointsUsed"] && ![[loyaltyDetailsDic valueForKey:@"pointsUsed"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 8, [[loyaltyDetailsDic valueForKey:@"pointsUsed"] intValue]);
                    
                    else
                        sqlite3_bind_int(localInsertStmt, 8, 0);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"pointsRemaining"] && ![[loyaltyDetailsDic valueForKey:@"pointsRemaining"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_int(localInsertStmt, 9, [[loyaltyDetailsDic valueForKey:@"pointsRemaining"] intValue]);
                    else
                        sqlite3_bind_int(localInsertStmt, 9, 0);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"cash"] && ![[loyaltyDetailsDic valueForKey:@"cash"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_double(localInsertStmt, 10, [[loyaltyDetailsDic valueForKey:@"cash"] floatValue]);
                    
                    else
                        sqlite3_bind_double(localInsertStmt, 10, 0);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"idCardType"] && ![[loyaltyDetailsDic valueForKey:@"idCardType"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_text(localInsertStmt, 11,  [[loyaltyDetailsDic valueForKey:@"idCardType"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 11,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"idCardNumber"] && ![[loyaltyDetailsDic valueForKey:@"idCardNumber"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_text(localInsertStmt, 12,  [[loyaltyDetailsDic valueForKey:@"idCardNumber"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 12,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"status"] && ![[loyaltyDetailsDic valueForKey:@"status"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 13, [[loyaltyDetailsDic valueForKey:@"status"] intValue]);
                    
                    else
                        sqlite3_bind_int(localInsertStmt, 13, 0);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"issuedOn"] && ![[loyaltyDetailsDic valueForKey:@"issuedOn"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 14,  [[loyaltyDetailsDic valueForKey:@"issuedOn"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 14,  (currentdate).UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([loyaltyDetailsDic.allKeys containsObject:@"issueTo"] && ![[loyaltyDetailsDic valueForKey:@"issueTo"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 15,  [[loyaltyDetailsDic valueForKey:@"issueTo"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 15,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    sqlite3_bind_int(localInsertStmt, 16, 1);// 1 ( need to issue in online db).
                    
                    sqlite3_bind_int(localInsertStmt, 17, 1);// 1 ( need to sync with online db).
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){ // finished executing..
                        
                        //                        isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        NSLog(@"cutomer_loyalty_card issue becomes false in due error while inserting into database");
                    }
                    else {
                        //                        isCompleteDataInserted = true;
                    }
                }
                
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- cutomer_loyalty_card issue ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- cutomer_loyalty_card issue ----");
                }
                sqlite3_finalize(localInsertStmt);
                localInsertStmt = nil;
            }
            
            // ------------ after issuing need to change assign status to true in loyalty_cards table ----->
            
            if(isCompleteDataInserted){
                
                BOOL saveStatus =  false;
                
                NSString * loyaltyCardNum = [loyaltyDetailsDic valueForKey:@"loyaltyCardNumber"];
                
                NSString * assignStatusChangeQuery = [NSString stringWithFormat:@"update loyalty_cards SET assigned_status = '1', offline_loyalty_sync_status = '1' where loyalty_card_number='%@'", loyaltyCardNum];
                
                const char *sqlStatement = assignStatusChangeQuery.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                    
                    if (sqlite3_step(localInsertStmt) == SQLITE_DONE) {
                        
                        saveStatus = true;
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                    }
                    
                    sqlite3_finalize(localInsertStmt);
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
                localInsertStmt = nil;
            }// isCompleteDataInserted  condition- end
            
        }
        else {
            
            NSLog(@"Offline customer_loyalty_card issue in data base exception ---> %s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        NSLog(@"Offline customer_loyalty_card issue exception ---> %@",exception.description);
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- CUSTOMER_LOYALTY_CARD ISSUE----%@",currentdate);
        
        localInsertStmt = nil;
        // localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}
# pragma mark Upto here present this methods are not required --> Auto Issuing the loyalty card to customer


#pragma -mark start coupons related data downloading and retriving methods....


/**
 * @description  Here we are calling giftCouponDownload service to get loyalty tables URL's  ....
 * @date         10/05/2019
 * @method       getCouponsDownloadDetailsInCSVFileForm:--
 * @author       Roja
 * @param
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getCouponsDownloadDetailsInCSVFileForm{
    
    BOOL status = false;
    
    @try {
        NSArray *loyaltyKeys = @[REQUEST_HEADER]; //,START_DATE
        NSArray * loyaltyObjects = @[[RequestHeader getRequestHeader]]; //,@""
        
        NSUserDefaults *defaults = [[NSUserDefaults alloc] init];
        
//        if ([[defaults valueForKey:LAST_GIFT_COUPONS_UPDATED_DATE] length]){
//
//            NSLog(@"---- GIFT_COUPONS ----Download----%@",[defaults valueForKey:LAST_GIFT_COUPONS_UPDATED_DATE]);
//            loyaltyObjects = @[[RequestHeader getRequestHeader], [NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_GIFT_COUPONS_UPDATED_DATE]] ];
//        }
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];

        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        WebServiceController * controller = [[WebServiceController alloc] init];
        controller.giftCouponServcDelegate = self;
        status = [controller getGiftCouponsDownloadsDetails:loyaltyString];

    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}



/**
 * @description  Here we Handling success response of getGiftCouponDownloads   ....
 * @date         20/05/2019
 * @method       getGiftCouponsDownloadDetailsSuccessResponse:--
 * @author       Roja
 * @param        NSDictionary
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(bool)getGiftCouponsDownloadDetailsSuccessResponse:(NSDictionary *)successDictionary{
  
    BOOL status = false;
    
    BOOL couponsStatus = false;
    BOOL customerCouponStatus = false;
    BOOL filePathStatus = false;
    BOOL couponLocationStatus = false;

    @try {

        if(isFileDownload){
       
            NSString * couponsUrlStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:COUPON_FILE_PATH] defaultReturn:@""];
            
            NSString * customerCouponURLStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:CUSTOMER_COUPON_FILE_PATH] defaultReturn:@""];
            
            NSString * filePathURLStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:FILE_PATH] defaultReturn:@""]; // master data
            
            NSString * couponLocationStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:COUPONS_LOCATION_PATH] defaultReturn:@""];
            
            if(couponsUrlStr.length){
                
                couponsStatus = [self DownLoadFileAndInsertItInLoadDB:couponsUrlStr dataType: GIFT_COUPONS_STRING];
            }
            if(customerCouponURLStr.length){

                customerCouponStatus = [self DownLoadFileAndInsertItInLoadDB:customerCouponURLStr dataType:CUSTOMER_COUPONS_STRING];
            }
            if(filePathURLStr.length){
                
                filePathStatus = [self DownLoadFileAndInsertItInLoadDB:filePathURLStr dataType:COUPONS_MASTER_STRING];
            }
            if(couponLocationStr.length){
                
                couponLocationStatus = [self DownLoadFileAndInsertItInLoadDB:couponLocationStr dataType:COUPONS_LOCATION_STRING];
            }
        }
        
    } @catch (NSException *exception) {

        status = false;
    } @finally {
        
        if(couponsStatus && customerCouponStatus && filePathStatus && couponLocationStatus){
            
            status = true;
        }
        return status;
    }
}


/**
 * @description  Here we Handling Error response of getGiftCouponDownloads   ....
 * @date         20/05/2019
 * @method       getGiftCouponsDownloadDetailsErrorResponse:--
 * @author       Roja
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(bool)getGiftCouponsDownloadDetailsErrorResponse:(NSString *)failureString{
    
    BOOL status = false;

    @try {
        
        if ([failureString caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
        
        status = TRUE;
        }
    } @catch (NSException *exception) {
        
        status = false;
        
    } @finally {
        
        return status;
    }
}



/**
 * @description  In this method we are  saving gift coupons related data in to gift_coupons table....
 * @date         10/05/2019
 * @method       saveGiftCouponsFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveGiftCouponsFromCSVFile:(NSArray *)allGiftCouponsInfoArr {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- GIFT_COUPONS----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createCouponsTableSqlStatement  = "create table if not exists 'gift_coupons' (`coupon_code` VARCHAR(50) NOT NULL, `coupon_program_code` VARCHAR(50) NOT NULL, `assigned_status` TINYINT(5) NOT NULL, `coupon_status` TINYINT(5) NOT NULL, `coupon_id` VARCHAR(50) NULL DEFAULT NULL, `start_date` DATE NULL DEFAULT NULL, `end_date` DATE NULL DEFAULT NULL, `no_of_claims` INT(11) NULL DEFAULT NULL, `offline_gift_coupon_sync_status` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY (`coupon_code`))";
            
            
            if (sqlite3_exec(localDatabase, createCouponsTableSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- GIFT_COUPONS TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertLoyaltyCardsSqlStatement = "INSERT OR REPLACE into gift_coupons(coupon_code, coupon_program_code, assigned_status, coupon_status, coupon_id, start_date, end_date, no_of_claims, offline_gift_coupon_sync_status) Values(?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardsSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * giftCouponsStr in allGiftCouponsInfoArr) {
                    
                    NSArray * giftCouponsDetailsArr = [giftCouponsStr componentsSeparatedByString:@","];
                    
                    if([giftCouponsDetailsArr count] >= 8){ // doubt
                        
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[giftCouponsDetailsArr objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[giftCouponsDetailsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_int(localInsertStmt, 3, [[self checkGivenValueFromFileIsNullOrNil:[giftCouponsDetailsArr objectAtIndex:2] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_int(localInsertStmt, 4, [[self checkGivenValueFromFileIsNullOrNil:[giftCouponsDetailsArr objectAtIndex:3] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[giftCouponsDetailsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[giftCouponsDetailsArr objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 7, [self checkGivenValueFromFileIsNullOrNil:[giftCouponsDetailsArr objectAtIndex:6] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 8, [[self checkGivenValueFromFileIsNullOrNil:[giftCouponsDetailsArr objectAtIndex:7] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_int(localInsertStmt, 9, 0);

                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"gift_coupons becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- GIFT_COUPONS ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- GIFT_COUPONS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- GIFT_COUPONS----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}



/**
 * @description  In this method we are  saving customer gift coupon related data in to customer_gift_coupons table....
 * @date         10/05/2019
 * @method       saveCustomerGiftCouponsFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(BOOL)saveCustomerGiftCouponsFromCSVFile:(NSArray *)allListOfcustomerGiftCouponArr {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- CUSTOMER_GIFT_COUPONS----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localSelectStmt =nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createcustomerCouponsTableSqlStatement  = "create table if not exists 'customer_gift_coupons' (`s_no` INT(11) NOT NULL, `coupon_code` VARCHAR(50) NOT NULL DEFAULT '', `coupon_program_code` VARCHAR(50) NULL DEFAULT NULL, `issued_to` VARCHAR(50) NULL DEFAULT NULL, `issue_date` DATE NULL DEFAULT NULL, `issued_at` VARCHAR(50) NOT NULL, `customer_name` VARCHAR(50) NOT NULL, `customer_email` VARCHAR(60) NULL DEFAULT NULL, `customer_mobile` VARCHAR(60) NULL DEFAULT NULL, `claim_status` TINYINT(4) NULL DEFAULT NULL, `claimed_at` VARCHAR(50) NULL DEFAULT NULL, `bill_ref` VARCHAR(100) NULL DEFAULT NULL, `coupon_value` FLOAT NULL DEFAULT NULL, `validity_date` DATE NULL DEFAULT NULL, `coupon_id` VARCHAR(50) NULL DEFAULT NULL, `no_of_claims` INT(4) NULL DEFAULT '0', `offline_gift_coupon_sync_status` TINYINT(4) NULL DEFAULT '0', `need_to_update_online` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY (`s_no`))";
         
            if (sqlite3_exec(localDatabase, createcustomerCouponsTableSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMER_GIFT_COUPONS TABLE Created Sucessfully ----");
            }
            
            
            NSString * sNo = [NSString stringWithFormat:@"%d",1];
            const char * sqlSelectStmt = "select s_no from customer_gift_coupons order by s_no DESC LIMIT 1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    sNo = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    sNo = [NSString stringWithFormat:@"%d", sNo.intValue+1];
                    
                }
                sqlite3_finalize(localSelectStmt);
            }
           

            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertLoyaltyCardsSqlStatement = "INSERT OR REPLACE into customer_gift_coupons(s_no, coupon_code, coupon_program_code, issued_to, issue_date, issued_at, customer_name, customer_email, customer_mobile, claim_status, no_of_claims, claimed_at, bill_ref, coupon_value, validity_date, coupon_id, offline_gift_coupon_sync_status, need_to_update_online) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardsSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * customerGiftCouponsStr in allListOfcustomerGiftCouponArr) {
                    
                    NSArray * customerGiftCouponDetailsArr = [customerGiftCouponsStr componentsSeparatedByString:@","];
                    
                    if([customerGiftCouponDetailsArr count] >= 15){
                        
                        sqlite3_bind_int(localInsertStmt, 1, sNo.intValue);
                        
                        sNo = [NSString stringWithFormat:@"%d", sNo.intValue+1];
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//Coupon Code
                        
                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);//Coupon Program Code
                        
                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //issued To
                        
                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //Issued Date
                        
                        sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //Issued At

                        sqlite3_bind_text(localInsertStmt, 7, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //Customer Name

                        sqlite3_bind_text(localInsertStmt, 8, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:6] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //Customer Email

                        sqlite3_bind_text(localInsertStmt, 9, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:7] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //Customer Mobile
                        
                        sqlite3_bind_int(localInsertStmt, 10, [[self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:8] defaultReturn:@"0"] intValue]); //Claim Status
                        
                        sqlite3_bind_int(localInsertStmt, 11, [[self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:9] defaultReturn:@"0"] intValue]); //No Of Claims

                        sqlite3_bind_text(localInsertStmt, 12, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:10] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //Claimed At
                        
                        sqlite3_bind_text(localInsertStmt, 13, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:11] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //Bill Ref

                        sqlite3_bind_double(localInsertStmt, 14, [[self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:12] defaultReturn:@"0"] doubleValue]); //Coupon Value

                        sqlite3_bind_text(localInsertStmt, 15, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:13] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //Validity date

                        sqlite3_bind_text(localInsertStmt, 16, [self checkGivenValueFromFileIsNullOrNil:[customerGiftCouponDetailsArr objectAtIndex:14] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT); //Coupon Id
                        
                        // below are static columns(for online sync) so giving Static values giving this..
                        sqlite3_bind_int(localInsertStmt, 17, 0);// default -0 (status flag for issue(update to online))

                        sqlite3_bind_int(localInsertStmt, 18, 0);// default -0 (status flag for update/sync)
                       

                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"customer_gift_coupons becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                    
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- CUSTOMER_GIFT_COUPONS ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- CUSTOMER_GIFT_COUPONS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- CUSTOMER_GIFT_COUPONS----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}


/**
 * @description  In this method we are  saving gift coupon location related data in to gift_coupons_locations table....
 * @date         29/05/2019
 * @method       saveGiftCouponLocationFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(BOOL)saveGiftCouponLocationFromCSVFile:(NSArray *)giftCouponLocationArr {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- GIFT_COUPON_LOCATION ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localSelectStmt =nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
           
            const char * createcustomerCouponsTableSqlStatement  = "create table if not exists 'gift_coupons_locations' (`ref_no` INT(15) NOT NULL, `coupon_promo_code` VARCHAR(50) NOT NULL, `valid_locations` CHAR(50) NOT NULL, `zoneId` VARCHAR(50) NULL DEFAULT NULL, PRIMARY KEY (`ref_no`))";
            
            if (sqlite3_exec(localDatabase, createcustomerCouponsTableSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- GIFT_COUPON_LOCATION TABLE Created Sucessfully ----");
            }
            
            
            NSString * refNo = [NSString stringWithFormat:@"%d",1];
            const char * sqlSelectStmt = "select ref_no from gift_coupons_locations order by ref_no DESC LIMIT 1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    refNo = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    refNo = [NSString stringWithFormat:@"%d", refNo.intValue+1];
                    
                }
                sqlite3_finalize(localSelectStmt);
            }
            
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertLoyaltyCardsSqlStatement = "INSERT OR REPLACE into gift_coupons_locations(ref_no, coupon_promo_code, valid_locations, zoneId) Values(?,?,?,?)";
            
        
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardsSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * giftCouponLocationStr in giftCouponLocationArr) {
                    
                    NSArray * giftCouponLocationDetailsArr = [giftCouponLocationStr componentsSeparatedByString:@","];
                    
                    if([giftCouponLocationDetailsArr count] >= 4){
                        
                        sqlite3_bind_int(localInsertStmt, 1, refNo.intValue);
                        
                        refNo = [NSString stringWithFormat:@"%d", refNo.intValue+1];
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[giftCouponLocationDetailsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[giftCouponLocationDetailsArr objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[giftCouponLocationDetailsArr objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"gift_coupon_location becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- GIFT_COUPON_LOCATION ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- GIFT_COUPON_LOCATION ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- GIFT_COUPON_LOCATION----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}





/**
 * @description  In this method we are  saving coupons master related data in to gift_coupons_master table....
 * @date         10/05/2019
 * @method       saveCouponMasterFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(BOOL)saveCouponMasterFromCSVFile:(NSArray *)couponMasterInfoArr {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- COUPONS_MASTER----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createCouponsTableSqlStatement  = "create table if not exists 'gift_coupons_master' (`coupon_program_code` VARCHAR(50) NOT NULL, `promo_name` VARCHAR(45) NOT NULL, `unit_cash_value` FLOAT NOT NULL, `total_cash_value` FLOAT NULL DEFAULT NULL, `created_on` DATE NOT NULL, `expiry_date` DATE NOT NULL, `validity_period` INT(11) NOT NULL, `country` VARCHAR(45) NOT NULL, `status` VARCHAR(15) NULL DEFAULT NULL, `description` VARCHAR(250) NULL DEFAULT NULL, `discount_type` VARCHAR(30) NULL DEFAULT NULL, `otp_requirement` TINYINT(4) NOT NULL, `multiples` TINYINT(4) NOT NULL, `updated_date` DATE NULL DEFAULT NULL, `no_of_claims` INT(11) NULL DEFAULT NULL, `min_sale_amount` DECIMAL(10,2) NULL DEFAULT '0.00', `max_discount_amount` DECIMAL(10,2) NULL DEFAULT '0.00', `limited_use` TINYINT(4) NULL DEFAULT '0', `no_of_claims_limited` INT(4) NULL DEFAULT '0', PRIMARY KEY (`coupon_program_code`))";
            
            
            if (sqlite3_exec(localDatabase, createCouponsTableSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- COUPONS_MASTER TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertLoyaltyCardsSqlStatement = "INSERT OR REPLACE into gift_coupons_master( coupon_program_code, promo_name, unit_cash_value, total_cash_value, created_on, expiry_date, validity_period, country, status, description, no_of_claims, min_sale_amount, max_discount_amount,discount_type, otp_requirement, multiples,  updated_date,  limited_use, no_of_claims_limited) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardsSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * couponMasterListStr in couponMasterInfoArr) {
                    
                    NSArray * couponMasterDetailsArr = [couponMasterListStr componentsSeparatedByString:@","];
                    
                    if([couponMasterDetailsArr count] >= 19){ // doubt
                        
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_double(localInsertStmt, 3, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:2] defaultReturn:@"0"] doubleValue]);
                        
                        sqlite3_bind_double(localInsertStmt, 4, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:3] defaultReturn:@"0"] doubleValue]);

                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_int(localInsertStmt, 7, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:6] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_text(localInsertStmt, 8, [self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:7] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 9, [self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:8] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 10, [self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:9] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 11, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:10] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_double(localInsertStmt, 12, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:11] defaultReturn:@"0"] doubleValue]);

                        sqlite3_bind_double(localInsertStmt, 13, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:12] defaultReturn:@"0"] doubleValue]);

                        sqlite3_bind_text(localInsertStmt, 14, [self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:13] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 15, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:14] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_int(localInsertStmt, 16, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:15] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_text(localInsertStmt, 17, [self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:14] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_int(localInsertStmt, 18, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:17] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_int(localInsertStmt, 19, [[self checkGivenValueFromFileIsNullOrNil:[couponMasterDetailsArr objectAtIndex:18] defaultReturn:@"0"] intValue]);

                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"gift_coupons_master becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- COUPONS_MASTER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- COUPONS_MASTER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- COUPONS_MASTER----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

#pragma -mark end of COUPONS Downloading and retriving data...


/**
 * @description  In this method we are getting the coupon details from coupon related tables and keeping in a dictionary
 * @date         27/05/2019
 * @method       fetchGiftCouponDetailsFromSqliteWithPhoneNumber:--
 * @author       Roja
 * @param        NSString
 * @param
 * @param
 *
 * @return       NSMutableDictionary
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
//-(NSMutableDictionary *)fetchGiftCouponDetailsFromSqliteWithPhoneNumber:(NSString *)customerPhnNo enteredCouponCode:(NSString *)givenCouponCodeStr {
//
//    NSDate *today = [NSDate date];
//    NSDateFormatter *f = [[NSDateFormatter alloc] init];
//    f.dateFormat = @"yyyy/MM/dd"; //@"dd/MM/yyyy"
//    NSString* currentdate = [f stringFromDate:today];
//
//    NSMutableDictionary * giftCouponListResultsDic = [NSMutableDictionary new];
//    NSMutableDictionary * couponsMasterDic; //couponDetails
//    NSMutableDictionary * couponsDic; //coupon
//
//    NSMutableArray * customerCouponDetailsArr = [NSMutableArray new]; //customerGiftCouponsList
//
//    int claimStatusflag = 0;
//
//    NSMutableDictionary *responseHeaderDic = [[NSMutableDictionary alloc] init];
//    // Default setting success..
//    [responseHeaderDic setValue:@"-1" forKey:@"responseCode"];
//    [responseHeaderDic setValue:@"" forKey:@"responseMessage"];
//
//    [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//
//
//    NSString * dbPath;
//    static sqlite3 * localDatabase = nil;
//    static sqlite3_stmt * localSelectStmt = nil;
//
//    @try {
//
//        dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
//
//        if (sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
//
////            NSString * customerGiftCouponFetchQuery = [NSString stringWithFormat:@"select claimed_at, issued_to,no_of_claims,coupon_program_code, coupon_id, coupon_value, customer_name, validity_date, customer_email, issued_at, issue_date, coupon_code, customer_mobile, claim_status, bill_ref  from customer_gift_coupons where validity_date >= '%@' and claim_status = 0  and (coupon_code or coupon_id) = '%@' and customer_mobile= '%@'", currentdate, givenCouponCodeStr, customerPhnNo];
//
//            NSString * customerGiftCouponFetchQuery = [NSString stringWithFormat:@"select claimed_at, issued_to,no_of_claims,coupon_program_code, coupon_id, coupon_value, customer_name, validity_date, customer_email, issued_at, issue_date, coupon_code, customer_mobile, claim_status, bill_ref  from customer_gift_coupons where validity_date >= '%@' and claim_status = 0 and ( customer_mobile= '%@' or (coupon_code LIKE '%@' or coupon_id LIKE '%@') )", currentdate, customerPhnNo, givenCouponCodeStr,givenCouponCodeStr];
//
//
//            const char *sqlStatement = customerGiftCouponFetchQuery.UTF8String;
//
//            // ------------> Start of sqlStatement query Execution <------------
//            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
//
//                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
//
//                    NSMutableDictionary * tempDic = [[NSMutableDictionary alloc] init];
//
//                    NSString  * claimedAt = @"";
//                    NSString  * issuedTo = @"";
//                    int noOfClaims = 0;
//                    NSString  * couponProgramCode = @"";
//                    NSString  * couponId = @"";
//                    float couponValue = 0.0;
//                    NSString  * customerName = @"";
//                    NSString  * validityDate = @"";
//                    NSString  * customerEmail = @"";
//                    NSString  * issuedAt = @"";
//                    NSString  * issueDate = @"";
//                    NSString  * couponCode = @"";
//                    NSString  * customerMobile = @"";
//                    int claimStatus = 0;
//                    NSString  * billRef = @"";
//
//
//                    if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
//                    claimedAt = @((char *)sqlite3_column_text(localSelectStmt, 0));
//
//                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
//                    issuedTo  = @((char *)sqlite3_column_text(localSelectStmt, 1));
//
//                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
//                    noOfClaims = sqlite3_column_int(localSelectStmt, 2);
//
//                    if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
//                    couponProgramCode = @((char *)sqlite3_column_text(localSelectStmt, 3));
//
//                    if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
//                    couponId = @((char *)sqlite3_column_text(localSelectStmt, 4));
//
//                    if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt, 5))
//                    couponValue = sqlite3_column_double(localSelectStmt, 5);
//
//                    if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
//                    customerName = @((char *)sqlite3_column_text(localSelectStmt, 6));
//
//                    if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt,7))
//                    validityDate = @((char *)sqlite3_column_text(localSelectStmt, 7));
//
//                    if((sqlite3_column_text(localSelectStmt, 8) != nil) && (char *)sqlite3_column_text(localSelectStmt,8))
//                    customerEmail = @((char *)sqlite3_column_text(localSelectStmt, 8));
//
//                    if((sqlite3_column_text(localSelectStmt, 9) != nil) && (char *)sqlite3_column_text(localSelectStmt,9))
//                    issuedAt = @((char *)sqlite3_column_text(localSelectStmt, 9));
//
//                    if((sqlite3_column_text(localSelectStmt, 10) != nil) && (char *)sqlite3_column_text(localSelectStmt,10))
//                    issueDate = @((char *)sqlite3_column_text(localSelectStmt, 10));
//
//                    if((sqlite3_column_text(localSelectStmt, 11) != nil) && (char *)sqlite3_column_text(localSelectStmt,11))
//                    couponCode = @((char *)sqlite3_column_text(localSelectStmt, 11));
//
//                    if((sqlite3_column_text(localSelectStmt, 12) != nil) && (char *)sqlite3_column_text(localSelectStmt,12))
//                    customerMobile = @((char *)sqlite3_column_text(localSelectStmt, 12));
//
//                    if((sqlite3_column_text(localSelectStmt, 13) != nil) && (char *)sqlite3_column_text(localSelectStmt,13))
//                    claimStatus = sqlite3_column_int(localSelectStmt, 13);
//
//
//                    if((sqlite3_column_text(localSelectStmt, 14) != nil) && (char *)sqlite3_column_text(localSelectStmt,14))
//                    billRef = @((char *)sqlite3_column_text(localSelectStmt, 14));
//
//                    [tempDic setValue:claimedAt forKey:@"claimedAt"];
//                    [tempDic setValue:issuedTo forKey:@"issuedTo"];
//                    [tempDic setValue:[NSNumber numberWithInt:noOfClaims]  forKey:@"noOfClaims"];
//                    [tempDic setValue:couponProgramCode forKey:@"couponProgramCode"];
//                    [tempDic setValue:couponId forKey:@"couponId"];
//                    [tempDic setValue:[NSNumber numberWithFloat:couponValue]  forKey:@"couponValue"];
//                    [tempDic setValue:customerName forKey:@"customerName"];
//                    [tempDic setValue:validityDate forKey:@"validityDate"];
//                    [tempDic setValue:customerEmail forKey:@"customerEmail"];
//                    [tempDic setValue:issuedAt forKey:@"issuedAt"];
//                    [tempDic setValue:issueDate forKey:@"issueDate"];
//                    [tempDic setValue:couponCode forKey:@"couponCode"];
//                    [tempDic setValue:customerMobile forKey:@"customerMobile"];
//                    [tempDic setValue:[NSNumber numberWithInt:claimStatus]  forKey:@"claimStatus"];
//                    [tempDic setValue:billRef forKey:@"billRef"];
//                    claimStatusflag = claimStatus; // this flag need to add to main dictionary...
//
//                    [customerCouponDetailsArr addObject:tempDic];
//
//                }
//                sqlite3_finalize(localSelectStmt);
//                localSelectStmt = nil;
//                //                sqlite3_reset(localSelectStmt);
//
//            } // ------------> End of sqlStatement query Execution <------------
//
//
//
//
//            //Also need to fetch some information from gift_coupons_master table and gift_coupons table and append values to giftCouponListResultsDic and return..
//            if([customerCouponDetailsArr count]){
//
//                for (NSDictionary * tempMasterDic in customerCouponDetailsArr) {
//
//                    NSString * couponProgramCodeStr = [self checkGivenValueIsNullOrNil:[tempMasterDic valueForKey:@"couponProgramCode"] defaultReturn:@""];
//
//                    NSString * couponMasterFetchQuery = [NSString stringWithFormat:@"select coupon_program_code, promo_name, unit_cash_value, total_cash_value, created_on, expiry_date, validity_period, country, status, discount_type, otp_requirement, multiples, updated_date, no_of_claims, min_sale_amount, max_discount_amount, limited_use, no_of_claims_limited from gift_coupons_master where coupon_program_code= '%@' LIMIT 1",couponProgramCodeStr];
//
//
//                    const char * sqlStatement2 = couponMasterFetchQuery.UTF8String;
//
//                    // ------------> Start of sqlStatement2 query Execution <------------
//                    if(sqlite3_prepare_v2(localDatabase, sqlStatement2, -1, &localSelectStmt, NULL) == SQLITE_OK){
//
//                        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
//
//                            couponsMasterDic = [NSMutableDictionary new]; //couponDetails dic
//
//                            NSString * couponProgramCode = @"";
//                            NSString *  promoName = @"";
//                            float unitCashValue = 0.0;
//                            float totalCashValue = 0.0;
//                            NSString *  createdOn = @"";
//                            NSString *  expiryDate= @"";
//                            int validityPeriod = 0;
//                            NSString *  country = @"";
//                            NSString *  status = @"";
//                            NSString * discountType = @"";
//                            int otpRequirement = 0;
//                            int multiples = 0;
//                            NSString * updatedDate = @"";
//                            int noOfCliams = 0;
//                            float min_sale_amount = 0.0;
//                            float max_discount_amount = 0.0;
//                            int limitedUseCoupon = 0;
//                            int noOfClaimsLimited = 0;
//
//                            if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
//                            couponProgramCode = @((char *)sqlite3_column_text(localSelectStmt, 0));
//
//                            if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
//                            promoName  = @((char *)sqlite3_column_text(localSelectStmt, 1));
//
//                            if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
//                            unitCashValue = sqlite3_column_double(localSelectStmt, 2);
//
//                            if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
//                            totalCashValue = sqlite3_column_double(localSelectStmt, 3);
//
//                            if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
//                            createdOn  = @((char *)sqlite3_column_text(localSelectStmt, 4));
//
//                            if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
//                            expiryDate = @((char *)sqlite3_column_text(localSelectStmt, 5));
//
//                            if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
//                            validityPeriod = sqlite3_column_int(localSelectStmt, 6);
//
//                            if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt,7))
//                            country = @((char *)sqlite3_column_text(localSelectStmt, 7));
//
//                            if((sqlite3_column_text(localSelectStmt, 8) != nil) && (char *)sqlite3_column_text(localSelectStmt,8))
//                            status = @((char *)sqlite3_column_text(localSelectStmt, 8));
//
//                            if((sqlite3_column_text(localSelectStmt, 9) != nil) && (char *)sqlite3_column_text(localSelectStmt,9))
//                            discountType = @((char *)sqlite3_column_text(localSelectStmt, 9));
//
//                            if((sqlite3_column_text(localSelectStmt, 10) != nil) && (char *)sqlite3_column_text(localSelectStmt,10))
//                            otpRequirement = sqlite3_column_int(localSelectStmt, 10);
//
//                            if((sqlite3_column_text(localSelectStmt, 11) != nil) && (char *)sqlite3_column_text(localSelectStmt,11))
//                            multiples = sqlite3_column_int(localSelectStmt, 11);
//
//                            if((sqlite3_column_text(localSelectStmt, 12) != nil) && (char *)sqlite3_column_text(localSelectStmt,12))
//                            updatedDate = @((char *)sqlite3_column_text(localSelectStmt, 12));
//
//                            if((sqlite3_column_text(localSelectStmt, 13) != nil) && (char *)sqlite3_column_text(localSelectStmt,13))
//                            noOfCliams = sqlite3_column_int(localSelectStmt, 13);
//
//                            if((sqlite3_column_text(localSelectStmt, 14) != nil) && (char *)sqlite3_column_text(localSelectStmt,14))
//                            min_sale_amount = sqlite3_column_double(localSelectStmt, 14);
//
//                            if((sqlite3_column_text(localSelectStmt, 15) != nil) && (char *)sqlite3_column_text(localSelectStmt,15))
//                            max_discount_amount = sqlite3_column_double(localSelectStmt, 15);
//
//                            if((sqlite3_column_text(localSelectStmt, 16) != nil) && (char *)sqlite3_column_text(localSelectStmt,16))
//                            limitedUseCoupon = sqlite3_column_int(localSelectStmt, 16);
//
//                            if((sqlite3_column_text(localSelectStmt, 17) != nil) && (char *)sqlite3_column_text(localSelectStmt,17))
//                            noOfClaimsLimited = sqlite3_column_int(localSelectStmt, 17);
//
//
//                            [couponsMasterDic setValue:couponProgramCode forKey:@"couponProgramCode"];
//                            [couponsMasterDic setValue:promoName forKey:@"promoName"];
//                            [couponsMasterDic setValue:[NSNumber numberWithFloat:unitCashValue] forKey:@"unitCashValue"];
//                            [couponsMasterDic setValue:[NSNumber numberWithFloat:totalCashValue] forKey:@"totalCashValue"];
//                            [couponsMasterDic setValue:createdOn forKey:@"createdOn"];
//                            [couponsMasterDic setValue:expiryDate forKey:@"expiryDate"];
//                            [couponsMasterDic setValue:[NSNumber numberWithInt:validityPeriod] forKey:@"validityPeriod"];
//                            [couponsMasterDic setValue:country forKey:@"country"];
//                            [couponsMasterDic setValue:status forKey:@"status"];
//
//                            [couponsMasterDic setValue:discountType forKey:@"discountType"];
//                            [couponsMasterDic setValue:[NSNumber numberWithInt:otpRequirement] forKey:@"otpRequirement"];
//                            [couponsMasterDic setValue:[NSNumber numberWithInt:multiples] forKey:@"multiples"];
//                            [couponsMasterDic setValue:updatedDate forKey:@"updatedDate"];
//                            [couponsMasterDic setValue:[NSNumber numberWithInt:noOfCliams] forKey:@"noOfCliams"];
//
//                            [couponsMasterDic setValue:[NSNumber numberWithFloat:min_sale_amount] forKey:@"min_sale_amount"];
//                            [couponsMasterDic setValue:[NSNumber numberWithFloat:max_discount_amount] forKey:@"max_discount_amount"];
//
//                            [couponsMasterDic setValue:[NSNumber numberWithInt:limitedUseCoupon] forKey:@"limitedUseCoupon"];
//                            [couponsMasterDic setValue:[NSNumber numberWithInt:noOfClaimsLimited] forKey:@"noOfClaimsLimited"];
//
//                            break;
//                        } // while - loop
//
//                        sqlite3_finalize(localSelectStmt);
//                        localSelectStmt = nil;
//
//                    }  // ------------> End of sqlStatement2 query Execution <------------
//
//                    else {
//                        NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
//
//                        [responseHeaderDic setValue:@"Coupon Id does not exist" forKey:@"responseMessage"];
//                        [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//                        return giftCouponListResultsDic;
//                    }
//
//
//                    // Need to get Details from gift_coupons table and form a dictionary and add this dictionary to main dictionary..
//                    NSString * couponCodeStr = [self checkGivenValueIsNullOrNil:[tempMasterDic valueForKey:@"couponCode"] defaultReturn:@""];
//
//
//                    NSString * giftCouponFetchQuery = [NSString stringWithFormat:@"select end_date,  coupon_program_code, coupon_id, assigned_status, no_of_claims, coupon_status, coupon_code, start_date from gift_coupons where coupon_code = '%@' LIMIT 1",couponCodeStr];
//
//                    const char * sqlStatement3 = giftCouponFetchQuery.UTF8String;
//
//                    // ------------> Start of sqlStatement3 query Execution <------------
//                    if(sqlite3_prepare_v2(localDatabase, sqlStatement3, -1, &localSelectStmt, NULL) == SQLITE_OK){
//
//                        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
//
//                            couponsDic = [NSMutableDictionary new];
//
//                            NSString * endDate = @"";
//                            NSString * couponProgramCode = @"";
//                            NSString * couponId = @"";
//                            int assignedStatus = 0;
//                           // int saveGRNFlag = 1; // doubt
//                            int noOfCliams = 0;
//                            int couponStatus = 0;
//                            NSString * couponCode = @"";
//                            NSString * startDate = @"";
//
//
//                            if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
//                            endDate = @((char *)sqlite3_column_text(localSelectStmt, 0));
//
//                            if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
//                            couponProgramCode  = @((char *)sqlite3_column_text(localSelectStmt, 1));
//
//                            if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt, 2))
//                             couponId = @((char *)sqlite3_column_text(localSelectStmt,2));
//
//                            if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
//                            assignedStatus = sqlite3_column_int(localSelectStmt, 3);
//
//                            if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
//                            noOfCliams = sqlite3_column_int(localSelectStmt, 4);
//
//                            if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
//                            couponStatus = sqlite3_column_int(localSelectStmt, 5);
//
//                            if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt, 6))
//                            couponCode = @((char *)sqlite3_column_text(localSelectStmt, 6));
//
//                            if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt, 7))
//                            startDate = @((char *)sqlite3_column_text(localSelectStmt, 7));
//
//                            [couponsDic setValue:endDate forKey:@"endDate"];
//                            [couponsDic setValue:couponProgramCode forKey:@"couponProgramCode"];
//                            [couponsDic setValue:couponId forKey:@"couponId"];
//                            [couponsDic setValue:[NSNumber numberWithInt:assignedStatus] forKey:@"assignedStatus"];
//                            [couponsDic setValue:[NSNumber numberWithInt:noOfCliams] forKey:@"noOfCliams"];
//                            [couponsDic setValue:[NSNumber numberWithInt:couponStatus] forKey:@"couponStatus"];
//                            [couponsDic setValue:couponCode forKey:@"couponCode"];
//                            [couponsDic setValue:startDate forKey:@"startDate"];
//
//                            break;
//                        } // while - loop
//
//                        sqlite3_finalize(localSelectStmt);
//                        localSelectStmt = nil;
//
//                    }   // ------------> End of sqlStatement3 query Execution <------------
//
//                    else{
//                        NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
//
//                        [responseHeaderDic setValue:@"Coupon Id does not exist" forKey:@"responseMessage"];
//                        [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//                        return giftCouponListResultsDic;
//                    }
//
//                    break; // only for 1 coupon -promo we are getting details we are taking..
//                } // for(promo code) - close
//            } //  if(customerCouponDetailsArr) - close
//            else {
//                NSLog(@"%s",sqlite3_errmsg(localDatabase));
//                [responseHeaderDic setValue:@"No coupons available for this number"  forKey:@"responseMessage"];
//                [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//                return giftCouponListResultsDic;
//            }
//
//        } // if( sqlite3_open) --close
//
//
//    } @catch (NSException *exception) {
//
//        NSLog(@"%@",exception);
//
//        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//        [alert show];
//
//    } @finally {
//
//        @try {
//            // setting couponsDic(subDic), couponsMasterDic(subDic) and ResponseHeader(subDic) Dictionaries to giftCouponListResultsDic(MainDic)...
//            if([customerCouponDetailsArr count] && couponsDic != nil && couponsMasterDic != nil){
//
//                [giftCouponListResultsDic setValue:customerCouponDetailsArr forKey:@"customerGiftCouponsList"];
//                [giftCouponListResultsDic setValue:couponsMasterDic forKey:@"couponDetails"];
//                [giftCouponListResultsDic setValue:couponsDic forKey:@"coupon"];
//
//                [giftCouponListResultsDic setValue:[NSNumber numberWithInt:claimStatusflag] forKey:@"claimStatus"];
//
//                [responseHeaderDic setValue:@"0" forKey:@"responseCode"];
//                [responseHeaderDic setValue:@"Success" forKey:@"responseMessage"];
//
//                [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//            }
//            else{
//                [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//            }
//
//        } @catch (NSException *exception) {
//
//        }
//
//        sqlite3_close(localDatabase);
//    }
//
//    return giftCouponListResultsDic;
//
//}


-(NSMutableDictionary *)getCouponDetailsForCouponID:(NSString *)givenCouponCodeStr forPhoneNumer:(NSString *)customerPhnNo withPhoneNumRequiredStatus:(BOOL)phoneNumRequired{
    
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy"; //  @"yyyy/MM/dd"
        NSString* currentdate = [f stringFromDate:today];
    
        NSMutableDictionary * giftCouponListResultsDic = [NSMutableDictionary new];
        NSMutableDictionary * couponsMasterDic; //couponDetails
        NSMutableDictionary * couponsDic; //coupon
    
        NSMutableArray * customerCouponDetailsArr = [NSMutableArray new]; //customerGiftCouponsList
    
        int claimStatusflag = 0;
    
        NSMutableDictionary *responseHeaderDic = [[NSMutableDictionary alloc] init];
        // Default setting success..
        [responseHeaderDic setValue:@"-1" forKey:@"responseCode"];
        [responseHeaderDic setValue:@"No coupons available" forKey:@"responseMessage"];
    
        [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
    
    
        NSString * dbPath;
//        static sqlite3 * localDatabase = nil;
        static sqlite3_stmt * localSelectStmt = nil;
    
    
        @try {
    
            dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
            if (sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
    
    //            NSString * customerGiftCouponFetchQuery = [NSString stringWithFormat:@"select claimed_at, issued_to,no_of_claims,coupon_program_code, coupon_id, coupon_value, customer_name, validity_date, customer_email, issued_at, issue_date, coupon_code, customer_mobile, claim_status, bill_ref  from customer_gift_coupons where validity_date >= '%@' and claim_status = 0  and (coupon_code or coupon_id) = '%@' and customer_mobile= '%@'", currentdate, givenCouponCodeStr, customerPhnNo];
                
                  NSString * customerGiftCouponFetchQuery = [NSString stringWithFormat:@"select claimed_at, issued_to,no_of_claims,coupon_program_code, coupon_id, coupon_value, customer_name, validity_date, customer_email, issued_at, issue_date, coupon_code, customer_mobile, claim_status, bill_ref  from customer_gift_coupons where claim_status = 0 and validity_date >= '%@' and customer_mobile= '%@' and (coupon_code LIKE '%%%@%%' or coupon_id LIKE '%%%@%%')", currentdate, customerPhnNo, givenCouponCodeStr,givenCouponCodeStr];
                
                const char *sqlStatement = customerGiftCouponFetchQuery.UTF8String;
    
                // ------------> Start of sqlStatement query Execution <------------
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){//selectStmt_
    
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
    
                        NSMutableDictionary * tempDic = [[NSMutableDictionary alloc] init];
    
                        NSString  * claimedAt = @"";
                        NSString  * issuedTo = @"";
                        int noOfClaims = 0;
                        NSString  * couponProgramCode = @"";
                        NSString  * couponId = @"";
                        float couponValue = 0.0;
                        NSString  * customerName = @"";
                        NSString  * validityDate = @"";
                        NSString  * customerEmail = @"";
                        NSString  * issuedAt = @"";
                        NSString  * issueDate = @"";
                        NSString  * couponCode = @"";
                        NSString  * customerMobile = @"";
                        int claimStatus = 0;
                        NSString  * billRef = @"";
    
    
                        if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
                        claimedAt = @((char *)sqlite3_column_text(localSelectStmt, 0));
    
                        if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
                        issuedTo  = @((char *)sqlite3_column_text(localSelectStmt, 1));
    
                        if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                        noOfClaims = sqlite3_column_int(localSelectStmt, 2);
    
                        if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                        couponProgramCode = @((char *)sqlite3_column_text(localSelectStmt, 3));
    
                        if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                        couponId = @((char *)sqlite3_column_text(localSelectStmt, 4));
    
                        if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt, 5))
                        couponValue = sqlite3_column_double(localSelectStmt, 5);
    
                        if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
                        customerName = @((char *)sqlite3_column_text(localSelectStmt, 6));
    
                        if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt,7))
                        validityDate = @((char *)sqlite3_column_text(localSelectStmt, 7));
    
                        if((sqlite3_column_text(localSelectStmt, 8) != nil) && (char *)sqlite3_column_text(localSelectStmt,8))
                        customerEmail = @((char *)sqlite3_column_text(localSelectStmt, 8));
    
                        if((sqlite3_column_text(localSelectStmt, 9) != nil) && (char *)sqlite3_column_text(localSelectStmt,9))
                        issuedAt = @((char *)sqlite3_column_text(localSelectStmt, 9));
    
                        if((sqlite3_column_text(localSelectStmt, 10) != nil) && (char *)sqlite3_column_text(localSelectStmt,10))
                        issueDate = @((char *)sqlite3_column_text(localSelectStmt, 10));
    
                        if((sqlite3_column_text(localSelectStmt, 11) != nil) && (char *)sqlite3_column_text(localSelectStmt,11))
                        couponCode = @((char *)sqlite3_column_text(localSelectStmt, 11));
    
                        if((sqlite3_column_text(localSelectStmt, 12) != nil) && (char *)sqlite3_column_text(localSelectStmt,12))
                        customerMobile = @((char *)sqlite3_column_text(localSelectStmt, 12));
    
                        if((sqlite3_column_text(localSelectStmt, 13) != nil) && (char *)sqlite3_column_text(localSelectStmt,13))
                        claimStatus = sqlite3_column_int(localSelectStmt, 13);
    
    
                        if((sqlite3_column_text(localSelectStmt, 14) != nil) && (char *)sqlite3_column_text(localSelectStmt,14))
                        billRef = @((char *)sqlite3_column_text(localSelectStmt, 14));
    
                        [tempDic setValue:claimedAt forKey:@"claimedAt"];
                        [tempDic setValue:issuedTo forKey:@"issuedTo"];
                        [tempDic setValue:[NSNumber numberWithInt:noOfClaims]  forKey:@"noOfClaims"];
                        [tempDic setValue:couponProgramCode forKey:@"couponProgramCode"];
                        [tempDic setValue:couponId forKey:@"couponId"];
                        [tempDic setValue:[NSNumber numberWithFloat:couponValue]  forKey:@"couponValue"];
                        [tempDic setValue:customerName forKey:@"customerName"];
                        [tempDic setValue:validityDate forKey:@"validityDate"];
                        [tempDic setValue:customerEmail forKey:@"customerEmail"];
                        [tempDic setValue:issuedAt forKey:@"issuedAt"];
                        [tempDic setValue:issueDate forKey:@"issueDate"];
                        [tempDic setValue:couponCode forKey:@"couponCode"];
                        [tempDic setValue:customerMobile forKey:@"customerMobile"];
                        [tempDic setValue:[NSNumber numberWithInt:claimStatus]  forKey:@"claimStatus"];
                        [tempDic setValue:billRef forKey:@"billRef"];
                        claimStatusflag = claimStatus; // this flag need to add to main dictionary...
    
                        [customerCouponDetailsArr addObject:tempDic];
    
                    }
                    sqlite3_finalize(localSelectStmt);
                    localSelectStmt = nil;
                    //                sqlite3_reset(localSelectStmt);
    
                } // ------------> End of sqlStatement query Execution <------------
    
    
                //Also need to fetch some information from gift_coupons_master table and gift_coupons table and append values to giftCouponListResultsDic and return..
                if(phoneNumRequired){
                    
                    if([customerCouponDetailsArr count]){
                        
                        for (NSDictionary * tempMasterDic in customerCouponDetailsArr) {
                            
                          NSString * couponProgramCodeStr = [self checkGivenValueIsNullOrNil:[tempMasterDic valueForKey:@"couponProgramCode"] defaultReturn:@""];
                            
                            couponsMasterDic = [self getCouponMasterDetailsForCouponProgramCode:couponProgramCodeStr];

                            // Need to get Details from gift_coupons table and form a dictionary and add this dictionary to main dictionary..
                            NSString * couponCodeStr = [self checkGivenValueIsNullOrNil:[tempMasterDic valueForKey:@"couponCode"] defaultReturn:@""];
                            
                            couponsDic = [self getCouponDetailsForCouponCode:couponCodeStr];

                            break; // only for 1 coupon -promo we are taking..
                        } // for(promo code) - close
                    }//  if(customerCouponDetailsArr) - close
                    
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database));
                        [responseHeaderDic setValue:@"No coupons available for this number"  forKey:@"responseMessage"];
                        [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                        return giftCouponListResultsDic;
                    }
                }
                else if(!phoneNumRequired){ // this condition wil execute when limited_use status is false and multiple(true) ----(in master)
                 
                    couponsMasterDic = [self getCouponMasterDetailsForCouponProgramCode:givenCouponCodeStr];
                    couponsDic = [self getCouponDetailsForCouponCode:givenCouponCodeStr];
                }
    
            } // if( sqlite3_open) --close
    
    
        } @catch (NSException *exception) {
    
            NSLog(@"%@",exception);
    
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
    
        } @finally {
    
            @try {
                // setting couponsDic(subDic), couponsMasterDic(subDic) and ResponseHeader(subDic) Dictionaries to giftCouponListResultsDic(MainDic)...
                if(couponsDic != nil && couponsMasterDic != nil){ //[customerCouponDetailsArr count]
    
                    [giftCouponListResultsDic setValue:customerCouponDetailsArr forKey:@"customerGiftCouponsList"];
                    [giftCouponListResultsDic setValue:couponsMasterDic forKey:@"couponDetails"];
                    [giftCouponListResultsDic setValue:couponsDic forKey:@"coupon"];
    
                    [giftCouponListResultsDic setValue:[NSNumber numberWithInt:claimStatusflag] forKey:@"claimStatus"];
    
                    [responseHeaderDic setValue:@"0" forKey:@"responseCode"];
                    [responseHeaderDic setValue:@"Success" forKey:@"responseMessage"];
    
                    [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                }
                else{
                    [giftCouponListResultsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                }
    
            } @catch (NSException *exception) {
                
                localSelectStmt = nil;
            }
    
            localSelectStmt = nil;
            sqlite3_close(database);
        }
    
        return giftCouponListResultsDic;
    }



-(NSMutableDictionary *)getCouponMasterDetailsForCouponProgramCode:(NSString *)givenCouponProgramCode{
    
    static sqlite3_stmt * localSelectStmt = nil;
    
    NSMutableDictionary * couponsMasterDic; //couponDetails

    NSString * couponMasterFetchQuery = [NSString stringWithFormat:@"select coupon_program_code, promo_name, unit_cash_value, total_cash_value, created_on, expiry_date, validity_period, country, status, discount_type, otp_requirement, multiples, updated_date, no_of_claims, min_sale_amount, max_discount_amount, limited_use, no_of_claims_limited from gift_coupons_master where coupon_program_code= '%@' LIMIT 1",givenCouponProgramCode];
    
    
    const char * sqlStatement2 = couponMasterFetchQuery.UTF8String;
    
    // ------------> Start of sqlStatement2 query Execution <------------
    if(sqlite3_prepare_v2(database, sqlStatement2, -1, &localSelectStmt, NULL) == SQLITE_OK){
        
        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
            
            couponsMasterDic = [NSMutableDictionary new]; //couponDetails dic
            
            NSString * couponProgramCode = @"";
            NSString *  promoName = @"";
            float unitCashValue = 0.0;
            float totalCashValue = 0.0;
            NSString *  createdOn = @"";
            NSString *  expiryDate= @"";
            int validityPeriod = 0;
            NSString *  country = @"";
            NSString *  status = @"";
            NSString * discountType = @"";
            int otpRequirement = 0;
            int multiples = 0;
            NSString * updatedDate = @"";
            int noOfCliams = 0;
            float min_sale_amount = 0.0;
            float max_discount_amount = 0.0;
            int limitedUseCoupon = 0;
            int noOfClaimsLimited = 0;
            
            if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
                couponProgramCode = @((char *)sqlite3_column_text(localSelectStmt, 0));
            
            if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
                promoName  = @((char *)sqlite3_column_text(localSelectStmt, 1));
            
            if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                unitCashValue = sqlite3_column_double(localSelectStmt, 2);
            
            if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                totalCashValue = sqlite3_column_double(localSelectStmt, 3);
            
            if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                createdOn  = @((char *)sqlite3_column_text(localSelectStmt, 4));
            
            if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
                expiryDate = @((char *)sqlite3_column_text(localSelectStmt, 5));
            
            if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
                validityPeriod = sqlite3_column_int(localSelectStmt, 6);
            
            if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt,7))
                country = @((char *)sqlite3_column_text(localSelectStmt, 7));
            
            if((sqlite3_column_text(localSelectStmt, 8) != nil) && (char *)sqlite3_column_text(localSelectStmt,8))
                status = @((char *)sqlite3_column_text(localSelectStmt, 8));
            
            if((sqlite3_column_text(localSelectStmt, 9) != nil) && (char *)sqlite3_column_text(localSelectStmt,9))
                discountType = @((char *)sqlite3_column_text(localSelectStmt, 9));
            
            if((sqlite3_column_text(localSelectStmt, 10) != nil) && (char *)sqlite3_column_text(localSelectStmt,10))
                otpRequirement = sqlite3_column_int(localSelectStmt, 10);
            
            if((sqlite3_column_text(localSelectStmt, 11) != nil) && (char *)sqlite3_column_text(localSelectStmt,11))
                multiples = sqlite3_column_int(localSelectStmt, 11);
            
            if((sqlite3_column_text(localSelectStmt, 12) != nil) && (char *)sqlite3_column_text(localSelectStmt,12))
                updatedDate = @((char *)sqlite3_column_text(localSelectStmt, 12));
            
            if((sqlite3_column_text(localSelectStmt, 13) != nil) && (char *)sqlite3_column_text(localSelectStmt,13))
                noOfCliams = sqlite3_column_int(localSelectStmt, 13);
            
            if((sqlite3_column_text(localSelectStmt, 14) != nil) && (char *)sqlite3_column_text(localSelectStmt,14))
                min_sale_amount = sqlite3_column_double(localSelectStmt, 14);
            
            if((sqlite3_column_text(localSelectStmt, 15) != nil) && (char *)sqlite3_column_text(localSelectStmt,15))
                max_discount_amount = sqlite3_column_double(localSelectStmt, 15);
            
            if((sqlite3_column_text(localSelectStmt, 16) != nil) && (char *)sqlite3_column_text(localSelectStmt,16))
                limitedUseCoupon = sqlite3_column_int(localSelectStmt, 16);
            
            if((sqlite3_column_text(localSelectStmt, 17) != nil) && (char *)sqlite3_column_text(localSelectStmt,17))
                noOfClaimsLimited = sqlite3_column_int(localSelectStmt, 17);
            
            
            [couponsMasterDic setValue:couponProgramCode forKey:@"couponProgramCode"];
            [couponsMasterDic setValue:promoName forKey:@"promoName"];
            [couponsMasterDic setValue:[NSNumber numberWithFloat:unitCashValue] forKey:@"unitCashValue"];
            [couponsMasterDic setValue:[NSNumber numberWithFloat:totalCashValue] forKey:@"totalCashValue"];
            [couponsMasterDic setValue:createdOn forKey:@"createdOn"];
            [couponsMasterDic setValue:expiryDate forKey:@"expiryDate"];
            [couponsMasterDic setValue:[NSNumber numberWithInt:validityPeriod] forKey:@"validityPeriod"];
            [couponsMasterDic setValue:country forKey:@"country"];
            [couponsMasterDic setValue:status forKey:@"status"];
            
            [couponsMasterDic setValue:discountType forKey:@"discountType"];
            [couponsMasterDic setValue:[NSNumber numberWithInt:otpRequirement] forKey:@"otpRequirement"];
            [couponsMasterDic setValue:[NSNumber numberWithInt:multiples] forKey:@"multiples"];
            [couponsMasterDic setValue:updatedDate forKey:@"updatedDate"];
            [couponsMasterDic setValue:[NSNumber numberWithInt:noOfCliams] forKey:@"noOfCliams"];
            
            [couponsMasterDic setValue:[NSNumber numberWithFloat:min_sale_amount] forKey:@"min_sale_amount"];
            [couponsMasterDic setValue:[NSNumber numberWithFloat:max_discount_amount] forKey:@"max_discount_amount"];
            
            [couponsMasterDic setValue:[NSNumber numberWithInt:limitedUseCoupon] forKey:@"limitedUseCoupon"];
            [couponsMasterDic setValue:[NSNumber numberWithInt:noOfClaimsLimited] forKey:@"noOfClaimsLimited"];
            
            break;
        } // while - loop
        
        sqlite3_finalize(localSelectStmt);
        localSelectStmt = nil;
        
    }
    
    return couponsMasterDic;
}

-(NSMutableDictionary *)getCouponDetailsForCouponCode:(NSString *)givenCouponCode{


    static sqlite3_stmt * localSelectStmt = nil;
    
    NSMutableDictionary * couponsDic; //coupon
    
    NSString * giftCouponFetchQuery = [NSString stringWithFormat:@"select end_date, coupon_program_code, coupon_id, assigned_status, no_of_claims, coupon_status, coupon_code, start_date from gift_coupons where (coupon_code LIKE '%%%@%%' or coupon_id LIKE '%%%@%%')", givenCouponCode, givenCouponCode];
    
    const char * sqlStatement3 = giftCouponFetchQuery.UTF8String;
    
    // ------------> Start of sqlStatement3 query Execution <------------
    if(sqlite3_prepare_v2(database, sqlStatement3, -1, &localSelectStmt, NULL) == SQLITE_OK){
        
        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
            
            couponsDic = [NSMutableDictionary new];
            
            NSString * endDate = @"";
            NSString * couponProgramCode = @"";
            NSString * couponId = @"";
            int assignedStatus = 0;
            // int saveGRNFlag = 1; // doubt
            int noOfCliams = 0;
            int couponStatus = 0;
            NSString * couponCode = @"";
            NSString * startDate = @"";
            
            
            if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt, 0))
                endDate = @((char *)sqlite3_column_text(localSelectStmt, 0));
            
            if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt, 1))
                couponProgramCode  = @((char *)sqlite3_column_text(localSelectStmt, 1));
            
            if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt, 2))
                couponId = @((char *)sqlite3_column_text(localSelectStmt,2));
            
            if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                assignedStatus = sqlite3_column_int(localSelectStmt, 3);
            
            if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                noOfCliams = sqlite3_column_int(localSelectStmt, 4);
            
            if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
                couponStatus = sqlite3_column_int(localSelectStmt, 5);
            
            if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt, 6))
                couponCode = @((char *)sqlite3_column_text(localSelectStmt, 6));
            
            if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt, 7))
                startDate = @((char *)sqlite3_column_text(localSelectStmt, 7));
            
            [couponsDic setValue:endDate forKey:@"endDate"];
            [couponsDic setValue:couponProgramCode forKey:@"couponProgramCode"];
            [couponsDic setValue:couponId forKey:@"couponId"];
            [couponsDic setValue:[NSNumber numberWithInt:assignedStatus] forKey:@"assignedStatus"];
            [couponsDic setValue:[NSNumber numberWithInt:noOfCliams] forKey:@"noOfCliams"];
            [couponsDic setValue:[NSNumber numberWithInt:couponStatus] forKey:@"couponStatus"];
            [couponsDic setValue:couponCode forKey:@"couponCode"];
            [couponsDic setValue:startDate forKey:@"startDate"];
            
            break;
        } // while - loop
        
        sqlite3_finalize(localSelectStmt);
        localSelectStmt = nil;
        
    }   // ------------> End of sqlStatement3 query Execution <------------
    
    return couponsDic;

}


-(NSMutableDictionary *)fetchGiftCouponDetailsFromSqliteWithPhoneNumber:(NSString *)customerPhnNo enteredCouponCode:(NSString *)givenCouponCodeStr  {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy"; // @"yyyy/MM/dd"
    NSString* currentdate = [f stringFromDate:today];
    
    NSMutableDictionary * couponDetailsDic;
    NSMutableDictionary  * finalReturnDic;
    
    NSMutableDictionary * errorDetailsDic = [NSMutableDictionary new];
    
    NSMutableDictionary *responseHeaderDic = [[NSMutableDictionary alloc] init];
    // Default setting success..
    [responseHeaderDic setValue:@"-1" forKey:@"responseCode"];
    [responseHeaderDic setValue:@"" forKey:@"responseMessage"];
    
    [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
    
    
    NSString * dbPath;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    
    @try {
        
        dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if (sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {//&database
            
            NSString * couponProgramCodeStr = @"";
            NSString * couponId = @"";
            NSString * expiryDate = @"";
            NSString * startDate = @"";

            int assignedStatus = 0;
            int couponStatus = 0;
            int couponLocationCount = 0;
            int multiplesStatus = 0;
            int limitedUseStatus = 0;
            int totalNoOfClaimsLimit = 0;
            int noOfClaimsLimit = 0;
            
//            NSString * giftCouponFetchQuery = [NSString stringWithFormat:@"select no_of_claims,coupon_program_code from gift_coupons where (coupon_code LIKE '%%%@%%' or coupon_id LIKE '%%%@%%') LIMIT 1",givenCouponCodeStr, givenCouponCodeStr];

            // <--------- First need to check couponProgramCodeStr present in "gift_coupons" table or not--------->
            NSString * giftCouponFetchQuery = [NSString stringWithFormat:@"select * from gift_coupons where  (coupon_code LIKE '%%%@%%' or coupon_id LIKE '%%%@%%')", givenCouponCodeStr, givenCouponCodeStr];// doubt with assigned_status = 1
            
            const char *sqlStatement = giftCouponFetchQuery.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                        couponProgramCodeStr = @((char *)sqlite3_column_text(localSelectStmt,1));
                    
                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                        assignedStatus = sqlite3_column_int(localSelectStmt,2);
                    
                    if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                        couponStatus = sqlite3_column_int(localSelectStmt,3);
                    
                    if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                        couponId = @((char *)sqlite3_column_text(localSelectStmt,4));
                    
                    if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
                        startDate = @((char *)sqlite3_column_text(localSelectStmt,5));
                    
                    totalNoOfClaimsLimit = sqlite3_column_int(localSelectStmt,7);
                 
                    break;
                }
                sqlite3_finalize(localSelectStmt);
            }
            localSelectStmt = nil;

            if([couponProgramCodeStr length] > 0){
                
                // **** I think assigned status also need to check ***
                if(couponStatus == 0){
                    
                    NSLog(@"%s",sqlite3_errmsg(localDatabase));
                    [responseHeaderDic setValue:@"coupon id is in Inactive state"  forKey:@"responseMessage"];
                    [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                    finalReturnDic = errorDetailsDic;
                    return finalReturnDic;
                }
                else if(totalNoOfClaimsLimit == 0){
                    
                    NSLog(@"%s",sqlite3_errmsg(localDatabase));
                    [responseHeaderDic setValue:@"Given all coupon id's are claimed"  forKey:@"responseMessage"];
                    [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                    finalReturnDic = errorDetailsDic;
                    return finalReturnDic;
                }
//                else if(startDate > currentdate){
//
//                    NSLog(@"%s",sqlite3_errmsg(localDatabase));
//                    [responseHeaderDic setValue:@"Coupon Id does not exist"  forKey:@"responseMessage"];
//                    [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//                    finalReturnDic = errorDetailsDic;
//                    return finalReturnDic;
//                }
                else{ //Check weather this couponProgramCodeStr is present in your store location/Zone...
                    
                    // <--------- Second need to check in couponProgramCodeStr present in this location or not from table "gift_coupons_locations" --------->
                    NSString * giftCouponFetchQuery = [NSString stringWithFormat:@"select count (*) from gift_coupons_locations where coupon_promo_code = '%@' and valid_locations = '%@' and zoneId = '%@'",couponProgramCodeStr,presentLocation,zone];
                    
                    const char *sqlStatement = giftCouponFetchQuery.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
                        
                        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                            
                            couponLocationCount = sqlite3_column_int(localSelectStmt, 0);
                            break;
                        }
                        sqlite3_finalize(localSelectStmt);
                    }
                    localSelectStmt = nil;
                    
                    
                    if(couponLocationCount){
                        
                        // <--------- Third need to check validty_period from "gift_coupons_master" table and check conditions for limited_use and multiples flag --------->

                    NSString * giftCouponFetchQuery = [NSString stringWithFormat:@"select validity_period, multiples, limited_use from gift_coupons_master where coupon_program_code = '%@'",couponProgramCodeStr];//and  expiry_date >= '%@'
                        
                        const char *sqlStatement = giftCouponFetchQuery.UTF8String;
                        
                        if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                            
                            while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                                
                                if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt,0))
                                    expiryDate = @((char *)sqlite3_column_text(localSelectStmt,0));
                                
                                multiplesStatus = sqlite3_column_int(localSelectStmt, 1);
                                limitedUseStatus = sqlite3_column_int(localSelectStmt, 2);
                                
                                break;
                            }
                            sqlite3_finalize(localSelectStmt);
                        }
                        localSelectStmt = nil;
                        
                        if(expiryDate < currentdate){
                            
                            NSLog(@"%s",sqlite3_errmsg(localDatabase));
                            [responseHeaderDic setValue:@"Given coupon id is expired"  forKey:@"responseMessage"];
                            [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                            finalReturnDic = errorDetailsDic;
                            return finalReturnDic;
                        }
                        
                        else{
                            
                            if(limitedUseStatus == 1){
                                
                                if((multiplesStatus == 1 || multiplesStatus == 0) && !([customerPhnNo length] == 10)){
                                    
                                    NSLog(@"%s",sqlite3_errmsg(localDatabase));
                                    [responseHeaderDic setValue:@"This coupon requires customer mobile number"  forKey:@"responseMessage"];
                                    [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                    
                                    finalReturnDic = errorDetailsDic;
                                    return finalReturnDic;
                                }
                                else{ // if user entred phn no
                                    
                                    BOOL customerCouponExists = false;
                                    // checking if already this customer have this coupon in customer_gift_coupons...
                                    NSString * giftCouponFetchQuery = [NSString stringWithFormat:@"select no_of_claims from customer_gift_coupons where (coupon_code LIKE '%%%@%%' or coupon_id LIKE '%%%@%%') and customer_mobile = '%@'", givenCouponCodeStr,givenCouponCodeStr,customerPhnNo];
                                    //   validity_date >= '%@' and claim_status = 0
                                    const char *sqlStatement = giftCouponFetchQuery.UTF8String;
                                    
                                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
                                        
                                        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                                            
                                            noOfClaimsLimit = sqlite3_column_int(localSelectStmt, 0);
                                            customerCouponExists = true;
                                            break;
                                        }
                                        sqlite3_finalize(localSelectStmt);
                                    }
                                    localSelectStmt = nil;
                                    
                                    if(customerCouponExists){
                                        
                                        //                            if(noOfClaimsLimit > 0 && (totalNoOfClaimsLimit >= noOfClaimsLimit || (totalNoOfClaimsLimit >= 1))){ // check condition again, I think this condition is nor required bcoz for limited_use=1 no need to check this..  (totalNoOfClaimsLimit >= noOfClaimsLimit || (totalNoOfClaimsLimit >= 1))
                                        
                                        if(noOfClaimsLimit > 0 && (totalNoOfClaimsLimit >= noOfClaimsLimit || (totalNoOfClaimsLimit >= 1))){
                                            
                                            couponDetailsDic = [NSMutableDictionary new];
                                            // -----------------> Here Getting Coupon details Dic <-----------------
                                            couponDetailsDic = [self getCouponDetailsForCouponID:givenCouponCodeStr forPhoneNumer:customerPhnNo withPhoneNumRequiredStatus:YES];
                                            // -----------------> Here Sending Results Dic <-----------------
                                            finalReturnDic = couponDetailsDic;
                                            return finalReturnDic;
                                            // }
                                        }
                                        else{
                                            
                                            [responseHeaderDic setValue:@"Coupon id limit crossed"  forKey:@"responseMessage"];
                                            [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                            
                                            finalReturnDic = errorDetailsDic;
                                            return finalReturnDic;
                                        }
                                    }
                                    
                                    else{
                                        
                                        [responseHeaderDic setValue:@"This coupon can not be used in Offline"  forKey:@"responseMessage"];
                                        [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                        
                                        finalReturnDic = errorDetailsDic;
                                        return finalReturnDic;
                                    }
                                    
                                    // important don't delete  Auto issue process... present this process is not required in offline .. remove above else condition and use this else if condition only when auto issue process is required...
                                    
//                                    else if(!customerCouponExists && totalNoOfClaimsLimit > 0){ // if multiplesStatus == 1||0 and limited_use-1  then issue process in this way
//
//                                        // ------>  get all coupon details for "couponProgramCodeStr" from coupoun_master and put into a dictionary and next insert/issue this details to the customer..
//
//                                        NSString * getCouponDetailsForCouponPromg = [NSString stringWithFormat:@"select coupon_program_code, unit_cash_value, expiry_date, no_of_claims_limited from gift_coupons_master where coupon_program_code = '%@'" , couponProgramCodeStr];
//
//                                        NSMutableDictionary * issueCouponDetailsDic;
//
//                                        const char *sqlStatement = getCouponDetailsForCouponPromg.UTF8String;
//
//                                        if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
//
//                                            while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
//
//                                                issueCouponDetailsDic = [[NSMutableDictionary alloc] init];
//
//                                                NSString  * programCodeStr = @"";
//                                                float couponValue = 0.0;
//                                                NSString  * validityDateStr = @"";
//                                                int noOfClaims = 0;
//
//
//                                                if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt,0))
//                                                    programCodeStr = @((char *)sqlite3_column_text(localSelectStmt, 0));
//
//                                                if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
//                                                    couponValue = sqlite3_column_double(localSelectStmt, 1);
//
//                                                if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
//                                                    validityDateStr = @((char *)sqlite3_column_text(localSelectStmt, 2));
//
//                                                if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
//                                                    noOfClaims = sqlite3_column_int(localSelectStmt, 3);
//
//
//                                                [issueCouponDetailsDic setValue:programCodeStr forKey:@"couponProgramCode"];
//                                                [issueCouponDetailsDic setValue:programCodeStr forKey:@"couponCode"]; //programCodeStr
//                                                [issueCouponDetailsDic setValue:@"" forKey:@"issuedTo"];
//                                                [issueCouponDetailsDic setValue:currentdate forKey:@"issueDate"];
//                                                [issueCouponDetailsDic setValue:presentLocation forKey:@"issuedAt"];
//                                                [issueCouponDetailsDic setValue:@"" forKey:@"customerName"];
//                                                [issueCouponDetailsDic setValue:@"" forKey:@"customerEmail"];
//                                                [issueCouponDetailsDic setValue:customerPhnNo forKey:@"customerMobile"];
//                                                [issueCouponDetailsDic setValue:[NSNumber numberWithInt:0] forKey:@"claimStatus"];
//                                                [issueCouponDetailsDic setValue:@"" forKey:@"claimedAt"];
//                                                [issueCouponDetailsDic setValue:@"" forKey:@"billRef"];
//                                                [issueCouponDetailsDic setValue:[NSNumber numberWithFloat:couponValue] forKey:@"couponValue"];
//                                                [issueCouponDetailsDic setValue:validityDateStr forKey:@"validityDate"];
//                                                [issueCouponDetailsDic setValue:couponId forKey:@"couponId"];// for multiples='true', couponCode & couponId == couponProgramCode
//
//                                                [issueCouponDetailsDic setValue:[NSNumber numberWithInt:noOfClaims] forKey:@"noOfClaims"];
//
////                                                if(multiplesStatus == 0){ // wrong condition
////
////                                                    [issueCouponDetailsDic setValue:[NSNumber numberWithInt:totalNoOfClaimsLimit] forKey:@"noOfClaims"];
////                                                }
//
//                                                break;
//                                            }
//                                            sqlite3_finalize(localSelectStmt);
//                                            localSelectStmt = nil;
//                                        }
//
//
//                                        // -------------->START OF ISSUING MULTIPLE='true'||false and  when Limited_Use - true COUPON to CUSTOMER-------------->
//                                        if(issueCouponDetailsDic != nil){
//
//                                            BOOL issuedSuccessfully = false;
//
//                                            NSString * sNo = [NSString stringWithFormat:@"%d",1];
//                                            const char * sqlSelectStmt = "select s_no from customer_gift_coupons order by s_no DESC LIMIT 1";
//
//                                            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
//                                                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
//
//                                                    sNo = @((char *)sqlite3_column_text(localSelectStmt, 0));
//                                                    sNo = [NSString stringWithFormat:@"%d", sNo.intValue+1];
//                                                }
//                                                sqlite3_finalize(localSelectStmt);
//                                                localSelectStmt = nil;
//                                            }
//
//                                            const char * issueMultipleCouponInsertQuery = "INSERT into customer_gift_coupons(s_no, coupon_code, coupon_program_code, issued_to, issue_date, issued_at, customer_name, customer_email, customer_mobile, claim_status, claimed_at, bill_ref, coupon_value, validity_date, coupon_id, no_of_claims, `offline_gift_coupon_sync_status` TINYINT(4) NULL DEFAULT '0', `need_to_update_online` TINYINT(4) NULL DEFAULT '0') Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
//
//                                            if(sqlite3_prepare_v2(localDatabase, issueMultipleCouponInsertQuery, -1, &localInsertStmt, NULL) == SQLITE_OK) {
//
//                                                sqlite3_bind_int(localInsertStmt, 1, sNo.intValue);
//                                                //                         sNo = [NSString stringWithFormat:@"%d", sNo.intValue+1];
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"couponCode"] && ![[issueCouponDetailsDic valueForKey:@"couponCode"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 2, [[issueCouponDetailsDic valueForKey:@"couponCode"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"couponProgramCode"] && ![[issueCouponDetailsDic valueForKey:@"couponProgramCode"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 3, [[issueCouponDetailsDic valueForKey:@"couponProgramCode"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"issuedTo"] && ![[issueCouponDetailsDic valueForKey:@"issuedTo"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 4, [[issueCouponDetailsDic valueForKey:@"issuedTo"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"issueDate"] && ![[issueCouponDetailsDic valueForKey:@"issueDate"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 5, [[issueCouponDetailsDic valueForKey:@"issueDate"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"issuedAt"] && ![[issueCouponDetailsDic valueForKey:@"issuedAt"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 6, [[issueCouponDetailsDic valueForKey:@"issuedAt"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"customerName"] && ![[issueCouponDetailsDic valueForKey:@"customerName"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 7, [[issueCouponDetailsDic valueForKey:@"customerName"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 7, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"customerEmail"] && ![[issueCouponDetailsDic valueForKey:@"customerEmail"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 8, [[issueCouponDetailsDic valueForKey:@"customerEmail"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"customerMobile"] && ![[issueCouponDetailsDic valueForKey:@"customerMobile"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 9, [[issueCouponDetailsDic valueForKey:@"customerMobile"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"claimStatus"] && ![[issueCouponDetailsDic valueForKey:@"claimStatus"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_int(localInsertStmt, 10, [[issueCouponDetailsDic valueForKey:@"claimStatus"] intValue]);
//                                                else
//                                                    sqlite3_bind_int(localInsertStmt, 10, 0);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"claimedAt"] && ![[issueCouponDetailsDic valueForKey:@"claimedAt"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 11, [[issueCouponDetailsDic valueForKey:@"claimedAt"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 11, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"billRef"] && ![[issueCouponDetailsDic valueForKey:@"billRef"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 12, [[issueCouponDetailsDic valueForKey:@"billRef"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 12, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"couponValue"] && ![[issueCouponDetailsDic valueForKey:@"couponValue"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_double(localInsertStmt, 13, [[issueCouponDetailsDic valueForKey:@"couponValue"] floatValue]);
//                                                else
//                                                    sqlite3_bind_double(localInsertStmt, 13, 0.0);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"validityDate"] && ![[issueCouponDetailsDic valueForKey:@"validityDate"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 14, [[issueCouponDetailsDic valueForKey:@"validityDate"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 14, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"couponId"] && ![[issueCouponDetailsDic valueForKey:@"couponId"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_text(localInsertStmt, 15, [[issueCouponDetailsDic valueForKey:@"couponId"] UTF8String], -1, SQLITE_TRANSIENT);
//                                                else
//                                                    sqlite3_bind_text(localInsertStmt, 15, (@"").UTF8String, -1, SQLITE_TRANSIENT);
//
//                                                if ([issueCouponDetailsDic.allKeys containsObject:@"noOfClaims"] && ![[issueCouponDetailsDic valueForKey:@"noOfClaims"] isKindOfClass:[NSNull class]])
//                                                    sqlite3_bind_int(localInsertStmt, 16, [[issueCouponDetailsDic valueForKey:@"noOfClaims"] intValue]);
//                                                else
//                                                    sqlite3_bind_int(localInsertStmt, 16, 0);
//
//                                                sqlite3_bind_int(localInsertStmt, 17, 1); //making sync to online flag to true
//                                                sqlite3_bind_int(localInsertStmt, 18, 1);//making update to online flag to true
//
//                                                issuedSuccessfully = true;
//
//                                                if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
//
//                                                    NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
//                                                    NSLog(@"issue gift coupon becomes false in due error while inserting into database");
//                                                }
//                                            }
//
//                                            sqlite3_finalize(localSelectStmt);
//                                            localInsertStmt = nil;
//
//
//                                            if(issuedSuccessfully){ // now fetch details and send as result
//
//                                                couponDetailsDic = [NSMutableDictionary new];
//                                                // -----------------> Here Getting Coupon details Dic <-----------------
//                                                couponDetailsDic = [self getCouponDetailsForCouponID:givenCouponCodeStr forPhoneNumer:customerPhnNo withPhoneNumRequiredStatus:YES];
//                                                // -----------------> Here Sending Results Dic <-----------------
//
//                                                finalReturnDic = couponDetailsDic;
//                                                return finalReturnDic;
//                                            }
//                                            else{
//
//                                                NSLog(@"%s",sqlite3_errmsg(localDatabase));
//                                                [responseHeaderDic setValue:[NSString stringWithFormat:@"%s",sqlite3_errmsg(localDatabase)]  forKey:@"responseMessage"];
//                                                [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//
//                                                finalReturnDic = errorDetailsDic;
//
//                                                return finalReturnDic;
//                                            }
//
//                                        }
//                                        else{
//
//                                            NSLog(@"%s",sqlite3_errmsg(localDatabase));
//                                            [responseHeaderDic setValue:@"coupon id does not exist"  forKey:@"responseMessage"];
//                                            [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//
//                                            finalReturnDic = errorDetailsDic;
//
//                                            return finalReturnDic;
//                                        }
//                                    } // end of issue process
                                    
                                    //Upto here important don't delete  Auto issue process... present this process is not required in offline ..

                                    //
                                }
                            } //End of limitedUseStatus = 1....
                            
                             // no need of phn no when multiples-1 limit-0
                            else if(limitedUseStatus == 0){ // UNLIMITED USE of coupon till reached to totalNoOfClaimsLimit
                                
                                if(multiplesStatus == 1){ // multiplesStatus == 1, So global use.. so directly get details and use coupon
                                    
                                    
                                    [responseHeaderDic setValue:@"This coupon can not be used in Offline"  forKey:@"responseMessage"];
                                    [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                    
                                    finalReturnDic = errorDetailsDic;
                                    return finalReturnDic;
                                    
                                    
                                    // Don't delete below code.. here we are getting coupon detals which can be used globally.. present in Offline not required...
//                                    if(totalNoOfClaimsLimit > 0){
//
//                                        couponDetailsDic = [NSMutableDictionary new];
//                                        // -----------------> Here Getting Coupon details Dic <-----------------
//                                        couponDetailsDic = [self getCouponDetailsForCouponID:givenCouponCodeStr forPhoneNumer:customerPhnNo withPhoneNumRequiredStatus:NO];
//                                        // -----------------> Here Sending Results Dic <-----------------
//
//                                        finalReturnDic = couponDetailsDic;
//                                        return finalReturnDic;
//                                    }
//                                    else{
//
//                                        NSLog(@"%s",sqlite3_errmsg(localDatabase));
//                                        [responseHeaderDic setValue:@"Given all coupon id's are already claimed"  forKey:@"responseMessage"];
//                                        [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
//
//                                        finalReturnDic = errorDetailsDic;
//                                        return finalReturnDic;
//                                    }
                                }
                                else if(multiplesStatus == 0){
                                    
                                    if([customerPhnNo length] == 10){ // mobile phn required to enter bcoz coupon is customer specific..
                                        
                                        if(assignedStatus == 0){
                                            
                                            NSLog(@"%s",sqlite3_errmsg(localDatabase));
                                            [responseHeaderDic setValue:@"Given Coupon Id Is Not Assigned"  forKey:@"responseMessage"];
                                            [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                            
                                            finalReturnDic = errorDetailsDic;
                                            return finalReturnDic;
                                        }
                                        
                                        else {
                                            
                                            BOOL customerCouponExists = false;
                                            int noOfCouponClaimLimit = 0;
                                            NSString * valdityDate = @"";
                                            int claimStatus = 0;
                                            
                                            // checking if already this customer have entered coupon in customer_gift_coupons...
                                            NSString * giftCouponFetchQuery = [NSString stringWithFormat:@"select claim_status,validity_date,no_of_claims from customer_gift_coupons where (coupon_code LIKE '%%%@%%' or coupon_id LIKE '%%%@%%') and customer_mobile = '%@'", givenCouponCodeStr,givenCouponCodeStr,customerPhnNo];
                                            
                                            const char *sqlStatement = giftCouponFetchQuery.UTF8String;
                                            
                                            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK){
                                                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                                                    
                                                    claimStatus = sqlite3_column_int(localSelectStmt, 0);
                                                    
                                                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                                                        valdityDate = @((char *)sqlite3_column_text(localSelectStmt,1));
                                                    
                                                    noOfCouponClaimLimit = sqlite3_column_int(localSelectStmt, 2);
                                                    customerCouponExists = true;
                                                    
                                                    break;
                                                }
                                                sqlite3_finalize(localSelectStmt);
                                                localSelectStmt = nil;
                                            }
                                            
                                            if(customerCouponExists){
                                                
                                                if(claimStatus){
                                                    
                                                    NSLog(@"%s",sqlite3_errmsg(localDatabase));
                                                    [responseHeaderDic setValue:@"coupon already claimed"  forKey:@"responseMessage"];
                                                    [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                                    
                                                    finalReturnDic = errorDetailsDic;
                                                    
                                                    return finalReturnDic;
                                                }
                                                else if(valdityDate < currentdate){
                                                    
                                                    NSLog(@"%s",sqlite3_errmsg(localDatabase));
                                                    [responseHeaderDic setValue:@"coupon expired"  forKey:@"responseMessage"];
                                                    [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                                    
                                                    finalReturnDic = errorDetailsDic;
                                                    
                                                    return finalReturnDic;
                                                }
                                                else if(noOfCouponClaimLimit == 0 || noOfCouponClaimLimit < 0){
                                                    
                                                    NSLog(@"%s",sqlite3_errmsg(localDatabase));
                                                    [responseHeaderDic setValue:@"coupon claim limit crossed"  forKey:@"responseMessage"];
                                                    [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                                    
                                                    finalReturnDic = errorDetailsDic;
                                                    
                                                    return finalReturnDic;
                                                }// totalNoOfClaimsLimit > 0 check this condition if required.
                                                
                                                else{
                                                    
                                                    couponDetailsDic = [NSMutableDictionary new];
                                                    // -----------------> Here Getting Coupon details Dic <-----------------
                                                    couponDetailsDic = [self getCouponDetailsForCouponID:givenCouponCodeStr forPhoneNumer:customerPhnNo withPhoneNumRequiredStatus:YES];
                                                    // -----------------> Here Sending Results Dic <-----------------
                                                    finalReturnDic = couponDetailsDic;
                                                    return finalReturnDic;
                                                }
                                            } // end of customerCouponExists
                                            
                                            else { // if customerCouponExists -false , customer does not have this coupon
                                                
                                                NSLog(@"%s",sqlite3_errmsg(localDatabase));
                                                [responseHeaderDic setValue:@"coupon need to issue to the customer"  forKey:@"responseMessage"];
                                                [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                                
                                                finalReturnDic = errorDetailsDic;
                                                
                                                return finalReturnDic;
                                            }

                                        }
                                        
                                    }
                                    else{
                                        NSLog(@"%s",sqlite3_errmsg(localDatabase));
                                        [responseHeaderDic setValue:@"The given coupon requires customer mobile number"  forKey:@"responseMessage"];
                                        [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                                        
                                        finalReturnDic = errorDetailsDic;
                                        return finalReturnDic;
                                    }
                                }
                            }
                        }
                        
                    }// end of couponLocationCount condition...
                    
                    else{
                        
                        NSLog(@"%s",sqlite3_errmsg(localDatabase));
                        [responseHeaderDic setValue:@"coupon id is not exist in this store"  forKey:@"responseMessage"];
                        [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                        finalReturnDic = errorDetailsDic;
                        return finalReturnDic;
                    }
                }
            }
            
            else{
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
                [responseHeaderDic setValue:@"coupon id does not exist"  forKey:@"responseMessage"];
                [errorDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                
                finalReturnDic = errorDetailsDic;

                return finalReturnDic;
            }
            
        } // if( sqlite3_open) --close
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    } @finally {
      
        localSelectStmt = nil;
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
    }
    
    return finalReturnDic;
    
}



/**
 * @description  In this method we are updating the customer coupon details into customer_gift_coupon table.
 * @date         27/05/2019...
 * @method       updateCustomerCouponDetailsTableForPhoneNum:-- noOfClaimsToUpdate:-- setClaimStatus:- forCouponCode:-
 * @author
 * @param        int
 * @param        BOOL
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(void)updateCustomerCouponDetailsTableForPhoneNum:(NSString *)customerPhnNum noOfClaimsToUpdate:(int)noOfClaims setClaimStatus:(BOOL)claimStatus forCouponCode:(NSString *)couponCode totalNumberOfClaims:(int)totalClaimsLimit forBillReference:(NSString *)billRefStr{
    
    BOOL saveStatus = false;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            NSString *query = [NSString stringWithFormat:@"update customer_gift_coupons SET claim_status='%d', no_of_claims ='%d', claimed_at = '%@', bill_ref = '%@', offline_gift_coupon_sync_status = 1  where customer_mobile ='%@' and coupon_code = '%@' ",claimStatus,noOfClaims,presentLocation,billRefStr,customerPhnNum,couponCode];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                
                if (sqlite3_step(insertStmt) == SQLITE_DONE) {
                    
                    saveStatus = true;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database));
                }
                
                sqlite3_finalize(insertStmt);
                insertStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database));
                insertStmt = nil;
            }
            
            
            NSString *query2 = [NSString stringWithFormat:@"update gift_coupons SET no_of_claims ='%d', offline_gift_coupon_sync_status = 1 where  coupon_code = '%@' ",totalClaimsLimit,couponCode];

            const char *sqlStatement2 = query2.UTF8String;
            
            if(sqlite3_prepare_v2(database, sqlStatement2, -1, &insertStmt, NULL) == SQLITE_OK) {
                
                if (sqlite3_step(insertStmt) == SQLITE_DONE) {
                    
                    saveStatus = true;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database));
                }
                
                sqlite3_finalize(insertStmt);
                insertStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database));
                insertStmt = nil;
            }
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        sqlite3_close(database);
        insertStmt = nil;
    }
}


#pragma mark upto here related coupons Update code


#pragma mark start of Vouchers Offline (CSV File) Download code


/**
 * @description  Here we are calling voucherDownload service to get voucher tables URL's  ....
 * @date         27/05/2019
 * @method       getVoucherDownloadDetailsInCSVFileForm:--
 * @author       Roja
 * @param
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getVoucherDownloadDetailsInCSVFileForm{
    BOOL status = false;
    
    @try {
        
        NSArray *loyaltyKeys = @[REQUEST_HEADER];//START_DATE
        NSArray * loyaltyObjects = @[[RequestHeader getRequestHeader]]; //@""
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSUserDefaults *defaults = [[NSUserDefaults alloc] init];
        
//        if ([[defaults valueForKey:LAST_VOUCHERS_UPDATED_DATE] length]){
//
//            NSLog(@"---- GIFT_VOUCHERS ----Download----%@",[defaults valueForKey:LAST_VOUCHERS_UPDATED_DATE]);
//            loyaltyObjects = @[[RequestHeader getRequestHeader], [NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_VOUCHERS_UPDATED_DATE]]];
//        }
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        WebServiceController * controller = [[WebServiceController alloc] init];
        controller.voucherServiceDelegate = self;
        status = [controller getVoucherDownloadsDetails:loyaltyString];
        
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        return status;
    }
}


/**
 * @description  Here we Handling Error response of getVoucherDownload   ....
 * @date         27/05/2019
 * @method       getVoucherDownloadDetailsErrorResponse:--
 * @author       Roja
 * @param        NSString
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)getVoucherDownloadDetailsErrorResponse:(NSString *)failureString{

    BOOL status = false;
    
    @try { if ([failureString caseInsensitiveCompare:NO_RECORDS_FOUND] == NSOrderedSame) {
        
        status = TRUE;
    }
    } @catch (NSException *exception) {
        
        status = false;
        
    } @finally {
        
        return status;
    }
}



/**
 * @description  Here we Handling success response of getVoucherDownload   ....
 * @date         27/05/2019
 * @method       getVoucherDownloadDetailsSuccessResponse:--
 * @author       Roja
 * @param        NSDictionary
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)getVoucherDownloadDetailsSuccessResponse:(NSDictionary *)successDictionary{

    BOOL status = false;
    
    BOOL voucherMasterStatus = false;
    BOOL customerVoucherStatus = false;
    BOOL vouchersStatus = false;
    BOOL voucherLocationStatus = false;

    
    @try {
        
        if(isFileDownload){
            
            NSString * fileUrlStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:FILE_PATH] defaultReturn:@""]; // VoucherMaster
            
            NSString * customerVoucherURLStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:CUSTOMER_VOUCHER_FILE_PATH] defaultReturn:@""];
            
            NSString * vouchersURLStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:VOUCHER_FILE_PATH] defaultReturn:@""];
            
            
            NSString * voucherLocationURLStr = [self checkGivenValueIsNullOrNil:[successDictionary valueForKey:VOUCHER_LOCATION_FILE_PATH] defaultReturn:@""];
            
            if(fileUrlStr.length){

                voucherMasterStatus = [self DownLoadFileAndInsertItInLoadDB:fileUrlStr dataType:VOUCHERS_MASTER_STRING];
            }
            if(customerVoucherURLStr.length){

                customerVoucherStatus = [self DownLoadFileAndInsertItInLoadDB:customerVoucherURLStr dataType:CUSTOMER_VOUCHERS_STRING];
            }
            if(vouchersURLStr.length){

                vouchersStatus = [self DownLoadFileAndInsertItInLoadDB:vouchersURLStr  dataType:VOUCHERS_STRING];
            }
            if(voucherLocationURLStr.length){

                voucherLocationStatus = [self DownLoadFileAndInsertItInLoadDB:voucherLocationURLStr dataType:VOUCHERS_LOCATION_STRING];
            }
        }
        
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        if(voucherMasterStatus && customerVoucherStatus && vouchersStatus && voucherLocationStatus){
            
            status = true;
        }
        
        return status;
    }
    
}


/**
 * @description  In this method we are saving voucher master related data in to gift_voucher_master table....
 * @date         28/05/2019
 * @method       saveVoucherMasterFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(BOOL)saveVoucherMasterFromCSVFile:(NSArray *)voucherMasterInfoArr{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- GIFT_VOUCHER_MASTER----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createVoucherMasterTableSqlStatement  = "create table if not exists 'gift_voucher_master' (`voucher_program_code` VARCHAR(50) NOT NULL, `promo_name` VARCHAR(45) NOT NULL, `unit_cash_value` FLOAT NOT NULL DEFAULT '0', `total_cash_value` FLOAT NOT NULL DEFAULT '0', `min_bill_amount` FLOAT NOT NULL DEFAULT '0', `created_on` DATE NOT NULL, `expiry_date` DATE NOT NULL, `validity_period` INT(11) NOT NULL DEFAULT '0', `country` VARCHAR(45) NOT NULL, `states` VARCHAR(250) NULL DEFAULT NULL, `status` VARCHAR(15) NULL DEFAULT NULL, `description` VARCHAR(250) NULL DEFAULT NULL, `multiple` TINYINT(4) NOT NULL DEFAULT '0', `is_paid` TINYINT(4) NULL DEFAULT '0', PRIMARY KEY (`voucher_program_code`))";
            
            if (sqlite3_exec(localDatabase, createVoucherMasterTableSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- GIFT_VOUCHER_MASTER TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
           
            const char * InsertVocuherSqlStatement = "INSERT OR REPLACE into gift_voucher_master( voucher_program_code, promo_name, unit_cash_value, total_cash_value, min_bill_amount, created_on, expiry_date,validity_period, country, states, status, description, multiple, is_paid)  Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertVocuherSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * voucherMasterListStr in voucherMasterInfoArr) {
                    
                    NSArray * voucherMasterDetailsArr = [voucherMasterListStr componentsSeparatedByString:@","];
                    
                    if([voucherMasterDetailsArr count] >= 14){
                        
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_double(localInsertStmt, 3, [[self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:2] defaultReturn:@"0"] doubleValue]);
                        
                        sqlite3_bind_double(localInsertStmt, 4, [[self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:3] defaultReturn:@"0"] doubleValue]);
                        
                        sqlite3_bind_double(localInsertStmt, 5, [[self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:4] defaultReturn:@"0"] doubleValue]);
                        
                        sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 7, [self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:6] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 8, [[self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:7] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_text(localInsertStmt, 9, [self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:8] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 10, [self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:9] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 11, [self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:10] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 12, [self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:11] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 13, [[self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:12] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_int(localInsertStmt, 14, [[self checkGivenValueFromFileIsNullOrNil:[voucherMasterDetailsArr objectAtIndex:13] defaultReturn:@"0"] intValue]);
                        
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"gift_voucher_master becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- GIFT_VOUCHER_MASTER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- GIFT_VOUCHER_MASTER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- GIFT_VOUCHER_MASTER----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}




/**
 * @description  In this method we are saving customer vouchers related data in to customer_gift_voucher table....
 * @date         28/05/2019
 * @method       saveCustomerVouchersFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(BOOL)saveCustomerVouchersFromCSVFile:(NSArray *)customerVoucherInfoArr{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ---- CUSTOMER_GIFT_VOUCHER ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createCustomerVoucherTableSqlStatement  = "create table if not exists 'customer_gift_vouchers' ( `voucher_code` VARCHAR(50) NOT NULL DEFAULT '', `voucher_program_code` VARCHAR(50) NULL DEFAULT NULL, `issued_to` VARCHAR(50) NULL DEFAULT NULL, `issue_date` DATE NULL DEFAULT NULL, `issued_at` VARCHAR(50) NOT NULL, `customer_name` VARCHAR(50) NOT NULL, `customer_email` VARCHAR(60) NULL DEFAULT NULL, `customer_mobile` VARCHAR(60) NULL DEFAULT NULL, `claim_status` TINYINT(4) NULL DEFAULT NULL, `claimed_at` VARCHAR(50) NULL DEFAULT NULL, `bill_ref` VARCHAR(100) NULL DEFAULT NULL, `voucher_value` FLOAT NULL DEFAULT NULL, `validity_date` DATE NULL DEFAULT NULL, `voucher_id` VARCHAR(50) NULL DEFAULT NULL, PRIMARY KEY (`voucher_code`))";
            
            if (sqlite3_exec(localDatabase, createCustomerVoucherTableSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- CUSTOMER_GIFT_VOUCHER  TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertCustomerVocuherSqlStatement = "INSERT OR REPLACE into customer_gift_vouchers( voucher_code, voucher_program_code, issued_to, issue_date, issued_at, customer_name,customer_email, customer_mobile, claim_status, claimed_at, bill_ref,voucher_value, validity_date, voucher_id )  Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertCustomerVocuherSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * customerVoucherListStr in customerVoucherInfoArr) {
                    
                    NSArray * customerVoucherDetailsArr = [customerVoucherListStr componentsSeparatedByString:@","];
                    
                    if([customerVoucherDetailsArr count] >= 14){
                        
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 6, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:5] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 7, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:6] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 8, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:7] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_int(localInsertStmt, 9, [[self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:8] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_text(localInsertStmt, 10, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:9] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 11, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:10] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_double(localInsertStmt, 12, [[self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:11] defaultReturn:@"0"] doubleValue]);
                        
                        sqlite3_bind_text(localInsertStmt, 13, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:12] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        sqlite3_bind_text(localInsertStmt, 14, [self checkGivenValueFromFileIsNullOrNil:[customerVoucherDetailsArr objectAtIndex:13] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"customer_gift_voucher  becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- CUSTOMER_GIFT_VOUCHER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- CUSTOMER_GIFT_VOUCHER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- CUSTOMER_GIFT_VOUCHER----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}


/**
 * @description  In this method we are saving gift vouchers related data in to  gift_voucher table....
 * @date         28/05/2019
 * @method       saveVouchersFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(BOOL)saveVouchersFromCSVFile:(NSArray *)voucherInfoArr{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ----  GIFT_VOUCHER ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            char *errMsg;
            
            const char * createCustomerVoucherTableSqlStatement  = "create table if not exists 'gift_vouchers' (`voucher_code` VARCHAR(50) NOT NULL, `voucher_program_code` VARCHAR(50) NOT NULL, `assigned_status` TINYINT(5) NOT NULL, `voucher_status` TINYINT(5) NOT NULL, `voucher_id` VARCHAR(50) NOT NULL, PRIMARY KEY (`voucher_code`))";
            
            if (sqlite3_exec(localDatabase, createCustomerVoucherTableSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- GIFT_VOUCHER TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertCustomerVocuherSqlStatement = "INSERT OR REPLACE into gift_vouchers( voucher_code, voucher_program_code, assigned_status, voucher_status, voucher_id)  Values(?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertCustomerVocuherSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSString * voucherListStr in voucherInfoArr) {
                    
                    NSArray * voucherDetailsArr = [voucherListStr componentsSeparatedByString:@","];
                    
                    if([voucherDetailsArr count] >= 5){
                        
                        sqlite3_bind_text(localInsertStmt, 1, [self checkGivenValueFromFileIsNullOrNil:[voucherDetailsArr objectAtIndex:0] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[voucherDetailsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_int(localInsertStmt, 3, [[self checkGivenValueFromFileIsNullOrNil:[voucherDetailsArr objectAtIndex:2] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_int(localInsertStmt, 4, [[self checkGivenValueFromFileIsNullOrNil:[voucherDetailsArr objectAtIndex:3] defaultReturn:@"0"] intValue]);

                        sqlite3_bind_text(localInsertStmt, 5, [self checkGivenValueFromFileIsNullOrNil:[voucherDetailsArr objectAtIndex:4] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"gift_voucher  becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- GIFT_VOUCHER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- GIFT_VOUCHER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- GIFT_VOUCHER----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}


/**
 * @description  In this method we are saving gift vouchers Location related data in to  gift_voucher_locations table....
 * @date         28/05/2019
 * @method       saveVoucherLocationFromCSVFile:--
 * @author       Roja
 * @param        NSMutableArray
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(BOOL)saveVoucherLocationFromCSVFile:(NSArray *)voucherLocationInfoArr{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"----Start Time ----  GIFT_VOUCHER_LOCATION ----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localSelectStmt =nil;

    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createCustomerVoucherTableSqlStatement  = "create table if not exists 'gift_vouchure_locations' (`ref_no` INT(15) NOT NULL, `gift_vouchure_promo` CHAR(50) NOT NULL, `valid_location` VARCHAR(50) NOT NULL, `zone_id` VARCHAR(50) NOT NULL, PRIMARY KEY (`ref_no`))";
                                       
            
            if (sqlite3_exec(localDatabase, createCustomerVoucherTableSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- GIFT_VOUCHER_LOCATION TABLE Created Sucessfully ----");
            }
            
            NSString * refNum = [NSString stringWithFormat:@"%d",1];

            const char * sqlSelectStmt = "select ref_no from gift_vouchure_locations order by ref_no DESC LIMIT 1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStmt, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    refNum = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    refNum = [NSString stringWithFormat:@"%d",refNum.intValue+1];
                }
                sqlite3_finalize(localSelectStmt);
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * InsertCustomerVocuherSqlStatement = "INSERT OR REPLACE into gift_vouchure_locations(ref_no, gift_vouchure_promo, valid_location, zone_id)  Values(?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertCustomerVocuherSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (NSString * voucherLocationListStr in voucherLocationInfoArr) {
                    
                    NSArray * voucherLocationDetailsArr = [voucherLocationListStr componentsSeparatedByString:@","];
                    
                    if([voucherLocationDetailsArr count] >= 4){
                        
//                        sqlite3_bind_int(localInsertStmt, 1, [[self checkGivenValueFromFileIsNullOrNil:[voucherLocationDetailsArr objectAtIndex:0] defaultReturn:@"0"] intValue]);
                        
                        sqlite3_bind_int(localInsertStmt, 1, refNum.intValue);
                        refNum = [NSString stringWithFormat:@"%d", refNum.intValue+1];

                        sqlite3_bind_text(localInsertStmt, 2, [self checkGivenValueFromFileIsNullOrNil:[voucherLocationDetailsArr objectAtIndex:1] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 3, [self checkGivenValueFromFileIsNullOrNil:[voucherLocationDetailsArr objectAtIndex:2] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(localInsertStmt, 4, [self checkGivenValueFromFileIsNullOrNil:[voucherLocationDetailsArr objectAtIndex:3] defaultReturn:@""].UTF8String, -1, SQLITE_TRANSIENT);

                        
                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                            //                        isCompleteDataInserted = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            NSLog(@"gift_voucher_location  becomes false in due error while inserting into database");
                        }
                        else {
                            //                        isCompleteDataInserted = true;
                        }
                        
                        sqlite3_reset(localInsertStmt);
                    }
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- GIFT_VOUCHER_LOCATION ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- GIFT_VOUCHER_LOCATION ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        isCompleteDataInserted = false;
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- GIFT_VOUCHER_LOCATION----%@",currentdate);
        
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}




#pragma -mark Download methods which are not in use...

#pragma -mark Fetch Voucher Details...

-(NSMutableDictionary *)fetchGiftVoucherDetailsFromSqliteWithVoucherCodeStr:(NSString *)voucherCodeStr {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy"; // @"yyyy/MM/dd"
    NSString* currentdate = [f stringFromDate:today];
    
    
    NSMutableDictionary * FinalGiftVoucherDetailsDic = [NSMutableDictionary new];
    NSMutableDictionary * voucherMasterDetailsDic;
    NSMutableDictionary * giftVoucherDetailsDic;


    NSMutableDictionary *responseHeaderDic = [[NSMutableDictionary alloc] init];
    // Default setting success..
    [responseHeaderDic setValue:@"-1" forKey:@"responseCode"];
    [responseHeaderDic setValue:@"" forKey:@"responseMessage"];
    
    [FinalGiftVoucherDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
    
    NSString * dbPath;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    int claimStatus = 0;

    @try {
        dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if (sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {//&database

            int assignedStatus = 0;
            int voucherStatus = 0;

            NSString * voucherProgramCodeStr = @"";
            NSString * expiryDate = @"";
            NSString * statusStr = @"";

            NSString * giftVoucherFetchQuery = [NSString stringWithFormat:@"select assigned_status,voucher_program_code,voucher_status from gift_vouchers where (voucher_code LIKE '%%%@%%' or voucher_id LIKE '%%%@%%')",voucherCodeStr, voucherCodeStr];
            
            const char *sqlStatement1 = giftVoucherFetchQuery.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement1, -1, &localSelectStmt, NULL) == SQLITE_OK){
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    assignedStatus = sqlite3_column_int(localSelectStmt, 0);
                    
                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                        voucherProgramCodeStr = @((char *)sqlite3_column_text(localSelectStmt,1));
                    
                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                        voucherStatus = sqlite3_column_int(localSelectStmt, 2);
                    
                    break;
                }
                sqlite3_finalize(localSelectStmt);
            }
            localSelectStmt = nil;

            
            if([voucherProgramCodeStr length]){
                
                if(voucherStatus == 0){
                    
                    [responseHeaderDic setValue:@"Voucher is not available" forKey:@"responseMessage"];
                    [FinalGiftVoucherDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                    
                    return FinalGiftVoucherDetailsDic;
                }
               else if(assignedStatus == 0){
                    
                    [responseHeaderDic setValue:@"Voucher need to issue to the customer" forKey:@"responseMessage"];
                    [FinalGiftVoucherDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];

                    return FinalGiftVoucherDetailsDic;
                }
                else{ // if assignedStatus == true & voucherStatus = true, now check this voucher claim_status in customer_voucher_details
                    
                    NSString * customerGiftCouponFetchQuery = [NSString stringWithFormat:@"select claim_status,validity_date from customer_gift_vouchers where (voucher_code LIKE '%%%@%%' or voucher_id LIKE '%%%@%%')",voucherCodeStr, voucherCodeStr];
                    
                    const char *sqlStatement2 = customerGiftCouponFetchQuery.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement2, -1, &localSelectStmt, NULL) == SQLITE_OK){
                        
                        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                            
                            claimStatus = sqlite3_column_int(localSelectStmt, 0);
                            
                            if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                                expiryDate = @((char *)sqlite3_column_text(localSelectStmt,1));
                            
                            break;
                        }
                        sqlite3_finalize(localSelectStmt);
                    } // sqlite3_prepare_v2 ---Close
                    localSelectStmt = nil;

                    if(claimStatus == 0){
                        
                        [responseHeaderDic setValue:@"Voucher already claimed" forKey:@"responseMessage"];
                        [FinalGiftVoucherDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                        
                        return FinalGiftVoucherDetailsDic;
                    }
                    else if(expiryDate < currentdate){
                        
                        [responseHeaderDic setValue:@"Voucher has expired" forKey:@"responseMessage"];
                        [FinalGiftVoucherDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                        
                        return FinalGiftVoucherDetailsDic;
                    }
                    else{ // Now get voucher full details...
                        
                        NSString * giftVoucherMasterFetchQuery = [NSString stringWithFormat:@"select * from gift_voucher_master where voucher_program_code = '%@'", voucherProgramCodeStr];
                        
                        const char *sqlStatement3 = giftVoucherMasterFetchQuery.UTF8String;
                        
                        if(sqlite3_prepare_v2(localDatabase, sqlStatement3, -1, &localSelectStmt, NULL) == SQLITE_OK){
                            
                            while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                                
                                voucherMasterDetailsDic = [[NSMutableDictionary alloc]init];
                                
                                NSString * promoNameStr = @"";
                                float unitCashValue = 0.0;
                                float totalCashVal = 0.0;
                                float minBillAmt = 0.0;
                                NSString * createdOnStr = @"";
                                int validityPeriod = 0;
                                NSString * countryStr = @"";
                                NSString * stateStr = @"";
                                NSString * descriptionStr = @"";
                                int multiple = 0;
                                int isPaid = 0;

//                                issueSpecific = 0;
//                                totalVouchers = 0;
                               
                                if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt,0))
                                    voucherProgramCodeStr = @((char *)sqlite3_column_text(localSelectStmt,0));
                                
                                if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                                    promoNameStr = @((char *)sqlite3_column_text(localSelectStmt,1));

                                if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                                    unitCashValue = sqlite3_column_double(localSelectStmt, 2);
                                
                                if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                                    totalCashVal = sqlite3_column_double(localSelectStmt, 3);
                                
                                if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                                    minBillAmt = sqlite3_column_double(localSelectStmt, 4);
                                
                                if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
                                    createdOnStr = @((char *)sqlite3_column_text(localSelectStmt,5));
                                
                                if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
                                    expiryDate = @((char *)sqlite3_column_text(localSelectStmt,6));
                                
                                if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt,7))
                                    validityPeriod = sqlite3_column_int(localSelectStmt, 7);

                                if((sqlite3_column_text(localSelectStmt, 8) != nil) && (char *)sqlite3_column_text(localSelectStmt,8))
                                    countryStr = @((char *)sqlite3_column_text(localSelectStmt,8));
                                
                                if((sqlite3_column_text(localSelectStmt, 9) != nil) && (char *)sqlite3_column_text(localSelectStmt,9))
                                    stateStr = @((char *)sqlite3_column_text(localSelectStmt,9));
                                
                                if((sqlite3_column_text(localSelectStmt, 10) != nil) && (char *)sqlite3_column_text(localSelectStmt,10))
                                    statusStr = @((char *)sqlite3_column_text(localSelectStmt,10));
                                
                                if((sqlite3_column_text(localSelectStmt, 11) != nil) && (char *)sqlite3_column_text(localSelectStmt,11))
                                    descriptionStr = @((char *)sqlite3_column_text(localSelectStmt,11));
                                
                                if((sqlite3_column_text(localSelectStmt, 12) != nil) && (char *)sqlite3_column_text(localSelectStmt,12))
                                    multiple = sqlite3_column_int(localSelectStmt, 12);
                                
                                if((sqlite3_column_text(localSelectStmt, 13) != nil) && (char *)sqlite3_column_text(localSelectStmt,13))
                                    isPaid = sqlite3_column_int(localSelectStmt, 13);
                                
                                
                                [voucherMasterDetailsDic setValue:voucherProgramCodeStr forKey:@"voucherProgramCode"];
                                [voucherMasterDetailsDic setValue:promoNameStr forKey:@"promoName"];
                                [voucherMasterDetailsDic setValue:[NSNumber numberWithFloat:unitCashValue] forKey:@"unitCashValue"];
                                [voucherMasterDetailsDic setValue:[NSNumber numberWithFloat:totalCashVal] forKey:@"totalCashValue"];
                                [voucherMasterDetailsDic setValue:[NSNumber numberWithFloat:minBillAmt] forKey:@"min_bill_amount"];
                                [voucherMasterDetailsDic setValue:createdOnStr forKey:@"createdOn"];
                                [voucherMasterDetailsDic setValue:expiryDate forKey:@"expiryDate"];
                                [voucherMasterDetailsDic setValue:[NSNumber numberWithInt:validityPeriod] forKey:@"validityPeriod"];
                                [voucherMasterDetailsDic setValue:countryStr forKey:@"country"];
                                [voucherMasterDetailsDic setValue:stateStr forKey:@"states"];
                                [voucherMasterDetailsDic setValue:statusStr forKey:@"status"];
                                [voucherMasterDetailsDic setValue:descriptionStr forKey:@"description"];
                                [voucherMasterDetailsDic setValue:[NSNumber numberWithInt:multiple] forKey:@"multiple"];
                                [voucherMasterDetailsDic setValue:[NSNumber numberWithInt:isPaid] forKey:@"isPaid"];
                                
                                break;
                            }
                            sqlite3_finalize(localSelectStmt);
                        }
                        localSelectStmt = nil;
                        
                        if([statusStr caseInsensitiveCompare:@"Active"] == NSOrderedSame){
                            
                            NSString * giftVoucherFetchQuery = [NSString stringWithFormat:@"select * from gift_vouchers where (voucher_code LIKE '%%%@%%' or voucher_id LIKE '%%%@%%')", voucherCodeStr,voucherCodeStr];
                            
                            const char *sqlStatement4 = giftVoucherFetchQuery.UTF8String;
                            
                            if(sqlite3_prepare_v2(localDatabase, sqlStatement4, -1, &localSelectStmt, NULL) == SQLITE_OK){
                                
                                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                                    
                                    giftVoucherDetailsDic = [[NSMutableDictionary alloc]init];
                                    
                                    NSString * voucherCodeStr = @"";
                                    NSString * voucherIdStr = @"";
                                    
//                                    maxRecords = 0;
//                                    saveGiftVoucherFlag = 0;
                                    
                                    if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt,0))
                                        voucherCodeStr = @((char *)sqlite3_column_text(localSelectStmt,0));
                                    
                                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                                        voucherProgramCodeStr = @((char *)sqlite3_column_text(localSelectStmt,1));
                                    
                                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                                        assignedStatus = sqlite3_column_int(localSelectStmt, 2);
                                
                                    if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                                        voucherStatus = sqlite3_column_int(localSelectStmt, 3);
                                    
                                    if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                                        voucherIdStr = @((char *)sqlite3_column_text(localSelectStmt,4));

                                    [giftVoucherDetailsDic setValue:voucherCodeStr forKey:@"voucherCode"];
                                    [giftVoucherDetailsDic setValue:voucherProgramCodeStr forKey:@"voucherProgramCode"];
                                    [giftVoucherDetailsDic setValue:[NSNumber numberWithInt:assignedStatus] forKey:@"assignedStatus"];
                                    [giftVoucherDetailsDic setValue:[NSNumber numberWithInt:voucherStatus] forKey:@"voucherStatus"];
                                    [giftVoucherDetailsDic setValue:voucherIdStr forKey:@"voucherId"];
                                    
                                    break;
                                }
                                sqlite3_finalize(localSelectStmt);
                            }
                            localSelectStmt = nil;

                        }
                        else if([statusStr caseInsensitiveCompare:@"Suspend"] == NSOrderedSame){
                            
                            [responseHeaderDic setValue:@"Voucher is InActive" forKey:@"responseMessage"];
                            [FinalGiftVoucherDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
                            
                            return FinalGiftVoucherDetailsDic;
                        }
 
                    } // End of get voucher full details...
                    
                }// Close - else(assignedStatus == true)
            }
            else{
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
        } // SQLite DB - close..

    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    } @finally {
        
        sqlite3_close(localDatabase);
        
        if(giftVoucherDetailsDic != nil && voucherMasterDetailsDic != nil ){
            
            [responseHeaderDic setValue:@"0" forKey:@"responseCode"];
            [responseHeaderDic setValue:@"Success" forKey:@"responseMessage"];
            
            [FinalGiftVoucherDetailsDic setValue:[NSNumber numberWithInt:claimStatus] forKey:@"claimStatus"];
            [FinalGiftVoucherDetailsDic setValue:voucherMasterDetailsDic forKey:@"giftvoucherDetails"];
            [FinalGiftVoucherDetailsDic setValue:giftVoucherDetailsDic forKey:@"giftvouchers"];
            [FinalGiftVoucherDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
        }
        else{
            [FinalGiftVoucherDetailsDic setValue:responseHeaderDic forKey:@"responseHeader"];
        }
    }
    
    return FinalGiftVoucherDetailsDic;
}

#pragma -mark Fetch Voucher Details...


-(void)updateGiftVoucherDetailsTableForVoucherCode:(NSString *)voucherCodeStr setClaimStatusTo:(int)claimStatus forBillRef:(NSString *)billRefStr {
    
    BOOL saveStatus = false;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
   
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            NSString *query = [NSString stringWithFormat:@"update customer_gift_vouchers SET claim_status = '%d',claimed_at = '%@', bill_ref = '%@' where (voucher_code LIKE '%%%@%%' or voucher_id LIKE '%%%@%%')", claimStatus,presentLocation,billRefStr,voucherCodeStr,voucherCodeStr];
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                
                if (sqlite3_step(insertStmt) == SQLITE_DONE) {
                    
                    saveStatus = true;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
                sqlite3_finalize(insertStmt);
                insertStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    @finally {
        sqlite3_close(database);
        insertStmt = nil;
    }
}


/**
 * @description  In this method we are calling the web service with startIndex inorder to get offers data....
 * @date
 * @method       saveOffers
 * @author
 * @param
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveOffers{
    
    BOOL isSaved = FALSE;
    Offers *offers = [[Offers alloc]init];
    offers.isSavingLocally = YES;
    int offerStartIndex = 0;
    int totalRecords = 0;
    @try {
        while (offerStartIndex <= totalRecords) {
            NSString *response = [offers offerServiceCall:offerStartIndex isDownloading:YES];
            if (response!=nil && response.length > 0) {
                NSError *e;
                NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [response dataUsingEncoding:NSUTF8StringEncoding]
                                                                     options: NSJSONReadingMutableContainers
                                                                       error: &e];
                NSArray *temp = JSON[@"offerList"];
                if ([[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE] isEqualToString:@"No Records Found"]) {
                    
                    //changed by Srinivasulu on 29/09/2017....
                    //popUp should be updated in case of no records...
                    
                    isSaved =  TRUE;
                    
                    //upto here on 29/09/2017....
                    
                }
                if (temp.count > 0) {
                    totalRecords = [[JSON valueForKey:@"totalRecords"] intValue];
                    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
                    rangesArr = [[NSMutableArray alloc]init];
                    customerFilterArr = [NSMutableArray new];
                    
                    @try {
                        
                        //                        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
                        //
                        //                            if (deleteStmt == nil) {
                        //                                const char *sqlStatement = "drop table offers";
                        //
                        //                                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                        //
                        //                                    if(SQLITE_DONE != sqlite3_step(deleteStmt))
                        //                                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                        //
                        //                                    sqlite3_reset(deleteStmt);
                        //                                }
                        //
                        //                            }
                        //
                        //                        }
                        //                        deleteStmt = nil;
                        
                        
                        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
                            
                            if (deleteStmt == nil) {
                                char *errMsg;
                                //                            private final String        CREATE_OFFERS_TABLE                    = "CREATE TABLE if not exists `offer` (    `offer_Id` TEXT,    `claim_coupons` TINYINT,"
                                //                            + "    `claim_loyalty_points` TINYINT,    `claim_gift_vouchers` TINYINT,`end_date` TEXT,    `offer_category` TEXT,    `offer_description` TEXT,    "
                                //                            + "`offer_image` LONGBLOB ,    `offer_name` TEXT,    `offer_status` TINYINT,    `priority` INTEGER,    `product_category` TEXT,    "
                                //                            + "`sell_products` TEXT,    `sell_sku_ids` TEXT,    `start_date` TEXT,    `store_location` TEXT,    `reward_type` TEXT, 'updatedDate' TEXT,  `sell_plu_code` TEXT,  `is_banner` TEXT,  `authorised_by` TEXT,  `closed_by` TEXT,  `closed_on` TEXT,  `closed_reason` TEXT,  `allow_multiple_discounts` TINYINT,  `day1` TINYINT,  `day2` TINYINT,  `day3` TINYINT,  `day4` TINYINT,  `day5` TINYINT,  `day6` TINYINT,  `day7` TINYINT,  `isRepeat` TINYINT,  `offer_start_time` TEXT,  `offer_end_time` TEXT,  `sell_group_id` TEXT,  `product_sub_category` TEXT,  `is_combo` TINYINT,  `is_lowest_price_item` TINYINT,)";
                                
                                
                                //changed by Srinivasulu on 14/07/2017....
                                
                                //                                const char *sqlStatement = "create table if not exists offers (offer_id text, claim_coupons integer, claim_loyalty_points integer,claim_gift_vouchers integer,offer_category text,offer_description double,offer_name text,offer_status integer, end_date text,sell_products text, sell_sku_ids text,start_date text,store_location text,reward_type text,updatedDate text,sell_plu_code text,is_banner text,authorised_by text,closed_by text,closed_on text, closed_reason text, allow_multiple_discounts integer, day1 integer, day2 integer,day3 integer,day4 integer,day5 integer,day6 integer,day7 integer, isRepeat integer, offer_start_time text, offer_end_time text, sell_group_id text, product_sub_category text, is_combo integer, is_lowest_price_item integer,priority int,is_customer_specific int, PRIMARY KEY (offer_id))";
                                
                                //`product_category` VARCHAR(255) NULL DEFAULT NULL............
                                
                                
                                //changed by Srinivasulu on 17/08/2017....
                                //added the new key is_price_based_configuration as integerater.....
                                
                                /*
                                 
                                 ALTER TABLE `offer`
                                 ADD COLUMN `is_price_based_configuration` TINYINT(4) NULL DEFAULT '0' AFTER `product_specific_flag`;
                                 
                                 ALTER TABLE `offer_ranges`
                                 ADD COLUMN `start_price_range` FLOAT NULL DEFAULT '0' AFTER `reward_quantity`,
                                 ADD COLUMN `end_price_range` FLOAT NULL DEFAULT '0' AFTER `start_price_range`;
                                 
                                 */
                                
                                
                                //                                const char *sqlStatement = "create table if not exists offers (offer_id text, claim_coupons integer, claim_loyalty_points integer,claim_gift_vouchers integer,offer_category text,offer_description double,offer_name text,offer_status integer, end_date text,sell_products text, sell_sku_ids text,start_date text,store_location text,reward_type text,updatedDate text,sell_plu_code text,is_banner text,authorised_by text,closed_by text,closed_on text, closed_reason text, allow_multiple_discounts integer, day1 integer, day2 integer,day3 integer,day4 integer,day5 integer,day6 integer,day7 integer, isRepeat integer, offer_start_time text, offer_end_time text, sell_group_id text, product_sub_category text, is_combo integer, is_lowest_price_item integer,priority int,is_customer_specific int,product_category text, PRIMARY KEY (offer_id))";
                                
                                
                                const char *sqlStatement = "create table if not exists offers (offer_id text, claim_coupons integer, claim_loyalty_points integer,claim_gift_vouchers integer,offer_category text,offer_description double,offer_name text,offer_status integer, end_date text,sell_products text, sell_sku_ids text,start_date text,store_location text,reward_type text,updatedDate text,sell_plu_code text,is_banner text,authorised_by text,closed_by text,closed_on text, closed_reason text, allow_multiple_discounts integer, day1 integer, day2 integer,day3 integer,day4 integer,day5 integer,day6 integer,day7 integer, isRepeat integer, offer_start_time text, offer_end_time text, sell_group_id text, product_sub_category text, is_combo integer, is_lowest_price_item integer,priority int,is_customer_specific int,product_category text, is_price_based_configuration integer, PRIMARY KEY (offer_id))";
                                
                                
                                
                                
                                //upto here on 14/07/2017....
                                
                                
                                
                                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                                    == SQLITE_OK) {
                                    
                                    NSLog(@"Success");
                                    
                                }
                                
                            }
                            
                        }
                        
                        // NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
                        
                        
                        
                        //                        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
                        //
                        //                            if (deleteStmt == nil) {
                        //                                const char *sqlStatement = "delete from offers";
                        //
                        //                                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                        //
                        //                                    if(SQLITE_DONE != sqlite3_step(deleteStmt))
                        //                                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                        //
                        //                                    sqlite3_reset(deleteStmt);
                        //                                }
                        //
                        //                            }
                        //
                        //                        }
                        //                        deleteStmt = nil;
                        
                        
                        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
                            
                            if (insertStmt == nil) {
                                //                            const char *sqlStatement = "create table if not exists offers (offer_id text, claim_coupons integer, claim_loyalty_points integer,claim_gift_vouchers integer,offer_category text,offer_description double,offer_name text,offer_status integer, product_category text, sell_products text, sell_sku_ids text,start_date text,store_location text,reward_type text,updatedDate text,sell_plu_code text,is_banner text,authorised_by text,closed_by text,closed_on text, closed_reason text, allow_multiple_discounts integer, day1 integer, day2 integer,day3 integer,day4 integer,day5 integer,day6 integer,day7 integer, isRepeat integer, offer_start_time text, offer_end_time text, sell_group_id text, product_sub_category text, is_combo integer, is_lowest_price_item integer, PRIMARY KEY (offer_id))";
                                
                                
                                //changed by Srinivasulu on 14/07/2017...
                                
                                
                                //                                const char *sqlStatement = "INSERT OR REPLACE into offers(offer_id, claim_coupons,claim_loyalty_points,claim_gift_vouchers,offer_category,offer_description,offer_name,offer_status,end_date,sell_products,sell_sku_ids,start_date,store_location,reward_type,updatedDate,sell_plu_code,is_banner,authorised_by,closed_by,closed_on,closed_reason,      allow_multiple_discounts,day1,day2,day3,day4,day5,day6,day7,                       isRepeat,offer_start_time,offer_end_time,sell_group_id,product_sub_category,is_combo,is_lowest_price_item,priority,is_customer_specific) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                
                                //`product_category` VARCHAR(255) NULL DEFAULT NULL............
                                
                                //changed by Srinivasulu on 17/08/2017....
                                //added the new key is_price_based_configuration as integerater...
                                
                                const char * sqlStatement = "INSERT OR REPLACE into offers(offer_id, claim_coupons,claim_loyalty_points,claim_gift_vouchers,offer_category,offer_description,offer_name,offer_status,end_date,sell_products,sell_sku_ids,start_date,store_location,reward_type,updatedDate,sell_plu_code,is_banner,authorised_by,closed_by,closed_on,closed_reason,      allow_multiple_discounts,day1,day2,day3,day4,day5,day6,day7,                       isRepeat,offer_start_time,offer_end_time,sell_group_id,product_sub_category,is_combo,is_lowest_price_item,priority,is_customer_specific,product_category,is_price_based_configuration) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                
                                //upto here on 17/08/2017....
                                
                                //upto here on 14/07/2017....
                                
                                char *sqliteErr;
                                
                                sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                                
                                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                                    
                                    for (int i=0; i < temp.count; i++) {
                                        
                                        NSDictionary *dic = temp[i];
                                        
                                        //commmented by Srinivasulu on  09/09/2017....
                                        
                                        //                                        NSData * data;
                                        
                                        //upto here on 29/09/2017....
                                        
                                        //                                    NSArray *imgArr = [dic valueForKey:@"offerImage"];
                                        //                                    if ([imgArr count]!=0) {
                                        //
                                        //                                        unsigned c = [imgArr count];
                                        //                                        uint8_t *bytes = (uint8_t *) malloc(sizeof(*bytes) * c);
                                        //
                                        //                                        for (unsigned i = 0; i < c; i++)
                                        //                                        {
                                        //                                            NSString *str = [imgArr objectAtIndex:i];
                                        //                                            int byte = [str intValue];
                                        //                                            bytes[i] = byte;
                                        //                                        }
                                        //                                        data = [NSData dataWithBytesNoCopy:bytes length:c freeWhenDone:YES];
                                        //
                                        //                                    }
                                        
                                        
                                        
                                        sqlite3_bind_text(insertStmt, 1, [[dic valueForKey:@"offerID"] UTF8String], -1, SQLITE_TRANSIENT);
                                        sqlite3_bind_int(insertStmt, 2, [[dic valueForKey:@"claimCoupons_int"] intValue]);
                                        sqlite3_bind_int(insertStmt, 3, [[dic valueForKey:@"claimLoyaltypoints_int"] intValue]);
                                        sqlite3_bind_int(insertStmt, 4, [[dic valueForKey:@"claimgiftvouchers_int"] intValue]);
                                        sqlite3_bind_text(insertStmt, 5,  [[dic valueForKey:@"offerCategory"] UTF8String], -1, SQLITE_TRANSIENT);
                                        if ([[dic valueForKey:@"offerDescription"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"offerDescription"] == nil) {
                                            sqlite3_bind_text(insertStmt, 6,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else {
                                            sqlite3_bind_text(insertStmt, 6,  [[dic valueForKey:@"offerDescription"] UTF8String], -1, SQLITE_TRANSIENT);
                                            
                                        }
                                        //                            sqlite3_bind_blob(insertStmt, 7, [data bytes], [data length], SQLITE_TRANSIENT);
                                        if ([[dic valueForKey:@"offerName"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"offerName"] == nil) {
                                            sqlite3_bind_text(insertStmt, 7,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else {
                                            sqlite3_bind_text(insertStmt, 7,  [[dic valueForKey:@"offerName"] UTF8String], -1, SQLITE_TRANSIENT);
                                        }
                                        sqlite3_bind_text(insertStmt, 8,  [[dic valueForKey:@"offerStatus_int"] stringValue].UTF8String, -1, SQLITE_TRANSIENT);
                                        sqlite3_bind_text(insertStmt, 9,  [[dic valueForKey:@"offerEndDate"] UTF8String], -1, SQLITE_TRANSIENT);
                                        //                                    sqlite3_bind_int(insertStmt, 10, [[dic valueForKey:@"priority_int"] intValue]);
                                        //                                    if ([[dic valueForKey:@"offerSkus"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"offerSkus"] == nil) {
                                        //                                        sqlite3_bind_text(insertStmt, 11,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
                                        //                                    }
                                        //                                    else {
                                        //                                        sqlite3_bind_text(insertStmt, 11,  [[dic valueForKey:@"offerSkus"] UTF8String], -1, SQLITE_TRANSIENT);
                                        //                                    }
                                        //                                    sqlite3_bind_text(insertStmt, 12,  [@"" UTF8String], -1, SQLITE_TRANSIENT);
                                        if ([[dic valueForKey:@"sellSkuids"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"sellSkuids"] == nil) {
                                            sqlite3_bind_text(insertStmt, 11,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else {
                                            sqlite3_bind_text(insertStmt, 11,  [[dic valueForKey:@"sellSkuids"] UTF8String], -1, SQLITE_TRANSIENT);
                                            
                                        }
                                        if ([[dic valueForKey:@"sellProducts"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"sellProducts"] == nil) {
                                            sqlite3_bind_text(insertStmt, 10,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else {
                                            sqlite3_bind_text(insertStmt, 10,  [[dic valueForKey:@"sellProducts"] UTF8String], -1, SQLITE_TRANSIENT);
                                        }
                                        sqlite3_bind_text(insertStmt, 12,  [[dic valueForKey:@"offerStartDate"] UTF8String], -1, SQLITE_TRANSIENT);
                                        
                                        
                                        
                                        //changed by Srinivasulu on 05/02/2017....
                                        
                                        sqlite3_bind_text(insertStmt, 13,  [[self checkGivenValueIsNullOrNil:[dic valueForKey:kStoreLocation] defaultReturn:presentLocation] UTF8String], -1, SQLITE_TRANSIENT);
                                        
                                        //upto here on 05/02/2017....
                                        
                                        sqlite3_bind_text(insertStmt, 14,  [[dic valueForKey:@"rewardType"] UTF8String], -1, SQLITE_TRANSIENT);
                                        sqlite3_bind_text(insertStmt, 15,  [[dic valueForKey:@"updatedDate"] UTF8String], -1, SQLITE_TRANSIENT);
                                        if ([[dic valueForKey:@"sellPluCode"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"sellPluCode"] == nil) {
                                            sqlite3_bind_text(insertStmt, 16,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else{
                                            sqlite3_bind_text(insertStmt, 16,  [[dic valueForKey:@"sellPluCode"] UTF8String], -1, SQLITE_TRANSIENT);
                                            
                                        }
                                        sqlite3_bind_int(insertStmt, 17, [[dic valueForKey:@"isBanner"] intValue]);
                                        if ([[dic valueForKey:@"authorisedBy"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"authorisedBy"] == nil) {
                                            sqlite3_bind_text(insertStmt, 18,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else {
                                            sqlite3_bind_text(insertStmt, 18,  [[dic valueForKey:@"authorisedBy"] UTF8String], -1, SQLITE_TRANSIENT);
                                            
                                        }
                                        
                                        if ([[dic valueForKey:@"closedBy"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"closedBy"] == nil) {
                                            sqlite3_bind_text(insertStmt, 19,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else {
                                            sqlite3_bind_text(insertStmt, 19,  [[dic valueForKey:@"closedBy"] UTF8String], -1, SQLITE_TRANSIENT);
                                            
                                        }
                                        if ([[dic valueForKey:@"closedOn"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"closedOn"] == nil) {
                                            sqlite3_bind_text(insertStmt, 20,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else {
                                            sqlite3_bind_text(insertStmt, 20,  [[dic valueForKey:@"closedOn"] UTF8String], -1, SQLITE_TRANSIENT);
                                            
                                        }
                                        if ([[dic valueForKey:@"closedReason"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"closedReason"] == nil) {
                                            sqlite3_bind_text(insertStmt, 21,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else {
                                            sqlite3_bind_text(insertStmt, 21,  [[dic valueForKey:@"closedReason"] UTF8String], -1, SQLITE_TRANSIENT);
                                            
                                        }
                                        sqlite3_bind_int(insertStmt, 22, [[dic valueForKey:@"allowMultipleDiscounts"] intValue]);
                                        sqlite3_bind_int(insertStmt, 23, [[dic valueForKey:@"day1"] intValue]);
                                        sqlite3_bind_int(insertStmt, 24, [[dic valueForKey:@"day2"] intValue]);
                                        sqlite3_bind_int(insertStmt, 25, [[dic valueForKey:@"day3"] intValue]);
                                        sqlite3_bind_int(insertStmt, 26, [[dic valueForKey:@"day4"] intValue]);
                                        sqlite3_bind_int(insertStmt, 27, [[dic valueForKey:@"day5"] intValue]);
                                        sqlite3_bind_int(insertStmt, 28, [[dic valueForKey:@"day6"] intValue]);
                                        sqlite3_bind_int(insertStmt, 29, [[dic valueForKey:@"day7"] intValue]);
                                        sqlite3_bind_int(insertStmt, 30, [[dic valueForKey:@"repeat"] intValue]);
                                        sqlite3_bind_text(insertStmt, 31,  [[dic valueForKey:@"offerStartTime"] UTF8String], -1, SQLITE_TRANSIENT);
                                        sqlite3_bind_text(insertStmt, 32,  [[dic valueForKey:@"offerEndTime"] UTF8String], -1, SQLITE_TRANSIENT);
                                        if ([[dic valueForKey:@"sellGroupId"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"sellGroupId"] == nil) {
                                            sqlite3_bind_text(insertStmt, 33,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else{
                                            sqlite3_bind_text(insertStmt, 33,  [[dic valueForKey:@"sellGroupId"] UTF8String], -1, SQLITE_TRANSIENT);
                                            
                                        }
                                        if ([[dic valueForKey:@"productSubCategory"] isKindOfClass:[NSNull class]] || [dic valueForKey:@"productSubCategory"] == nil) {
                                            sqlite3_bind_text(insertStmt, 34,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        else{
                                            sqlite3_bind_text(insertStmt, 34,  [[dic valueForKey:@"productSubCategory"] UTF8String], -1, SQLITE_TRANSIENT);
                                            
                                        }
                                        sqlite3_bind_int(insertStmt, 35,  [[dic valueForKey:@"combo"] intValue]);
                                        sqlite3_bind_int(insertStmt, 36,  [[dic valueForKey:@"lowestPriceItem"] intValue]);
                                        if ([dic.allKeys containsObject:@"priority_int"] && ![[dic valueForKey:@"priority_int"] isKindOfClass:[NSNull class]]) {
                                            sqlite3_bind_int(insertStmt, 37,  [[dic valueForKey:@"priority_int"] intValue]);
                                        }
                                        else {
                                            sqlite3_bind_int(insertStmt, 37,  0);
                                            
                                        }
                                        
                                        if ([dic.allKeys containsObject:@"isCustomerSpecific"] && ![[dic valueForKey:@"isCustomerSpecific"] isKindOfClass:[NSNull class]]) {
                                            sqlite3_bind_int(insertStmt, 38,  [[dic valueForKey:@"isCustomerSpecific"] intValue]);
                                        }
                                        else {
                                            sqlite3_bind_int(insertStmt, 38,  0);
                                            
                                        }
                                        
                                        //added by Srinivasulu on 14/07/2017....
                                        
                                        if ([dic.allKeys containsObject:@"productCategory"] && ![[dic valueForKey:@"productCategory"] isKindOfClass:[NSNull class]]) {
                                            
                                            sqlite3_bind_text(insertStmt, 39,  [[dic valueForKey:@"productCategory"] UTF8String], -1, SQLITE_TRANSIENT);
                                        }
                                        else {
                                            
                                            sqlite3_bind_text(insertStmt, 39,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                        }
                                        
                                        
                                        //changed by Srinivasulu on 17/08/2017....
                                        //added the new key is_price_based_configuration as integerater....
                                        
                                        if ([dic.allKeys containsObject:@"priceBasedConfigurationFlag"] && ![[dic valueForKey:@"priceBasedConfigurationFlag"] isKindOfClass:[NSNull class]]) {
                                            
                                            sqlite3_bind_int(insertStmt, 40,  [[dic valueForKey:@"priceBasedConfigurationFlag"] intValue]);
                                        }
                                        else{
                                            
                                            sqlite3_bind_int(insertStmt, 40,  0);
                                        }
                                        
                                        //upto here on 17/08/2017...
                                        
                                        
                                        //upto here on 14/07/2017...
                                        
                                        if(SQLITE_DONE != sqlite3_step(insertStmt)){
                                            isSaved = FALSE;
                                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                                            
                                        }
                                        else {
                                            isSaved = TRUE;
                                        }
                                        
                                        sqlite3_reset(insertStmt);
                                        
                                        [rangesArr addObject:[dic valueForKey:@"offerRangesList"]];
                                        
                                        if ([dic.allKeys containsObject:@"customerFilter"] && ![[dic valueForKey:@"customerFilter"] isKindOfClass:[NSNull class]]) {
                                            [customerFilterArr addObject:[dic valueForKey:@"customerFilter"]];
                                        }
                                        
                                        
                                    }
                                    
                                }
                                else {
                                    NSLog(@"%s",sqlite3_errmsg(database));
                                }
                                
                                sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                                sqlite3_finalize(insertStmt);
                                
                            }
                            insertStmt = nil;
                        }
                    }
                    @catch (NSException *exception) {
                        
                        
                    }
                    @finally {
                        
                        sqlite3_close(database);
                        insertStmt = nil;
                        deleteStmt = nil;
                    }
                    isSaved = [self saveOfferRanges:rangesArr];
                    
                    isSaved = [self saveCustomerFilters:customerFilterArr];
                }
            }
            offerStartIndex+=1000;
            NSLog(@"%d",offerStartIndex);
        }
        
        if (offerStartIndex >= totalRecords) {
            NSDate *today = [NSDate date];
            NSDateFormatter *f = [[NSDateFormatter alloc] init];
            f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
            NSString* currentdate = [f stringFromDate:today];
            
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            
            [defaults setObject:currentdate forKey:@"lastOffersUpdated"];
            
            [defaults synchronize];
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    @finally {
        
        return  isSaved;
    }
    
}


-(void)updateGroupChilds:(NSDictionary*)groupChildsInfo s_no:(int)s_no{
    
    BOOL saveStatus = false;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query ;
            
            query = [NSString stringWithFormat:@"update billing_table SET s_no='%d',group_id='%@',sku_Id='%@',plu_code='%@',date_and_time='%@',comments='%@',status='%d' where s_no='%d'",s_no,[groupChildsInfo valueForKey:@"groupId"],[groupChildsInfo valueForKey:@"skuId"],[groupChildsInfo valueForKey:@"pluCode"],[groupChildsInfo valueForKey:@"dateAndTime"],[groupChildsInfo valueForKey:@"comments"],[[groupChildsInfo valueForKey:@"itemStatus"] intValue],s_no];
            
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(insertStmt) == SQLITE_DONE) {
                    
                    saveStatus = true;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                    
                }
                
                sqlite3_finalize(insertStmt);
                insertStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
    }
    @finally {
        sqlite3_close(database);
        deleteStmt = nil;
        selectStmt = nil;
    }
}


#pragma -mark END of Methods Related to DownLoading & Saving Online Data to Offline

#pragma -mark Start of Methods used for Clearing the Offline Data

/**
 * @description  here are we retriving bill complete details....
 * @date         16/08/2017....
 * @method       deleteItemsFromSkuPriceList:
 * @author       Srinivasulu
 * @param        NSString
 * @param
 * @return       void
 *
 *
 * @modified By  -------- need to modify the delete query .. First we need the they are existing or not and table also....
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)deleteItemsFromSkuPriceList:(NSOrderedSet *)skuIdsOrderset {
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try {
        //sku_price_list ---- sku_id
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            for(NSString * skuIdStr in skuIdsOrderset){
                
                NSString * query = [NSString stringWithFormat:@"delete from sku_price_list where sku_id ='%@'",skuIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2( localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(localSelectStmt)){
                        
                        NSLog(@"%s",sqlite3_errmsg(localDatabase));
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelectStmt);
                    //                        sqlite3_finalize(localSelectStmt);
                }
                else {
                    
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
        }
        else{
            
            NSLog(@"Unable to access the dataBase") ;
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
        sqlite3_close(localDatabase);
    }
}





-(BOOL)clearSkuTable {
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL status = FALSE;
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            //                if (deleteStmt == nil) {
            //                    const char *sqlStatement = "delete from sku_master";
            //
            //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
            //
            //                        if(SQLITE_DONE != sqlite3_step(deleteStmt)){
            //                            NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
            //                        }
            //                        sqlite3_reset(deleteStmt);
            //                    }
            //
            //                    deleteStmt = nil;
            //                }
            
            if (deleteStmt == nil) {
                const char *sqlStatement = "delete from sku_price_list";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    sqlite3_reset(deleteStmt);
                }
                deleteStmt = nil;
                
            }
            
        }
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
    }
    return status;
}

#pragma -mark Start of Methods Operating on Billing Tables in Offline..

/**
 * @description  here are we are cerating the new Bill_ID and inserting the data into it..
 * @date
 * @method       createBilling:--
 * @author
 * @param        NSString
 * @param
 *
 * @return       NSString
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)createBilling:(NSString *)json  isToGenerateBillID:(Boolean)generateBillId{
    
    //changed by Srinivasulu on 11/05/2018.. reason is returning in catch block also..
    NSString * billId = @"";
    @try {
        
        billId = [self createBillingInSingleTransaction:json isToGenerateBillID:generateBillId];
        
        
        //        NSError *e;
        //        NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [json dataUsingEncoding:NSUTF8StringEncoding]
        //                                                             options: NSJSONReadingMutableContainers
        //                                                               error: &e];
        //
        //        //        if([[self validateBillDetails:JSON] length] > 0){
        //        //
        //        //            return billId;
        //        //        }
        //
        //        NSDate *date = [NSDate date];
        //        NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
        //        dateFormat.dateFormat = @"yy:MM:dd HH:mm:ss.sss";
        //        NSString* currentdate = [dateFormat stringFromDate:date];
        //        NSString *today = [NSString stringWithFormat:@"%@%@",[[currentdate componentsSeparatedByString:@" "][0] stringByReplacingOccurrencesOfString:@":" withString:@""],[[currentdate componentsSeparatedByString:@" "][1] stringByReplacingOccurrencesOfString:@":" withString:@""]];
        //
        //        today = [NSString stringWithFormat:@"%@",[today stringByReplacingOccurrencesOfString:@"." withString:@""]];
        //
        //        if(generateBillId){
        //        billId = [NSString stringWithFormat:@"%@%@",@"BL",today];
        //        }
        //        else{
        //            if(([JSON.allKeys containsObject:BILL_ID]) && (![[JSON valueForKey:BILL_ID] isKindOfClass:[NSNull class]]))
        //            billId = [JSON valueForKey:BILL_ID];
        //        }
        //
        //        BOOL billDetailsStatus = [self saveDataInBilling:JSON billId:billId];
        //        if (billDetailsStatus) {
        //            BOOL billTaxDetailsStatus = [self saveTaxDataInBilling:JSON billId:billId];
        //            if (billTaxDetailsStatus) {
        //                BOOL billItemTaxDetailsStatus = [self saveItemTaxDataInBilling:JSON billId:billId];
        //                if (billItemTaxDetailsStatus) {
        //                    BOOL billItemStatus = [self saveBillingItems:[JSON valueForKey:@"billItems"] sku_id:billId];
        //                    if (billItemStatus) {
        //
        //                        [self saveItemCampaignDetails:[JSON valueForKey:@"billDiscounts"] billId:billId];
        //
        //                        NSString * transaction_id = @"";
        //                        if ([[JSON valueForKey:@"billingTransactions"] count]==0 || [JSON valueForKey:@"billingTransactions"] == nil) {
        //
        //
        //                            //changed by Srinivasulu  on 22/09/2017....
        //                            //reason serialBillId ....
        //
        //                            if (billId.length > 0 && isCustomerBillId) {
        //
        //                                billId = [JSON valueForKey:kSerialBillId];
        //                            }
        //
        //                            //upto here on 22/09/2017....
        //
        //                            return billId;
        //                        }
        //                        else {
        //                            transaction_id =  [self saveTransactions:billId transactionDetails:JSON transactionType:@""];
        //                        }
        //                        if (transaction_id.length!=0) {
        //
        //                            [self saveDenominations:[JSON valueForKey:@"denominations"] billId:billId transaction_id:transaction_id];
        //
        //                        }
        //                        else {
        //                            [self deleteLocalBills:billId];
        //                            billId = @"";
        //                        }
        //                    }
        //                    else {
        //                        [self deleteLocalBills:billId];
        //                        billId = @"";
        //                    }
        //
        //                }
        //                else {
        //                    [self deleteLocalBills:billId];
        //                    billId = @"";
        //
        //                }
        //            }
        //            else {
        //                [self deleteLocalBills:billId];
        //                billId = @"";
        //            }
        //        }
        //        else {
        //            [self deleteLocalBills:billId];
        //            billId = @"";
        //        }
        //
        //        //changed by Srinivasulu  on 22/09/2017....
        //        //reason serialBillId ....
        //
        //        //        if ([billId length] > 0 && isCustomerBillId && [custID caseInsensitiveCompare:@"CID8995438"] == NSOrderedSame) {
        //        if (billId.length > 0 && isCustomerBillId) {
        //
        //
        //            billId = [JSON valueForKey:kSerialBillId];
        //        }
        //
        //        //upto here on 22/09/2017....
        //        NSString * increase_or_reduce_str = REDUCE;
        //
        //        if([[JSON valueForKey:STATUS] isEqualToString:TA_RE_ITEMS])
        //            increase_or_reduce_str = INCREASE;
        //
        //        dispatch_async(dispatch_get_main_queue(), ^{
        //            [self reduceTheBillingItemsStock:[JSON valueForKey:BILL_ITEMS] stockUpdationType:increase_or_reduce_str];
        //        });
        
        
    } @catch (NSException *exception) {
        
        billId = @"";
    } @finally {
        
        return billId;
    }
}

/**
 * @description  here are we are inserting the bill Details into offline table..
 * @date
 * @method       saveDataInBilling:-- billId:--
 * @author
 * @param        NSDictionary
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 24/06/2018..
 * @reason       added commented
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveDataInBilling:(NSDictionary *)JSON billId:(NSString *)billId{
    
    BOOL billStatus = FALSE;
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            char *errMsg;
            
            //changinged by Srinivasulu on 10/07/2017....
            
            //            const char * sqlStatement = "create table if not exists billing_table (bill_id text, date_and_time text, cashier_id text,counter_ID text,Total_discount text,discount_type text,discount_type_id text,tax text,total_price text,due_amount text,status text,email_id text,phone_number text,store_location text,customer_name text,shift_id text,save_status text,print_count int,change_return double,other_discount double,business_cycle_date text,scan_start_time text,scan_end_time text,print_time text,bill_time_duration int,bill_time_duration_accept_print int,serial_billId text,PRIMARY KEY (bill_id))";
            
            
            
            //newly added fields are ---- 1) other_discount_desc --  2)register -- 3)employee_sale_id -- 4)cashier_name -- 5)sub_total -- 6)last_updated_date -- 7)customer_gstin
            //added all as textField....
            
            //            const char * sqlStatement = "create table if not exists billing_table (bill_id text, date_and_time text, cashier_id text,counter_ID text,Total_discount text,discount_type text,discount_type_id text,tax text,total_price text,due_amount text,status text,email_id text,phone_number text,store_location text,customer_name text,shift_id text,save_status text,print_count int,change_return double,other_discount double,business_cycle_date text,scan_start_time text,scan_end_time text,print_time text,bill_time_duration int,bill_time_duration_accept_print int,serial_billId text,other_discount_desc text,register text,employee_sale_id text,cashier_name text,sub_total text,last_updated_date text,customer_gstin text,  PRIMARY KEY (bill_id))";
            
            //changed by Srinivasulu on 04/08/2017....
            
            
            //            const char * sqlStatement = "create table if not exists billing_table (bill_id text, date_and_time text, cashier_id text,counter_ID text,Total_discount text,discount_type text,discount_type_id text,tax text,total_price text,due_amount text,status text,email_id text,phone_number text,store_location text,customer_name text,shift_id text,save_status text,print_count int,change_return double,other_discount double,business_cycle_date text,scan_start_time text,scan_end_time text,print_time text,bill_time_duration int,bill_time_duration_accept_print int,serial_billId text,other_discount_desc text,register text,employee_sale_id text,cashier_name text,sub_total text,last_updated_date text,customer_gstin text,bill_amount text,  PRIMARY KEY (bill_id))";
            
            
            //product_sub_class -- product_class ---- changed by Srinivasulu on 12/08/2017....
            
            const char * sqlStatement = "create table if not exists billing_table (bill_id text, date_and_time text, cashier_id text,counter_ID text,Total_discount text,discount_type text,discount_type_id text,tax text,total_price text,due_amount text,status text,email_id text,phone_number text,store_location text,customer_name text,shift_id text,save_status text,print_count int,change_return double,other_discount double,business_cycle_date text,scan_start_time text,scan_end_time text,print_time text,bill_time_duration int,bill_time_duration_accept_print int,serial_billId text,other_discount_desc text,register text,employee_sale_id text,cashier_name text,sub_total text,last_updated_date text,customer_gstin text,bill_amount text,billCancelReason text,comments text,sales_order_id text,shipping_charges text,is_offline_bill text,  PRIMARY KEY (bill_id))";
            
            //upot here on 04/08/2017....
            
            
            /*
             `other_discount_desc` VARCHAR(250) NULL DEFAULT NULL,
             
             register` CHAR(50) NULL DEFAULT NULL,
             `employee_sale_id` CHAR(50) NULL DEFAULT NULL,
             `cashier_name` CHAR(50) NULL DEFAULT NULL,
             
             `sub_total` DECIMAL(10,2) NULL DEFAULT '0.00',
             `last_updated_date` DATETIME NULL DEFAULT NULL,
             `customer_gstin` CHAR(50) NULL DEFAULT NULL,
             */
            
            //upto here on 10/07/2017....
            
            
            if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                //                    NSLog(@"Success");
                
                
                if (insertStmt == nil) {
                    char *sqliteErr;
                    
                    sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                    
                    const char *sqlStatement;
                    
                    
                    //                    sqlStatement = "insert into billing_table(bill_id, date_and_time,cashier_id,counter_ID,Total_discount,discount_type,discount_type_id,tax,total_price,due_amount,status,email_id,phone_number,store_location,customer_name,shift_id,save_status,print_count,change_return,other_discount,business_cycle_date,scan_start_time,scan_end_time,print_time,bill_time_duration,bill_time_duration_accept_print,serial_billId) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    
                    //changed by Srinivasulu on 10/07/2017....
                    
                    //                    sqlStatement = "insert into billing_table(bill_id, date_and_time,cashier_id,counter_ID,Total_discount,discount_type,discount_type_id,tax,total_price,due_amount,status,email_id,phone_number,store_location,customer_name,shift_id,save_status,print_count,change_return,other_discount,business_cycle_date,scan_start_time,scan_end_time,print_time,bill_time_duration,bill_time_duration_accept_print,serial_billId) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    
                    //changed by Srinivasulu on 04/08/2017....
                    
                    sqlStatement = "insert into billing_table(bill_id, date_and_time,cashier_id,counter_ID,Total_discount,discount_type,discount_type_id,tax,total_price,due_amount,status,email_id,phone_number,store_location,customer_name,shift_id,save_status,print_count,change_return,other_discount,business_cycle_date,scan_start_time,scan_end_time,print_time,bill_time_duration,bill_time_duration_accept_print,serial_billId,other_discount_desc,register,employee_sale_id,cashier_name,sub_total,last_updated_date,customer_gstin,bill_amount,billCancelReason,comments,sales_order_id,shipping_charges,is_offline_bill) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    
                    //upto here on 04/08/2017....
                    
                    /*
                     `other_discount_desc` VARCHAR(250) NULL DEFAULT NULL,
                     
                     register` CHAR(50) NULL DEFAULT NULL,
                     `employee_sale_id` CHAR(50) NULL DEFAULT NULL,
                     `cashier_name` CHAR(50) NULL DEFAULT NULL,
                     
                     `sub_total` DECIMAL(10,2) NULL DEFAULT '0.00',
                     `last_updated_date` DATETIME NULL DEFAULT NULL,
                     `customer_gstin` CHAR(50) NULL DEFAULT NULL,
                     */
                    
                    //upto here on 10/07/2017....
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                        
                        
                        
                        // for (int i=0; i<[itemList count]; i++) {
                        
                        // NSArray *temp = [[itemList objectAtIndex:i] componentsSeparatedByString:@"#"];
                        
                        
                        sqlite3_bind_text(insertStmt, 1,  billId.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 2,  [[JSON valueForKey:BILLING_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 3,  [[JSON valueForKey:CASHIER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 4,  [[JSON valueForKey:COUNTER] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 5, [[JSON valueForKey:TOTAL_BILL_DISCOUNT] stringValue].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 6,  [[JSON valueForKey:DISCOUNT_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 7,  [[JSON valueForKey:DISCOUNT_TYPE_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 8,  [[JSON valueForKey:@"tax"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 9, [[JSON valueForKey:TOTAL_BILL_AMT] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 10,  [NSString stringWithFormat:@"%.2f",[[JSON valueForKey:BILL_DUE] floatValue]].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 11,  [[JSON valueForKey:STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 12, [[JSON valueForKey:@"emailId"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 13,  [[JSON valueForKey:@"phoneNumber"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 14,  [[JSON valueForKey:STORE_LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 15,  [[JSON valueForKey:CUSTOMER_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 16,  [[JSON valueForKey:SHIFT_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:SYNC_STATUS]) && (![[JSON valueForKey:SYNC_STATUS] isKindOfClass:[NSNull class]])){
                            
                            sqlite3_bind_text(insertStmt, 17,  [[JSON valueForKey:SYNC_STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(insertStmt, 17,  (@"to be uploaded").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        sqlite3_bind_int(insertStmt, 18, 0);
                        sqlite3_bind_double(insertStmt, 19, [[JSON valueForKey:CHANGE_RETURN] doubleValue]);
                        sqlite3_bind_double(insertStmt, 20, [[JSON valueForKey:OTHER_DISCOUNT] doubleValue]);
                        sqlite3_bind_text(insertStmt, 21, [[JSON valueForKey:BUSSINESS_DATE] UTF8String],-1,SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 22, [[JSON valueForKey:SCAN_START_TIME] UTF8String],-1,SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 23, [[JSON valueForKey:SCAN_END_TIME] UTF8String],-1,SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 24, [[JSON valueForKey:PRINT_TIME] UTF8String],-1,SQLITE_TRANSIENT);
                        sqlite3_bind_int(insertStmt,25,[WebServiceUtility calculateNumberOfSecondsfor:[JSON valueForKey:SCAN_START_TIME] and:[JSON valueForKey:SCAN_END_TIME]]);
                        sqlite3_bind_int(insertStmt,26,[WebServiceUtility calculateNumberOfSecondsfor:[JSON valueForKey:SCAN_END_TIME] and:[JSON valueForKey:PRINT_TIME]]);
                        
                        
                        sqlite3_bind_text(insertStmt, 27, [[JSON valueForKey:kSerialBillId] UTF8String],-1,SQLITE_TRANSIENT);
                        
                        //added by Srinivasulu on 10/07/2017....
                        
                        
                        if(([JSON.allKeys containsObject:OTHER_DISCOUNT_DESC]) && (![[JSON valueForKey:OTHER_DISCOUNT_DESC] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 28, [[JSON valueForKey:OTHER_DISCOUNT_DESC] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 28, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:REGISTER]) && (![[JSON valueForKey:REGISTER] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 29, [[JSON valueForKey:REGISTER] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 29, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:kItemSpecificEmplId]) && (![[JSON valueForKey:kItemSpecificEmplId] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 30, [[JSON valueForKey:kItemSpecificEmplId] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 30, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:CASHIER_NAME]) && (![[JSON valueForKey:CASHIER_NAME] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 31, [[JSON valueForKey:CASHIER_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 31, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:SUB_TOTAL]) && (![[JSON valueForKey:SUB_TOTAL] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 32, [NSString stringWithFormat:@"%.2f",[[JSON valueForKey:SUB_TOTAL] floatValue]].UTF8String, -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 32, (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);

                        
                        //                        if(([[JSON allKeys] containsObject:kSubTotal]) && (![[JSON valueForKey:kSubTotal] isKindOfClass:[NSNull class]]))
                        //                            sqlite3_bind_text(insertStmt, 33, [[JSON valueForKey:kSubTotal] UTF8String], -1, SQLITE_TRANSIENT);
                        //                        else
                        //                            sqlite3_bind_text(insertStmt, 33, [@"0.00" UTF8String], -1, SQLITE_TRANSIENT);
                        //
                        
                        //changed & added by Srinivasulu on 04/08/2017 & 08/09/2017 && 24/03/2018 && 28/06/2018........
                        
                        if(([JSON.allKeys containsObject:CUSTOMER_GSTIN]) && (![[JSON valueForKey:CUSTOMER_GSTIN] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 34, [[JSON valueForKey:CUSTOMER_GSTIN] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 34, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:BILL_AMOUNT]) && (![[JSON valueForKey:BILL_AMOUNT] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 35, [[JSON valueForKey:BILL_AMOUNT] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 35, [[JSON valueForKey:TOTAL_BILL_AMT] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        
                        if(([JSON.allKeys containsObject:BILL_CANCEL_REASON]) && (![[JSON valueForKey:BILL_CANCEL_REASON] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 36, [[JSON valueForKey:BILL_CANCEL_REASON] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 36, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:kComments]) && (![[JSON valueForKey:kComments] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 37, [[JSON valueForKey:kComments] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 37, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:SALES_ORDER_ID]) && (![[JSON valueForKey:SALES_ORDER_ID] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 38, [[JSON valueForKey:SALES_ORDER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 38, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:SHIPPING_CHARGES]) && (![[JSON valueForKey:SHIPPING_CHARGES] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(insertStmt, 39, [NSString stringWithFormat:@"%.2f",[[JSON valueForKey:SHIPPING_CHARGES] floatValue]].UTF8String, -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(insertStmt, 39, (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([JSON.allKeys containsObject:IS_OFFLINE_BILL]) && (![[JSON valueForKey:IS_OFFLINE_BILL] isKindOfClass:[NSNull class]])){
                            
                            sqlite3_bind_text(insertStmt, 40,  [[JSON valueForKey:IS_OFFLINE_BILL] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(insertStmt, 40,  (@"1").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        //upto here on 08/09/2017 && 24/03/2018 && 28/06/2018....
                        
                        
                        //OTHER_DISCOUNT_DESC
                        
                        
                        
                        /*
                         `other_discount_desc` VARCHAR(250) NULL DEFAULT NULL,
                         
                         register` CHAR(50) NULL DEFAULT NULL,
                         `employee_sale_id` CHAR(50) NULL DEFAULT NULL,
                         `cashier_name` CHAR(50) NULL DEFAULT NULL,
                         
                         `sub_total` DECIMAL(10,2) NULL DEFAULT '0.00',
                         `last_updated_date` DATETIME NULL DEFAULT NULL,
                         `customer_gstin` CHAR(50) NULL DEFAULT NULL,
                         */
                        
                        //upto here on 10/07/2017....
                        
                        
                        if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                            
                            //                                NSLog(@"inserted");
                            billStatus = TRUE;
                            
                        }
                        else {
                            //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                            billStatus = FALSE;
                        }
                        
                        //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                        
                        sqlite3_reset(insertStmt);
                        
                        //                    }
                    }
                    else {
                        billStatus = FALSE;
                        NSLog(@"%s",sqlite3_errmsg(database));
                        
                    }
                    
                    sqlite3_finalize(insertStmt);
                    sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                    
                    
                }
                
            }
            else {
                sqlite3_errmsg(database);
                NSLog(@"%s", sqlite3_errmsg(database));
            }
            
            
            
            
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        sqlite3_finalize(insertStmt);
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
        return billStatus;
    }
}

/**
 * @description  here are we are inserting the bill Details into offline table..
 * @date
 * @method       saveTaxDataInBilling:-- billId:--
 * @author
 * @param        NSDictionary
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 24/06/2018..
 * @reason       added commented
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveTaxDataInBilling:(NSDictionary *)JSON billId:(NSString *)billId{
    
    BOOL billStatus = FALSE;
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    NSArray *billTaxData = [JSON valueForKey:BILL_TAXES];
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            char *errMsg;
            const char *sqlStatement = "create table if not exists billing_taxes (bill_id text, tax_id text, tax_name text,tax_price double,bill_date text,remarks text,transaction_id text,updated_date text)";
            
            if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                //                    NSLog(@"Success");
                
                
                if (insertStmt == nil) {
                    char *sqliteErr;
                    
                    sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                    
                    const char *sqlStatement;
                    
                    
                    sqlStatement = "insert into billing_taxes(bill_id, tax_id,tax_name,tax_price,bill_date,remarks,transaction_id,updated_date) Values(?,?,?,?,?,?,?,?)";
                    
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                        
                        
                        
                        // for (int i=0; i<[itemList count]; i++) {
                        
                        // NSArray *temp = [[itemList objectAtIndex:i] componentsSeparatedByString:@"#"];
                        for (NSDictionary *taxDic in billTaxData) {
                            sqlite3_bind_text(insertStmt, 1,  billId.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(insertStmt, 2,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(insertStmt, 3,  [[taxDic valueForKey:TAX_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_double(insertStmt, 4, [[taxDic valueForKey:TAX_AMOUNT] doubleValue]);
                            sqlite3_bind_text(insertStmt, 5, [[taxDic valueForKey:@"bill_date"] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(insertStmt, 6,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(insertStmt, 7,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(insertStmt, 8,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            
                            
                            if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                                
                                //                                NSLog(@"inserted");
                                billStatus = TRUE;
                                
                            }
                            else {
                                //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                                billStatus = FALSE;
                            }
                            
                            //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                            
                            sqlite3_reset(insertStmt);
                            
                        }
                        
                        
                        //                    }
                    }
                    else {
                        billStatus = FALSE;
                        NSLog(@"%s",sqlite3_errmsg(database));
                        
                    }
                    
                    sqlite3_finalize(insertStmt);
                    sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                    
                    
                }
                
            }
            else {
                sqlite3_errmsg(database);
                NSLog(@"%s", sqlite3_errmsg(database));
            }
            
            
            
            
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        sqlite3_finalize(insertStmt);
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
        return billStatus;
    }
}

/**
 * @description  here are we are inserting the bill Details into offline table..
 * @date
 * @method       saveItemTaxDataInBilling:-- billId:--
 * @author
 * @param        NSDictionary
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 24/06/2018..
 * @reason       added commented
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveItemTaxDataInBilling:(NSDictionary *)JSON billId:(NSString *)billId{
    
    BOOL billStatus = FALSE;
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    NSArray *billItemTaxData = [JSON valueForKey:BILL_ITEM_TAXES];
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            char *errMsg;
            const char *sqlStatement = "create table if not exists billing_item_taxes (bill_id text, sku_id text, plu_code text,tax_category text,tax_code text,tax_type text,tax_rate text,tax_value text)";
            
            if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                //                    NSLog(@"Success");
                
                
                if (insertStmt == nil) {
                    char *sqliteErr;
                    
                    sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                    
                    const char *sqlStatement;
                    
                    
                    sqlStatement = "insert into billing_item_taxes(bill_id, sku_id,plu_code,tax_category,tax_code,tax_type,tax_rate,tax_value) Values(?,?,?,?,?,?,?,?)";
                    
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                        
                        
                        
                        // for (int i=0; i<[itemList count]; i++) {
                        
                        // NSArray *temp = [[itemList objectAtIndex:i] componentsSeparatedByString:@"#"];
                        for (NSDictionary *taxDic in billItemTaxData) {
                            sqlite3_bind_text(insertStmt, 1,  billId.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(insertStmt, 2,  [[taxDic valueForKey:@"sku_id"] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(insertStmt, 3,  [[taxDic valueForKey:@"plu_code"] UTF8String], -1, SQLITE_TRANSIENT);
                            if (![[taxDic valueForKey:@"tax_category"] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text(insertStmt, 4,  [[taxDic valueForKey:@"tax_category"] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text(insertStmt, 4,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                
                            }
                            sqlite3_bind_text(insertStmt, 5, [[taxDic valueForKey:@"tax_code"] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(insertStmt, 6,  [[taxDic valueForKey:@"tax_type"] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(insertStmt, 7,  [NSString stringWithFormat:@"%.2f",[[taxDic valueForKey:@"tax_rate"] floatValue]].UTF8String, -1, SQLITE_TRANSIENT);
                            
                            //changed by Srinivasulu on 12/07/2017....
                            
                            if(([taxDic.allKeys containsObject:@"tax_value"]) && (![[taxDic valueForKey:@"tax_value"] isKindOfClass:[NSNull class]]))
                                sqlite3_bind_text(insertStmt, 8,  [[taxDic valueForKey:@"tax_value"] UTF8String], -1, SQLITE_TRANSIENT);
                            
                            else
                                sqlite3_bind_text(insertStmt, 8,  (@"0.0").UTF8String, -1, SQLITE_TRANSIENT);
                            
                            
                            
                            //upto here on 12/07/2017....
                            
                            
                            
                            if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                                
                                //                                NSLog(@"inserted");
                                billStatus = TRUE;
                                
                            }
                            else {
                                //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                                billStatus = FALSE;
                            }
                            
                            //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                            
                            sqlite3_reset(insertStmt);
                            
                        }
                        
                        if (billItemTaxData.count == 0) {
                            billStatus = TRUE;
                        }
                        //                    }
                    }
                    else {
                        billStatus = FALSE;
                        NSLog(@"%s",sqlite3_errmsg(database));
                        
                    }
                    
                    sqlite3_finalize(insertStmt);
                    sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                    
                    
                }
                
            }
            else {
                sqlite3_errmsg(database);
                NSLog(@"%s", sqlite3_errmsg(database));
            }
            
            
            
            
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        sqlite3_finalize(insertStmt);
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
        return billStatus;
    }
}

/**
 * @description  here are we are inserting the bill Details into offline table..
 * @date
 * @method       saveBillingItems:-- billId:--
 * @author
 * @param        NSDictionary
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 24/06/2018..
 * @reason       added commented
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)saveBillingItems:(NSArray *)items sku_id:(NSString *)bill_id {
    BOOL billItemsStatus = FALSE;
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            char *errMsg;
            
            //changine by Srinivasulu on 11/07/2017....
            
            
            //            const char * sqlStatement = "create table if not exists billing_items (bill_item_id int, bill_id text, sku_id text,item_name text,quantity float,item_total_price double,tax_code text,tax_value text,status text,plu_code text, edited_price double, discount_type text, discount_id text, discount_price double,mrpPrice double, item_discount double, item_discount_desc text,item_scan_code text,promo_item_flag text,is_manufactured_item int,is_packed int,category text,sub_category text,product_range text,measure_range text,brand text,model text,PRIMARY KEY (bill_item_id))";
            
            
            //**************
            //new added fields are --: item_unit_price, item_scan_flag, employee_sale_id, department, sub_department, employee_name, tax_cost, style, pattern, batch, color, size, section, hsn_code, utility.
            
            //added by Srinivasulu on 12/08/2017....
            //product_class ---- product_sub_class.....
            
            //added by Srinivasulu on 21/08/2017....
            //edit_price_reason.....
            
            
            const char * sqlStatement = "create table if not exists billing_items (bill_item_id int, bill_id text, sku_id text,item_name text,quantity float,item_total_price double,tax_code text,tax_value text,status text,plu_code text, edited_price double, discount_type text, discount_id text, discount_price double,mrpPrice double, item_discount double, item_discount_desc text,item_scan_code text,promo_item_flag text,is_manufactured_item int,is_packed int,category text,sub_category text,product_range text,measure_range text,brand text,model text,item_unit_price text,item_scan_flag text,employee_sale_id text, department text, sub_department text, employee_name text, tax_cost text, style text, pattern text, batch text, color text, size text, section text, hsn_code text, utility text,is_tax_inclusive text,product_class text,product_sub_class text,style_range text,edit_price_reason text,voidItemReason text,expiry_date text,pack_size text, PRIMARY KEY (bill_item_id))";
            
            
            //upto here on 11/07/2017....
            
            if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
            }
            else {
                
                return billItemsStatus;
            }
            
        }
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                char *sqliteErr;
                
                sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                
                const char * sqlStatement;
                
                //changed by Srinivasulu on 11/07/2017....
                
                //                sqlStatement = "insert into billing_items(bill_item_id, bill_id,sku_id,item_name,quantity,item_total_price,tax_code,tax_value,status,plu_code,edited_price,discount_type,discount_id,discount_price,mrpPrice,item_discount,item_discount_desc,item_scan_code,promo_item_flag,is_manufactured_item,is_packed,category,sub_category,product_range,measure_range,brand,model) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                
                //**************
                //new added fields are --: item_unit_price, item_scan_flag, employee_sale_id, department, sub_department, employee_name, tax_cost, style, pattern, batch, color, size, section, hsn_code, utility.
                
                //added by Srinivasulu on 12/08/2017....
                //product_class ---- product_sub_class.....
                
                //added by Srinivasulu on 21/08/2017....
                //edit_price_reason.....
                
                
                sqlStatement = "insert into billing_items(bill_item_id, bill_id,sku_id,item_name,quantity,item_total_price,tax_code,tax_value,status,plu_code,edited_price,discount_type,discount_id,discount_price,mrpPrice,item_discount,item_discount_desc,item_scan_code,promo_item_flag,is_manufactured_item,is_packed,category,sub_category,product_range,measure_range,brand,model,item_unit_price,item_scan_flag,employee_sale_id,department,sub_department,employee_name,tax_cost,style,pattern,batch, color, size, section, hsn_code, utility,is_tax_inclusive,product_class,product_sub_class,style_range,edit_price_reason,voidItemReason,expiry_date,pack_size) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                
                /*
                 `item_sequence_num` INT(10) NOT NULL DEFAULT '0',
                 `item_category` VARCHAR(100) NULL DEFAULT NULL,
                 `item_unit_price` FLOAT NULL DEFAULT '0',
                 `item_scan_flag` TINYINT(1) NULL DEFAULT '0',
                 `employee_sale_id` CHAR(50) NULL DEFAULT NULL,
                 `department` CHAR(60) NULL DEFAULT NULL,
                 `sub_department` CHAR(60) NULL DEFAULT NULL,
                 `employee_name` VARCHAR(100) NULL DEFAULT NULL,
                 `tax_cost` DECIMAL(10,2) NULL DEFAULT '0.00',
                 `style` VARCHAR(50) NULL DEFAULT NULL,
                 `pattern` VARCHAR(50) NULL DEFAULT NULL,
                 `batch` VARCHAR(25) NULL DEFAULT NULL,
                 `color` VARCHAR(30) NULL DEFAULT NULL,
                 `size` VARCHAR(50) NULL DEFAULT NULL,
                 `section` CHAR(50) NULL DEFAULT NULL,
                 `hsn_code` CHAR(50) NULL DEFAULT NULL,
                 `utility` VARCHAR(300) NULL DEFAULT NULL,
                 `is_tax_inclusive` TINYINT(4) NOT NULL DEFAULT '0'
                 */
                //upto here on 11/07/2017....
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    const char *sqlStatement = "select bill_item_id from billing_items order by bill_item_id DESC LIMIT 1";
                    
                    NSString *item_id;
                    BOOL  itemIdExists = FALSE;
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        if (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            item_id = @((char *)sqlite3_column_text(selectStmt, 0));
                            item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                            itemIdExists = TRUE;
                            
                            
                        }
                        else {
                            //int random = arc4random_uniform(90000)+10000;
                            item_id = [NSString stringWithFormat:@"%d",1];
                        }
                        sqlite3_finalize(selectStmt);
                    }
                    
                    
                    
                    
                    for (int i=0; i<items.count; i++) {
                        
                        NSDictionary *temp = items[i] ;
                        
                        sqlite3_bind_int(insertStmt, 1, item_id.intValue);
                        item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                        sqlite3_bind_text(insertStmt, 2,  bill_id.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 3,  [[temp valueForKey:SKU_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 4,  [[temp valueForKey:ITEM_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(insertStmt, 5, [[temp valueForKey:QUANTITY] floatValue]);
                        sqlite3_bind_double(insertStmt, 6, [[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]);
                        
                        sqlite3_bind_text(insertStmt, 7,  [[temp valueForKey:TAX_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 8,  [[temp valueForKey:TAX_RATE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 9,  [[temp valueForKey:STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                        if ([[temp valueForKey:PLU_CODE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(insertStmt, 10,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(insertStmt,10,  [[temp valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        sqlite3_bind_double(insertStmt, 11, [[temp valueForKey:EDITED_PRICE] floatValue]);
                        sqlite3_bind_text(insertStmt,12,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,13,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        
                        sqlite3_bind_double(insertStmt, 14, [[temp valueForKey:DISCOUNT_PRICE_3] floatValue]);
                        
                        
                        sqlite3_bind_double(insertStmt, 15, [[temp valueForKey:MRP_Price] floatValue]);
                        sqlite3_bind_double(insertStmt, 16, [[temp valueForKey:ITEM_DISCOUNT] floatValue]);
                        
                        sqlite3_bind_text(insertStmt,17,  [[temp valueForKey:ITEM_DISCOUNT_DESC] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,18,  [[temp valueForKey:@"itemScanCode"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,19,  [[temp valueForKey:@"promoItemFlag"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(insertStmt, 20, [[temp valueForKey:kIsManuFacturedItem] boolValue]);
                        sqlite3_bind_int(insertStmt, 21, [[temp valueForKey:kPackagedType] boolValue]);
                        
                        if ([temp.allKeys containsObject:kProductCategory] && ![[temp valueForKey:kProductCategory] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(insertStmt,22,  [[temp valueForKey:kProductCategory] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(insertStmt,22,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            
                        }
                        if ([temp.allKeys containsObject:kProductSubCategory] && ![[temp valueForKey:kProductSubCategory] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(insertStmt,23,  [[temp valueForKey:kProductSubCategory] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(insertStmt,23,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            
                        }
                        if ([temp.allKeys containsObject:kProductRange] && ![[temp valueForKey:kProductRange] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(insertStmt,24,  [[temp valueForKey:kProductRange] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(insertStmt,24,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            
                        }
                        if ([temp.allKeys containsObject:kMeasureRange] && ![[temp valueForKey:kMeasureRange] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(insertStmt,25,  [[temp valueForKey:kMeasureRange] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(insertStmt,25,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            
                        }
                        if ([temp.allKeys containsObject:kProductBrand] && ![[temp valueForKey:kProductBrand] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(insertStmt,26,  [[temp valueForKey:kProductBrand] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(insertStmt,26,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            
                        }
                        if ([temp.allKeys containsObject:kProductModel] && ![[temp valueForKey:kProductModel] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text(insertStmt,27,  [[temp valueForKey:kProductModel] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text(insertStmt,27,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            
                        }
                        
                        //added by Srinivasulu on 11/07/2017....
                        
                        //**************
                        //new added fields are --: item_unit_price, item_scan_flag, employee_sale_id, department, sub_department, employee_name, tax_cost, style, pattern, batch, color, size, section, hsn_code, utility.
                        
                        if ([temp.allKeys containsObject:ITEMUNITPRICE] && ![[temp valueForKey:ITEMUNITPRICE] isKindOfClass:[NSNull class]]) {
                            sqlite3_bind_text( insertStmt, 28,  [[temp valueForKey:ITEMUNITPRICE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            sqlite3_bind_text( insertStmt, 28,  (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);
                            
                        }
                        if ([temp.allKeys containsObject:ITEM_SCAN_FLAG] && ![[temp valueForKey:ITEM_SCAN_FLAG] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 29,  [[temp valueForKey:ITEM_SCAN_FLAG] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 29,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([temp.allKeys containsObject:kItemSpecificEmplId] && ![[temp valueForKey:kItemSpecificEmplId] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 30,  [[temp valueForKey:kItemSpecificEmplId] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 30,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:kItemDept] && ![[temp valueForKey:kItemDept] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 31,  [[temp valueForKey:kItemDept] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 31,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:kItemSubDept] && ![[temp valueForKey:kItemSubDept] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 32,  [[temp valueForKey:kItemSubDept] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 32,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:kItemSpecificEmplName] && ![[temp valueForKey:kItemSpecificEmplName] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 33,  [[temp valueForKey:kItemSpecificEmplName] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 33,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:TAX_COST] && ![[temp valueForKey:TAX_COST] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 34,  [[temp valueForKey:TAX_COST] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 34,  (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        
                        
                        if ([temp.allKeys containsObject:STYLE] && ![[temp valueForKey:STYLE] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 35,  [[temp valueForKey:STYLE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 35,  (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:PATTERN] && ![[temp valueForKey:PATTERN] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 36,  [[temp valueForKey:PATTERN] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 36,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:BATCH] && ![[temp valueForKey:BATCH] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 37,  [[temp valueForKey:BATCH] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 37,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:COLOR] && ![[temp valueForKey:COLOR] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 38,  [[temp valueForKey:COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 38,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:SIZE] && ![[temp valueForKey:SIZE] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 39,  [[temp valueForKey:SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 39,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:SECTION] && ![[temp valueForKey:SECTION] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 40,  [[temp valueForKey:SECTION] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 40,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:HSN_CODE] && ![[temp valueForKey:HSN_CODE] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 41,  [[temp valueForKey:HSN_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 41,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if ([temp.allKeys containsObject:UTILITY] && ![[temp valueForKey:UTILITY] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 42,  [[temp valueForKey:UTILITY] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 42,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([temp.allKeys containsObject:TAX_INCLUSIVE] && ![[temp valueForKey:TAX_INCLUSIVE] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 43,  [NSString stringWithFormat:@"%i", [[temp valueForKey:TAX_INCLUSIVE] intValue]].UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 43,  (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        
                        
                        //added by Srinivasulu on 12/08/2017....
                        //product_class ---- product_sub_class.....
                        
                        if ([temp.allKeys containsObject:PRODUCT_CLASS] && ![[temp valueForKey:PRODUCT_CLASS] isKindOfClass:[NSNull class]]) {
                            
                            
                            sqlite3_bind_text( insertStmt, 44,  [[temp valueForKey:PRODUCT_CLASS] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 44,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([temp.allKeys containsObject:PRODUCT_SUB_CLASS] && ![[temp valueForKey:PRODUCT_SUB_CLASS] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 45,  [[temp valueForKey:PRODUCT_SUB_CLASS] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 45,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([temp.allKeys containsObject:STYLE_RANGE] && ![[temp valueForKey:STYLE_RANGE] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 46,  [[temp valueForKey:STYLE_RANGE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 46,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        //added by Srinivasulu on 21/08/2017....
                        //edit_price_reason.....
                        
                        if ([temp.allKeys containsObject:EDIT_PRICE_REASON] && ![[temp valueForKey:EDIT_PRICE_REASON] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 47,  [[temp valueForKey:EDIT_PRICE_REASON] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 47,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        //upto here on 21/08/2017....
                        
                        
                        //upto here on 12/08/2017....
                        
                        
                        
                        //added by Srinivasulu on 08/09/2017 && 29/08/2018....
                        //VOID_ITEM_REASON.....
                        
                        if ([temp.allKeys containsObject:VOID_ITEM_REASON] && ![[temp valueForKey:VOID_ITEM_REASON] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 48,  [[temp valueForKey:VOID_ITEM_REASON] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 48,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([temp.allKeys containsObject:EXPIRY_DATE] && ![[temp valueForKey:EXPIRY_DATE] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 49,  [[temp valueForKey:EXPIRY_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 49,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if ([temp.allKeys containsObject:Pack_Size] && ![[temp valueForKey:Pack_Size] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 50,  [[temp valueForKey:Pack_Size] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 50,  (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        //upto here on 08/09/2017 && 29/08/2018....
                        
                        
                        
                        
                        /*
                         `item_sequence_num` INT(10) NOT NULL DEFAULT '0',
                         `item_category` VARCHAR(100) NULL DEFAULT NULL,
                         `item_unit_price` FLOAT NULL DEFAULT '0',
                         `item_scan_flag` TINYINT(1) NULL DEFAULT '0',
                         `employee_sale_id` CHAR(50) NULL DEFAULT NULL,
                         `department` CHAR(60) NULL DEFAULT NULL,
                         `sub_department` CHAR(60) NULL DEFAULT NULL,
                         `employee_name` VARCHAR(100) NULL DEFAULT NULL,
                         `tax_cost` DECIMAL(10,2) NULL DEFAULT '0.00',
                         `style` VARCHAR(50) NULL DEFAULT NULL,
                         `pattern` VARCHAR(50) NULL DEFAULT NULL,
                         `batch` VARCHAR(25) NULL DEFAULT NULL,
                         `color` VARCHAR(30) NULL DEFAULT NULL,
                         `size` VARCHAR(50) NULL DEFAULT NULL,
                         `section` CHAR(50) NULL DEFAULT NULL,
                         `hsn_code` CHAR(50) NULL DEFAULT NULL,
                         `utility` VARCHAR(300) NULL DEFAULT NULL,
                         */
                        
                        //upto here on 11/07/2017....
                        
                        
                        
                        
                        //upto here on 11/07/2017....
                        
                        
                        
                        
                        if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                            
                            //                            NSLog(@"inserted");
                            billItemsStatus = TRUE;
                            
                        }
                        else {
                            billItemsStatus = FALSE;
                        }
                        
                        //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                        
                        sqlite3_reset(insertStmt);
                        
                    }
                    
                }
                else {
                    NSLog(@"Error While Inserting. '%s'",sqlite3_errmsg(database));
                }
                sqlite3_finalize(insertStmt);
                sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                
            }
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        sqlite3_finalize(insertStmt);
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
        return billItemsStatus;
    }
}

/**
 * @description  here are we are inserting the bill Details into offline table..
 * @date
 * @method       saveItemCampaignDetails:-- billId:--
 * @author
 * @param        NSDictionary
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 24/06/2018..
 * @reason       added commented
 *
 * @verified By
 * @verified On
 *
 */

-(void)saveItemCampaignDetails:(NSArray *)itemDiscountsArr billId:(NSString*)billId {
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        
        //   NSArray *denomination = [denominations valueForKey:@"denominations"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                char *errMsg;
                const char *sqlStatement = "create table if not exists billing_discounts (s_no INT (10)  NOT NULL,discount_type  VARCHAR (100),bill_id        VARCHAR (100) NOT NULL DEFAULT '0',discount_id    VARCHAR (100) DEFAULT '0',item_name      VARCHAR (100) DEFAULT '0',sku_id    CHAR (50)     DEFAULT '0',plu_code  CHAR (50)   DEFAULT '0',discount_value FLOAT DEFAULT '0',item_price  FLOAT     DEFAULT '0',date    text DEFAULT NULL,remarks  VARCHAR (250) DEFAULT '0',PRIMARY KEY (s_no))";
                
                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                    == SQLITE_OK) {
                    
                    //                    NSLog(@"Success");
                    
                }
                else {
                    NSLog(@"%s",errMsg);
                }
                
            }
            
        }
        
        
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                char *sqliteErr;
                
                sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                
                const char *sqlStatement;
                
                
                sqlStatement = "insert into billing_discounts(s_no, discount_type,bill_id,discount_id,item_name,sku_id,plu_code,discount_value,item_price,date,remarks) Values(?,?,?,?,?,?,?,?,?,?,?)";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    
                    const char *sqlStatement = "select s_no from billing_discounts order by s_no DESC LIMIT 1";
                    
                    NSString *item_id;
                    BOOL  itemIdExists = FALSE;
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        if (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            item_id = @((char *)sqlite3_column_text(selectStmt, 0));
                            item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                            itemIdExists = TRUE;
                            
                            
                        }
                        else {
                            //int random = arc4random_uniform(90000)+10000;
                            item_id = [NSString stringWithFormat:@"%d",1];
                        }
                        sqlite3_finalize(selectStmt);
                    }
                    
                    
                    
                    for (int i=0; i<itemDiscountsArr.count; i++) {
                        
                        NSDictionary *temp = itemDiscountsArr[i];
                        
                        sqlite3_bind_int(insertStmt, 1, item_id.intValue);
                        sqlite3_bind_text(insertStmt, 2,  [[temp valueForKey:@"discountType"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 3,  billId.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 4,  [[temp valueForKey:@"discountId"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 5,  [[temp valueForKey:@"itemName"] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(insertStmt, 6,  [[temp valueForKey:@"skuId"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 7,  [[temp valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(insertStmt, 8, [[temp valueForKey:@"discountPrice"] floatValue]);
                        sqlite3_bind_double(insertStmt, 9, [[temp valueForKey:@"itemPrice"] floatValue]);
                        
                        sqlite3_bind_text(insertStmt, 10,  [WebServiceUtility getCurrentDate].UTF8String, -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(insertStmt, 11,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        
                        
                        if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                            
                            //                        NSLog(@"inserted");
                            
                        }
                        else {
                            NSLog(@"%s",sqlite3_errmsg(database));
                            
                            //                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        }
                        
                        //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                        
                        sqlite3_reset(insertStmt);
                        
                        
                    }
                }
                
                sqlite3_finalize(insertStmt);
                sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                
            }
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        sqlite3_finalize(insertStmt);
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
    }
}

/**
 * @description  In this method we are getting the required field values from product_subcategory_master....
 * @date
 * @method       saveTransactions:--  transactionDetails:-- transactionType:--
 * @author
 * @param        NSString
 * @param        NSDictionary
 *
 * @return       NSString
 *
 * @modified By  Srinivasulu on 27/11/2017 && on 02/05/2018....
 * @reason       reason --  added comments and two column....
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)saveTransactions:(NSString*)billId transactionDetails:(NSDictionary *)transactionDic transactionType:(NSString *)typeStr{
    
    NSString *trasactionId = @"";
    NSString *denomTrans = @"";
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                char *errMsg;
                const char *sqlStatement = "create table if not exists billing_transactions (bill_id text,mode_of_payment text,transaction_id text,card_type text,card_subtype text,card_no text,paid_amount text,date_and_time text,card_info text,approval_code text,bank_name text,change_return double,received_amt double,tender_Mode text,tender_key INT,transaction_type text, PRIMARY KEY (transaction_id))";
                
                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                    == SQLITE_OK) {
                    
                    //                    NSLog(@"Success"); //-
                    
                }
                else {
                    NSLog(@"%s",errMsg);
                    return denomTrans;
                }
                
            }
            
        }
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                char *sqliteErr;
                
                sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                
                const char *sqlStatement;
                
                
                sqlStatement = "insert into billing_transactions(bill_id, mode_of_payment,transaction_id,card_type,card_subtype,card_no,paid_amount,date_and_time,card_info,approval_code,bank_name,change_return,received_amt,tender_Mode,tender_key,transaction_type) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    NSArray *temp = [transactionDic valueForKey:@"billingTransactions"];
                    
                    for (int i=0; i<temp.count; i++) {
                        
                        NSDictionary *dic = temp[i];
                        NSDate *date = [NSDate date];
                        NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
                        dateFormat.dateFormat = @"yy:MM:dd HH:mm:ss.sss";
                        NSString* currentdate = [dateFormat stringFromDate:date];
                        
                        NSString *today = [NSString stringWithFormat:@"%@%@",[[currentdate componentsSeparatedByString:@" "][0] stringByReplacingOccurrencesOfString:@":" withString:@""],[[currentdate componentsSeparatedByString:@" "][1] stringByReplacingOccurrencesOfString:@":" withString:@""]];
                        
                        today = [NSString stringWithFormat:@"%@%d",[today stringByReplacingOccurrencesOfString:@"." withString:@""],i];
                        
                        
                        trasactionId = [NSString stringWithFormat:@"%@%@",@"TX",today];
                        
                        //added by Srinivasulu on 01/05/2018....
                        
                        if(![typeStr isEqualToString:CASH_RETURNS])
                            trasactionId = [NSString stringWithFormat:@"%@%@%ld",billId,@"_P",(i + 1 + [[self checkGivenValueIsNullOrNil:[dic valueForKey:EXISTING_TRANSACTIONS] defaultReturn:@"0"] integerValue])];
                        //upto here on01/05/2018....
                        
                        denomTrans = [trasactionId copy];
                        
                        sqlite3_bind_text(insertStmt, 1,  billId.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 2,  [[dic valueForKey:MODE_OF_PAY] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 3,  trasactionId.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 4,  [[dic valueForKey:CARD_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 5,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 6,  [[dic valueForKey:COUPON_NO] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 7,  [[dic valueForKey:PAID_AMT] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 8,  [[dic valueForKey:@"dateTime"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 9,  [[dic valueForKey:CARD_INFO] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 10,  [[dic valueForKey:APPROVAL_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 11,  [[dic valueForKey:BANK_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(insertStmt, 12, [[dic valueForKey:CHANGE_RETURN] doubleValue]);
                        sqlite3_bind_double(insertStmt, 13, [[dic valueForKey:RECEIVED_AMOUNT] doubleValue]);
                        
                        NSString * tenderModeStr = [self checkGivenValueIsNullOrNil:[dic valueForKey:TENDER_MODE] defaultReturn:@""];
                        int  tenderKey = [[self checkGivenValueIsNullOrNil:[dic valueForKey:TENDER_KEY] defaultReturn:@"0"] intValue];
                        
                        sqlite3_bind_text(insertStmt, 14,  tenderModeStr.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_int(insertStmt, 15, tenderKey);
                        
                        if ([dic.allKeys containsObject:TRANSACTION_TYPE_FLAG] && ![[dic valueForKey:TRANSACTION_TYPE_FLAG] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text( insertStmt, 16,  [NSString stringWithFormat:@"%li", [[dic valueForKey:TRANSACTION_TYPE_FLAG] longValue]].UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        else {
                            
                            sqlite3_bind_text( insertStmt, 16,  (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                            
                            //                            NSLog(@"inserted");
                            
                        }
                        else {
                            NSLog(@"%s",sqliteErr);
                            
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                            denomTrans = @"";
                        }
                        sqlite3_reset(insertStmt);
                        
                    }
                    
                    
                }
                
                sqlite3_finalize(insertStmt);
                sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                
                
            }
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        sqlite3_finalize(insertStmt);
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
    }
    
    return denomTrans;
}

/**
 * @description  here are we are inserting the bill Details into offline table..
 * @date
 * @method       saveDenominations:-- billId:-- transaction_id:--
 * @author
 * @param        NSDictionary
 * @param        NSString
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 24/06/2018..
 * @reason       added commented
 *
 * @verified By
 * @verified On
 *
 */

-(void)saveDenominations:(NSArray *)denominations billId:(NSString*)billId transaction_id:(NSString *)transaction_id{
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        
        //   NSArray *denomination = [denominations valueForKey:@"denominations"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                char *errMsg;
                const char *sqlStatement = "create table if not exists billing_denomination (bill_id text,cash_denomination text,paid_denom_no text,paid_amount text,return_denom_no text,return_amount text,date text,transaction_id text)";
                
                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                    == SQLITE_OK) {
                    
                    //                    NSLog(@"Success");
                    
                }
                else {
                    NSLog(@"%s",errMsg);
                }
                
            }
            
        }
        
        
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                char *sqliteErr;
                
                sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                
                const char *sqlStatement;
                
                
                sqlStatement = "insert into billing_denomination(bill_id, cash_denomination,paid_denom_no,paid_amount,return_denom_no,return_amount,date,transaction_id) Values(?,?,?,?,?,?,?,?)";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    for (int i=0; i<denominations.count; i++) {
                        
                        NSDictionary *temp = denominations[i];
                        
                        sqlite3_bind_text(insertStmt, 1,  billId.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 2,  [[temp valueForKey:@"denomination"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 3,  [[temp valueForKey:@"paidDenominationNo"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 4,  [[temp valueForKey:@"paidAmount"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 5,  [[temp valueForKey:@"returnDenominationNo"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 6,  [[temp valueForKey:@"returnAmount"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 7,  [[temp valueForKey:@"billDate"] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(insertStmt, 8,  transaction_id.UTF8String, -1, SQLITE_TRANSIENT);
                        
                        
                        
                        if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                            
                            //                        NSLog(@"inserted");
                            
                        }
                        else {
                            NSLog(@"%s",sqliteErr);
                            
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        }
                        
                        //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                        
                        sqlite3_reset(insertStmt);
                        
                        
                    }
                }
                
                sqlite3_finalize(insertStmt);
                sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                
                
            }
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        sqlite3_finalize(insertStmt);
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
    }
}

/**
 * @description  here are we are deleting the bill Details if any failure at the time of transaction failure..
 * @date
 * @method       deleteLocalBills:--
 * @author
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)deleteLocalBills:(NSString *)bill_id{
    
    BOOL isDeleted = NO;
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        //  BOOL isExists = [self createTable:@"billing"];
        
        //  if (isExists) {
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                NSString *query = [NSString stringWithFormat:@"delete from billing_table where bill_id = '%@'",bill_id];
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        isDeleted = NO;
                        NSLog(@"%s",sqlite3_errmsg(database));
                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        isDeleted = YES;
                    }
                    sqlite3_reset(deleteStmt);
                }
                deleteStmt = nil;
                
            }
            if (deleteStmt == nil) {
                NSString *query = [NSString stringWithFormat:@"delete from billing_items where bill_id = '%@'",bill_id];
                
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        NSLog(@"%s",sqlite3_errmsg(database));
                        isDeleted = NO;
                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        isDeleted = YES;
                    }
                    sqlite3_reset(deleteStmt);
                }
                deleteStmt = nil;
                
            }
            if (deleteStmt == nil) {
                NSString *query = [NSString stringWithFormat:@"delete from billing_transactions where bill_id = '%@'",bill_id];
                
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        isDeleted = NO;
                        NSLog(@"%s",sqlite3_errmsg(database));
                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        isDeleted = YES;
                    }
                    sqlite3_reset(deleteStmt);
                }
                deleteStmt = nil;
                
            }
            if (deleteStmt == nil) {
                NSString *query = [NSString stringWithFormat:@"delete from billing_taxes where bill_id = '%@'",bill_id];
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        isDeleted = NO;
                        NSLog(@"%s",sqlite3_errmsg(database));
                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        isDeleted = YES;
                        
                    }
                    sqlite3_reset(deleteStmt);
                }
                deleteStmt = nil;
                
            }
            if (deleteStmt == nil) {
                NSString *query = [NSString stringWithFormat:@"delete from billing_denomination where bill_id = '%@'",bill_id];
                
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        isDeleted = NO;
                        NSLog(@"%s",sqlite3_errmsg(database));
                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        isDeleted = YES;
                    }
                    sqlite3_reset(deleteStmt);
                }
                deleteStmt = nil;
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
    }
    @finally {
        sqlite3_close(database);
        deleteStmt = nil;
        selectStmt = nil;
    }
}

/**
 * @description  In this method we are saving the creadit note information in offline tables....
 * @date         24/09/2018
 * @method       saveCreditNoteInfo:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)saveCreditNoteInfo:(NSArray *)returnTransactionList{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            char * errMsg;
            
            const char * sqlStatement  = "CREATE TABLE IF NOT EXISTS `billing_return_note` (  `credit_note_no` VARCHAR(50) NOT NULL,  `bill_id` CHAR(20) NOT NULL,  `customer_mobile` VARCHAR(15) NULL DEFAULT NULL,  `credit_amount` FLOAT NULL DEFAULT NULL,  `credit_remarks` VARCHAR(50) NULL DEFAULT NULL,  `date` DATETIME NULL DEFAULT NULL,  `status` TINYINT(2) NULL DEFAULT '0',  `store_location` VARCHAR(100) NULL DEFAULT '',  `counter_id` VARCHAR(100) NULL DEFAULT '',  `customer_id` VARCHAR(100) NULL DEFAULT '',  `bal_amt` FLOAT NULL DEFAULT '0',  `expiry_date` DATETIME NULL DEFAULT NULL,  `row_created_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,  `row_updated_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,  PRIMARY KEY (`credit_note_no`))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- billing_return_note Table Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            const char * sqlInsertStatement = "INSERT OR REPLACE INTO `billing_return_note` (`credit_note_no`, `bill_id`, `customer_mobile`, `credit_amount`, `credit_remarks`, `date`, `status`, `store_location`, `counter_id`, `customer_id`, `bal_amt`, `expiry_date`) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            
            
            if(sqlite3_prepare_v2(localDatabase, sqlInsertStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for (int i=0; i<returnTransactionList.count; i++) {
                    
                    NSDictionary * tempDic = returnTransactionList[i] ;
                    
                    if ([tempDic.allKeys containsObject:CREDIT_NOTE_NO] && ![[tempDic valueForKey:CREDIT_NOTE_NO] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 1, [[tempDic valueForKey:CREDIT_NOTE_NO] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt,1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:BILL_ID] && ![[tempDic valueForKey:BILL_ID] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 2, [[tempDic valueForKey:BILL_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:CUSTOMER_MOBILE] && ![[tempDic valueForKey:CUSTOMER_MOBILE] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 3, [[tempDic valueForKey:CUSTOMER_MOBILE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:CREDIT_AMOUNT] && ![[tempDic valueForKey:CREDIT_AMOUNT] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_double(localInsertStmt, 4, [[tempDic valueForKey:CREDIT_AMOUNT] floatValue]);
                    }
                    else{
                        sqlite3_bind_double(localInsertStmt, 4, 0.0);
                    }
                    
                    if ([tempDic.allKeys containsObject:CREDIT_REMARKS] && ![[tempDic valueForKey:CREDIT_REMARKS] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 5, [[tempDic valueForKey:CREDIT_REMARKS] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:DATE] && ![[tempDic valueForKey:DATE] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 6, [[tempDic valueForKey:DATE] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:STATUS] && ![[tempDic valueForKey:STATUS] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_int(localInsertStmt, 7, [[tempDic valueForKey:STATUS] intValue]);
                    }
                    else{
                        sqlite3_bind_int(localInsertStmt, 7, 0);
                    }
                    
                    if ([tempDic.allKeys containsObject:STORELOCATION] && ![[tempDic valueForKey:STORELOCATION] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 8, [[tempDic valueForKey:STORELOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 8, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:COUNTER] && ![[tempDic valueForKey:COUNTER] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 9, [[tempDic valueForKey:COUNTER] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 9, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:CUSTOMER_ID] && ![[tempDic valueForKey:CUSTOMER_ID] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 10, [[tempDic valueForKey:CUSTOMER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 10, presentLocation.UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([tempDic.allKeys containsObject:BAL_AMOUNT] && ![[tempDic valueForKey:BAL_AMOUNT] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_double(localInsertStmt, 11, [[tempDic valueForKey:BAL_AMOUNT] floatValue]);
                        
                    }
                    else{
                        sqlite3_bind_double(localInsertStmt, 11, 0.0);
                    }
                    
                    if ([tempDic.allKeys containsObject:EXPIRY_DATE_STR] && ![[tempDic valueForKey:EXPIRY_DATE_STR] isKindOfClass:[NSNull class]])
                    {
                        sqlite3_bind_text(localInsertStmt, 12, [[tempDic valueForKey:EXPIRY_DATE_STR] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 12, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                    }
                    else {
                    }
                    sqlite3_reset(localInsertStmt);
                    break;
                }
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase));
            }
            
            if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
            {
                NSLog(@"----Committed -- billing_return_note ----");
            }
            else
            {
                NSLog(@"----Commit -- Failed -- billing_return_note ----");
            }
            sqlite3_finalize(localInsertStmt);
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    } @catch (NSException *exception) {
        
    } @finally {
        localInsertStmt = nil;
        sqlite3_close(localDatabase);
    }
}

#pragma -mark Methods to used to handle the sync error response..

/**
 * @description  In this method we are retriving the maxserial billId on the giving input date from table....
 * @date         20/10/2018
 * @method       getAndReturnMaximumOfflineBillCount:-- DefaultSerialBillId:--
 * @author       Srinivasulu
 * @param        NSString
 * @param        NSString
 *
 * @return       NSString
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)getAndReturnMaximumOfflineBillCount:(NSString *)bussiness_date DefaultSerialBillId:(NSString *)defalutStr{
    
    NSString * serialBillIdStr = defalutStr;
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            NSString * query = [NSString stringWithFormat:@"SELECT max(serial_billId) from billing_table where substr(business_cycle_date,0,10) == '%@'",bussiness_date];
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    if((char *)sqlite3_column_text(localSelectStmt, 0) && (sqlite3_column_text(localSelectStmt, 0) != nil))
                        serialBillIdStr = @((char *)sqlite3_column_text(localSelectStmt,0));
                    break;
                }
                //                sqlite3_reset(localSelectStmt);
                sqlite3_finalize(localSelectStmt);
                sqlite3_close(localDatabase);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
            
        }
        
        if(serialBillIdStr.length > 0){
            
            @try {
                serialBillIdStr = [serialBillIdStr componentsSeparatedByString:@"/"][1];
                
                if(serialBillIdStr.length <= 4){
                    
                    if( serialBillIdStr.integerValue < 9)
                        serialBillIdStr = [NSString stringWithFormat:@"%@%i", @"000", (serialBillIdStr.intValue + 1)];
                    
                    else if(serialBillIdStr.integerValue < 99)
                        serialBillIdStr = [NSString stringWithFormat:@"%@%i", @"00", (serialBillIdStr.intValue + 1)];
                    
                    else if(serialBillIdStr.integerValue < 999)
                        serialBillIdStr = [NSString stringWithFormat:@"%@%i", @"0", (serialBillIdStr.intValue + 1)];
                    
                }
                
                if(serialBillIdStr.length >= 4){
                    
                    
                    NSString * locStr = storeCodeStr;
                    NSString * localCounterIdStr = counterName;
                    
                    NSString * dateStr = [NSString stringWithFormat:@"%@",bussiness_date];
                    
                    if(locStr.length > 3)
                        locStr = [NSString stringWithFormat:@"%@",[locStr substringWithRange:NSMakeRange(0, 3)]];
                    
                    if(localCounterIdStr.length > 2)
                        localCounterIdStr = [NSString stringWithFormat:@"%@",[localCounterIdStr substringWithRange:NSMakeRange(0, 2)]];
                    
                    NSString * printDateStr = @"";
                    
                    if(dateStr.length){
                        
                        if([dateStr componentsSeparatedByString:@" "]){
                            NSString * str = [dateStr componentsSeparatedByString:@" "][0];
                            
                            NSArray * temp = [str componentsSeparatedByString:@"/"];
                            
                            
                            for(int i = 0; i < (temp.count - 1); i++){
                                
                                NSString *  tempStr = temp[i];
                                
                                printDateStr = [NSString stringWithFormat:@"%@%@", printDateStr, tempStr];
                            }
                            
                            if(temp.count){
                                
                                NSString *  tempStr = temp.lastObject;
                                
                                if(tempStr.length >= 4)
                                    tempStr = [tempStr substringFromIndex:tempStr.length - 2];
                                
                                //                            tempStr = [NSString stringWithFormat:@"%@",[tempStr substringWithRange:NSMakeRange(2, 4)]];
                                
                                printDateStr = [NSString stringWithFormat:@"%@%@", printDateStr, tempStr];
                                
                            }
                            
                        }
                    }
                    
                    serialBillIdStr =  [NSString stringWithFormat:@"%@%@%@%@%@",locStr,localCounterIdStr,printDateStr,@"/",serialBillIdStr];
                }
            } @catch (NSException *exception) {
                
            }
        }
        
    } @catch (NSException *exception) {
        
        serialBillIdStr = @"";
    } @finally {
        
        return serialBillIdStr;
    }
    
}

/**
 * @description  In this method we are changing the serialBillId with maxSerialBillId on that particular day....
 * @date         04/10/2018
 * @method       changeSerialBuildIdLocally:-- originalBillId:--
 * @author       Srinivasulu
 * @param        NSString
 * @param        NSString
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)changeSerialBuildIdLocally:(NSString *)newSerialBillId  originalBillId:(NSString *)originalBillIdStr{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelect_update_Stmt = nil;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            
            NSString * query = [NSString stringWithFormat:@"update  billing_table set  serial_billId = '%@' where bill_id = '%@'",newSerialBillId,originalBillIdStr];
            
            const char * sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                    
                }
                else {
                    
                }
                
                sqlite3_finalize(localSelect_update_Stmt);
                localSelect_update_Stmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        //            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //            [alert show];
    }
    @finally {
        
        sqlite3_finalize(localSelect_update_Stmt);
        sqlite3_close(localDatabase);
    }
}

/**
 * @description  In this method we are changing the serialBillId with maxSerialBillId on that particular day....
 * @date         04/10/2018
 * @method       changeOriginalBillIdLocally:-- originalBillId:--
 * @author       Srinivasulu
 * @param        NSString
 * @param        NSString
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)changeOriginalBillIdLocally:(NSString *)newOriginalBillIdStr  existingBillId:(NSString *)oldBillIdStr numberOfPayment:(int)noOfPayments  transactionInfo:(NSArray *)completeTranactionInfoArr{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelect_update_Stmt = nil;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            if (localSelect_update_Stmt == nil) {
                NSString * query = [NSString stringWithFormat:@"update billing_table set  bill_id = '%@' where bill_id = '%@'",newOriginalBillIdStr,oldBillIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                        
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            if (localSelect_update_Stmt == nil) {
                NSString * query = [NSString stringWithFormat:@"update billing_denomination set  bill_id = '%@' where bill_id = '%@'",newOriginalBillIdStr,oldBillIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                        
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            if (localSelect_update_Stmt == nil) {
                NSString * query = [NSString stringWithFormat:@"update billing_discounts set  bill_id = '%@' where bill_id = '%@'",newOriginalBillIdStr,oldBillIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                        
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            if (localSelect_update_Stmt == nil) {
                NSString * query = [NSString stringWithFormat:@"update  billing_item_taxes set  bill_id = '%@' where bill_id = '%@'",newOriginalBillIdStr,oldBillIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                        
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            if (localSelect_update_Stmt == nil) {
                NSString * query = [NSString stringWithFormat:@"update  billing_items set  bill_id = '%@' where bill_id = '%@'",newOriginalBillIdStr,oldBillIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                        
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            if (localSelect_update_Stmt == nil) {
                NSString * query = [NSString stringWithFormat:@"update  billing_taxes set  bill_id = '%@' where bill_id = '%@'",newOriginalBillIdStr,oldBillIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                        
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            if (localSelect_update_Stmt == nil) {
                NSString * query = [NSString stringWithFormat:@"update  billing_transactions set  bill_id = '%@' where bill_id = '%@'",newOriginalBillIdStr,oldBillIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                        
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            //--Need to rewrite it again....
            if (localSelect_update_Stmt == nil) {
                
                for(int i = 1; i <= noOfPayments; i++){
                    NSString * newTrasactionsIdStr = [NSString stringWithFormat:@"%@%@%i",newOriginalBillIdStr,@"_P",i];
                    NSString * oldTrasactionsIdStr = [NSString stringWithFormat:@"%@%@%i",oldBillIdStr,@"_P",i];
                    
                    if( [completeTranactionInfoArr count] > (i-1)){
                        NSDictionary * tempInfoDic = [completeTranactionInfoArr objectAtIndex:(i-1)];
                        
                        if(([tempInfoDic.allKeys containsObject:TRANSACTION_ID]) && (![[tempInfoDic valueForKey:TRANSACTION_ID] isKindOfClass:[NSNull class]]))
                            oldTrasactionsIdStr = [tempInfoDic valueForKey:TRANSACTION_ID];
                        
                    }
                    
                    NSString * query = [NSString stringWithFormat:@"update  billing_transactions set  transaction_id = '%@' where transaction_id = '%@'",newTrasactionsIdStr,oldTrasactionsIdStr];
                    
                    const char * sqlStatement = query.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                            
                        }
                        else {
                            
                        }
                        sqlite3_reset(localSelect_update_Stmt);
                        localSelect_update_Stmt = nil;
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                    }
                }
            }
            
            if (localSelect_update_Stmt == nil) {
                NSString * query = [NSString stringWithFormat:@"update exchange_items set  bill_id = '%@' where bill_id = '%@'",newOriginalBillIdStr,oldBillIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                        
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
            if (localSelect_update_Stmt == nil) {
                NSString * query = [NSString stringWithFormat:@"update  return_items set  bill_id = '%@' where bill_id = '%@'",newOriginalBillIdStr,oldBillIdStr];
                
                const char * sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                        
                    }
                    else {
                        
                    }
                    sqlite3_reset(localSelect_update_Stmt);
                    localSelect_update_Stmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
            }
            
        }
    } @catch (NSException *exception) {
        NSLog(@"%@",exception);
        //            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //            [alert show];
    } @finally {
        sqlite3_finalize(localSelect_update_Stmt);
        sqlite3_close(localDatabase);
    }
    
}

#pragma -mark Methods to used in transaction commit in billing....

/**
 * @description  here are we are creating the new Bill_ID and inserting the data into it..
 * @date         04/10/2018
 * @method       createBillingInSingleTransaction:--  isToGenerateBillID:--
 * @author       Srinivasulu
 * @param        NSString
 * @param        Bool
 *
 * @return       NSString
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)createBillingInSingleTransaction:(NSString *)requestStr  isToGenerateBillID:(Boolean)generateBillId{
    
    NSString * creationResponseStr = @"";
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt =nil;
    static sqlite3_stmt * localSelectStmt =nil;
    @try {
        
        NSError * err;
        NSDictionary * createBillRequestDic = [NSJSONSerialization JSONObjectWithData: [requestStr dataUsingEncoding:NSUTF8StringEncoding]
                                                                              options: NSJSONReadingMutableContainers
                                                                                error: &err];
        
        if(generateBillId){
            
            creationResponseStr = [self generateTechnolabsBillId];
        }
        else{
            if(([createBillRequestDic.allKeys containsObject:BILL_ID]) && (![[createBillRequestDic valueForKey:BILL_ID] isKindOfClass:[NSNull class]]))
                creationResponseStr = [createBillRequestDic valueForKey:BILL_ID];
        }
        
        //This method is used for offline Bill validations....
        //        if([[self validateBillDetails:createBillRequestDic] length]){
        //            creationResponseStr = [self validateBillDetails:createBillRequestDic];
        //        }
        //        else
        
        if(creationResponseStr.length){
            
            //creating tables in offline..
            [self createBillingRelatedTablesInOffline];
            
            char * sqliteErr;
            
            NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
            
            
            if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
                
                if (localInsertStmt == nil) {
                    
                    sqlite3_exec(localDatabase, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                    //                    sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
                    
                    const char * sqlStatement;
                    sqlStatement = "insert into billing_table(bill_id, date_and_time,cashier_id,counter_ID,Total_discount,discount_type,discount_type_id,tax,total_price,due_amount,status,email_id,phone_number,store_location,customer_name,shift_id,save_status,print_count,change_return,other_discount,business_cycle_date,scan_start_time,scan_end_time,print_time,bill_time_duration,bill_time_duration_accept_print,serial_billId,other_discount_desc,register,employee_sale_id,cashier_name,sub_total,last_updated_date,customer_gstin,bill_amount,billCancelReason,comments,sales_order_id,shipping_charges,is_offline_bill) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                        
                        sqlite3_bind_text(localInsertStmt, 1,  creationResponseStr.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 2,  [[createBillRequestDic valueForKey:BILLING_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 3,  [[createBillRequestDic valueForKey:CASHIER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 4,  [[createBillRequestDic valueForKey:COUNTER] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 5, [[createBillRequestDic valueForKey:TOTAL_BILL_DISCOUNT] stringValue].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 6,  [[createBillRequestDic valueForKey:DISCOUNT_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 7,  [[createBillRequestDic valueForKey:DISCOUNT_TYPE_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 8,  [[createBillRequestDic valueForKey:@"tax"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 9, [[createBillRequestDic valueForKey:TOTAL_BILL_AMT] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 10,  [NSString stringWithFormat:@"%.2f",[[createBillRequestDic valueForKey:BILL_DUE] floatValue]].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 11,  [[createBillRequestDic valueForKey:STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 12, [[createBillRequestDic valueForKey:@"emailId"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 13,  [[createBillRequestDic valueForKey:@"phoneNumber"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 14,  [[createBillRequestDic valueForKey:STORE_LOCATION] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 15,  [[createBillRequestDic valueForKey:CUSTOMER_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 16,  [[createBillRequestDic valueForKey:SHIFT_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:SYNC_STATUS]) && (![[createBillRequestDic valueForKey:SYNC_STATUS] isKindOfClass:[NSNull class]])){
                            
                            sqlite3_bind_text(localInsertStmt, 17,  [[createBillRequestDic valueForKey:SYNC_STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt, 17,  (@"to be uploaded").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        sqlite3_bind_int(localInsertStmt, 18, 0);//print_count
                        sqlite3_bind_double(localInsertStmt, 19, [[createBillRequestDic valueForKey:CHANGE_RETURN] doubleValue]);
                        sqlite3_bind_double(localInsertStmt, 20, [[createBillRequestDic valueForKey:OTHER_DISCOUNT] doubleValue]);
                        sqlite3_bind_text(localInsertStmt, 21, [[createBillRequestDic valueForKey:BUSSINESS_DATE] UTF8String],-1,SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 22, [[createBillRequestDic valueForKey:SCAN_START_TIME] UTF8String],-1,SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 23, [[createBillRequestDic valueForKey:SCAN_END_TIME] UTF8String],-1,SQLITE_TRANSIENT);
                        sqlite3_bind_text(localInsertStmt, 24, [[createBillRequestDic valueForKey:PRINT_TIME] UTF8String],-1,SQLITE_TRANSIENT);
                        sqlite3_bind_int(localInsertStmt,25,[WebServiceUtility calculateNumberOfSecondsfor:[createBillRequestDic valueForKey:SCAN_START_TIME] and:[createBillRequestDic valueForKey:SCAN_END_TIME]]);
                        sqlite3_bind_int(localInsertStmt,26,[WebServiceUtility calculateNumberOfSecondsfor:[createBillRequestDic valueForKey:SCAN_END_TIME] and:[createBillRequestDic valueForKey:PRINT_TIME]]);
                        
                        
                        sqlite3_bind_text(localInsertStmt, 27, [[createBillRequestDic valueForKey:kSerialBillId] UTF8String],-1,SQLITE_TRANSIENT);
                        if(([createBillRequestDic.allKeys containsObject:OTHER_DISCOUNT_DESC]) && (![[createBillRequestDic valueForKey:OTHER_DISCOUNT_DESC] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 28, [[createBillRequestDic valueForKey:OTHER_DISCOUNT_DESC] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 28, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:REGISTER]) && (![[createBillRequestDic valueForKey:REGISTER] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 29, [[createBillRequestDic valueForKey:REGISTER] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 29, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:kItemSpecificEmplId]) && (![[createBillRequestDic valueForKey:kItemSpecificEmplId] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 30, [[createBillRequestDic valueForKey:kItemSpecificEmplId] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 30, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:CASHIER_NAME]) && (![[createBillRequestDic valueForKey:CASHIER_NAME] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 31, [[createBillRequestDic valueForKey:CASHIER_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 31, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:SUB_TOTAL]) && (![[createBillRequestDic valueForKey:SUB_TOTAL] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 32, [NSString stringWithFormat:@"%.2f",[[createBillRequestDic valueForKey:SUB_TOTAL] floatValue]].UTF8String, -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 32, (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:CUSTOMER_GSTIN]) && (![[createBillRequestDic valueForKey:CUSTOMER_GSTIN] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 34, [[createBillRequestDic valueForKey:CUSTOMER_GSTIN] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 34, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:BILL_AMOUNT]) && (![[createBillRequestDic valueForKey:BILL_AMOUNT] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 35, [[createBillRequestDic valueForKey:BILL_AMOUNT] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 35, [[createBillRequestDic valueForKey:TOTAL_BILL_AMT] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        
                        if(([createBillRequestDic.allKeys containsObject:BILL_CANCEL_REASON]) && (![[createBillRequestDic valueForKey:BILL_CANCEL_REASON] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 36, [[createBillRequestDic valueForKey:BILL_CANCEL_REASON] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 36, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:kComments]) && (![[createBillRequestDic valueForKey:kComments] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 37, [[createBillRequestDic valueForKey:kComments] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 37, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:SALES_ORDER_ID]) && (![[createBillRequestDic valueForKey:SALES_ORDER_ID] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 38, [[createBillRequestDic valueForKey:SALES_ORDER_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 38, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:SHIPPING_CHARGES]) && (![[createBillRequestDic valueForKey:SHIPPING_CHARGES] isKindOfClass:[NSNull class]]))
                            sqlite3_bind_text(localInsertStmt, 39, [NSString stringWithFormat:@"%.2f",[[createBillRequestDic valueForKey:SHIPPING_CHARGES] floatValue]].UTF8String, -1, SQLITE_TRANSIENT);
                        else
                            sqlite3_bind_text(localInsertStmt, 39, (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);
                        
                        if(([createBillRequestDic.allKeys containsObject:IS_OFFLINE_BILL]) && (![[createBillRequestDic valueForKey:IS_OFFLINE_BILL] isKindOfClass:[NSNull class]])){
                            
                            sqlite3_bind_text(localInsertStmt, 40,  [[createBillRequestDic valueForKey:IS_OFFLINE_BILL] UTF8String], -1, SQLITE_TRANSIENT);
                        }
                        else{
                            sqlite3_bind_text(localInsertStmt, 40,  (@"1").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if (sqlite3_step(localInsertStmt)==SQLITE_DONE) {
                        }
                        else {
                        }
                        
                        //                        if(SQLITE_DONE != sqlite3_step(localInsertStmt)){
                        sqlite3_reset(localInsertStmt);
                        //                        }
                    }
                    else {
                        
                        NSLog(@"---- Error while committing into billing_table -----%s",sqlite3_errmsg(localDatabase));
                    }
                    
                    
                    localInsertStmt = nil;
                    
                    const char * sqlSelectStatement = "select bill_item_id from billing_items order by bill_item_id DESC LIMIT 1";
                    
                    NSString * item_id = @"1";
                    BOOL  itemIdExists = FALSE;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlSelectStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                            
                            item_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                            item_id = [NSString stringWithFormat:@"%d",item_id.intValue + 1];
                            itemIdExists = TRUE;
                        }
                        
                        sqlite3_reset(localSelectStmt);
                        localSelectStmt = nil;
                    }
                    
                    
                    sqlStatement = "insert into billing_items(bill_item_id, bill_id,sku_id,item_name,quantity,item_total_price,tax_code,tax_value,status,plu_code,edited_price,discount_type,discount_id,discount_price,mrpPrice,item_discount,item_discount_desc,item_scan_code,promo_item_flag,is_manufactured_item,is_packed,category,sub_category,product_range,measure_range,brand,model,item_unit_price,item_scan_flag,employee_sale_id,department,sub_department,employee_name,tax_cost,style,pattern,batch, color, size, section, hsn_code, utility,is_tax_inclusive,product_class,product_sub_class,style_range,edit_price_reason,voidItemReason,expiry_date,pack_size) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                        
                        for (NSDictionary * temp in [createBillRequestDic valueForKey:BILL_ITEMS]) {
                            
                            sqlite3_bind_int(localInsertStmt, 1, item_id.intValue);
                            sqlite3_bind_text(localInsertStmt, 2,  creationResponseStr.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 3,  [[temp valueForKey:SKU_ID] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 4,  [[temp valueForKey:ITEM_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_double(localInsertStmt, 5, [[temp valueForKey:QUANTITY] floatValue]);
                            sqlite3_bind_double(localInsertStmt, 6, [[temp valueForKey:ITEM_TOTAL_PRICE] floatValue]);
                            sqlite3_bind_text(localInsertStmt, 7,  [[temp valueForKey:TAX_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 8,  [[temp valueForKey:TAX_RATE] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 9,  [[temp valueForKey:STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                            if ([[temp valueForKey:PLU_CODE] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text(localInsertStmt, 10,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text(localInsertStmt,10,  [[temp valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            sqlite3_bind_double(localInsertStmt, 11, [[temp valueForKey:EDITED_PRICE] floatValue]);
                            sqlite3_bind_text(localInsertStmt,12,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt,13,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_double(localInsertStmt, 14, [[temp valueForKey:DISCOUNT_PRICE_3] floatValue]);
                            sqlite3_bind_double(localInsertStmt, 15, [[temp valueForKey:MRP_Price] floatValue]);
                            sqlite3_bind_double(localInsertStmt, 16, [[temp valueForKey:ITEM_DISCOUNT] floatValue]);
                            sqlite3_bind_text(localInsertStmt,17,  [[temp valueForKey:ITEM_DISCOUNT_DESC] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt,18,  [[temp valueForKey:ITEM_SCAN_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt,19,  [[temp valueForKey:PROMO_ITEM_FLAG] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_int(localInsertStmt, 20, [[temp valueForKey:kIsManuFacturedItem] boolValue]);
                            sqlite3_bind_int(localInsertStmt, 21, [[temp valueForKey:kPackagedType] boolValue]);
                            if ([temp.allKeys containsObject:kProductCategory] && ![[temp valueForKey:kProductCategory] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text(localInsertStmt,22,  [[temp valueForKey:kProductCategory] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text(localInsertStmt,22,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                
                            }
                            if ([temp.allKeys containsObject:kProductSubCategory] && ![[temp valueForKey:kProductSubCategory] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text(localInsertStmt,23,  [[temp valueForKey:kProductSubCategory] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text(localInsertStmt,23,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:kProductRange] && ![[temp valueForKey:kProductRange] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text(localInsertStmt,24,  [[temp valueForKey:kProductRange] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text(localInsertStmt,24,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:kMeasureRange] && ![[temp valueForKey:kMeasureRange] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text(localInsertStmt,25,  [[temp valueForKey:kMeasureRange] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text(localInsertStmt,25,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:kProductBrand] && ![[temp valueForKey:kProductBrand] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text(localInsertStmt,26,  [[temp valueForKey:kProductBrand] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text(localInsertStmt,26,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                                
                            }
                            if ([temp.allKeys containsObject:kProductModel] && ![[temp valueForKey:kProductModel] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text(localInsertStmt,27,  [[temp valueForKey:kProductModel] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text(localInsertStmt,27,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:ITEMUNITPRICE] && ![[temp valueForKey:ITEMUNITPRICE] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text( localInsertStmt, 28,  [[temp valueForKey:ITEMUNITPRICE] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text( localInsertStmt, 28,  (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);
                                
                            }
                            if ([temp.allKeys containsObject:ITEM_SCAN_FLAG] && ![[temp valueForKey:ITEM_SCAN_FLAG] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 29,  [[temp valueForKey:ITEM_SCAN_FLAG] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 29,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:kItemSpecificEmplId] && ![[temp valueForKey:kItemSpecificEmplId] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 30,  [[temp valueForKey:kItemSpecificEmplId] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 30,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:kItemDept] && ![[temp valueForKey:kItemDept] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 31,  [[temp valueForKey:kItemDept] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 31,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:kItemSubDept] && ![[temp valueForKey:kItemSubDept] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 32,  [[temp valueForKey:kItemSubDept] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 32,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:kItemSpecificEmplName] && ![[temp valueForKey:kItemSpecificEmplName] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 33,  [[temp valueForKey:kItemSpecificEmplName] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 33,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:TAX_COST] && ![[temp valueForKey:TAX_COST] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 34,  [[temp valueForKey:TAX_COST] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 34,  (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:STYLE] && ![[temp valueForKey:STYLE] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 35,  [[temp valueForKey:STYLE] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 35,  (@"0.00").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:PATTERN] && ![[temp valueForKey:PATTERN] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 36,  [[temp valueForKey:PATTERN] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 36,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:BATCH] && ![[temp valueForKey:BATCH] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 37,  [[temp valueForKey:BATCH] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 37,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:COLOR] && ![[temp valueForKey:COLOR] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 38,  [[temp valueForKey:COLOR] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 38,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:SIZE] && ![[temp valueForKey:SIZE] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 39,  [[temp valueForKey:SIZE] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 39,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:SECTION] && ![[temp valueForKey:SECTION] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 40,  [[temp valueForKey:SECTION] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 40,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:HSN_CODE] && ![[temp valueForKey:HSN_CODE] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 41,  [[temp valueForKey:HSN_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 41,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            if ([temp.allKeys containsObject:UTILITY] && ![[temp valueForKey:UTILITY] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 42,  [[temp valueForKey:UTILITY] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 42,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:TAX_INCLUSIVE] && ![[temp valueForKey:TAX_INCLUSIVE] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 43,  [NSString stringWithFormat:@"%i", [[temp valueForKey:TAX_INCLUSIVE] intValue]].UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 43,  (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:PRODUCT_CLASS] && ![[temp valueForKey:PRODUCT_CLASS] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 44,  [[temp valueForKey:PRODUCT_CLASS] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 44,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:PRODUCT_SUB_CLASS] && ![[temp valueForKey:PRODUCT_SUB_CLASS] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 45,  [[temp valueForKey:PRODUCT_SUB_CLASS] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 45,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:STYLE_RANGE] && ![[temp valueForKey:STYLE_RANGE] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 46,  [[temp valueForKey:STYLE_RANGE] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 46,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:EDIT_PRICE_REASON] && ![[temp valueForKey:EDIT_PRICE_REASON] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 47,  [[temp valueForKey:EDIT_PRICE_REASON] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 47,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:VOID_ITEM_REASON] && ![[temp valueForKey:VOID_ITEM_REASON] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 48,  [[temp valueForKey:VOID_ITEM_REASON] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 48,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:EXPIRY_DATE] && ![[temp valueForKey:EXPIRY_DATE] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 49,  [[temp valueForKey:EXPIRY_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 49,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if ([temp.allKeys containsObject:Pack_Size] && ![[temp valueForKey:Pack_Size] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 50,  [[temp valueForKey:Pack_Size] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 50,  (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if (sqlite3_step(localInsertStmt)==SQLITE_DONE) {
                                
                                sqlite3_reset(localInsertStmt);
                                item_id = [NSString stringWithFormat:@"%d",item_id.intValue + 1];
                            }
                            else {
                            }
                        }
                    }
                    else {
                        
                        NSLog(@"---- Error while committing into billing_items -----%s",sqlite3_errmsg(localDatabase));
                    }
                    
                    localInsertStmt = nil;
                    
                    sqlStatement = "insert into billing_item_taxes(bill_id, sku_id,plu_code,tax_category,tax_code,tax_type,tax_rate,tax_value) Values(?,?,?,?,?,?,?,?)";
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                        
                        for (NSDictionary * taxDic in [createBillRequestDic valueForKey:BILL_ITEM_TAXES]) {
                            sqlite3_bind_text(localInsertStmt, 1,  creationResponseStr.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 2,  [[taxDic valueForKey:SKU_ID] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 3,  [[taxDic valueForKey:plu_code_] UTF8String], -1, SQLITE_TRANSIENT);
                            if (![[taxDic valueForKey:TAX_CATEGORY] isKindOfClass:[NSNull class]]) {
                                sqlite3_bind_text(localInsertStmt, 4,  [[taxDic valueForKey:TAX_CATEGORY] UTF8String], -1, SQLITE_TRANSIENT);
                            }
                            else {
                                sqlite3_bind_text(localInsertStmt, 4,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            sqlite3_bind_text(localInsertStmt, 5, [[taxDic valueForKey:Tax_code] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 6,  [[taxDic valueForKey:Tax_Type] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 7,  [NSString stringWithFormat:@"%.2f",[[taxDic valueForKey:Tax_rate] floatValue]].UTF8String, -1, SQLITE_TRANSIENT);
                            
                            if(([taxDic.allKeys containsObject:Tax_value]) && (![[taxDic valueForKey:Tax_value] isKindOfClass:[NSNull class]]))
                                sqlite3_bind_text(localInsertStmt, 8,  [[taxDic valueForKey:Tax_value] UTF8String], -1, SQLITE_TRANSIENT);
                            
                            else
                                sqlite3_bind_text(localInsertStmt, 8,  (@"0.0").UTF8String, -1, SQLITE_TRANSIENT);
                            
                            if (sqlite3_step(localInsertStmt)==SQLITE_DONE) {
                                
                            }
                            else {
                                
                            }
                            
                            //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                            sqlite3_reset(localInsertStmt);
                        }
                    }
                    else {
                        
                        NSLog(@"---- Error while committing into billing_item_taxes -----%s",sqlite3_errmsg(localDatabase));
                    }
                    
                    
                    localInsertStmt = nil;
                    
                    sqlStatement = "insert into billing_taxes(bill_id, tax_id,tax_name,tax_price,bill_date,remarks,transaction_id,updated_date) Values(?,?,?,?,?,?,?,?)";
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                        
                        for (NSDictionary * taxDic in [createBillRequestDic valueForKey:BILL_TAXES]) {
                            sqlite3_bind_text(localInsertStmt, 1,  creationResponseStr.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 2,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 3,  [[taxDic valueForKey:TAX_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_double(localInsertStmt, 4, [[taxDic valueForKey:TAX_AMOUNT] doubleValue]);
                            sqlite3_bind_text(localInsertStmt, 5, [[taxDic valueForKey:BILLING_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 6,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 7,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 8,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            
                            if (sqlite3_step(localInsertStmt)==SQLITE_DONE) {
                                
                            }
                            else {
                                
                            }
                            
                            //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                            sqlite3_reset(localInsertStmt);
                        }
                    }
                    else {
                        
                        NSLog(@"---- Error while committing into billing_taxes -----%s",sqlite3_errmsg(localDatabase));
                    }
                    
                    
                    
                    localInsertStmt = nil;
                    
                    sqlStatement = "insert into billing_discounts(s_no, discount_type,bill_id,discount_id,item_name,sku_id,plu_code,discount_value,item_price,date,remarks) Values(?,?,?,?,?,?,?,?,?,?,?)";
                    
                    
                    
                    sqlSelectStatement = "select s_no from billing_discounts order by s_no DESC LIMIT 1";
                    
                    item_id = @"1";
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlSelectStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                            
                            item_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                            item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                        }
                        sqlite3_reset(localSelectStmt);
                        localSelectStmt = nil;
                    }
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                        
                        
                        for (NSDictionary * temp in [createBillRequestDic valueForKey:kItemCampigns]) {
                            
                            
                            sqlite3_bind_int(localInsertStmt, 1, item_id.intValue);
                            sqlite3_bind_text(localInsertStmt, 2,  [[temp valueForKey:@"discountType"] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 3,  creationResponseStr.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 4,  [[temp valueForKey:@"discountId"] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 5,  [[temp valueForKey:@"itemName"] UTF8String], -1, SQLITE_TRANSIENT);
                            
                            sqlite3_bind_text(localInsertStmt, 6,  [[temp valueForKey:@"skuId"] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 7,  [[temp valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_double(localInsertStmt, 8, [[temp valueForKey:@"discountPrice"] floatValue]);
                            sqlite3_bind_double(localInsertStmt, 9, [[temp valueForKey:@"itemPrice"] floatValue]);
                            
                            sqlite3_bind_text(localInsertStmt, 10,  [WebServiceUtility getCurrentDate].UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 11,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            
                            
                            if (sqlite3_step(localInsertStmt)==SQLITE_DONE) {
                                
                                sqlite3_reset(localInsertStmt);
                                item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                            }
                            else {
                                NSLog(@"%s",sqlite3_errmsg(localDatabase));
                            }
                        }
                    }
                    else {
                        
                        NSLog(@"---- Error while committing into billing_discounts -----%s",sqlite3_errmsg(localDatabase));
                    }
                    
                    
                    localInsertStmt = nil;
                    
                    sqlStatement = "insert into billing_transactions(bill_id, mode_of_payment,transaction_id,card_type,card_subtype,card_no,paid_amount,date_and_time,card_info,approval_code,bank_name,change_return,received_amt,tender_Mode,tender_key,transaction_type) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    int transactionID = 1;
                    NSString * denomTransStr = @"";
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                        
                        
                        for (NSDictionary * dic in [createBillRequestDic valueForKey:BILLING_TRANSACTIONS]) {
                            
                            NSDate *date = [NSDate date];
                            NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
                            dateFormat.dateFormat = @"yy:MM:dd HH:mm:ss.sss";
                            NSString * currentdate = [dateFormat stringFromDate:date];
                            NSString * today = [NSString stringWithFormat:@"%@%@",[[currentdate componentsSeparatedByString:@" "][0] stringByReplacingOccurrencesOfString:@":" withString:@""],[[currentdate componentsSeparatedByString:@" "][1] stringByReplacingOccurrencesOfString:@":" withString:@""]];
                            
                            today = [NSString stringWithFormat:@"%@%d",[today stringByReplacingOccurrencesOfString:@"." withString:@""],transactionID];
                            
                            
                            NSString * trasactionId = [NSString stringWithFormat:@"%@%@",@"TX",today];
                            
                            //                            if(![typeStr isEqualToString:CASH_RETURNS])
                            trasactionId = [NSString stringWithFormat:@"%@%@%ld",creationResponseStr,@"_P",(transactionID + [[self checkGivenValueIsNullOrNil:[dic valueForKey:EXISTING_TRANSACTIONS] defaultReturn:@"0"] integerValue])];
                            
                            if([[dic valueForKey:MODE_OF_PAY] localizedCaseInsensitiveCompare:cash] == NSOrderedSame)
                                denomTransStr = [trasactionId copy];
                            
                            sqlite3_bind_text(localInsertStmt, 1,  creationResponseStr.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 2,  [[dic valueForKey:MODE_OF_PAY] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 3,  trasactionId.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 4,  [[dic valueForKey:CARD_TYPE] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 5,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 6,  [[dic valueForKey:COUPON_NO] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 7,  [[dic valueForKey:PAID_AMT] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 8,  [[dic valueForKey:DATE] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 9,  [[dic valueForKey:CARD_INFO] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 10,  [[dic valueForKey:APPROVAL_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 11,  [[dic valueForKey:BANK_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_double(localInsertStmt, 12, [[dic valueForKey:CHANGE_RETURN] doubleValue]);
                            sqlite3_bind_double(localInsertStmt, 13, [[dic valueForKey:RECEIVED_AMOUNT] doubleValue]);
                            
                            NSString * tenderModeStr = [self checkGivenValueIsNullOrNil:[dic valueForKey:TENDER_MODE] defaultReturn:@""];
                            int  tenderKey = [[self checkGivenValueIsNullOrNil:[dic valueForKey:TENDER_KEY] defaultReturn:@"0"] intValue];
                            
                            sqlite3_bind_text(localInsertStmt, 14,  tenderModeStr.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_int(localInsertStmt, 15, tenderKey);
                            
                            if ([dic.allKeys containsObject:TRANSACTION_TYPE_FLAG] && ![[dic valueForKey:TRANSACTION_TYPE_FLAG] isKindOfClass:[NSNull class]]) {
                                
                                sqlite3_bind_text( localInsertStmt, 16,  [NSString stringWithFormat:@"%li", [[dic valueForKey:TRANSACTION_TYPE_FLAG] longValue]].UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            else {
                                
                                sqlite3_bind_text( localInsertStmt, 16,  (@"0").UTF8String, -1, SQLITE_TRANSIENT);
                            }
                            
                            if (sqlite3_step(localInsertStmt)==SQLITE_DONE) {
                                
                                sqlite3_reset(localInsertStmt);
                                transactionID = transactionID + 1;
                            }
                            else {
                                NSLog(@"%s",sqlite3_errmsg(localDatabase));
                            }
                        }
                    }
                    else {
                        
                        NSLog(@"---- Error while committing into billing_transactions -----%s",sqlite3_errmsg(localDatabase));
                    }
                    
                    localInsertStmt = nil;
                    
                    sqlStatement = "insert into billing_denomination(bill_id, cash_denomination,paid_denom_no,paid_amount,return_denom_no,return_amount,date,transaction_id) Values(?,?,?,?,?,?,?,?)";
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                        
                        for (NSDictionary * temp in [createBillRequestDic valueForKey:DENOMINATION]) {
                            
                            sqlite3_bind_text(localInsertStmt, 1,  creationResponseStr.UTF8String, -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 2,  [[temp valueForKey:DENOMINATION_WITH_OUT_S] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 3,  [[temp valueForKey:PAID_DENOMINATION_NO] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 4,  [[temp valueForKey:PAID_AMT] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 5,  [[temp valueForKey:RETURN_DENOMINATION_NO] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 6,  [[temp valueForKey:RETURN_AMT] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 7,  [[temp valueForKey:BILL_DATE] UTF8String], -1, SQLITE_TRANSIENT);
                            sqlite3_bind_text(localInsertStmt, 8,  denomTransStr.UTF8String, -1, SQLITE_TRANSIENT);
                            
                            if (sqlite3_step(localInsertStmt)==SQLITE_DONE) {
                                
                            }
                            else {
                                NSLog(@"%s",sqliteErr);
                                
                                NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                            }
                            
                            sqlite3_reset(localInsertStmt);
                        }
                    }
                    else {
                        
                        NSLog(@"---- Error while committing into billing_denomination -----%s",sqlite3_errmsg(localDatabase));
                    }
                    
                    
                    
                    //                    // added by roja on 10/05/2019..
                    //
                    //                    for (NSDictionary * temp in [createBillRequestDic valueForKey:@"billingTransactions"]) {
                    //
                    //                        if([[temp valueForKey:@"cardType"] isEqualToString:@"Loyalty Points"]){
                    //                            localInsertStmt = nil;
                    //
                    //                              sqlStatement = "insert into customer_loyalty_cards(points_used, points_remaining, cash, paid_amount,return_denom_no,return_amount,date,transaction_id) Values(?,?,?,?,?,?,?,?)";
                    //
                    //                            points_earned          INT (11)      DEFAULT '0',
                    //                            points_used            INT (11)      DEFAULT '0',
                    //                            points_remaining       INT (11)      DEFAULT '0',
                    //                            cash
                    //
                    //
                    //
                    //                        }
                    //                    }
                    //
                    
                    // upto here added by roja on 10/05/2019....
                    
                    
                    
                    sqlite3_exec(localDatabase, "END TRANSACTION", NULL, NULL, &sqliteErr);
                    //                    if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &sqliteErr)==SQLITE_OK)
                    //                    {
                    //
                    //                        NSLog(@"----Committed -- PRODUCT_MASTER ----");
                    //                    }
                    //                    else
                    //                    {
                    //
                    //                        NSLog(@"----Commit -- Failed -- PRODUCT_MASTER ----");
                    //                    }
                    sqlite3_finalize(localInsertStmt);
                    localInsertStmt = nil;
                }
                else{
                    
                    creationResponseStr = @"";
                }
            }
            else{
                
                creationResponseStr = @"";
            }
        }
    } @catch (NSException *exception) {
        
        creationResponseStr = @"";
    } @finally {
        
        if(localDatabase != nil)
            sqlite3_close(localDatabase);
        return creationResponseStr;
    }
}

/**
 * @description  here are we are cerating the  technolabsBillId..
 * @date         04/10/2018
 * @method       generateTechnolabsBillId
 * @author       Srinivasulu
 * @param
 * @param
 *
 * @return       NSString
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)generateTechnolabsBillId{
    NSString * billIdStr = @"";
    
    @try {
        
        NSDate * date = [NSDate date];
        NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
        dateFormat.dateFormat = @"yy:MM:dd HH:mm:ss.sss";
        NSString * currentDateStr = [dateFormat stringFromDate:date];
        NSString * todayDateStr = [NSString stringWithFormat:@"%@%@",[[currentDateStr componentsSeparatedByString:@" "][0] stringByReplacingOccurrencesOfString:@":" withString:@""],[[currentDateStr componentsSeparatedByString:@" "][1] stringByReplacingOccurrencesOfString:@":" withString:@""]];
        todayDateStr = [NSString stringWithFormat:@"%@",[todayDateStr stringByReplacingOccurrencesOfString:@"." withString:@""]];
        
        billIdStr = [NSString stringWithFormat:@"%@%@",@"BL",todayDateStr];
    } @catch (NSException *exception) {
        
        billIdStr = @"";
    } @finally {
        
        return billIdStr;
    }
}

/**
 * @description  here are we are validating the billing information..
 * @date
 * @method       validateBillDetails:--
 * @author
 * @param        NSDictionary
 * @param
 *
 * @return       NSString
 *
 * @modified By Srinivasulu on 04/10/2018....
 * @reason      added commit and did have idea how created this may it myself also....
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)validateBillDetails:(NSDictionary *)billingDetailsDic{
    
    NSString * billDefeatStr = @"";
    
    @try {
        //        if((!(([[billingDetailsDic allKeys] containsObject:BILL_ITEMS]) && ([[billingDetailsDic valueForKey:BILL_ITEMS] count] > 0))) || ([[billingDetailsDic valueForKey:BILL_ITEMS] isKindOfClass:[NSNull class]])){
        
        if(!(([billingDetailsDic.allKeys containsObject:BILL_ITEMS]) && ([[billingDetailsDic valueForKey:BILL_ITEMS] count] > 0))){
            
            billDefeatStr = @"error";
        }
        else if(!(([billingDetailsDic.allKeys containsObject:COUNTER]) && ([[billingDetailsDic valueForKey:COUNTER] length])) ){
            
            billDefeatStr = @"error";
        }
        else if(!(([billingDetailsDic.allKeys containsObject:STORE_LOCATION]) && ([[billingDetailsDic valueForKey:STORE_LOCATION] length])) ){
            
            billDefeatStr = @"error";
        }
        else if(!(([billingDetailsDic.allKeys containsObject:SCAN_START_TIME]) && ([[billingDetailsDic valueForKey:SCAN_START_TIME]  length])) ){
            
            billDefeatStr = @"error";
        }
        else if(!(([billingDetailsDic.allKeys containsObject:SCAN_END_TIME]) && ([[billingDetailsDic valueForKey:SCAN_END_TIME]  length])) ){
            
            billDefeatStr = @"error";
        }
        else if(!(([billingDetailsDic.allKeys containsObject:PRINT_TIME]) && ([[billingDetailsDic valueForKey:PRINT_TIME]  length])) ){
            
            billDefeatStr = @"error";
        }
        else if(!(([billingDetailsDic.allKeys containsObject:CUSTOMER_STATUS]) && ([[billingDetailsDic valueForKey:CUSTOMER_STATUS]  length])) ){
            
            billDefeatStr = @"error";
        }
        else if(!(([billingDetailsDic.allKeys containsObject:BUSSINESS_DATE]) && ([[billingDetailsDic valueForKey:BUSSINESS_DATE]  length])) ){
            
            billDefeatStr = @"error";
        }
        else if(([[[billingDetailsDic valueForKey:CUSTOMER_STATUS] lowercaseString] containsString:COMPLETED])){
            //Completed
            if(!(([billingDetailsDic.allKeys containsObject:BILLING_TRANSACTIONS]) && ([[billingDetailsDic valueForKey:BILLING_TRANSACTIONS] count] > 0)) ){
                
                billDefeatStr = @"error";
            }
            else{
                float billAmount = [[billingDetailsDic valueForKey:TOTAL_BILL_AMT] floatValue];
                float paidAmount = 0;
                for(NSDictionary * dic in [billingDetailsDic valueForKey:BILLING_TRANSACTIONS]){
                    
                    paidAmount = paidAmount + [[dic valueForKey:PAID_AMT] floatValue];
                }
                
                if(billAmount <= paidAmount){
                    
                    billDefeatStr = @"error";
                }
            }
        }
    } @catch (NSException *exception) {
        
        billDefeatStr = @"";
    } @finally {
        
        return billDefeatStr;
    }
}

-(void)createBillingRelatedTablesInOffline{
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    static sqlite3 * localDatabase = nil;
    
    @try {
        
        char * errMsg;
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            const char * sqlStatement = "create table if not exists billing_table (bill_id text, date_and_time text, cashier_id text,counter_ID text,Total_discount text,discount_type text,discount_type_id text,tax text,total_price text,due_amount text,status text,email_id text,phone_number text,store_location text,customer_name text,shift_id text,save_status text,print_count int,change_return double,other_discount double,business_cycle_date text,scan_start_time text,scan_end_time text,print_time text,bill_time_duration int,bill_time_duration_accept_print int,serial_billId text,other_discount_desc text,register text,employee_sale_id text,cashier_name text,sub_total text,last_updated_date text,customer_gstin text,bill_amount text,billCancelReason text,comments text,sales_order_id text,shipping_charges text,is_offline_bill text,  PRIMARY KEY (bill_id))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- BILLING_TABLE Table Created Sucessfully ----");
            }
            
            sqlStatement = "create table if not exists billing_items (bill_item_id int, bill_id text, sku_id text,item_name text,quantity float,item_total_price double,tax_code text,tax_value text,status text,plu_code text, edited_price double, discount_type text, discount_id text, discount_price double,mrpPrice double, item_discount double, item_discount_desc text,item_scan_code text,promo_item_flag text,is_manufactured_item int,is_packed int,category text,sub_category text,product_range text,measure_range text,brand text,model text,item_unit_price text,item_scan_flag text,employee_sale_id text, department text, sub_department text, employee_name text, tax_cost text, style text, pattern text, batch text, color text, size text, section text, hsn_code text, utility text,is_tax_inclusive text,product_class text,product_sub_class text,style_range text,edit_price_reason text,voidItemReason text,expiry_date text,pack_size text, PRIMARY KEY (bill_item_id))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- BILLING_ITEMS Table Created Sucessfully ----");
            }
            
            sqlStatement = "create table if not exists billing_transactions (bill_id text,mode_of_payment text,transaction_id text,card_type text,card_subtype text,card_no text,paid_amount text,date_and_time text,card_info text,approval_code text,bank_name text,change_return double,received_amt double,tender_Mode text,tender_key INT,transaction_type text, PRIMARY KEY (transaction_id))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- BILLING_TRANSACTIONS Table Created Sucessfully ----");
            }
            
            sqlStatement = "create table if not exists billing_item_taxes (bill_id text, sku_id text, plu_code text,tax_category text,tax_code text,tax_type text,tax_rate text,tax_value text)";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- BILLING_ITEMS_TAXES Table Created Sucessfully ----");
            }
            
            
            sqlStatement = "create table if not exists billing_taxes (bill_id text, tax_id text, tax_name text,tax_price double,bill_date text,remarks text,transaction_id text,updated_date text)";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- BILLING_TAXES Table Created Sucessfully ----");
            }
            
            sqlStatement = "create table if not exists billing_discounts (s_no INT (10)  NOT NULL,discount_type  VARCHAR (100),bill_id        VARCHAR (100) NOT NULL DEFAULT '0',discount_id VARCHAR (100) DEFAULT '0',item_name VARCHAR (100) DEFAULT '0',sku_id CHAR (50)   DEFAULT '0',plu_code  CHAR (50) DEFAULT '0',discount_value FLOAT DEFAULT '0',item_price FLOAT  DEFAULT '0',date text DEFAULT NULL,remarks  VARCHAR (250) DEFAULT '0',PRIMARY KEY (s_no))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- BILLING_DISCOUNT Table Created Sucessfully ----");
            }
            
            sqlStatement = "create table if not exists billing_denomination (bill_id text,cash_denomination text,paid_denom_no text,paid_amount text,return_denom_no text,return_amount text,date text,transaction_id text)";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- BILLING_DENOMINATION Table Created Sucessfully ----");
            }
            
            sqlStatement = "CREATE TABLE IF NOT EXISTS `billing_return_note` (  `credit_note_no` VARCHAR(50) NOT NULL,  `bill_id` CHAR(20) NOT NULL,  `customer_mobile` VARCHAR(15) NULL DEFAULT NULL,  `credit_amount` FLOAT NULL DEFAULT NULL,  `credit_remarks` VARCHAR(50) NULL DEFAULT NULL,  `date` DATETIME NULL DEFAULT NULL,  `status` TINYINT(2) NULL DEFAULT '0',  `store_location` VARCHAR(100) NULL DEFAULT '',  `counter_id` VARCHAR(100) NULL DEFAULT '',  `customer_id` VARCHAR(100) NULL DEFAULT '',  `bal_amt` FLOAT NULL DEFAULT '0',  `expiry_date` DATETIME NULL DEFAULT NULL,  `row_created_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,  `row_updated_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,  PRIMARY KEY (`credit_note_no`))";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- BILLING_RETURN_NOTE Table Created Sucessfully ----");
            }
            
            sqlStatement = "create table if not exists return_items (s_no int, bill_id text, sku_id text,item_name text,quantity float,price double,cost double,date_and_time text,counter_id text,reason text,status text, tax_code text, tax_value double, plu_code text)";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- RETURN_ITEMS Table Created Sucessfully ----");
            }
            
            sqlStatement = "create table if not exists exchange_items (s_no int, bill_id text, sku_id text,item_name text,quantity float,price double,cost double,date_and_time text,counter_id text,reason text,exchanged_bill_id text,status text,tax_code text, tax_value double, plu_code text)";
            
            if (sqlite3_exec(localDatabase, sqlStatement, NULL, NULL, &errMsg) == SQLITE_OK) {
                NSLog(@"---- EXCHANGE_ITEMS Table Created Sucessfully ----");
            }
            
            
            
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
        if(localDatabase != nil)
            sqlite3_close(localDatabase);
    }
}

#pragma -mark End of Methods Operated on Billing Tables in Offline..

-(void)intializeTheValues {
    offerList = [NSMutableArray new];
    dealsList = [NSMutableArray new];
    
    itemsSkuIdList = [NSMutableArray new];;
    itemsPluCodeList = [NSMutableArray new];;
    itemsUnitPriceList = [NSMutableArray new];;
    itemsIndividualQtyList = [NSMutableArray new];;
    itemsTotalPriceList = [NSMutableArray new];;
    itemsStatusList = [NSMutableArray new];;
    itemsOptionalDiscountList = [NSMutableArray new];;
    
    mFreeQtyArrayList = [NSMutableArray new];
    mProductDealQty = [NSMutableArray new];
    freeItemLists = [NSMutableArray new];
    freeItemQtyLists = [NSMutableArray new];
    dealDiscount = [NSMutableArray new];
    mProductDealDescription = [NSMutableArray new];
    mAllowMultipleDiscounts = [NSMutableArray new];
    repeatArrayList = [NSMutableArray new];
    appliedDealIdList = [NSMutableArray new];
    isDealApplied = [NSMutableArray new];
    discountTypeArrayList = [NSMutableArray new];
    discountIdArrayList = [NSMutableArray new];
    mProductOfferPrice = [NSMutableArray new];
    dealSkuListAll = [NSMutableArray new];
    mProductOfferDescription = [NSMutableArray new];
    mProductOfferType = [NSMutableArray new];
    availableOffers = [NSMutableArray new];
    appliedOfferIdsArr = [NSMutableArray new];
    
    comboOffersList = [NSMutableArray new];
    lowestPriceItemOfferList = [NSMutableArray new];
    individualItemIndexesInCombo = [NSMutableArray new];
    dealSkuListAll = [NSMutableArray new];
    appliedOffers = [NSMutableArray new];
    applyDealsAndOfferResponse = [NSMutableDictionary new];
    turnOverOffersList = [NSMutableArray new];
    
    turnOverDeals = [NSMutableDictionary new];
    turnOverOffers = [NSMutableDictionary new];
    
    //added by Srinivasulu on 08/09/2017....
    
    priceBasedOffersList = [NSMutableArray new];
    groupTurnOverOffersList = [NSMutableArray new];
    
    //upto here on 08/09/2017....
    
}

static NSString * extracted() {
    return COLOR;
}



// Commented by roja on 17/10/2019.. // reason :- getTaxes method contains SOAP Service call .. so taken new method with same name(getTaxes) method name which contains REST service call....
// At the time of converting SOAP call's to REST

//-(BOOL)getTaxes {
//
//    BOOL status = false;
//    UtilityMasterServiceSoapBinding *skuService = [UtilityMasterServiceSvc UtilityMasterServiceSoapBinding];
//
//    UtilityMasterServiceSvc_getTaxes *getSkuid = [[UtilityMasterServiceSvc_getTaxes alloc] init];
//
//
//    NSArray *keys = @[@"requestHeader",@"startIndex",@"store_location"];
//    NSArray *objects = @[[RequestHeader getRequestHeader],@"-1",presentLocation];
//
//    NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
//
//    NSError * err;
//    NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
//    NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//    getSkuid.userId = salesReportJsonString;
//    @try {
//
//        UtilityMasterServiceSoapBindingResponse *response = [skuService getTaxesUsingParameters:getSkuid];
//        if (![response.error isKindOfClass:[NSError class]]) {
//
//            NSArray *responseBodyParts = response.bodyParts;
//            for (id bodyPart in responseBodyParts) {
//                if ([bodyPart isKindOfClass:[UtilityMasterServiceSvc_getTaxesResponse class]]) {
//                    UtilityMasterServiceSvc_getTaxesResponse *body = (UtilityMasterServiceSvc_getTaxesResponse *)bodyPart;
//                    // printf("\nresponse=%s",[body.return_ UTF8String]);
//                    NSError *e;
//                    NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
//                                                                         options: NSJSONReadingMutableContainers
//                                                                           error: &e];
//                    if ([[[JSON valueForKey:@"responseHeader"] valueForKey:@"responseCode"] intValue]==0) {
//
//                        NSArray *tax_list = [JSON valueForKey:@"taxDetails"];
//
//
//                        status =  [self saveTaxes:tax_list];
//
//
//                    }
//                }
//                else{
//                    status = FALSE;
//                    // [HUD setHidden:YES];
//                    //                    UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stocks Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                    //                    [alert show];
//                    //                    [alert release];
//                }
//            }
//        }
//
//    }
//    @catch (NSException *exception) {
//
//    }
//    return status;
//}


//getTaxes method changed by roja on 17/10/2019.. // reason : removed SOAP service call related code and  added REST service call code...
// At the time of converting SOAP call's to REST
-(BOOL)getTaxes {
    
    BOOL status = false;
    
    NSArray *keys = @[@"requestHeader",@"startIndex",@"store_location"];
    NSArray *objects = @[[RequestHeader getRequestHeader],@"-1",presentLocation];
    NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
    
    NSError * err;
    NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
    NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
    
    WebServiceController * services  =  [[WebServiceController alloc] init];
    services.utilityMasterDelegate = self;
    status = [services getTaxes:salesReportJsonString];
    
    return status;
}

// added by Roja on 17/10/2019…. // Old code only written here....
- (BOOL)getTaxesSuccessResponse:(NSDictionary *)successDictionary{
    
    BOOL status = false;

    @try {
        NSArray *tax_list = [successDictionary valueForKey:@"taxDetails"];
        status =  [self saveTaxes:tax_list];

    } @catch (NSException *exception) {
        
    } @finally {

    }
    return status;
}

// added by Roja on 17/10/2019…. // Old code only written here....
- (BOOL)getTaxesErrorResponse:(NSString *)errorResponse{
    
    BOOL status = false;
    
    @try {
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    return status;

}


-(BOOL)saveTaxes:(NSArray *)taxArr {
    BOOL isSaved = FALSE;
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
        //
        //            if (deleteStmt == nil) {
        //                const char *sqlStatement = "drop table tax_master";
        //
        //                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
        //
        //                    if(SQLITE_DONE != sqlite3_step(deleteStmt))
        //                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
        //
        //                    sqlite3_reset(deleteStmt);
        //                }
        //
        //            }
        //
        //        }
        //        deleteStmt = nil;
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                char *errMsg;
                const char *sqlStatement = "create table if not exists tax_master (tax_name text, tax_rate text, tax_description text,tax_id text, tax_category text, tax_type text)";
                
                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                    == SQLITE_OK) {
                    
                    NSLog(@"Success");
                    
                }
                
            }
            
        }
        
        // NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
        
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                const char *sqlStatement = "delete from tax_master";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt))
                        NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    
                    sqlite3_reset(deleteStmt);
                }
                
            }
            
        }
        deleteStmt = nil;
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                const char *sqlStatement = "insert into tax_master(tax_name, tax_rate,tax_description,tax_id,tax_category,tax_type) Values(?,?,?,?,?,?)";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    for (int i=0; i<taxArr.count; i++) {
                        
                        if (![[taxArr[i] valueForKey:@"taxName"] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text(insertStmt, 1, [[taxArr[i] valueForKey:@"taxName"] UTF8String], -1, SQLITE_TRANSIENT);
                            
                        }
                        else {
                            sqlite3_bind_text(insertStmt, 1, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if (![[taxArr[i] valueForKey:@"taxRate"] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text(insertStmt, 2,  [[taxArr[i] valueForKey:@"taxRate"] stringValue].UTF8String, -1, SQLITE_TRANSIENT);
                            
                        }
                        else {
                            sqlite3_bind_text(insertStmt, 2, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        
                        if (![[taxArr[i] valueForKey:@"taxDescription"] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text(insertStmt, 3, [[taxArr[i] valueForKey:@"taxDescription"] UTF8String], -1, SQLITE_TRANSIENT);
                            
                        }
                        else {
                            sqlite3_bind_text(insertStmt, 3, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if (![[taxArr[i] valueForKey:@"taxCode"] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text(insertStmt, 4, [[taxArr[i] valueForKey:@"taxCode"] stringValue].UTF8String, -1, SQLITE_TRANSIENT);
                            
                        }
                        else {
                            sqlite3_bind_text(insertStmt, 4, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        if (![[taxArr[i] valueForKey:@"taxCategoryName"] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text(insertStmt, 5, [[taxArr[i] valueForKey:@"taxCategoryName"]  UTF8String], -1, SQLITE_TRANSIENT);
                            
                        }
                        else {
                            sqlite3_bind_text(insertStmt, 5, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        if (![[taxArr[i] valueForKey:@"taxType"] isKindOfClass:[NSNull class]]) {
                            
                            sqlite3_bind_text(insertStmt, 6, [[taxArr[i] valueForKey:@"taxType"]  UTF8String], -1, SQLITE_TRANSIENT);
                            
                        }
                        else {
                            sqlite3_bind_text(insertStmt, 6, (@"").UTF8String, -1, SQLITE_TRANSIENT);
                        }
                        
                        
                        //  sqlite3_bind_int(insertStmt, 1, [ipTxt.text intValue]);
                        
                        //sqlite3_bind_int(insertStmt, 2, [portTxt.text intValue]);
                        
                        if(SQLITE_DONE != sqlite3_step(insertStmt)){
                            isSaved = FALSE;
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                            
                        }
                        else {
                            isSaved = TRUE;
                        }
                        
                        sqlite3_reset(insertStmt);
                        
                    }
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database));
                }
            }
            insertStmt = nil;
        }
        
        
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        
    }
    @finally {
        
        selectStmt = nil;
        sqlite3_close(database);
    }
    
    return isSaved;
}


#pragma mark start groups related downloading and retriving methods....


-(NSDictionary *)applyDealsAndOffers:(NSString *)skuid qty:(NSString *)quantity total:(NSString *)total itemPrice:(NSString *)item_price {
    
    NSMutableArray *dealsList = [[NSMutableArray alloc] init];
    NSMutableArray *offerList = [[NSMutableArray alloc]init];
    NSDictionary *result;
    
    @try {
        int weekDayNumber = [WebServiceUtility getTodayWeekDayNumber];
        BOOL dealOrOfferApplicationStatus = FALSE;
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        NSDate *today = [NSDate date];
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        formatter.dateFormat = @"yyyy/MM/dd HH:mm:ss";
        NSString* currentdate = [formatter stringFromDate:today];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            
            NSString *select_deals_qry = [NSString stringWithFormat:@"select * from deals where deal_status= '1' and deal_category LIKE '%%turn%%' and store_location LIKE '%%%@%%'",presentLocation];
            
            const char *select_tuenOverDeals = select_deals_qry.UTF8String ;
            
            NSString  *deal_id = @"" ;
            NSString  *claim_coupons;
            NSString  *claim_giftvouchers;
            NSString  *claim_loyalty;
            NSString  *dealCategory;
            NSString  *desc;
            NSString  *sellSkus;
            NSString  *dealSkus;
            NSString  *dealName;
            NSString  *sellProducts;
            
            NSMutableArray *turnDealsGroupArr = [NSMutableArray new];
            if(sqlite3_prepare_v2(database, select_tuenOverDeals, -1, &selectStmt, NULL) == SQLITE_OK) {
                dealsDic = [[NSMutableDictionary alloc]init];
                //                int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    NSString *startDate = @((char *)sqlite3_column_text(selectStmt, 14));
                    
                    NSString *endDate = @((char *)sqlite3_column_text(selectStmt, 8));
                    
                    if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                        
                        deal_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        claim_coupons = @((char *)sqlite3_column_text(selectStmt, 1));
                        claim_giftvouchers = @((char *)sqlite3_column_text(selectStmt, 3));
                        claim_loyalty = @((char *)sqlite3_column_text(selectStmt, 2));
                        NSString * dealGroupId = @((char *)sqlite3_column_text(selectStmt, 32));
                        dealCategory = @((char *)sqlite3_column_text(selectStmt, 4));
                        desc = @((char *)sqlite3_column_text(selectStmt, 5));
                        sellSkus = @((char *)sqlite3_column_text(selectStmt, 12));
                        dealSkus = @((char *)sqlite3_column_text(selectStmt, 10));
                        dealName = @((char *)sqlite3_column_text(selectStmt, 6));
                        sellProducts = @((char *)sqlite3_column_text(selectStmt, 13));
                        int weekDayStatus = 0;
                        if (weekDayNumber == 1) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 22);
                        }
                        else if (weekDayNumber == 2) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 23);
                        }
                        else if (weekDayNumber == 3) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 24);
                        }
                        else if (weekDayNumber == 4) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 25);
                        }
                        else if (weekDayNumber == 5) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 26);
                        }
                        else if (weekDayNumber == 6) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 27);
                        }
                        else if (weekDayNumber == 7) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 28);
                        }
                        if (weekDayStatus == 1) {
                            NSString *dealStartTime = @((char *)sqlite3_column_text(selectStmt, 29));
                            NSString *dealEndTime = @((char *)sqlite3_column_text(selectStmt, 30));
                            
                            dealOrOfferApplicationStatus = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                        }
                        if (dealGroupId.length > 0) {
                            [turnDealsGroupArr addObject:dealGroupId];
                            
                        }
                        
                    }
                    
                }
                
                sqlite3_finalize(selectStmt);
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            for (NSString *dealGroupId in turnDealsGroupArr) {
                NSString *getGroupsQry = [NSString stringWithFormat:@"select * from groups_child where group_id = '%@'",dealGroupId];
                
                const char *selectGroupQry = getGroupsQry.UTF8String ;
                
                if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                    offersDic = [[NSMutableDictionary alloc]init];
                    //                int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        NSString *skuID = @((char *)sqlite3_column_text(selectStmt, 1));
                        dealSkus = [NSString stringWithFormat:@"%@%@%@",dealSkus,skuID,@","];
                    }
                }
                
            }
            if (dealOrOfferApplicationStatus) {
                NSString *select_deals_ranges = [NSString stringWithFormat:@"select * from deals_ranges where deal_id= '%@' order by minimum_purchase_amount",deal_id];
                
                const char *select_tuenOverDealsRange = select_deals_ranges.UTF8String ;
                
                if(sqlite3_prepare_v2(database, select_tuenOverDealsRange, -1, &selectStmt, NULL) == SQLITE_OK) {
                    NSMutableArray *rangesArr = [[NSMutableArray alloc] init];
                    //                int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSString  *minimum_purchase_amt = @((char *)sqlite3_column_text(selectStmt, 3));
                        if (total.floatValue>= minimum_purchase_amt.floatValue) {
                            
                            NSString  *deal_id = @((char *)sqlite3_column_text(selectStmt, 0));
                            
                            NSString  *deal_qty = @((char *)sqlite3_column_text(selectStmt, 1));
                            NSString  *min_pur_qty = @((char *)sqlite3_column_text(selectStmt, 2));
                            NSString  *range = @((char *)sqlite3_column_text(selectStmt, 4));
                            NSString  *description = @((char *)sqlite3_column_text(selectStmt, 5));
                            
                            NSDictionary *rangeDic = @{@"dealId": deal_id,@"dealQuantity": deal_qty,@"minimumPurchaseQuantity_float": min_pur_qty,@"range": range,@"description": description};
                            [rangesArr addObject:rangeDic];
                            
                            NSArray *objects = @[deal_id,claim_coupons,claim_giftvouchers,claim_loyalty,dealCategory,desc,sellSkus,dealSkus,dealName,sellProducts];
                            NSArray *keys = @[@"dealId",@"claim_coupons",@"claim_giftvouchers",@"claim_loyalty",@"dealCategory",@"description",@"sellSkus",@"dealSkus",@"dealName",@"sellProducts"];
                            
                            dealsDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
                            
                        }
                        
                        
                        
                    }
                    
                    sqlite3_finalize(selectStmt);
                    
                    if (rangesArr.count>0) {
                        
                        dealsDic[@"rangeList"] = rangesArr;
                        
                    }
                    
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                    
                }
                if (dealsDic.count!=0) {
                    
                    [dealsList addObject:dealsDic];
                    
                }
                
            }
            
            //get item_specific deals....
            
            NSString *select_deals_qry1 = [NSString stringWithFormat:@"select * from deals where deal_status= '1' and deal_category LIKE '%%item%%' and store_location LIKE '%%%@%%' and sell_sku_ids LIKE '%%%@%%'",presentLocation,skuid];
            
            const char *select_itemSpecDeals = select_deals_qry1.UTF8String ;
            
            NSString  *deal_id1 =@"";
            
            if(sqlite3_prepare_v2(database, select_itemSpecDeals, -1, &selectStmt, NULL) == SQLITE_OK) {
                //                int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSString *startDate = @((char *)sqlite3_column_text(selectStmt, 14));
                    
                    NSString *endDate = @((char *)sqlite3_column_text(selectStmt, 8));
                    
                    if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                        deal_id1 = @((char *)sqlite3_column_text(selectStmt, 0));
                        claim_coupons = @((char *)sqlite3_column_text(selectStmt, 1));
                        claim_giftvouchers = @((char *)sqlite3_column_text(selectStmt, 3));
                        claim_loyalty = @((char *)sqlite3_column_text(selectStmt, 2));
                        dealCategory = @((char *)sqlite3_column_text(selectStmt, 4));
                        desc = @((char *)sqlite3_column_text(selectStmt, 5));
                        sellSkus = @((char *)sqlite3_column_text(selectStmt, 12));
                        dealSkus = @((char *)sqlite3_column_text(selectStmt, 10));
                        dealName = @((char *)sqlite3_column_text(selectStmt, 6));
                        sellProducts = @((char *)sqlite3_column_text(selectStmt, 13));
                        
                        int weekDayStatus = 0;
                        if (weekDayNumber == 1) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 22);
                        }
                        else if (weekDayNumber == 2) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 23);
                        }
                        else if (weekDayNumber == 3) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 24);
                        }
                        else if (weekDayNumber == 4) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 25);
                        }
                        else if (weekDayNumber == 5) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 26);
                        }
                        else if (weekDayNumber == 6) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 27);
                        }
                        else if (weekDayNumber == 7) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 28);
                        }
                        if (weekDayStatus == 1) {
                            NSString *dealStartTime = @((char *)sqlite3_column_text(selectStmt, 29));
                            NSString *dealEndTime = @((char *)sqlite3_column_text(selectStmt, 30));
                            
                            dealOrOfferApplicationStatus = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                        }
                        
                    }
                    
                }
                
                sqlite3_finalize(selectStmt);
                
                
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            if (deal_id1.length!=0) {
                
                if (dealOrOfferApplicationStatus) {
                    NSString *select_deals_ranges1 = [NSString stringWithFormat:@"select * from deals_ranges where deal_id= '%@' order by minimum_purchase_quantity",deal_id1];
                    
                    const char *select_itemSpecRange = select_deals_ranges1.UTF8String ;
                    
                    if(sqlite3_prepare_v2(database, select_itemSpecRange, -1, &selectStmt, NULL) == SQLITE_OK) {
                        NSMutableArray *rangesArr = [[NSMutableArray alloc] init];
                        //                int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            NSString  *minimum_purchase_amt = @((char *)sqlite3_column_text(selectStmt, 3));
                            NSString  *min_pur_qty = @((char *)sqlite3_column_text(selectStmt, 2));
                            if (total.floatValue>= minimum_purchase_amt.floatValue && quantity.floatValue>=min_pur_qty.floatValue) {
                                
                                NSString  *deal_id = @((char *)sqlite3_column_text(selectStmt, 0));
                                
                                NSString  *deal_qty = @((char *)sqlite3_column_text(selectStmt, 1));
                                NSString  *range = @((char *)sqlite3_column_text(selectStmt, 4));
                                NSString  *description = @((char *)sqlite3_column_text(selectStmt, 5));
                                
                                NSDictionary *rangeDic = @{@"dealId": deal_id,@"dealQuantity": deal_qty,@"minimumPurchaseQuantity_float": min_pur_qty,@"range": range,@"description": description};
                                [rangesArr addObject:rangeDic];
                                
                                NSArray *objects = @[deal_id,claim_coupons,claim_giftvouchers,claim_loyalty,dealCategory,desc,sellSkus,dealSkus,dealName,sellProducts];
                                NSArray *keys = @[@"dealId",@"claim_coupons",@"claim_giftvouchers",@"claim_loyalty",@"dealCategory",@"description",@"sellSkus",@"dealSkus",@"dealName",@"sellProducts"];
                                
                                dealsDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
                                
                            }
                            
                            
                            
                        }
                        
                        sqlite3_finalize(selectStmt);
                        if (rangesArr.count>0) {
                            
                            dealsDic[@"rangeList"] = rangesArr;
                            
                        }
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                        
                    }
                    
                    [dealsList addObject:dealsDic];
                    
                }
            }
            NSMutableArray *groupIdArr = [NSMutableArray new];
            
            NSString *getGroupsQry = [NSString stringWithFormat:@"select * from groups_child where sku_Id = '%@'",skuid];
            
            const char *selectGroupQry = getGroupsQry.UTF8String ;
            
            if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                offersDic = [[NSMutableDictionary alloc]init];
                //                int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    NSString *groupID = @((char *)sqlite3_column_text(selectStmt, 0));
                    [groupIdArr addObject:groupID];
                }
            }
            
            for (NSString *groupid in groupIdArr) {
                NSString *select_deals_qry1 = [NSString stringWithFormat:@"select * from deals where deal_status= '1' and deal_category LIKE '%%item%%' and store_location LIKE '%%%@%%' and (sell_sku_ids LIKE '%%%@%%' or sell_group_id LIKE '%%%@%%')",presentLocation,skuid,groupid];
                
                const char *select_itemSpecDeals = select_deals_qry1.UTF8String ;
                
                NSString  *deal_id1 =@"";
                
                NSMutableArray *dealGroupArr = [NSMutableArray new];
                NSMutableArray *sellGroupIdArr = [NSMutableArray new];
                if(sqlite3_prepare_v2(database, select_itemSpecDeals, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSString *startDate = @((char *)sqlite3_column_text(selectStmt, 14));
                        
                        NSString *endDate = @((char *)sqlite3_column_text(selectStmt, 8));
                        
                        if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                            deal_id1 = @((char *)sqlite3_column_text(selectStmt, 0));
                            claim_coupons = @((char *)sqlite3_column_text(selectStmt, 1));
                            claim_giftvouchers = @((char *)sqlite3_column_text(selectStmt, 3));
                            claim_loyalty = @((char *)sqlite3_column_text(selectStmt, 2));
                            NSString * dealGroupId = @((char *)sqlite3_column_text(selectStmt, 32));
                            NSString * sellGroupId = @((char *)sqlite3_column_text(selectStmt, 31));
                            dealCategory = @((char *)sqlite3_column_text(selectStmt, 4));
                            desc = @((char *)sqlite3_column_text(selectStmt, 5));
                            sellSkus = @((char *)sqlite3_column_text(selectStmt, 12));
                            dealSkus = @((char *)sqlite3_column_text(selectStmt, 10));
                            dealName = @((char *)sqlite3_column_text(selectStmt, 6));
                            sellProducts = @((char *)sqlite3_column_text(selectStmt, 13));
                            int isRepeat = sqlite3_column_int(selectStmt, 29);;
                            
                            int weekDayStatus = 0;
                            if (weekDayNumber == 1) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 22);
                            }
                            else if (weekDayNumber == 2) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 23);
                            }
                            else if (weekDayNumber == 3) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 24);
                            }
                            else if (weekDayNumber == 4) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 25);
                            }
                            else if (weekDayNumber == 5) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 26);
                            }
                            else if (weekDayNumber == 6) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 27);
                            }
                            else if (weekDayNumber == 7) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 28);
                            }
                            if (weekDayStatus == 1) {
                                NSString *dealStartTime = @((char *)sqlite3_column_text(selectStmt, 29));
                                NSString *dealEndTime = @((char *)sqlite3_column_text(selectStmt, 30));
                                
                                dealOrOfferApplicationStatus = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                            }
                            
                            [dealGroupArr addObject:dealGroupId];
                            [sellGroupIdArr addObject:sellGroupId];
                        }
                        
                    }
                    
                    sqlite3_finalize(selectStmt);
                    
                    
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                for (NSString *dealGroupId in dealGroupArr) {
                    NSString *getGroupsQry = [NSString stringWithFormat:@"select * from groups_child where group_id = '%@'",dealGroupId];
                    
                    const char *selectGroupQry = getGroupsQry.UTF8String ;
                    
                    if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                        offersDic = [[NSMutableDictionary alloc]init];
                        //                int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            NSString *skuID = @((char *)sqlite3_column_text(selectStmt, 1));
                            dealSkus = [NSString stringWithFormat:@"%@%@%@",dealSkus,skuID,@","];
                        }
                    }
                    
                }
                for (NSString *sellGroupId in sellGroupIdArr) {
                    NSString *getGroupsQry = [NSString stringWithFormat:@"select * from groups_child where group_id = '%@'",sellGroupId];
                    
                    const char *selectGroupQry = getGroupsQry.UTF8String ;
                    
                    if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                        offersDic = [[NSMutableDictionary alloc]init];
                        //                int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            NSString *skuID = @((char *)sqlite3_column_text(selectStmt, 1));
                            sellSkus = [NSString stringWithFormat:@"%@%@%@",sellSkus,skuID,@","];
                        }
                    }
                    
                }
                if (deal_id1.length!=0) {
                    
                    if (dealOrOfferApplicationStatus) {
                        NSString *select_deals_ranges1 = [NSString stringWithFormat:@"select * from deals_ranges where deal_id= '%@' order by minimum_purchase_quantity",deal_id1];
                        
                        const char *select_itemSpecRange = select_deals_ranges1.UTF8String ;
                        
                        if(sqlite3_prepare_v2(database, select_itemSpecRange, -1, &selectStmt, NULL) == SQLITE_OK) {
                            NSMutableArray *rangesArr = [[NSMutableArray alloc] init];
                            //                int count = sqlite3_column_count(selectStmt);
                            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                                
                                NSString  *minimum_purchase_amt = @((char *)sqlite3_column_text(selectStmt, 3));
                                NSString  *min_pur_qty = @((char *)sqlite3_column_text(selectStmt, 2));
                                if (total.floatValue>= minimum_purchase_amt.floatValue && quantity.floatValue>=min_pur_qty.floatValue) {
                                    
                                    NSString  *deal_id = @((char *)sqlite3_column_text(selectStmt, 0));
                                    
                                    NSString  *deal_qty = @((char *)sqlite3_column_text(selectStmt, 1));
                                    NSString  *range = @((char *)sqlite3_column_text(selectStmt, 4));
                                    NSString  *description = @((char *)sqlite3_column_text(selectStmt, 5));
                                    
                                    NSDictionary *rangeDic = @{@"dealId": deal_id,@"dealQuantity": deal_qty,@"minimumPurchaseQuantity_float": min_pur_qty,@"range": range,@"description": description};
                                    [rangesArr addObject:rangeDic];
                                    
                                    NSArray *objects = @[deal_id,claim_coupons,claim_giftvouchers,claim_loyalty,dealCategory,desc,sellSkus,dealSkus,dealName,sellProducts];
                                    NSArray *keys = @[@"dealId",@"claim_coupons",@"claim_giftvouchers",@"claim_loyalty",@"dealCategory",@"description",@"sellSkus",@"dealSkus",@"dealName",@"sellProducts"];
                                    
                                    dealsDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
                                    
                                }
                                
                                
                                
                            }
                            
                            sqlite3_finalize(selectStmt);
                            if (rangesArr.count>0) {
                                
                                dealsDic[@"rangeList"] = rangesArr;
                                
                            }
                            
                        }
                        else {
                            NSLog(@"%s",sqlite3_errmsg(database)) ;
                            
                        }
                        
                        [dealsList addObject:dealsDic];
                        
                    }
                }
                
            }
            
            //get turn_over offer....
            
            NSString *select_offer_qry = [NSString stringWithFormat:@"select * from offers where offer_status= '1' and offer_category LIKE '%%turn%%' and store_location LIKE '%%%@%%'",presentLocation];
            
            const char *select_tuenOverOffer = select_offer_qry.UTF8String ;
            
            NSString  *offer_id = @"" ;
            NSString  *claim_coupons_offer;
            NSString  *claim_giftvouchers_offer;
            NSString  *claim_loyalty_offer;
            NSString  *offerCategory;
            NSString  *offer_desc;
            NSString  *sellSkus1;
            NSString  *offerName;
            NSString  *sellProducts1;
            NSString *rewardType;
            
            
            if(sqlite3_prepare_v2(database, select_tuenOverOffer, -1, &selectStmt, NULL) == SQLITE_OK) {
                offersDic = [[NSMutableDictionary alloc]init];
                //                int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    NSString *startDate = @((char *)sqlite3_column_text(selectStmt, 11));
                    
                    NSString *endDate = @((char *)sqlite3_column_text(selectStmt, 8));
                    
                    if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                        offer_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        claim_coupons_offer = @((char *)sqlite3_column_text(selectStmt, 1));
                        claim_giftvouchers_offer = @((char *)sqlite3_column_text(selectStmt, 3));
                        claim_loyalty_offer = @((char *)sqlite3_column_text(selectStmt, 2));
                        offerCategory = @((char *)sqlite3_column_text(selectStmt, 4));
                        offer_desc = @((char *)sqlite3_column_text(selectStmt, 5));
                        sellSkus1 = @((char *)sqlite3_column_text(selectStmt, 9));
                        // dealSkus = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 11)];
                        offerName = @((char *)sqlite3_column_text(selectStmt, 7));
                        sellProducts1 = @((char *)sqlite3_column_text(selectStmt, 10));
                        rewardType = @((char *)sqlite3_column_text(selectStmt, 13));
                        
                        int weekDayStatus = 0;
                        if (weekDayNumber == 1) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 22);
                        }
                        else if (weekDayNumber == 2) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 23);
                        }
                        else if (weekDayNumber == 3) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 24);
                        }
                        else if (weekDayNumber == 4) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 25);
                        }
                        else if (weekDayNumber == 5) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 26);
                        }
                        else if (weekDayNumber == 6) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 27);
                        }
                        else if (weekDayNumber == 7) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 28);
                        }
                        if (weekDayStatus == 1) {
                            NSString *dealStartTime = @((char *)sqlite3_column_text(selectStmt, 30));
                            NSString *dealEndTime = @((char *)sqlite3_column_text(selectStmt, 31));
                            
                            dealOrOfferApplicationStatus = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                        }
                        
                    }
                }
                
                sqlite3_finalize(selectStmt);
                
                
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
            if (dealOrOfferApplicationStatus) {
                NSString *select_offer_ranges = [NSString stringWithFormat:@"select * from offer_ranges where offer_id= '%@' order by minimum_purchase_amount",offer_id];
                
                const char *select_tuenOverOffersRange = select_offer_ranges.UTF8String ;
                
                if(sqlite3_prepare_v2(database, select_tuenOverOffersRange, -1, &selectStmt, NULL) == SQLITE_OK) {
                    NSMutableArray *rangesArr = [[NSMutableArray alloc] init];
                    //                int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSString  *minimum_purchase_amt = @((char *)sqlite3_column_text(selectStmt, 2));
                        if (total.floatValue>= minimum_purchase_amt.floatValue) {
                            
                            NSString  *offer_id = @((char *)sqlite3_column_text(selectStmt, 0));
                            
                            NSString  *min_pur_qty = @((char *)sqlite3_column_text(selectStmt, 1));
                            NSString  *range = @((char *)sqlite3_column_text(selectStmt, 3));
                            NSString  *description = @((char *)sqlite3_column_text(selectStmt,4));
                            NSString  *reward = @((char *)sqlite3_column_text(selectStmt,5));
                            
                            if ([rewardType containsString:@"percentage"]) {
                                
                                reward = [NSString stringWithFormat:@"%.2f",(total.floatValue/100)*reward.floatValue];
                            }
                            
                            
                            NSDictionary *rangeDic = @{@"offerId": offer_id,@"minimumPurchaseQuantity_float": min_pur_qty,@"minimumPurchaseAmount_float": minimum_purchase_amt,@"rangeId": range,@"description": description,@"rewardValue": reward};
                            
                            [rangesArr addObject:rangeDic];
                            
                            NSArray *objects = @[deal_id,claim_coupons,claim_giftvouchers,claim_loyalty,dealCategory,desc,sellSkus,rewardType];
                            NSArray *keys = @[@"offerId",@"claim_coupons",@"claim_giftvouchers",@"claim_loyalty",@"offerCategory",@"description",@"sellSkuids",@"rewardType"];
                            
                            offersDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
                            
                        }
                        
                        
                        
                    }
                    
                    sqlite3_finalize(selectStmt);
                    
                    if (rangesArr.count>0) {
                        
                        offersDic[@"offerRangesList"] = rangesArr;
                        
                    }
                    
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                    
                }
                if (offersDic.count!=0) {
                    
                    [offerList addObject:offersDic];
                    
                }
                
            }
            
            
            //get item_specific offer....
            
            NSString *select_offers_qry1 = [NSString stringWithFormat:@"select * from offers where offer_status= '1' and offer_category LIKE '%%item%%' and store_location LIKE '%%%@%%' and sell_sku_ids LIKE '%%%@%%'",presentLocation,skuid];
            
            const char *select_itemSpecOffers = select_offers_qry1.UTF8String ;
            
            NSString *offer_id1=@"";
            
            BOOL isComboOffer = FALSE;
            BOOL isLowestPriceItem = FALSE;
            
            if(sqlite3_prepare_v2(database, select_itemSpecOffers, -1, &selectStmt, NULL) == SQLITE_OK) {
                //                int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    NSString *startDate = @((char *)sqlite3_column_text(selectStmt, 11));
                    
                    NSString *endDate = @((char *)sqlite3_column_text(selectStmt, 8));
                    
                    if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                        offer_id1 = @((char *)sqlite3_column_text(selectStmt, 0));
                        claim_coupons_offer = @((char *)sqlite3_column_text(selectStmt, 1));
                        claim_giftvouchers_offer = @((char *)sqlite3_column_text(selectStmt, 3));
                        claim_loyalty_offer = @((char *)sqlite3_column_text(selectStmt, 2));
                        offerCategory = @((char *)sqlite3_column_text(selectStmt, 4));
                        offer_desc = @((char *)sqlite3_column_text(selectStmt, 5));
                        sellSkus1 = @((char *)sqlite3_column_text(selectStmt, 9));
                        offerName = @((char *)sqlite3_column_text(selectStmt, 6));
                        sellProducts1 = @((char *)sqlite3_column_text(selectStmt, 10));
                        rewardType = @((char *)sqlite3_column_text(selectStmt, 13));
                        int weekDayStatus = 0;
                        if (weekDayNumber == 1) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 22);
                        }
                        else if (weekDayNumber == 2) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 23);
                        }
                        else if (weekDayNumber == 3) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 24);
                        }
                        else if (weekDayNumber == 4) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 25);
                        }
                        else if (weekDayNumber == 5) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 26);
                        }
                        else if (weekDayNumber == 6) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 27);
                        }
                        else if (weekDayNumber == 7) {
                            weekDayStatus = sqlite3_column_int(selectStmt, 28);
                        }
                        if (weekDayStatus == 1) {
                            NSString *dealStartTime = @((char *)sqlite3_column_text(selectStmt, 30));
                            NSString *dealEndTime = @((char *)sqlite3_column_text(selectStmt, 31));
                            
                            dealOrOfferApplicationStatus = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                        }
                        
                        isComboOffer = @(sqlite3_column_int(selectStmt, 34)).boolValue;
                        isLowestPriceItem = @(sqlite3_column_int(selectStmt, 35)).boolValue;
                    }
                    
                }
                
                sqlite3_finalize(selectStmt);
                
                
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
            if (offer_id1.length!=0) {
                
                if (dealOrOfferApplicationStatus) {
                    NSString *select_offer_ranges1 = [NSString stringWithFormat:@"select * from offer_ranges where offer_id= '%@' order by minimum_purchase_quantity",offer_id1];
                    
                    const char *select_itemSpecRange1 = select_offer_ranges1.UTF8String ;
                    
                    if(sqlite3_prepare_v2(database, select_itemSpecRange1, -1, &selectStmt, NULL) == SQLITE_OK) {
                        NSMutableArray *rangesArr = [[NSMutableArray alloc] init];
                        //                int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            NSString  *minimum_purchase_amt = @((char *)sqlite3_column_text(selectStmt,2));
                            NSString  *min_pur_qty = @((char *)sqlite3_column_text(selectStmt, 1));
                            if (total.floatValue>= minimum_purchase_amt.floatValue && quantity.floatValue>=min_pur_qty.floatValue) {
                                
                                NSString  *offer_id = @((char *)sqlite3_column_text(selectStmt, 0));
                                
                                NSString  *range = @((char *)sqlite3_column_text(selectStmt, 3));
                                NSString  *description = @((char *)sqlite3_column_text(selectStmt,4));
                                NSString  *reward = @((char *)sqlite3_column_text(selectStmt,5));
                                
                                
                                if ([rewardType containsString:@"%"] || ([rewardType caseInsensitiveCompare:@"percentage"] == NSOrderedSame)) {
                                    
                                    reward = [NSString stringWithFormat:@"%.2f",(item_price.floatValue/100)*reward.floatValue];
                                }
                                
                                
                                NSDictionary *rangeDic = @{@"offerId": offer_id,@"minimumPurchaseQuantity_float": min_pur_qty,@"minimumPurchaseAmount_float": minimum_purchase_amt,@"rangeId": range,@"description": description,@"rewardValue": reward};
                                
                                [rangesArr addObject:rangeDic];
                                
                                NSArray *objects = @[offer_id1,claim_coupons_offer,claim_giftvouchers_offer,claim_loyalty_offer,offerCategory,offer_desc,sellSkus1,rewardType];
                                NSArray *keys = @[@"offerId",@"claim_coupons",@"claim_giftvouchers",@"claim_loyalty",@"offerCategory",@"description",@"sellSkuids",@"rewardType"];
                                
                                offersDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
                                
                            }
                            
                            
                            
                        }
                        
                        sqlite3_finalize(selectStmt);
                        if (rangesArr.count>0) {
                            
                            offersDic[@"offerRangesList"] = rangesArr;
                            
                        }
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                        
                    }
                    
                    [offerList addObject:offersDic];
                    
                }
                
            }
            for (NSString *groupid in groupIdArr) {
                NSString *select_offers_qry1 = [NSString stringWithFormat:@"select * from offers where offer_status= '1' and offer_category LIKE '%%item%%' and store_location LIKE '%%%@%%' and (sell_sku_ids LIKE '%%%@%%' or sell_group_id LIKE '%%%@%%')",presentLocation,skuid,groupid];
                
                const char *select_itemSpecOffers = select_offers_qry1.UTF8String ;
                
                NSString *offer_id1=@"";
                
                NSMutableArray *sellGroupArr = [NSMutableArray new];
                NSMutableArray *offerIdArr = [NSMutableArray new];
                
                if(sqlite3_prepare_v2(database, select_itemSpecOffers, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        NSString *startDate = @((char *)sqlite3_column_text(selectStmt, 11));
                        
                        NSString *endDate = @((char *)sqlite3_column_text(selectStmt, 8));
                        
                        if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                            offer_id1 = @((char *)sqlite3_column_text(selectStmt, 0));
                            claim_coupons_offer = @((char *)sqlite3_column_text(selectStmt, 1));
                            claim_giftvouchers_offer = @((char *)sqlite3_column_text(selectStmt, 3));
                            claim_loyalty_offer = @((char *)sqlite3_column_text(selectStmt, 2));
                            NSString * sellGroupId = @((char *)sqlite3_column_text(selectStmt, 32));
                            
                            offerCategory = @((char *)sqlite3_column_text(selectStmt, 4));
                            offer_desc = @((char *)sqlite3_column_text(selectStmt, 5));
                            sellSkus1 = @((char *)sqlite3_column_text(selectStmt, 9));
                            offerName = @((char *)sqlite3_column_text(selectStmt, 6));
                            sellProducts1 = @((char *)sqlite3_column_text(selectStmt, 10));
                            rewardType = @((char *)sqlite3_column_text(selectStmt, 13));
                            isComboOffer = @(sqlite3_column_int(selectStmt, 34)).boolValue;
                            isLowestPriceItem = @(sqlite3_column_int(selectStmt, 35)).boolValue;
                            
                            int weekDayStatus = 0;
                            if (weekDayNumber == 1) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 22);
                            }
                            else if (weekDayNumber == 2) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 23);
                            }
                            else if (weekDayNumber == 3) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 24);
                            }
                            else if (weekDayNumber == 4) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 25);
                            }
                            else if (weekDayNumber == 5) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 26);
                            }
                            else if (weekDayNumber == 6) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 27);
                            }
                            else if (weekDayNumber == 7) {
                                weekDayStatus = sqlite3_column_int(selectStmt, 28);
                            }
                            if (weekDayStatus == 1) {
                                NSString *dealStartTime = @((char *)sqlite3_column_text(selectStmt, 30));
                                NSString *dealEndTime = @((char *)sqlite3_column_text(selectStmt, 31));
                                
                                dealOrOfferApplicationStatus = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                            }
                            
                            [sellGroupArr addObject:sellGroupId];
                            [offerIdArr addObject:offer_id1];
                        }
                        
                    }
                    
                    sqlite3_finalize(selectStmt);
                    
                    
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
                if (dealOrOfferApplicationStatus) {
                    if (isComboOffer) {
                        
                        if (offer_id1.length!=0) {
                            
                            NSMutableArray *comboGroupArr = [NSMutableArray new];
                            NSString  *minimum_purchase_amt = @"";
                            NSString  *min_pur_qty = @"";
                            NSString  *offer_id = @"";
                            NSString  *range = @"";
                            NSString  *description = @"";
                            NSString  *reward = @"";
                            NSString *groupId = @"";
                            NSString *rangeMode = @"";
                            NSMutableArray *rangesArr = [[NSMutableArray alloc] init];
                            NSString *select_offer_ranges1 = [NSString stringWithFormat:@"select * from offer_ranges where offer_id= '%@' order by minimum_purchase_quantity DESC",offer_id1];
                            
                            const char *select_itemSpecRange1 = select_offer_ranges1.UTF8String ;
                            if(sqlite3_prepare_v2(database, select_itemSpecRange1, -1, &selectStmt, NULL) == SQLITE_OK) {
                                //                int count = sqlite3_column_count(selectStmt);
                                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                                    
                                    minimum_purchase_amt = @((char *)sqlite3_column_text(selectStmt,2));
                                    min_pur_qty = @((char *)sqlite3_column_text(selectStmt, 1));
                                    //                                if ([total floatValue]>= [minimum_purchase_amt floatValue] && [quantity floatValue]>=[min_pur_qty floatValue]) {
                                    
                                    offer_id = @((char *)sqlite3_column_text(selectStmt, 0));
                                    
                                    range = @((char *)sqlite3_column_text(selectStmt, 3));
                                    description = @((char *)sqlite3_column_text(selectStmt,4));
                                    reward = @((char *)sqlite3_column_text(selectStmt,5));
                                    
                                    groupId = @((char *)sqlite3_column_text(selectStmt,7));
                                    rangeMode = @((char *)sqlite3_column_text(selectStmt,9));
                                    
                                    NSString *getGroupsQry = [NSString stringWithFormat:@"select * from groups_child where group_id = '%@'",groupId];
                                    
                                    const char *selectGroupQry = getGroupsQry.UTF8String ;
                                    NSString *groupSkus = @"";
                                    if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt_, NULL) == SQLITE_OK) {
                                        offersDic = [[NSMutableDictionary alloc]init];
                                        //                int count = sqlite3_column_count(selectStmt);
                                        while (sqlite3_step(selectStmt_) == SQLITE_ROW) {
                                            NSString *skuID = @((char *)sqlite3_column_text(selectStmt_, 1));
                                            groupSkus = [NSString stringWithFormat:@"%@%@%@",sellSkus1,skuID,@","];
                                        }
                                    }
                                    
                                    if ([rangeMode.lowercaseString isEqualToString:@"condition"]) {
                                        [comboGroupArr addObject:groupId];
                                    }
                                    
                                    
                                    NSDictionary *rangeDic = @{@"offerId": offer_id,@"minimumPurchaseQuantity_float": min_pur_qty,@"minimumPurchaseAmount_float": minimum_purchase_amt,@"rangeId": range,@"description": description,@"rewardValue": reward,@"rewardType": rewardType,@"rangeMode": rangeMode,@"sellskuId": groupSkus};
                                    
                                    [rangesArr addObject:rangeDic];
                                    
                                    
                                    //                                }
                                    
                                    
                                    
                                }
                                
                                sqlite3_finalize(selectStmt);
                                
                            }
                            else {
                                NSLog(@"%s",sqlite3_errmsg(database)) ;
                                
                            }
                            
                            
                            for (NSString *dealGroupId in comboGroupArr) {
                                NSString *getGroupsQry = [NSString stringWithFormat:@"select * from groups_child where group_id = '%@'",dealGroupId];
                                
                                const char *selectGroupQry = getGroupsQry.UTF8String ;
                                
                                if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                                    offersDic = [[NSMutableDictionary alloc]init];
                                    //                int count = sqlite3_column_count(selectStmt);
                                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                                        NSString *skuID = @((char *)sqlite3_column_text(selectStmt, 1));
                                        sellSkus1 = [NSString stringWithFormat:@"%@%@%@",sellSkus1,skuID,@","];
                                    }
                                }
                                
                            }
                            NSArray *objects = @[offer_id1,claim_coupons_offer,claim_giftvouchers_offer,claim_loyalty_offer,offerCategory,offer_desc,sellSkus1,rewardType,@(isComboOffer)];
                            NSArray *keys = @[@"offerId",@"claim_coupons",@"claim_giftvouchers",@"claim_loyalty",@"offerCategory",@"description",@"sellSkuids",@"rewardType",@"isOfferCombo"];
                            
                            offersDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
                            if (rangesArr.count>0) {
                                
                                offersDic[@"offerRangesList"] = rangesArr;
                                
                            }
                            
                            [offerList addObject:offersDic];
                            
                        }
                        
                        
                    }
                    else {
                        for (NSString *dealGroupId in sellGroupArr) {
                            NSString *getGroupsQry = [NSString stringWithFormat:@"select * from groups_child where group_id = '%@'",dealGroupId];
                            
                            const char *selectGroupQry = getGroupsQry.UTF8String ;
                            
                            if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                                offersDic = [[NSMutableDictionary alloc]init];
                                //                int count = sqlite3_column_count(selectStmt);
                                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                                    NSString *skuID = @((char *)sqlite3_column_text(selectStmt, 1));
                                    sellSkus1 = [NSString stringWithFormat:@"%@%@%@",sellSkus1,skuID,@","];
                                }
                            }
                            
                        }
                        if (offer_id1.length!=0) {
                            for (NSString *offerId in offerIdArr) {
                                NSString *select_offer_ranges1 = [NSString stringWithFormat:@"select * from offer_ranges where offer_id= '%@' order by minimum_purchase_quantity",offerId];
                                
                                const char *select_itemSpecRange1 = select_offer_ranges1.UTF8String ;
                                
                                if(sqlite3_prepare_v2(database, select_itemSpecRange1, -1, &selectStmt, NULL) == SQLITE_OK) {
                                    NSMutableArray *rangesArr = [[NSMutableArray alloc] init];
                                    //                int count = sqlite3_column_count(selectStmt);
                                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                                        
                                        NSString  *minimum_purchase_amt = @((char *)sqlite3_column_text(selectStmt,2));
                                        NSString  *min_pur_qty = @((char *)sqlite3_column_text(selectStmt, 1));
                                        //                                if ([total floatValue]>= [minimum_purchase_amt floatValue] && [quantity floatValue]>=[min_pur_qty floatValue]) {
                                        
                                        NSString  *offer_id = @((char *)sqlite3_column_text(selectStmt, 0));
                                        
                                        NSString  *range = @((char *)sqlite3_column_text(selectStmt, 3));
                                        NSString  *description = @((char *)sqlite3_column_text(selectStmt,4));
                                        NSString  *reward = @((char *)sqlite3_column_text(selectStmt,5));
                                        int rangeQty = sqlite3_column_int(selectStmt, 10);
                                        
                                        
                                        if (isLowestPriceItem) {
                                            
                                            
                                            NSDictionary *rangeDic = @{@"offerId": offer_id,@"minimumPurchaseQuantity_float": min_pur_qty,@"minimumPurchaseAmount_float": minimum_purchase_amt,@"rangeId": range,@"description": description,@"rewardValue": reward,@"rewardType": rewardType,@"rewardQty": [NSString stringWithFormat:@"%d",rangeQty]};
                                            
                                            [rangesArr addObject:rangeDic];
                                            
                                            NSArray *objects = @[offer_id1,claim_coupons_offer,claim_giftvouchers_offer,claim_loyalty_offer,offerCategory,offer_desc,sellSkus1,rewardType,@(isLowestPriceItem)];
                                            NSArray *keys = @[@"offerId",@"claim_coupons",@"claim_giftvouchers",@"claim_loyalty",@"offerCategory",@"description",@"sellSkuids",@"rewardType",@"isLowerItemPrice"];
                                            
                                            offersDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
                                            
                                        }
                                        else {
                                            if (total.floatValue>= minimum_purchase_amt.floatValue && quantity.floatValue>=min_pur_qty.floatValue) {
                                                
                                                if ([rewardType containsString:@"%"] || ([rewardType caseInsensitiveCompare:@"percentage"] == NSOrderedSame)) {
                                                    
                                                    reward = [NSString stringWithFormat:@"%.2f",(item_price.floatValue/100)*reward.floatValue];
                                                }
                                                
                                                
                                                NSDictionary *rangeDic = @{@"offerId": offer_id,@"minimumPurchaseQuantity_float": min_pur_qty,@"minimumPurchaseAmount_float": minimum_purchase_amt,@"rangeId": range,@"description": description,@"rewardValue": reward};
                                                
                                                [rangesArr addObject:rangeDic];
                                                
                                                NSArray *objects = @[offer_id1,claim_coupons_offer,claim_giftvouchers_offer,claim_loyalty_offer,offerCategory,offer_desc,sellSkus1,rewardType];
                                                NSArray *keys = @[@"offerId",@"claim_coupons",@"claim_giftvouchers",@"claim_loyalty",@"offerCategory",@"description",@"sellSkuids",@"rewardType"];
                                                
                                                offersDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
                                                
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                    sqlite3_finalize(selectStmt);
                                    if (rangesArr.count>0) {
                                        
                                        offersDic[@"offerRangesList"] = rangesArr;
                                        
                                    }
                                    
                                }
                                else {
                                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                                    
                                }
                                if (offersDic.count >  0) {
                                    [offerList addObject:offersDic];
                                    
                                }
                                
                            }
                        }
                        
                    }
                    
                }
            }
            result = @{@"dealsList": dealsList,@"offersList": offerList};
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        return NULL;
        
    }
    @finally {
        sqlite3_finalize(selectStmt);
        sqlite3_close(database);
        
    }
    return result;
}




-(NSMutableDictionary *)applyCampaignsOffline:(CampaignRequestModel *)campaignRequestModel
{
    
    NSString * appendSkuStr = @"";
    NSMutableString *appendGroupStr = [NSMutableString new];
    NSMutableArray *totalDealsList = [NSMutableArray new];
    NSMutableArray *totalOffersList = [NSMutableArray new];
    NSMutableArray * flatOfferForAllItemsList = [NSMutableArray new];
    
    NSMutableDictionary *skuInfo = [NSMutableDictionary new];
    NSMutableDictionary *listOfSkusUnderCategory = [NSMutableDictionary new];
    NSMutableDictionary *listOfskusUnderSubCategory = [NSMutableDictionary new];
    
    //added by Srinivasulu on 17/08/2017....
    
    BOOL isPriceBasedConfiguration = false;
    NSString * currentDateStr = [[[WebServiceUtility getCurrentDate] componentsSeparatedByString:@" "] objectAtIndex:0];
    currentDateStr = [currentDateStr stringByReplacingOccurrencesOfString:@"/" withString:@"-"];
    currentDateStr = [self dateToFormatedDate:currentDateStr];
    //DATE(SUBSTR(o.start_date,1,INSTR(o.start_date,' ') -1))   -- DATE(substr(o.start_date,1,10))
    //DATE(SUBSTR(o.end_date,1,INSTR(o.end_date,' ') -1))   -- DATE(substr(o.end_date,1,10))
    
    //DATE(SUBSTR(d.start_date,1,INSTR(d.start_date,' ') -1))   -- DATE(substr(d.start_date,1,10))
    //DATE(SUBSTR(d.end_date,1,INSTR(d.end_date,' ') -1))   -- DATE(substr(d.end_date,1,10))
    
    //upto here on 17/08/2017....
    
    
    
    @try {
        
        mtotalBill = (campaignRequestModel.totalBillAmount).floatValue;
        [self intializeTheValues];
        NSMutableArray*skuIdList = campaignRequestModel.skuIdArrList;
        skuIdList = [self filterNonVoidedItems:skuIdList statusList:campaignRequestModel.itemStatusArrList];
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
        }
        if (![skuIdList isKindOfClass:[NSNull class]] && skuIdList.count > 0) {
            
            NSMutableArray *groupIdList = [NSMutableArray new];
            for (int i = 0; i < skuIdList.count; i++) {
                appendSkuStr = [NSString stringWithFormat:@"%@%@%@%@",appendSkuStr,@" (sell_sku_ids like '%",skuIdList[i],@"%')"];
                if (i != (skuIdList.count - 1)) {
                    appendSkuStr = [NSString stringWithFormat:@"%@ or ",appendSkuStr];
                }
                //                NSMutableArray *groupIds = [self getGroupsForSkuId:[skuIdList objectAtIndex:i]];
                //                [groupIdList addObjectsFromArray:groupIds];
            }
            
            //            NSOrderedSet *set = [[NSOrderedSet alloc] initWithArray:groupIdList];
            //
            //            groupIdList = [[set array] mutableCopy];
            
            
            groupIdList= [self getGroupsForSkuId:skuIdList];
            
            for (int a = 0; a < groupIdList.count; a++) {
                [appendGroupStr appendString:@" ( sell_group_id = '"];
                [appendGroupStr appendString:groupIdList[a]];
                [appendGroupStr appendString:@"' and (sell_sku_ids IS NULL or sell_sku_ids = '' or sell_sku_ids = 'null'))"];
                if (a != (groupIdList.count - 1)) {
                    [appendGroupStr appendString:@" or "];
                }
            }
            int weekDayNumber = [WebServiceUtility getTodayWeekDayNumber];
            
            
            //fetching department and sub-department of employee
            
            //            if (![campaignRequestModel.employeeCode isKindOfClass:[NSNull class]] && [campaignRequestModel.employeeCode length] > 0) {
            //
            //                billItems.setDepartment(empObj.getDepartment());
            //                billItems.setSubDepartment(empObj.getSubDepartment());
            //
            //            }
            selectStmt = nil;
            
            NSMutableArray *categoriesInfo = [NSMutableArray new];
            
            NSString * getCategoriesQry =
            [NSString stringWithFormat:@"select sku.product_category, sku.product_subcategory, sku.sku_Id, sku.primary_department, sku.brand_code, sku.section  from sku_master sku where sku.sku_Id in ('%@%@) ",[skuIdList componentsJoinedByString:@"','"],@"'"];

            const char *selectGroupQry = getCategoriesQry.UTF8String ;
            
            if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                offersDic = [[NSMutableDictionary alloc]init];
                //                int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSString * categoryStr  = @"";
                    NSString * subCategoryStr  = @"";
                    NSString * skuIdStr  = @"";
                    NSString * primaryDepartmentStr  = @"";
                    NSString * brandCodeStr  = @"";
                    NSString * sectionStr  = @"";
                    
                    if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt,0))
                        categoryStr = @((char *)sqlite3_column_text(selectStmt, 0));
                    if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt,1))
                        subCategoryStr = @((char *)sqlite3_column_text(selectStmt, 1));
                    if((sqlite3_column_text(selectStmt, 2) != nil) && (char *)sqlite3_column_text(selectStmt,2))
                        skuIdStr = @((char *)sqlite3_column_text(selectStmt, 2));
                    if((sqlite3_column_text(selectStmt, 3) != nil) && (char *)sqlite3_column_text(selectStmt,3))
                        primaryDepartmentStr = @((char *)sqlite3_column_text(selectStmt, 3));
                    if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt,4))
                        brandCodeStr = @((char *)sqlite3_column_text(selectStmt, 4));
                    if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt,5))
                        sectionStr = @((char *)sqlite3_column_text(selectStmt, 5));
                    
                    [categoriesInfo addObject:@{kcategory: categoryStr, kSubCategory: subCategoryStr, ITEM_SKU: skuIdStr, kPrimaryDepartment: primaryDepartmentStr, kProductBrand: brandCodeStr, SECTION: sectionStr}];
                }
            }
            
            if (categoriesInfo.count) {
                
                for (NSDictionary *productInfo in categoriesInfo) {
                    
                    if (![[productInfo valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]){
                        NSString * skuId = [productInfo valueForKey:ITEM_SKU];
                        if(skuId.length > 0){
                            NSMutableDictionary * categoryAndSubInfo=[NSMutableDictionary new];
                            
                            [categoryAndSubInfo setValue:@"" forKey:kcategory];
                            [categoryAndSubInfo setValue:@"" forKey:kSubCategory];
                            [categoryAndSubInfo setValue:@"" forKey:kPrimaryDepartment];
                            [categoryAndSubInfo setValue:@"" forKey:kProductBrand];
                            [categoryAndSubInfo setValue:@"" forKey:SECTION];
                            
                            if (![[productInfo valueForKey:kcategory] isKindOfClass:[NSNull class]]){
                                NSString * categoryStr = [productInfo valueForKey:kcategory];
                                if(categoryStr.length > 0){
                                    [categoryAndSubInfo setValue:categoryStr forKey:kcategory];
                                    
                                    NSMutableArray * tempArr;
                                    if([[listOfSkusUnderCategory allKeys] containsObject:categoryStr]){
                                        tempArr = [listOfSkusUnderCategory valueForKey:categoryStr];
                                        [tempArr addObject:skuId];
                                        [listOfSkusUnderCategory setValue:tempArr forKey:categoryStr];
                                    }
                                    else{
                                        tempArr = [NSMutableArray new];
                                        [tempArr addObject:skuId];
                                        [listOfSkusUnderCategory setValue:tempArr forKey:categoryStr];
                                    }
                                    
                                }
                            }
                            
                            if (![[productInfo valueForKey:kSubCategory] isKindOfClass:[NSNull class]]){
                                NSString * subCategoryStr = [productInfo valueForKey:kSubCategory];
                                if(subCategoryStr.length > 0){
                                    [categoryAndSubInfo setValue:subCategoryStr forKey:kSubCategory];

                                    NSMutableArray * tempArr;
                                    if([[listOfSkusUnderCategory allKeys] containsObject:subCategoryStr]){
                                        tempArr = [listOfSkusUnderCategory valueForKey:subCategoryStr];
                                        [tempArr addObject:skuId];
                                        [listOfSkusUnderCategory setValue:tempArr forKey:subCategoryStr];
                                    }
                                    else{
                                        tempArr = [NSMutableArray new];
                                        [tempArr addObject:skuId];
                                        [listOfSkusUnderCategory setValue:tempArr forKey:subCategoryStr];
                                    }
                                }
                            }
                            
                            if (![[productInfo valueForKey:kPrimaryDepartment] isKindOfClass:[NSNull class]]){
                                NSString * primaryDepartmentStr = [productInfo valueForKey:kPrimaryDepartment];
                                if(primaryDepartmentStr.length > 0)
                                    [categoryAndSubInfo setValue:primaryDepartmentStr forKey:kPrimaryDepartment];
                            }
                            
                            if (![[productInfo valueForKey:kProductBrand] isKindOfClass:[NSNull class]]){
                                NSString * productBrandStr = [productInfo valueForKey:kProductBrand];
                                if(productBrandStr.length > 0)
                                    [categoryAndSubInfo setValue:productBrandStr forKey:kProductBrand];
                            }
                            
                            if (![[productInfo valueForKey:SECTION] isKindOfClass:[NSNull class]]){
                                NSString * sectionStr = [productInfo valueForKey:SECTION];
                                if(sectionStr.length > 0)
                                    [categoryAndSubInfo setValue:sectionStr forKey:SECTION];
                            }
                            
                            skuInfo[skuId] = categoryAndSubInfo;
                        }
                    }
                }
                
                
            }
            
            int plucodeCountStr = 0;//-*-*
            
            for (NSString *cartItem in campaignRequestModel.skuIdArrList) {
                
                NSMutableArray *fetchedOffersList = [NSMutableArray new];
                
                
                
                NSMutableArray *offersList1 = [NSMutableArray new]; // this for storing all available offers for this item
                NSMutableArray *dealsList1 = [NSMutableArray new]; // this for storing all available deals for this item
                
                
                if (![(campaignRequestModel.itemStatusArrList)[[campaignRequestModel.skuIdArrList indexOfObject:cartItem]] isEqualToString:@"void"]) {
                    
                    NSMutableArray *priorityItemSpecificOffersList = [NSMutableArray new]; // temporary list only with in this loop
                    NSMutableArray *nonPriorityItemSpecificOffersList = [NSMutableArray new]; // temporary list only with in this loop
                    NSMutableArray *priorityTurnOverOffersList = [NSMutableArray new]; // temporary list only with in this loop
                    NSMutableArray *nonPriorityTurnOverOffersList = [NSMutableArray new];
                    
                    NSMutableArray *priorityItemSpecificDealsList = [NSMutableArray new]; // temporary list only with in this loop
                    NSMutableArray *nonPriorityItemSpecificDealsList = [NSMutableArray new]; // temporary list only with in this loop
                    NSMutableArray *priorityTurnOverDealsList = [NSMutableArray new]; // temporary list only with in this loop
                    NSMutableArray *nonPriorityTurnOverDealsList = [NSMutableArray new]; // temporary list only with in this loop
                    
                    NSMutableArray * priceBasedItemspecificOffers = [NSMutableArray new];//it added on 08/09/2017 srinivasulu and kesav..
                    
                    //-*-* this mark is used for latest change by Srinivasulu from 23/10/2018.. reason new spec...
                    BOOL categoryFlag=false;
                    BOOL subCategoryFlag=false;
                    BOOL department=false;//-*-*
                    BOOL brand=false;//-*-*
                    BOOL sectionFlag=false;//-*-*
                    
                    NSString * categoryValue=@"";
                    NSString * subCategoryValue=@"";
                    NSString * departmentValue = @"";//-*-*
                    NSString * brandValue = @"";//-*-*
                    NSString * sectionValue = @"";//-*-*
                    
                    //need to change written by Srinivaslulu on 17/08/2017 && ....
                    //reason In query location should not be there because in download we have to get this location related deals and offers only....
                    //-*-* -- o.priority is added by Srinivasulu
                    NSString * pluCodeStr = @"";
                    if([campaignRequestModel.pluCodeArrList count] > plucodeCountStr)
                        pluCodeStr = [campaignRequestModel.pluCodeArrList objectAtIndex:plucodeCountStr];
                    
                    NSMutableString   *  availableOffersForItem = [NSMutableString stringWithFormat:@"select o.sell_group_id, o.closed_on, o.offer_start_time, o.offer_end_time, o.offer_Id, o.claim_coupons, o.claim_loyalty_points, o.claim_gift_vouchers, o.offer_category, o.offer_description, o.offer_name, o.sell_products, o.isRepeat, o.allow_multiple_discounts, o.reward_type, o.sell_sku_ids, o.is_combo, o.is_lowest_price_item, o.priority, o.offer_status, o.store_location, o.is_price_based_configuration,o.priority, o.product_specific_flag, o.start_date, o.end_date, o.product_category, o.product_sub_category from offer o where o.offer_status = 1 and DATE(substr(o.start_date,1,10)) <= ('%@') and DATE(substr(o.end_date,1,10)) >= ('%@') and day%@='1' and (o.sell_group_id IN ( select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '%@' ) or   o.offer_Id IN (select product.offer_id from offer_products product where product.plucode='%@') or o.offer_category='turn_over') and o.is_customer_specific !='1'",currentDateStr,currentDateStr,[NSString stringWithFormat:@"%d",weekDayNumber],cartItem,pluCodeStr];//-*-*
                    // o.sell_sku_ids like '%@'  -- (select product.offer_id from offer_products product where product.plucode=:pluCode)
                    //changed by Srinivasulu onc 19/08/2017 && 22/02/2018....
                    //from NSString to NSMutableString....
                    
                    availableOffersForItem = [NSMutableString stringWithFormat:@"select o.sell_group_id, o.closed_on, o.offer_start_time, o.offer_end_time, o.offer_Id, o.claim_coupons, o.claim_loyalty_points, o.claim_gift_vouchers, o.offer_category, o.offer_description, o.offer_name, o.sell_products, o.isRepeat, o.allow_multiple_discounts, o.reward_type, o.sell_sku_ids, o.is_combo, o.is_lowest_price_item, o.priority, o.offer_status, o.store_location, o.is_price_based_configuration,o.priority, o.product_specific_flag, o.start_date, o.end_date, o.product_category, o.product_sub_category from offer o where o.offer_status = 1 and DATE(substr(o.start_date,1,10)) <= ('%@') and DATE(substr(o.end_date,1,10)) >= ('%@') and day%@='1' and ((o.sell_group_id IN ( select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '%@' ) or   o.offer_Id IN (select product.offer_id from offer_products product where product.plucode='%@') or o.offer_category='turn_over'",currentDateStr,currentDateStr,[NSString stringWithFormat:@"%d",weekDayNumber],cartItem,pluCodeStr];
                    NSString * openBracess = @") or (";
                    NSString * closeBracess = @"))";
                    if ([skuInfo count] && [[skuInfo allKeys] containsObject:cartItem]) {
                        NSDictionary *categoryAndSubInfo = [skuInfo objectForKey:cartItem];
                        
             

                        if ([[categoryAndSubInfo allKeys] containsObject:kcategory]) {
                            
                            categoryFlag = true;
                            categoryValue = [categoryAndSubInfo valueForKey:kcategory];
                            if(categoryValue.length){
                            [availableOffersForItem appendString:[NSString stringWithFormat:@"  %@ product_category='%@'",openBracess,categoryValue]];
                                openBracess = @"";
                            }
                        }
                        
                        if ([[categoryAndSubInfo allKeys] containsObject:kSubCategory]) {
                           
                            subCategoryFlag = true;
                            subCategoryValue = [categoryAndSubInfo valueForKey:kSubCategory];
                            if(subCategoryValue.length){
                            [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_sub_category='%@'",openBracess,subCategoryValue]];
                                openBracess = @"";
                                
                            }
                        }
                        
                        if ([[categoryAndSubInfo allKeys] containsObject:kPrimaryDepartment]) {
                            
                            department = true;
                            departmentValue = [categoryAndSubInfo valueForKey:kPrimaryDepartment];
                            if(departmentValue.length){
                            [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_department='%@'",openBracess,departmentValue]];
                                openBracess = @"";
                            }
                        }
                        
                        if ([[categoryAndSubInfo allKeys] containsObject:kProductBrand]) {
                            
                            brand = true;
                            brandValue = [categoryAndSubInfo valueForKey:kProductBrand];
                            [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ brand='%@'",openBracess,brandValue]];
                        }
                        
                        if ([[categoryAndSubInfo allKeys] containsObject:SECTION]) {
                            
                            sectionFlag = true;
                            sectionFlag = [categoryAndSubInfo valueForKey:SECTION];
                            if(sectionValue.length){
                            [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ section='%@'",openBracess,sectionValue]];
                                openBracess = @"";
                            }
                        }
                    }

                    if(openBracess.length){
                        [availableOffersForItem appendString:closeBracess];
                        closeBracess = @"";
                    }
                    
                    [availableOffersForItem appendString:[NSString stringWithFormat:@" %@ and is_customer_specific!='1'",closeBracess]];
//                    [availableOffersForItem appendString:@") and is_customer_specific!='1' order by start_date DESC"];
                    
                    
                    NSMutableString   * availableDealsForItem = [NSMutableString stringWithFormat:@"select d.sell_group_id, d.closed_on, d.deal_start_time, d.deal_end_time, d.deal_Id, d.claim_coupons, d.claim_loyalty_points, d.claim_gift_vouchers, d.deal_category, d.deal_description, d.deal_name, d.sell_products, d.isRepeat, d.allow_multiple_discounts, d.sell_sku_ids, d.is_combo, d.is_lowest_price_item, d.priority, d.deal_group_id, d.deal_skus, d.deal_products, d.start_date, d.end_date, d.deal_plu_code, d.sell_plu_code from deal d where d.deal_status = 1 and d.store_location like '%%%@%%' and DATE(substr(d.start_date,1,10)) <= ('%@') and DATE(substr(d.end_date,1,10)) >= ('%@') and day%@='1' and ( d.sell_group_id IN ( select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '%@' ) or d.sell_sku_ids like '%@'  or  d.deal_category='turn_over' ) and d.is_customer_specific !='1'",presentLocation,currentDateStr,currentDateStr,[NSString stringWithFormat:@"%d",weekDayNumber],cartItem,cartItem];//-*-*
                    
                    
                    const char * select_Offer_Qry = availableOffersForItem.UTF8String ;
                    const char * select_Deal_Qry = availableDealsForItem.UTF8String ;
                    
                    
                    if (![campaignRequestModel.employeeCode isKindOfClass:[NSNull class]] && (campaignRequestModel.employeeCode).length>0) {
                        
                        campaignRequestModel.skuId = cartItem;
                        campaignRequestModel.pluCodeStr = pluCodeStr;
                        
                        applyDealsAndOfferResponse = [self fetchEmployeeSpecificCampaigns:campaignRequestModel categoryDetails:skuInfo];
                        if (![applyDealsAndOfferResponse[@"employeeSpecificOffers"] isKindOfClass:[NSNull class]] && [applyDealsAndOfferResponse[@"employeeSpecificOffers"] count] >0) {
                            
                            for (OfferModel *offer in applyDealsAndOfferResponse[@"employeeSpecificOffers"]) {
                                
                                offer.employeeSpecific = true;
                                [fetchedOffersList addObject:offer];
                            }
                        }
                    }
                    
                    
                    //added by Srinivasulu on 12/11/2018....
                    if (![campaignRequestModel.phonenumber isKindOfClass:[NSNull class]] && (campaignRequestModel.phonenumber).length>0) {
                        
                        campaignRequestModel.skuId = cartItem;
                        campaignRequestModel.pluCodeStr = pluCodeStr;
                        
//                        applyDealsAndOfferResponse = [self fetchCustomerSpecificCampaigns:campaignRequestModel categoryDetails:skuInfo];
                        [self fetchCustomerSpecificCampaigns:campaignRequestModel categoryDetails:skuInfo];
                        
                        if (![applyDealsAndOfferResponse[@"customerSpecificOffers"] isKindOfClass:[NSNull class]] && [applyDealsAndOfferResponse[@"customerSpecificOffers"] count] >0) {
                            
                            for (OfferModel *offer in applyDealsAndOfferResponse[@"customerSpecificOffers"]) {
                               
                                [fetchedOffersList addObject:offer];
                            }
                        }
                    }
                    //upto here on 12/11/2018....
                    
                    
                    
                    
                    BOOL offerStatusTime;
                     selectStmt = nil;
                    
                    if(sqlite3_prepare_v2(database, select_Offer_Qry, -1, &selectStmt, NULL) == SQLITE_OK) {
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            NSString * startDate = @((char *)sqlite3_column_text(selectStmt, 24));
                            NSString * endDate = @((char *)sqlite3_column_text(selectStmt, 25));
                            NSString * dealStartTime = @((char *)sqlite3_column_text(selectStmt, 2));
                            NSString * dealEndTime = @((char *)sqlite3_column_text(selectStmt, 3));
                            
                            offerStatusTime = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                            
                            if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {//--
                                if (offerStatusTime) {
                                    
                                    OfferModel *offerModel = [OfferModel new];//-*-*
                                    offerModel.offerStartDate = startDate;
                                    offerModel.offerEndDate = endDate;
                                    //                            offerModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    //                            if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                    //                                offerModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                    //                            offerModel.offerStartTime = dealStartTime;
                                    //                            offerModel.offerEndTime = dealEndTime;
                                    //                            offerModel.offerID = @((char *)sqlite3_column_text(selectStmt, 4));
                                    //                            offerModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                    //                            offerModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                    //                            offerModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                    //                            offerModel.offerCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                    //                            offerModel.offerDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                    //                            offerModel.offerName = @((char *)sqlite3_column_text(selectStmt, 10));
                                    //                            offerModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                    //                            offerModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                    //                            offerModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                    //                            offerModel.rewardType = @((char *)sqlite3_column_text(selectStmt, 14));
                                    //                            offerModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 15));
                                    //                            offerModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                    //                            offerModel.lowestPriceItem = sqlite3_column_int(selectStmt, 17) == 1 ? true:false;
                                    //                            offerModel.priority_int = sqlite3_column_int(selectStmt, 18);
                                    //                            offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 19));
                                    //                            offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 20));
                                    //                            offerModel.priceBasedConfigurationFlag = sqlite3_column_int(selectStmt, 21) == 1 ? true:false;
                                    //                            offerModel.isProductSpecificFlag = sqlite3_column_int(selectStmt, 23) == 1 ? true:false;
//                                                                offerModel.productCategory = @((char *)sqlite3_column_text(selectStmt, 26));
//                                                                offerModel.productSubCategory = @((char *)sqlite3_column_text(selectStmt, 27));

                                    if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                        offerModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                        offerModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                    offerModel.offerStartTime = dealStartTime;
                                    offerModel.offerEndTime = dealEndTime;
                                    if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                        offerModel.offerID = @((char *)sqlite3_column_text(selectStmt, 4));
                                    if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt, 5))
                                        offerModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                    if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt, 6))
                                        offerModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                    if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt, 7))
                                        offerModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                    if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt, 8))
                                        offerModel.offerCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                    if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt, 9))
                                        offerModel.offerDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                    if((sqlite3_column_text(selectStmt, 10) != nil) && (char *)sqlite3_column_text(selectStmt, 10))
                                        offerModel.offerName = @((char *)sqlite3_column_text(selectStmt, 10));
                                    if((sqlite3_column_text(selectStmt, 11) != nil) && (char *)sqlite3_column_text(selectStmt, 11))
                                        offerModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                    if((sqlite3_column_text(selectStmt, 12) != nil) && (char *)sqlite3_column_text(selectStmt, 12))
                                        offerModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 13) != nil) && (char *)sqlite3_column_text(selectStmt, 13))
                                        offerModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 14) != nil) && (char *)sqlite3_column_text(selectStmt, 14))
                                        offerModel.rewardType = @((char *)sqlite3_column_text(selectStmt, 14));
                                    if((sqlite3_column_text(selectStmt, 15) != nil) && (char *)sqlite3_column_text(selectStmt, 15))
                                        offerModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 15));
                                    if((sqlite3_column_text(selectStmt, 16) != nil) && (char *)sqlite3_column_text(selectStmt, 16))
                                        offerModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 17) != nil) && (char *)sqlite3_column_text(selectStmt, 17))
                                        offerModel.lowestPriceItem = sqlite3_column_int(selectStmt, 17) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 18) != nil) && (char *)sqlite3_column_text(selectStmt, 18))
                                        offerModel.priority_int = sqlite3_column_int(selectStmt, 18);
                                    if((sqlite3_column_text(selectStmt, 19) != nil) && (char *)sqlite3_column_text(selectStmt, 19))
                                        offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 19));
                                    if((sqlite3_column_text(selectStmt, 20) != nil) && (char *)sqlite3_column_text(selectStmt, 20))
                                        offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 20));
                                    if((sqlite3_column_text(selectStmt, 21) != nil) && (char *)sqlite3_column_text(selectStmt, 21))
                                        offerModel.priceBasedConfigurationFlag = sqlite3_column_int(selectStmt, 21) == 1 ? true:false;
                                    //store_location
                                    if((sqlite3_column_text(selectStmt, 23) != nil) && (char *)sqlite3_column_text(selectStmt, 23))
                                        offerModel.isProductSpecificFlag = sqlite3_column_int(selectStmt, 23) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 26) != nil) && (char *)sqlite3_column_text(selectStmt, 26))
                                        offerModel.productCategory = @((char *)sqlite3_column_text(selectStmt, 26));
                                    if((sqlite3_column_text(selectStmt, 27) != nil) && (char *)sqlite3_column_text(selectStmt, 27))
                                            offerModel.productSubCategory = @((char *)sqlite3_column_text(selectStmt, 27));
                                    
                                    
                                    [fetchedOffersList addObject:offerModel];
                                }
                            }
                        }
                    }
                    else {
                        
                        NSLog(@"%s",sqlite3_errmsg(database));
                    }
                    
                    for (int b = 0; b < fetchedOffersList.count; b++) {
                        OfferModel * offerModelObj = fetchedOffersList[b];
                        ApplyOfferModel * applyOfferModel = [ApplyOfferModel new];
                        NSMutableArray * rangesGroupIdsList = [NSMutableArray new];
                        
                        NSMutableArray * sellSkuIdsList = [NSMutableArray new];
                        if (![offerModelObj.sellGroupId isKindOfClass:[NSNull class]]) {
                            NSArray *sellGroupIdArr = [offerModelObj.sellGroupId componentsSeparatedByString:@","];
                            for (NSString * sellGroupId in sellGroupIdArr) {
                                [sellSkuIdsList addObjectsFromArray:[self getSkuidsForGroupId:sellGroupId cartItemsList:skuIdList]];
                            }
                            offerModelObj.skusList = sellSkuIdsList;
                        }
                        if ((offerModelObj.sellSkuids).length == 0) {
                            //                    NSString *skuIDs = @"";
                            //                    for (NSString *str in sellSkuIdsList) {
                            //                        skuIDs = [NSString stringWithFormat:@"%@%@%@",skuIDs,str,@","];
                            //                    }
                            
                            NSString *skuIDs = [sellSkuIdsList componentsJoinedByString:@","];
                            
                            offerModelObj.sellSkuids = skuIDs;
                        }
                        
                        NSString * select_offer_ranges1 = [NSString stringWithFormat:@"select * from offer_ranges where offer_id= '%@' order by minimum_purchase_quantity desc",offerModelObj.offerID];
                        select_offer_ranges1 = [NSString stringWithFormat:@"select group_id, item_id, minimum_purchase_quantity, minimum_purchase_amount, reward_type, reward_value, start_price_range, end_price_range, reward_qty, range_mode  from offer_ranges where offer_id= '%@' order by minimum_purchase_quantity desc",offerModelObj.offerID];
                        
                        const char * select_itemSpecRange1 = select_offer_ranges1.UTF8String ;
                        NSMutableArray * rangesArr = [[NSMutableArray alloc] init];
                        
                        if(sqlite3_prepare_v2(database, select_itemSpecRange1, -1, &selectStmt, NULL) == SQLITE_OK) {
                            //                int count = sqlite3_column_count(selectStmt);
                            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                                OfferRangesModel *offerRangeModel = [OfferRangesModel new];
                                
                                offerRangeModel.offerId = offerModelObj.offerID;
                                
                                //                                offerRangeModel.groupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                //                                offerRangeModel.itemId = @((char *)sqlite3_column_text(selectStmt, 1));
                                //                                offerRangeModel.minimumPurchaseQuantity = sqlite3_column_double(selectStmt, 2);;
                                //                                offerRangeModel.minimumPurchaseamount = sqlite3_column_double(selectStmt, 3);;
                                //                                offerRangeModel.rangeRewardType = @((char *)sqlite3_column_text(selectStmt, 4));
                                //                                offerRangeModel.rewardValue = sqlite3_column_double(selectStmt, 5);;
                                //                                offerRangeModel.startRangePrice = sqlite3_column_double(selectStmt, 6);
                                //                                offerRangeModel.endRangePrice = sqlite3_column_double(selectStmt, 7);
                                //                                offerRangeModel.rewardQty = sqlite3_column_double(selectStmt, 8);
                                //                                offerRangeModel.rangeMode = @((char *)sqlite3_column_text(selectStmt, 9));
                                
                                if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                    offerRangeModel.groupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                    offerRangeModel.itemId = @((char *)sqlite3_column_text(selectStmt, 1));
                                if((sqlite3_column_text(selectStmt, 2) != nil) && (char *)sqlite3_column_text(selectStmt, 2))
                                    offerRangeModel.minimumPurchaseQuantity = sqlite3_column_double(selectStmt, 2);
                                if((sqlite3_column_text(selectStmt, 3) != nil) && (char *)sqlite3_column_text(selectStmt, 3))
                                    offerRangeModel.minimumPurchaseamount = sqlite3_column_double(selectStmt, 3);
                                if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                    offerRangeModel.rangeRewardType = @((char *)sqlite3_column_text(selectStmt, 4));
                                if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt, 5))
                                    offerRangeModel.rewardValue = sqlite3_column_double(selectStmt, 5);;
                                if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt, 6))
                                    offerRangeModel.startRangePrice = sqlite3_column_double(selectStmt, 6);
                                if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt, 7))
                                    offerRangeModel.endRangePrice = sqlite3_column_double(selectStmt, 7);
                                if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt, 8))
                                    offerRangeModel.rewardQty = sqlite3_column_double(selectStmt, 8);
                                if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt, 9))
                                    offerRangeModel.rangeMode = @((char *)sqlite3_column_text(selectStmt, 9));
                                
                                [rangesArr addObject:offerRangeModel];
                            }
                        }
                        applyOfferModel.offerID = offerModelObj.offerID;
                        applyOfferModel.claimCoupons_int = offerModelObj.claimCoupons_int;
                        applyOfferModel.claimgiftvouchers_int = offerModelObj.claimgiftvouchers_int;
                        applyOfferModel.claimLoyaltypoints_int = offerModelObj.claimLoyaltypoints_int;
                        applyOfferModel.offerCategory = offerModelObj.offerCategory;
                        applyOfferModel.offerDescription = offerModelObj.offerDescription;
                        applyOfferModel.offerName = offerModelObj.offerName;
                        applyOfferModel.sellProducts = offerModelObj.sellProducts;
                        applyOfferModel.repeat = offerModelObj.repeat;
                        applyOfferModel.allowMultipleDiscounts = offerModelObj.allowMultipleDiscounts;
                        applyOfferModel.rewardType = offerModelObj.rewardType;
                        applyOfferModel.sellSkuids = offerModelObj.sellSkuids;
                        applyOfferModel.sellGroupID = offerModelObj.sellGroupId;
                        applyOfferModel.combo = offerModelObj.combo;
                        applyOfferModel.lowestPriceItem = offerModelObj.lowestPriceItem;
                        applyOfferModel.priority_int = offerModelObj.priority_int;
                        applyOfferModel.offerStartDate = offerModelObj.offerStartDate;
                        applyOfferModel.offerEndDate = offerModelObj.offerEndDate;
                        applyOfferModel.productCategory = offerModelObj.productCategory;//-*-* -- need to be removed..
                        applyOfferModel.productSubCategory = offerModelObj.productSubCategory;
                        applyOfferModel.priceBasedConfigurationFlag = offerModelObj.priceBasedConfigurationFlag;
                        applyOfferModel.isProductSpecificFlag = offerModelObj.isProductSpecificFlag;
                        
                        NSMutableArray * offerSlabsList = [NSMutableArray new];
                        
                        if(offerModelObj.isProductSpecificFlag){//-*-* -- need some more modifications..
                            
                            NSString * selectProductSpecificItems = [NSString stringWithFormat:@"Select offer_id, sku_id, min_purchase_qty, reward_value, category, sub_category, brand,section, department, model, plucode, reward_qty, discount_type from offer_products where offer_id ='%@'",offerModelObj.offerID];
                            
                            
                            const char * selectProductSpecificItemsQuery = selectProductSpecificItems.UTF8String ;
                            NSMutableArray * productListArr = [[NSMutableArray alloc] init];
                            
                            if(sqlite3_prepare_v2(database, selectProductSpecificItemsQuery, -1, &selectStmt, NULL) == SQLITE_OK) {
                                
                                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                                    OfferProducts * tempObj = [OfferProducts new];
                                    
                                    //                                    tempObj.offerId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    //                                    tempObj.skuId = @((char *)sqlite3_column_text(selectStmt, 1));
                                    //                                    tempObj.minPurchaseQty = sqlite3_column_double(selectStmt, 2);
                                    //                                    tempObj.rewardValue = sqlite3_column_double(selectStmt, 3);
                                    //                                    tempObj.category = @((char *)sqlite3_column_text(selectStmt, 4));
                                    //                                    tempObj.subCategory = @((char *)sqlite3_column_text(selectStmt, 5));
                                    //                                    tempObj.brand = @((char *)sqlite3_column_text(selectStmt, 6));
                                    //                                    tempObj.section = @((char *)sqlite3_column_text(selectStmt, 7));
                                    //                                    tempObj.department = @((char *)sqlite3_column_text(selectStmt, 8));
                                    //                                    tempObj.model = @((char *)sqlite3_column_text(selectStmt, 9));
                                    //                                    tempObj.plucode = @((char *)sqlite3_column_text(selectStmt, 10));
                                    //                                    tempObj.rewardQty = sqlite3_column_double(selectStmt, 11);
                                    //                                    tempObj.discountType = @((char *)sqlite3_column_text(selectStmt, 12));
                                    
                                    if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                        tempObj.offerId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                        tempObj.skuId = @((char *)sqlite3_column_text(selectStmt, 1));
                                    if((sqlite3_column_text(selectStmt, 2) != nil) && (char *)sqlite3_column_text(selectStmt, 2))
                                        tempObj.minPurchaseQty = sqlite3_column_double(selectStmt, 2);
                                    if((sqlite3_column_text(selectStmt, 3) != nil) && (char *)sqlite3_column_text(selectStmt, 3))
                                        tempObj.rewardValue = sqlite3_column_double(selectStmt, 3);
                                    if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                        tempObj.category = @((char *)sqlite3_column_text(selectStmt, 4));
                                    if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt, 5))
                                        tempObj.subCategory = @((char *)sqlite3_column_text(selectStmt, 5));
                                    if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt, 6))
                                        tempObj.brand = @((char *)sqlite3_column_text(selectStmt, 6));
                                    if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt, 7))
                                        tempObj.section = @((char *)sqlite3_column_text(selectStmt, 7));
                                    if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt, 8))
                                        tempObj.department = @((char *)sqlite3_column_text(selectStmt, 8));
                                    if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt, 9))
                                        tempObj.model = @((char *)sqlite3_column_text(selectStmt, 9));
                                    if((sqlite3_column_text(selectStmt, 10) != nil) && (char *)sqlite3_column_text(selectStmt, 10))
                                        tempObj.plucode = @((char *)sqlite3_column_text(selectStmt, 10));
                                    if((sqlite3_column_text(selectStmt, 11) != nil) && (char *)sqlite3_column_text(selectStmt, 11))
                                        tempObj.rewardQty = sqlite3_column_double(selectStmt, 11);
                                    if((sqlite3_column_text(selectStmt, 12) != nil) && (char *)sqlite3_column_text(selectStmt, 12))
                                        tempObj.discountType = @((char *)sqlite3_column_text(selectStmt, 12));
                                    
                                    [productListArr addObject:tempObj];
                                }
                            }
                            
                            
                            if([productListArr count] == 0){
                                //Still need to right code here...
                                
                                
                            }
                            
                            
                            
                            applyOfferModel.offerProductsList = productListArr;
                        }
                        
                        //-*-* changed on 03/11/2018....
                        //else
                         if((!offerModelObj.isProductSpecificFlag) || (applyOfferModel.offerProductsList.count == 0 &&offerModelObj.isProductSpecificFlag)){
                            for (OfferRangesModel * offerRange in rangesArr) {
                                BOOL groupItemsRead = false;
                                
                                if ([offerRange.rangeMode isEqualToString:@"condition"] || [offerRange.rangeMode isEqualToString:@"both"])//-*-*
                                    applyOfferModel.minimumPurchaseQty = offerRange.minimumPurchaseQuantity;
                                
                                offerRange.itemsList =     offerModelObj.skusList;//-*-*
                                //                                offerRange.itemsList = [self getSkuidsForGroupId:applyOfferModel.sellGroupID cartItemsList:skuIdList];
                                
                                
                                if (![rangesGroupIdsList containsObject:offerRange.groupId] && [offerRange.groupId caseInsensitiveCompare:@"all"] != NSOrderedSame) {
                                    [rangesGroupIdsList addObject:offerRange.groupId];
                                }
                                
                                if(applyOfferModel.lowestPriceItem && offerRange.groupId != NULL && (offerRange.groupId).length > 0){
                                    
                                    offerRange.itemsList = [self getSkuidsForGroupId:offerRange.groupId cartItemsList:skuIdList];
                                    groupItemsRead = true;
                                    offerRange.groupItemsList = offerRange.itemsList;
                                }
                                //added by Srinivasulu on 08/09/2017....commented on 23/10/2018
                                
                                //                                else if( (offerRange.groupId != NULL) && ((offerRange.groupId).length > 0)){
                                //
                                //                                    offerRange.itemsList = [self getSkuidsForGroupId:offerRange.groupId cartItemsList:skuIdList];
                                //                                    groupItemsRead = true;
                                //                                    offerRange.groupItemsList = [self getSkuidsForGroupId:offerRange.groupId cartItemsList:skuIdList];
                                //                                }
                                
                                //upto here on 08/09/2017....
                                
                                if(applyOfferModel.combo) {
                                    offerRange.itemsList = [self getSkuidsForGroupId:offerRange.groupId cartItemsList:skuIdList];
                                    groupItemsRead = true;
                                    offerRange.groupItemsList = offerRange.itemsList;
                                    if(offerRange.itemsList.count == 0){
                                        if(offerRange.itemId != NULL && (offerRange.itemId).length > 0){
                                            offerRange.itemsList = [[NSMutableArray alloc] initWithArray:[offerRange.itemId componentsSeparatedByString:@","]];
                                        }
                                    }
                                }
                                
                                if (applyOfferModel.sellGroupID != NULL && (applyOfferModel.sellGroupID).length == 0 && ![applyOfferModel.sellGroupID isEqualToString:@""]) {
                                    NSArray *skusArr = [applyOfferModel.sellSkuids componentsSeparatedByString:@","];
                                    
                                    NSMutableArray *itemsList = [[NSMutableArray alloc] initWithArray:skusArr];
                                    offerRange.itemsList = itemsList;
                                }
                                
                                //-*-*--
                                if (!groupItemsRead && offerRange.groupId != nil && ![offerRange.groupId isEqualToString:@""]) {
                                    offerRange.groupItemsList = [self  getSkuidsForGroupId:offerRange.groupId cartItemsList:skuIdList];
                                }
                                
                                applyOfferModel.minimumPurchaseAmt = offerRange.minimumPurchaseamount;
                                applyOfferModel.rewardValue = offerRange.rewardValue;
                                applyOfferModel.rewardType = offerRange.rangeRewardType;//-*-*
                                
                                
                                // added on 03.02.2017
                                if([offerRange.itemsList isKindOfClass:[NSNull class]] || (offerRange.itemsList).count==0)
                                {
                                    NSMutableArray *skuList=[NSMutableArray new];
                                    if([listOfSkusUnderCategory.allKeys containsObject:applyOfferModel.productCategory]){
                                        
                                        
                                        [skuList addObjectsFromArray:[listOfSkusUnderCategory valueForKey:applyOfferModel.productCategory]];
                                        // skuList.addAll(listOfSkusUnderCategory.get(offer_obj.getProductCategory()));
                                    }
                                    
                                    if([listOfSkusUnderCategory.allKeys containsObject:applyOfferModel.productSubCategory]){
                                        
                                        [skuList addObjectsFromArray:[listOfSkusUnderCategory valueForKey:applyOfferModel.productSubCategory]];
                                        // skuList.addAll(listOfSkusUnderCategory.get(offer_obj.getProductCategory()));
                                    }
                                    
                                    offerRange.itemsList = skuList;
                                    
                                    //                                NSArray uniqueSkus=dealObj.removeDuplicateSkus(skuList);
                                    //                                offerRanges.setItemsList(uniqueSkus);
                                    //
                                    //                                offerRanges.setItemsList(skuList);
                                }
                                
                                [offerSlabsList addObject:offerRange];
                                
                            }
                        }
                        
                        
                        offerModelObj.offerRangesList = rangesArr;
                        applyOfferModel.offerRangesList = offerSlabsList;
                        applyOfferModel.employeeSpecific = offerModelObj.employeeSpecific;//-*-*
                        //added by Srinivasulu on 08/09/2017....
                        
                        //                            applyOfferModel.priceBasedConfigurationFlag =
                        //                            --
                        if(offerModelObj.priceBasedConfigurationFlag){
                            
                            [priceBasedItemspecificOffers addObject:applyOfferModel];
                        }
                        else{
                            
                            //upto here on 08/09/2017....
                            
                            
                            
                            if ([applyOfferModel.offerCategory caseInsensitiveCompare:@"item_specific"] == NSOrderedSame) {
                                if (applyOfferModel.priority_int == 1) {
                                    if (applyOfferModel.combo || applyOfferModel.lowestPriceItem) {
                                        int count = (int)rangesGroupIdsList.count;
                                        NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:groupIdList];
                                        NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:rangesGroupIdsList];
                                        
                                        [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                                        
                                        rangesGroupIdsList = [set1.allObjects mutableCopy];
                                        
                                        if (rangesGroupIdsList.count == count && count != 0) {
                                            if (offerModelObj.lowestPriceItem) {
                                                if (![priorityItemSpecificOffersList containsObject:applyOfferModel]) {
                                                    [priorityItemSpecificOffersList addObject:applyOfferModel];
                                                }
                                            } else if (![priorityItemSpecificOffersList containsObject:applyOfferModel]){
                                                [priorityItemSpecificOffersList addObject:applyOfferModel];
                                            }
                                        }
                                        //List<String> offerRangesGroupIds=session.createQuery("select ");
                                    } else if (![priorityItemSpecificOffersList containsObject:applyOfferModel]){
                                        [priorityItemSpecificOffersList addObject:applyOfferModel];
                                    }
                                } else if (![nonPriorityItemSpecificOffersList containsObject:applyOfferModel]){
                                    [nonPriorityItemSpecificOffersList addObject:applyOfferModel];
                                }
                            } else {
                                if (![offersList1 containsObject:applyOfferModel] && [applyOfferModel.offerCategory caseInsensitiveCompare:@"group_turn_over"] != NSOrderedSame) {
                                    [groupTurnOverOffersList addObject:applyOfferModel];
                                }
                                else{
                                    
                                    if (offerModelObj.priority_int == 1) {
                                        int count = (int)rangesGroupIdsList.count;
                                        NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:groupIdList];
                                        NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:rangesGroupIdsList];
                                        
                                        [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                                        
                                        rangesGroupIdsList = [set1.allObjects mutableCopy];
                                        
                                        if (rangesGroupIdsList.count == count && count != 0 &&  ![priorityTurnOverOffersList containsObject:applyOfferModel]) {
                                            [priorityTurnOverOffersList addObject:applyOfferModel];
                                            
                                        }
                                        
                                    } else {
                                        int count = (int)rangesGroupIdsList.count;
                                        NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:groupIdList];
                                        NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:rangesGroupIdsList];
                                        
                                        [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                                        
                                        rangesGroupIdsList = [set1.allObjects mutableCopy];
                                        if (rangesGroupIdsList.count == count && count != 0 && ![nonPriorityTurnOverOffersList containsObject:applyOfferModel]) {
                                            [nonPriorityTurnOverOffersList addObject:applyOfferModel];
                                            
                                        }
                                    }
                                    if (![turnOverOffersList containsObject:applyOfferModel]) {
                                        [turnOverOffersList addObject:applyOfferModel];
                                    }
                                }
                                
                            }
                            //added by
                        }
                        //end of checking price based configurations..... written on 08/09/2017...
                        
                        if (![offersList1 containsObject:applyOfferModel] && [applyOfferModel.offerCategory caseInsensitiveCompare:@"turn_over"] != NSOrderedSame) {
                            [offersList1 addObject:offerModelObj];
                        }
                    }
                    
                    //deals query.....
                    
                    NSMutableArray *fetchedDealsList = [NSMutableArray new];
                    
                    //check for employee deals...
                    
                    if (![applyDealsAndOfferResponse[@"employeeSpecificDeals"] isKindOfClass:[NSNull class]] && [applyDealsAndOfferResponse[@"employeeSpecificDeals"] count] >0) {
                        
                        for (DealModel *deals in applyDealsAndOfferResponse[@"employeeSpecificDeals"]) {
                            
                            deals.employeeSpecific = true;
                            [fetchedDealsList addObject:deals];
                        }
                    }
                    //==--00

                    //added by Srinivasulu on 13/11/2018....
                    if (![applyDealsAndOfferResponse[@"customerSpecificDeals"] isKindOfClass:[NSNull class]] && [applyDealsAndOfferResponse[@"customerSpecificDeals"] count] >0)
                    for (DealModel * deals in applyDealsAndOfferResponse[@"customerSpecificDeals"]) {
                        
                        [fetchedDealsList addObject:deals];
                    }
                    
                    //-*-*
                    
                    availableOffersForItem = [NSMutableString stringWithFormat:@"select o.sell_group_id, o.closed_on, o.offer_start_time, o.offer_end_time, o.offer_Id, o.claim_coupons, o.claim_loyalty_points, o.claim_gift_vouchers, o.offer_category, o.offer_description, o.offer_name, o.sell_products, o.isRepeat, o.allow_multiple_discounts, o.reward_type, o.sell_sku_ids, o.is_combo, o.is_lowest_price_item, o.priority, o.offer_status, o.store_location, o.is_price_based_configuration,o.priority, o.product_specific_flag, o.start_date, o.end_date, o.product_category, o.product_sub_category from offer o where o.offer_status = 1 and DATE(substr(o.start_date,1,10)) <= ('%@') and DATE(substr(o.end_date,1,10)) >= ('%@') and day%@='1' and o.is_price_based_configuration= 1 and o.is_for_all_items='1'",currentDateStr,currentDateStr,[NSString stringWithFormat:@"%d",weekDayNumber]];
                    
                    select_Offer_Qry = availableOffersForItem.UTF8String ;
                    if(sqlite3_prepare_v2(database, select_Offer_Qry, -1, &selectStmt, NULL) == SQLITE_OK) {
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            NSString * startDate = @((char *)sqlite3_column_text(selectStmt, 24));
                            NSString * endDate = @((char *)sqlite3_column_text(selectStmt, 25));
                            NSString * dealStartTime = @((char *)sqlite3_column_text(selectStmt, 2));
                            NSString * dealEndTime = @((char *)sqlite3_column_text(selectStmt, 3));
                            
                            offerStatusTime = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                            
                            if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {//--
                                if (offerStatusTime) {
                                    
                                    OfferModel *offerModel = [OfferModel new];//-*-*
                                    offerModel.offerStartDate = startDate;
                                    offerModel.offerEndDate = endDate;
                                    //                            offerModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    //                            if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                    //                                offerModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                    //                            offerModel.offerStartTime = dealStartTime;
                                    //                            offerModel.offerEndTime = dealEndTime;
                                    //                            offerModel.offerID = @((char *)sqlite3_column_text(selectStmt, 4));
                                    //                            offerModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                    //                            offerModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                    //                            offerModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                    //                            offerModel.offerCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                    //                            offerModel.offerDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                    //                            offerModel.offerName = @((char *)sqlite3_column_text(selectStmt, 10));
                                    //                            offerModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                    //                            offerModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                    //                            offerModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                    //                            offerModel.rewardType = @((char *)sqlite3_column_text(selectStmt, 14));
                                    //                            offerModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 15));
                                    //                            offerModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                    //                            offerModel.lowestPriceItem = sqlite3_column_int(selectStmt, 17) == 1 ? true:false;
                                    //                            offerModel.priority_int = sqlite3_column_int(selectStmt, 18);
                                    //                            offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 19));
                                    //                            offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 20));
                                    //                            offerModel.priceBasedConfigurationFlag = sqlite3_column_int(selectStmt, 21) == 1 ? true:false;
                                    //                            offerModel.isProductSpecificFlag = sqlite3_column_int(selectStmt, 23) == 1 ? true:false;
//                                        offerModel.productCategory = @((char *)sqlite3_column_text(selectStmt, 26));
//                                        offerModel.productSubCategory = @((char *)sqlite3_column_text(selectStmt, 27));
                                    
                                    
                                    if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                        offerModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                        offerModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                    offerModel.offerStartTime = dealStartTime;
                                    offerModel.offerEndTime = dealEndTime;
                                    if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                        offerModel.offerID = @((char *)sqlite3_column_text(selectStmt, 4));
                                    if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt, 5))
                                        offerModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                    if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt, 6))
                                        offerModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                    if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt, 7))
                                        offerModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                    if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt, 8))
                                        offerModel.offerCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                    if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt, 9))
                                        offerModel.offerDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                    if((sqlite3_column_text(selectStmt, 10) != nil) && (char *)sqlite3_column_text(selectStmt, 10))
                                        offerModel.offerName = @((char *)sqlite3_column_text(selectStmt, 10));
                                    if((sqlite3_column_text(selectStmt, 11) != nil) && (char *)sqlite3_column_text(selectStmt, 11))
                                        offerModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                    if((sqlite3_column_text(selectStmt, 12) != nil) && (char *)sqlite3_column_text(selectStmt, 12))
                                        offerModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 13) != nil) && (char *)sqlite3_column_text(selectStmt, 13))
                                        offerModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 14) != nil) && (char *)sqlite3_column_text(selectStmt, 14))
                                        offerModel.rewardType = @((char *)sqlite3_column_text(selectStmt, 14));
                                    if((sqlite3_column_text(selectStmt, 15) != nil) && (char *)sqlite3_column_text(selectStmt, 15))
                                        offerModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 15));
                                    if((sqlite3_column_text(selectStmt, 16) != nil) && (char *)sqlite3_column_text(selectStmt, 16))
                                        offerModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 17) != nil) && (char *)sqlite3_column_text(selectStmt, 17))
                                        offerModel.lowestPriceItem = sqlite3_column_int(selectStmt, 17) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 18) != nil) && (char *)sqlite3_column_text(selectStmt, 18))
                                        offerModel.priority_int = sqlite3_column_int(selectStmt, 18);
                                    if((sqlite3_column_text(selectStmt, 19) != nil) && (char *)sqlite3_column_text(selectStmt, 19))
                                        offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 19));
                                    if((sqlite3_column_text(selectStmt, 20) != nil) && (char *)sqlite3_column_text(selectStmt, 20))
                                        offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 20));
                                    if((sqlite3_column_text(selectStmt, 21) != nil) && (char *)sqlite3_column_text(selectStmt, 21))
                                        offerModel.priceBasedConfigurationFlag = sqlite3_column_int(selectStmt, 21) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 23) != nil) && (char *)sqlite3_column_text(selectStmt, 23))
                                        offerModel.isProductSpecificFlag = sqlite3_column_int(selectStmt, 23) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 26) != nil) && (char *)sqlite3_column_text(selectStmt, 26))
                                        offerModel.productCategory = @((char *)sqlite3_column_text(selectStmt, 26));
                                    if((sqlite3_column_text(selectStmt, 27) != nil) && (char *)sqlite3_column_text(selectStmt, 27))
                                        offerModel.productSubCategory = @((char *)sqlite3_column_text(selectStmt, 27));
                                    
                                    [flatOfferForAllItemsList addObject:offerModel];
                                }
                            }
                        }
                    }
                    
                    //-*-*
                    
                    
                    
                    
                    BOOL dealStatusTime;
                    //
                    if(sqlite3_prepare_v2(database, select_Deal_Qry, -1, &selectStmt, NULL) == SQLITE_OK) {
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            DealModel *dealModel = [DealModel new];//-*-*
                            
                            NSString *startDate = @((char *)sqlite3_column_text(selectStmt, 21));
                            NSString *endDate = @((char *)sqlite3_column_text(selectStmt, 22));
                            NSString *dealStartTime = @((char *)sqlite3_column_text(selectStmt, 2));
                            NSString *dealEndTime = @((char *)sqlite3_column_text(selectStmt, 3));
                            
                            
                            dealStatusTime = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                            
                            if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                                if (dealStatusTime) {
                                    dealModel.dealStartDate = startDate;
                                    dealModel.dealEndDate = endDate;
                                    dealModel.dealStartTime = dealStartTime;
                                    dealModel.dealEndTime = dealEndTime;
                                    
                                    //                            dealModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    //                            dealModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                    //                            dealModel.dealStartTime = dealStartTime;
                                    //                            dealModel.dealEndDate = dealEndTime;
                                    //                            dealModel.dealID = @((char *)sqlite3_column_text(selectStmt, 4));
                                    //                            dealModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                    //                            dealModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                    //                            dealModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                    //                            dealModel.dealCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                    //                            dealModel.dealDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                    //                            dealModel.dealName = @((char *)sqlite3_column_text(selectStmt, 10));
                                    //                            dealModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                    //                            dealModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                    //                            dealModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                    //                            dealModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 14));
                                    //                            dealModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                    //                            dealModel.lowestPriceItem = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                    //                            dealModel.priority_int = sqlite3_column_int(selectStmt, 17);
                                    //                            dealModel.dealGroupId = @((char *)sqlite3_column_text(selectStmt, 18));
                                    //                            dealModel.dealSkus = @((char *)sqlite3_column_text(selectStmt, 19));
                                    //                            dealModel.dealProducts = @((char *)sqlite3_column_text(selectStmt, 20));
                                    //                            dealModel.dealPluCode = @((char *)sqlite3_column_text(selectStmt, 23));
                                    //                            dealModel.sellPluCode = @((char *)sqlite3_column_text(selectStmt, 24));
                                    
                                    if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                        dealModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                        dealModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                    dealModel.dealStartTime = dealStartTime;
                                    dealModel.dealEndDate = dealEndTime;
                                    if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                        dealModel.dealID = @((char *)sqlite3_column_text(selectStmt, 4));
                                    if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt, 5))
                                        dealModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                    if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt, 6))
                                        dealModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                    if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt, 7))
                                        dealModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                    if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt, 8))
                                        dealModel.dealCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                    if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt, 9))
                                        dealModel.dealDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                    if((sqlite3_column_text(selectStmt, 10) != nil) && (char *)sqlite3_column_text(selectStmt, 10))
                                        dealModel.dealName = @((char *)sqlite3_column_text(selectStmt, 10));
                                    if((sqlite3_column_text(selectStmt, 11) != nil) && (char *)sqlite3_column_text(selectStmt, 11))
                                        dealModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                    if((sqlite3_column_text(selectStmt, 12) != nil) && (char *)sqlite3_column_text(selectStmt, 12))
                                        dealModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 13) != nil) && (char *)sqlite3_column_text(selectStmt, 13))
                                        dealModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 14) != nil) && (char *)sqlite3_column_text(selectStmt, 14))
                                        dealModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 14));
                                    if((sqlite3_column_text(selectStmt, 15) != nil) && (char *)sqlite3_column_text(selectStmt, 15))
                                        dealModel.combo = sqlite3_column_int(selectStmt, 15) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 16) != nil) && (char *)sqlite3_column_text(selectStmt, 16))
                                        dealModel.lowestPriceItem = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                    if((sqlite3_column_text(selectStmt, 17) != nil) && (char *)sqlite3_column_text(selectStmt, 17))
                                        dealModel.priority_int = sqlite3_column_int(selectStmt, 17);
                                    if((sqlite3_column_text(selectStmt, 18) != nil) && (char *)sqlite3_column_text(selectStmt, 18))
                                        dealModel.dealGroupId = @((char *)sqlite3_column_text(selectStmt, 18));
                                    if((sqlite3_column_text(selectStmt, 19) != nil) && (char *)sqlite3_column_text(selectStmt, 19))
                                        dealModel.dealSkus = @((char *)sqlite3_column_text(selectStmt, 19));
                                    if((sqlite3_column_text(selectStmt, 20) != nil) && (char *)sqlite3_column_text(selectStmt, 20))
                                        dealModel.dealProducts = @((char *)sqlite3_column_text(selectStmt, 20));
                                    if((sqlite3_column_text(selectStmt, 23) != nil) && (char *)sqlite3_column_text(selectStmt, 23)){
                                        dealModel.dealPluCode = @((char *)sqlite3_column_text(selectStmt, 23));
                                        if([dealModel.dealPluCode length])
                                            dealModel.ispluSpecificDeal = true;
                                    }
                                    if((sqlite3_column_text(selectStmt, 24) != nil) && (char *)sqlite3_column_text(selectStmt, 24)){
                                        dealModel.sellPluCode = @((char *)sqlite3_column_text(selectStmt, 24));
                                        if([dealModel.sellPluCode length])
                                            dealModel.ispluSpecificDeal = true;
                                    }
                                    
                                    
                                    [fetchedDealsList addObject:dealModel];
                                }
                            }
                        }
                    }
                    
                    for (int d = 0; d < fetchedDealsList.count; d++) {
                        DealModel *dealModelObj = fetchedDealsList[d];
                        ApplyDealModel *applyDealModel = [ApplyDealModel new];
                        NSMutableArray *rangesGroupIdsList = [NSMutableArray new];
                        
                        if (![dealModelObj.sellGroupId isKindOfClass:[NSNull class]]) {
                            NSMutableArray *sellSkuIdsList = [NSMutableArray new];
                            NSArray *sellGroupIdArr = [dealModelObj.sellGroupId componentsSeparatedByString:@","];
                            NSString *skuIDs = @"";
                            for (int c = 0; c < sellGroupIdArr.count; c++) {
                                [sellSkuIdsList addObjectsFromArray:[self getSkuidsForGroupId:sellGroupIdArr[c] cartItemsList:skuIdList]];
                                
                                // [sellSkuIdsList addObjectsFromArray:[self getDealSkuidsForGroupId:[sellGroupIdArr objectAtIndex:c]]];
                                
                            }
                            dealModelObj.skusList = sellSkuIdsList;
                            if ((dealModelObj.sellSkuids).length == 0) {
                                //                        for (NSString *str in sellSkuIdsList) {
                                //                            skuIDs = [NSString stringWithFormat:@"%@%@%@",skuIDs,str,@","];
                                //                        }
                                
                                skuIDs = [sellSkuIdsList componentsJoinedByString:@","];
                                
                                dealModelObj.sellSkuids = skuIDs;
                            }
                            NSString *select_deals_ranges = [NSString stringWithFormat:@"select group_id, minimum_purchase_quantity, minimum_purchase_amount, deal_quantity, range_mode  from deals_ranges where deal_id= '%@' order by minimum_purchase_amount",dealModelObj.dealID];
                            
                            const char *select_tuenOverDealsRange = select_deals_ranges.UTF8String ;
                            NSMutableArray *dealRangesArr = [[NSMutableArray alloc] init];
                            
                            if(sqlite3_prepare_v2(database, select_tuenOverDealsRange, -1, &selectStmt, NULL) == SQLITE_OK) {
                                //                int count = sqlite3_column_count(selectStmt);
                                while (sqlite3_step(selectStmt) == SQLITE_ROW) {//-*-*
                                    DealRangesModel *dealRangeModel = [DealRangesModel new];
                                    
                                    //                                    dealRangeModel.dealId = dealModelObj.dealID;
                                    //                                    dealRangeModel.groupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    //                                    dealRangeModel.minimumPurchaseQuantity_float = sqlite3_column_double(selectStmt, 1);
                                    //                                    dealRangeModel.minimumPurchaseamount_float = sqlite3_column_double(selectStmt, 2);
                                    //                                    dealRangeModel.dealQuantity_float = sqlite3_column_double(selectStmt, 3);;
                                    //                                    dealRangeModel.range = @((char *)sqlite3_column_text(selectStmt, 4));
                                    
                                    if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                        dealRangeModel.groupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                    
                                    if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                        dealRangeModel.minimumPurchaseQuantity_float = sqlite3_column_double(selectStmt, 1);
                                    
                                    if((sqlite3_column_text(selectStmt, 2) != nil) && (char *)sqlite3_column_text(selectStmt, 2))
                                        dealRangeModel.minimumPurchaseamount_float = sqlite3_column_double(selectStmt, 2);
                                    
                                    if((sqlite3_column_text(selectStmt, 3) != nil) && (char *)sqlite3_column_text(selectStmt, 3))
                                        dealRangeModel.dealQuantity_float = sqlite3_column_double(selectStmt, 3);;
                                    
                                    if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                        dealRangeModel.range = @((char *)sqlite3_column_text(selectStmt, 4));
                                    
                                    
                                    [dealRangesArr addObject:dealRangeModel];
                                }
                            }
                            NSString *skuIds = @"";
                            if ((![dealModelObj.dealSkus isKindOfClass:[NSNull class]] || (dealModelObj.dealSkus).length != 0) && (![dealModelObj.dealGroupId isKindOfClass:[NSNull class]] && (dealModelObj.dealGroupId).length > 0)) {
                                NSMutableArray *skuIdsList = [self getDealSkuidsForGroupId:dealModelObj.dealGroupId];
                                //                        for (NSString *skuStr in skuIdsList) {
                                //                            skuIds = [NSString stringWithFormat:@"%@%@%@",skuIds,skuStr,@","];
                                //                        }
                                
                                skuIds = [skuIdsList componentsJoinedByString:@","];
                                
                                dealModelObj.dealSkus = skuIds;
                            }
                            applyDealModel.dealID = dealModelObj.dealID;
                            applyDealModel.claimCoupons_int = dealModelObj.claimCoupons_int;
                            applyDealModel.claimgiftvouchers_int = dealModelObj.claimgiftvouchers_int;
                            applyDealModel.claimLoyaltypoints_int = dealModelObj.claimLoyaltypoints_int;
                            applyDealModel.dealCategory = dealModelObj.dealCategory;
                            applyDealModel.dealDescription = dealModelObj.dealDescription;
                            applyDealModel.dealName = dealModelObj.dealName;
                            applyDealModel.sellProducts = dealModelObj.sellProducts;
                            applyDealModel.repeat = dealModelObj.repeat;
                            applyDealModel.allowMultipleDiscounts = dealModelObj.allowMultipleDiscounts;
                            applyDealModel.sellSkuids = dealModelObj.sellSkuids;
                            applyDealModel.sellGroupID = dealModelObj.sellGroupId;
                            applyDealModel.dealSkus = dealModelObj.dealSkus;
                            applyDealModel.priority_int = dealModelObj.priority_int;
                            applyDealModel.employeeSpecific = dealModelObj.employeeSpecific;
                            applyDealModel.dealStartDate = dealModelObj.dealStartDate;
                            applyDealModel.dealEndDate = dealModelObj.dealEndDate;
                            applyDealModel.dealGroupId = dealModelObj.dealGroupId;
                            
                            //-*-*
                            applyDealModel.dealPluCode = dealModelObj.dealPluCode;
                            applyDealModel.sellPluCode = dealModelObj.sellPluCode;
                            applyDealModel.ispluSpecificDeal = dealModelObj.ispluSpecificDeal;
                            
                            
                            NSMutableArray *dealSlabsList = [NSMutableArray new];
                            for (DealRangesModel *offerRange in dealRangesArr) {
                                applyDealModel.minimumPurchaseAmt = offerRange.minimumPurchaseamount_float;
                                applyDealModel.minimumPurchaseQty = offerRange.minimumPurchaseQuantity_float;
                                [dealSlabsList addObject:offerRange];
                            }
                            applyDealModel.rangeList = dealSlabsList;
                            dealModelObj.rangesList = dealSlabsList;
                            
                            if (rangesGroupIdsList.count == 1 && [rangesGroupIdsList containsObject:@"ALL"]) {
                                [rangesGroupIdsList removeAllObjects];
                                [rangesGroupIdsList addObject:dealModelObj.dealGroupId];
                            }
                            
                            if (rangesGroupIdsList.count ==0){
                                [rangesGroupIdsList addObject:dealModelObj.dealGroupId];
                                
                            }
                            
                            if ([dealModelObj.dealCategory caseInsensitiveCompare:@"item_specific"] == NSOrderedSame) {
                                if (dealModelObj.priority_int == 1 && ![priorityItemSpecificDealsList containsObject:applyDealModel]) {
                                    [priorityItemSpecificDealsList addObject:applyDealModel];
                                } else if(![nonPriorityItemSpecificDealsList containsObject:applyDealModel]){
                                    [nonPriorityItemSpecificDealsList addObject:applyDealModel];
                                }
                            } else {
                                
                                if (dealModelObj.priority_int == 1 && ![priorityTurnOverDealsList containsObject:applyDealModel]) {
                                    /*int count = rangesGroupIdsList.size();
                                     rangesGroupIdsList.retainAll(totalGroupIdsList);
                                     if(rangesGroupIdsList.size() == count && count!=0)*/
                                    [priorityTurnOverDealsList addObject:applyDealModel];
                                } else if(![nonPriorityTurnOverDealsList containsObject:applyDealModel]){
                                    /*int count = rangesGroupIdsList.size();
                                     rangesGroupIdsList.retainAll(totalGroupIdsList);
                                     if(rangesGroupIdsList.size() == count && count!=0)*/
                                    [nonPriorityTurnOverDealsList addObject:applyDealModel];
                                }
                                
                            }
                            if (![dealsList1 containsObject:applyDealModel] && [applyDealModel.dealCategory caseInsensitiveCompare:@"turn_over"] != NSOrderedSame) {
                                [dealsList1 addObject:dealModelObj];
                            }
                        }
                    }
                    
                    
                    
                    //added by Srinivasulu on 08/09/2017....
                    
                    // Case 0 Handling item specific deals and offers
                    
                    if(priceBasedItemspecificOffers.count){
                        
                        [priceBasedOffersList addObjectsFromArray:priceBasedItemspecificOffers];
                    }
                    
                    //upto here on 08/09/2017....
                    
                    // Case 1 Handling item specific deals and offers
                    
                    
                    
                    if (priorityItemSpecificOffersList.count> 0 && priorityItemSpecificDealsList.count > 0) {
                        
                        [offerList addObjectsFromArray:priorityItemSpecificOffersList];
                        [dealsList addObjectsFromArray:priorityItemSpecificDealsList];
                        [prioritizedItemsArr addObject:cartItem];
                    } else {
                        if (priorityItemSpecificOffersList.count > 0 || priorityItemSpecificDealsList.count > 0) {
                            if (priorityItemSpecificOffersList.count > 0) {
                                [offerList addObjectsFromArray:priorityItemSpecificOffersList];
                                [prioritizedItemsArr addObject:cartItem];
                                
                            } else if (priorityItemSpecificDealsList.count > 0) {
                                [dealsList addObjectsFromArray:priorityItemSpecificDealsList];
                                
                                [prioritizedItemsArr addObject:cartItem];
                            }
                        } else {
                            
                            [offerList addObjectsFromArray:nonPriorityItemSpecificOffersList];
                            [dealsList addObjectsFromArray:nonPriorityItemSpecificDealsList];
                        }
                    }
                    
                    // case 2 Handling turn over offers list and turn over deals list
                    
                    if (priorityTurnOverOffersList.count > 0 && priorityTurnOverDealsList.count > 0) {
                        //    offersList.addAll(getLatestOffer(priorityTurnOverOffersList));
                        //dealsList.addAll(getLatestDeals(priorityTurnOverDealsList));
                        
                        [offerList addObjectsFromArray:priorityTurnOverOffersList];
                        [dealsList addObjectsFromArray:priorityTurnOverDealsList];
                    } else {
                        if (priorityTurnOverOffersList.count > 0 || priorityTurnOverDealsList.count > 0) {
                            if (priorityTurnOverOffersList.count > 0) {
                                //offersList.addAll(getLatestOffer(priorityTurnOverOffersList));
                                [offerList addObjectsFromArray:priorityTurnOverOffersList];
                            } else if (priorityTurnOverDealsList.count > 0) {
                                //dealsList.addAll(getLatestDeals(priorityTurnOverDealsList));
                                [dealsList addObjectsFromArray:priorityTurnOverDealsList];
                            }
                        } else {
                            /*offersList.addAll(getLatestOffer(nonPriorityTurnOverOffersList));
                             dealsList.addAll(getLatestDeals(nonPriorityTurnOverDealsList));*/
                            [offerList addObjectsFromArray:nonPriorityTurnOverOffersList];
                            [dealsList addObjectsFromArray:nonPriorityTurnOverDealsList];
                        }
                    }
                    
                    
                }
                
                [totalDealsList addObject:dealsList1];
                [totalOffersList addObject:offersList1];
                plucodeCountStr += 1;//-*-*
            }
            
            
            
            //            //removing duplicates...
            //
            
            //            NSArray *temp = [[NSSet setWithArray:offerList] allObjects];
            //
            //            NSOrderedSet *set = [[NSOrderedSet alloc] initWithArray:offerList];
            //            offerList = [[set array] mutableCopy];
            //
            //            NSOrderedSet *set1 = [[NSOrderedSet alloc] initWithArray:dealsList];
            //            dealsList = [[set1 array] mutableCopy];
            
            //            NSOrderedSet *availableOffersSet = [[NSOrderedSet alloc] initWithArray:totalOffersList];
            //            totalOffersList = [[availableOffersSet array] mutableCopy];
            //
            //            NSOrderedSet *availableDealsSet = [[NSOrderedSet alloc] initWithArray:totalDealsList];
            //            totalDealsList = [[availableDealsSet array] mutableCopy];
            
            
            offerList = [self sortTheArray:offerList withKey:@"minimumPurchaseQty" isAscending:NO];
            dealsList = [self sortTheArray:dealsList withKey:@"minimumPurchaseQty" isAscending:NO];
        }
        
        
    } @catch (NSException *exception) {
        
        
        
    } @finally {
        
        
    }
    campaignRequestModel.flatOfferForAllItemsList = flatOfferForAllItemsList;
    //-*-*
    
    applyDealsAndOfferResponse[@"groupTurnOverOfferDiscount"] = @0.0f;//-*-*

    applyDealsAndOfferResponse[@"turnOverOfferDsiscount"] = @0.0f;
    applyDealsAndOfferResponse[@"offerList"] = offerList;
    applyDealsAndOfferResponse[@"dealsList"] = dealsList;
    applyDealsAndOfferResponse[@"availableOffers"] = totalOffersList;
    applyDealsAndOfferResponse[@"availableDeals"] = totalDealsList;
    applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
    applyDealsAndOfferResponse = [self handleCampaignsOffline:campaignRequestModel];
    
    
    
    return applyDealsAndOfferResponse;
    
}

- (NSMutableDictionary *)handleCampaignsOffline:(CampaignRequestModel *)campaignRequestModel   {
    //    NSString *handledCampaignResponse = @"";
    //    NSMutableArray *appliedDealsList = [NSMutableArray new];
    //    int count = 0;
    //    float totalOffer = 0.0;
    
    @try {
        
        itemsSkuIdList = [campaignRequestModel.skuIdArrList mutableCopy];
        itemsPluCodeList = [campaignRequestModel.pluCodeArrList mutableCopy];
        itemsUnitPriceList = [campaignRequestModel.unitPriceArrList mutableCopy];
        itemsIndividualQtyList = [campaignRequestModel.qtyArrList mutableCopy];
        itemsTotalPriceList = [campaignRequestModel.totalPriceArrList mutableCopy];
        itemsStatusList = [campaignRequestModel.itemStatusArrList mutableCopy];
        itemsOptionalDiscountList = [campaignRequestModel.productOptionalDiscountArr mutableCopy];
        
        promoSkusArrList = [NSMutableArray new];
        
        
        //added by Srinivasulu on
        
        individualItemsIndexesArr = [NSMutableArray new];
        applyGroupTurnOverOffersDic = [NSMutableDictionary new];
        
        //upto here on 17/08/2017....
        
        
        for (int a = 0; a < itemsSkuIdList.count; a++) {
            [mFreeQtyArrayList addObject:@0];
            [mProductDealQty addObject:@0];
            [freeItemLists addObject:@""];
            [freeItemQtyLists addObject:@""];
            [dealDiscount addObject:@0.0f];
            [mProductDealDescription addObject:@""];
            [mAllowMultipleDiscounts addObject:[NSNumber numberWithBool:TRUE]];
            [repeatArrayList addObject:[NSNumber numberWithBool:TRUE]];
            [appliedDealIdList addObject:@""];
            [isDealApplied addObject:[NSNumber numberWithBool:FALSE]];
            [discountTypeArrayList addObject:@""];
            [discountIdArrayList addObject:@""];
            [mProductOfferPrice addObject:@0.0f];
            [dealSkuListAll addObject:@""];
            [mProductOfferDescription addObject:@""];
            [mProductOfferType addObject:@""];
            [availableOffers addObject:@""];
            [appliedOfferIdsArr addObject:@""];
            
            
            //added by Srinivasulu on
            
            [individualItemsIndexesArr addObject:@(a)];

            //upto here on 17/08/2017....
            
        }
        
        
        
        //added by Srinivasulu on 08/09/2017....
        
        
        if(priceBasedOffersList.count)
            [self  applyPriceBasedConfigurationOffers:priceBasedOffersList];
        
        
        //upto here on 08/09/2017....
        
        
        
        [self applyFetchedOffers:offerList];
        [self applyLowestPriceItemOffer:lowestPriceItemOfferList];
        if (![comboOffersList isKindOfClass:[NSNull class]] && comboOffersList.count > 0) {
            [self applyComboOffer:comboOffersList];
        }
        [self applyFetchedDeals:dealsList];
        
        NSMutableArray *tempDealsList = [self sortTheArray:dealsList withKey:@"minimumPurchaseAmt" isAscending:NO];
        [self calculateTotalPrice];
        [self applyTurnOverDeal:tempDealsList];
        
        [self sortTheArray:turnOverOffersList withKey:@"minimumPurchaseAmt" isAscending:NO];
        [self applyTurnOverOffers:turnOverOffersList];


        //--*-*-*
        [self applyGroupTurnOverOffers:offerList];

      
        
        applyDealsAndOfferResponse[@"appliedDealIdList"] = appliedDealIdList;
        applyDealsAndOfferResponse[@"appliedOffers"] = appliedOffers;
        applyDealsAndOfferResponse[@"dealDiscount"] = dealDiscount;
        applyDealsAndOfferResponse[@"dealSkuListAll"] = dealSkuListAll;
        applyDealsAndOfferResponse[@"discountIdArrayList"] = discountIdArrayList;
        applyDealsAndOfferResponse[@"discountTypeArrayList"] = discountTypeArrayList;
        applyDealsAndOfferResponse[@"freeItemLists"] = freeItemLists;
        applyDealsAndOfferResponse[@"freeItemQtyLists"] = freeItemQtyLists;
        applyDealsAndOfferResponse[@"isDealApplied"] = isDealApplied;
        applyDealsAndOfferResponse[@"mAllowMultipleDiscounts"] = mAllowMultipleDiscounts;
        applyDealsAndOfferResponse[@"mFreeQtyArrayList"] = mFreeQtyArrayList;
        applyDealsAndOfferResponse[@"mProductDealDescription"] = mProductDealDescription;
        applyDealsAndOfferResponse[@"mProductDealQty"] = mProductDealQty;
        applyDealsAndOfferResponse[@"mProductOfferDescription"] = mProductOfferDescription;
        applyDealsAndOfferResponse[@"mProductOfferPrice"] = mProductOfferPrice;
        applyDealsAndOfferResponse[@"mProductOfferType"] = mProductOfferType;
        applyDealsAndOfferResponse[@"repeatArrayList"] = repeatArrayList;
        applyDealsAndOfferResponse[@"appliedOfferIdsArr"] = appliedOfferIdsArr;
        applyDealsAndOfferResponse[@"dealPromoSkusArr"] = promoSkusArrList;
        
        applyDealsAndOfferResponse[@"groupTurnOverOffers"] = applyGroupTurnOverOffersDic;//-*-*

    }
    @catch (NSException *exception) {
        NSLog(@"Exception ---------------- %@",exception.name);
    }
    @finally {
        
    }
    
    if(!mainPriceBasedOffersList.count)
        [self enforceDeals];
    return applyDealsAndOfferResponse;
}

- (void)applyFetchedOffers:(NSMutableArray *)tempOffersLists {
    int itemId = 0;
    
    
    if (![tempOffersLists isKindOfClass:[NSNull class]] && tempOffersLists.count > 0) {
        NSString *offerType = @"";
        float offerPrice = 0;
        
        //added by Srinivaslulu on 12/09/2017....
        
        tempOffersLists = [self removeDuplicatesOffers:tempOffersLists offerCategry:@"item_specific"];
        
        //upto here on 12/09/2017....
        
        
        
        NSMutableArray *psudoQtyList = [NSMutableArray arrayWithArray:itemsIndividualQtyList];
        
        for (int c = 0; c < tempOffersLists.count; c++) {
            
            BOOL isPriceList = false;
            
            NSString *appliedSkuId = @"";
            
            NSMutableArray *itemsList = [NSMutableArray new];
            ApplyOfferModel *applyOfferModel = tempOffersLists[c];
            if (!applyOfferModel.combo && !applyOfferModel.lowestPriceItem) {
                if ([applyOfferModel.offerCategory isEqualToString:@"item_specific"]) {
                    NSMutableArray *offerRangesList = applyOfferModel.offerRangesList;
                    
                    int minPurchaseQty = 0;
                    float rewardValue = 0;
                    float fixedRewardValue = 0;
                    NSString * rewardType = @"";
                    
                    //-*-*
                    if(![applyOfferModel.offerProductsList isKindOfClass:[NSNull class]] && [applyOfferModel.offerProductsList  count]){
                        
                        for(OfferProducts * tempOfferProductsDic in applyOfferModel.offerProductsList){
                            
                            if([itemsPluCodeList containsObject:tempOfferProductsDic.plucode]){
                                int matchItemIndex =   (int)[itemsPluCodeList indexOfObject:tempOfferProductsDic.plucode];
                                if (![itemsStatusList[matchItemIndex] isEqualToString:@"void"]) {
                                    rewardValue = tempOfferProductsDic.rewardValue;
                                    minPurchaseQty =  tempOfferProductsDic.minPurchaseQty;
                                    float rewardQty = tempOfferProductsDic.rewardQty;
                                    rewardType = tempOfferProductsDic.discountType;
                                    
                                    float qty = [itemsIndividualQtyList[matchItemIndex] floatValue];
                                    float unitprice = [itemsUnitPriceList[matchItemIndex] floatValue];
                                    
                                    if (qty >= minPurchaseQty && minPurchaseQty > 0) {
                                        float togiveQty = (int) (qty / minPurchaseQty);
                                        
                                        if ([rewardType containsString:@"flat_rate"]) {
                                            
                                            offerPrice = rewardValue;
                                        }
                                        else if ([rewardType containsString:@"fixed_rate"]) {
                                            
                                            offerPrice = unitprice-rewardValue;
                                        }
                                        else if ([rewardType containsString:@"percentage"]) {
                                            
                                            offerPrice = unitprice * rewardValue;
                                            offerPrice = offerPrice/100;
                                            offerPrice = round(offerPrice*100)/100;
                                        }
                                        else if ([rewardType containsString:@"percentage"]) {
                                            
                                            offerPrice = unitprice*rewardQty;
                                            offerPrice = round(offerPrice*100)/100;
                                        }
                                        if(applyOfferModel.repeat){
                                            offerPrice = offerPrice*togiveQty;
                                            offerPrice = round(offerPrice*100)/100;
                                        }
                                        float tempExistingOfferPrice = [[mProductOfferPrice objectAtIndex:matchItemIndex] floatValue];
                                        if(tempExistingOfferPrice <= offerPrice){
                                            
                                            [mProductOfferPrice replaceObjectAtIndex:matchItemIndex withObject:[NSNumber numberWithFloat:offerPrice]];
                                            NSString * tempDiscountType = discountTypeArrayList[matchItemIndex];
                                            NSString * tempDiscountId  = discountIdArrayList[matchItemIndex];
                                            discountTypeArrayList[matchItemIndex] = [NSString stringWithFormat:@"%@%@",tempDiscountType,@" offer,"];
                                            discountIdArrayList[matchItemIndex] = [NSString stringWithFormat:@"%@%@%@",tempDiscountId,applyOfferModel.offerID,@","];
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //-*-*
                    
                    
                    
                    rewardType = applyOfferModel.rewardType;
                    
                    for (OfferRangesModel *range in offerRangesList) {
                        [itemsList addObjectsFromArray:range.itemsList];
                        if (range.rangeMode == NULL || [range.rangeMode isEqualToString:@"promotion"] || [range.rangeMode isEqualToString:@"both"] || (range.rangeMode).length == 0) {
                            rewardValue = range.rewardValue;
                            fixedRewardValue = rewardValue;
                        }
                        if (range.rangeMode == NULL || [range.rangeMode isEqualToString:@"condition"] || [(range.rangeMode).lowercaseString isEqualToString:@"both"] || (range.rangeMode).length == 0) {
                            minPurchaseQty = range.minimumPurchaseQuantity;
                        }
                    }
                    if (itemsList.count == 0) {
                        if(applyOfferModel.sellSkuids != NULL && (applyOfferModel.sellSkuids).length > 0){
                            [itemsList addObjectsFromArray:[applyOfferModel.sellSkuids componentsSeparatedByString:@","]];
                        }
                    }
                    
                    
                    NSMutableArray *tempItemsList = [[NSMutableArray alloc] init];
                    for (NSString *skuStr in itemsList) {
                        if ([itemsSkuIdList containsObject:skuStr]) {
                            if (![tempItemsList containsObject:skuStr]) {
                                [tempItemsList addObject:skuStr];
                                
                            }
                        }
                    }
                    itemsList = [tempItemsList mutableCopy];
                    
                    //modified for price list items...
                    
                    NSMutableArray *commonSkuList = [self findDuplicates:itemsSkuIdList];
                    NSMutableArray *indices = [NSMutableArray new];
                    NSMutableDictionary *commonSkuInfo = [NSMutableDictionary new];
                    
                    int i,count=0;
                    
                    for (NSString * str in commonSkuList) {
                        
                        for (i = 0; i < itemsSkuIdList.count; i++) {
                            if ([str isEqualToString:itemsSkuIdList[i]] && ![indices containsObject:@(i)]) {
                                indices[count++] = @(i);
                                commonSkuInfo[str] = indices;
                            }
                        }
                    }
                    
                    
                    if (commonSkuList.count) {
                        
                        isPriceList = true;
                        
                        for (NSString *commonSkuId in commonSkuList) {
                            if ([itemsList containsObject:commonSkuId]) {
                                
                                [itemsList addObject:commonSkuId];
                            }
                        }
                    }
                    
                    
                    
                    
                    if (itemsList.count > 0) {
                        int cartQty = 0;
                        float totalAmt = 0;
                        float cartTotal = 0;
                        NSMutableArray *skuDetails = [NSMutableArray new];
                        NSMutableArray *matchItemsIndexes = [NSMutableArray new];
                        NSMutableArray *priceArr = [NSMutableArray new];
                        NSMutableArray *qtyArr = [NSMutableArray new];
                        NSMutableDictionary *tempCommonSkuInfo = [commonSkuInfo mutableCopy];
                        
                        
                        for (NSString *groupItem in itemsList) {
                            int index = (int)[itemsSkuIdList indexOfObject:groupItem];
                            
                            NSMutableArray *positions = [NSMutableArray new];
                            
                            if([commonSkuList containsObject:groupItem]) {
                                
                                positions = [[tempCommonSkuInfo valueForKey:groupItem]mutableCopy];
                                
                                index = [positions[0] intValue];
                                
                            }
                            
                            if (![itemsStatusList[index] isEqualToString:@"void"]) {
                                if([commonSkuList containsObject:groupItem]) {
                                    
                                    // NSMutableArray *positions = [[tempCommonSkuInfo valueForKey:groupItem]mutableCopy];
                                    [matchItemsIndexes addObject:[tempCommonSkuInfo valueForKey:groupItem][0]];
                                    [positions removeObjectAtIndex:0];
                                    tempCommonSkuInfo[groupItem] = positions;
                                    
                                }
                                else {
                                    [matchItemsIndexes addObject:@(index)];
                                }
                                itemId = index;
                            }
                            else if ([commonSkuList containsObject:groupItem]) {
                                [positions removeObjectAtIndex:0];
                                tempCommonSkuInfo[groupItem] = positions;
                                
                            }
                        }
                        
                        for (int z = 0; z < matchItemsIndexes.count; z++) {
                            SkuDetailsModel *skuInfo = [SkuDetailsModel new];
                            int indexOf = ([matchItemsIndexes[z] intValue]);
                            skuInfo.skuID = (itemsSkuIdList[indexOf]);
                            skuInfo.price = [itemsUnitPriceList[indexOf] floatValue];
                            skuInfo.quantity = [psudoQtyList[indexOf] floatValue];
                            [skuDetails addObject:skuInfo];
                            cartQty = cartQty + [psudoQtyList[[matchItemsIndexes[z] intValue]] floatValue];
                            
                            //added by sonali
                            
                            cartTotal = cartTotal + ([itemsUnitPriceList[indexOf] floatValue] * [psudoQtyList[[matchItemsIndexes[z] intValue]] floatValue]);
                            
                            if(minPurchaseQty > 0)//-*-*
                                if (cartQty % minPurchaseQty != 0 && cartQty <= minPurchaseQty) {
                                    totalAmt = totalAmt + ([itemsUnitPriceList[indexOf] floatValue] * [psudoQtyList[[matchItemsIndexes[z] intValue]] floatValue]);
                                    
                                }
                            
                            
                            [priceArr addObject:@([itemsUnitPriceList[indexOf] floatValue])];
                            [qtyArr addObject:@([psudoQtyList[[matchItemsIndexes[z] intValue]] floatValue])];
                            //                            if (([[psudoQtyList objectAtIndex:[[matchItemsIndexes objectAtIndex:z] intValue]] floatValue] == [[itemsIndividualQtyList objectAtIndex:[[matchItemsIndexes objectAtIndex:z] intValue]] floatValue]) && [[mProductOfferPrice objectAtIndex:z] floatValue]== 0) {
                            //
                            //                               [mProductOfferPrice replaceObjectAtIndex:[[matchItemsIndexes objectAtIndex:z] intValue] withObject:[NSNumber numberWithFloat:0.0]];
                            //                                [mAllowMultipleDiscounts replaceObjectAtIndex:[[matchItemsIndexes objectAtIndex:z] intValue] withObject:[NSNumber numberWithBool:applyOfferModel.allowMultipleDiscounts]];
                            //                                [repeatArrayList replaceObjectAtIndex:[[matchItemsIndexes objectAtIndex:z] intValue] withObject:[NSNumber numberWithBool:applyOfferModel.repeat]];
                            //                                [mProductOfferDescription replaceObjectAtIndex:[[matchItemsIndexes objectAtIndex:z] intValue] withObject:applyOfferModel.offerDescription];
                            //                                [appliedOfferIdsArr replaceObjectAtIndex:[[matchItemsIndexes objectAtIndex:z] intValue] withObject:applyOfferModel.offerID];
                            //                            }
                        }
                        if (cartQty >= minPurchaseQty) {
                            skuDetails = [self sortTheArray:skuDetails withKey:@"price" isAscending:NO];
                            float realisedQty = (cartQty/minPurchaseQty);
                            if ([rewardType isEqualToString:@"flat_rate"]) {
                                realisedQty = cartQty/minPurchaseQty;
                            }
                            float toGiveQty = (float) (cartQty - realisedQty);
                            // if ([rewardType isEqualToString:@"flat_rate"]) {
                            toGiveQty = realisedQty;
                            //  }
                            float givenQty = 0;
                            
                            NSMutableArray *positions = [matchItemsIndexes mutableCopy];
                            
                            int remainingQtyPriceToBeAdded = cartQty - (minPurchaseQty * toGiveQty);
                            //-*-* -- here some logic need to be Change I think -- Srinivasulu
                            float extraPrice = 0;
                            int addedQty = 0;
                            
                            NSArray *newArr = [[priceArr sortedArrayUsingSelector:@selector(compare:)] reverseObjectEnumerator].allObjects;
                            
                            for (int i =0; i<newArr.count; i++) {
                                
                                int index = (int)[priceArr indexOfObject:newArr[i]];
                                
                                if ([newArr isEqualToArray:priceArr]) {
                                    
                                    extraPrice = extraPrice + ([newArr[i] floatValue] * remainingQtyPriceToBeAdded);
                                    
                                    break;
                                    
                                }
                                
                                if (addedQty != remainingQtyPriceToBeAdded ) {
                                    
                                    if ([qtyArr[index] floatValue] >= remainingQtyPriceToBeAdded) {
                                        extraPrice = extraPrice + ([priceArr[i] floatValue] * remainingQtyPriceToBeAdded);
                                        
                                        break;
                                        
                                    }
                                    else {
                                        extraPrice = extraPrice + ([newArr[i] floatValue] * [qtyArr[index] floatValue]);
                                        addedQty  = addedQty + [priceArr[index] intValue];
                                        remainingQtyPriceToBeAdded = remainingQtyPriceToBeAdded - addedQty;
                                    }
                                }
                            }
                            
                            for (SkuDetailsModel *details in skuDetails) {
                                
                                int index = (int)[itemsSkuIdList indexOfObject:details.skuID];
                                if (isPriceList && [commonSkuList containsObject:details.skuID]) {
                                    
                                    if ((cartQty - commonSkuList.count) > 0) {
                                        toGiveQty = (float) ((cartQty - commonSkuList.count) - realisedQty);
                                    }
                                    else {
                                        toGiveQty = (float) ((commonSkuList.count - cartQty ) - realisedQty);
                                        
                                    }
                                    if (toGiveQty == 0) {
                                        
                                        toGiveQty = 1;
                                    }
                                    index = [positions[0] intValue];
                                    
                                }
                                
                                
                                float tempQty = [psudoQtyList[index] floatValue];
                                offerPrice = 0;
                                if (givenQty < toGiveQty) {
                                    if ([rewardType isEqualToString:@"percentage"]) {
                                        if (toGiveQty - givenQty > details.quantity) {
                                            offerPrice = (float) (offerPrice + (details.quantity * ((rewardValue * details.price) / 100)));
                                            tempQty = 0;
                                        } else {
                                            
                                            if (isPriceList && ((toGiveQty - givenQty) == details.quantity) && [commonSkuList containsObject:details.skuID]) {
                                                
                                                rewardValue = fixedRewardValue;
                                                offerPrice = (float) (offerPrice + (details.quantity * ((rewardValue * details.price) / 100)));
                                                
                                                [positions removeObjectAtIndex:0];
                                                commonSkuInfo[details.skuID] = positions;
                                            }
                                            else {
                                                //                                                tempQty = (float) (details.quantity - (toGiveQty - givenQty));
                                                //                                                offerPrice = offerPrice + ((toGiveQty - givenQty) * ((rewardValue * details.price) / 100));
                                                
                                                
                                                
                                                tempQty = (float) (details.quantity - (toGiveQty - givenQty));
                                                
                                                if (details.quantity >= minPurchaseQty) {
                                                    
                                                    for (SkuDetailsModel *sku in skuDetails) {
                                                        
                                                        offerPrice = 0;
                                                        
                                                        toGiveQty = sku.quantity/minPurchaseQty;
                                                        
                                                        if ((int)sku.quantity % (int)minPurchaseQty == 0) {
                                                            
                                                            offerPrice = offerPrice + ((sku.price * sku.quantity) )*(fixedRewardValue/100);
                                                            
                                                        }
                                                        
                                                        else {
                                                            offerPrice = offerPrice + ((sku.price * sku.quantity) - extraPrice)*(fixedRewardValue/100);
                                                            
                                                        }
                                                        
                                                        int position = (int)[itemsSkuIdList indexOfObject:sku.skuID];
                                                        
                                                        float tempOffer = [mProductOfferPrice[position] floatValue];
                                                        
                                                        if(tempOffer > offerPrice){
                                                            
                                                            mProductOfferPrice[position] = @(tempOffer);
                                                        }
                                                        else {
                                                            mProductOfferPrice[position] = @(offerPrice);
                                                        }
                                                        mAllowMultipleDiscounts[position] = @(applyOfferModel.allowMultipleDiscounts);
                                                        repeatArrayList[position] = @(applyOfferModel.repeat);
                                                        mProductOfferDescription[position] = applyOfferModel.offerDescription;
                                                        appliedOfferIdsArr[position] = applyOfferModel.offerID;
                                                        
                                                    }
                                                }
                                                else {
                                                    
                                                    offerPrice = offerPrice + ((cartTotal - extraPrice)*(fixedRewardValue/100));
                                                    
                                                    float cartOfferValue = offerPrice / cartQty;
                                                    
                                                    
                                                    for (SkuDetailsModel *sku in skuDetails) {
                                                        int position = (int)[itemsSkuIdList indexOfObject:sku.skuID];
                                                        
                                                        float tempOffer = [mProductOfferPrice[position] floatValue];
                                                        
                                                        if(tempOffer > (cartOfferValue * sku.quantity)){
                                                            
                                                            mProductOfferPrice[index] = @(tempOffer);
                                                        }
                                                        else {
                                                            mProductOfferPrice[position] = @(cartOfferValue * sku.quantity);
                                                        }
                                                        mAllowMultipleDiscounts[position] = @(applyOfferModel.allowMultipleDiscounts);
                                                        repeatArrayList[position] = @(applyOfferModel.repeat);
                                                        mProductOfferDescription[position] = applyOfferModel.offerDescription;
                                                        appliedOfferIdsArr[position] = applyOfferModel.offerID;
                                                        
                                                    }
                                                    
                                                }
                                                
                                                mProductOfferType[index] = offerType;
                                                
                                                break;
                                                
                                            }
                                        }
                                        
                                        
                                    } else if ([rewardType isEqualToString:@"flat_rate"]) {
                                        if (toGiveQty - givenQty > details.quantity) {
                                            
                                            offerPrice = (float) (offerPrice + (details.quantity * ((rewardValue))));
                                            tempQty = 0;
                                            
                                        } else {
                                            
                                            if (isPriceList && ((toGiveQty - givenQty) == details.quantity) && [commonSkuList containsObject:details.skuID]) {
                                                
                                                rewardValue = fixedRewardValue;
                                                offerPrice = (float) (offerPrice + (details.quantity * ((rewardValue))));
                                                
                                                [positions removeObjectAtIndex:0];
                                                commonSkuInfo[details.skuID] = positions;
                                                
                                                
                                            }
                                            else {
                                                tempQty = (float) (details.quantity - (toGiveQty - givenQty));
                                                offerPrice = offerPrice + ((toGiveQty - givenQty) * ((rewardValue)));
                                                
                                                
                                                
                                            }
                                        }
                                    } else if ([rewardType isEqualToString:@"fixed_rate"]) {
                                        
                                        if (isPriceList && ((toGiveQty - givenQty) == details.quantity) && [commonSkuList containsObject:details.skuID]) {
                                            rewardValue = fixedRewardValue;
                                            rewardValue = (details.price) - rewardValue;
                                            offerPrice = (float) (offerPrice  + (details.quantity * ((rewardValue))));
                                            
                                            [positions removeObjectAtIndex:0];
                                            commonSkuInfo[details.skuID] = positions;
                                            
                                            
                                        }
                                        else {
                                            
                                            tempQty = (float) (details.quantity - (toGiveQty - givenQty));
                                            
                                            if (details.quantity >= minPurchaseQty) {
                                                
                                                
                                                for (SkuDetailsModel *sku in skuDetails) {
                                                    
                                                    offerPrice = 0;
                                                    
                                                    toGiveQty = (int)sku.quantity/minPurchaseQty;
                                                    
                                                    offerPrice = offerPrice + ((sku.price * sku.quantity) - extraPrice)  - (fixedRewardValue * toGiveQty);
                                                    
                                                    
                                                    int position = (int)[itemsSkuIdList indexOfObject:sku.skuID];
                                                    
                                                    float tempOffer = [mProductOfferPrice[position] floatValue];
                                                    
                                                    if(tempOffer > offerPrice){
                                                        
                                                        mProductOfferPrice[position] = @(tempOffer);
                                                    }
                                                    else {
                                                        mProductOfferPrice[position] = @(offerPrice);
                                                    }
                                                    mAllowMultipleDiscounts[position] = @(applyOfferModel.allowMultipleDiscounts);
                                                    repeatArrayList[position] = @(applyOfferModel.repeat);
                                                    mProductOfferDescription[position] = applyOfferModel.offerDescription;
                                                    appliedOfferIdsArr[position] = applyOfferModel.offerID;
                                                    
                                                }
                                            }
                                            else {
                                                
                                                offerPrice = offerPrice + ((cartTotal - extraPrice)  - (fixedRewardValue * (toGiveQty - givenQty)));
                                                
                                                float cartOfferValue = offerPrice / cartQty;
                                                
                                                
                                                for (SkuDetailsModel *sku in skuDetails) {
                                                    int position = (int)[itemsSkuIdList indexOfObject:sku.skuID];
                                                    
                                                    float tempOffer = [mProductOfferPrice[position] floatValue];
                                                    
                                                    if(tempOffer > (cartOfferValue * sku.quantity)){
                                                        
                                                        mProductOfferPrice[index] = @(tempOffer);
                                                    }
                                                    else {
                                                        mProductOfferPrice[position] = @(cartOfferValue * sku.quantity);
                                                    }
                                                    mAllowMultipleDiscounts[position] = @(applyOfferModel.allowMultipleDiscounts);
                                                    repeatArrayList[position] = @(applyOfferModel.repeat);
                                                    mProductOfferDescription[position] = applyOfferModel.offerDescription;
                                                    appliedOfferIdsArr[position] = applyOfferModel.offerID;
                                                    
                                                }
                                                
                                            }
                                            
                                            
                                            mProductOfferType[index] = offerType;
                                            
                                            break;
                                        }
                                        //                                        }
                                    }
                                }
                                
                                //                               if (![rewardType isEqualToString:@"flat_rate"]) {
                                //                                    [psudoQtyList replaceObjectAtIndex:index withObject:[NSNumber numberWithFloat:tempQty]];
                                //                                }
                                
                                
                                float tempOffer = [mProductOfferPrice[index] floatValue];
                                if(tempOffer > offerPrice){
                                    
                                    mProductOfferPrice[index] = @(tempOffer);
                                    appliedOfferIdsArr[index] = applyOfferModel.offerID;
                                }
                                else{
                                    
                                    mProductOfferPrice[index] = @(offerPrice);
                                    
                                    mAllowMultipleDiscounts[index] = @(applyOfferModel.allowMultipleDiscounts);
                                    repeatArrayList[index] = @(applyOfferModel.repeat);
                                    mProductOfferDescription[index] = applyOfferModel.offerDescription;
                                    appliedOfferIdsArr[index] = applyOfferModel.offerID;
                                    
                                }
                                
                                
                                mProductOfferType[index] = offerType;
                                // if (!isPriceList && ![details.skuID isEqualToString:appliedSkuId]) {
                                givenQty += details.quantity;
                                // }
                                if ([commonSkuList containsObject:details.skuID]) {
                                    appliedSkuId = details.skuID;
                                }
                                NSString *tempDiscountType, *tempDiscountId;
                                tempDiscountType = discountTypeArrayList[index];
                                tempDiscountId = discountIdArrayList[index];
                                discountTypeArrayList[index] = [NSString stringWithFormat:@"%@%@",tempDiscountType,@" offer,"];
                                discountIdArrayList[index] = [NSString stringWithFormat:@"%@%@%@",tempDiscountId,applyOfferModel.offerID,@","];
                            }
                            
                            
                        }
                        
                    }
                }
                else {
                    [turnOverOffersList addObject:applyOfferModel];
                    //                    NSMutableArray *offerRangesList = applyOfferModel.offerRangesList;
                    //                    [mAllowMultipleDiscounts replaceObjectAtIndex:itemId withObject:[NSNumber numberWithBool:applyOfferModel.allowMultipleDiscounts]];
                    //                    [repeatArrayList replaceObjectAtIndex:itemId withObject:[NSNumber numberWithBool:applyOfferModel.repeat]];
                    //                    [mProductOfferDescription replaceObjectAtIndex:itemId withObject:applyOfferModel.offerDescription];
                    //
                    //                    float minPurchaseQty = 0, rewardValue = 0;
                    //                    for (OfferRangesModel *range in offerRangesList) {
                    //                        if (range.rangeMode == NULL || [range.rangeMode isEqualToString:@"promotion"] || [[range.rangeMode lowercaseString] isEqualToString:@"both"]) {
                    //                            rewardValue = range.rewardValue;
                    //                        }
                    //                        if (range.rangeMode == NULL || [range.rangeMode isEqualToString:@"condition"] || [[range.rangeMode lowercaseString] isEqualToString:@"both"]) {
                    //                            minPurchaseQty = range.minimumPurchaseQuantity;
                    //                        }
                    //
                    //                    }
                    //                    if ([applyOfferModel.rewardType isEqualToString:@"flat_rate"]) {
                    //                        offerType = applyOfferModel.rewardType;
                    //
                    //                        turnOverOffer = rewardValue;
                    //
                    //                        [mProductOfferPrice replaceObjectAtIndex:itemId withObject:[NSNumber numberWithFloat:offerPrice]];
                    //                        [mProductOfferType replaceObjectAtIndex:itemId withObject:offerType];
                    //                    } else if ([applyOfferModel.rewardType isEqualToString:@"percentage"]) {
                    //
                    //                        offerType = applyOfferModel.rewardType;
                    //
                    //                        turnOverOffer = rewardValue;
                    //                        [mProductOfferPrice replaceObjectAtIndex:itemId withObject:[NSNumber numberWithFloat:offerPrice]];
                    //                        [mProductOfferType replaceObjectAtIndex:itemId withObject:offerType];
                    //
                    //                    } else if ([applyOfferModel.rewardType isEqualToString:@"fixed_rate"]) {
                    //
                    //                        offerType = applyOfferModel.rewardType;
                    //
                    //                        float flatRate = minPurchaseQty * [[itemsUnitPriceList objectAtIndex:itemId] floatValue] - rewardValue;
                    //
                    //                        offerPrice = (float) (flatRate * (floor([[psudoQtyList objectAtIndex:itemId] floatValue] / minPurchaseQty)));
                    //                        [mProductOfferPrice replaceObjectAtIndex:itemId withObject:[NSNumber numberWithFloat:offerPrice]];
                    //                        [mProductOfferType replaceObjectAtIndex:itemId withObject:offerType];
                    //                    } else {
                    //                        [mProductOfferDescription replaceObjectAtIndex:itemId withObject:@""];
                    //                        [mProductOfferType replaceObjectAtIndex:itemId withObject:@""];
                    //                        [mProductOfferPrice replaceObjectAtIndex:itemId withObject:[NSNumber numberWithFloat:0.0]];
                    //                        // issue giftvoucher upon
                    //                        // successfull
                    //                        // full
                    //                        // bill
                    //                        // payment
                    //                    }
                    //
                    //                    NSString *tempDiscountType, *tempDiscountId;
                    //                    tempDiscountType = [discountTypeArrayList objectAtIndex:itemId];
                    //                    tempDiscountId = [discountIdArrayList objectAtIndex:itemId];
                    //                    [discountTypeArrayList replaceObjectAtIndex:itemId withObject:[NSString stringWithFormat:@"%@%@",tempDiscountType,@" offer,"]];
                    //                    [discountIdArrayList replaceObjectAtIndex:itemId withObject:[NSString stringWithFormat:@"%@%@%@",tempDiscountId,applyOfferModel.offerID,@","]];
                    //                    break;
                    
                }
            }
            else {
                if (applyOfferModel.combo) {
                    [comboOffersList addObject:applyOfferModel];
                }
                else if (applyOfferModel.lowestPriceItem){
                    [lowestPriceItemOfferList addObject:applyOfferModel];
                }
            }
            
            //            if (!applyOfferModel.combo && !applyOfferModel.lowestPriceItem) {
            //
            //                mproductof
            //            }
        }
        
        
    }
}

-(void)applyTurnOverOffers:(NSMutableArray*) applyOffersList {
    
    @try {
        if (![applyOffersList isKindOfClass:[NSNull class]] && applyOffersList.count > 0) {
            float turnOverOffer = 0;
            
            applyOffersList = [self removeDuplicatesOffers:applyOffersList offerCategry:@"turn_over"];
            
            for (int p = 0; p < applyOffersList.count; p++) {
                
                BOOL proceed = false;
                
                ApplyOfferModel *applyOffer = applyOffersList[p];
                if (!applyOffer.combo && !applyOffer.lowestPriceItem) {
                    if ([applyOffer.offerCategory containsString:@"turn_over"]) {
                        NSMutableArray *offerRangesList = applyOffer.offerRangesList;
                        
                        float minPurchaseAmt = 0, rewardValue = 0;
                        float minPurchaseAmount_low = 0, minPurchaseAmount_high = 0;
                        NSString *rewardType = applyOffer.rewardType;
                        for (OfferRangesModel *range in offerRangesList) {
                            if (range.rangeMode == NULL || [range.rangeMode containsString:@"promotion"] || [(range.rangeMode).lowercaseString containsString:@"both"] || (range.rangeMode).length == 0) {
                                if (range.rewardValue > 0) {
                                    rewardValue = range.rewardValue;
                                }
                            }
                            if (range.rangeMode == NULL || [range.rangeMode containsString:@"condition"] || [(range.rangeMode).lowercaseString containsString:@"both"] || (range.rangeMode).length == 0) {
                                //minPurchaseAmt = range.minimumPurchaseamount;
                                
                                if (range.rewardValue > 0) {
                                    minPurchaseAmount_low = range.minimumPurchaseamount;
                                    minPurchaseAmt = minPurchaseAmount_low;
                                }
                                else {
                                    minPurchaseAmount_high = range.minimumPurchaseamount;
                                    // minPurchaseAmt = minPurchaseAmount_high;
                                    
                                }
                            }
                            
                        }
                        
                        if (minPurchaseAmount_high <= 0 && mtotalBill >= minPurchaseAmount_low) {
                            
                            
                            proceed = true;
                            
                        }
                        else if (mtotalBill >= minPurchaseAmount_low && mtotalBill <= minPurchaseAmount_high) {
                            
                            proceed = true;
                        }
                        
                        if(proceed){
                            float toBeGiveValue = 0;
                            if(applyOffer.repeat) {
                                toBeGiveValue = floor(mtotalBill/minPurchaseAmt);
                            }
                            else {
                                toBeGiveValue = 1;
                            }
                            if ([rewardType containsString:@"percentage"]) {
                                turnOverOffer = (float) ((rewardValue / 100) * mtotalBill);
                            } else if ([rewardType containsString:@"flat_rate"]) {
                                turnOverOffer = (toBeGiveValue * rewardValue);
                            } else if ([rewardType containsString:@"fixed_rate"]) {
                                turnOverOffer = minPurchaseAmt - (toBeGiveValue * rewardValue);
                            }
                            applyDealsAndOfferResponse[@"turnOverOfferDsiscount"] = @(turnOverOffer);
                            break;
                        }
                    }
                }
            }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}


-(void)applyLowestPriceItemOffer:(NSMutableArray *)tempLowestItemPriceOfferLists {
    NSString *offerType;
    
    NSMutableArray *offerPriceList = [mProductOfferPrice mutableCopy];
    
    @try {
        
        for (int p = 0; p < tempLowestItemPriceOfferLists.count; p++) {
            ApplyOfferModel *applyOffer = tempLowestItemPriceOfferLists[p];
            int minPurchaseQty = 0;
            float rewardValue = 0, rewardQty = 0;
            NSString *rewardType = @"";
            NSMutableArray *sellSkukuList = [NSMutableArray new];
            NSMutableArray *dealSkukuList = [NSMutableArray new];
            float dealCartQty = 0;
            float sellCartQty = 0;
            float sellPromotionCartQty = 0;
            NSMutableArray *dealmatchItemsIndexes = [NSMutableArray new];
            NSMutableArray *sellSkuList = [NSMutableArray new];
            BOOL proceed = false;
            
            for (OfferRangesModel *range in applyOffer.offerRangesList) {
                if (range.rangeMode == NULL || [range.rangeMode isEqualToString:@"condition"]) {
                    minPurchaseQty = range.minimumPurchaseQuantity;
                    @try {
                        [sellSkukuList addObjectsFromArray:range.itemsList];
                    } @catch (NSException *e) {
                    }
                    NSMutableArray *tempItemsList = [[NSMutableArray alloc] init];
                    for (NSString *skuStr in sellSkukuList) {
                        if ([itemsSkuIdList containsObject:skuStr]) {
                            [tempItemsList addObject:skuStr];
                        }
                    }
                    sellSkukuList = [tempItemsList mutableCopy];
                    
                    for (NSString *groupItem in sellSkukuList) {
                        int index = (int)[itemsSkuIdList indexOfObject:groupItem];
                        if (![itemsStatusList[index] isEqualToString:@"void"])
                            sellCartQty = sellCartQty + [self getSkuCountFromCart:groupItem];
                    }
                    if (sellCartQty >= minPurchaseQty) {
                        proceed = true;
                    }
                }
                if (range.rangeMode == NULL || [range.rangeMode isEqualToString:@"promotion"]) {
                    rewardValue = range.rewardValue;
                    rewardQty = range.rewardQty;
                    rewardType = range.rangeRewardType;
                    @try {
                        [dealSkukuList addObjectsFromArray:range.itemsList];
                    } @catch (NSException *e) {
                    }
                    NSMutableArray *tempItemsList = [[NSMutableArray alloc] init];
                    for (NSString *skuStr in dealSkukuList) {
                        if ([itemsSkuIdList containsObject:skuStr]) {
                            [tempItemsList addObject:skuStr];
                        }
                    }
                    dealSkukuList = [tempItemsList mutableCopy];
                    for (NSString *groupItem in dealSkukuList) {
                        int index = (int)[itemsSkuIdList indexOfObject:groupItem];
                        if (![itemsStatusList[index] isEqualToString:@"void"]){
                            [dealmatchItemsIndexes addObject:@(index)];
                            
                        }
                        dealCartQty = dealCartQty + [self getSkuCountFromCart:groupItem];
                    }
                    if (dealCartQty >= rewardQty) {
                        proceed = true;
                    }
                }
                if ([(range.rangeMode).lowercaseString isEqualToString:@"both"]) {
                    rewardValue = range.rewardValue;
                    rewardQty = range.rewardQty;
                    rewardType = range.rangeRewardType;
                    minPurchaseQty = range.minimumPurchaseQuantity;
                    [sellSkuList addObjectsFromArray:range.itemsList];
                    @try {
                        dealSkukuList = [range.itemsList mutableCopy];
                    } @catch (NSException *e) {
                    }
                    NSMutableArray *tempSellSkuList = [[NSMutableArray alloc] init];
                    for (NSString *skuStr in sellSkuList) {
                        if ([itemsSkuIdList containsObject:skuStr]) {
                            [tempSellSkuList addObject:skuStr];
                        }
                    }
                    NSMutableArray *tempDealSkuList = [[NSMutableArray alloc] init];
                    for (NSString *skuStr in dealSkukuList) {
                        if ([itemsSkuIdList containsObject:skuStr]) {
                            [tempDealSkuList addObject:skuStr];
                        }
                    }
                    
                    sellSkuList = [tempSellSkuList mutableCopy];
                    dealSkukuList = [tempDealSkuList mutableCopy];
                    for (NSString *groupItem in sellSkuList) {
                        int index = (int)[itemsSkuIdList indexOfObject:groupItem];
                        if (![itemsStatusList[index] isEqualToString:@"void"])
                            sellPromotionCartQty = sellPromotionCartQty + [self getSkuCountFromCart:groupItem];
                    }
                    for (NSString *groupItem in dealSkukuList) {
                        int index = (int)[itemsSkuIdList indexOfObject:groupItem];
                        if (![itemsStatusList[index] isEqualToString:@"void"]){
                            [dealmatchItemsIndexes addObject:@(index)];
                        }
                        dealCartQty = dealCartQty + [self getSkuCountFromCart:groupItem];
                    }
                    if (sellPromotionCartQty >= minPurchaseQty && dealCartQty >= rewardQty) {
                        proceed = true;
                    }
                }
            }
            if (sellCartQty == 0) {
                sellCartQty = sellPromotionCartQty;
            }
            if (rewardQty == 0) {
                
                proceed = false;
                
                NSMutableArray *itemsArr = [NSMutableArray new];
                
                for (int i=0;i< itemsStatusList.count;i++) {
                    
                    if (![itemsStatusList[i] isEqualToString:@"void"]) {
                        
                        [itemsArr addObject:itemsSkuIdList[i]];
                    }
                }
                
                NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:itemsArr];
                NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:sellSkukuList];
                
                [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                
                NSArray* result = set1.allObjects;
                
                
                
                if (sellSkukuList.count>0 && (result.count == sellSkukuList.count)) {
                    
                    proceed = true;
                }
                
                //  rewardQty = 1;
                
            }
            if (sellSkukuList.count == 0) {
                sellSkukuList = sellSkuList;
            }
            
            if (proceed) {
                NSMutableArray *sku = [NSMutableArray new];
                NSMutableArray *tempdiscountIDToRemove = [NSMutableArray new];
                for (int z = 0; z < dealmatchItemsIndexes.count; z++) {
                    SkuDetailsModel *skuDetails = [SkuDetailsModel new];
                    int indexOf = ([dealmatchItemsIndexes[z] intValue]);
                    skuDetails.price = ([itemsUnitPriceList[indexOf] floatValue]);
                    skuDetails.quantity = ([itemsIndividualQtyList[indexOf] floatValue]);
                    skuDetails.skuID = (itemsSkuIdList[indexOf]);
                    float itemQty = (float) skuDetails.quantity;
                    //for(int s = 0;s<itemQty;s++){
                    // skuDetails.quantity = 1;
                    [sku addObject:skuDetails];
                    //  }
                    @try {
                        //                        tempdiscountIDToRemove.add(discountIdArrayList.get(indexOf));
                    }@catch (NSException *e) {
                    }
                }
                //            discountIdArrayList.removeAll(tempdiscountIDToRemove);
                sku = [self sortTheArray:sku withKey:@"price" isAscending:NO];
                NSMutableArray *skuDetails = [NSMutableArray new];
                
                if (rewardQty == 0) {
                    
                    [skuDetails addObject:sku];
                }
                else {
                    skuDetails = [self getChoppedArrayListFor:sku with:minPurchaseQty];
                    
                }
                float toGiveQty = (float) ceil(floor(sellCartQty / minPurchaseQty) * rewardQty / skuDetails.count);
                
                if (rewardQty == 0) {
                    
                    // toGiveQty = (float) ceil(floor(sellCartQty / minPurchaseQty) / skuDetails.count);
                    
                    if (sellCartQty <= dealCartQty) {
                        
                        toGiveQty = sellCartQty;
                    }
                    else {
                        toGiveQty = dealCartQty;
                    }
                    
                    
                }
                float offerPrice = 0;
                float tempOfferPrice = 0;
                for (NSMutableArray *details in skuDetails) {
                    float givenQty = 0;
                    if ([self checkOneArray:sellSkukuList containsAllIn:dealSkukuList]) {
                        for (int c = details.count - 1; c >= 0; c--) {
                            SkuDetailsModel *skuDetailsModel = details[c];
                            
                            
                            //changed by Srinivasulu on 14/09/2017....
                            
                            float compQty = 0;
                            for (int j = details.count - 1; j >= 0; j--) {
                                
                                SkuDetailsModel * qtyCountSKu = details[j];
                                compQty = compQty + qtyCountSKu.quantity;
                            }
                            
                            //commented by Srinivasulu on 14/09/2017....
                            //reason is we have to check for purhcase quantity not for number of items....
                            
                            //if (details.count == minPurchaseQty) {
                            //if ((skuDetailsModel.quantity >= minPurchaseQty) || (details.count == minPurchaseQty)) {
                            
                            //                            if(compQty >= minPurchaseQty){
                            
                            if((compQty >= minPurchaseQty && skuDetailsModel.quantity == minPurchaseQty) || (compQty >= minPurchaseQty) ){
                                
                                //upto here on 14/09/2017....
                                
                                if (givenQty <= toGiveQty) {
                                    
                                    if (rewardQty == 0) {
                                        // givenQty = 1;
                                        
                                    }
                                    int itemId = (int)[itemsSkuIdList indexOfObject:skuDetailsModel.skuID];
                                    offerPrice = [mProductOfferPrice[itemId] floatValue];
                                    //                                    if (discountIdArrayList.count > [itemsSkuIdList indexOfObject:skuDetailsModel.skuID]) {
                                    //                                        [discountIdArrayList replaceObjectAtIndex:[itemsSkuIdList indexOfObject:skuDetailsModel.skuID] withObject:applyOffer.offerID];
                                    //                                    } else {
                                    //                                        [discountIdArrayList addObject:applyOffer.offerID];
                                    //                                    }
                                    
                                    
                                    NSString *tempDiscountType, *tempDiscountId;
                                    tempDiscountType = discountTypeArrayList[itemId];
                                    tempDiscountId = discountIdArrayList[itemId];
                                    NSMutableArray *appliedOfferIdsList = [[tempDiscountId componentsSeparatedByString:@","] mutableCopy];
                                    
                                    
                                    if (toGiveQty - givenQty > skuDetailsModel.quantity) {
                                        
                                        if ([rewardType.lowercaseString containsString:@"percentage"]) {
                                            tempOfferPrice = (float) ((skuDetailsModel.quantity
                                                                       * ((rewardValue * skuDetailsModel.price) / 100)));
                                        } else if ([rewardType.lowercaseString containsString:@"fixed_rate"]) {
                                            tempOfferPrice = (float) ((skuDetailsModel.quantity * (skuDetailsModel.price - rewardValue)));
                                        } else {
                                            tempOfferPrice = (float) ((skuDetailsModel.quantity * (rewardValue)));
                                        }
                                        
                                        
                                        BOOL preOfferPrice=false;
                                        if (offerPrice > 0) {
                                            tempOfferPrice = tempOfferPrice + offerPrice;
                                            preOfferPrice=true;
                                        }
                                        
                                        
                                        
                                        if (offerPrice > tempOfferPrice) {
                                            mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(offerPrice);
                                            
                                            // [appliedOfferIdsList addObject:applyOffer.offerID];
                                            appliedOfferIdsArr[itemId] = [appliedOfferIdsList componentsJoinedByString:@","];
                                            NSString *tempDiscountType1;
                                            tempDiscountType1 = discountTypeArrayList[itemId];
                                            // tempDiscountId = discountIdArrayList.get(itemId);
                                            discountTypeArrayList[itemId] = [NSString stringWithFormat:@"%@%@",tempDiscountType1,@" offer,"];
                                            
                                        }
                                        else {
                                            
                                            float prevOfferPrice = [offerPriceList[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] floatValue];
                                            
                                            float amtToBeDeducted = prevOfferPrice / [itemsIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] integerValue];
                                            
                                            prevOfferPrice = prevOfferPrice - (amtToBeDeducted * toGiveQty);
                                            
                                            if (prevOfferPrice > 0) {
                                                
                                                tempOfferPrice = tempOfferPrice + prevOfferPrice;
                                            }
                                            
                                            [appliedOfferIdsList addObject:applyOffer.offerID];
                                            appliedOfferIdsArr[itemId] = [appliedOfferIdsList componentsJoinedByString:@","];
                                            NSString *tempDiscountType1;
                                            tempDiscountType1 = discountTypeArrayList[itemId];
                                            // tempDiscountId = discountIdArrayList.get(itemId);
                                            discountTypeArrayList[itemId] = [NSString stringWithFormat:@"%@%@",tempDiscountType1,@" offer,"];
                                            
                                            
                                            mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(tempOfferPrice);
                                            
                                            if (rewardQty == 0) {
                                                
                                                for (NSString *sku in sellSkukuList) {
                                                    
                                                    int position = (int)[itemsSkuIdList indexOfObject:sku];
                                                    
                                                    if(![sku isEqualToString:skuDetailsModel.skuID]) {
                                                        
                                                        if ([mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] floatValue] > 0) {
                                                            
                                                            float offerPrice = [offerPriceList[[itemsSkuIdList indexOfObject:sku]] floatValue];
                                                            
                                                            float amtToBeDeducted = offerPrice / [itemsIndividualQtyList[position] integerValue];
                                                            
                                                            offerPrice = offerPrice - (amtToBeDeducted * toGiveQty);
                                                            
                                                            if(offerPrice >= 0) {
                                                                mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @(offerPrice);
                                                            }
                                                            
                                                        }
                                                        else {
                                                            
                                                            mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @0.0f;
                                                        }
                                                    }
                                                }
                                                
                                            }
                                        }
                                    } else {
                                        
                                        if ([rewardType.lowercaseString containsString:@"percentage"]) {
                                            
                                            if((toGiveQty - givenQty) < 0) {
                                                
                                                tempOfferPrice = ((givenQty - toGiveQty)
                                                                  * ((rewardValue * skuDetailsModel.price) / 100));
                                                
                                            }
                                            else {
                                                tempOfferPrice = ((toGiveQty - givenQty)
                                                                  * ((rewardValue * skuDetailsModel.price) / 100));
                                                
                                            }
                                        } else if ([rewardType.lowercaseString containsString:@"fixed_rate"]) {
                                            
                                            if((toGiveQty - givenQty) < 0) {
                                                
                                                tempOfferPrice = (float) (((givenQty - toGiveQty) * (skuDetailsModel.price - rewardValue)));
                                                
                                            }
                                            else {
                                                tempOfferPrice = (float) (((toGiveQty - givenQty) * (skuDetailsModel.price - rewardValue)));
                                            }
                                        } else {
                                            
                                            if((toGiveQty - givenQty) < 0) {
                                                
                                                tempOfferPrice = (float) (((givenQty - toGiveQty) * (rewardValue)));
                                                
                                            }
                                            else {
                                                tempOfferPrice = (float) (((toGiveQty - givenQty) * (rewardValue)));
                                                
                                            }
                                        }
                                        
                                        
                                        if (offerPrice > tempOfferPrice) {
                                            mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(offerPrice);
                                            
                                            // [appliedOfferIdsList addObject:applyOffer.offerID];
                                            appliedOfferIdsArr[itemId] = [appliedOfferIdsList componentsJoinedByString:@","];
                                            NSString *tempDiscountType1;
                                            tempDiscountType1 = discountTypeArrayList[itemId];
                                            // tempDiscountId = discountIdArrayList.get(itemId);
                                            discountTypeArrayList[itemId] = [NSString stringWithFormat:@"%@%@",tempDiscountType1,@" offer,"];
                                            
                                        }
                                        else {
                                            
                                            float prevOfferPrice = [offerPriceList[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] floatValue];
                                            
                                            float amtToBeDeducted = prevOfferPrice / [itemsIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] integerValue];
                                            
                                            prevOfferPrice = prevOfferPrice - (amtToBeDeducted * toGiveQty);
                                            
                                            if (prevOfferPrice > 0) {
                                                
                                                tempOfferPrice = tempOfferPrice + prevOfferPrice;
                                            }
                                            
                                            [appliedOfferIdsList addObject:applyOffer.offerID];
                                            appliedOfferIdsArr[itemId] = [appliedOfferIdsList componentsJoinedByString:@","];
                                            NSString *tempDiscountType1;
                                            tempDiscountType1 = discountTypeArrayList[itemId];
                                            // tempDiscountId = discountIdArrayList.get(itemId);
                                            discountTypeArrayList[itemId] = [NSString stringWithFormat:@"%@%@",tempDiscountType1,@" offer,"];
                                            
                                            
                                            mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(tempOfferPrice);
                                            
                                            if (rewardQty == 0) {
                                                
                                                for (NSString *sku in sellSkukuList) {
                                                    
                                                    int position = [itemsSkuIdList indexOfObject:sku];
                                                    
                                                    if(![sku isEqualToString:skuDetailsModel.skuID]) {
                                                        
                                                        if ([mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] floatValue] > 0) {
                                                            
                                                            float offerPrice = [offerPriceList[[itemsSkuIdList indexOfObject:sku]] floatValue];
                                                            
                                                            float amtToBeDeducted = offerPrice / [itemsIndividualQtyList[position] integerValue];
                                                            
                                                            offerPrice = offerPrice - (amtToBeDeducted * toGiveQty);
                                                            
                                                            if(offerPrice >= 0) {
                                                                
                                                                mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @(offerPrice);
                                                            }
                                                            
                                                        }
                                                        else {
                                                            
                                                            mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @0.0f;
                                                        }
                                                    }
                                                }
                                                
                                            }
                                            
                                            
                                        }
                                        
                                    }
                                    
                                    @try {
                                        repeatArrayList[itemId] = [NSNumber numberWithBool:TRUE];
                                        mAllowMultipleDiscounts[itemId] = [NSNumber numberWithBool:TRUE];
                                    } @catch (NSException *e) {
                                    }
                                    mProductOfferDescription[itemId] = applyOffer.offerDescription;
                                    
                                    offerType = applyOffer.rewardType;
                                    // mProductOfferPrice.add(itemId, offerPrice);
                                    mProductOfferType[itemId] = offerType;
                                    
                                    
                                }
                                //                                else if (offerPrice == 0) {
                                //                                    [discountIdArrayList replaceObjectAtIndex:[itemsSkuIdList indexOfObject:skuDetailsModel.skuID] withObject:@""];
                                //                                }
                                givenQty += skuDetailsModel.quantity;
                            }
                            
                        }
                        
                    }
                    else {
                        for (int c = 0; c < details.count; c++) {
                            SkuDetailsModel *skuDetailsModel = details[c];
                            if (givenQty <= toGiveQty) {
                                
                                if (rewardQty == 0) {
                                    //givenQty = 1;
                                }
                                
                                int itemId = (int)[itemsSkuIdList indexOfObject:skuDetailsModel.skuID];
                                offerPrice = [mProductOfferPrice[itemId] floatValue];
                                //                                if (discountIdArrayList.count > [itemsSkuIdList indexOfObject:skuDetailsModel.skuID]) {
                                //                                    [discountIdArrayList replaceObjectAtIndex:[itemsSkuIdList indexOfObject:skuDetailsModel.skuID] withObject:applyOffer.offerID];
                                //                                } else {
                                //                                    [discountIdArrayList addObject:applyOffer.offerID];
                                //                                }
                                
                                NSString *tempDiscountType, *tempDiscountId;
                                tempDiscountType = discountTypeArrayList[itemId];
                                tempDiscountId = discountIdArrayList[itemId];
                                NSMutableArray *appliedOfferIdsList = [[tempDiscountId componentsSeparatedByString:@","] mutableCopy];
                                
                                
                                if (toGiveQty - givenQty > skuDetailsModel.quantity) {
                                    
                                    if ([rewardType.lowercaseString containsString:@"percentage"]) {
                                        tempOfferPrice = (float) ((skuDetailsModel.quantity
                                                                   * ((rewardValue * skuDetailsModel.price) / 100)));
                                    } else if ([rewardType.lowercaseString containsString:@"fixed_rate"]) {
                                        tempOfferPrice = (float) ((skuDetailsModel.quantity * (skuDetailsModel.price - rewardValue)));
                                    } else {
                                        tempOfferPrice = (float) ((skuDetailsModel.quantity * (rewardValue)));
                                    }
                                    
                                    BOOL preOfferPrice=false;
                                    if (offerPrice > 0) {
                                        tempOfferPrice = tempOfferPrice + offerPrice;
                                        preOfferPrice=true;
                                    }
                                    
                                    if (offerPrice > tempOfferPrice) {
                                        mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(offerPrice);
                                        
                                        // [appliedOfferIdsList addObject:applyOffer.offerID];
                                        appliedOfferIdsArr[itemId] = [appliedOfferIdsList componentsJoinedByString:@","];
                                        NSString *tempDiscountType1;
                                        tempDiscountType1 = discountTypeArrayList[itemId];
                                        // tempDiscountId = discountIdArrayList.get(itemId);
                                        discountTypeArrayList[itemId] = [NSString stringWithFormat:@"%@%@",tempDiscountType1,@" offer,"];
                                        
                                    }
                                    else{
                                        
                                        float prevOfferPrice = [offerPriceList[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] floatValue];
                                        
                                        float amtToBeDeducted = prevOfferPrice / [itemsIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] integerValue];
                                        
                                        prevOfferPrice = prevOfferPrice - (amtToBeDeducted * toGiveQty);
                                        
                                        if (prevOfferPrice > 0) {
                                            
                                            tempOfferPrice = tempOfferPrice + prevOfferPrice;
                                        }
                                        
                                        [appliedOfferIdsList addObject:applyOffer.offerID];
                                        appliedOfferIdsArr[itemId] = [appliedOfferIdsList componentsJoinedByString:@","];
                                        NSString *tempDiscountType1;
                                        tempDiscountType1 = discountTypeArrayList[itemId];
                                        // tempDiscountId = discountIdArrayList.get(itemId);
                                        discountTypeArrayList[itemId] = [NSString stringWithFormat:@"%@%@",tempDiscountType1,@" offer,"];
                                        
                                        mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(tempOfferPrice);
                                        
                                        if (rewardQty == 0) {
                                            
                                            int count = 0;
                                            
                                            for (NSString *sku in sellSkukuList) {
                                                
                                                int position = [itemsSkuIdList indexOfObject:sku];
                                                
                                                if(![sku isEqualToString:skuDetailsModel.skuID]) {
                                                    
                                                    if (count > (sellCartQty - toGiveQty)) {
                                                        
                                                        if ([mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] floatValue] > 0) {
                                                            
                                                            float offerPrice = [offerPriceList[[itemsSkuIdList indexOfObject:sku]] floatValue];
                                                            
                                                            float amtToBeDeducted = offerPrice / [itemsIndividualQtyList[position] integerValue];
                                                            
                                                            offerPrice = offerPrice - (amtToBeDeducted * toGiveQty);
                                                            
                                                            if(offerPrice >= 0) {
                                                                
                                                                mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @(offerPrice);
                                                            }
                                                            else {
                                                                
                                                                mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @0.0f;
                                                            }
                                                        }
                                                        else {
                                                            
                                                            mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @0.0f;
                                                        }
                                                    }
                                                }
                                                count++;
                                            }
                                            
                                        }
                                        
                                        
                                    }
                                } else {
                                    
                                    if ([rewardType.lowercaseString containsString:@"percentage"]) {
                                        
                                        if((toGiveQty - givenQty) < 0) {
                                            
                                            tempOfferPrice = ((givenQty - toGiveQty)
                                                              * ((rewardValue * skuDetailsModel.price) / 100));
                                            
                                        }
                                        else {
                                            tempOfferPrice = ((toGiveQty - givenQty)
                                                              * ((rewardValue * skuDetailsModel.price) / 100));
                                            
                                        }
                                    } else if ([rewardType.lowercaseString containsString:@"fixed_rate"]) {
                                        
                                        if((toGiveQty - givenQty) < 0) {
                                            tempOfferPrice = (float) (((givenQty - toGiveQty) * (skuDetailsModel.price - rewardValue)));
                                            
                                        }
                                        else {
                                            tempOfferPrice = (float) (((toGiveQty - givenQty) * (skuDetailsModel.price - rewardValue)));
                                            
                                        }
                                    } else {
                                        
                                        if((toGiveQty - givenQty) < 0) {
                                            
                                            tempOfferPrice = (float) (((givenQty - toGiveQty) * (rewardValue)));
                                            
                                        }
                                        else {
                                            tempOfferPrice = (float) (((toGiveQty - givenQty) * (rewardValue)));
                                            
                                        }
                                    }
                                    
                                    if (offerPrice > tempOfferPrice) {
                                        mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(offerPrice);
                                        
                                        // [appliedOfferIdsList addObject:applyOffer.offerID];
                                        appliedOfferIdsArr[itemId] = [appliedOfferIdsList componentsJoinedByString:@","];
                                        NSString *tempDiscountType1;
                                        tempDiscountType1 = discountTypeArrayList[itemId];
                                        // tempDiscountId = discountIdArrayList.get(itemId);
                                        discountTypeArrayList[itemId] = [NSString stringWithFormat:@"%@%@",tempDiscountType1,@" offer,"];
                                        
                                        mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(tempOfferPrice);
                                        
                                    }
                                    else {
                                        
                                        float prevOfferPrice = [offerPriceList[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] floatValue];
                                        
                                        float amtToBeDeducted = prevOfferPrice / [itemsIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] integerValue];
                                        
                                        prevOfferPrice = prevOfferPrice - (amtToBeDeducted * toGiveQty);
                                        
                                        if (prevOfferPrice > 0) {
                                            
                                            tempOfferPrice = tempOfferPrice + prevOfferPrice;
                                        }
                                        
                                        [appliedOfferIdsList addObject:applyOffer.offerID];
                                        appliedOfferIdsArr[itemId] = [appliedOfferIdsList componentsJoinedByString:@","];
                                        NSString *tempDiscountType1;
                                        tempDiscountType1 = discountTypeArrayList[itemId];
                                        // tempDiscountId = discountIdArrayList.get(itemId);
                                        discountTypeArrayList[itemId] = [NSString stringWithFormat:@"%@%@",tempDiscountType1,@" offer,"];
                                        
                                        mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(tempOfferPrice);
                                        
                                        
                                        mProductOfferPrice[[itemsSkuIdList indexOfObject:skuDetailsModel.skuID]] = @(tempOfferPrice);
                                        
                                        if (rewardQty == 0) {
                                            
                                            int count = 0;
                                            
                                            for (NSString *sku in sellSkukuList) {
                                                
                                                int position = [itemsSkuIdList indexOfObject:sku];
                                                
                                                if(![sku isEqualToString:skuDetailsModel.skuID]) {
                                                    //  if (count > (sellCartQty - toGiveQty)) {
                                                    
                                                    if ([mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] floatValue] > 0) {
                                                        
                                                        //  if (c == (details.count - 1)) {
                                                        
                                                        float offerPrice = [offerPriceList[[itemsSkuIdList indexOfObject:sku]] floatValue];
                                                        
                                                        float amtToBeDeducted = offerPrice / [itemsIndividualQtyList[position] integerValue];
                                                        
                                                        offerPrice = offerPrice - (amtToBeDeducted * toGiveQty);
                                                        
                                                        if(offerPrice >= 0) {
                                                            
                                                            mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @(offerPrice);
                                                            
                                                        }
                                                        else {
                                                            mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @0.0f;
                                                        }
                                                        
                                                    }
                                                    else {
                                                        
                                                        mProductOfferPrice[[itemsSkuIdList indexOfObject:sku]] = @0.0f;
                                                    }
                                                    //                                                    }
                                                }
                                                count ++;
                                                if (count == toGiveQty) {
                                                    break;
                                                }
                                            }
                                            
                                        }
                                        
                                    }
                                    
                                }
                                
                                @try {
                                    repeatArrayList[itemId] = [NSNumber numberWithBool:TRUE];
                                    mAllowMultipleDiscounts[itemId] = [NSNumber numberWithBool:TRUE];
                                } @catch (NSException *e) {
                                }
                                mProductOfferDescription[itemId] = applyOffer.offerDescription;
                                // [appliedOfferIdsArr replaceObjectAtIndex:itemId withObject:applyOffer.offerID];
                                offerType = applyOffer.rewardType;
                                // mProductOfferPrice.add(itemId, offerPrice);
                                mProductOfferType[itemId] = offerType;
                                //                                NSString *tempDiscountType;
                                //                                tempDiscountType = [discountTypeArrayList objectAtIndex:itemId];
                                //                                // tempDiscountId = discountIdArrayList.get(itemId);
                                //                                [discountTypeArrayList replaceObjectAtIndex:itemId withObject:[NSString stringWithFormat:@"%@%@",tempDiscountType,@" offer,"]];
                                
                            }
                            //                            else if (offerPrice == 0) {
                            //                                [discountIdArrayList replaceObjectAtIndex:[itemsSkuIdList indexOfObject:skuDetailsModel.skuID] withObject:@""];
                            //                            }
                            givenQty += skuDetailsModel.quantity;
                        }
                        
                    }
                    
                }
                
            }
            
        }
    } @catch (NSException *exception) {
        NSLog(@"%@",exception);
    } @finally {
        
        
    }
    
}


-(void)applyComboOffer:(NSMutableArray *)tempComboOfferLists {
    
    float individualDiscountSum = 0;
    int comboCount = 1;
    float comboRewardValue = 0;
    BOOL comboConditionStatus = false;
    float comboMinPurchaseQty = 0;
    float comboItemQtyPurchase = 0;
    int totalComboQty = 0;
    NSMutableArray *comboSkuList = [NSMutableArray new];
    
    NSMutableArray *offerPriceList = [mProductOfferPrice mutableCopy];
    
    
    if (![tempComboOfferLists isKindOfClass:[NSNull class]] && tempComboOfferLists.count > 0) {
        
        @try {
            for (ApplyOfferModel *applyOffer in tempComboOfferLists) {
                for (OfferRangesModel *range in applyOffer.offerRangesList) {
                    if ([range.rangeMode isEqualToString:@"condition"] || [range.rangeMode isEqualToString:@"both"] || (range.rangeMode).length == 0) {
                        [comboSkuList addObjectsFromArray:range.itemsList];
                    }
                }
            }
        } @catch (NSException *e1) {
            
            // TODO Auto-generated catch block
            //e1.printStackTrace();
        }
        
        NSMutableArray *comboCommonSkuList = [self findDuplicates:comboSkuList];
        
        NSMutableArray *overlappedComboList = [NSMutableArray new];
        
        BOOL isComboApplied = false;
        
        for (ApplyOfferModel *applyOffer in tempComboOfferLists) {
            float comboBeforeDiscount = 0;
            comboRewardValue = 0;
            comboMinPurchaseQty = 0;
            comboItemQtyPurchase = 0;
            individualDiscountSum = 0;
            
            int cartQty = 0;
            int noOfComboItems = 0;
            int comboFactor = 1;
            
            float minPurchaseQty = 0;
            
            float sellPurchaseQty = 0;
            float promoPurchaseQty = 0;
            
            float sellItemsMinQty = 0 ;
            float promoItemsMinQty = 0;
            
            NSMutableArray *comboPriceList = [NSMutableArray new];
            NSMutableArray *matchedItemIndexList = [NSMutableArray new];
            NSMutableArray *comboIndividualQtyList = [itemsIndividualQtyList mutableCopy];
            
            float sellMinPurchaseQty = 0;
            
            NSMutableArray *sellSkusList = [NSMutableArray new];
            NSMutableArray *promoSkusList = [NSMutableArray new];
            NSMutableArray *sku = [NSMutableArray new];
            
            
            NSMutableDictionary *minPurchaseQtyDic = [NSMutableDictionary new];
            NSMutableDictionary *comboGroupsDic = [NSMutableDictionary new];
            
            @try {
                
                NSMutableArray *offerRangesList = applyOffer.offerRangesList;
                individualItemIndexesInCombo = [NSMutableArray new];
                
                for (OfferRangesModel *range in offerRangesList) {
                    
                    NSMutableArray *comboRangeSkuList = [NSMutableArray new];
                    
                    if ([range.rangeMode isEqualToString:@"condition"] || [range.rangeMode isEqualToString:@"both"] || [range.rangeMode isEqualToString:@"promotion"]) {
                        
                        minPurchaseQty += range.minimumPurchaseQuantity;
                        
                        for (NSString *skuId in range.itemsList) {
                            if (skuId.length > 0  && [skuId caseInsensitiveCompare:@"ALL"] != NSOrderedSame) {
                                
                                [comboRangeSkuList addObject:skuId];
                            }
                            
                        }
                        //  comboRangeSkuList = range.itemsList;
                        //                       NSMutableArray *tempComboCommonSkuList = [[NSMutableArray alloc] init];
                        //                       for (NSString *skuStr in comboCommonSkuList) {
                        //                           if ([itemsSkuIdList containsObject:skuStr]) {
                        //                               [tempComboCommonSkuList addObject:skuStr];
                        //                           }
                        //                       }
                        //                       comboCommonSkuList = [tempComboCommonSkuList mutableCopy];
                        NSMutableArray *tempList = [[NSMutableArray alloc] initWithArray:comboRangeSkuList];
                        NSMutableArray *tempSellSkuList = [[NSMutableArray alloc] init];
                        for (NSString *skuStr in tempList) {
                            if ([comboCommonSkuList containsObject:skuStr]) {
                                [tempSellSkuList addObject:skuStr];
                            }
                        }
                        
                        tempList = [tempSellSkuList mutableCopy];
                        
                        
                        if (tempList.count == 0) {
                            
                            NSMutableArray *commonItemsList = [comboRangeSkuList mutableCopy];
                            // commonItemsList.retainAll(mProductSkuIdArrayList);
                            NSMutableArray *tempCommonItemsList = [NSMutableArray new];
                            for (NSString *str in itemsSkuIdList) {
                                if ([commonItemsList containsObject:str]) {
                                    [tempCommonItemsList addObject:str];
                                }
                            }
                            commonItemsList = [tempCommonItemsList mutableCopy];
                            NSMutableArray *tempList2 = [commonItemsList mutableCopy];
                            for (NSString *sku in commonItemsList) {
                                int index = (int)[itemsSkuIdList indexOfObject:sku];
                                if ([itemsStatusList[index] isEqualToString:@"void"]){
                                    [tempList2 removeObject:sku];
                                }
                            }
                            commonItemsList = [tempList2 mutableCopy];
                            
                            //added to differentiate sell skus and promo items....
                            
                            if([range.rangeMode isEqualToString:@"condition"]) {
                                
                                NSMutableArray *tempArr = [NSMutableArray new];
                                
                                float quantity = 0;
                                
                                for(NSString *skuId in commonItemsList) {
                                    int indexOfIndividualItem = [itemsSkuIdList indexOfObject:skuId];
                                    SkuDetailsModel *skuDetails = [SkuDetailsModel new];
                                    skuDetails.price = ([itemsUnitPriceList[indexOfIndividualItem] floatValue]);
                                    skuDetails.quantity = ([itemsIndividualQtyList[indexOfIndividualItem] floatValue]);
                                    skuDetails.skuID = (itemsSkuIdList[indexOfIndividualItem]);
                                    skuDetails.cost = ([itemsUnitPriceList[indexOfIndividualItem] floatValue]) * ([itemsIndividualQtyList[indexOfIndividualItem] floatValue]);
                                    skuDetails.groupId = range.groupId;
                                    quantity += skuDetails.quantity;
                                    
                                    [sellSkusList addObject:skuDetails];
                                    [tempArr addObject:skuDetails];
                                    
                                }
                                sellItemsMinQty += range.minimumPurchaseQuantity;
                                minPurchaseQtyDic[range.groupId] = [NSNumber numberWithInt:range.minimumPurchaseQuantity];
                                
                                comboGroupsDic[range.groupId] = tempArr;
                                
                                if (quantity < range.minimumPurchaseQuantity) {
                                    
                                    comboConditionStatus = false;
                                    break;
                                }
                            }
                            
                            else if([range.rangeMode isEqualToString:@"both"] || [range.rangeMode isEqualToString:@"promotion"]) {
                                
                                NSMutableArray *tempArr = [NSMutableArray new];
                                
                                for(NSString *skuId in commonItemsList) {
                                    int indexOfIndividualItem = [itemsSkuIdList indexOfObject:skuId];
                                    SkuDetailsModel *skuDetails = [SkuDetailsModel new];
                                    skuDetails.price = ([itemsUnitPriceList[indexOfIndividualItem] floatValue]);
                                    skuDetails.quantity = ([itemsIndividualQtyList[indexOfIndividualItem] floatValue]);
                                    skuDetails.skuID = (itemsSkuIdList[indexOfIndividualItem]);
                                    skuDetails.cost = ([itemsUnitPriceList[indexOfIndividualItem] floatValue]) * ([itemsIndividualQtyList[indexOfIndividualItem] floatValue]);
                                    skuDetails.groupId = range.groupId;
                                    [promoSkusList addObject:skuDetails];
                                    [tempArr addObject:skuDetails];
                                    
                                    for (SkuDetailsModel *sellSkus in [sellSkusList reverseObjectEnumerator]) {
                                        
                                        if ([sellSkus.skuID isEqualToString:skuDetails.skuID]) {
                                            
                                            [sellSkusList removeObject:sellSkus];
                                            sellMinPurchaseQty--;
                                        }
                                        
                                    }
                                }
                                promoItemsMinQty += [minPurchaseQtyDic[range.groupId] intValue];
                                
                                sellItemsMinQty = sellItemsMinQty - promoItemsMinQty;
                                
                                comboGroupsDic[range.groupId] = tempArr;
                                
                                
                                break;
                            }
                            
                            
                            
                            if (commonItemsList.count > 1) {
                                float d = 0.0f;
                                for (int i = 0; i < commonItemsList.count; i++) {
                                    
                                    d = d + [self getSkuCountFromCart:commonItemsList[i]];
                                }
                                if (d >= 2) {
                                    for (int j = 0; j < comboRangeSkuList.count; j++) {
                                        
                                        //added by sonali
                                        
                                        int indexOfIndividualItem = [itemsSkuIdList indexOfObject:comboRangeSkuList[j]];                                       [individualItemIndexesInCombo addObject:@(indexOfIndividualItem)];
                                        
                                        
                                        comboBeforeDiscount = comboBeforeDiscount + [itemsIndividualQtyList[indexOfIndividualItem] floatValue] * [itemsUnitPriceList[indexOfIndividualItem] floatValue];
                                        
                                        //added by sonali
                                        
                                        [comboPriceList addObject:@([itemsUnitPriceList[indexOfIndividualItem] floatValue])];
                                        [matchedItemIndexList addObject:@(indexOfIndividualItem)];
                                        cartQty = cartQty + [itemsIndividualQtyList[indexOfIndividualItem] intValue];
                                        noOfComboItems++;
                                        
                                        individualDiscountSum = individualDiscountSum + ([mProductDealQty[indexOfIndividualItem] floatValue] * [itemsUnitPriceList[indexOfIndividualItem] floatValue]) + [offerPriceList[indexOfIndividualItem] floatValue];
                                        
                                        
                                    }
                                    if (d < comboCount) {
                                        comboCount = (int) floor(d);
                                    }
                                    comboConditionStatus = true;
                                }
                            } else if (commonItemsList.count > 0) {
                                
                                float d = [self getSkuCountFromCart:commonItemsList[0]] / range.minimumPurchaseQuantity;
                                comboItemQtyPurchase += [self getSkuCountFromCart:commonItemsList[0]];
                                comboMinPurchaseQty += range.minimumPurchaseQuantity;
                                if (d >= 1) {
                                    int indexOfIndividualItem = [itemsSkuIdList indexOfObject:comboRangeSkuList[0]];
                                    
                                    int toGiveQty = (int) (comboItemQtyPurchase/comboMinPurchaseQty);
                                    
                                    //  comboPriceList =  [[[[comboPriceList sortedArrayUsingSelector:@selector(compare:)] reverseObjectEnumerator] allObjects] mutableCopy];
                                    
                                    cartQty = cartQty + [itemsIndividualQtyList[indexOfIndividualItem] intValue];
                                    
                                    noOfComboItems++;
                                    
                                    if (comboPriceList.count) {
                                        
                                        comboBeforeDiscount = 0;
                                        
                                        individualItemIndexesInCombo = [NSMutableArray new];
                                        
                                        comboFactor = cartQty/noOfComboItems;
                                        
                                        if (cartQty % (int)minPurchaseQty != 0) {
                                            
                                            int diference = noOfComboItems - minPurchaseQty;
                                            
                                            for (int i=0; i<=diference; i++) {
                                                
                                                noOfComboItems = noOfComboItems - 1;
                                            }
                                            
                                        }
                                        
                                        
                                        for (int i=0; i<noOfComboItems; i++) {
                                            
                                            if (comboPriceList.count > i) {
                                                
                                                comboBeforeDiscount += ([comboPriceList[i] floatValue] * comboFactor);
                                                
                                                [individualItemIndexesInCombo addObject:@([matchedItemIndexList[i] intValue])];
                                                //  [comboIndividualQtyList replaceObjectAtIndex:[[matchedItemIndexList objectAtIndex:i] intValue] withObject:[NSNumber numberWithInt:comboFactor]];
                                            }
                                            
                                        }
                                    }
                                    
                                    
                                    comboBeforeDiscount = comboBeforeDiscount + (toGiveQty * [itemsUnitPriceList[indexOfIndividualItem] floatValue]);
                                    
                                    [comboPriceList addObject:@([itemsUnitPriceList[indexOfIndividualItem] floatValue])];
                                    [matchedItemIndexList addObject:@(indexOfIndividualItem)];
                                    [individualItemIndexesInCombo addObject:@(indexOfIndividualItem)];
                                    
                                    // [comboIndividualQtyList replaceObjectAtIndex:indexOfIndividualItem withObject:[NSNumber numberWithInt:toGiveQty]];
                                    
                                    
                                    if (d < comboCount) {
                                        comboCount = (int) floor(d);
                                    }
                                    
                                    individualDiscountSum = individualDiscountSum + ([mProductDealQty[indexOfIndividualItem] floatValue] * [itemsUnitPriceList[indexOfIndividualItem] floatValue]) + [offerPriceList[indexOfIndividualItem] floatValue];
                                    
                                    
                                    comboConditionStatus = true;
                                }
                                
                            } else {
                                comboConditionStatus = false;
                                break;
                            }
                        } else {
                            if (![overlappedComboList containsObject:applyOffer]) {
                                [overlappedComboList addObject:applyOffer];
                                comboConditionStatus = false;
                            }
                        }
                    }
                }
                
                totalComboQty = 0;
                //                if (comboMinPurchaseQty !=0 ) {
                //                    totalComboQty = (int) (comboItemQtyPurchase/minPurchaseQty);
                //                }
                //                else if(comboMinPurchaseQty == 0) {
                //
                //                    comboConditionStatus = false;
                //                }
                if (comboConditionStatus) {
                    
                    if (comboPriceList.count) {
                        
                        sellSkusList = [self sortTheArray:sellSkusList withKey:@"cost" isAscending:NO];
                        promoSkusList = [self sortTheArray:promoSkusList withKey:@"cost" isAscending:NO];
                        
                        sellPurchaseQty = 0;
                        promoPurchaseQty = 0;
                        
                        for(SkuDetailsModel *skuDetails in sellSkusList) {
                            
                            sellPurchaseQty += skuDetails.quantity;
                        }
                        
                        for(SkuDetailsModel *skuDetails in promoSkusList) {
                            
                            promoPurchaseQty += skuDetails.quantity;
                        }
                        
                        
                        
                        totalComboQty = (sellPurchaseQty + promoPurchaseQty) / minPurchaseQty;
                        
                        NSMutableArray *groupItemsQtyArr = [NSMutableArray new];
                        
                        for (int i=0; i<comboGroupsDic.allKeys.count; i++) {
                            
                            NSArray *sortedArr = comboGroupsDic.allValues[i];
                            float qtySum = 0 ;
                            for (SkuDetailsModel *sku in sortedArr) {
                                
                                qtySum += sku.quantity;
                            }
                            
                            qtySum = qtySum/[[minPurchaseQtyDic valueForKey:comboGroupsDic.allKeys[i]] floatValue];
                            
                            [groupItemsQtyArr addObject:@((int)qtySum)];
                        }
                        
                        
                        groupItemsQtyArr = [[[groupItemsQtyArr sortedArrayUsingSelector:@selector(compare:)] reverseObjectEnumerator].allObjects mutableCopy];
                        
                        totalComboQty = [groupItemsQtyArr.lastObject floatValue];
                        
                        comboBeforeDiscount = 0;
                        
                        individualItemIndexesInCombo = [NSMutableArray new];
                        
                        comboFactor = cartQty/noOfComboItems;
                        
                        //  if ((int)sellPurchaseQty % (int)minPurchaseQty != 0 || (int)promoPurchaseQty % (int)minPurchaseQty != 0 || sellPurchaseQty!=promoPurchaseQty) {
                        
                        //                            if (sellPurchaseQty >= sellItemsMinQty) {
                        //
                        //                                int diference =  (sellPurchaseQty - sellItemsMinQty);
                        //
                        //
                        //                                for (int i=diference; i>0; i--) {
                        //                                    if ([sellSkusList count] > sellItemsMinQty) {
                        //
                        //                                        SkuDetailsModel *details = [sellSkusList objectAtIndex:i];
                        //                                        if (details.quantity <= totalComboQty) {
                        //                                            [sellSkusList removeLastObject];
                        //                                        }
                        //                                    }
                        //
                        //                                }
                        //
                        //
                        //                            }
                        //                            if (promoPurchaseQty >= promoItemsMinQty) {
                        //
                        //                                int diference1 = promoPurchaseQty - totalComboQty;
                        //                                if ([promoSkusList count] > promoItemsMinQty) {
                        //
                        //                                    for (int i=diference1; i>0; i--) {
                        //
                        //                                        if ([promoSkusList count] > 1) {
                        //                                            SkuDetailsModel *details = [promoSkusList objectAtIndex:i];
                        //                                            if (details.quantity <= totalComboQty) {
                        //
                        //                                                [promoSkusList removeLastObject];
                        //                                            }
                        //                                        }
                        //                                    }
                        //                                }
                        //                            }
                        //}
                        
                        sku = [NSMutableArray new];
                        
                        for (int i=0; i<comboGroupsDic.allKeys.count; i++) {
                            
                            NSMutableArray *sortedArr = [[self sortTheArray:comboGroupsDic.allValues[i] withKey:@"cost" isAscending:NO] mutableCopy];
                            
                            
                            float itemQty = 0;
                            
                            for (int j=0; j<sortedArr.count; j++) {
                                
                                SkuDetailsModel *skuDetails = sortedArr[j];
                                
                                [sku addObject:sortedArr[j]];
                                
                                itemQty += skuDetails.quantity;
                                
                                if ((int)(itemQty/[[minPurchaseQtyDic valueForKey:skuDetails.groupId] floatValue]) >= totalComboQty) {
                                    
                                    // int difference = (int)(itemQty/[[minPurchaseQtyDic valueForKey:skuDetails.groupId] floatValue]) - totalComboQty;
                                    
                                    int difference = (int)(itemQty - (totalComboQty * [[minPurchaseQtyDic valueForKey:skuDetails.groupId] intValue]));
                                    
                                    if (difference > 0 ) {
                                        
                                        skuDetails.quantity = skuDetails.quantity - difference;
                                        sortedArr[j] = skuDetails;
                                        comboIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetails.skuID]] = [NSNumber numberWithInt:skuDetails.quantity];
                                    }
                                    break;
                                    
                                }
                            }
                        }
                        
                        
                        
                        //                        [sku addObjectsFromArray:sellSkusList];
                        //
                        //                        [sku addObjectsFromArray:promoSkusList];
                        
                        noOfComboItems = (int)sku.count;
                    }
                    
                    
                    for (int i=0; i<noOfComboItems; i++) {
                        
                        if (sku.count > i) {
                            
                            SkuDetailsModel *skuDetails = sku[i];
                            
                            if ((int)(skuDetails.quantity/[[minPurchaseQtyDic valueForKey:skuDetails.groupId] floatValue]) > totalComboQty && (sellPurchaseQty >= sellItemsMinQty || promoSkusList.count >= promoItemsMinQty)) {
                                
                                comboBeforeDiscount += (skuDetails.price  * totalComboQty);
                                
                                comboIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetails.skuID]] = @(totalComboQty);
                                
                                
                            }
                            else {
                                
                                comboBeforeDiscount += (skuDetails.price * [comboIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetails.skuID]] intValue]);
                                
                            }
                            [individualItemIndexesInCombo addObject:[NSNumber numberWithInt:[itemsSkuIdList indexOfObject:skuDetails.skuID]]];
                        }
                        
                    }
                    
                    
                    
                    for (OfferRangesModel *range in offerRangesList) {
                        if ([range.rangeMode containsString:@"promotion"] || [range.rangeMode containsString:@"both"]) {
                            NSString *rangeRewartType = range.rangeRewardType;
                            if ([rangeRewartType containsString:@"fixed_rate"]) {
                                //                                comboRewardValue = comboRewardValue + (comboCount * ((totalComboQty * comboBeforeDiscount) - (totalComboQty * range.rewardValue)));
                                
                                comboRewardValue = comboRewardValue + (comboCount * ( comboBeforeDiscount - (totalComboQty * range.rewardValue)));
                                
                            }
                            if ([rangeRewartType containsString:@"flat_rate"]) {
                                comboRewardValue = comboRewardValue + (comboCount * (range.rewardValue));
                                
                            }
                            if ([rangeRewartType containsString:@"percentage"]) {
                                comboRewardValue = comboRewardValue + (comboCount * (((comboBeforeDiscount * (range.rewardValue / 100)))));
                            }
                        }
                    }
                    
                    //check for individual discounts sum...
                    
                    float  individualDiscountSumTemp = 0;
                    
                    for (NSNumber *p in individualItemIndexesInCombo) {
                        
                        float offerPrice = [offerPriceList[p.intValue] floatValue];
                        
                        if([comboIndividualQtyList[p.intValue] intValue] != [itemsIndividualQtyList[p.intValue] intValue]) {
                            
                            
                            float amtToBeDeducted = offerPrice / [itemsIndividualQtyList[p.intValue] integerValue];
                            
                            offerPrice = offerPrice - (amtToBeDeducted * totalComboQty);
                            individualDiscountSumTemp = individualDiscountSumTemp + offerPrice;
                            
                        }
                    }
                    if (individualDiscountSumTemp > 0) {
                        individualDiscountSumTemp += comboRewardValue;
                    }
                    if (individualDiscountSumTemp > individualDiscountSum) {
                        
                        individualDiscountSum = 0;
                    }
                    
                    if (individualDiscountSum < comboRewardValue) {
                        
                        
                        float tempValue = comboRewardValue / comboBeforeDiscount;
                        
                        for (NSNumber *p in individualItemIndexesInCombo) {
                            OfferRangesModel *tempRange = NULL;
                            for (OfferRangesModel *range in offerRangesList) {
                                if ([range.itemsList containsObject:itemsSkuIdList[p.intValue]]) {
                                    tempRange = range;
                                    break;
                                }
                            }
                            // [mProductOfferPrice replaceObjectAtIndex:[p intValue] withObject:[NSNumber numberWithFloat:tempValue * (tempRange.minimumPurchaseQuantity * [[itemsUnitPriceList objectAtIndex:[p intValue]] floatValue])]];
                            
                            if([comboIndividualQtyList[p.intValue] intValue] != [itemsIndividualQtyList[p.intValue] intValue]) {
                                
                                float offerPrice = [offerPriceList[p.intValue] floatValue];
                                
                                float amtToBeDeducted = offerPrice / [itemsIndividualQtyList[p.intValue] integerValue];
                                
                                offerPrice = offerPrice - (amtToBeDeducted * totalComboQty);
                                
                                if(offerPrice >= 0) {
                                    mProductOfferPrice[p.intValue] = @((tempValue * ([comboIndividualQtyList[p.intValue] intValue] * [itemsUnitPriceList[p.intValue] floatValue]))+offerPrice);
                                }
                                else {
                                    mProductOfferPrice[p.intValue] = @(tempValue * ([comboIndividualQtyList[p.intValue] intValue] * [itemsUnitPriceList[p.intValue] floatValue]));
                                    
                                }
                            }
                            else {
                                mProductOfferPrice[p.intValue] = @(tempValue * ([comboIndividualQtyList[p.intValue] intValue] * [itemsUnitPriceList[p.intValue] floatValue]));
                                
                            }
                            
                            
                            
                            mProductDealQty[p.intValue] = @0;
                            mProductDealDescription[p.intValue] = @"";
                            mAllowMultipleDiscounts[p.intValue] = [NSNumber numberWithBool:TRUE];
                            repeatArrayList[p.intValue] = [NSNumber numberWithBool:TRUE];
                            mProductOfferDescription[p.intValue] = applyOffer.offerDescription;
                            appliedOfferIdsArr[p.intValue] = applyOffer.offerID;
                            
                            NSString *offerType = applyOffer.rewardType;
                            mProductOfferType[p.intValue] = offerType;
                        }
                        isComboApplied = true;
                        
                    }
                }
                
                
            } @catch (NSException *e) {
                
                NSLog(@"%@",e);
                // TODO Auto-generated catch block
                //                e.printStackTrace();
            }
            //                applyOffer.getOfferRangesList().get(0).setItemsList(null);
        }
        
        //applying overlapped combos.....
        
        if (overlappedComboList.count > 0) {
            
            [self applyOverLappedComboOffer:overlappedComboList];
        }
    }
    
    
}

-(void)applyOverLappedComboOffer:(NSMutableArray *)tempComboOfferLists
{
    
    float individualDiscountSum = 0;
    int comboCount = 1;
    float comboRewardValue = 0;
    NSMutableArray *comboRangeSkuList = [NSMutableArray new];
    BOOL comboConditionStatus = false;
    float comboMinPurchaseQty = 0;
    float comboItemQtyPurchase = 0;
    int totalComboQty = 0;
    NSMutableArray *comboSkuList = [NSMutableArray new];
    
    NSMutableArray *offerPriceList = [mProductOfferPrice mutableCopy];
    
    if (![tempComboOfferLists isKindOfClass:[NSNull class]] && tempComboOfferLists.count > 0) {
        
        @try {
            for (ApplyOfferModel *applyOffer in tempComboOfferLists) {
                for (OfferRangesModel *range in applyOffer.offerRangesList) {
                    if ([range.rangeMode isEqualToString:@"condition"] || [range.rangeMode isEqualToString:@"both"] || (range.rangeMode).length == 0) {
                        [comboSkuList addObjectsFromArray:range.itemsList];
                    }
                }
            }
        } @catch (NSException *e1) {
            
            // TODO Auto-generated catch block
            //e1.printStackTrace();
        }
        
        NSMutableArray *comboCommonSkuList = [self findDuplicates:comboSkuList];
        
        NSMutableArray *mutiplePriceItems = [self findDuplicates:itemsSkuIdList];
        
        BOOL isPriceList = false;
        
        
        NSMutableArray *indices = [NSMutableArray new];
        NSMutableDictionary *commonSkuInfo = [NSMutableDictionary new];
        
        int i,count=0;
        
        for (NSString *str in mutiplePriceItems) {
            
            for (i = 0; i < itemsSkuIdList.count; i++) {
                if ([str isEqualToString:itemsSkuIdList[i]] && ![indices containsObject:@(i)]) {
                    indices[count++] = @(i);
                    commonSkuInfo[str] = indices;
                }
            }
        }
        
        BOOL isComboApplied = false;
        
        for (ApplyOfferModel *applyOffer in tempComboOfferLists) {
            float comboBeforeDiscount = 0;
            comboRewardValue = 0;
            comboMinPurchaseQty = 0;
            comboItemQtyPurchase = 0;
            individualDiscountSum = 0;
            
            int cartQty = 0;
            int noOfComboItems = 0;
            int comboFactor = 1;
            
            float minPurchaseQty = 0;
            
            float sellPurchaseQty = 0;
            float promoPurchaseQty = 0;
            
            float sellItemsMinQty = 0 ;
            float promoItemsMinQty = 0;
            
            
            NSMutableArray *comboPriceList = [NSMutableArray new];
            NSMutableArray *matchedItemIndexList = [NSMutableArray new];
            NSMutableArray *comboIndividualQtyList = [itemsIndividualQtyList mutableCopy];
            
            NSMutableArray *sku = [NSMutableArray new];
            
            NSMutableArray *sellSkusList = [NSMutableArray new];
            NSMutableArray *promoSkusList = [NSMutableArray new];
            
            NSMutableDictionary *minPurchaseQtyDic = [NSMutableDictionary new];
            NSMutableDictionary *comboGroupsDic = [NSMutableDictionary new];
            
            
            @try {
                
                NSMutableArray *offerRangesList = applyOffer.offerRangesList;
                individualItemIndexesInCombo = [NSMutableArray new];
                
                for (OfferRangesModel *range in offerRangesList) {
                    if ([range.rangeMode isEqualToString:@"condition"] || [range.rangeMode isEqualToString:@"both"] || [range.rangeMode isEqualToString:@"promotion"]) {
                        comboRangeSkuList = range.itemsList;
                        
                        minPurchaseQty += range.minimumPurchaseQuantity;
                        
                        
                        if (mutiplePriceItems.count) {
                            
                            isPriceList = true;
                            
                            for (NSString *commonSkuId in mutiplePriceItems) {
                                if ([comboRangeSkuList containsObject:commonSkuId]) {
                                    
                                    [comboRangeSkuList addObject:commonSkuId];
                                }
                            }
                        }
                        
                        //                       NSMutableArray *tempComboCommonSkuList = [[NSMutableArray alloc] init];
                        //                       for (NSString *skuStr in comboCommonSkuList) {
                        //                           if ([itemsSkuIdList containsObject:skuStr]) {
                        //                               [tempComboCommonSkuList addObject:skuStr];
                        //                           }
                        //                       }
                        //                       comboCommonSkuList = [tempComboCommonSkuList mutableCopy];
                        NSMutableArray *tempList = [[NSMutableArray alloc] initWithArray:comboRangeSkuList];
                        NSMutableArray *tempSellSkuList = [[NSMutableArray alloc] init];
                        for (NSString *skuStr in tempList) {
                            if ([comboCommonSkuList containsObject:skuStr]) {
                                [tempSellSkuList addObject:skuStr];
                            }
                        }
                        
                        tempList = [tempSellSkuList mutableCopy];
                        
                        //  if ([tempList count] == 0) {
                        
                        NSMutableArray *commonItemsList = [comboRangeSkuList mutableCopy];
                        // commonItemsList.retainAll(mProductSkuIdArrayList);
                        NSMutableArray *tempCommonItemsList = [NSMutableArray new];
                        for (NSString *str in itemsSkuIdList) {
                            if ([commonItemsList containsObject:str]) {
                                [tempCommonItemsList addObject:str];
                            }
                        }
                        commonItemsList = [tempCommonItemsList mutableCopy];
                        NSMutableArray *tempList2 = [commonItemsList mutableCopy];
                        
                        NSMutableDictionary *tempCommonSkuInfo = [commonSkuInfo mutableCopy];
                        
                        for (NSString *sku in commonItemsList) {
                            int index = (int)[itemsSkuIdList indexOfObject:sku];
                            //multiple price implementation...
                            
                            NSMutableArray *positions = [NSMutableArray new];
                            
                            if([mutiplePriceItems containsObject:sku]) {
                                
                                positions = [[tempCommonSkuInfo valueForKey:sku]mutableCopy];
                                
                                index = [positions[0] intValue];
                                
                                if ([itemsStatusList[index] isEqualToString:@"void"]){
                                    [tempList2 removeObject:sku];
                                }
                                [positions removeObjectAtIndex:0];
                                tempCommonSkuInfo[sku] = positions;
                                
                                
                            }
                            else {
                                if ([itemsStatusList[index] isEqualToString:@"void"]){
                                    [tempList2 removeObject:sku];
                                }
                            }
                            
                        }
                        commonItemsList = [tempList2 mutableCopy];
                        
                        //added to differentiate sell skus and promo items....
                        
                        if([range.rangeMode isEqualToString:@"condition"]) {
                            
                            NSMutableArray *tempArr = [NSMutableArray new];
                            for(NSString *skuId in commonItemsList) {
                                int indexOfIndividualItem = [itemsSkuIdList indexOfObject:skuId];
                                SkuDetailsModel *skuDetails = [SkuDetailsModel new];
                                skuDetails.price = ([itemsUnitPriceList[indexOfIndividualItem] floatValue]);
                                skuDetails.quantity = ([itemsIndividualQtyList[indexOfIndividualItem] floatValue]);
                                skuDetails.skuID = (itemsSkuIdList[indexOfIndividualItem]);
                                skuDetails.cost = ([itemsUnitPriceList[indexOfIndividualItem] floatValue]) * ([itemsIndividualQtyList[indexOfIndividualItem] floatValue]);
                                
                                [sellSkusList addObject:skuDetails];
                                [tempArr addObject:skuDetails];
                            }
                            sellItemsMinQty += range.minimumPurchaseQuantity;
                            minPurchaseQtyDic[commonItemsList] = [NSNumber numberWithInt:range.minimumPurchaseQuantity];
                            comboGroupsDic[range.groupId] = tempArr;
                            
                        }
                        
                        else if([range.rangeMode isEqualToString:@"both"] || [range.rangeMode isEqualToString:@"promotion"]) {
                            
                            NSMutableArray *tempArr = [NSMutableArray new];
                            
                            for(NSString *skuId in commonItemsList) {
                                int indexOfIndividualItem = [itemsSkuIdList indexOfObject:skuId];
                                SkuDetailsModel *skuDetails = [SkuDetailsModel new];
                                skuDetails.price = ([itemsUnitPriceList[indexOfIndividualItem] floatValue]);
                                skuDetails.quantity = ([itemsIndividualQtyList[indexOfIndividualItem] floatValue]);
                                skuDetails.skuID = (itemsSkuIdList[indexOfIndividualItem]);
                                skuDetails.cost = ([itemsUnitPriceList[indexOfIndividualItem] floatValue]) * ([itemsIndividualQtyList[indexOfIndividualItem] floatValue]);
                                [promoSkusList addObject:skuDetails];
                                [tempArr addObject:skuDetails];
                                
                                for (SkuDetailsModel *sellSkus in [sellSkusList reverseObjectEnumerator]) {
                                    
                                    if ([sellSkus.skuID isEqualToString:skuDetails.skuID]) {
                                        
                                        [sellSkusList removeObject:sellSkus];
                                        sellPurchaseQty--;
                                    }
                                    
                                }
                                
                            }
                            promoItemsMinQty += [minPurchaseQtyDic[commonItemsList] intValue];
                            
                            
                            sellItemsMinQty = sellItemsMinQty - promoItemsMinQty;
                            comboGroupsDic[range.groupId] = tempArr;
                            
                            break;
                        }
                        
                        if (commonItemsList.count > 1) {
                            float d = 0.0f;
                            for (int i = 0; i < commonItemsList.count; i++) {
                                
                                d = d + [self getSkuCountFromCart:commonItemsList[i]];
                            }
                            if (d >= 2) {
                                for (int j = 0; j < comboRangeSkuList.count; j++) {
                                    
                                    //added by sonali
                                    
                                    //                                    comboItemQtyPurchase += [self getSkuCountFromCart:[comboRangeSkuList objectAtIndex:j]];
                                    //                                    comboMinPurchaseQty += range.minimumPurchaseQuantity;
                                    
                                    
                                    int indexOfIndividualItem = [itemsSkuIdList indexOfObject:comboRangeSkuList[j]];                                       [individualItemIndexesInCombo addObject:@(indexOfIndividualItem)];
                                    
                                    if([mutiplePriceItems containsObject:comboRangeSkuList[j]]) {
                                        
                                        //indexOfIndividualItem =
                                    }
                                    
                                    comboBeforeDiscount = comboBeforeDiscount + [itemsIndividualQtyList[indexOfIndividualItem] floatValue] * [itemsUnitPriceList[indexOfIndividualItem] floatValue];
                                    
                                    //added by sonali
                                    
                                    [comboPriceList addObject:@([itemsUnitPriceList[indexOfIndividualItem] floatValue])];
                                    [matchedItemIndexList addObject:@(indexOfIndividualItem)];
                                    cartQty = cartQty + [itemsIndividualQtyList[indexOfIndividualItem] intValue];
                                    noOfComboItems++;
                                    
                                    individualDiscountSum = individualDiscountSum + ([mProductDealQty[indexOfIndividualItem] floatValue] * [itemsUnitPriceList[indexOfIndividualItem] floatValue]) + [offerPriceList[indexOfIndividualItem] floatValue];
                                    
                                    
                                }
                                if (d < comboCount) {
                                    comboCount = (int) floor(d);
                                }
                                comboConditionStatus = true;
                                
                            }
                        } else if (commonItemsList.count > 0) {
                            
                            float d = [self getSkuCountFromCart:commonItemsList[0]] / range.minimumPurchaseQuantity;
                            comboItemQtyPurchase += [self getSkuCountFromCart:commonItemsList[0]];
                            comboMinPurchaseQty += range.minimumPurchaseQuantity;
                            if (d >= 1) {
                                int indexOfIndividualItem = [itemsSkuIdList indexOfObject:comboRangeSkuList[0]];
                                
                                int toGiveQty = (int) (comboItemQtyPurchase/comboMinPurchaseQty);
                                
                                
                                cartQty = cartQty + [itemsIndividualQtyList[indexOfIndividualItem] intValue];
                                
                                
                                noOfComboItems++;
                                
                                
                                comboBeforeDiscount = comboBeforeDiscount + (toGiveQty * [itemsUnitPriceList[indexOfIndividualItem] floatValue]);
                                
                                [comboPriceList addObject:@([itemsUnitPriceList[indexOfIndividualItem] floatValue])];
                                [matchedItemIndexList addObject:@(indexOfIndividualItem)];
                                [individualItemIndexesInCombo addObject:@(indexOfIndividualItem)];
                                
                                comboIndividualQtyList[indexOfIndividualItem] = @([itemsIndividualQtyList[indexOfIndividualItem] intValue]);
                                
                                
                                
                                if (d < comboCount) {
                                    comboCount = (int) floor(d);
                                }
                                
                                individualDiscountSum = individualDiscountSum + ([mProductDealQty[indexOfIndividualItem] floatValue] * [itemsUnitPriceList[indexOfIndividualItem] floatValue]) + [offerPriceList[indexOfIndividualItem] floatValue];
                                
                                
                                
                                comboConditionStatus = true;
                            }
                            
                        } else {
                            comboConditionStatus = false;
                            break;
                        }
                        //                        }
                    }
                }
                totalComboQty = 0;
                if (minPurchaseQty !=0 ) {
                    //                    totalComboQty = (int) (comboItemQtyPurchase/minPurchaseQty);
                    // totalComboQty = (int) (cartQty/minPurchaseQty);
                    
                    totalComboQty = (int) (comboItemQtyPurchase/comboMinPurchaseQty);
                    
                }
                if (comboConditionStatus ) {
                    
                    if (comboPriceList.count) {
                        
                        sellSkusList = [self sortTheArray:sellSkusList withKey:@"cost" isAscending:NO];
                        promoSkusList = [self sortTheArray:promoSkusList withKey:@"cost" isAscending:NO];
                        
                        sellPurchaseQty = 0;
                        promoPurchaseQty = 0;
                        
                        for(SkuDetailsModel *skuDetails in sellSkusList) {
                            
                            sellPurchaseQty += skuDetails.quantity;
                        }
                        
                        for(SkuDetailsModel *skuDetails in promoSkusList) {
                            
                            promoPurchaseQty += skuDetails.quantity;
                        }
                        
                        
                        int sellComboFactor = (int) sellPurchaseQty % (int) minPurchaseQty;
                        
                        int promoComboFactor = (int) promoPurchaseQty % (int) minPurchaseQty;
                        
                        //                        if (sellComboFactor == 0 && promoComboFactor == 0) {
                        //
                        //                             sellComboFactor =  sellPurchaseQty /  minPurchaseQty;
                        //
                        //                             promoComboFactor =  promoPurchaseQty /  promoItemsMinQty;
                        //
                        //                            if (sellComboFactor <= promoComboFactor ) {
                        //                                if (sellComboFactor != 0) {
                        //                                    totalComboQty = sellComboFactor;
                        //                                }
                        //                                else {
                        //                                    totalComboQty = promoComboFactor;
                        //                                }
                        //                            }
                        //                            else {
                        //                                if (promoComboFactor != 0) {
                        //
                        //                                    totalComboQty = promoComboFactor;
                        //                                }
                        //                                else {
                        //                                    totalComboQty = sellComboFactor;
                        //                                }
                        //                            }
                        //                        }
                        
                        // else {
                        
                        totalComboQty = (sellPurchaseQty + promoPurchaseQty) / minPurchaseQty;
                        //  }
                        
                        NSMutableArray *groupItemsQtyArr = [NSMutableArray new];
                        
                        for (int i=0; i<comboGroupsDic.allKeys.count; i++) {
                            
                            NSArray *sortedArr = comboGroupsDic.allValues[i];
                            float qtySum = 0 ;
                            for (SkuDetailsModel *sku in sortedArr) {
                                
                                qtySum += sku.quantity;
                            }
                            
                            [groupItemsQtyArr addObject:@(qtySum)];
                        }
                        
                        
                        groupItemsQtyArr = [[[groupItemsQtyArr sortedArrayUsingSelector:@selector(compare:)] reverseObjectEnumerator].allObjects mutableCopy];
                        
                        totalComboQty = [groupItemsQtyArr.lastObject floatValue];
                        
                        comboBeforeDiscount = 0;
                        
                        individualItemIndexesInCombo = [NSMutableArray new];
                        
                        comboFactor = cartQty/noOfComboItems;
                        
                        //  if ((int)sellPurchaseQty % (int)minPurchaseQty != 0 || (int)promoPurchaseQty % (int)minPurchaseQty != 0 || sellPurchaseQty!=promoPurchaseQty) {
                        
                        //                            if (sellPurchaseQty >= sellItemsMinQty) {
                        //
                        //                                int diference =  (sellPurchaseQty - sellItemsMinQty);
                        //
                        //
                        //                                for (int i=diference; i>0; i--) {
                        //                                    if ([sellSkusList count] > sellItemsMinQty) {
                        //
                        //                                        SkuDetailsModel *details = [sellSkusList objectAtIndex:i];
                        //                                        if (details.quantity <= totalComboQty) {
                        //                                            [sellSkusList removeLastObject];
                        //                                        }
                        //                                    }
                        //
                        //                                }
                        //
                        //
                        //                            }
                        //                            if (promoPurchaseQty >= promoItemsMinQty) {
                        //
                        //                                int diference1 = promoPurchaseQty - totalComboQty;
                        //                                if ([promoSkusList count] > promoItemsMinQty) {
                        //
                        //                                    for (int i=diference1; i>0; i--) {
                        //
                        //                                        if ([promoSkusList count] > 1) {
                        //                                            SkuDetailsModel *details = [promoSkusList objectAtIndex:i];
                        //                                            if (details.quantity <= totalComboQty) {
                        //
                        //                                                [promoSkusList removeLastObject];
                        //                                            }
                        //                                        }
                        //                                    }
                        //                                }
                        //                            }
                        //}
                        
                        sku = [NSMutableArray new];
                        
                        for (int i=0; i<comboGroupsDic.allKeys.count; i++) {
                            
                            NSMutableArray *sortedArr = [[self sortTheArray:comboGroupsDic.allValues[i] withKey:@"cost" isAscending:NO] mutableCopy];
                            
                            
                            float itemQty = 0;
                            
                            for (int j=0; j<totalComboQty; j++) {
                                
                                
                                if (sortedArr.count > j ) {
                                    
                                    SkuDetailsModel *skuDetails = sortedArr[j];
                                    
                                    [sku addObject:sortedArr[j]];
                                    
                                    itemQty += skuDetails.quantity;
                                    
                                    if (itemQty >= totalComboQty) {
                                        
                                        int difference = itemQty - totalComboQty;
                                        if (difference > 0 && skuDetails.quantity < totalComboQty) {
                                            
                                            skuDetails.quantity = difference;
                                            sortedArr[j] = skuDetails;
                                            comboIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetails.skuID]] = @(difference);
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        
                        
                        
                        //                        [sku addObjectsFromArray:sellSkusList];
                        //
                        //                        [sku addObjectsFromArray:promoSkusList];
                        
                        noOfComboItems = sku.count;
                    }
                    
                    
                    for (int i=0; i<noOfComboItems; i++) {
                        
                        if (sku.count > i) {
                            
                            SkuDetailsModel *skuDetails = sku[i];
                            
                            if (skuDetails.quantity >= totalComboQty && (sellPurchaseQty >= sellItemsMinQty || promoSkusList.count >= promoItemsMinQty)) {
                                
                                comboBeforeDiscount += (skuDetails.price  * totalComboQty);
                                
                                comboIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetails.skuID]] = @(totalComboQty);
                                
                                
                            }
                            else {
                                
                                comboBeforeDiscount += (skuDetails.price * [comboIndividualQtyList[[itemsSkuIdList indexOfObject:skuDetails.skuID]] intValue]);
                                
                            }
                            [individualItemIndexesInCombo addObject:[NSNumber numberWithInt:[itemsSkuIdList indexOfObject:skuDetails.skuID]]];
                        }
                        
                    }
                    
                    
                    
                    for (OfferRangesModel *range in offerRangesList) {
                        if ([range.rangeMode containsString:@"promotion"] || [range.rangeMode containsString:@"both"]) {
                            NSString *rangeRewartType = range.rangeRewardType;
                            if ([rangeRewartType containsString:@"fixed_rate"]) {
                                //                                comboRewardValue = comboRewardValue + (comboCount * ((totalComboQty * comboBeforeDiscount) - (totalComboQty * range.rewardValue)));
                                
                                comboRewardValue = comboRewardValue + (comboCount * ( comboBeforeDiscount - (totalComboQty * range.rewardValue)));
                                
                            }
                            if ([rangeRewartType containsString:@"flat_rate"]) {
                                comboRewardValue = comboRewardValue + (comboCount * (range.rewardValue));
                                
                            }
                            if ([rangeRewartType containsString:@"percentage"]) {
                                comboRewardValue = comboRewardValue + (comboCount * (((comboBeforeDiscount * (range.rewardValue / 100)))));
                            }
                        }
                    }
                    
                    //check for individual discounts sum...
                    
                    float  individualDiscountSumTemp = 0;
                    
                    for (NSNumber *p in individualItemIndexesInCombo) {
                        
                        float offerPrice = [offerPriceList[p.intValue] floatValue];
                        
                        if([comboIndividualQtyList[p.intValue] intValue] != [itemsIndividualQtyList[p.intValue] intValue]) {
                            
                            
                            float amtToBeDeducted = offerPrice / [itemsIndividualQtyList[p.intValue] integerValue];
                            
                            offerPrice = offerPrice - (amtToBeDeducted * totalComboQty);
                            individualDiscountSumTemp = individualDiscountSumTemp + offerPrice;
                            
                        }
                    }
                    if (individualDiscountSumTemp > 0) {
                        individualDiscountSumTemp += comboRewardValue;
                    }
                    if (individualDiscountSumTemp > individualDiscountSum) {
                        
                        individualDiscountSum = 0;
                    }
                    
                    if (individualDiscountSum < comboRewardValue) {
                        
                        
                        float tempValue = comboRewardValue / comboBeforeDiscount;
                        
                        for (NSNumber *p in individualItemIndexesInCombo) {
                            OfferRangesModel *tempRange = NULL;
                            for (OfferRangesModel *range in offerRangesList) {
                                if ([range.itemsList containsObject:itemsSkuIdList[p.intValue]]) {
                                    tempRange = range;
                                    break;
                                }
                            }
                            // [mProductOfferPrice replaceObjectAtIndex:[p intValue] withObject:[NSNumber numberWithFloat:tempValue * (tempRange.minimumPurchaseQuantity * [[itemsUnitPriceList objectAtIndex:[p intValue]] floatValue])]];
                            
                            if([comboIndividualQtyList[p.intValue] intValue] != [itemsIndividualQtyList[p.intValue] intValue]) {
                                
                                float offerPrice = [offerPriceList[p.intValue] floatValue];
                                
                                float amtToBeDeducted = offerPrice / [itemsIndividualQtyList[p.intValue] integerValue];
                                
                                offerPrice = offerPrice - (amtToBeDeducted * totalComboQty);
                                
                                if(offerPrice >= 0) {
                                    mProductOfferPrice[p.intValue] = @((tempValue * ([comboIndividualQtyList[p.intValue] intValue] * [itemsUnitPriceList[p.intValue] floatValue]))+offerPrice);
                                }
                                else {
                                    mProductOfferPrice[p.intValue] = @(tempValue * ([comboIndividualQtyList[p.intValue] intValue] * [itemsUnitPriceList[p.intValue] floatValue]));
                                    
                                }
                            }
                            else {
                                mProductOfferPrice[p.intValue] = @(tempValue * ([comboIndividualQtyList[p.intValue] intValue] * [itemsUnitPriceList[p.intValue] floatValue]));
                                
                            }
                            
                            
                            
                            mProductDealQty[p.intValue] = @0;
                            mProductDealDescription[p.intValue] = @"";
                            mAllowMultipleDiscounts[p.intValue] = [NSNumber numberWithBool:TRUE];
                            repeatArrayList[p.intValue] = [NSNumber numberWithBool:TRUE];
                            mProductOfferDescription[p.intValue] = applyOffer.offerDescription;
                            appliedOfferIdsArr[p.intValue] = applyOffer.offerID;
                            
                            NSString *offerType = applyOffer.rewardType;
                            mProductOfferType[p.intValue] = offerType;
                        }
                        isComboApplied = true;
                        
                    }
                }
                
                
                //applying overlapped combos.....
                
                
                
            } @catch (NSException *e) {
                
                NSLog(@"%@",e);
                // TODO Auto-generated catch block
                //                e.printStackTrace();
            }
            //                applyOffer.getOfferRangesList().get(0).setItemsList(null);
        }
    }
    
    
}

- (void)applyFetchedDeals:(NSMutableArray *)tempDealsList {
    float effectiveDealQty = 0;
    if (![tempDealsList isKindOfClass:[NSNull class]] && tempDealsList.count > 0) {
        effectiveDealQty = [self applyItemSpecificDeal:tempDealsList dealQty:effectiveDealQty];
    }
}

- (float)getEffectiveDealPluQty:(ApplyDealModel *)applyIndividualDeal dealQty:(float)effectiveDealQty dealType:(BOOL)isItemSpecificDealApplied{
    
    NSMutableArray * appliedSkuIdsArr  = [NSMutableArray new];
    NSMutableArray * promoSkusArr = [NSMutableArray new];
    
    NSMutableArray *offerPriceList = [mProductOfferPrice mutableCopy];
    
    NSMutableArray *tempPromoSkusArr = [NSMutableArray new];
    NSMutableArray *appliedItemsArr = [NSMutableArray new];
    
    @try {
        NSArray *sellSkus = [applyIndividualDeal.sellPluCode componentsSeparatedByString:@","];
        NSMutableArray *sellSkuArray = [NSMutableArray new];
        for (NSString *str in sellSkus) {
            
            if (str.length>0) {
                
                [sellSkuArray addObject:str];
            }
        }
        //   NSMutableArray *sellSkuArray = [[NSMutableArray alloc] initWithArray:sellSkus];
        NSMutableArray *common1 = [[NSMutableArray alloc] initWithArray:itemsPluCodeList];
        
        NSMutableArray *tempSellSkuList = [[NSMutableArray alloc] init];
        for (NSString *skuStr in sellSkuArray) {
            if ([itemsPluCodeList containsObject:skuStr]) {
                [tempSellSkuList addObject:skuStr];
            }
        }
        
        
        common1 = [tempSellSkuList mutableCopy];
        NSMutableArray *tempList = [NSMutableArray new];
        [tempList addObjectsFromArray:common1];
        for (NSString *sku in common1) {
            if ([itemsStatusList[[itemsPluCodeList indexOfObject:sku]] containsString:@"void"]){
                [tempList removeObject:sku];
            }
        }
        common1 = [tempList mutableCopy];
        int cartQty = 0;
        int dealCartQty = 0;
        for (NSString *sku in common1) {
            cartQty = cartQty + [itemsIndividualQtyList[[itemsPluCodeList indexOfObject:sku]] floatValue];
        }
        int minPurchaseQty = 0, rewardQty = 0;
        for (DealRangesModel *range in applyIndividualDeal.rangeList) {
            if (range.rangeMode == NULL || [range.rangeMode containsString:@"promotion"] || [(range.rangeMode).lowercaseString containsString:@"both"] || (range.rangeMode).length == 0) {
                rewardQty = range.dealQuantity_float;
            }
            if (range.rangeMode == NULL || [range.rangeMode containsString:@"condition"] || [(range.rangeMode).lowercaseString containsString:@"both"] || (range.rangeMode).length == 0) {
                minPurchaseQty = range.minimumPurchaseQuantity_float;
            }
        }
        NSArray *dealSkus = [applyIndividualDeal.dealPluCode componentsSeparatedByString:@","];
        
        NSMutableArray *dealSkuArray = [NSMutableArray new];
        for (NSString *str in dealSkus) {
            
            if (str.length>0) {
                
                [dealSkuArray addObject:str];
            }
        }
        
        //  NSMutableArray *dealSkuArray = [[NSMutableArray alloc] initWithArray:dealSkus];
        
        NSMutableArray * skuList = [NSMutableArray new];
        NSMutableArray *common = [[NSMutableArray alloc] initWithArray:itemsPluCodeList];
        
        NSMutableArray *tempdealSkuList = [[NSMutableArray alloc] init];
        for (NSString *skuStr in dealSkuArray) {
            if ([itemsPluCodeList containsObject:skuStr]) {
                [tempdealSkuList addObject:skuStr];
            }
        }
        
        
        common = [tempdealSkuList mutableCopy];
        
        dealSkuListAll = [[NSMutableArray alloc] initWithArray:dealSkuArray];
        SkuDetailsModel *skuDetails;
        NSMutableArray *tempList1 = [[NSMutableArray alloc] initWithArray:common];
        for (NSString *sku in common) {
            if ([itemsStatusList[[itemsPluCodeList  indexOfObject:sku]] containsString:@"void"]) {
                [tempList1 removeObject:sku];
            }
        }
        common = [tempList1 mutableCopy];
        
        for (NSString *sku in common) {
            dealCartQty = dealCartQty + [itemsIndividualQtyList[[itemsPluCodeList indexOfObject:sku]] floatValue];
        }
        
        
        // NSArray *sellSkuidsArr = [applyIndividualDeal.sellSkuids componentsSeparatedByString:@","];
        //  NSArray *dealSkuidsArr = [applyIndividualDeal.dealSkus componentsSeparatedByString:@","];
        
        NSMutableArray *sellSkuidsArr = [NSMutableArray new];
        for (NSString *str in [applyIndividualDeal.sellPluCode componentsSeparatedByString:@","]) {
            
            if (str.length>0) {
                
                [sellSkuidsArr addObject:str];
            }
        }
        
        NSMutableArray *dealSkuidsArr = [NSMutableArray new];
        for (NSString *str in [applyIndividualDeal.dealPluCode componentsSeparatedByString:@","]) {
            
            if (str.length>0) {
                
                [dealSkuidsArr addObject:str];
            }
        }
        
        NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:sellSkuidsArr];
        NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:dealSkuidsArr];
        
        [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
        
        NSArray* result = set1.allObjects;
        
        //modified by sonali to keep only the available deals for non voided items
        
        NSMutableArray *itemWiseAvailableDeals = [NSMutableArray new];
        
        int index = 0;
        
        for (NSMutableArray *availableDeals in [applyDealsAndOfferResponse valueForKey:@"availableDeals"]) {
            
            if ([itemsStatusList[index] caseInsensitiveCompare:@"void"] != NSOrderedSame) {
                
                [itemWiseAvailableDeals addObject:availableDeals];
            }
            index++;
        }
        
        
        
        float toGiveDealQuantity_ = 0;
        BOOL condition = false;
        //            if ([applyIndividualDeal.sellSkuids containsString:applyIndividualDeal.dealSkus]) {
        if (result.count) {
            
            toGiveDealQuantity_ = (float) (floor(cartQty / (minPurchaseQty + rewardQty)) * rewardQty);
            if (cartQty >= minPurchaseQty + toGiveDealQuantity_) {
                condition = true;
                if(((cartQty >= minPurchaseQty) && toGiveDealQuantity_ == 0) || (cartQty % (minPurchaseQty+rewardQty)) != 0){
                    //  if([[applyDealsAndOfferResponse valueForKey:@"unAppliedDealIndex"] intValue] == -1){
                    int count = 0;
                    for (NSMutableArray *dealObjList in itemWiseAvailableDeals) {
                        for (DealModel *deal in dealObjList) {
                            if([(applyIndividualDeal.dealID).lowercaseString isEqualToString:(deal.dealID).lowercaseString]){
                                
                                
                                if ((![self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && ![self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]])) {
                                    
                                    [applyDealsAndOfferResponse setValue:@(count) forKey:@"unAppliedDealIndex"];
                                    
                                    
                                    //                                    int remainingQtyInCart = cartQty - (minPurchaseQty + rewardQty)*toGiveDealQuantity_;
                                    float remainingQtyInCart = cartQty - ((minPurchaseQty) * (toGiveDealQuantity_ / rewardQty));
                                    
                                    if (remainingQtyInCart < 0) {
                                        
                                        remainingQtyInCart = 0;
                                    }
                                    
                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                    }
                                    
                                    else {
                                        
                                        if ([applyDealsAndOfferResponse.allKeys containsObject:@"unAppliedSellSkus"] && [[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"] count]) {
                                            
                                            
                                            NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]];
                                            NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:sellSkuidsArr];
                                            
                                            [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                                            
                                            NSArray* result = set1.allObjects;
                                            
                                            if (result) {
                                                
                                                [dealSkuListAll addObjectsFromArray:[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","]];
                                                
                                                NSOrderedSet *set = [[NSOrderedSet alloc] initWithArray:dealSkuListAll];
                                                
                                                dealSkuListAll = [set.array mutableCopy];
                                                
                                                [applyDealsAndOfferResponse setValue:[dealSkuListAll componentsJoinedByString:@","] forKey:@"unAppliedDealSkus"];
                                                [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                
                                                
                                            }
                                            else {
                                                
                                                [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
                                                [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                
                                            }
                                        }
                                        
                                        else {
                                            
                                            [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
                                            [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                            
                                        }
                                        
                                        //added by sonali on 17/8/16
                                        
                                        
                                        NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                                        
                                        for (NSString *str in dealSkuListAll) {
                                            
                                            NSString *desc = [self getSkuDescriptionFor:str];
                                            [dealSkusDescArr addObject:desc];
                                        }
                                        [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
                                        
                                        
                                    }
                                    
                                    
                                }
                                
                                //                                    }
                            }
                            count++;
                        }
                    }
                }
                
            }
        } else if(common1.count > 0){
            if (cartQty >= (minPurchaseQty + toGiveDealQuantity)) {
                //                        if((cartQty % dealCartQty) == 0)
                //                            toGiveDealQuantity_ = cartQty;
                //                        else {
                
                //                            if(cartQty <= dealCartQty ) {
                //
                //                                toGiveDealQuantity_ = cartQty;
                //                            }
                //                            else {
                //                                toGiveDealQuantity_ = dealCartQty;
                //                            }
                //                        }
                //toGiveDealQuantity_ = cartQty - dealCartQty;
                
                
                if(![applyIndividualDeal.sellGroupID isEqualToString:applyIndividualDeal.dealGroupId]){
                    
                    float fraction = cartQty/minPurchaseQty;
                    
                    float dealQty = dealCartQty/rewardQty;
                    //
                    //                            if(fraction < dealQty) {
                    //
                    //                                toGiveDealQuantity_ = (float) floor(((fraction+dealCartQty) / minPurchaseQty ) * rewardQty);
                    //                            }
                    //                            else {
                    //                                toGiveDealQuantity_ = (float) floor(((cartQty+dealCartQty) / (minPurchaseQty + rewardQty)) * rewardQty);
                    //
                    //                            }
                    
                    if (fraction < dealQty) {
                        
                        toGiveDealQuantity_ = fraction;
                    }
                    else {
                        toGiveDealQuantity_ = dealQty;
                    }
                    
                }else{
                    toGiveDealQuantity_ = (float) (floor(cartQty / (minPurchaseQty + rewardQty)) * rewardQty);
                }
                
                if(toGiveDealQuantity_ < 0)
                    toGiveDealQuantity_ = rewardQty * cartQty;
                if (!(dealCartQty >= toGiveDealQuantity_)) {
                    toGiveDealQuantity_ = dealCartQty;
                }
                if (dealCartQty >= toGiveDealQuantity_) {
                    condition = true;
                    if(((cartQty >= minPurchaseQty) && toGiveDealQuantity_ == 0) || toGiveDealQuantity_ < cartQty){
                        if([[applyDealsAndOfferResponse valueForKey:@"unAppliedDealIndex"] intValue] == -1){
                            int count = 0;
                            for (NSMutableArray *dealObjList in [applyDealsAndOfferResponse valueForKey:@"availableDeals"]) {
                                for (DealModel *deal in dealObjList) {
                                    if([(applyIndividualDeal.dealID).lowercaseString isEqualToString:(deal.dealID).lowercaseString]){
                                        
                                        
                                        if ((![self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && ![self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]])) {
                                            
                                            [applyDealsAndOfferResponse setValue:@(count) forKey:@"unAppliedDealIndex"];
                                            
                                            float  remainingQtyInCart = 0;
                                            
                                            if(![applyIndividualDeal.sellGroupID isEqualToString:applyIndividualDeal.dealGroupId]){
                                                
                                                remainingQtyInCart= (cartQty+dealCartQty) -  ((minPurchaseQty + rewardQty)*(toGiveDealQuantity_/rewardQty));
                                            }
                                            else{
                                                remainingQtyInCart= cartQty -  ((minPurchaseQty + rewardQty)*(toGiveDealQuantity_/rewardQty));
                                                
                                            }
                                            
                                            
                                            if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                                
                                                NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                                
                                                [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                                
                                                applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                                applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                                applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                                
                                                applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                            }
                                            else {
                                                
                                                if ([applyDealsAndOfferResponse.allKeys containsObject:@"unAppliedSellSkus"] && [[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"] count]) {
                                                    
                                                    
                                                    NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]];
                                                    NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:sellSkuidsArr];
                                                    
                                                    [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                                                    
                                                    NSArray* result = set1.allObjects;
                                                    
                                                    if (result) {
                                                        
                                                        [dealSkuListAll addObjectsFromArray:[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","]];
                                                        
                                                        NSOrderedSet *set = [[NSOrderedSet alloc] initWithArray:dealSkuListAll];
                                                        
                                                        dealSkuListAll = [set.array mutableCopy];
                                                        
                                                        [applyDealsAndOfferResponse setValue:[dealSkuListAll componentsJoinedByString:@","] forKey:@"unAppliedDealSkus"];
                                                        [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                        
                                                        
                                                    }
                                                    else {
                                                        
                                                        [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
                                                        [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                        
                                                    }
                                                }
                                                
                                                else {
                                                    
                                                    [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
                                                    [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                    
                                                }
                                                
                                                //added by sonali on 17/8/16
                                                
                                                
                                                NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                                                
                                                for (NSString *str in dealSkuListAll) {
                                                    
                                                    NSString *desc = [self getSkuDescriptionFor:str];
                                                    [dealSkusDescArr addObject:desc];
                                                }
                                                [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
                                                
                                                
                                            }
                                            
                                            
                                        }
                                        
                                        
                                    }
                                }
                                count++;
                            }
                        }
                    }
                    
                }
            }
            //                    else {
            //                       // toGiveDealQuantity_ = rewardQty;
            //
            //                        if(cartQty <= dealCartQty) {
            //
            //                            toGiveDealQuantity_ = cartQty;
            //                        }
            //                        else {
            //                            toGiveDealQuantity_ = dealCartQty;
            //                        }
            //                        if(toGiveDealQuantity_<=(cartQty + dealCartQty)){
            //                            condition = true;
            //                            if((cartQty >= minPurchaseQty)){
            //                                if([[applyDealsAndOfferResponse valueForKey:@"unAppliedDealIndex"] intValue] == -1){
            //                                    int count = 0;
            //                                    for (NSMutableArray *dealObjList in [applyDealsAndOfferResponse valueForKey:@"availableDeals"]) {
            //                                        for (DealModel *deal in dealObjList) {
            //                                            if([[applyIndividualDeal.dealID lowercaseString] isEqualToString:[deal.dealID lowercaseString]]){
            //
            //                                                //                                            [applyDealsAndOfferResponse setValue:[NSNumber numberWithInt:count] forKey:@"unAppliedDealIndex"];
            //                                                //                                            [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
            //                                                //
            //                                                //                                            NSMutableArray *dealSkusDescArr = [NSMutableArray new];
            //                                                //
            //                                                //                                            for (NSString *str in dealSkuListAll) {
            //                                                //
            //                                                //                                                NSString *desc = [self getSkuDescriptionFor:str];
            //                                                //                                                [dealSkusDescArr addObject:desc];
            //                                                //                                            }
            //                                                //                                            [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
            //
            //
            //
            //                                                if ((![self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && ![self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]])) {
            //
            //                                                    [applyDealsAndOfferResponse setValue:[NSNumber numberWithInt:count] forKey:@"unAppliedDealIndex"];
            //
            //                                                    int remainingQtyInCart = cartQty - (minPurchaseQty + rewardQty)*toGiveDealQuantity_;
            //
            //                                                    if (remainingQtyInCart < 0) {
            //
            //                                                        remainingQtyInCart = 0;
            //                                                    }
            //
            //                                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
            //
            //                                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
            //
            //                                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
            //
            //                                                        [applyDealsAndOfferResponse setObject:@"" forKey:@"unAppliedDealSkus"];
            //                                                        [applyDealsAndOfferResponse setObject:[NSNumber numberWithInt:-1] forKey:@"unAppliedDealIndex"];
            //                                                        [applyDealsAndOfferResponse setObject:[NSArray arrayWithObject:@""] forKey:@"unAppliedDealSkusDesc"];
            //
            //                                                        [applyDealsAndOfferResponse setObject:[NSArray arrayWithObject:@""] forKey:@"unAppliedSellSkus"];
            //                                                    }
            //
            //                                                    else {
            //                                                        if ([[applyDealsAndOfferResponse allKeys] containsObject:@"unAppliedSellSkus"] && [[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"] count]) {
            //
            //
            //                                                            NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]];
            //                                                            NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:sellSkuidsArr];
            //
            //                                                            [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
            //
            //                                                            NSArray* result = [set1 allObjects];
            //
            //                                                            if (result) {
            //
            //                                                                [dealSkuListAll addObjectsFromArray:[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","]];
            //
            //                                                                NSOrderedSet *set = [[NSOrderedSet alloc] initWithArray:dealSkuListAll];
            //
            //                                                                dealSkuListAll = [[set array] mutableCopy];
            //
            //                                                                [applyDealsAndOfferResponse setValue:[dealSkuListAll componentsJoinedByString:@","] forKey:@"unAppliedDealSkus"];
            //                                                                [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
            //
            //
            //                                                            }
            //                                                            else {
            //
            //                                                                [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
            //                                                                [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
            //
            //                                                            }
            //                                                        }
            //
            //                                                        else {
            //
            //                                                            [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
            //                                                            [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
            //
            //                                                        }
            //
            //                                                        //added by sonali on 17/8/16
            //
            //
            //                                                        NSMutableArray *dealSkusDescArr = [NSMutableArray new];
            //
            //                                                        for (NSString *str in dealSkuListAll) {
            //
            //                                                            NSString *desc = [self getSkuDescriptionFor:str];
            //                                                            [dealSkusDescArr addObject:desc];
            //                                                        }
            //                                                        [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
            //
            //                                                    }
            //                                                }
            //
            //                                            }
            //                                        }
            //                                        count++;
            //                                    }
            //                                }
            //                            }
            //
            //                        }
            //                    }
        }
        
        if (condition) {
            
            //                    float matchedItemsCartQty=0;
            //
            //                    NSMutableArray *offerAppliedItemsList=[NSMutableArray new];
            //                    NSMutableArray *nonOfferAppliedItemsList=[NSMutableArray new];
            
            
            for (int z = 0; z < common.count; z++) {
                skuDetails = [SkuDetailsModel new];
                int indexOf = (int)[itemsPluCodeList indexOfObject:common[z]];
                skuDetails.price = [itemsUnitPriceList[indexOf] floatValue];
                skuDetails.quantity = [itemsIndividualQtyList[indexOf] floatValue];
                skuDetails.skuID = common[z];
                skuDetails.offerPrice = [mProductOfferPrice[indexOf] floatValue];
                //  float itemQty = skuDetails.quantity;
                // for(int c = 0;c < itemQty; c++){
                //skuDetails.quantity = 1.0;
                if (![skuList containsObject:skuDetails]) {
                    [skuList addObject:skuDetails];
                }
                //}
            }
            skuList = [self sortTheArray:[skuList mutableCopy] withKey:@"price" isAscending:NO];
            // NSMutableArray *finalSkuDetails = [self getChoppedArrayListFor:skuList with:(minPurchaseQty + rewardQty)];
            
            //  NSMutableArray *finalSkuDetails = skuList;
            
            //                    NSMutableArray *finalSkuDetails = [self getChoppedArrayListFor:skuList with:toGiveDealQuantity_];
            
            float actualCartQty = cartQty;
            if(![applyIndividualDeal.sellGroupID isEqualToString:applyIndividualDeal.dealGroupId]){
                actualCartQty=cartQty+dealCartQty;
            }
            
            float givenDealQty = 0;
            for (int p = 0; p < appliedDealIdList.count; p++) {
                NSString *dealID = appliedDealIdList[p];
                @try {
                    if ((dealID != NULL && [dealID isEqualToString:applyIndividualDeal.dealID]) ) {
                        appliedDealIdList[p] = [NSNull null];
                        dealDiscount[p] = @0.0f;
                        isDealApplied[p] = [NSNumber numberWithBool:FALSE];
                    }
                } @catch (NSException *e) {
                }
                
            }
            float tempDeal = 0;
            float dealPrice = 0;
            float tempDealPrice = 0;
            //  for (NSMutableArray *sku in finalSkuDetails) {
            
            NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:sellSkuArray];
            NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:dealSkuArray];
            
            [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
            
            NSArray* result = set1.allObjects;
            
            //                    if([self checkOneArray:sellSkuArray containsAllIn:dealSkuArray]){
            
            float remaingQty = actualCartQty -  ((minPurchaseQty + rewardQty)*(toGiveDealQuantity_/rewardQty));
            
            
            if(result.count){
                float fraction = (cartQty / minPurchaseQty )* rewardQty;
                float dealQty = (dealCartQty / rewardQty) * rewardQty;
                
                if (fraction <= dealQty) {
                    toGiveDealQuantity_ = fraction;
                } else {
                    toGiveDealQuantity_ = dealQty;
                }
                
                for (int h = (int)(skuList.count-1); h >=0; h--) {
                    
                    dealPrice = 0;
                    float itemUnitOfferPrice=0;
                    
                    SkuDetailsModel *skuDetails = skuList[h];
                    int itemId = (int)[itemsPluCodeList indexOfObject:skuDetails.skuID];
                    tempDealPrice = [dealDiscount[itemId] floatValue];
                    
                    if (givenDealQty < toGiveDealQuantity_) {
                        
                        tempDeal = [dealDiscount[([itemsPluCodeList indexOfObject:skuDetails.skuID])] floatValue];
                        
                        if (toGiveDealQuantity_ - givenDealQty > skuDetails.quantity) {
                            
                            dealPrice += (float) (skuDetails.quantity * skuDetails.price);
                            
                        } else {
                            dealPrice += (toGiveDealQuantity_ - givenDealQty) * skuDetails.price;
                            
                        }
                        
                        float previousOfferPrice = [offerPriceList[itemId] floatValue];
                        
                        float dealPriceWithOffer = dealPrice;
                        
                        int appliedDealQty = skuDetails.quantity / minPurchaseQty;
                        
                        if (appliedDealQty > toGiveDealQuantity_) {
                            
                            appliedDealQty = toGiveDealQuantity_;
                        }
                        else if(toGiveDealQuantity_ - givenDealQty > skuDetails.quantity){
                            
                            appliedDealQty = skuDetails.quantity;
                        }
                        else {
                            appliedDealQty = (toGiveDealQuantity_ - givenDealQty);
                        }
                        
                        
                        //                                    if((skuDetails.quantity != appliedDealQty) &&  minPurchaseQty>0 && toGiveDealQuantity_!=0){
                        //
                        //                                        // previousOfferPrice=  (float)   (previousOfferPrice/skuDetails.quantity*(skuDetails.quantity-toGiveDealQuantity_));
                        //
                        //
                        //                                        previousOfferPrice = previousOfferPrice - (previousOfferPrice/skuDetails.quantity);
                        //                                        dealPriceWithOffer = dealPriceWithOffer + (previousOfferPrice * appliedDealQty);
                        //
                        //                                        float offerPrice = [[offerPriceList objectAtIndex:itemId] floatValue];
                        //                                        remainingOfferPrice = (offerPrice -(previousOfferPrice * appliedDealQty));
                        //                                    }
                        
                        if ((appliedDealQty != skuDetails.quantity) && minPurchaseQty > 0 && toGiveDealQuantity_ != 0) {
                            // previousOfferPrice=  (float)   (previousOfferPrice/skuDetails.quantity*(skuDetails.quantity-toGiveDealQuantity_));
                            //    previousOfferPrice = (float) (previousOfferPrice - (previousOfferPrice / skuList.get(h).getQuantity()));
                            itemUnitOfferPrice=(float) (previousOfferPrice/skuDetails.quantity);
                            if(appliedDealQty>=toGiveDealQuantity_)
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * (toGiveDealQuantity_-givenDealQty)));
                            else
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * appliedDealQty));
                            //appliedDealPrice = appliedDealPrice + (previousOfferPrice * appliedDealQty);
                            //appliedDealPrice = appliedDealPrice + (previousOfferPrice );
                        }else{
                            itemUnitOfferPrice=(float) (previousOfferPrice/skuDetails.quantity);
                            if(appliedDealQty>=toGiveDealQuantity_)
                                previousOfferPrice = (float) (previousOfferPrice - (itemUnitOfferPrice * (toGiveDealQuantity_-givenDealQty)));
                            else
                                previousOfferPrice = (float) (previousOfferPrice - (itemUnitOfferPrice * appliedDealQty));
                        }
                        
                        
                        if (tempDealPrice > dealPriceWithOffer) {
                            
                            if ((tempDealPrice + previousOfferPrice) > [mProductOfferPrice[itemId] floatValue]) {
                                
                                dealDiscount[itemId] = @(tempDealPrice);
                                //[mProductOfferPrice replaceObjectAtIndex:itemId withObject:[NSNumber numberWithFloat:previousOfferPrice]];
                                appliedOfferIdsArr[itemId] = @"";
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                    //                                                if (![tempPromoSkusArr containsObject:skuId]) {
                                    //
                                    //                                                    [tempPromoSkusArr addObject:skuId];
                                    //
                                    //                                                }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        //   [applyDealsAndOfferResponse setObject:[NSString stringWithFormat:@"%@",[unappliedDealsSkuIdArr componentsJoinedByString:@","]] forKey:@"unAppliedDealSkus"];
                                        
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                    
                                }
                                
                                
                            }
                            else{
                                dealDiscount[itemId] = @0.0f;
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        //   [applyDealsAndOfferResponse setObject:[NSString stringWithFormat:@"%@",[unappliedDealsSkuIdArr componentsJoinedByString:@","]] forKey:@"unAppliedDealSkus"];
                                        
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                }
                            }
                        }
                        else{
                            if ((dealPriceWithOffer+previousOfferPrice) > [mProductOfferPrice[itemId] floatValue]) {
                                
                                dealDiscount[itemId] = @(dealPriceWithOffer);
                                mProductOfferPrice[itemId] = @(previousOfferPrice);
                                appliedOfferIdsArr[itemId] = @"";
                                
                                //                                            NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:promoSkusArr];
                                //                                            NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:appliedSkuIdsArr];
                                //
                                //                                            [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                                //
                                //                                            NSArray* result = [set1 allObjects];
                                
                                //                                            if (result) {
                                //
                                //                                                for (NSString *appliedSkuId in result) {
                                //
                                //                                                    [dealDiscount replaceObjectAtIndex:[itemsSkuIdList indexOfObject:appliedSkuId] withObject:[NSNumber numberWithFloat:0.00]];
                                //
                                //                                                }
                                //                                            }
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                    if (![tempPromoSkusArr containsObject:skuId]) {
                                        
                                        [tempPromoSkusArr addObject:skuId];
                                        
                                    }
                                }
                                
                                
                                
                                
                                //                                        if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"] containsObject:skuDetails.skuID]) {
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                }
                                
                                
                            }
                            else{
                                dealDiscount[itemId] = @0.0f;
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                }
                            }
                        }
                        
                        appliedDealIdList[itemId] = applyIndividualDeal.dealID;
                        
                        givenDealQty += skuDetails.quantity;
                    }
                    //    }
                }
                
                
                //removing the previous offers if any....
                
                //sorting...
                NSMutableArray *sortedSellSkuList=[NSMutableArray new];
                float price=0;
                for (NSString *skuId in tempPromoSkusArr) {
                    if(![appliedItemsArr containsObject:skuId]){
                        int indexOf =  (int)[itemsPluCodeList indexOfObject:skuId];
                        if(indexOf>=0)
                        {
                            
                            float itemPrice=[itemsUnitPriceList[indexOf] floatValue];
                            
                            if(itemPrice>price){
                                
                                [sortedSellSkuList addObject:skuId];
                                
                                price=itemPrice;
                            }
                            else
                                [sortedSellSkuList addObject:skuId];
                        }
                    }
                }
                
                
                float  tempToGiveDealQty = actualCartQty-(toGiveDealQuantity_+remaingQty);
                
                for(int h = sortedSellSkuList.count - 1; h >= 0; h--){
                    
                    NSString *skuId = sortedSellSkuList[h];
                    
                    int indexOfSku = (int)[itemsPluCodeList indexOfObject:skuId];
                    
                    if(tempToGiveDealQty!=0 && tempToGiveDealQty>0){
                        
                        if ([mProductOfferPrice[indexOfSku] floatValue] > 0 ) {
                            
                            if(cartQty%(minPurchaseQty+rewardQty)!=0){
                                
                                float offerPrice2 = [offerPriceList[indexOfSku] floatValue];
                                
                                float amtToBeDeducted1 = offerPrice2 / [itemsIndividualQtyList[indexOfSku] floatValue];
                                
                                
                                if([itemsIndividualQtyList[indexOfSku] floatValue] >= tempToGiveDealQty)
                                {
                                    offerPrice2 = [mProductOfferPrice[indexOfSku] floatValue]  - (amtToBeDeducted1 *  tempToGiveDealQty);
                                    
                                    tempToGiveDealQty = tempToGiveDealQty - [itemsIndividualQtyList[indexOfSku] floatValue];
                                    
                                }
                                else if([itemsIndividualQtyList[indexOfSku] floatValue] < tempToGiveDealQty)
                                {
                                    float qty = [itemsIndividualQtyList[indexOfSku] floatValue]/amtToBeDeducted1;
                                    
                                    offerPrice2 = [mProductOfferPrice[indexOfSku] floatValue] - (amtToBeDeducted1 * [itemsIndividualQtyList[indexOfSku] floatValue]);
                                    
                                    tempToGiveDealQty=tempToGiveDealQty-qty;
                                    
                                    if(offerPrice2<0) {
                                        
                                        offerPrice2=0;
                                    }
                                }
                                
                                mProductOfferPrice[indexOfSku] = @(offerPrice2);
                                
                            }
                            else{
                                
                                //                                            float offerPrice2 = [[offerPriceList objectAtIndex:indexOfSku] floatValue];
                                //
                                //                                            float amtToBeDeducted1 = offerPrice2 / [[itemsIndividualQtyList objectAtIndex:indexOfSku] floatValue];
                                
                                mProductOfferPrice[indexOfSku] = @0.0f;
                                
                                [tempPromoSkusArr removeObject:skuId];
                            }
                        }
                    }
                }
                
                float remainingQtyInCart = 0;
                
                
                remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                
                if((remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty)){
                    //  float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity/rewardQty));
                    //   if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                    NSMutableArray *unappliedDealsSku = [NSMutableArray new];
                    if([applyDealsAndOfferResponse.allKeys containsObject:@"unAppliedDealSkus"] && ![applyDealsAndOfferResponse[@"unAppliedDealSkus"] isKindOfClass:[NSNull class]]) {
                        
                        unappliedDealsSku = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                        NSMutableArray *removebleDealSkus = [[applyIndividualDeal.dealSkus componentsSeparatedByString:@","] mutableCopy];
                        
                        for (NSString *dealSku in removebleDealSkus) {
                            if([unappliedDealsSku containsObject:dealSku]){
                                [unappliedDealsSku removeObject:dealSku];
                            }
                            if([dealSkuListAll containsObject:dealSku]){
                                [dealSkuListAll removeObject:dealSku];
                            }
                            
                        }
                    }
                    
                    
                    if(unappliedDealsSku.count==0){
                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                        
                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                    }else{
                        
                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = [unappliedDealsSku componentsJoinedByString:@","];
                        NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                        
                        for (NSString *str in unappliedDealsSku) {
                            
                            NSString *desc = [self getSkuDescriptionFor:str];
                            [dealSkusDescArr addObject:desc];
                        }
                        [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
                        
                        
                        
                    }
                    
                    if([applyDealsAndOfferResponse[@"unAppliedDealSkus"] isKindOfClass:[NSNull class]] || [applyDealsAndOfferResponse[@"unAppliedDealSkus"] length] == 0){
                        
                        NSMutableArray *removebleDealSkus = [[applyIndividualDeal.dealSkus componentsSeparatedByString:@","] mutableCopy];
                        for (NSString *dealSku in removebleDealSkus) {
                            if([dealSkuListAll containsObject:dealSku]){
                                [dealSkuListAll removeObject:dealSku];
                            }
                            
                        }
                    }
                    
                    //}
                    
                }
                
            }
            else {
                for (int h = 0; h < skuList.count; h++) {
                    //    if(sku.size() == minPurchaseQty){
                    
                    dealPrice = 0;
                    float itemUnitOfferPrice=0;
                    
                    SkuDetailsModel *skuDetails = skuList[h];
                    int itemId = (int)[itemsPluCodeList indexOfObject:skuDetails.skuID];
                    tempDealPrice = [dealDiscount[itemId] floatValue];
                    if (givenDealQty < toGiveDealQuantity_) {
                        tempDeal = [dealDiscount[([itemsPluCodeList indexOfObject:skuDetails.skuID])] floatValue];
                        
                        if (toGiveDealQuantity_ - givenDealQty > skuDetails.quantity) {
                            dealPrice += (float) (skuDetails.quantity * skuDetails.price);
                            
                        } else {
                            dealPrice += (toGiveDealQuantity_ - givenDealQty) * skuDetails.price;
                            
                        }
                        
                        float previousOfferPrice = [offerPriceList[itemId] floatValue];
                        
                        float dealPriceWithOffer = dealPrice;
                        
                        float remainingOfferPrice = 0;
                        
                        int appliedDealQty = skuDetails.quantity / minPurchaseQty;
                        if (appliedDealQty > toGiveDealQuantity_) {
                            
                            appliedDealQty = toGiveDealQuantity_;
                        }
                        else if(toGiveDealQuantity_ - givenDealQty > skuDetails.quantity){
                            
                            appliedDealQty = skuDetails.quantity;
                        }
                        else {
                            appliedDealQty = (toGiveDealQuantity_ - givenDealQty);
                        }
                        
                        
                        //                                    if((appliedDealQty != skuDetails.quantity) &&  minPurchaseQty>0 && toGiveDealQuantity_!=0){
                        //
                        //                                        // previousOfferPrice=  (float)   (previousOfferPrice/skuDetails.quantity*(skuDetails.quantity-toGiveDealQuantity_));
                        //
                        //
                        //                                        previousOfferPrice = previousOfferPrice - (previousOfferPrice/skuDetails.quantity);
                        //                                        dealPriceWithOffer = dealPriceWithOffer + (previousOfferPrice * appliedDealQty);
                        //
                        //                                        float offerPrice = [[offerPriceList objectAtIndex:itemId] floatValue];
                        //                                        remainingOfferPrice = (offerPrice -(previousOfferPrice * appliedDealQty));
                        //                                    }
                        
                        
                        if ((appliedDealQty != skuDetails.quantity) && minPurchaseQty > 0 && toGiveDealQuantity_ != 0)
                        {
                            itemUnitOfferPrice=(float) (previousOfferPrice/skuDetails.quantity);
                            
                            if(appliedDealQty>=toGiveDealQuantity_) {
                                
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * (toGiveDealQuantity_-givenDealQty)));
                                
                            }
                            else {
                                
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * appliedDealQty));
                                
                            }
                        }
                        else
                        {
                            itemUnitOfferPrice=(float) (previousOfferPrice/skuDetails.quantity);
                            
                            if(appliedDealQty>=toGiveDealQuantity_) {
                                
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * (toGiveDealQuantity_-givenDealQty)));
                            }
                            else {
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * appliedDealQty));
                            }
                            
                        }
                        
                        if (tempDealPrice > dealPriceWithOffer) {
                            
                            if (tempDealPrice > [mProductOfferPrice[itemId] floatValue]) {
                                
                                dealDiscount[itemId] = @(tempDealPrice);
                                mProductOfferPrice[itemId] = @0.0f;
                                appliedOfferIdsArr[itemId] = @"";
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                        // [tempPromoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                }
                                
                            }
                            else{
                                dealDiscount[itemId] = @0.0f;
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]){
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        
                                    }
                                }
                                else  {
                                    
                                    float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                    
                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                    }
                                    
                                }
                            }
                        }
                        else{
                            
                            //                                        float offerPrice = [[offerPriceList objectAtIndex:itemId] floatValue];
                            //
                            //                                        float amtToBeDeducted = offerPrice / [[itemsIndividualQtyList objectAtIndex:itemId] integerValue];
                            //
                            //                                        offerPrice = offerPrice - (amtToBeDeducted * toGiveDealQuantity_);
                            
                            if (dealPriceWithOffer > [mProductOfferPrice[itemId] floatValue]) {
                                dealDiscount[itemId] = @(dealPrice);
                                mProductOfferPrice[itemId] = @(previousOfferPrice);
                                appliedOfferIdsArr[itemId] = @"";
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                    if (![tempPromoSkusArr containsObject:skuId]) {
                                        [tempPromoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]){
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                    }
                                }
                                else  {
                                    
                                    float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                    
                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                    }
                                    
                                }
                                
                            }
                            else{
                                
                                dealDiscount[itemId] = @0.0f;
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        
                                    }
                                }
                                else  {
                                    
                                    float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                    }
                                    
                                }
                            }
                        }
                        appliedDealIdList[itemId] = applyIndividualDeal.dealID;
                        givenDealQty += skuDetails.quantity;
                    }
                    //    }
                }
                
                
                //removing the previous offers if any....
                
                //sorting...
                NSMutableArray *sortedSellSkuList=[NSMutableArray new];
                float price=0;
                for (NSString *skuId in tempPromoSkusArr) {
                    if(![appliedItemsArr containsObject:skuId]){
                        int indexOf = (int)[itemsPluCodeList indexOfObject:skuId];
                        if(indexOf>=0)
                        {
                            
                            float itemPrice=[itemsUnitPriceList[indexOf] floatValue];
                            
                            if(itemPrice>price){
                                
                                [sortedSellSkuList addObject:skuId];
                                
                                price=itemPrice;
                            }
                            else
                                [sortedSellSkuList addObject:skuId];
                        }
                    }
                }
                
                
                float  tempToGiveDealQty = actualCartQty-(toGiveDealQuantity_+remaingQty);
                
                for(int h = sortedSellSkuList.count - 1; h >= 0; h--){
                    
                    NSString *skuId = sortedSellSkuList[h];
                    
                    int indexOfSku = (int)[itemsPluCodeList indexOfObject:skuId];
                    
                    if(tempToGiveDealQty!=0 && tempToGiveDealQty>0){
                        
                        if ([mProductOfferPrice[indexOfSku] floatValue] > 0 ) {
                            
                            if(cartQty%(minPurchaseQty+rewardQty)!=0){
                                
                                float offerPrice2 = [offerPriceList[indexOfSku] floatValue];
                                
                                float amtToBeDeducted1 = offerPrice2 / [itemsIndividualQtyList[indexOfSku] floatValue];
                                
                                
                                if([itemsIndividualQtyList[indexOfSku] floatValue] >= tempToGiveDealQty)
                                {
                                    offerPrice2 = [mProductOfferPrice[indexOfSku] floatValue]  - (amtToBeDeducted1 *  tempToGiveDealQty);
                                    
                                    tempToGiveDealQty = tempToGiveDealQty - [itemsIndividualQtyList[indexOfSku] floatValue];
                                    
                                }
                                else if([itemsIndividualQtyList[indexOfSku] floatValue] < tempToGiveDealQty)
                                {
                                    float qty = [itemsIndividualQtyList[indexOfSku] floatValue]/amtToBeDeducted1;
                                    
                                    offerPrice2 = [mProductOfferPrice[indexOfSku] floatValue] - (amtToBeDeducted1 * [itemsIndividualQtyList[indexOfSku] floatValue]);
                                    
                                    tempToGiveDealQty=tempToGiveDealQty-qty;
                                    
                                    if(offerPrice2<0) {
                                        
                                        offerPrice2=0;
                                    }
                                }
                                
                                mProductOfferPrice[indexOfSku] = @(offerPrice2);
                                
                            }
                            else{
                                
                                //                                            float offerPrice2 = [[offerPriceList objectAtIndex:indexOfSku] floatValue];
                                //
                                //                                            float amtToBeDeducted1 = offerPrice2 / [[itemsIndividualQtyList objectAtIndex:indexOfSku] floatValue];
                                
                                mProductOfferPrice[indexOfSku] = @0.0f;
                                
                                [tempPromoSkusArr removeObject:skuId];
                            }
                        }
                    }
                }
                
                //removing free items list....
                
                float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                
                
                if(remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty){
                    //  float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity/rewardQty));
                    //   if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                    NSMutableArray *unappliedDealsSku = [NSMutableArray new];
                    if([applyDealsAndOfferResponse.allKeys containsObject:@"unAppliedDealSkus"] && ![applyDealsAndOfferResponse[@"unAppliedDealSkus"] isKindOfClass:[NSNull class]]) {
                        
                        unappliedDealsSku = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                        NSMutableArray *removebleDealSkus = [[applyIndividualDeal.dealSkus componentsSeparatedByString:@","] mutableCopy];
                        
                        for (NSString *dealSku in removebleDealSkus) {
                            if([unappliedDealsSku containsObject:dealSku]){
                                [unappliedDealsSku removeObject:dealSku];
                            }
                            if([dealSkuListAll containsObject:dealSku]){
                                [dealSkuListAll removeObject:dealSku];
                            }
                            
                        }
                    }
                    
                    
                    if(unappliedDealsSku.count==0){
                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                        
                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                    }else{
                        
                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = [unappliedDealsSku componentsJoinedByString:@","];
                        NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                        
                        for (NSString *str in unappliedDealsSku) {
                            
                            NSString *desc = [self getSkuDescriptionFor:str];
                            [dealSkusDescArr addObject:desc];
                        }
                        [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
                        
                        
                        
                    }
                    
                    //}
                    
                }
                
                if([applyDealsAndOfferResponse[@"unAppliedDealSkus"] isKindOfClass:[NSNull class]] || [applyDealsAndOfferResponse[@"unAppliedDealSkus"] length] == 0){
                    
                    NSMutableArray *removebleDealSkus = [[applyIndividualDeal.dealSkus componentsSeparatedByString:@","] mutableCopy];
                    for (NSString *dealSku in removebleDealSkus) {
                        if([dealSkuListAll containsObject:dealSku]){
                            [dealSkuListAll removeObject:dealSku];
                        }
                        
                    }
                }
            }
            //                    }
            
            promoSkusArrList = [promoSkusArr mutableCopy];
            
            NSMutableArray *freeItemNameList = [NSMutableArray new];
            NSMutableArray *freeItemQtyList = [NSMutableArray new];
            for (int w = 0; w < common.count; w++) {
                int freeItemIndex = (int)[itemsPluCodeList indexOfObject:common[w]];
                [freeItemNameList addObject:common[w]];
                if ([common[w] isEqualToString:itemsPluCodeList[freeItemIndex]]) {
                    effectiveDealQty = [itemsIndividualQtyList[freeItemIndex] floatValue] / (toGiveDealQuantity_ + minPurchaseQty);
                    effectiveDealQty = (float) (floor(effectiveDealQty) * toGiveDealQuantity_);
                } else {
                    effectiveDealQty = toGiveDealQuantity_;
                }
                if ([itemsIndividualQtyList[freeItemIndex] floatValue] >= effectiveDealQty) {
                    [freeItemQtyList addObject:[NSNumber numberWithFloat:floor(effectiveDealQty)]];
                    float tempFreeQty = [mFreeQtyArrayList[freeItemIndex] floatValue];
                    if (w == 0) {
                        mFreeQtyArrayList[freeItemIndex] = @(effectiveDealQty);
                    } else {
                        mFreeQtyArrayList[freeItemIndex] = @(tempFreeQty + effectiveDealQty);
                    }
                    break;
                } else {
                    effectiveDealQty = [itemsIndividualQtyList[freeItemIndex] floatValue];
                    [freeItemQtyList addObject:[NSNumber numberWithFloat:floor(effectiveDealQty)]];
                    float tempFreeQty = [mFreeQtyArrayList[freeItemIndex] floatValue];
                    if (w == 0) {
                        mFreeQtyArrayList[freeItemIndex] = @(effectiveDealQty);
                    } else {
                        mFreeQtyArrayList[freeItemIndex] = @(tempFreeQty + effectiveDealQty);
                    }
                }
                mProductDealQty[freeItemIndex] = @(effectiveDealQty);
                if (effectiveDealQty > 0)
                    isItemSpecificDealApplied = true;
                
                @try {
                    if (![isDealApplied[freeItemIndex] boolValue]) {
                        freeItemLists[freeItemIndex] = dealSkuArray;
                        NSMutableArray *strList = [NSMutableArray new];
                        for (NSString *str in dealSkuArray) {
                            [strList addObject:[NSNumber numberWithFloat:rewardQty]];
                        }
                        freeItemQtyLists[freeItemIndex] = strList;
                    }
                    NSString *tempDiscountType, *tempDiscountId;
                    tempDiscountType = discountTypeArrayList[freeItemIndex];
                    tempDiscountId = discountIdArrayList[freeItemIndex];
                    
                    if (![employeeCode isKindOfClass:[NSNull class]] && (applyIndividualDeal.employeeSpecific == true)) {
                        appliedDealIdList[freeItemIndex] = employeeCode;
                    }
                    
                    
                    discountTypeArrayList[freeItemIndex] = [NSString stringWithFormat:@"%@%@",tempDiscountType,@" deal,"];
                    if (![tempDiscountId containsString:applyIndividualDeal.dealID]) {
                        discountIdArrayList[freeItemIndex] = [NSString stringWithFormat:@"%@%@%@",tempDiscountId,applyIndividualDeal.dealID,@","];
                    }
                }
                @catch (NSException *e) {
                }
                
            }
        }
    } @catch (NSException *exception) {
        
        effectiveDealQty = 0;
    } @finally {
        return effectiveDealQty;
    }
}
- (float)getEffectiveDealSkuIdQty:(ApplyDealModel *)applyIndividualDeal dealQty:(float)effectiveDealQty dealType:(BOOL)isItemSpecificDealApplied{
    
    NSMutableArray * appliedSkuIdsArr  = [NSMutableArray new];
    NSMutableArray * promoSkusArr = [NSMutableArray new];
    
    NSMutableArray *offerPriceList = [mProductOfferPrice mutableCopy];
    
    NSMutableArray *tempPromoSkusArr = [NSMutableArray new];
    NSMutableArray *appliedItemsArr = [NSMutableArray new];
    
    @try {
        NSArray *sellSkus = [applyIndividualDeal.sellSkuids componentsSeparatedByString:@","];
        NSMutableArray *sellSkuArray = [NSMutableArray new];
        for (NSString *str in sellSkus) {
            
            if (str.length>0) {
                
                [sellSkuArray addObject:str];
            }
        }
        //   NSMutableArray *sellSkuArray = [[NSMutableArray alloc] initWithArray:sellSkus];
        NSMutableArray *common1 = [[NSMutableArray alloc] initWithArray:itemsSkuIdList];
        
        NSMutableArray *tempSellSkuList = [[NSMutableArray alloc] init];
        for (NSString *skuStr in sellSkuArray) {
            if ([itemsSkuIdList containsObject:skuStr]) {
                [tempSellSkuList addObject:skuStr];
            }
        }
        
        
        common1 = [tempSellSkuList mutableCopy];
        NSMutableArray *tempList = [NSMutableArray new];
        [tempList addObjectsFromArray:common1];
        for (NSString *sku in common1) {
            if ([itemsStatusList[[itemsSkuIdList indexOfObject:sku]] containsString:@"void"]){
                [tempList removeObject:sku];
            }
        }
        common1 = [tempList mutableCopy];
        int cartQty = 0;
        int dealCartQty = 0;
        for (NSString *sku in common1) {
            cartQty = cartQty + [itemsIndividualQtyList[[itemsSkuIdList indexOfObject:sku]] floatValue];
        }
        int minPurchaseQty = 0, rewardQty = 0;
        for (DealRangesModel *range in applyIndividualDeal.rangeList) {
            if (range.rangeMode == NULL || [range.rangeMode containsString:@"promotion"] || [(range.rangeMode).lowercaseString containsString:@"both"] || (range.rangeMode).length == 0) {
                rewardQty = range.dealQuantity_float;
            }
            if (range.rangeMode == NULL || [range.rangeMode containsString:@"condition"] || [(range.rangeMode).lowercaseString containsString:@"both"] || (range.rangeMode).length == 0) {
                minPurchaseQty = range.minimumPurchaseQuantity_float;
            }
        }
        NSArray *dealSkus = [applyIndividualDeal.dealSkus componentsSeparatedByString:@","];
        
        NSMutableArray *dealSkuArray = [NSMutableArray new];
        for (NSString *str in dealSkus) {
            
            if (str.length>0) {
                
                [dealSkuArray addObject:str];
            }
        }
        
        //  NSMutableArray *dealSkuArray = [[NSMutableArray alloc] initWithArray:dealSkus];
        
        NSMutableArray * skuList = [NSMutableArray new];
        NSMutableArray *common = [[NSMutableArray alloc] initWithArray:itemsSkuIdList];
        
        NSMutableArray *tempdealSkuList = [[NSMutableArray alloc] init];
        for (NSString *skuStr in dealSkuArray) {
            if ([itemsSkuIdList containsObject:skuStr]) {
                [tempdealSkuList addObject:skuStr];
            }
        }
        
        
        common = [tempdealSkuList mutableCopy];
        
        dealSkuListAll = [[NSMutableArray alloc] initWithArray:dealSkuArray];
        SkuDetailsModel *skuDetails;
        NSMutableArray *tempList1 = [[NSMutableArray alloc] initWithArray:common];
        for (NSString *sku in common) {
            if ([itemsStatusList[[itemsSkuIdList indexOfObject:sku]] containsString:@"void"]) {
                [tempList1 removeObject:sku];
            }
        }
        common = [tempList1 mutableCopy];
        
        for (NSString *sku in common) {
            dealCartQty = dealCartQty + [itemsIndividualQtyList[[itemsSkuIdList indexOfObject:sku]] floatValue];
        }
        
        
        // NSArray *sellSkuidsArr = [applyIndividualDeal.sellSkuids componentsSeparatedByString:@","];
        //  NSArray *dealSkuidsArr = [applyIndividualDeal.dealSkus componentsSeparatedByString:@","];
        
        NSMutableArray *sellSkuidsArr = [NSMutableArray new];
        for (NSString *str in [applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]) {
            
            if (str.length>0) {
                
                [sellSkuidsArr addObject:str];
            }
        }
        
        NSMutableArray *dealSkuidsArr = [NSMutableArray new];
        for (NSString *str in [applyIndividualDeal.dealSkus componentsSeparatedByString:@","]) {
            
            if (str.length>0) {
                
                [dealSkuidsArr addObject:str];
            }
        }
        
        NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:sellSkuidsArr];
        NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:dealSkuidsArr];
        
        [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
        
        NSArray* result = set1.allObjects;
        
        //modified by sonali to keep only the available deals for non voided items
        
        NSMutableArray *itemWiseAvailableDeals = [NSMutableArray new];
        
        int index = 0;
        
        for (NSMutableArray *availableDeals in [applyDealsAndOfferResponse valueForKey:@"availableDeals"]) {
            
            if ([itemsStatusList[index] caseInsensitiveCompare:@"void"] != NSOrderedSame) {
                
                [itemWiseAvailableDeals addObject:availableDeals];
            }
            index++;
        }
        
        
        
        float toGiveDealQuantity_ = 0;
        BOOL condition = false;
        //            if ([applyIndividualDeal.sellSkuids containsString:applyIndividualDeal.dealSkus]) {
        if (result.count) {
            
            toGiveDealQuantity_ = (float) (floor(cartQty / (minPurchaseQty + rewardQty)) * rewardQty);
            if (cartQty >= minPurchaseQty + toGiveDealQuantity_) {
                condition = true;
                if(((cartQty >= minPurchaseQty) && toGiveDealQuantity_ == 0) || (cartQty % (minPurchaseQty+rewardQty)) != 0){
                    //  if([[applyDealsAndOfferResponse valueForKey:@"unAppliedDealIndex"] intValue] == -1){
                    int count = 0;
                    for (NSMutableArray *dealObjList in itemWiseAvailableDeals) {
                        for (DealModel *deal in dealObjList) {
                            if([(applyIndividualDeal.dealID).lowercaseString isEqualToString:(deal.dealID).lowercaseString]){
                                
                                
                                if ((![self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && ![self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]])) {
                                    
                                    [applyDealsAndOfferResponse setValue:@(count) forKey:@"unAppliedDealIndex"];
                                    
                                    
                                    int remainingQtyInCart = cartQty - (minPurchaseQty + rewardQty)*toGiveDealQuantity_;
                                    
                                    if (remainingQtyInCart < 0) {
                                        
                                        remainingQtyInCart = 0;
                                    }
                                    
                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                    }
                                    
                                    else {
                                        
                                        if ([applyDealsAndOfferResponse.allKeys containsObject:@"unAppliedSellSkus"] && [[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"] count]) {
                                            
                                            
                                            NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]];
                                            NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:sellSkuidsArr];
                                            
                                            [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                                            
                                            NSArray* result = set1.allObjects;
                                            
                                            if (result) {
                                                
                                                [dealSkuListAll addObjectsFromArray:[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","]];
                                                
                                                NSOrderedSet *set = [[NSOrderedSet alloc] initWithArray:dealSkuListAll];
                                                
                                                dealSkuListAll = [set.array mutableCopy];
                                                
                                                [applyDealsAndOfferResponse setValue:[dealSkuListAll componentsJoinedByString:@","] forKey:@"unAppliedDealSkus"];
                                                [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                
                                                
                                            }
                                            else {
                                                
                                                [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
                                                [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                
                                            }
                                        }
                                        
                                        else {
                                            
                                            [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
                                            [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                            
                                        }
                                        
                                        //added by sonali on 17/8/16
                                        
                                        
                                        NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                                        
                                        for (NSString *str in dealSkuListAll) {
                                            
                                            NSString *desc = [self getSkuDescriptionFor:str];
                                            [dealSkusDescArr addObject:desc];
                                        }
                                        [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
                                        
                                        
                                    }
                                    
                                    
                                }
                                
                                //                                    }
                            }
                            count++;
                        }
                    }
                }
                
            }
        } else if(common1.count > 0){
            if (cartQty >= minPurchaseQty + toGiveDealQuantity) {
                //                        if((cartQty % dealCartQty) == 0)
                //                            toGiveDealQuantity_ = cartQty;
                //                        else {
                
                //                            if(cartQty <= dealCartQty ) {
                //
                //                                toGiveDealQuantity_ = cartQty;
                //                            }
                //                            else {
                //                                toGiveDealQuantity_ = dealCartQty;
                //                            }
                //                        }
                //toGiveDealQuantity_ = cartQty - dealCartQty;
                
                
                if(![applyIndividualDeal.sellGroupID isEqualToString:applyIndividualDeal.dealGroupId]){
                    
                    float fraction = cartQty/minPurchaseQty;
                    
                    float dealQty = dealCartQty/rewardQty;
                    //
                    //                            if(fraction < dealQty) {
                    //
                    //                                toGiveDealQuantity_ = (float) floor(((fraction+dealCartQty) / minPurchaseQty ) * rewardQty);
                    //                            }
                    //                            else {
                    //                                toGiveDealQuantity_ = (float) floor(((cartQty+dealCartQty) / (minPurchaseQty + rewardQty)) * rewardQty);
                    //
                    //                            }
                    
                    if (fraction < dealQty) {
                        
                        toGiveDealQuantity_ = fraction;
                    }
                    else {
                        toGiveDealQuantity_ = dealQty;
                    }
                    
                    
                }else{
                    toGiveDealQuantity_ = (float) (floor(cartQty / (minPurchaseQty + rewardQty)) * rewardQty);
                }
                
                if(toGiveDealQuantity_ < 0)
                    toGiveDealQuantity_ = rewardQty * cartQty;
                if (!(dealCartQty >= toGiveDealQuantity_)) {
                    toGiveDealQuantity_ = dealCartQty;
                }
                if (dealCartQty >= toGiveDealQuantity_) {
                    condition = true;
                    if(((cartQty >= minPurchaseQty) && toGiveDealQuantity_ == 0) || toGiveDealQuantity_ < cartQty){
                        if([[applyDealsAndOfferResponse valueForKey:@"unAppliedDealIndex"] intValue] == -1){
                            int count = 0;
                            for (NSMutableArray *dealObjList in [applyDealsAndOfferResponse valueForKey:@"availableDeals"]) {
                                for (DealModel *deal in dealObjList) {
                                    if([(applyIndividualDeal.dealID).lowercaseString isEqualToString:(deal.dealID).lowercaseString]){
                                        
                                        
                                        if ((![self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && ![self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]])) {
                                            
                                            [applyDealsAndOfferResponse setValue:@(count) forKey:@"unAppliedDealIndex"];
                                            
                                            float  remainingQtyInCart = 0;
                                            
                                            if(![applyIndividualDeal.sellGroupID isEqualToString:applyIndividualDeal.dealGroupId]){
                                                
                                                remainingQtyInCart= (cartQty+dealCartQty) -  ((minPurchaseQty + rewardQty)*(toGiveDealQuantity_/rewardQty));
                                            }
                                            else{
                                                remainingQtyInCart= cartQty -  ((minPurchaseQty + rewardQty)*(toGiveDealQuantity_/rewardQty));
                                                
                                            }
                                            
                                            
                                            if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                                
                                                NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                                
                                                [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                                
                                                applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                                applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                                applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                                
                                                applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                            }
                                            else {
                                                
                                                if ([applyDealsAndOfferResponse.allKeys containsObject:@"unAppliedSellSkus"] && [[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"] count]) {
                                                    
                                                    
                                                    NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]];
                                                    NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:sellSkuidsArr];
                                                    
                                                    [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                                                    
                                                    NSArray* result = set1.allObjects;
                                                    
                                                    if (result) {
                                                        
                                                        [dealSkuListAll addObjectsFromArray:[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","]];
                                                        
                                                        NSOrderedSet *set = [[NSOrderedSet alloc] initWithArray:dealSkuListAll];
                                                        
                                                        dealSkuListAll = [set.array mutableCopy];
                                                        
                                                        [applyDealsAndOfferResponse setValue:[dealSkuListAll componentsJoinedByString:@","] forKey:@"unAppliedDealSkus"];
                                                        [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                        
                                                        
                                                    }
                                                    else {
                                                        
                                                        [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
                                                        [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                        
                                                    }
                                                }
                                                
                                                else {
                                                    
                                                    [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
                                                    [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
                                                    
                                                }
                                                
                                                //added by sonali on 17/8/16
                                                
                                                
                                                NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                                                
                                                for (NSString *str in dealSkuListAll) {
                                                    
                                                    NSString *desc = [self getSkuDescriptionFor:str];
                                                    [dealSkusDescArr addObject:desc];
                                                }
                                                [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
                                                
                                                
                                            }
                                            
                                            
                                        }
                                        
                                        
                                    }
                                }
                                count++;
                            }
                        }
                    }
                    
                }
            }
            //                    else {
            //                       // toGiveDealQuantity_ = rewardQty;
            //
            //                        if(cartQty <= dealCartQty) {
            //
            //                            toGiveDealQuantity_ = cartQty;
            //                        }
            //                        else {
            //                            toGiveDealQuantity_ = dealCartQty;
            //                        }
            //                        if(toGiveDealQuantity_<=(cartQty + dealCartQty)){
            //                            condition = true;
            //                            if((cartQty >= minPurchaseQty)){
            //                                if([[applyDealsAndOfferResponse valueForKey:@"unAppliedDealIndex"] intValue] == -1){
            //                                    int count = 0;
            //                                    for (NSMutableArray *dealObjList in [applyDealsAndOfferResponse valueForKey:@"availableDeals"]) {
            //                                        for (DealModel *deal in dealObjList) {
            //                                            if([[applyIndividualDeal.dealID lowercaseString] isEqualToString:[deal.dealID lowercaseString]]){
            //
            //                                                //                                            [applyDealsAndOfferResponse setValue:[NSNumber numberWithInt:count] forKey:@"unAppliedDealIndex"];
            //                                                //                                            [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
            //                                                //
            //                                                //                                            NSMutableArray *dealSkusDescArr = [NSMutableArray new];
            //                                                //
            //                                                //                                            for (NSString *str in dealSkuListAll) {
            //                                                //
            //                                                //                                                NSString *desc = [self getSkuDescriptionFor:str];
            //                                                //                                                [dealSkusDescArr addObject:desc];
            //                                                //                                            }
            //                                                //                                            [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
            //
            //
            //
            //                                                if ((![self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && ![self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]])) {
            //
            //                                                    [applyDealsAndOfferResponse setValue:[NSNumber numberWithInt:count] forKey:@"unAppliedDealIndex"];
            //
            //                                                    int remainingQtyInCart = cartQty - (minPurchaseQty + rewardQty)*toGiveDealQuantity_;
            //
            //                                                    if (remainingQtyInCart < 0) {
            //
            //                                                        remainingQtyInCart = 0;
            //                                                    }
            //
            //                                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
            //
            //                                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
            //
            //                                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
            //
            //                                                        [applyDealsAndOfferResponse setObject:@"" forKey:@"unAppliedDealSkus"];
            //                                                        [applyDealsAndOfferResponse setObject:[NSNumber numberWithInt:-1] forKey:@"unAppliedDealIndex"];
            //                                                        [applyDealsAndOfferResponse setObject:[NSArray arrayWithObject:@""] forKey:@"unAppliedDealSkusDesc"];
            //
            //                                                        [applyDealsAndOfferResponse setObject:[NSArray arrayWithObject:@""] forKey:@"unAppliedSellSkus"];
            //                                                    }
            //
            //                                                    else {
            //                                                        if ([[applyDealsAndOfferResponse allKeys] containsObject:@"unAppliedSellSkus"] && [[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"] count]) {
            //
            //
            //                                                            NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]];
            //                                                            NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:sellSkuidsArr];
            //
            //                                                            [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
            //
            //                                                            NSArray* result = [set1 allObjects];
            //
            //                                                            if (result) {
            //
            //                                                                [dealSkuListAll addObjectsFromArray:[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","]];
            //
            //                                                                NSOrderedSet *set = [[NSOrderedSet alloc] initWithArray:dealSkuListAll];
            //
            //                                                                dealSkuListAll = [[set array] mutableCopy];
            //
            //                                                                [applyDealsAndOfferResponse setValue:[dealSkuListAll componentsJoinedByString:@","] forKey:@"unAppliedDealSkus"];
            //                                                                [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
            //
            //
            //                                                            }
            //                                                            else {
            //
            //                                                                [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
            //                                                                [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
            //
            //                                                            }
            //                                                        }
            //
            //                                                        else {
            //
            //                                                            [applyDealsAndOfferResponse setValue:applyIndividualDeal.dealSkus forKey:@"unAppliedDealSkus"];
            //                                                            [applyDealsAndOfferResponse setValue:sellSkuidsArr forKey:@"unAppliedSellSkus"];
            //
            //                                                        }
            //
            //                                                        //added by sonali on 17/8/16
            //
            //
            //                                                        NSMutableArray *dealSkusDescArr = [NSMutableArray new];
            //
            //                                                        for (NSString *str in dealSkuListAll) {
            //
            //                                                            NSString *desc = [self getSkuDescriptionFor:str];
            //                                                            [dealSkusDescArr addObject:desc];
            //                                                        }
            //                                                        [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
            //
            //                                                    }
            //                                                }
            //
            //                                            }
            //                                        }
            //                                        count++;
            //                                    }
            //                                }
            //                            }
            //
            //                        }
            //                    }
        }
        
        if (condition) {
            
            //                    float matchedItemsCartQty=0;
            //
            //                    NSMutableArray *offerAppliedItemsList=[NSMutableArray new];
            //                    NSMutableArray *nonOfferAppliedItemsList=[NSMutableArray new];
            
            
            for (int z = 0; z < common.count; z++) {
                skuDetails = [SkuDetailsModel new];
                int indexOf = (int)[itemsSkuIdList indexOfObject:common[z]];
                skuDetails.price = [itemsUnitPriceList[indexOf] floatValue];
                skuDetails.quantity = [itemsIndividualQtyList[indexOf] floatValue];
                skuDetails.skuID = common[z];
                skuDetails.offerPrice = [mProductOfferPrice[indexOf] floatValue];
                //  float itemQty = skuDetails.quantity;
                // for(int c = 0;c < itemQty; c++){
                //skuDetails.quantity = 1.0;
                if (![skuList containsObject:skuDetails]) {
                    [skuList addObject:skuDetails];
                }
                //}
            }
            skuList = [self sortTheArray:[skuList mutableCopy] withKey:@"price" isAscending:NO];
            // NSMutableArray *finalSkuDetails = [self getChoppedArrayListFor:skuList with:(minPurchaseQty + rewardQty)];
            
            //  NSMutableArray *finalSkuDetails = skuList;
            
            //                    NSMutableArray *finalSkuDetails = [self getChoppedArrayListFor:skuList with:toGiveDealQuantity_];
            
            float actualCartQty = cartQty;
            if(![applyIndividualDeal.sellGroupID isEqualToString:applyIndividualDeal.dealGroupId]){
                actualCartQty=cartQty+dealCartQty;
            }
            
            float givenDealQty = 0;
            for (int p = 0; p < appliedDealIdList.count; p++) {
                NSString *dealID = appliedDealIdList[p];
                @try {
                    if ((dealID != NULL && [dealID isEqualToString:applyIndividualDeal.dealID]) ) {
                        appliedDealIdList[p] = [NSNull null];
                        dealDiscount[p] = @0.0f;
                        isDealApplied[p] = [NSNumber numberWithBool:FALSE];
                    }
                } @catch (NSException *e) {
                }
                
            }
            float tempDeal = 0;
            float dealPrice = 0;
            float tempDealPrice = 0;
            //  for (NSMutableArray *sku in finalSkuDetails) {
            
            NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:sellSkuArray];
            NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:dealSkuArray];
            
            [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
            
            NSArray* result = set1.allObjects;
            
            //                    if([self checkOneArray:sellSkuArray containsAllIn:dealSkuArray]){
            
            float remaingQty = actualCartQty -  ((minPurchaseQty + rewardQty)*(toGiveDealQuantity_/rewardQty));
            
            
            if(result.count){
                
                for (int h = (int)(skuList.count-1); h >=0; h--) {
                    
                    dealPrice = 0;
                    float itemUnitOfferPrice=0;
                    
                    SkuDetailsModel *skuDetails = skuList[h];
                    int itemId = (int)[itemsSkuIdList indexOfObject:skuDetails.skuID];
                    tempDealPrice = [dealDiscount[itemId] floatValue];
                    
                    if (givenDealQty < toGiveDealQuantity_) {
                        
                        tempDeal = [dealDiscount[([itemsSkuIdList indexOfObject:skuDetails.skuID])] floatValue];
                        
                        if (toGiveDealQuantity_ - givenDealQty > skuDetails.quantity) {
                            
                            dealPrice += (float) (skuDetails.quantity * skuDetails.price);
                            
                        } else {
                            dealPrice += (toGiveDealQuantity_ - givenDealQty) * skuDetails.price;
                            
                        }
                        
                        float previousOfferPrice = [offerPriceList[itemId] floatValue];
                        
                        float dealPriceWithOffer = dealPrice;
                        
                        int appliedDealQty = skuDetails.quantity / minPurchaseQty;
                        
                        if (appliedDealQty > toGiveDealQuantity_) {
                            
                            appliedDealQty = toGiveDealQuantity_;
                        }
                        else if(toGiveDealQuantity_ - givenDealQty > skuDetails.quantity){
                            
                            appliedDealQty = skuDetails.quantity;
                        }
                        else {
                            appliedDealQty = (toGiveDealQuantity_ - givenDealQty);
                        }
                        
                        
                        //                                    if((skuDetails.quantity != appliedDealQty) &&  minPurchaseQty>0 && toGiveDealQuantity_!=0){
                        //
                        //                                        // previousOfferPrice=  (float)   (previousOfferPrice/skuDetails.quantity*(skuDetails.quantity-toGiveDealQuantity_));
                        //
                        //
                        //                                        previousOfferPrice = previousOfferPrice - (previousOfferPrice/skuDetails.quantity);
                        //                                        dealPriceWithOffer = dealPriceWithOffer + (previousOfferPrice * appliedDealQty);
                        //
                        //                                        float offerPrice = [[offerPriceList objectAtIndex:itemId] floatValue];
                        //                                        remainingOfferPrice = (offerPrice -(previousOfferPrice * appliedDealQty));
                        //                                    }
                        
                        if ((appliedDealQty != skuDetails.quantity) && minPurchaseQty > 0 && toGiveDealQuantity_ != 0) {
                            // previousOfferPrice=  (float)   (previousOfferPrice/skuDetails.quantity*(skuDetails.quantity-toGiveDealQuantity_));
                            //    previousOfferPrice = (float) (previousOfferPrice - (previousOfferPrice / skuList.get(h).getQuantity()));
                            itemUnitOfferPrice=(float) (previousOfferPrice/skuDetails.quantity);
                            if(appliedDealQty>=toGiveDealQuantity_)
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * (toGiveDealQuantity_-givenDealQty)));
                            else
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * appliedDealQty));
                            //appliedDealPrice = appliedDealPrice + (previousOfferPrice * appliedDealQty);
                            //appliedDealPrice = appliedDealPrice + (previousOfferPrice );
                        }else{
                            itemUnitOfferPrice=(float) (previousOfferPrice/skuDetails.quantity);
                            if(appliedDealQty>=toGiveDealQuantity_)
                                previousOfferPrice = (float) (previousOfferPrice - (itemUnitOfferPrice * (toGiveDealQuantity_-givenDealQty)));
                            else
                                previousOfferPrice = (float) (previousOfferPrice - (itemUnitOfferPrice * appliedDealQty));
                        }
                        
                        
                        if (tempDealPrice > dealPriceWithOffer) {
                            
                            if ((tempDealPrice + previousOfferPrice) > [mProductOfferPrice[itemId] floatValue]) {
                                
                                dealDiscount[itemId] = @(tempDealPrice);
                                //[mProductOfferPrice replaceObjectAtIndex:itemId withObject:[NSNumber numberWithFloat:previousOfferPrice]];
                                appliedOfferIdsArr[itemId] = @"";
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                    //                                                if (![tempPromoSkusArr containsObject:skuId]) {
                                    //
                                    //                                                    [tempPromoSkusArr addObject:skuId];
                                    //
                                    //                                                }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        //   [applyDealsAndOfferResponse setObject:[NSString stringWithFormat:@"%@",[unappliedDealsSkuIdArr componentsJoinedByString:@","]] forKey:@"unAppliedDealSkus"];
                                        
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                    
                                }
                                
                                
                            }
                            else{
                                dealDiscount[itemId] = @0.0f;
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        //   [applyDealsAndOfferResponse setObject:[NSString stringWithFormat:@"%@",[unappliedDealsSkuIdArr componentsJoinedByString:@","]] forKey:@"unAppliedDealSkus"];
                                        
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                }
                            }
                        }
                        else{
                            if ((dealPriceWithOffer+previousOfferPrice) > [mProductOfferPrice[itemId] floatValue]) {
                                
                                dealDiscount[itemId] = @(dealPriceWithOffer);
                                mProductOfferPrice[itemId] = @(previousOfferPrice);
                                appliedOfferIdsArr[itemId] = @"";
                                
                                //                                            NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:promoSkusArr];
                                //                                            NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:appliedSkuIdsArr];
                                //
                                //                                            [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
                                //
                                //                                            NSArray* result = [set1 allObjects];
                                
                                //                                            if (result) {
                                //
                                //                                                for (NSString *appliedSkuId in result) {
                                //
                                //                                                    [dealDiscount replaceObjectAtIndex:[itemsSkuIdList indexOfObject:appliedSkuId] withObject:[NSNumber numberWithFloat:0.00]];
                                //
                                //                                                }
                                //                                            }
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                    if (![tempPromoSkusArr containsObject:skuId]) {
                                        
                                        [tempPromoSkusArr addObject:skuId];
                                        
                                    }
                                }
                                
                                
                                
                                
                                //                                        if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"] containsObject:skuDetails.skuID]) {
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                }
                                
                                
                            }
                            else{
                                dealDiscount[itemId] = @0.0f;
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                }
                            }
                        }
                        
                        appliedDealIdList[itemId] = applyIndividualDeal.dealID;
                        
                        givenDealQty += skuDetails.quantity;
                    }
                    //    }
                }
                
                
                //removing the previous offers if any....
                
                //sorting...
                NSMutableArray *sortedSellSkuList=[NSMutableArray new];
                float price=0;
                for (NSString *skuId in tempPromoSkusArr) {
                    if(![appliedItemsArr containsObject:skuId]){
                        int indexOf = [itemsSkuIdList indexOfObject:skuId];
                        if(indexOf>=0)
                        {
                            
                            float itemPrice=[itemsUnitPriceList[indexOf] floatValue];
                            
                            if(itemPrice>price){
                                
                                [sortedSellSkuList addObject:skuId];
                                
                                price=itemPrice;
                            }
                            else
                                [sortedSellSkuList addObject:skuId];
                        }
                    }
                }
                
                
                float  tempToGiveDealQty = actualCartQty-(toGiveDealQuantity_+remaingQty);
                
                for(int h = sortedSellSkuList.count - 1; h >= 0; h--){
                    
                    NSString *skuId = sortedSellSkuList[h];
                    
                    int indexOfSku = [itemsSkuIdList indexOfObject:skuId];
                    
                    if(tempToGiveDealQty!=0 && tempToGiveDealQty>0){
                        
                        if ([mProductOfferPrice[indexOfSku] floatValue] > 0 ) {
                            
                            if(cartQty%(minPurchaseQty+rewardQty)!=0){
                                
                                float offerPrice2 = [offerPriceList[indexOfSku] floatValue];
                                
                                float amtToBeDeducted1 = offerPrice2 / [itemsIndividualQtyList[indexOfSku] floatValue];
                                
                                
                                if([itemsIndividualQtyList[indexOfSku] floatValue] >= tempToGiveDealQty)
                                {
                                    offerPrice2 = [mProductOfferPrice[indexOfSku] floatValue]  - (amtToBeDeducted1 *  tempToGiveDealQty);
                                    
                                    tempToGiveDealQty = tempToGiveDealQty - [itemsIndividualQtyList[indexOfSku] floatValue];
                                    
                                }
                                else if([itemsIndividualQtyList[indexOfSku] floatValue] < tempToGiveDealQty)
                                {
                                    float qty = [itemsIndividualQtyList[indexOfSku] floatValue]/amtToBeDeducted1;
                                    
                                    offerPrice2 = [mProductOfferPrice[indexOfSku] floatValue] - (amtToBeDeducted1 * [itemsIndividualQtyList[indexOfSku] floatValue]);
                                    
                                    tempToGiveDealQty=tempToGiveDealQty-qty;
                                    
                                    if(offerPrice2<0) {
                                        
                                        offerPrice2=0;
                                    }
                                }
                                
                                mProductOfferPrice[indexOfSku] = @(offerPrice2);
                                
                            }
                            else{
                                
                                //                                            float offerPrice2 = [[offerPriceList objectAtIndex:indexOfSku] floatValue];
                                //
                                //                                            float amtToBeDeducted1 = offerPrice2 / [[itemsIndividualQtyList objectAtIndex:indexOfSku] floatValue];
                                
                                mProductOfferPrice[indexOfSku] = @0.0f;
                                
                                [tempPromoSkusArr removeObject:skuId];
                            }
                        }
                    }
                }
                
                float remainingQtyInCart = 0;
                
                
                remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                
                if((remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty)){
                    //  float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity/rewardQty));
                    //   if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                    NSMutableArray *unappliedDealsSku = [NSMutableArray new];
                    if([applyDealsAndOfferResponse.allKeys containsObject:@"unAppliedDealSkus"] && ![applyDealsAndOfferResponse[@"unAppliedDealSkus"] isKindOfClass:[NSNull class]]) {
                        
                        unappliedDealsSku = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                        NSMutableArray *removebleDealSkus = [[applyIndividualDeal.dealSkus componentsSeparatedByString:@","] mutableCopy];
                        
                        for (NSString *dealSku in removebleDealSkus) {
                            if([unappliedDealsSku containsObject:dealSku]){
                                [unappliedDealsSku removeObject:dealSku];
                            }
                            if([dealSkuListAll containsObject:dealSku]){
                                [dealSkuListAll removeObject:dealSku];
                            }
                            
                        }
                    }
                    
                    
                    if(unappliedDealsSku.count==0){
                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                        
                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                    }else{
                        
                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = [unappliedDealsSku componentsJoinedByString:@","];
                        NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                        
                        for (NSString *str in unappliedDealsSku) {
                            
                            NSString *desc = [self getSkuDescriptionFor:str];
                            [dealSkusDescArr addObject:desc];
                        }
                        [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
                        
                        
                        
                    }
                    
                    if([applyDealsAndOfferResponse[@"unAppliedDealSkus"] isKindOfClass:[NSNull class]] || [applyDealsAndOfferResponse[@"unAppliedDealSkus"] length] == 0){
                        
                        NSMutableArray *removebleDealSkus = [[applyIndividualDeal.dealSkus componentsSeparatedByString:@","] mutableCopy];
                        for (NSString *dealSku in removebleDealSkus) {
                            if([dealSkuListAll containsObject:dealSku]){
                                [dealSkuListAll removeObject:dealSku];
                            }
                            
                        }
                    }
                    
                    //}
                    
                }
                
            }
            else {
                for (int h = 0; h < skuList.count; h++) {
                    //    if(sku.size() == minPurchaseQty){
                    
                    dealPrice = 0;
                    float itemUnitOfferPrice=0;
                    
                    SkuDetailsModel *skuDetails = skuList[h];
                    int itemId = (int)[itemsSkuIdList indexOfObject:skuDetails.skuID];
                    tempDealPrice = [dealDiscount[itemId] floatValue];
                    if (givenDealQty < toGiveDealQuantity_) {
                        tempDeal = [dealDiscount[([itemsSkuIdList indexOfObject:skuDetails.skuID])] floatValue];
                        
                        if (toGiveDealQuantity_ - givenDealQty > skuDetails.quantity) {
                            dealPrice += (float) (skuDetails.quantity * skuDetails.price);
                            
                        } else {
                            dealPrice += (toGiveDealQuantity_ - givenDealQty) * skuDetails.price;
                            
                        }
                        
                        float previousOfferPrice = [offerPriceList[itemId] floatValue];
                        
                        float dealPriceWithOffer = dealPrice;
                        
                        float remainingOfferPrice = 0;
                        
                        int appliedDealQty = skuDetails.quantity / minPurchaseQty;
                        if (appliedDealQty > toGiveDealQuantity_) {
                            
                            appliedDealQty = toGiveDealQuantity_;
                        }
                        else if(toGiveDealQuantity_ - givenDealQty > skuDetails.quantity){
                            
                            appliedDealQty = skuDetails.quantity;
                        }
                        else {
                            appliedDealQty = (toGiveDealQuantity_ - givenDealQty);
                        }
                        
                        
                        //                                    if((appliedDealQty != skuDetails.quantity) &&  minPurchaseQty>0 && toGiveDealQuantity_!=0){
                        //
                        //                                        // previousOfferPrice=  (float)   (previousOfferPrice/skuDetails.quantity*(skuDetails.quantity-toGiveDealQuantity_));
                        //
                        //
                        //                                        previousOfferPrice = previousOfferPrice - (previousOfferPrice/skuDetails.quantity);
                        //                                        dealPriceWithOffer = dealPriceWithOffer + (previousOfferPrice * appliedDealQty);
                        //
                        //                                        float offerPrice = [[offerPriceList objectAtIndex:itemId] floatValue];
                        //                                        remainingOfferPrice = (offerPrice -(previousOfferPrice * appliedDealQty));
                        //                                    }
                        
                        
                        if ((appliedDealQty != skuDetails.quantity) && minPurchaseQty > 0 && toGiveDealQuantity_ != 0)
                        {
                            itemUnitOfferPrice=(float) (previousOfferPrice/skuDetails.quantity);
                            
                            if(appliedDealQty>=toGiveDealQuantity_) {
                                
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * (toGiveDealQuantity_-givenDealQty)));
                                
                            }
                            else {
                                
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * appliedDealQty));
                                
                            }
                        }
                        else
                        {
                            itemUnitOfferPrice=(float) (previousOfferPrice/skuDetails.quantity);
                            
                            if(appliedDealQty>=toGiveDealQuantity_) {
                                
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * (toGiveDealQuantity_-givenDealQty)));
                            }
                            else {
                                previousOfferPrice = (float) (previousOfferPrice - ( itemUnitOfferPrice * appliedDealQty));
                            }
                            
                        }
                        
                        if (tempDealPrice > dealPriceWithOffer) {
                            
                            if (tempDealPrice > [mProductOfferPrice[itemId] floatValue]) {
                                
                                dealDiscount[itemId] = @(tempDealPrice);
                                mProductOfferPrice[itemId] = @0.0f;
                                appliedOfferIdsArr[itemId] = @"";
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                        // [tempPromoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        
                                    }
                                    else  {
                                        
                                        float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                        
                                        if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                            
                                            NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                            
                                            [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                            applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                            applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                            
                                            applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        }
                                        
                                    }
                                }
                                
                            }
                            else{
                                dealDiscount[itemId] = @0.0f;
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]){
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        
                                    }
                                }
                                else  {
                                    
                                    float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                    
                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                    }
                                    
                                }
                            }
                        }
                        else{
                            
                            //                                        float offerPrice = [[offerPriceList objectAtIndex:itemId] floatValue];
                            //
                            //                                        float amtToBeDeducted = offerPrice / [[itemsIndividualQtyList objectAtIndex:itemId] integerValue];
                            //
                            //                                        offerPrice = offerPrice - (amtToBeDeducted * toGiveDealQuantity_);
                            
                            if (dealPriceWithOffer > [mProductOfferPrice[itemId] floatValue]) {
                                dealDiscount[itemId] = @(dealPrice);
                                mProductOfferPrice[itemId] = @(previousOfferPrice);
                                appliedOfferIdsArr[itemId] = @"";
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                    if (![tempPromoSkusArr containsObject:skuId]) {
                                        [tempPromoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]){
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                    }
                                }
                                else  {
                                    
                                    float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                    
                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                    }
                                    
                                }
                                
                            }
                            else{
                                
                                dealDiscount[itemId] = @0.0f;
                                
                                [appliedSkuIdsArr addObject:skuDetails.skuID];
                                
                                if(previousOfferPrice < 0) {
                                    
                                    [appliedItemsArr addObject:skuDetails.skuID];
                                }
                                else if (previousOfferPrice > 0 && [appliedItemsArr containsObject:skuDetails.skuID]) {
                                    
                                    [appliedItemsArr removeObject:skuDetails.skuID];
                                }
                                
                                
                                for (NSString *skuId in sellSkuidsArr) {
                                    if (![promoSkusArr containsObject:skuId]) {
                                        [promoSkusArr addObject:skuId];
                                    }
                                }
                                
                                
                                if([self checkForFreeItem:appliedSkuIdsArr dealSkus:[applyIndividualDeal.dealSkus componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyIndividualDeal.sellSkuids componentsSeparatedByString:@","]] && [self checkForFreeItem:promoSkusArr dealSkus:[applyDealsAndOfferResponse valueForKey:@"unAppliedSellSkus"]]) {
                                    
                                    if ((dealCartQty % (minPurchaseQty+rewardQty)) == 0 && (cartQty % (minPurchaseQty+rewardQty)) == 0) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                        
                                    }
                                }
                                else  {
                                    
                                    float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                                    if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                                        
                                        NSMutableArray *unappliedDealsSkuIdArr = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                                        
                                        [unappliedDealsSkuIdArr removeObject:skuDetails.skuID];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                                        
                                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                                    }
                                    
                                }
                            }
                        }
                        appliedDealIdList[itemId] = applyIndividualDeal.dealID;
                        givenDealQty += skuDetails.quantity;
                    }
                    //    }
                }
                
                
                //removing the previous offers if any....
                
                //sorting...
                NSMutableArray *sortedSellSkuList=[NSMutableArray new];
                float price=0;
                for (NSString *skuId in tempPromoSkusArr) {
                    if(![appliedItemsArr containsObject:skuId]){
                        int indexOf = [itemsSkuIdList indexOfObject:skuId];
                        if(indexOf>=0)
                        {
                            
                            float itemPrice=[itemsUnitPriceList[indexOf] floatValue];
                            
                            if(itemPrice>price){
                                
                                [sortedSellSkuList addObject:skuId];
                                
                                price=itemPrice;
                            }
                            else
                                [sortedSellSkuList addObject:skuId];
                        }
                    }
                }
                
                
                float  tempToGiveDealQty = actualCartQty-(toGiveDealQuantity_+remaingQty);
                
                for(int h = sortedSellSkuList.count - 1; h >= 0; h--){
                    
                    NSString *skuId = sortedSellSkuList[h];
                    
                    int indexOfSku = [itemsSkuIdList indexOfObject:skuId];
                    
                    if(tempToGiveDealQty!=0 && tempToGiveDealQty>0){
                        
                        if ([mProductOfferPrice[indexOfSku] floatValue] > 0 ) {
                            
                            if(cartQty%(minPurchaseQty+rewardQty)!=0){
                                
                                float offerPrice2 = [offerPriceList[indexOfSku] floatValue];
                                
                                float amtToBeDeducted1 = offerPrice2 / [itemsIndividualQtyList[indexOfSku] floatValue];
                                
                                
                                if([itemsIndividualQtyList[indexOfSku] floatValue] >= tempToGiveDealQty)
                                {
                                    offerPrice2 = [mProductOfferPrice[indexOfSku] floatValue]  - (amtToBeDeducted1 *  tempToGiveDealQty);
                                    
                                    tempToGiveDealQty = tempToGiveDealQty - [itemsIndividualQtyList[indexOfSku] floatValue];
                                    
                                }
                                else if([itemsIndividualQtyList[indexOfSku] floatValue] < tempToGiveDealQty)
                                {
                                    float qty = [itemsIndividualQtyList[indexOfSku] floatValue]/amtToBeDeducted1;
                                    
                                    offerPrice2 = [mProductOfferPrice[indexOfSku] floatValue] - (amtToBeDeducted1 * [itemsIndividualQtyList[indexOfSku] floatValue]);
                                    
                                    tempToGiveDealQty=tempToGiveDealQty-qty;
                                    
                                    if(offerPrice2<0) {
                                        
                                        offerPrice2=0;
                                    }
                                }
                                
                                mProductOfferPrice[indexOfSku] = @(offerPrice2);
                                
                            }
                            else{
                                
                                //                                            float offerPrice2 = [[offerPriceList objectAtIndex:indexOfSku] floatValue];
                                //
                                //                                            float amtToBeDeducted1 = offerPrice2 / [[itemsIndividualQtyList objectAtIndex:indexOfSku] floatValue];
                                
                                mProductOfferPrice[indexOfSku] = @0.0f;
                                
                                [tempPromoSkusArr removeObject:skuId];
                            }
                        }
                    }
                }
                
                //removing free items list....
                
                float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity_/rewardQty));
                
                
                if(remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty){
                    //  float remainingQtyInCart = cartQty - ((minPurchaseQty )*(toGiveDealQuantity/rewardQty));
                    //   if (remainingQtyInCart >= 0 && remainingQtyInCart < minPurchaseQty) {
                    NSMutableArray *unappliedDealsSku = [NSMutableArray new];
                    if([applyDealsAndOfferResponse.allKeys containsObject:@"unAppliedDealSkus"] && ![applyDealsAndOfferResponse[@"unAppliedDealSkus"] isKindOfClass:[NSNull class]]) {
                        
                        unappliedDealsSku = [[[applyDealsAndOfferResponse valueForKey:@"unAppliedDealSkus"] componentsSeparatedByString:@","] mutableCopy];
                        NSMutableArray *removebleDealSkus = [[applyIndividualDeal.dealSkus componentsSeparatedByString:@","] mutableCopy];
                        
                        for (NSString *dealSku in removebleDealSkus) {
                            if([unappliedDealsSku containsObject:dealSku]){
                                [unappliedDealsSku removeObject:dealSku];
                            }
                            if([dealSkuListAll containsObject:dealSku]){
                                [dealSkuListAll removeObject:dealSku];
                            }
                            
                        }
                    }
                    
                    
                    if(unappliedDealsSku.count==0){
                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = @"";
                        applyDealsAndOfferResponse[@"unAppliedDealIndex"] = @-1;
                        applyDealsAndOfferResponse[@"unAppliedDealSkusDesc"] = @[@""];
                        
                        applyDealsAndOfferResponse[@"unAppliedSellSkus"] = @[@""];
                    }else{
                        
                        applyDealsAndOfferResponse[@"unAppliedDealSkus"] = [unappliedDealsSku componentsJoinedByString:@","];
                        NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                        
                        for (NSString *str in unappliedDealsSku) {
                            
                            NSString *desc = [self getSkuDescriptionFor:str];
                            [dealSkusDescArr addObject:desc];
                        }
                        [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"unAppliedDealSkusDesc"];
                        
                        
                        
                    }
                    
                    //}
                    
                }
                
                if([applyDealsAndOfferResponse[@"unAppliedDealSkus"] isKindOfClass:[NSNull class]] || [applyDealsAndOfferResponse[@"unAppliedDealSkus"] length] == 0){
                    
                    NSMutableArray *removebleDealSkus = [[applyIndividualDeal.dealSkus componentsSeparatedByString:@","] mutableCopy];
                    for (NSString *dealSku in removebleDealSkus) {
                        if([dealSkuListAll containsObject:dealSku]){
                            [dealSkuListAll removeObject:dealSku];
                        }
                        
                    }
                }
            }
            //                    }
            
            promoSkusArrList = [promoSkusArr mutableCopy];
            
            NSMutableArray *freeItemNameList = [NSMutableArray new];
            NSMutableArray *freeItemQtyList = [NSMutableArray new];
            for (int w = 0; w < common.count; w++) {
                int freeItemIndex = (int)[itemsSkuIdList indexOfObject:common[w]];
                [freeItemNameList addObject:common[w]];
                if ([common[w] isEqualToString:itemsSkuIdList[freeItemIndex]]) {
                    effectiveDealQty = [itemsIndividualQtyList[freeItemIndex] floatValue] / (toGiveDealQuantity_ + minPurchaseQty);
                    effectiveDealQty = (float) (floor(effectiveDealQty) * toGiveDealQuantity_);
                } else {
                    effectiveDealQty = toGiveDealQuantity_;
                }
                if ([itemsIndividualQtyList[freeItemIndex] floatValue] >= effectiveDealQty) {
                    [freeItemQtyList addObject:[NSNumber numberWithFloat:floor(effectiveDealQty)]];
                    float tempFreeQty = [mFreeQtyArrayList[freeItemIndex] floatValue];
                    if (w == 0) {
                        mFreeQtyArrayList[freeItemIndex] = @(effectiveDealQty);
                    } else {
                        mFreeQtyArrayList[freeItemIndex] = @(tempFreeQty + effectiveDealQty);
                    }
                    break;
                } else {
                    effectiveDealQty = [itemsIndividualQtyList[freeItemIndex] floatValue];
                    [freeItemQtyList addObject:[NSNumber numberWithFloat:floor(effectiveDealQty)]];
                    float tempFreeQty = [mFreeQtyArrayList[freeItemIndex] floatValue];
                    if (w == 0) {
                        mFreeQtyArrayList[freeItemIndex] = @(effectiveDealQty);
                    } else {
                        mFreeQtyArrayList[freeItemIndex] = @(tempFreeQty + effectiveDealQty);
                    }
                }
                mProductDealQty[freeItemIndex] = @(effectiveDealQty);
                if (effectiveDealQty > 0)
                    isItemSpecificDealApplied = true;
                
                @try {
                    if (![isDealApplied[freeItemIndex] boolValue]) {
                        freeItemLists[freeItemIndex] = dealSkuArray;
                        NSMutableArray *strList = [NSMutableArray new];
                        for (NSString *str in dealSkuArray) {
                            [strList addObject:[NSNumber numberWithFloat:rewardQty]];
                        }
                        freeItemQtyLists[freeItemIndex] = strList;
                    }
                    NSString *tempDiscountType, *tempDiscountId;
                    tempDiscountType = discountTypeArrayList[freeItemIndex];
                    tempDiscountId = discountIdArrayList[freeItemIndex];
                    
                    if (![employeeCode isKindOfClass:[NSNull class]] && (applyIndividualDeal.employeeSpecific == true)) {
                        appliedDealIdList[freeItemIndex] = employeeCode;
                    }
                    
                    
                    discountTypeArrayList[freeItemIndex] = [NSString stringWithFormat:@"%@%@",tempDiscountType,@" deal,"];
                    if (![tempDiscountId containsString:applyIndividualDeal.dealID]) {
                        discountIdArrayList[freeItemIndex] = [NSString stringWithFormat:@"%@%@%@",tempDiscountId,applyIndividualDeal.dealID,@","];
                    }
                }
                @catch (NSException *e) {
                }
                
            }
        }
    } @catch (NSException *exception) {
        
        effectiveDealQty = 0;
    } @finally {
        return effectiveDealQty;
    }
}


- (float)applyItemSpecificDeal:(NSMutableArray *)itemSpecificDealsList dealQty:(float)effectiveDealQty{
    @try {
        BOOL isItemSpecificDealApplied = FALSE;
        
        itemSpecificDealsList = [self removeDuplicateObjects:itemSpecificDealsList];
        
        //        NSMutableArray *appliedSkuIdsArr  = [NSMutableArray new];
        //        NSMutableArray *promoSkusArr = [NSMutableArray new];
        //        NSMutableArray *offerPriceList = [mProductOfferPrice mutableCopy];
        //        NSMutableArray *tempPromoSkusArr = [NSMutableArray new];
        //        NSMutableArray *appliedItemsArr = [NSMutableArray new];
        
        for (int i = 0; i < itemSpecificDealsList.count; i++) {
            ApplyDealModel *applyIndividualDeal = itemSpecificDealsList[i];
            if (![applyIndividualDeal.dealCategory containsString:@"turn_over"]) {
                if(applyIndividualDeal.ispluSpecificDeal)
                    effectiveDealQty = [self getEffectiveDealPluQty:applyIndividualDeal dealQty:effectiveDealQty dealType:isItemSpecificDealApplied];
                else
                    effectiveDealQty = [self getEffectiveDealSkuIdQty:applyIndividualDeal dealQty:effectiveDealQty dealType:isItemSpecificDealApplied];
            }
        }
        
        return effectiveDealQty;
        
    } @catch (NSException *exception) {
        NSLog(@"%@",exception);
    } @finally {
        
        
    }
}

- (int)applyTurnOverDeal:(NSMutableArray *)tempTurnDealList
{
    
    int turnOverDealIndex = -1;
    
    tempTurnDealList = [self removeDuplicatesDeals:tempTurnDealList dealCategry:@"turn_over"];
    
    for (int j = 0; j < tempTurnDealList.count; j++) {
        
        BOOL proceed = false;
        
        ApplyDealModel *dealModel = tempTurnDealList[j];
        if ([dealModel.dealCategory containsString:@"turn_over"]) {
            turnOverDeal = 0;
            turnOverDealIndex = j;
            float minPurchaseAmount_low = 0, minPurchaseAmount_high = 0, rewardQty = 0;
            for (DealRangesModel *range in dealModel.rangeList) {
                if (range.rangeMode == NULL || [range.rangeMode containsString:@"promotion"]
                    || [(range.rangeMode).lowercaseString containsString:@"both"] || (range.rangeMode).length == 0) {
                    if (range.dealQuantity_float > 0)
                        rewardQty = range.dealQuantity_float;
                }
                if (range.rangeMode == NULL || [range.rangeMode containsString:@"condition"]
                    || [(range.rangeMode).lowercaseString containsString:@"both"] || (range.rangeMode).length == 0) {
                    if (range.dealQuantity_float > 0)
                        minPurchaseAmount_low = range.minimumPurchaseamount_float;
                    else
                        minPurchaseAmount_high = range.minimumPurchaseamount_float;
                }
            }
            
            if (minPurchaseAmount_high <= 0 && mtotalBill >= minPurchaseAmount_low) {
                
                
                proceed = true;
                
            }
            else if (mtotalBill >= minPurchaseAmount_low && mtotalBill <= minPurchaseAmount_high) {
                
                proceed = true;
            }
            
            if (proceed) {
                
                NSMutableArray *dealSkuList = [[NSMutableArray alloc] initWithArray:[dealModel.dealSkus componentsSeparatedByString:@","]];
                NSMutableArray *tempDealSkuList = [dealSkuList mutableCopy];
                if ([dealSkuList[dealSkuList.count - 1] length] == 0) {
                    [tempDealSkuList removeObject:dealSkuList[dealSkuList.count - 1]];
                }
                dealSkuList = [tempDealSkuList mutableCopy];
                NSMutableArray *tempdealSkuList = [[NSMutableArray alloc] init];
                for (NSString *skuStr in dealSkuList) {
                    if ([itemsSkuIdList containsObject:skuStr]) {
                        [tempdealSkuList addObject:skuStr];
                    }
                }
                
                dealSkuList = [tempdealSkuList mutableCopy];
                BOOL turnOverItemDealStatus = FALSE;
                if (dealSkuList.count > 0) {
                    NSMutableArray *matchItemsIndexes = [NSMutableArray new];
                    for (NSString *groupItem in dealSkuList) {
                        int index = (int)[itemsSkuIdList indexOfObject:groupItem];
                        if (![itemsStatusList[index] containsString:@"void"]){
                            [matchItemsIndexes addObject:@(index)];
                            turnOverItemDealStatus = TRUE;
                        }
                    }
                    // List<Float> pricesList = new
                    // ArrayList<Float>();
                    SkuDetailsModel *skuDetails;
                    NSMutableArray *skuList = [NSMutableArray new];
                    for (int z = 0; z < matchItemsIndexes.count; z++) {
                        // pricesList.add(Float.valueOf(mProductUnitPriceArrayList.get(matchItemsIndexes.get(z))));
                        skuDetails = [SkuDetailsModel new];
                        skuDetails.skuID = itemsSkuIdList[[matchItemsIndexes[z] intValue]];
                        skuDetails.price = (
                                            [itemsUnitPriceList[[matchItemsIndexes[z] intValue]] floatValue]);
                        skuDetails.quantity = (
                                               [itemsIndividualQtyList[[matchItemsIndexes[z] intValue]] floatValue]);
                        [skuList addObject:skuDetails];
                    }
                    skuList = [self sortTheArray:skuList withKey:@"price" isAscending:NO];
                    double temp = floor(mtotalBill / minPurchaseAmount_low);
                    temp = 1;// which means isRepeat=false
                    int givenDealQty = 0;
                    toGiveDealQuantity = (float) floor(rewardQty * temp);
                    for (SkuDetailsModel *sku in skuList) {
                        if (givenDealQty < toGiveDealQuantity) {
                            turnOverMinPurchaseAmt = minPurchaseAmount_low;
                            if (toGiveDealQuantity - givenDealQty > sku.quantity
                                && (mtotalBill - totalOfferDiscountGlobal
                                    - (sku.quantity * sku.price) > (minPurchaseAmount_low))) {
                                    turnOverDeal = (float) (turnOverDeal + (sku.quantity * sku.price));
                                    givenDealQty += sku.quantity;
                                    dealDiscount[[itemsSkuIdList indexOfObject:sku.skuID]] = @(sku.quantity * sku.price);
                                    appliedDealIdList[[itemsSkuIdList indexOfObject:sku.skuID]] = dealModel.dealID;
                                    
                                } else if (mtotalBill - totalOfferDiscountGlobal
                                           - ((toGiveDealQuantity - givenDealQty)
                                              * sku.price) > (minPurchaseAmount_low)) {
                                               turnOverDeal = turnOverDeal
                                               + ((toGiveDealQuantity - givenDealQty) * sku.price);
                                               dealDiscount[[itemsSkuIdList indexOfObject:sku.skuID]] = @((toGiveDealQuantity - givenDealQty) * sku.price);
                                               appliedDealIdList[[itemsSkuIdList indexOfObject:sku.skuID]] = dealModel.dealID;
                                               
                                               givenDealQty += (toGiveDealQuantity - givenDealQty);
                                           }
                            
                            if (![employeeCode isKindOfClass:[NSNull class]] && (dealModel.employeeSpecific == true)) {
                                appliedDealIdList[[itemsSkuIdList indexOfObject:sku.skuID]] = employeeCode;
                            }
                            
                        } else {
                            break;
                        }
                    }
                    if (turnOverItemDealStatus) {
                        break;
                    }
                }
            }
        }
    }
    return turnOverDealIndex;
}
//--*-*-* added by Srinivasulu
-(void)applyGroupTurnOverOffers:(NSMutableArray *)tempOffersLists
{

    @try {
        tempOffersLists = [self removeDuplicatesOffers:tempOffersLists offerCategry:@"group_turn_over"];
        float groupTurnOverOffer = 0;
        
        for (int c = 0; c < tempOffersLists.count; c++) {
            
            BOOL isToProceed = false;
            ApplyOfferModel * applyOfferModel = tempOffersLists[c];
            if (!applyOfferModel.combo && !applyOfferModel.lowestPriceItem) {
                if ([applyOfferModel.offerCategory.lowercaseString containsString:@"group_turn_over"]) {
                    float totalGroupItemsPrice=0;
                    
                    NSMutableArray * offerRangesList = applyOfferModel.offerRangesList;
                    NSMutableArray * minPurchaseAmtAndRewardValues = [NSMutableArray new];
                    float minPurchaseAmt = 0, rewardValue = 0;
                    float minPurchaseAmount_low = 0, minPurchaseAmount_high = 0;
                    NSString * rewardType = applyOfferModel.rewardType;
                    NSMutableArray * grpSkus = [NSMutableArray new];
                    
                    for (OfferRangesModel *range in offerRangesList) {

                        if (range.rangeMode == NULL || [range.rangeMode isEqualToString:@"promotion"] || [range.rangeMode isEqualToString:@"both"] || (range.rangeMode).length == 0) {
                            if(range.rewardValue > 0)
                            rewardValue = range.rewardValue;
                        }
                        if (range.rangeMode == NULL || [range.rangeMode isEqualToString:@"condition"] || [(range.rangeMode).lowercaseString isEqualToString:@"both"] || (range.rangeMode).length == 0) {
                            if (range.rewardValue > 0) {
                                
                                //                                minPurchaseAmount_low = range.minimumPurchaseQuantity;
                                //                                minPurchaseAmt = minPurchaseAmount_low;
                            }
                            else{
                                
                                minPurchaseAmount_high = range.minimumPurchaseamount;
                                // minPurchaseAmt = minPurchaseAmount_high;
                            }
                        }
                        
                        if(![range.groupItemsList isKindOfClass:[NSNull class]]){
                            
                            for (NSString * skuId in range.groupItemsList) {
                                if([itemsSkuIdList containsObject:skuId]){
                                
                                    int itemId = (int)[itemsSkuIdList indexOfObject:skuId];
                                    totalGroupItemsPrice += ([[itemsUnitPriceList objectAtIndex:itemId] floatValue] * [[itemsIndividualQtyList objectAtIndex:itemId] floatValue]);
                                    totalGroupItemsPrice = totalGroupItemsPrice - [[mProductOfferPrice objectAtIndex:itemId] floatValue];
                                    totalGroupItemsPrice = totalGroupItemsPrice - [[dealDiscount objectAtIndex:itemId] floatValue];
                                }
                            }
                            if(totalGroupItemsPrice < 0)
                                totalGroupItemsPrice = 0;
                         
                            grpSkus = range.groupItemsList;
                        }
                   
                        if(![range.rangeMode isKindOfClass:[NSNull class]]){
                            if([range.rangeMode.lowercaseString containsString:@"both"]){
                                
                                if(range.rewardValue > 0){
                                    if(rewardValue < range.rewardValue && totalGroupItemsPrice >= range.minimumPurchaseamount){
                                        rewardValue = range.rewardValue;
                                        minPurchaseAmount_low = range.minimumPurchaseamount;
                                        minPurchaseAmt = minPurchaseAmount_low;
                                    }
                                }
                                else{
                                    minPurchaseAmount_high = range.minimumPurchaseamount;
                                }
                            }
                            
                            if([range.rangeMode.lowercaseString containsString:@"promotion"]){
                                if(range.rewardValue > 0){
                                    rewardValue = range.rewardValue;
                                }
                            }
                            
                            if([range.rangeMode.lowercaseString containsString:@"condition"]){
                                if(range.rewardValue > 0){
                                    minPurchaseAmount_low = range.minimumPurchaseamount;
                                    minPurchaseAmt = minPurchaseAmount_low;
                                }
                                else{
                                    minPurchaseAmount_high = range.minimumPurchaseamount;
                                }
                            }
                            
                        }//end of range.rangeMode NSNull check...
                        
                    }//end of ranges loop....
                    
                    if (minPurchaseAmount_high <= 0 && totalGroupItemsPrice >= minPurchaseAmount_low) {
                        isToProceed = true;
                    } else if (totalGroupItemsPrice >= minPurchaseAmount_low && totalGroupItemsPrice <= minPurchaseAmount_high) {
                        isToProceed = true;
                    }
                    
                    if(isToProceed){
                        float toBeGiveValue = 1;
                        
                        if(applyOfferModel.repeat){
                            toBeGiveValue = floor(totalGroupItemsPrice/minPurchaseAmt);
                        }
                        
                        if([rewardType.lowercaseString containsString:@"percentage"]){
                            groupTurnOverOffer = (float) ((rewardValue / 100) * totalGroupItemsPrice);
                        }
                        else if([rewardType.lowercaseString containsString:@"flat_rate"]){
                            groupTurnOverOffer = (toBeGiveValue * rewardValue);
                        }
                        else if([rewardType.lowercaseString containsString:@"fixed_rate"]){
                            groupTurnOverOffer = totalGroupItemsPrice - (toBeGiveValue * rewardValue);
                        }

                        [applyGroupTurnOverOffersDic setValue:@(groupTurnOverOffer) forKey:applyOfferModel.offerID];
                        
                        float ratio = 0;
                        if(totalGroupItemsPrice > 0)
                        {
                            ratio = groupTurnOverOffer/totalGroupItemsPrice;
                            //ratio = Utilities.roundFloatValue(ratio,2);
                        }
                        
                        for(NSString * skuIdStr  in grpSkus){
                            double cost = 0;
                            if([itemsSkuIdList containsObject:skuIdStr]){
                                
                                int itemId = (int)[itemsSkuIdList indexOfObject:skuIdStr];
                                cost += ([[itemsUnitPriceList objectAtIndex:itemId] floatValue] * [[itemsIndividualQtyList objectAtIndex:itemId] floatValue]);
                                cost = cost - [[mProductOfferPrice objectAtIndex:itemId] floatValue];
                                cost = cost - [[dealDiscount objectAtIndex:itemId] floatValue];
                                cost = cost * ratio;
                                cost += [[dealDiscount objectAtIndex:itemId] floatValue];
//                                cost = round(cost * 100)/100;
                                [dealDiscount replaceObjectAtIndex:itemId withObject:@(cost)];
                               
//                                cost += [[mProductOfferPrice objectAtIndex:itemId] floatValue];
//                                cost = round(cost * 100)/100;
//                                [mProductOfferPrice replaceObjectAtIndex:itemId withObject:@(cost)];
                            }
                        }
                        groupTurnOverOffer += [[applyDealsAndOfferResponse valueForKey:@"groupTurnOverOfferDiscount"] floatValue];
                        applyDealsAndOfferResponse[@"groupTurnOverOfferDiscount"] = @(groupTurnOverOffer);
                    }//end of isToProceed....
                }
            }
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}



#pragma - mark remove duplicates

-(NSMutableArray*) removeDuplicatesDeals:(NSMutableArray*)dealsListArr dealCategry:(NSString *)dealCategory {
    
    NSMutableArray *dealsList1 = [NSMutableArray new];
    NSMutableArray *dealIds = [NSMutableArray new];
    
    @try {
        for (ApplyDealModel *dealObj in dealsListArr) {
            
            if (![dealIds containsObject:dealObj.dealID] && [dealObj.dealCategory caseInsensitiveCompare:dealCategory] == NSOrderedSame) {
                [dealIds addObject:dealObj.dealID];
                [dealsList1 addObject:dealObj];
            }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    return dealsList1;
    
}

-(NSMutableArray*) removeDuplicatesOffers:(NSMutableArray*)offersListArr offerCategry:(NSString *)offerCategry {
    
    NSMutableArray *offersList1 = [NSMutableArray new];
    NSMutableArray *offerIds = [NSMutableArray new];
    
    @try {
        for (ApplyOfferModel *offerObj in offersListArr) {
            
            if (![offerIds containsObject:offerObj.offerID] && [offerObj.offerCategory caseInsensitiveCompare:offerCategry] == NSOrderedSame) {
                [offerIds addObject:offerObj.offerID];
                [offersList1 addObject:offerObj];
            }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    return offersList1;
    
}

-(BOOL)checkOneArray:(NSMutableArray *)array1 containsAllIn:(NSMutableArray *)array2{
    BOOL status = FALSE;
    for (int i = 0; i < array2.count; i++) {
        if ([array1 containsObject:array2[i]]) {
            status = TRUE;
        }
        else {
            status = FALSE;
            break;
        }
    }
    return status;
}

-(NSMutableArray *)findDuplicates:(NSMutableArray *)duplicatesList {
    NSMutableArray *listToCheck = [NSMutableArray new];
    NSMutableArray *setToReturn = [NSMutableArray new];
    
    for (NSString *yourInt in duplicatesList) {
        if ([listToCheck containsObject:yourInt]) {
            [setToReturn addObject:yourInt];
        }
        else {
            [listToCheck addObject:yourInt];
        }
    }
    return setToReturn;
    
}

-(NSMutableArray *)getChoppedArrayListFor:(NSMutableArray *)tempList with:(int)noCount {
    NSMutableArray *parts = [NSMutableArray new];
    int N = (int)tempList.count;
    for (int i = 0; i < N; i += noCount) {
        @try {
            int maxSubSize = 0;
            if (MIN(N, i + noCount) <= N) {
                maxSubSize = MIN(N, i + noCount);
            }
            else {
                maxSubSize = N - 1;
            }
            
            [parts addObject:[[NSMutableArray alloc] initWithArray:[tempList subarrayWithRange:NSMakeRange(i, maxSubSize)]]];
            
        }
        @catch (NSException *exception) {
            NSLog(@"%@",exception.description);
            NSMutableArray *tempExprr = [NSMutableArray new];
            for (int j=i; j<N; j++) {
                [tempExprr addObject:tempList[j]];
            }
            [parts addObject:tempExprr];
        }
        //        @finally {
        //            return parts;
        //        }
    }
    return parts;
}

-(float)getSkuCountFromCart:(NSString *)skuID {
    float qty = 0;
    int index = (int)[itemsSkuIdList indexOfObject:skuID];
    if (index != -1 && ![itemsStatusList[index] isEqualToString:@"void"]) {
        qty = [itemsIndividualQtyList[[itemsSkuIdList indexOfObject:skuID]] floatValue];
    }
    return qty;
    
}

-(void) enforceDeals {
    @try {
        
        //        Collections.sort(dealsList, ApplyDeal.minimumPurchaseAmount);
        dealsList = [self sortTheArray:dealsList withKey:@"minimumPurchaseAmt" isAscending:NO];
        BOOL highestTurnOverOffer = false;
        for (int p = 0; p < [[applyDealsAndOfferResponse valueForKey:@"availableDeals"] count]; p++) {
            
            if ([itemsStatusList[p] containsString:@"void"]) {
                continue;
            } else {
                BOOL turnOverTest = false;
                for (ApplyDealModel *applyDeal in dealsList) {
                    if ([(applyDeal.dealCategory).lowercaseString containsString:@"turn_over"]) {
                        DealRangesModel*rangeModel =  (applyDeal.rangeList)[0];
                        if (rangeModel.minimumPurchaseamount_float <= mtotalBill) {
                            turnOverTest = true;
                            NSArray *dealsSkuids = [applyDeal.dealSkus componentsSeparatedByString:@","];
                            float toGiveDealQty = floor(mtotalBill/rangeModel.minimumPurchaseamount_float);
                            float cartQty = 0;
                            for (NSString *string in dealsSkuids) {
                                if([itemsSkuIdList containsObject:string]){
                                    if (!([itemsStatusList[[itemsSkuIdList indexOfObject:string]] containsString:@"void"]))
                                        
                                        cartQty += [itemsIndividualQtyList[[itemsSkuIdList indexOfObject:string]] floatValue];
                                }
                            }
                            if(cartQty == 0){
                                [applyDealsAndOfferResponse setValue:applyDeal.dealSkus forKey:@"turnOverFreeItem"];
                                
                                
                                NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                                
                                for (NSString *str in [applyDeal.dealSkus componentsSeparatedByString:@","]) {
                                    
                                    NSString *desc = [self getSkuDescriptionFor:str];
                                    [dealSkusDescArr addObject:desc];
                                }
                                [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"turnOverFreeItemDesc"];
                                return;
                            }
                            else {
                                if(cartQty < toGiveDealQty){
                                    [applyDealsAndOfferResponse setValue:applyDeal.dealSkus forKey:@"turnOverFreeItem"];
                                    NSMutableArray *dealSkusDescArr = [NSMutableArray new];
                                    
                                    for (NSString *str in [applyDeal.dealSkus componentsSeparatedByString:@","]) {
                                        
                                        NSString *desc = [self getSkuDescriptionFor:str];
                                        [dealSkusDescArr addObject:desc];
                                    }
                                    [applyDealsAndOfferResponse setValue:dealSkusDescArr forKey:@"turnOverFreeItemDesc"];
                                    return;
                                }
                                else {
                                    highestTurnOverOffer = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                if(highestTurnOverOffer){
                    break;
                }
            }
        }
    } @catch (NSException *e) {
        // TODO Auto-generated catch block
    }
    //        return true;
}

- (void) calculateTotalPrice {
    float totalDealOfferPrice = 0;
    for (int i = 0; i < mProductOfferPrice.count; i++) {
        totalDealOfferPrice += [mProductOfferPrice[i] floatValue];
    }
    for (int i = 0; i < dealDiscount.count; i++) {
        totalDealOfferPrice += [dealDiscount[i] floatValue];
    }
    mtotalBill = mtotalBill - totalDealOfferPrice;
}


-(NSMutableArray *)sortTheArray:(NSMutableArray *)inputArray withKey:(NSString *)sortKey isAscending:(BOOL)ascending{
    
    // @try {
    NSArray *sortedArray;
    if (ascending) {
        NSSortDescriptor *sortDescriptor;
        sortDescriptor = [[NSSortDescriptor alloc] initWithKey:sortKey
                                                     ascending:YES];
        NSArray *sortDescriptors = @[sortDescriptor];
        sortedArray = [inputArray sortedArrayUsingDescriptors:sortDescriptors];
        
    }
    else {
        NSSortDescriptor *sortDescriptor;
        sortDescriptor = [[NSSortDescriptor alloc] initWithKey:sortKey
                                                     ascending:NO];
        NSArray *sortDescriptors = @[sortDescriptor];
        sortedArray = [inputArray sortedArrayUsingDescriptors:sortDescriptors];
        
    }
    
    return [NSMutableArray arrayWithArray:sortedArray];
    
    //    } @catch (NSException *exception) {
    //        NSLog(@"%@",exception);
    //    } @finally {
    //
    //
    //    }
}

//-(NSMutableArray *)getGroupsForSkuId:(NSString *)skuIDStr {
//
//    NSMutableArray *groupIds = [NSMutableArray new];
//
//     NSString *getGroupsQry = [NSString stringWithFormat:@"select distinct(group_id) from groups_child where sku_Id = '%@'",skuIDStr];
//
//   // NSString *getGroupsQry =[NSString stringWithFormat:@"select distinct(group_id) from groups_child where sku_Id IN ('%@%@)",[cartItemsList componentsJoinedByString:@"','"],@"'"] ;
//
//    const char *selectGroupQry = [getGroupsQry UTF8String] ;
//
//    if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
//        //                int count = sqlite3_column_count(selectStmt);
//        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
//            NSString *groupId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
//            [groupIds addObject:groupId];
//        }
//    }
//    return groupIds;
//}

-(NSMutableArray *)getGroupsForSkuId:(NSArray *)cartItemsList {
    
    NSMutableArray *groupIds = [NSMutableArray new];
    
    // NSString *getGroupsQry = [NSString stringWithFormat:@"select distinct(group_id) from groups_child where sku_Id = '%@'",skuIDStr];
    
    NSString *getGroupsQry =
    [NSString stringWithFormat:@"select distinct(group_id) from groups_child where sku_Id IN ('%@%@)",[cartItemsList componentsJoinedByString:@"','"],@"'"] ;
    
    const char *selectGroupQry = getGroupsQry.UTF8String ;
    
    if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
        //                int count = sqlite3_column_count(selectStmt);
        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
            NSString *groupId = @((char *)sqlite3_column_text(selectStmt, 0));
            [groupIds addObject:groupId];
        }
    }
    return groupIds;
}

-(NSMutableArray *)getSkuidsForGroupId:(NSString *)groupIdStr cartItemsList:(NSArray *)cartItemsList{
    
    NSMutableArray *skuIds = [NSMutableArray new];
    
    //  NSString *getGroupsQry = [NSString stringWithFormat:@"select distinct(sku_Id) from groups_child where group_id = '%@' and status=1",groupIdStr];
    
    NSString *getGroupsQry =
    [NSString stringWithFormat:@"select distinct(sku_Id) from groups_child where group_id = '%@' and status=1 and sku_Id IN ('%@%@)",groupIdStr,[cartItemsList componentsJoinedByString:@"','"],@"'"] ;
    
    
    const char *selectGroupQry = getGroupsQry.UTF8String ;
    
    if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
        offersDic = [[NSMutableDictionary alloc]init];
        //                int count = sqlite3_column_count(selectStmt);
        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
            NSString *skuIdStr = @((char *)sqlite3_column_text(selectStmt, 0));
            [skuIds addObject:skuIdStr];
        }
    }
    return skuIds;
}

-(NSMutableArray *)getDealSkuidsForGroupId:(NSString *)groupIdStr{
    
    NSMutableArray *skuIds = [NSMutableArray new];
    
    NSString *getGroupsQry = [NSString stringWithFormat:@"select distinct(sku_Id) from groups_child where group_id = '%@' and status=1",groupIdStr];
    
    //NSString *getGroupsQry =
    //  [NSString stringWithFormat:@"select distinct(sku_Id) from groups_child where group_id = '%@' and status=1 and sku_Id IN ('%@%@)",groupIdStr,[cartItemsList componentsJoinedByString:@"','"],@"'"] ;
    
    
    const char *selectGroupQry = getGroupsQry.UTF8String ;
    
    if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
        offersDic = [[NSMutableDictionary alloc]init];
        //                int count = sqlite3_column_count(selectStmt);
        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
            NSString *skuIdStr = @((char *)sqlite3_column_text(selectStmt, 0));
            [skuIds addObject:skuIdStr];
        }
    }
    return skuIds;
}


#pragma -mark check the availability of item in groups
-(BOOL)checkItemAvailabilityInGroup:(NSString*)groupId skuId:(NSString*)skuId {
    BOOL status = false;
    
    @try {
        NSString *getGroupsQry = [NSString stringWithFormat:@"select distinct(sku_Id) from groups_child where group_id = '%@' and sku_Id = '%@' and status=1",groupId,skuId];
        
        
        const char *selectGroupQry = getGroupsQry.UTF8String ;
        
        if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
            // offersDic = [[NSMutableDictionary alloc]init];
            //                int count = sqlite3_column_count(selectStmt);
            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                NSString *skuIdStr = @((char *)sqlite3_column_text(selectStmt, 0));
                status = true;
                // [skuIds addObject:skuIdStr];
            }
        }
        
    } @catch (NSException *exception) {
        
        
    } @finally {
        
    }
    return status;
}

-(void)updateBillingItems:(NSArray *)items sku_id:(NSString *)bill_id {
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            char *errMsg;
            const char *sqlStatement = "create table if not exists billing_items (bill_item_id int, bill_id text, sku_id text,item_name text,quantity float,item_total_price double,tax_code text,tax_value text,status text,plu_code text, edited_price double,PRIMARY KEY (bill_item_id))";
            
            if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                //                NSLog(@"Success");
                //
            }
            else {
                
                return;
            }
            
        }
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                char *sqliteErr;
                
                sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                
                const char *sqlStatement;
                
                
                sqlStatement = "insert into billing_items(bill_item_id, bill_id,sku_id,item_name,quantity,item_total_price,tax_code,tax_value,status,plu_code,edited_price) Values(?,?,?,?,?,?,?,?,?,?,?)";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    const char *sqlStatement = "select bill_item_id from billing_items order by bill_item_id DESC LIMIT 1";
                    
                    NSString *item_id;
                    BOOL  itemIdExists = FALSE;
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        if (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            item_id = @((char *)sqlite3_column_text(selectStmt, 0));
                            item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                            itemIdExists = TRUE;
                            
                            
                        }
                        else {
                            //int random = arc4random_uniform(90000)+10000;
                            item_id = [NSString stringWithFormat:@"%d",1];
                        }
                        sqlite3_finalize(selectStmt);
                    }
                    
                    
                    
                    
                    for (int i=0; i<items.count; i++) {
                        
                        NSDictionary *temp = items[i] ;
                        
                        sqlite3_bind_int(insertStmt, 1, item_id.intValue);
                        item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                        sqlite3_bind_text(insertStmt, 2,  bill_id.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 3,  [NSString stringWithFormat:@"%@",temp[@"sku_id"]].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 4,  [temp[@"item_name"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(insertStmt, 5, [temp[@"quantity"] floatValue]);
                        sqlite3_bind_double(insertStmt, 6, [temp[@"item_total_price"] floatValue]);
                        
                        sqlite3_bind_text(insertStmt, 7,  [NSString stringWithFormat:@"%d",[temp[@"taxCode"] intValue]].UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 8,  [temp[@"taxRate"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,9,  [temp[@"status"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,10,  [temp[PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(insertStmt, 11, [temp[EDITED_PRICE] floatValue]);
                        
                        
                        if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                            
                            //                            NSLog(@"inserted");
                            
                        }
                        else {
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        }
                        
                        
                        sqlite3_reset(insertStmt);
                        
                    }
                    
                }
                
                sqlite3_finalize(insertStmt);
                sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                
                
            }
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
        return;
    }
}


#pragma -mark save campaign details


-(void)updateDenominations:(NSArray *)denominations billId:(NSString*)billId transaction_id:(NSString *)transaction_id{
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                char *errMsg;
                const char *sqlStatement = "create table if not exists billing_denomination (bill_id text,cash_denomination text,paid_denom_no text,paid_amount text,return_denom_no text,return_amount text,date text,transaction_id text)";
                
                if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                    == SQLITE_OK) {
                    
                    //                    NSLog(@"Success");
                    
                }
                else {
                    NSLog(@"%s",errMsg);
                }
                
            }
            
        }
        
        
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                char *sqliteErr;
                
                sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                
                const char *sqlStatement;
                
                
                sqlStatement = "insert into billing_denomination(bill_id, cash_denomination,paid_denom_no,paid_amount,return_denom_no,return_amount,date,transaction_id) Values(?,?,?,?,?,?,?,?)";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    for (int i=0; i<denominations.count; i++) {
                        
                        NSDictionary *temp = denominations[i];
                        
                        sqlite3_bind_text(insertStmt, 1,  billId.UTF8String, -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 2,  [[temp valueForKey:@"denomination"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 3,  [[temp valueForKey:@"paidDenominationNo"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 4,  [[temp valueForKey:@"paidAmount"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 5,  [[temp valueForKey:@"returnDenominationNo"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 6,  [[temp valueForKey:@"returnAmount"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 7,  [[temp valueForKey:@"billDate"] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(insertStmt, 8,  transaction_id.UTF8String, -1, SQLITE_TRANSIENT);
                        
                        
                        
                        if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                            
                            //                            NSLog(@"inserted");
                            
                        }
                        else {
                            NSLog(@"%s",sqliteErr);
                            
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        }
                        
                        //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                        
                        sqlite3_reset(insertStmt);
                        
                        
                    }
                }
                
                sqlite3_finalize(insertStmt);
                sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                
                
            }
            insertStmt = nil;
        }
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
    }
    
}

-(NSString *)updateBilling:(NSString *)billId bill_details:(NSDictionary *)details due:(NSString *)bill_due{
    
    BOOL status = false;
    BOOL deleteStatus = false;
    BOOL deleteTaxStatus = false;
    BOOL deleteItemTaxStatus = false;
    int bill_duration_time;
    int bill_duration_accept_print;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        
        //added by Srinivasulu on 19/04/2018....
        NSString * billPerviousStatusStr = @"";
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            //            NSString * query = [NSString stringWithFormat:@"select * from billing_table where bill_id='%@' and store_location LIKE '%%%@%%'",billId,presentLocation];
            NSString *query = [NSString stringWithFormat:@"select bill_time_duration, bill_time_duration_accept_print, status from billing_table where bill_id='%@' and store_location LIKE '%%%@%%'",billId,presentLocation];
            
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    //                    bill_duration_time = @(sqlite3_column_int(selectStmt, 24));
                    //                    bill_duration_accept_print = @(sqlite3_column_int(selectStmt, 25));
                    //                    //added by Srinivasulu on 19/04/2018....
                    //                    billPerviousStatusStr = @((char *)sqlite3_column_text(selectStmt,10));
                    
                    if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt,0))
                        bill_duration_time = sqlite3_column_int(selectStmt, 0);
                    
                    if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                        bill_duration_accept_print = sqlite3_column_int(selectStmt, 1);
                    
                    if((sqlite3_column_text(selectStmt, 2) != nil) && (char *)sqlite3_column_text(selectStmt, 2))
                        billPerviousStatusStr = @((char *)sqlite3_column_text(selectStmt, 2));
                }
                sqlite3_reset(selectStmt);
                
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
                return nil;
            }
            
            sqlite3_close(database);
        }
        
        int presentBillDurationTime = [WebServiceUtility calculateNumberOfSecondsfor:[details valueForKey:SCAN_START_TIME] and:[details valueForKey:SCAN_END_TIME]];
        int presentBillDurationAcceptPrintTime = [WebServiceUtility calculateNumberOfSecondsfor:[details valueForKey:SCAN_END_TIME] and:[details valueForKey:PRINT_TIME]];
        deleteStatus = [self deleteBillItems:billId];
        deleteTaxStatus = [self deleteBillTaxes:billId];
        deleteItemTaxStatus = [self deleteBillItemTaxes:billId];
        [self deleteBillItemDiscounts:billId];
        if (deleteStatus && deleteTaxStatus && deleteItemTaxStatus) {
            
            if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
                
                NSString *query = [NSString stringWithFormat:@"update billing_table SET due_amount='%@',status='%@',total_price='%@',cashier_id='%@',counter_ID='%@',Total_discount='%@',discount_type='%@',discount_type_id='%@',tax='%@',email_id='%@',phone_number='%@',customer_name='%@',shift_id='%@', scan_end_time='%@', bill_time_duration='%d', bill_time_duration_accept_print='%d' where bill_id='%@'",[NSString stringWithFormat:@"%.2f",bill_due.floatValue],[details valueForKey:@"status"],[details valueForKey:@"totalPrice"],[details valueForKey:CASHIER_ID],[details valueForKey:COUNTER],[details valueForKey:TOTAL_BILL_DISCOUNT],[details valueForKey:DISCOUNT_TYPE],[details valueForKey:DISCOUNT_TYPE_ID],[details valueForKey:@"tax"],[details valueForKey:@"emailId"],[details valueForKey:@"phoneNumber"],@"",[details valueForKey:SHIFT_ID], [details valueForKey:SCAN_END_TIME],(bill_duration_time + presentBillDurationTime),(bill_duration_accept_print + presentBillDurationAcceptPrintTime),billId];
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    if (sqlite3_step(insertStmt) == SQLITE_DONE) {
                        
                        status = true;
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                        billId = @"";
                        
                    }
                    
                    sqlite3_finalize(insertStmt);
                    insertStmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
                if (status) {
                    
                    NSString *transaction_id = [self saveTransactions:billId transactionDetails:details transactionType:@""];
                    // if ([transaction_id length]>0) {
                    [self saveBillingItems:[details valueForKey:@"billItems"] sku_id:billId];
                    [self updateDenominations:[details valueForKey:@"denominations"] billId:billId transaction_id:transaction_id];
                    [self saveTaxDataInBilling:details billId:billId];
                    [self saveItemTaxDataInBilling:details billId:billId];
                    [self saveItemCampaignDetails:[details valueForKey:@"billDiscounts"] billId:billId];
                    
                    
                    
                    
                    //added by Srinivasulu on 19/04/2018....
                    if([billPerviousStatusStr.lowercaseString containsString:DRAFT]){
                        
                        dispatch_async(dispatch_get_main_queue(), ^{
                            
                            [self reduceTheBillingItemsStock:[details valueForKey:BILL_ITEMS] stockUpdationType:REDUCE];
                        });
                    }
                    //upto here on 19/04/2018....
                    
                    
                    // }
                    if([details valueForKey:kSerialBillId] && isCustomerBillId)
                        return [details valueForKey:kSerialBillId];
                    else
                        return billId;
                    
                }
            }
        }
        else {
            billId = @"";
        }
        
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    @finally {
        sqlite3_close(database);
        deleteStmt = nil;
        selectStmt = nil;
    }
    
    return billId;
}

-(BOOL)deleteBillItems:(NSString *)billId {
    BOOL status = false;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                NSString * query = [NSString stringWithFormat:@"delete from billing_items where bill_id='%@'",billId];
                
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        NSLog(@"%s",sqlite3_errmsg(database));
                        status = NO;
                        // NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        status = YES;
                    }
                    sqlite3_reset(deleteStmt);
                    sqlite3_finalize(deleteStmt);
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database));
                    
                }
                deleteStmt = nil;
                
            }
        }
    }
    @catch (NSException *exception) {
        status = false;
        NSLog(@"Exception %@",exception);
    }
    @finally {
        
        sqlite3_close(database);
        
    }
    return status;
}

-(BOOL)deleteBillTaxes:(NSString *)billId {
    BOOL status = false;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                NSString *query = [NSString stringWithFormat:@"delete from billing_taxes where bill_id='%@'",billId];
                
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        NSLog(@"%s",sqlite3_errmsg(database));
                        status = NO;
                        // NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        status = YES;
                    }
                    sqlite3_reset(deleteStmt);
                    sqlite3_finalize(deleteStmt);
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database));
                    
                }
                deleteStmt = nil;
                
            }
        }
    }
    @catch (NSException *exception) {
        status = false;
        NSLog(@"Exception %@",exception);
    }
    @finally {
        
        sqlite3_close(database);
        
    }
    return status;
}

-(BOOL)deleteBillItemTaxes:(NSString *)billId {
    BOOL status = false;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                NSString *query = [NSString stringWithFormat:@"delete from billing_item_taxes where bill_id='%@'",billId];
                
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        NSLog(@"%s",sqlite3_errmsg(database));
                        status = NO;
                        // NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        status = YES;
                    }
                    sqlite3_reset(deleteStmt);
                    sqlite3_finalize(deleteStmt);
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database));
                    
                }
                deleteStmt = nil;
                
            }
        }
    }
    @catch (NSException *exception) {
        status = false;
        NSLog(@"Exception %@",exception);
    }
    @finally {
        
        sqlite3_close(database);
        
    }
    return status;
}

-(BOOL)deleteBillItemDiscounts:(NSString *)billId {
    BOOL status = false;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    @try {
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (deleteStmt == nil) {
                NSString *query = [NSString stringWithFormat:@"delete from billing_discounts where bill_id='%@'",billId];
                
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &deleteStmt, NULL) == SQLITE_OK) {
                    
                    if(SQLITE_DONE != sqlite3_step(deleteStmt)){
                        NSLog(@"%s",sqlite3_errmsg(database));
                        status = NO;
                        // NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(database));
                    }
                    else {
                        status = YES;
                    }
                    sqlite3_reset(deleteStmt);
                    sqlite3_finalize(deleteStmt);
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database));
                    
                }
                deleteStmt = nil;
                
            }
        }
    }
    @catch (NSException *exception) {
        status = false;
        NSLog(@"Exception %@",exception);
    }
    @finally {
        
        sqlite3_close(database);
        
    }
    return status;
}



- (BOOL)saveExchangedItems:(NSArray *)items bill_id:(NSString *)bill_id {
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL exchangeItemStatus = FALSE;
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            char *errMsg;
            const char *sqlStatement = "create table if not exists exchange_items (s_no int, bill_id text, sku_id text,item_name text,quantity float,price double,cost double,date_and_time text,counter_id text,reason text,exchanged_bill_id text,status text,tax_code text, tax_value double, plu_code text)";
            
            if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                //                NSLog(@"Success");
                
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(database));
                
                return exchangeItemStatus;
            }
            
        }
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                char *sqliteErr;
                
                sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                
                const char *sqlStatement;
                
                
                sqlStatement = "insert into exchange_items(s_no, bill_id,sku_id,item_name,quantity,price,cost,date_and_time,counter_id,reason,exchanged_bill_id,status,tax_code,tax_value,plu_code) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    const char *sqlStatement = "select s_no from exchange_items order by s_no DESC LIMIT 1";
                    
                    NSString *item_id;
                    BOOL  itemIdExists = FALSE;
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        if (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            item_id = @((char *)sqlite3_column_text(selectStmt, 0));
                            item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                            itemIdExists = TRUE;
                            
                            
                        }
                        else {
                            //int random = arc4random_uniform(90000)+10000;
                            item_id = [NSString stringWithFormat:@"%d",1];
                        }
                        sqlite3_finalize(selectStmt);
                    }
                    
                    
                    
                    
                    for (int i=0; i<items.count; i++) {
                        
                        NSDictionary *temp = items[i] ;
                        
                        sqlite3_bind_int(insertStmt, 1, item_id.intValue);
                        item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                        sqlite3_bind_text(insertStmt, 2,  [[temp valueForKey:@"bill_id"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 3,  [[temp valueForKey:SKU_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 4,  [[temp valueForKey:ITEM_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(insertStmt, 5, [[temp valueForKey:RETURN_QUANTITY] floatValue]);
                        sqlite3_bind_double(insertStmt, 6, [[temp valueForKey:ITEM_UNIT_PRICE] floatValue]);
                        
                        sqlite3_bind_double(insertStmt, 7, [[temp valueForKey:COST] floatValue]);
                        sqlite3_bind_text(insertStmt, 8,  [[temp valueForKey:@"bill_date"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,9,  [[temp valueForKey:@"counter_id"] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(insertStmt,10,  [[temp valueForKey:@"reason"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,11,  [[temp valueForKey:@"exchanged_bill_id"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,12,  [[temp valueForKey:STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,13,  [[temp valueForKey:TAX_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(insertStmt, 14, [[temp valueForKey:TAX_RATE_STR] floatValue]);
                        sqlite3_bind_text(insertStmt,15,  [[temp valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        
                        if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                            
                            //                            NSLog(@"inserted");
                            exchangeItemStatus = TRUE;
                            
                        }
                        else {
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        }
                        
                        //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                        
                        sqlite3_reset(insertStmt);
                        
                    }
                    
                }
                sqlite3_finalize(insertStmt);
                sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                
                
            }
            insertStmt = nil;
        }
        
        //added by Srinivauslu on 19/04/2018....
        
        if(exchangeItemStatus){
            
            dispatch_async(dispatch_get_main_queue(), ^{
                [self reduceTheBillingItemsStock:items stockUpdationType:INCREASE];
            });
        }
        
        //upto here on 19/04/2018....
        
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
        return exchangeItemStatus;
    }
}

- (BOOL)saveReturnedItems:(NSArray *)items bill_id:(NSString *)bill_id {
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL returnItemStatus = FALSE;
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            char *errMsg;
            const char *sqlStatement = "create table if not exists return_items (s_no int, bill_id text, sku_id text,item_name text,quantity float,price double,cost double,date_and_time text,counter_id text,reason text,status text, tax_code text, tax_value double, plu_code text)";
            
            if (sqlite3_exec(database, sqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                //                NSLog(@"Success");
                
            }
            else {
                
                return returnItemStatus;
            }
            
        }
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            if (insertStmt == nil) {
                char *sqliteErr;
                
                sqlite3_exec(database, "BEGIN TRANSACTION", NULL, NULL, &sqliteErr);
                
                const char *sqlStatement;
                
                
                sqlStatement = "insert into return_items(s_no, bill_id,sku_id,item_name,quantity,price,cost,date_and_time,counter_id,reason,status,tax_code,tax_value,plu_code) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                    
                    const char *sqlStatement = "select s_no from return_items order by s_no DESC LIMIT 1";
                    
                    NSString *item_id;
                    BOOL  itemIdExists = FALSE;
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        if (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            item_id = @((char *)sqlite3_column_text(selectStmt, 0));
                            item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                            itemIdExists = TRUE;
                            
                            
                        }
                        else {
                            //int random = arc4random_uniform(90000)+10000;
                            item_id = [NSString stringWithFormat:@"%d",1];
                        }
                        sqlite3_finalize(selectStmt);
                    }
                    
                    
                    
                    
                    for (int i=0; i<items.count; i++) {
                        
                        NSDictionary *temp = items[i] ;
                        
                        sqlite3_bind_int(insertStmt, 1, item_id.intValue);
                        item_id = [NSString stringWithFormat:@"%d",item_id.intValue+1];
                        sqlite3_bind_text(insertStmt, 2,  [[temp valueForKey:@"bill_id"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 3,  [[temp valueForKey:SKU_ID] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt, 4,  [[temp valueForKey:ITEM_NAME] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(insertStmt, 5, [[temp valueForKey:QUANTITY] floatValue]);
                        sqlite3_bind_double(insertStmt, 6, [[temp valueForKey:ITEM_UNIT_PRICE] floatValue]);
                        
                        sqlite3_bind_double(insertStmt, 7, [[temp valueForKey:COST] floatValue]);
                        sqlite3_bind_text(insertStmt, 8,  [[temp valueForKey:@"bill_date"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,9,  [[temp valueForKey:@"counter_id"] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        sqlite3_bind_text(insertStmt,10,  [[temp valueForKey:@"reason"] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,11,  [[temp valueForKey:STATUS] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_text(insertStmt,12,  [[temp valueForKey:TAX_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        sqlite3_bind_double(insertStmt, 13, [[temp valueForKey:TAX_RATE_STR] floatValue]);
                        sqlite3_bind_text(insertStmt,14,  [[temp valueForKey:PLU_CODE] UTF8String], -1, SQLITE_TRANSIENT);
                        
                        
                        if (sqlite3_step(insertStmt)==SQLITE_DONE) {
                            
                            //                            NSLog(@"inserted");
                            returnItemStatus = TRUE;
                            
                        }
                        else {
                            NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(database));
                        }
                        
                        //                    if(SQLITE_DONE != sqlite3_step(insertStmt))
                        
                        sqlite3_reset(insertStmt);
                        
                    }
                    
                }
                sqlite3_finalize(insertStmt);
                sqlite3_exec(database, "END TRANSACTION", NULL, NULL, &sqliteErr);
                
                
            }
            insertStmt = nil;
        }
        
        
        //added by Srinivauslu on 19/04/2018....
        
        if(returnItemStatus){
            
            dispatch_async(dispatch_get_main_queue(), ^{
                [self reduceTheBillingItemsStock:items stockUpdationType:INCREASE];
            });
        }
        
        //upto here on 19/04/2018....
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        
        sqlite3_close(database);
        insertStmt = nil;
        deleteStmt = nil;
        return returnItemStatus;
    }
    
}

-(NSMutableArray *)getExistedOfflineBillIds:(NSString *)searchString {
    
    NSMutableArray *bill_ids = [[NSMutableArray alloc]init];
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            
            NSString *query = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and due_amount='0.00' or due_amount='0.0' and save_status!='Error'",searchString,presentLocation];
            
            //changed by Srinivasulu on 08/07/2017....
            //undo by Srinivasulu on10/07/2017.... reason service modification are done....
            
            if (isCustomerBillId) {
                query = [NSString stringWithFormat:@"select serial_billId from billing_table where serial_billId LIKE '%%%@%%' and store_location LIKE '%%%@%%' and due_amount='0.00' or due_amount='0.0' and save_status!='Error'",searchString,presentLocation];
            }
            
            //upto here on 08/07/2017....
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                    [bill_ids addObject:bill_id];
                    
                }
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
            
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return bill_ids;
    
}




-(NSMutableArray *)getCompletedBills:(NSString *)searchString fromDate:(NSString *)fromDate{
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            if (searchString.length!=0) {
                
                query = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%completed%%' COLLATE NOCASE and due_amount = '0.00' and business_cycle_date LIKE '%%%@%%'",searchString,presentLocation,fromDate];
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        
                        [result addObject:bill_id];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            else {
                
                query = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%ompleted%%' and due_amount='0.00' and business_cycle_date LIKE '%%%@%%'",presentLocation,fromDate];
                
                const char *sqlStatement = query.UTF8String;
                
                NSMutableArray *billIDS = [NSMutableArray new];
                NSMutableArray *totalPrices = [NSMutableArray new];
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        NSString  *totalPrice = @((char *)sqlite3_column_text(selectStmt, 8));
                        [billIDS addObject:bill_id];
                        [totalPrices addObject:totalPrice];
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                for (int i = 0;i < billIDS.count; i++) {
                    NSString *bill_id = billIDS[i];
                    NSMutableDictionary *bills = [[NSMutableDictionary alloc]init];
                    NSString *itransaction_query = [NSString stringWithFormat:@"select * from billing_transactions where bill_id='%@'",bill_id];
                    
                    const char *sqlStatement2 = itransaction_query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement2, -1, &selectStmt, NULL) == SQLITE_OK) {
                        
                        float cashTotal = 0.0f;
                        float cardTotal = 0.0f;
                        float sodexoTotal = 0.0f;
                        float ticketTotal = 0.0f;
                        float changeTotal = 0.0f;
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            NSString  *mode_of_payment = @((char *)sqlite3_column_text(selectStmt, 1));
                            NSString  *paid_amt = @((char *)sqlite3_column_text(selectStmt, 6));
                            double change = sqlite3_column_double(selectStmt, 11);
                            if ([mode_of_payment isEqualToString:@"Cash"]) {
                                cashTotal += paid_amt.floatValue;
                            }
                            else if ([mode_of_payment isEqualToString:@"Card"]) {
                                cardTotal += paid_amt.floatValue;
                            }
                            else if ([mode_of_payment isEqualToString:@"Sodexo"]) {
                                sodexoTotal += paid_amt.floatValue;
                            }
                            else if ([mode_of_payment isEqualToString:@"Ticket"]){
                                ticketTotal += paid_amt.floatValue;
                            }
                            changeTotal += change;
                        }
                        sqlite3_finalize(selectStmt);
                        selectStmt = nil;
                        [bills setValue:bill_id forKey:@"bill_id"];
                        [bills setValue:totalPrices[i] forKey:@"total_price"];
                        [bills setValue:[NSString stringWithFormat:@"%.2f",cashTotal] forKey:@"cash_total"];
                        [bills setValue:[NSString stringWithFormat:@"%.2f",cardTotal] forKey:@"card_total"];
                        [bills setValue:[NSString stringWithFormat:@"%.2f",sodexoTotal] forKey:@"sodexo_total"];
                        [bills setValue:[NSString stringWithFormat:@"%.2f",ticketTotal] forKey:@"ticket_total"];
                        [bills setValue:[NSString stringWithFormat:@"%.2f",changeTotal] forKey:@"change_return"];
                        [result addObject:bills];
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                        return nil;
                    }
                    
                }
                if (result.count!=0) {
                    
                    query = [NSString stringWithFormat:@"select count (*) from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%ompleted%%'",presentLocation];
                    const char *sqlStatement = query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            count = sqlite3_column_int(selectStmt, 0);
                            
                            
                            
                        }
                        sqlite3_finalize(selectStmt);
                        selectStmt = nil;
                        
                        [result addObject:[NSString stringWithFormat:@"%d",count]];
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                    }
                    
                }
            }
            
            
            
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
}

-(void)updateBillingStatus:(NSString*)status billId:(NSString *)billId {
    
    BOOL saveStatus = false;
    int printCount = 0;
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    if (status.length==0) {
        
        printCount = [self getPrintCount:billId];
        printCount++;
    }
    
    @try {
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query ;
            if (status.length>0) {
                
                query = [NSString stringWithFormat:@"update billing_table SET status='%@' where bill_id='%@'",status,billId];
            }
            else {
                query = [NSString stringWithFormat:@"update billing_table SET print_count='%d' where bill_id='%@'",printCount,billId];
            }
            
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &insertStmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                if (sqlite3_step(insertStmt) == SQLITE_DONE) {
                    
                    saveStatus = true;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                    billId = @"";
                    
                }
                
                sqlite3_finalize(insertStmt);
                insertStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
            
        }
        
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    @finally {
        sqlite3_close(database);
        deleteStmt = nil;
        selectStmt = nil;
    }
    
}
-(NSArray*)getDenomination:(NSString *)bill_id{
    
    @try {
        NSMutableArray *denomArr = [[NSMutableArray alloc]init];
        
        NSString *denomination_query = [NSString stringWithFormat:@"select * from billing_denomination where bill_id='%@'",bill_id];
        
        const char *sqlStatement1 = denomination_query.UTF8String;
        
        
        if(sqlite3_prepare_v2(database, sqlStatement1, -1, &selectStmt, NULL) == SQLITE_OK) {
            
            
            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                
                
                NSString  *denom = @((char *)sqlite3_column_text(selectStmt, 1));
                
                NSString  *denomNo = @((char *)sqlite3_column_text(selectStmt, 2));
                NSString  *paidAmt = @((char *)sqlite3_column_text(selectStmt, 3));
                NSString  *returnDenomNo = @((char *)sqlite3_column_text(selectStmt, 4));
                NSString  *returnAmt = @((char *)sqlite3_column_text(selectStmt,5));
                NSString  *date = @((char *)sqlite3_column_text(selectStmt,6));
                NSString  *transaction_id = @((char *)sqlite3_column_text(selectStmt, 7));
                
                NSDictionary *temp = @{@"denomination": denom,@"paidDenominationNo": denomNo,@"transactionId": transaction_id,@"billId": bill_id,@"billDate": date,@"paidAmount": paidAmt,@"returnAmount": returnAmt,@"returnDenominationNo": returnDenomNo};
                
                [denomArr addObject:temp];
                
            }
            sqlite3_reset(selectStmt);
            sqlite3_finalize(selectStmt);
            selectStmt = nil;
            
        }
        else {
            NSLog(@"%s",sqlite3_errmsg(database)) ;
        }
        return denomArr;
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
    
}

#pragma -mark get items campaign details

-(NSArray*)getItemsCampaignsInfo:(NSString*)billId {
    
    @try {
        
        
        NSMutableArray *campaignsArr = [[NSMutableArray alloc]init];
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            NSString *denomination_query = [NSString stringWithFormat:@"select * from billing_discounts where bill_id='%@'",billId];
            
            const char *sqlStatement1 = denomination_query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement1, -1, &selectStmt, NULL) == SQLITE_OK) {
                
                
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    
                    NSString  *discType = @((char *)sqlite3_column_text(selectStmt, 1));
                    
                    NSString  *billId = @((char *)sqlite3_column_text(selectStmt, 2));
                    NSString  *discId = @((char *)sqlite3_column_text(selectStmt, 3));
                    NSString  *itemName = @((char *)sqlite3_column_text(selectStmt, 4));
                    NSString  *skuId = @((char *)sqlite3_column_text(selectStmt,5));
                    NSString  *pluCode = @((char *)sqlite3_column_text(selectStmt,6));
                    NSString  *discPrice = @((char *)sqlite3_column_text(selectStmt, 7));
                    NSString  *itemPrice = @((char *)sqlite3_column_text(selectStmt, 8));
                    
                    NSDictionary *temp = @{@"discountType": discType,@"billId": billId,@"discountId": discId,@"itemName": itemName,@"skuId": skuId,PLU_CODE: pluCode,@"discountPrice": discPrice,@"itemPrice": itemPrice};
                    
                    [campaignsArr addObject:temp];
                    
                }
                sqlite3_reset(selectStmt);
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
        return campaignsArr;
        
    } @catch (NSException *exception) {
        NSLog(@"%@",exception);
    } @finally {
        
    }
    
    
}

-(int)getPrintCount:(NSString *)billId {
    
    int count = 0;
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            NSString *denomination_query = [NSString stringWithFormat:@"select print_count from billing_table where bill_id='%@'",billId];
            
            const char *sqlStatement1 = denomination_query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement1, -1, &selectStmt, NULL) == SQLITE_OK) {
                
                
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    count = sqlite3_column_int(selectStmt, 0);
                }
                sqlite3_reset(selectStmt);
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
                
            }
            
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
        return count;
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

#pragma -mark getSkuDetailsservice delegates


-(NSString*)getSkuDescriptionFor:(NSString*)skuId {
    
    NSString *desc = @"";
    
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            //        NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%% %@ %%'",selected_SKID];

            //-*-* //-*-*--5
//            NSString *query = [NSString stringWithFormat:@"select description from sku_master where sku_id= '%@' LIMIT 1",skuId];
            NSString *query = [NSString stringWithFormat:@"select description from sku_price_list where sku_status == 1 and (sku_id= '%@' or plu_code= '%@') LIMIT 1  ",skuId,skuId];

            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    
                    desc = @((char *)sqlite3_column_text(selectStmt, 0));
                    
                }
                
                
                sqlite3_finalize(selectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    
    
    return desc;
}


-(BOOL)checkForFreeItem:(NSArray*)appliedSkus dealSkus:(NSArray*)dealSkus{
    
    BOOL status = false;
    
    @try {
        NSMutableSet *set1 = [[NSMutableSet alloc] initWithArray:appliedSkus];
        NSMutableSet *set2 = [[NSMutableSet alloc] initWithArray:dealSkus];
        
        [set1 intersectSet:set2]; //this will give you only the obejcts that are in both sets
        
        NSArray* result = set1.allObjects;
        
        if (result.count) {
            
            status = true;
        }
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    
    
    return status;
}

-(NSMutableArray*)filterNonVoidedItems:(NSMutableArray*)skuIdList statusList:(NSMutableArray*)statusList {
    
    
    NSMutableArray *resultArr = [NSMutableArray new];
    
    @try {
        for (int i=0; i<skuIdList.count; i++) {
            
            if (![statusList[i] isEqualToString:@"void"]) {
                
                [resultArr addObject:skuIdList[i]];
            }
        }
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
    } @finally {
        
    }
    
    
    return resultArr;
}

#pragma -mark employee specific campaigns fetch

-(NSMutableDictionary *)fetchEmployeeSpecificCampaigns:(CampaignRequestModel *)campaignRequestModel  categoryDetails:(NSDictionary *)skuInfo{
    
    NSMutableDictionary *applyDealsOffersResponse = [NSMutableDictionary new];
    NSString * currentDateStr = [[[WebServiceUtility getCurrentDate] componentsSeparatedByString:@" "] objectAtIndex:0];
    currentDateStr = [currentDateStr stringByReplacingOccurrencesOfString:@"/" withString:@"-"];
    currentDateStr = [self dateToFormatedDate:currentDateStr];
    
    @try {
        
        NSString *department = campaignRequestModel.department;
        NSString *subDepartment = campaignRequestModel.subDepartment;
        
        
        NSMutableArray *discIdsArr = [NSMutableArray new];
        
        NSString *getEmployeeDiscIds =
        [NSString stringWithFormat:@"select discount_id from customer_filter where customer_type = 'EMPLOYEE' and department = '%@' and sub_department = '%@'",department,subDepartment];
        
        const char *selectEmployeeDiscIds = getEmployeeDiscIds.UTF8String ;
        
        if(sqlite3_prepare_v2(database, selectEmployeeDiscIds, -1, &selectStmt, NULL) == SQLITE_OK) {
            //                int count = sqlite3_column_count(selectStmt);
            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                NSString *discId = @((char *)sqlite3_column_text(selectStmt, 0));
                [discIdsArr addObject:discId];
            }
        }
        
        
        if(discIdsArr.count){
            
            int weekDayNumber = [WebServiceUtility getTodayWeekDayNumber];
            
            //-*-* --
            NSString * skuId = campaignRequestModel.skuId;
            NSString * pluCodeStr = campaignRequestModel.pluCodeStr;
            
            
            
            NSMutableString *  availableOffersForItem = [NSMutableString stringWithFormat:@"select o.sell_group_id, o.closed_on, o.offer_start_time, o.offer_end_time, o.offer_Id, o.claim_coupons, o.claim_loyalty_points, o.claim_gift_vouchers, o.offer_category, o.offer_description, o.offer_name, o.sell_products, o.isRepeat, o.allow_multiple_discounts, o.reward_type, o.sell_sku_ids, o.is_combo, o.is_lowest_price_item, o.priority, o.offer_status, o.store_location, o.is_price_based_configuration, o.product_specific_flag, o.start_date, o.end_date, o.product_category, o.product_sub_category from offer o  where o.offer_status = 1 and DATE(substr(o.start_date,1,10)) <= ('%@') and DATE(substr(o.end_date,1,10)) >= ('%@') and day%@='1' and ( o.sell_group_id IN ( select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '%@' ) or  o.offer_Id IN (select product.offer_id from offer_products product where product.plucode='%@') or o.offer_category='turn_over' ) and o.is_customer_specific ='1'  and offerID in ('%@')",currentDateStr,currentDateStr,[NSString stringWithFormat:@"%d",weekDayNumber],skuId,pluCodeStr,discIdsArr];//-*-*
            //            availableOffersForItem = [NSMutableString stringWithFormat:@"select o.sell_group_id, o.closed_on, o.offer_start_time, o.offer_end_time, o.offer_Id, o.claim_coupons, o.claim_loyalty_points, o.claim_gift_vouchers, o.offer_category, o.offer_description, o.offer_name, o.sell_products, o.isRepeat, o.allow_multiple_discounts, o.reward_type, o.sell_sku_ids, o.is_combo, o.is_lowest_price_item, o.priority, o.offer_status, o.store_location, o.is_price_based_configuration,o.priority from offer o where o.offer_status = 1 and DATE(substr(o.start_date,7,4) ||'-' ||substr(o.start_date,4,2) ||'-'||substr(o.start_date,1,2)) <= ('%@') and DATE(substr(o.end_date,7,4) ||'-' ||substr(o.end_date,4,2) ||'-'||substr(o.end_date,1,2)) >= ('%@') and day%@='1' and ( o.sell_group_id IN ( select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '%@' ) or  o.sell_sku_ids like '%@' or o.offer_category='turn_over' ) and o.is_customer_specific ='1'  and offerID in ('%@')",@"",@"",[NSString stringWithFormat:@"%d",weekDayNumber],skuId,skuId,discIdsArr];//-*-*
            
            
            availableOffersForItem = [NSMutableString stringWithFormat:@"select o.sell_group_id, o.closed_on, o.offer_start_time, o.offer_end_time, o.offer_Id, o.claim_coupons, o.claim_loyalty_points, o.claim_gift_vouchers, o.offer_category, o.offer_description, o.offer_name, o.sell_products, o.isRepeat, o.allow_multiple_discounts, o.reward_type, o.sell_sku_ids, o.is_combo, o.is_lowest_price_item, o.priority, o.offer_status, o.store_location, o.is_price_based_configuration, o.product_specific_flag, o.start_date, o.end_date, o.product_category, o.product_sub_category from offer o  where o.offer_status = 1 and DATE(substr(o.start_date,1,10)) <= ('%@') and DATE(substr(o.end_date,1,10)) >= ('%@') and day%@='1' and ((o.sell_group_id IN (select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '%@' ) or  o.offer_Id IN (select product.offer_id from offer_products product where product.plucode='%@') or o.offer_category='turn_over' ", currentDateStr,currentDateStr,[NSString stringWithFormat:@"%d",weekDayNumber],skuId,pluCodeStr];

            NSString * openBracess = @") or (";
            NSString * closeBracess = @"))";
            if ([skuInfo count] && [[skuInfo allKeys] containsObject:skuId]) {
                NSDictionary *categoryAndSubInfo = [skuInfo objectForKey:skuId];
                                
                if ([[categoryAndSubInfo allKeys] containsObject:kcategory]) {
                    
                    NSString * categoryValue = [categoryAndSubInfo valueForKey:kcategory];
                    if(categoryValue.length){
                        [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_category='%@'",openBracess,categoryValue]];
                        openBracess = @"";
                    }
                }
                
                if ([[categoryAndSubInfo allKeys] containsObject:kSubCategory]) {
                    
                   NSString * subCategoryValue = [categoryAndSubInfo valueForKey:kSubCategory];
                    if(subCategoryValue.length){
                        [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_sub_category='%@'",openBracess,subCategoryValue]];
                        openBracess = @"";
                    }
                }
                
                if ([[categoryAndSubInfo allKeys] containsObject:kPrimaryDepartment]) {
                    
                    NSString * departmentValue = [categoryAndSubInfo valueForKey:kPrimaryDepartment];
                    if(departmentValue.length){
                        [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_department='%@'",openBracess,departmentValue]];
                        openBracess = @"";
                    }
                }
                
                if ([[categoryAndSubInfo allKeys] containsObject:kProductBrand]) {
                    
                    NSString * brandValue = [categoryAndSubInfo valueForKey:kProductBrand];
                    [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ brand='%@'",openBracess,brandValue]];
                }
                
                if ([[categoryAndSubInfo allKeys] containsObject:SECTION]) {
                    
                    NSString * sectionValue = [categoryAndSubInfo valueForKey:SECTION];
                    if(sectionValue.length){
                        [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ section='%@'",openBracess,sectionValue]];
                        openBracess = @"";
                    }
                }
            }
            
            if(openBracess.length){
                [availableOffersForItem appendString:closeBracess];
                closeBracess = @"";
            }
            
            [availableOffersForItem appendString:[NSString stringWithFormat:@" %@ and is_customer_specific!='1'",closeBracess]];
            //                    [availableOffersForItem appendString:@") and is_customer_specific='1' order by start_date DESC"];
            
            
            NSMutableArray *fetchedOffersList = [NSMutableArray new];
            const char *selectOffersQry = availableOffersForItem.UTF8String ;
            BOOL offerStatusTime;
            if(sqlite3_prepare_v2(database, selectOffersQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSString * startDate = @((char *)sqlite3_column_text(selectStmt, 24));
                    NSString * endDate = @((char *)sqlite3_column_text(selectStmt, 25));
                    NSString * dealStartTime = @((char *)sqlite3_column_text(selectStmt, 2));
                    NSString * dealEndTime = @((char *)sqlite3_column_text(selectStmt, 3));
                    
                    offerStatusTime = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                    
                    if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                        if (offerStatusTime) {
                            
                            OfferModel *offerModel = [OfferModel new];
                            
                            offerModel.offerStartDate = startDate;
                            offerModel.offerEndDate = endDate;
                            //                            offerModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                            //                            if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                            //                                offerModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                            //                            offerModel.offerStartTime = dealStartTime;
                            //                            offerModel.offerEndTime = dealEndTime;
                            //                            offerModel.offerID = @((char *)sqlite3_column_text(selectStmt, 4));
                            //                            offerModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                            //                            offerModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                            //                            offerModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                            //                            offerModel.offerCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                            //                            offerModel.offerDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                            //                            offerModel.offerName = @((char *)sqlite3_column_text(selectStmt, 10));
                            //                            offerModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                            //                            offerModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                            //                            offerModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                            //                            offerModel.rewardType = @((char *)sqlite3_column_text(selectStmt, 14));
                            //                            offerModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 15));
                            //                            offerModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                            //                            offerModel.lowestPriceItem = sqlite3_column_int(selectStmt, 17) == 1 ? true:false;
                            //                            offerModel.priority_int = sqlite3_column_int(selectStmt, 18);
                            //                            offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 19));
                            //                            offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 20));
                            //                            offerModel.priceBasedConfigurationFlag = sqlite3_column_int(selectStmt, 21) == 1 ? true:false;
                            //                            offerModel.isProductSpecificFlag = sqlite3_column_int(selectStmt, 23) == 1 ? true:false;
//                                offerModel.productCategory = @((char *)sqlite3_column_text(selectStmt, 26));
//                                offerModel.productSubCategory = @((char *)sqlite3_column_text(selectStmt, 27));
                            
                            if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                offerModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                            if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                offerModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                            offerModel.offerStartTime = dealStartTime;
                            offerModel.offerEndTime = dealEndTime;
                            if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                offerModel.offerID = @((char *)sqlite3_column_text(selectStmt, 4));
                            if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt, 5))
                                offerModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                            if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt, 6))
                                offerModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                            if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt, 7))
                                offerModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                            if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt, 8))
                                offerModel.offerCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                            if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt, 9))
                                offerModel.offerDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                            if((sqlite3_column_text(selectStmt, 10) != nil) && (char *)sqlite3_column_text(selectStmt, 10))
                                offerModel.offerName = @((char *)sqlite3_column_text(selectStmt, 10));
                            if((sqlite3_column_text(selectStmt, 11) != nil) && (char *)sqlite3_column_text(selectStmt, 11))
                                offerModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                            if((sqlite3_column_text(selectStmt, 12) != nil) && (char *)sqlite3_column_text(selectStmt, 12))
                                offerModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 13) != nil) && (char *)sqlite3_column_text(selectStmt, 13))
                                offerModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 14) != nil) && (char *)sqlite3_column_text(selectStmt, 14))
                                offerModel.rewardType = @((char *)sqlite3_column_text(selectStmt, 14));
                            if((sqlite3_column_text(selectStmt, 15) != nil) && (char *)sqlite3_column_text(selectStmt, 15))
                                offerModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 15));
                            if((sqlite3_column_text(selectStmt, 16) != nil) && (char *)sqlite3_column_text(selectStmt, 16))
                                offerModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 17) != nil) && (char *)sqlite3_column_text(selectStmt, 17))
                                offerModel.lowestPriceItem = sqlite3_column_int(selectStmt, 17) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 18) != nil) && (char *)sqlite3_column_text(selectStmt, 18))
                                offerModel.priority_int = sqlite3_column_int(selectStmt, 18);
                            if((sqlite3_column_text(selectStmt, 19) != nil) && (char *)sqlite3_column_text(selectStmt, 19))
                                offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 19));
                            if((sqlite3_column_text(selectStmt, 20) != nil) && (char *)sqlite3_column_text(selectStmt, 20))
                                offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 20));
                            if((sqlite3_column_text(selectStmt, 21) != nil) && (char *)sqlite3_column_text(selectStmt, 21))
                                offerModel.priceBasedConfigurationFlag = sqlite3_column_int(selectStmt, 21) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 23) != nil) && (char *)sqlite3_column_text(selectStmt, 23))
                                offerModel.isProductSpecificFlag = sqlite3_column_int(selectStmt, 23) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 26) != nil) && (char *)sqlite3_column_text(selectStmt, 26))
                                offerModel.productCategory = @((char *)sqlite3_column_text(selectStmt, 26));
                            if((sqlite3_column_text(selectStmt, 27) != nil) && (char *)sqlite3_column_text(selectStmt, 27))
                                offerModel.productSubCategory = @((char *)sqlite3_column_text(selectStmt, 27));
                            
                            [fetchedOffersList addObject:offerModel];
                        }
                    }
                }
            }
            
            
            
            
            //                }catch(Exception exception){
            //                    exception.printStackTrace();
            //                }
            
            // List<Deal> dealsInfo = new ArrayList<Deal>();
            // try{
            //                    String availableDealsForItem = " select d.sell_group_id,d.closed_on,d.deal_start_time,d.deal_end_time,d.deal_Id,"
            //                    + " d.claim_coupons,d.claim_loyalty_points,d.claim_gift_vouchers,d.deal_category,d.deal_description,d.deal_name,"
            //                    + " d.sell_products,d.isRepeat,d.allow_multiple_discounts,d.sell_sku_ids,d.is_combo,d.is_lowest_price_item,"
            //                    + " d.priority,d.deal_group_id,d.deal_skus,d.deal_products"
            //                    + " from deal d where d.deal_status = 1 and d.store_location like '%" + billItems.getStoreLocation() + "%' and d.start_date <= '" + todayDate + "' and d.end_date >= '" + todayDate + "'    and  d.day" + dayOfWeek + "=1  "
            //                    + " and ( d.sell_group_id IN ( select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '"+billItems.getSku_id()+"' ) or d.sell_sku_ids like '%"+billItems.getSku_id()+"%'  or " + " d.deal_category='turn_over' ) and deal.isCustomerSpecific ='1' and deal.dealID in ("+discountIdsList+")" ;
            
            //changed by Srinivasulu on 22/02/2018....
            
            NSString   * availableDealsForItem = [NSMutableString stringWithFormat:@"select d.sell_group_id, d.closed_on, d.deal_start_time, d.deal_end_time, d.deal_Id, d.claim_coupons, d.claim_loyalty_points, d.claim_gift_vouchers, d.deal_category, d.deal_description, d.deal_name, d.sell_products, d.isRepeat, d.allow_multiple_discounts, d.sell_sku_ids, d.is_combo, d.is_lowest_price_item, d.priority, d.deal_group_id, d.deal_skus, d.deal_products, d.start_date, d.end_date, d.deal_plu_code, d.sell_plu_code from deal d where d.deal_status = 1 and d.store_location like '%%%@%%' and DATE(substr(d.start_date,1,10)) <= ('%@') and DATE(substr(d.end_date,1,10)) >= ('%@') and day%@='1' and ( d.sell_group_id IN ( select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '%@' ) or d.sell_sku_ids like '%@'  or  d.deal_category='turn_over' ) and d.is_customer_specific ='1'  and deal_ID in ('%@')",presentLocation,currentDateStr,currentDateStr,[NSString stringWithFormat:@"%d",weekDayNumber],skuId,skuId,discIdsArr];//-*-*
            
            NSMutableArray *fetchedDealsList = [NSMutableArray new];
            const char *select_Deal_Qry = availableDealsForItem.UTF8String ;
            BOOL dealStatusTime;
            
            if(sqlite3_prepare_v2(database, select_Deal_Qry, -1, &selectStmt, NULL) == SQLITE_OK) {
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    DealModel *dealModel = [DealModel new];
                    
                    NSString *startDate = @((char *)sqlite3_column_text(selectStmt, 21));
                    NSString *endDate = @((char *)sqlite3_column_text(selectStmt, 22));
                    NSString *dealStartTime = @((char *)sqlite3_column_text(selectStmt, 2));
                    NSString *dealEndTime = @((char *)sqlite3_column_text(selectStmt, 3));
                    
                    dealStatusTime = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                    
                    if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                        if (dealStatusTime) {
                            
                            
                            //                            dealModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                            //                            dealModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                            //                            dealModel.dealStartTime = dealStartTime;
                            //                            dealModel.dealEndDate = dealEndTime;
                            //                            dealModel.dealID = @((char *)sqlite3_column_text(selectStmt, 4));
                            //                            dealModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                            //                            dealModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                            //                            dealModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                            //                            dealModel.dealCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                            //                            dealModel.dealDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                            //                            dealModel.dealName = @((char *)sqlite3_column_text(selectStmt, 10));
                            //                            dealModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                            //                            dealModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                            //                            dealModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                            //                            dealModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 14));
                            //                            dealModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                            //                            dealModel.lowestPriceItem = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                            //                            dealModel.priority_int = sqlite3_column_int(selectStmt, 17);
                            //                            dealModel.dealGroupId = @((char *)sqlite3_column_text(selectStmt, 18));
                            //                            dealModel.dealSkus = @((char *)sqlite3_column_text(selectStmt, 19));
                            //                            dealModel.dealProducts = @((char *)sqlite3_column_text(selectStmt, 20));
                            //                            dealModel.dealPluCode = = @((char *)sqlite3_column_text(selectStmt, 23));
                            //                            dealModel.sellPluCode = = @((char *)sqlite3_column_text(selectStmt, 24));
                            
                            if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                dealModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                            if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                dealModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                            dealModel.dealStartTime = dealStartTime;
                            dealModel.dealEndDate = dealEndTime;
                            if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                dealModel.dealID = @((char *)sqlite3_column_text(selectStmt, 4));
                            if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt, 5))
                                dealModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                            if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt, 6))
                                dealModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                            if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt, 7))
                                dealModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                            if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt, 8))
                                dealModel.dealCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                            if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt, 9))
                                dealModel.dealDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                            if((sqlite3_column_text(selectStmt, 10) != nil) && (char *)sqlite3_column_text(selectStmt, 10))
                                dealModel.dealName = @((char *)sqlite3_column_text(selectStmt, 10));
                            if((sqlite3_column_text(selectStmt, 11) != nil) && (char *)sqlite3_column_text(selectStmt, 11))
                                dealModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                            if((sqlite3_column_text(selectStmt, 12) != nil) && (char *)sqlite3_column_text(selectStmt, 12))
                                dealModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 13) != nil) && (char *)sqlite3_column_text(selectStmt, 13))
                                dealModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 14) != nil) && (char *)sqlite3_column_text(selectStmt, 14))
                                dealModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 14));
                            if((sqlite3_column_text(selectStmt, 15) != nil) && (char *)sqlite3_column_text(selectStmt, 15))
                                dealModel.combo = sqlite3_column_int(selectStmt, 15) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 16) != nil) && (char *)sqlite3_column_text(selectStmt, 16))
                                dealModel.lowestPriceItem = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                            if((sqlite3_column_text(selectStmt, 17) != nil) && (char *)sqlite3_column_text(selectStmt, 17))
                                dealModel.priority_int = sqlite3_column_int(selectStmt, 17);
                            if((sqlite3_column_text(selectStmt, 18) != nil) && (char *)sqlite3_column_text(selectStmt, 18))
                                dealModel.dealGroupId = @((char *)sqlite3_column_text(selectStmt, 18));
                            if((sqlite3_column_text(selectStmt, 19) != nil) && (char *)sqlite3_column_text(selectStmt, 19))
                                dealModel.dealSkus = @((char *)sqlite3_column_text(selectStmt, 19));
                            if((sqlite3_column_text(selectStmt, 20) != nil) && (char *)sqlite3_column_text(selectStmt, 20))
                                dealModel.dealProducts = @((char *)sqlite3_column_text(selectStmt, 20));
                            if((sqlite3_column_text(selectStmt, 23) != nil) && (char *)sqlite3_column_text(selectStmt, 23)){
                                dealModel.dealPluCode = @((char *)sqlite3_column_text(selectStmt, 23));
                                if([dealModel.dealPluCode length])
                                    dealModel.ispluSpecificDeal = true;
                            }
                            if((sqlite3_column_text(selectStmt, 24) != nil) && (char *)sqlite3_column_text(selectStmt, 24)){
                                dealModel.sellPluCode = @((char *)sqlite3_column_text(selectStmt, 24));
                                if([dealModel.sellPluCode length])
                                    dealModel.ispluSpecificDeal = true;
                            }
                            
                            dealModel.dealStartDate = startDate;
                            dealModel.dealEndDate = endDate;
                            
                            [fetchedDealsList addObject:dealModel];
                        }
                    }
                }
            }
            
            applyDealsOffersResponse[@"employeeSpecificDeals"] = fetchedDealsList;
            applyDealsOffersResponse[@"employeeSpecificOffers"] = fetchedOffersList;
            
        }
        
        
    } @catch (NSException *exception) {
        
        
    } @finally {
        
        
    }

    return applyDealsOffersResponse;
}

-(void)fetchCustomerSpecificCampaigns:(CampaignRequestModel *)campaignRequestModel categoryDetails:(NSDictionary *)skuInfo{

//-(NSMutableDictionary *)fetchCustomerSpecificCampaigns:(CampaignRequestModel *)campaignRequestModel  customerDetails:(NSDictionary *)customerDeatilsInfoDic  categoryDetails:(NSDictionary *)skuInfo{

//    NSMutableDictionary * applyDealsOffersResponse = [NSMutableDictionary new];
    NSString * currentDateStr = [[[WebServiceUtility getCurrentDate] componentsSeparatedByString:@" "] objectAtIndex:0];
    currentDateStr = [currentDateStr stringByReplacingOccurrencesOfString:@"/" withString:@"-"];
    currentDateStr = [self dateToFormatedDate:currentDateStr];
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt =nil;
    NSMutableArray * fetchedOffersList = [NSMutableArray new];
    NSMutableArray * fetchedDealsList = [NSMutableArray new];
    @try {
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        NSString * memberShipCategory;
        NSString * customermemberShipCategory = @"";
        NSMutableArray * discIdsArr = [NSMutableArray new];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {

            NSString * memberShipQuery = [NSString stringWithFormat:@"select customer_category from membership_users where  phone_num = '%%%@%%'",campaignRequestModel.phonenumber];
            
            const char * sqlStatement = memberShipQuery.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
              while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
              memberShipCategory = @"";
              
                  if((sqlite3_column_text(localSelectStmt, 0) != nil)  && (char *)sqlite3_column_text(localSelectStmt,0))
                      memberShipCategory = @((char*)sqlite3_column_text(localSelectStmt,0));
              }
            }
            
            
            
            memberShipQuery = [NSString stringWithFormat:@"select category from customers where  phone_number = '%%%@%%'",campaignRequestModel.phonenumber];
            
             sqlStatement = memberShipQuery.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    customermemberShipCategory = @"";
                    
                    if((sqlite3_column_text(localSelectStmt, 0) != nil)  && (char *)sqlite3_column_text(localSelectStmt,0))
                        customermemberShipCategory = @((char*)sqlite3_column_text(localSelectStmt,0));
                }
            }
            
            
            
            NSMutableString * customerFilterQuery = [NSMutableString stringWithFormat:@"select discount_id from customer_filter where  (customer_type != 'EMPLOYEE PREMIUM' and customer_type != 'EMPLOYEE GENERIC')"];

            if(memberShipCategory != nil){
                
                customerFilterQuery = [NSMutableString stringWithFormat:@"%@ and customer_type =  %%%@%%",customerFilterQuery, memberShipCategory];
                
                if(!memberShipCategory.length){
                    customerFilterQuery = [NSMutableString stringWithFormat:@"%@ and customer_type is  null",customerFilterQuery];
                }
            }
            else{
                
                if(customermemberShipCategory.length){
                    customerFilterQuery = [NSMutableString stringWithFormat:@"%@ and customer_type =  %%%@%% and customer_type != 'MEMBERSHIP GOLD'", customerFilterQuery,customermemberShipCategory];//[customerDeatilsInfoDic valueForKey:CUSTOMER_TYPE]
                }
                else{
                    customerFilterQuery = [NSMutableString stringWithFormat:@"%@ and customer_type = '' and customer_type is  null and customer_type != 'MEMBERSHIP GOLD'",customerFilterQuery];
                }
            }
            
            sqlStatement = customerFilterQuery.UTF8String;
            localSelectStmt = nil;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    if((sqlite3_column_text(localSelectStmt, 0) != nil)  && (char *)sqlite3_column_text(localSelectStmt,0))
                    [discIdsArr addObject:@((char*)sqlite3_column_text(localSelectStmt,0))];
                }
                sqlite3_finalize(localSelectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }


            if([discIdsArr count]){
                
                int weekDayNumber = [WebServiceUtility getTodayWeekDayNumber];
                
                NSString * skuId = campaignRequestModel.skuId;
                NSString * pluCodeStr = campaignRequestModel.pluCodeStr;
                
                NSMutableString * availableOffersForItem = [NSMutableString stringWithFormat:@"select o.sell_group_id, o.closed_on, o.offer_start_time, o.offer_end_time, o.offer_Id, o.claim_coupons, o.claim_loyalty_points, o.claim_gift_vouchers, o.offer_category, o.offer_description, o.offer_name, o.sell_products, o.isRepeat, o.allow_multiple_discounts, o.reward_type, o.sell_sku_ids, o.is_combo, o.is_lowest_price_item, o.priority, o.offer_status, o.store_location, o.is_price_based_configuration, o.product_specific_flag, o.start_date, o.end_date, o.product_category, o.product_sub_category from offer o  where o.offer_status = 1 and DATE(substr(o.start_date,1,10)) <= ('%@') and DATE(substr(o.end_date,1,10)) >= ('%@') and day%@='1' and ((o.sell_group_id IN (select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '%@' ) or  o.offer_Id IN (select product.offer_id from offer_products product where product.plucode='%@') or o.offer_category='turn_over' ", currentDateStr,currentDateStr,[NSString stringWithFormat:@"%d",weekDayNumber],skuId,pluCodeStr];
                
                NSString * openBracess = @") or (";
                NSString * closeBracess = @"))";
                if ([skuInfo count] && [[skuInfo allKeys] containsObject:skuId]) {
                    NSDictionary *categoryAndSubInfo = [skuInfo objectForKey:skuId];
                    
                    if ([[categoryAndSubInfo allKeys] containsObject:kcategory]) {
                        
                        NSString * categoryValue = [categoryAndSubInfo valueForKey:kcategory];
                        if(categoryValue.length){
                            [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_category='%@'",openBracess,categoryValue]];
                            openBracess = @"";
                        }
                    }
                    
                    if ([[categoryAndSubInfo allKeys] containsObject:kSubCategory]) {
                        
                        NSString * subCategoryValue = [categoryAndSubInfo valueForKey:kSubCategory];
                        if(subCategoryValue.length){
                            [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_sub_category='%@'",openBracess,subCategoryValue]];
                            openBracess = @"";
                        }
                    }
                    
                    if ([[categoryAndSubInfo allKeys] containsObject:kPrimaryDepartment]) {
                        
                        NSString * departmentValue = [categoryAndSubInfo valueForKey:kPrimaryDepartment];
                        if(departmentValue.length){
                            [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_department='%@'",openBracess,departmentValue]];
                            openBracess = @"";
                        }
                    }
                    
                    if ([[categoryAndSubInfo allKeys] containsObject:kProductBrand]) {
                        
                        NSString * brandValue = [categoryAndSubInfo valueForKey:kProductBrand];
                        [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ brand='%@'",openBracess,brandValue]];
                    }
                    
                    if ([[categoryAndSubInfo allKeys] containsObject:SECTION]) {
                        
                        NSString * sectionValue = [categoryAndSubInfo valueForKey:SECTION];
                        if(sectionValue.length){
                            [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ section='%@'",openBracess,sectionValue]];
                            openBracess = @"";
                        }
                    }
                }
                
                if(openBracess.length){
                    [availableOffersForItem appendString:closeBracess];
                    closeBracess = @"";
                }
                
                [availableOffersForItem appendString:[NSString stringWithFormat:@" %@ and is_customer_specific!='1'",closeBracess]];
                //                    [availableOffersForItem appendString:@") and is_customer_specific='1' order by start_date DESC"];
                
                
                const char *selectOffersQry = availableOffersForItem.UTF8String ;
                BOOL offerStatusTime;
                if(sqlite3_prepare_v2(database, selectOffersQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSString * startDate = @((char *)sqlite3_column_text(selectStmt, 24));
                        NSString * endDate = @((char *)sqlite3_column_text(selectStmt, 25));
                        NSString * dealStartTime = @((char *)sqlite3_column_text(selectStmt, 2));
                        NSString * dealEndTime = @((char *)sqlite3_column_text(selectStmt, 3));
                        
                        offerStatusTime = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                        
                        if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                            if (offerStatusTime) {
                                
                                OfferModel *offerModel = [OfferModel new];
                                
                                offerModel.offerStartDate = startDate;
                                offerModel.offerEndDate = endDate;
                                //                            offerModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                //                            if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                //                                offerModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                //                            offerModel.offerStartTime = dealStartTime;
                                //                            offerModel.offerEndTime = dealEndTime;
                                //                            offerModel.offerID = @((char *)sqlite3_column_text(selectStmt, 4));
                                //                            offerModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                //                            offerModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                //                            offerModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                //                            offerModel.offerCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                //                            offerModel.offerDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                //                            offerModel.offerName = @((char *)sqlite3_column_text(selectStmt, 10));
                                //                            offerModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                //                            offerModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                //                            offerModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                //                            offerModel.rewardType = @((char *)sqlite3_column_text(selectStmt, 14));
                                //                            offerModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 15));
                                //                            offerModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                //                            offerModel.lowestPriceItem = sqlite3_column_int(selectStmt, 17) == 1 ? true:false;
                                //                            offerModel.priority_int = sqlite3_column_int(selectStmt, 18);
                                //                            offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 19));
                                //                            offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 20));
                                //                            offerModel.priceBasedConfigurationFlag = sqlite3_column_int(selectStmt, 21) == 1 ? true:false;
                                //                            offerModel.isProductSpecificFlag = sqlite3_column_int(selectStmt, 23) == 1 ? true:false;
                                //                                offerModel.productCategory = @((char *)sqlite3_column_text(selectStmt, 26));
                                //                                offerModel.productSubCategory = @((char *)sqlite3_column_text(selectStmt, 27));
                                
                                if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                    offerModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                    offerModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                offerModel.offerStartTime = dealStartTime;
                                offerModel.offerEndTime = dealEndTime;
                                if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                    offerModel.offerID = @((char *)sqlite3_column_text(selectStmt, 4));
                                if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt, 5))
                                    offerModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt, 6))
                                    offerModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt, 7))
                                    offerModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt, 8))
                                    offerModel.offerCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt, 9))
                                    offerModel.offerDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                if((sqlite3_column_text(selectStmt, 10) != nil) && (char *)sqlite3_column_text(selectStmt, 10))
                                    offerModel.offerName = @((char *)sqlite3_column_text(selectStmt, 10));
                                if((sqlite3_column_text(selectStmt, 11) != nil) && (char *)sqlite3_column_text(selectStmt, 11))
                                    offerModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                if((sqlite3_column_text(selectStmt, 12) != nil) && (char *)sqlite3_column_text(selectStmt, 12))
                                    offerModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 13) != nil) && (char *)sqlite3_column_text(selectStmt, 13))
                                    offerModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 14) != nil) && (char *)sqlite3_column_text(selectStmt, 14))
                                    offerModel.rewardType = @((char *)sqlite3_column_text(selectStmt, 14));
                                if((sqlite3_column_text(selectStmt, 15) != nil) && (char *)sqlite3_column_text(selectStmt, 15))
                                    offerModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 15));
                                if((sqlite3_column_text(selectStmt, 16) != nil) && (char *)sqlite3_column_text(selectStmt, 16))
                                    offerModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 17) != nil) && (char *)sqlite3_column_text(selectStmt, 17))
                                    offerModel.lowestPriceItem = sqlite3_column_int(selectStmt, 17) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 18) != nil) && (char *)sqlite3_column_text(selectStmt, 18))
                                    offerModel.priority_int = sqlite3_column_int(selectStmt, 18);
                                if((sqlite3_column_text(selectStmt, 19) != nil) && (char *)sqlite3_column_text(selectStmt, 19))
                                    offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 19));
                                if((sqlite3_column_text(selectStmt, 20) != nil) && (char *)sqlite3_column_text(selectStmt, 20))
                                    offerModel.offerStatus = @((char *)sqlite3_column_text(selectStmt, 20));
                                if((sqlite3_column_text(selectStmt, 21) != nil) && (char *)sqlite3_column_text(selectStmt, 21))
                                    offerModel.priceBasedConfigurationFlag = sqlite3_column_int(selectStmt, 21) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 23) != nil) && (char *)sqlite3_column_text(selectStmt, 23))
                                    offerModel.isProductSpecificFlag = sqlite3_column_int(selectStmt, 23) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 26) != nil) && (char *)sqlite3_column_text(selectStmt, 26))
                                    offerModel.productCategory = @((char *)sqlite3_column_text(selectStmt, 26));
                                if((sqlite3_column_text(selectStmt, 27) != nil) && (char *)sqlite3_column_text(selectStmt, 27))
                                    offerModel.productSubCategory = @((char *)sqlite3_column_text(selectStmt, 27));
                                
                                [fetchedOffersList addObject:offerModel];
                            }
                        }
                    }
                }
                
                
                NSString   * availableDealsForItem = [NSMutableString stringWithFormat:@"select d.sell_group_id, d.closed_on, d.deal_start_time, d.deal_end_time, d.deal_Id, d.claim_coupons, d.claim_loyalty_points, d.claim_gift_vouchers, d.deal_category, d.deal_description, d.deal_name, d.sell_products, d.isRepeat, d.allow_multiple_discounts, d.sell_sku_ids, d.is_combo, d.is_lowest_price_item, d.priority, d.deal_group_id, d.deal_skus, d.deal_products, d.start_date, d.end_date, d.deal_plu_code, d.sell_plu_code from deal d where d.deal_status = 1 and d.store_location like '%%%@%%' and DATE(substr(d.start_date,1,10)) <= ('%@') and DATE(substr(d.end_date,1,10)) >= ('%@') and day%@='1' and ( d.sell_group_id IN ( select DISTINCT(gc.group_id) from groups_child gc where gc.sku_Id = '%@' ) or d.sell_sku_ids like '%@'  or  d.deal_category='turn_over' ) and d.is_customer_specific ='1'  and deal_ID in ('%@')",presentLocation,currentDateStr,currentDateStr,[NSString stringWithFormat:@"%d",weekDayNumber],skuId,skuId,discIdsArr];//-*-*
                

                const char *select_Deal_Qry = availableDealsForItem.UTF8String ;
                BOOL dealStatusTime;
                
                if(sqlite3_prepare_v2(database, select_Deal_Qry, -1, &selectStmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        DealModel *dealModel = [DealModel new];
                        
                        NSString *startDate = @((char *)sqlite3_column_text(selectStmt, 21));
                        NSString *endDate = @((char *)sqlite3_column_text(selectStmt, 22));
                        NSString *dealStartTime = @((char *)sqlite3_column_text(selectStmt, 2));
                        NSString *dealEndTime = @((char *)sqlite3_column_text(selectStmt, 3));
                        
                        dealStatusTime = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                        
                        if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                            if (dealStatusTime) {
                                
                                
                                //                            dealModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                //                            dealModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                //                            dealModel.dealStartTime = dealStartTime;
                                //                            dealModel.dealEndDate = dealEndTime;
                                //                            dealModel.dealID = @((char *)sqlite3_column_text(selectStmt, 4));
                                //                            dealModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                //                            dealModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                //                            dealModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                //                            dealModel.dealCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                //                            dealModel.dealDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                //                            dealModel.dealName = @((char *)sqlite3_column_text(selectStmt, 10));
                                //                            dealModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                //                            dealModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                //                            dealModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                //                            dealModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 14));
                                //                            dealModel.combo = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                //                            dealModel.lowestPriceItem = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                //                            dealModel.priority_int = sqlite3_column_int(selectStmt, 17);
                                //                            dealModel.dealGroupId = @((char *)sqlite3_column_text(selectStmt, 18));
                                //                            dealModel.dealSkus = @((char *)sqlite3_column_text(selectStmt, 19));
                                //                            dealModel.dealProducts = @((char *)sqlite3_column_text(selectStmt, 20));
                                //                            dealModel.dealPluCode = = @((char *)sqlite3_column_text(selectStmt, 23));
                                //                            dealModel.sellPluCode = = @((char *)sqlite3_column_text(selectStmt, 24));
                                
                                if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt, 0))
                                    dealModel.sellGroupId = @((char *)sqlite3_column_text(selectStmt, 0));
                                if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt, 1))
                                    dealModel.closedOnStr = @((char *)sqlite3_column_text(selectStmt, 1));
                                dealModel.dealStartTime = dealStartTime;
                                dealModel.dealEndDate = dealEndTime;
                                if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt, 4))
                                    dealModel.dealID = @((char *)sqlite3_column_text(selectStmt, 4));
                                if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt, 5))
                                    dealModel.claimCoupons_int = sqlite3_column_int(selectStmt, 5);
                                if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt, 6))
                                    dealModel.claimLoyaltypoints_int = sqlite3_column_int(selectStmt, 6);
                                if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt, 7))
                                    dealModel.claimgiftvouchers_int = sqlite3_column_int(selectStmt, 7);
                                if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt, 8))
                                    dealModel.dealCategory = @((char *)sqlite3_column_text(selectStmt, 8));
                                if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt, 9))
                                    dealModel.dealDescription = @((char *)sqlite3_column_text(selectStmt, 9));
                                if((sqlite3_column_text(selectStmt, 10) != nil) && (char *)sqlite3_column_text(selectStmt, 10))
                                    dealModel.dealName = @((char *)sqlite3_column_text(selectStmt, 10));
                                if((sqlite3_column_text(selectStmt, 11) != nil) && (char *)sqlite3_column_text(selectStmt, 11))
                                    dealModel.sellProducts = @((char *)sqlite3_column_text(selectStmt, 11));
                                if((sqlite3_column_text(selectStmt, 12) != nil) && (char *)sqlite3_column_text(selectStmt, 12))
                                    dealModel.repeat = sqlite3_column_int(selectStmt, 12) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 13) != nil) && (char *)sqlite3_column_text(selectStmt, 13))
                                    dealModel.allowMultipleDiscounts = sqlite3_column_int(selectStmt, 13) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 14) != nil) && (char *)sqlite3_column_text(selectStmt, 14))
                                    dealModel.sellSkuids = @((char *)sqlite3_column_text(selectStmt, 14));
                                if((sqlite3_column_text(selectStmt, 15) != nil) && (char *)sqlite3_column_text(selectStmt, 15))
                                    dealModel.combo = sqlite3_column_int(selectStmt, 15) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 16) != nil) && (char *)sqlite3_column_text(selectStmt, 16))
                                    dealModel.lowestPriceItem = sqlite3_column_int(selectStmt, 16) == 1 ? true:false;
                                if((sqlite3_column_text(selectStmt, 17) != nil) && (char *)sqlite3_column_text(selectStmt, 17))
                                    dealModel.priority_int = sqlite3_column_int(selectStmt, 17);
                                if((sqlite3_column_text(selectStmt, 18) != nil) && (char *)sqlite3_column_text(selectStmt, 18))
                                    dealModel.dealGroupId = @((char *)sqlite3_column_text(selectStmt, 18));
                                if((sqlite3_column_text(selectStmt, 19) != nil) && (char *)sqlite3_column_text(selectStmt, 19))
                                    dealModel.dealSkus = @((char *)sqlite3_column_text(selectStmt, 19));
                                if((sqlite3_column_text(selectStmt, 20) != nil) && (char *)sqlite3_column_text(selectStmt, 20))
                                    dealModel.dealProducts = @((char *)sqlite3_column_text(selectStmt, 20));
                                if((sqlite3_column_text(selectStmt, 23) != nil) && (char *)sqlite3_column_text(selectStmt, 23)){
                                    dealModel.dealPluCode = @((char *)sqlite3_column_text(selectStmt, 23));
                                    if([dealModel.dealPluCode length])
                                        dealModel.ispluSpecificDeal = true;
                                }
                                if((sqlite3_column_text(selectStmt, 24) != nil) && (char *)sqlite3_column_text(selectStmt, 24)){
                                    dealModel.sellPluCode = @((char *)sqlite3_column_text(selectStmt, 24));
                                    if([dealModel.sellPluCode length])
                                        dealModel.ispluSpecificDeal = true;
                                }
                                
                                dealModel.dealStartDate = startDate;
                                dealModel.dealEndDate = endDate;
                                
                                [fetchedDealsList addObject:dealModel];
                            }
                        }
                    }
                }
            }
        }
        else{
            
        }
//            applyDealsOffersResponse[@"customerSpecificDeals"] = fetchedDealsList;
//            applyDealsOffersResponse[@"customerSpecificOffers"] = fetchedOffersList;
            applyDealsAndOfferResponse[@"customerSpecificDeals"] = fetchedDealsList;
            applyDealsAndOfferResponse[@"customerSpecificOffers"] = fetchedOffersList;

    } @catch (NSException *exception) {
        
    } @finally {
        
//        return applyDealsOffersResponse;
    }
}




-(NSMutableArray*)removeDuplicateObjects:(NSMutableArray*)list {
    
    @try {
        
        NSMutableArray *resultArr = [NSMutableArray new];
        NSMutableArray *idsArr = [NSMutableArray new];
        
        for (id object in list) {
            
            if ([object isKindOfClass:[ApplyOfferModel class]]) {
                
                ApplyOfferModel *offerObj = object;
                if (![idsArr containsObject:offerObj.offerID]) {
                    
                    [idsArr addObject:offerObj.offerID];
                    [resultArr addObject:offerObj];
                    
                }
            }
            else if ([object isKindOfClass:[ApplyDealModel class]]) {
                
                ApplyDealModel *dealObj = object;
                if (![idsArr containsObject:dealObj.dealID]) {
                    
                    [idsArr addObject:dealObj.dealID];
                    [resultArr addObject:dealObj];
                    
                }
            }
        }
        
        return resultArr;
        
    } @catch (NSException *exception) {
        
        
    } @finally {
        
        
    }
}

-(NSMutableArray *)getSKuDetails:(NSString *)product {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            
            //           query = [NSString stringWithFormat: @"select DISTINCT(sku.sku_Id), sku.description from sku_master as sku where sku.product_Id  ='%@'",product];
            
            //            query = [NSString stringWithFormat: @"select DISTINCT(sku.sku_Id), sku.description from sku_master as sku where sku.product_ID  ='%@'",product];
            
            query = [NSString stringWithFormat: @"select DISTINCT(sku.sku_Id), sku.description from sku_master as sku where sku.product_ID ='%@'",product];
            
            
            
            
            
            //            "select DISTINCT(sku.sku_Id), sku.short_description from sku_master as sku, product_master as product where sku.product_Id ='"
            //                                                + productIdCursor.getString(0) + "' COLLATE NOCASE ";
            
            
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                // int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSMutableDictionary *list = [[NSMutableDictionary alloc]init];
                    
                    count = sqlite3_column_int(selectStmt, 0);
                    
                    NSString  * sku_Id = @((char *)sqlite3_column_text(selectStmt, 0));
                    
                    NSString  * desc = @((char *)sqlite3_column_text(selectStmt, 1));
                    
                    
                    list = [[NSMutableDictionary alloc]initWithObjects:@[sku_Id,desc] forKeys:@[@"sku_ID",@"description"]];
                    
                    [result addObject:list];
                }
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
}

- (id)checkGivenValueIsNullOrNil:(id)inputValue defaultReturn:(NSString *)returnStirng{
    
    @try {
        if ([inputValue isKindOfClass:[NSNull class]] || (inputValue == nil)) {
            return returnStirng;
        }
        else {
            
            if([inputValue isKindOfClass:[NSString class]]){
                if([inputValue isEqualToString:@"<null>"])
                    return returnStirng;
                
            }
            
            return inputValue;
        }
    } @catch (NSException *exception) {
        return @"--";
    }
}


- (NSString *)checkGivenValueFromFileIsNullOrNil:(NSString *)inputValue defaultReturn:(NSString *)returnStirng{
    
    @try {
        
        
        if([inputValue isEqualToString:@"\'N"])
            return returnStirng;
        else
            return (NSString *)inputValue;
    } @catch (NSException *exception) {
        return @"--";
    }
}


-(NSMutableDictionary *)getProductCategory:(NSString*)productId {
    NSMutableDictionary *resultDic = [NSMutableDictionary new];
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            
            query = [NSString stringWithFormat:@"select category,sub_category from product_master where product_ID = '%@'",productId];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                // int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    //changed by Srinivasulu on  12/11/2017....
                    NSString  * category = @"";
                    NSString  * subCategory = @"";
                    
                    //upto here on 12/11/2017....
                    if( (char *)sqlite3_column_text(selectStmt,0))
                        category = [NSString stringWithFormat:@"%s",(const char*)sqlite3_column_text(selectStmt, 0)];
                    
                    if( (char *)sqlite3_column_text(selectStmt,1))
                        subCategory = [NSString stringWithFormat:@"%s",(const char*)sqlite3_column_text(selectStmt, 1)];
                    
                    
                    
                    resultDic = [[NSMutableDictionary alloc]initWithObjects:@[category,subCategory] forKeys:@[kProductCategory,kProductSubCategory]];
                    
                }
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
        }
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    } @finally {
        
        
    }
    
    return resultDic;
}

-(NSMutableArray*) getSkuIds:(NSString*)category skuIds:(NSArray*)skuIds subCategory:(NSString *)subCategory{
    NSMutableArray *skuList=[NSMutableArray new];
    BOOL categoryFlag=false;
    BOOL subCategoryFlag=false;
    @try{
        
        
        NSMutableString *qryForSkuIDs =
        [NSMutableString stringWithFormat:@"select sku.sku_Id from sku_master sku,product_master product where sku.product_Id=product.product_ID"] ;
        
        if(![category isKindOfClass:[NSNull class]] && category.length > 0){
            [qryForSkuIDs appendString:[NSString stringWithFormat:@" and product.category= '%@' ",category]];
            //qryForSkuIDs+=" and product.category=:category ";
            categoryFlag=true;
        }
        if(![subCategory isKindOfClass:[NSNull class]] && subCategory.length > 0){
            subCategoryFlag=true;
            // qryForSkuIDs+=" and product.sub_category=:subCategory ";
            
            [qryForSkuIDs appendString:[NSString stringWithFormat:@" and product.sub_category= '%@' ",subCategory]];
        }
        
        [qryForSkuIDs appendString:[NSString stringWithFormat:@" and sku.sku_Id IN ('%@%@) ",[skuIds componentsJoinedByString:@"','"],@"'"]];
        
        // qryForSkuIDs+=" and sku.skuId in (:skuIdsList) ";
        
        const char *selectGroupQry = qryForSkuIDs.UTF8String ;
        
        if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
            //                int count = sqlite3_column_count(selectStmt);
            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                NSString *skuIdStr = @((char *)sqlite3_column_text(selectStmt, 0));
                [skuList addObject:skuIdStr];
            }
        }
        //  skuList=qryDetails.list();
    }@catch(NSException *e){
        
        NSLog(@"%@",e);
    }
    
    return skuList;
}

#pragma -mark method used of getting && storing the taxes in table....

/**
 * @description  here we are calling the transaction method in order to save in transaction table....
 * @date
 * @method       saveTransactionsTemp:--  transactionDetails:--
 * @author
 * @param        NSString
 * @param        NSDictionary
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 06/08/2017....
 * @reason      added the comments and  and added two extra field billAmount and syncStatus.... not completed....
 *
 */

-(NSString *)saveTransactionsTemp:(NSString*)billId transactionDetails:(NSDictionary *)transactionDic{
    
    @try {
        
        [self saveTransactions:billId transactionDetails:transactionDic transactionType:CASH_RETURNS];
    } @catch (NSException *exception) {
        
    } @finally {
        
        return @"";
    }
}

#pragma -mark used to retrive the bills in local  upto here on 06/08/2017... ....

/**
 * @description  here are search the completed bill based on search text and the due amount....
 * @date
 * @method       geCompletedBillsList:
 * @author
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 06/08/2017....
 * @reason      added the comments and  and added two extra field billAmount and syncStatus.... not completed....
 *
 */

-(NSMutableArray *)geCompletedBillsList:(NSString *)searchString {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            if (searchString.length!=0) {
                
                query = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%completed%%' COLLATE NOCASE and due_amount = '0.00' ORDER BY date_and_time DESC",searchString,presentLocation];
                
                //changed by Srinivasulu on 08/07/2017....
                //undo by Srinivasulu on10/07/2017.... reason service modification are done....
                
                if (isCustomerBillId) {
                    
                    query = [NSString stringWithFormat:@"select serial_billId from billing_table where serial_billId LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%completed%%' COLLATE NOCASE and due_amount = '0.00' ORDER BY date_and_time DESC",searchString,presentLocation];
                    
                }
                
                //upto here on 08/07/2017....
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        
                        [result addObject:bill_id];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            else {
                
                query = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%completed%%' and due_amount ='0.00' ORDER BY date_and_time DESC",presentLocation];
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSMutableDictionary *bills = [[NSMutableDictionary alloc]init];
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        NSString  *date = @((char *)sqlite3_column_text(selectStmt, 1));
                        NSString  *due = @((char *)sqlite3_column_text(selectStmt,9));
                        NSString  *totalPrice = @((char *)sqlite3_column_text(selectStmt,8));
                        
                        NSString  *cashier = @((char *)sqlite3_column_text(selectStmt,2));
                        NSString  *counter = @((char *)sqlite3_column_text(selectStmt,3));
                        NSString  *userName = @((char *)sqlite3_column_text(selectStmt,14));
                        
                        //added by Srinivasulu on 26/07/2017...,
                        // SUCCESS ------   TO_BE_UPLOADED, PENDING  -----  ERROR
                        
                        NSString  * syncStatusStr = @"--";
                        
                        NSString  * billAmountStr = @"0.00";
                        
                        if( (char *)sqlite3_column_text(selectStmt,8)  && (sqlite3_column_text(selectStmt, 8) != nil) ){
                            
                            billAmountStr = @((char *)sqlite3_column_text(selectStmt,8));
                        }
                        
                        //changed by Srinivasulu on 06/08/2017....
                        
                        if( (char *)sqlite3_column_text(selectStmt,16)  && (sqlite3_column_text(selectStmt, 16) != nil) ){
                            
                            if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:TO_BE_UPLOADED] || [@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:PENDING] ){
                                
                                syncStatusStr = NSLocalizedString(@"to_be_upload", nil);
                            }
                            else if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:ERROR]){
                                
                                //                                syncStatusStr = NSLocalizedString(@"cann't_upload", nil);
                                syncStatusStr = NSLocalizedString(@"pending", nil);
                            }
                            else{
                                
                                syncStatusStr = NSLocalizedString(@"uploaded", nil);
                            }
                            
                        }
                        
                        //upto here on 06/08/2017....
                        
                        //upot here on 26/07/2017....
                        NSString *serialBillId = @"";
                        if (sqlite3_column_text(selectStmt, 26) != nil) {
                            
                            serialBillId = @((char *)sqlite3_column_text(selectStmt, 26));
                        }
                        //changed by Srinivasulu on
                        bills = [[NSMutableDictionary alloc]initWithObjects:@[bill_id,date,due,cashier,counter,userName,totalPrice,serialBillId,syncStatusStr,billAmountStr] forKeys:@[@"billId",BUSSINESS_DATE,@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,@"totalPrice",kSerialBillId,SYNC_STATUS,TOTAL_BILL_AMT]];
                        
                        [result addObject:bills];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                if (result.count!=0) {
                    
                    query = [NSString stringWithFormat:@"select count (*) from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%completed%%'",presentLocation];
                    const char *sqlStatement = query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            count = sqlite3_column_int(selectStmt, 0);
                            
                            
                            
                        }
                        sqlite3_finalize(selectStmt);
                        selectStmt = nil;
                        
                        [result addObject:[NSString stringWithFormat:@"%d",count]];
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                    }
                    
                }
            }
            
            
            
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
    
}

/**
 * @description  here are search the pendng && draft bill based on search text and the due amount....
 * @date
 * @method       getPendingBills:
 * @author
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 06/08/2017....
 * @reason      added the comments and  and added two extra field billAmount and syncStatus.... not completed....
 *
 */

-(NSMutableArray *)getPendingBills:(NSString *)searchString {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            if (searchString.length!=0) {
                
                //changed by Srinivasulu on 10/08/2017....
                //changed ">" symbol into ">="  symbol....
                
                query = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%pending%%' COLLATE NOCASE or status LIKE '%%draft%%' COLLATE NOCASE and due_amount >='0.00'",searchString,presentLocation];
                
                //upto here on 10/08/2017....
                
                //changed by Srinivasulu on 08/07/2017....
                //undo by Srinivasulu on10/07/2017.... reason service modification are done....
                if (isCustomerBillId) {
                    
                    //changed by Srinivasulu on 10/08/2017....
                    //changed ">" symbol into ">="  symbol....
                    
                    query = [NSString stringWithFormat:@"select serial_billId from billing_table where serial_billId LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%pending%%' COLLATE NOCASE or status LIKE '%%draft%%' COLLATE NOCASE and due_amount >= '0.00'",searchString,presentLocation];
                    
                    //upto here on 10/08/2017....
                    
                    
                }
                
                //upot here on 08/07/2017....
                
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        
                        [result addObject:bill_id];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            else {
                
                //changed by Srinivasulu on 10/08/2017....
                //changed ">" symbol into ">="  symbol....
                
                query = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%pending%%' or status LIKE '%%draft%%' and due_amount >= '0.00'",presentLocation];
                
                //upto here on 10/08/2017....
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSMutableDictionary *bills = [[NSMutableDictionary alloc]init];
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        NSString  *date = @((char *)sqlite3_column_text(selectStmt, 1));
                        NSString  *due = @((char *)sqlite3_column_text(selectStmt,9));
                        NSString  *totalPrice = @((char *)sqlite3_column_text(selectStmt,8));
                        
                        NSString  *cashier = @((char *)sqlite3_column_text(selectStmt,2));
                        NSString  *counter = @((char *)sqlite3_column_text(selectStmt,3));
                        NSString  *userName = @((char *)sqlite3_column_text(selectStmt,14));
                        
                        NSString  *status = @((char *)sqlite3_column_text(selectStmt,10));
                        
                        NSString *serialBillId = @"";
                        if (sqlite3_column_text(selectStmt, 26) != nil) {
                            
                            serialBillId = @((char *)sqlite3_column_text(selectStmt, 26));
                            
                        }
                        
                        //added by Srinivasulu on 07/08/2017....
                        // SUCCESS ------   TO_BE_UPLOADED, PENDING  -----  ERROR
                        
                        NSString  * syncStatusStr = @"--";
                        
                        NSString  * billAmountStr = @"0.00";
                        
                        if( (char *)sqlite3_column_text(selectStmt,8)  && (sqlite3_column_text(selectStmt, 8) != nil) ){
                            
                            billAmountStr = @((char *)sqlite3_column_text(selectStmt,8));
                        }
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,16)  && (sqlite3_column_text(selectStmt, 16) != nil) ){
                            
                            if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:TO_BE_UPLOADED] || [@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:PENDING] ){
                                
                                syncStatusStr = NSLocalizedString(@"to_be_upload", nil);
                            }
                            else if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:ERROR]){
                                
                                //                                syncStatusStr = NSLocalizedString(@"cann't_upload", nil);
                                syncStatusStr = NSLocalizedString(@"pending", nil);
                            }
                            else{
                                
                                syncStatusStr = NSLocalizedString(@"uploaded", nil);
                            }
                            
                        }
                        
                        //upto here on 06/08/2017....
                        
                        //changed by Srinivasulu on 06/08/2017....
                        
                        //                        bills = [[NSMutableDictionary alloc]initWithObjects:[NSArray arrayWithObjects:bill_id,date,due,cashier,counter,userName,totalPrice,status,serialBillId, nil] forKeys:[NSArray arrayWithObjects:@"billId",@"dateAndTime",@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,@"totalPrice",@"status",kSerialBillId, nil]];
                        
                        bills = [[NSMutableDictionary alloc]initWithObjects:@[bill_id,date,due,cashier,counter,userName,totalPrice,status,serialBillId,billAmountStr,syncStatusStr] forKeys:@[@"billId",BUSSINESS_DATE,@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,@"totalPrice",@"status",kSerialBillId,TOTAL_BILL_AMT,SYNC_STATUS]];
                        
                        [result addObject:bills];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                if (result.count!=0) {
                    
                    query = [NSString stringWithFormat:@"select count (*) from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%pending%%' or status LIKE '%%draft%%'",presentLocation];
                    const char *sqlStatement = query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            count = sqlite3_column_int(selectStmt, 0);
                            
                            
                            
                        }
                        sqlite3_finalize(selectStmt);
                        selectStmt = nil;
                        
                        [result addObject:[NSString stringWithFormat:@"%d",count]];
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                    }
                    
                }
            }
            
            
            
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
    
}

/**
 * @description  here are search the doorDelivery bills based on search text and the due amount....
 * @date
 * @method       getDoorDeliveryBills:
 * @author
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 06/08/2017....
 * @reason      added the comments and  and added two extra field billAmount and syncStatus.... not completed....
 *
 */

-(NSMutableArray *)getDoorDeliveryBills:(NSString*)searchString {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            if (searchString.length!=0) {
                
                query = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%tobedelivered%%'",searchString,presentLocation];
                
                //changed by Srinivasulu on 08/07/2017....
                //undo by Srinivasulu on10/07/2017.... reason service modification are done....
                
                if (isCustomerBillId) {
                    query = [NSString stringWithFormat:@"select serial_billId from billing_table where serial_billId LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%tobedelivered%%'",searchString,presentLocation];
                }
                
                //upto here on 08/07/2017....
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        
                        [result addObject:bill_id];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            else {
                
                query = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%tobedelivered%%'",presentLocation];
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSMutableDictionary *bills = [[NSMutableDictionary alloc]init];
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        NSString  *date = @((char *)sqlite3_column_text(selectStmt, 1));
                        NSString  *due = @((char *)sqlite3_column_text(selectStmt,9));
                        NSString  *cashier = @((char *)sqlite3_column_text(selectStmt,2));
                        NSString  *counter = @((char *)sqlite3_column_text(selectStmt,3));
                        NSString  *userName = @((char *)sqlite3_column_text(selectStmt,14));
                        
                        NSString *serialBillId = @"";
                        if (sqlite3_column_text(selectStmt, 26) != nil) {
                            
                            serialBillId = @((char *)sqlite3_column_text(selectStmt, 26));
                            
                        }
                        
                        
                        //added by Srinivasulu on 07/08/2017....
                        // SUCCESS ------   TO_BE_UPLOADED, PENDING  -----  ERROR
                        
                        NSString  * syncStatusStr = @"--";
                        
                        NSString  * billAmountStr = @"0.00";
                        
                        NSString  * statusStr = @((char *)sqlite3_column_text(selectStmt,10));
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,8)  && (sqlite3_column_text(selectStmt, 8) != nil) ){
                            
                            billAmountStr = @((char *)sqlite3_column_text(selectStmt,8));
                        }
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,16)  && (sqlite3_column_text(selectStmt, 16) != nil) ){
                            
                            if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:TO_BE_UPLOADED] || [@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:PENDING] ){
                                
                                syncStatusStr = NSLocalizedString(@"to_be_upload", nil);
                            }
                            else if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:ERROR]){
                                
                                //                                syncStatusStr = NSLocalizedString(@"cann't_upload", nil);
                                syncStatusStr = NSLocalizedString(@"pending", nil);
                            }
                            else{
                                
                                syncStatusStr = NSLocalizedString(@"uploaded", nil);
                            }
                            
                        }
                        
                        //upto here on 06/08/2017....
                        
                        //changed by Srinivasulu on 06/08/2017....
                        
                        //                        bills = [[NSMutableDictionary alloc]initWithObjects:[NSArray arrayWithObjects:bill_id,date,due,cashier,counter,userName,serialBillId, nil] forKeys:[NSArray arrayWithObjects:@"billId",BUSSINESS_DATE,BILL_DUE,@"cashierId",@"counterId",CUSTOMER_NAME,kSerialBillId, nil]];
                        
                        bills = [[NSMutableDictionary alloc]initWithObjects:@[bill_id,date,due,cashier,counter,userName,serialBillId,billAmountStr,syncStatusStr,statusStr] forKeys:@[@"billId",BUSSINESS_DATE,BILL_DUE,@"cashierId",@"counterId",CUSTOMER_NAME,kSerialBillId,TOTAL_BILL_AMT,SYNC_STATUS,STATUS]];
                        
                        [result addObject:bills];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                if (result.count!=0) {
                    
                    query = [NSString stringWithFormat:@"select count (*) from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%tobedelivered%%'",presentLocation];
                    const char *sqlStatement = query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            count = sqlite3_column_int(selectStmt, 0);
                            
                            
                            
                        }
                        sqlite3_finalize(selectStmt);
                        selectStmt = nil;
                        
                        [result addObject:[NSString stringWithFormat:@"%d",count]];
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                    }
                    
                }
            }
            
            
            
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
    
}

/**
 * @description  get the list of cancelled bills
 * @date         24/10/15
 * @method       getCancelledBills:
 * @author       Sonali
 * @param        search string entered
 * @param
 * @return       list of bills
 * @verified By
 * @verified On
 *
 * @modified By Srinivasulu on 07/08/2017....
 * @reason      two more field are retriving from the offline DB.....
 *
 *
 */

-(NSMutableArray *)getCancelledBills:(NSString*)searchCriteria {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            if (searchCriteria.length!=0) {
                
                query = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%cancelled%%' COLLATE NOCASE ",searchCriteria,presentLocation];
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        
                        [result addObject:bill_id];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            else {
                
                query = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%cancelled%%'",presentLocation];
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSMutableDictionary *bills = [[NSMutableDictionary alloc]init];
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        NSString  *date = @((char *)sqlite3_column_text(selectStmt, 1));
                        NSString  *due = @((char *)sqlite3_column_text(selectStmt,9));
                        
                        NSString  *cashier = @((char *)sqlite3_column_text(selectStmt,2));
                        NSString  *counter = @((char *)sqlite3_column_text(selectStmt,3));
                        NSString  *userName = @((char *)sqlite3_column_text(selectStmt,14));
                        
                        
                        //added by Srinivasulu on 07/08/2017....
                        // SUCCESS ------   TO_BE_UPLOADED, PENDING  -----  ERROR
                        
                        NSString  * syncStatusStr = @"--";
                        
                        NSString  * billAmountStr = @"0.00";
                        
                        NSString *serialBillId = @"";
                        if (sqlite3_column_text(selectStmt, 26) != nil) {
                            
                            serialBillId = @((char *)sqlite3_column_text(selectStmt, 26));
                            
                        }
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,8)  && (sqlite3_column_text(selectStmt, 8) != nil) ){
                            
                            billAmountStr = @((char *)sqlite3_column_text(selectStmt,8));
                        }
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,16)  && (sqlite3_column_text(selectStmt, 16) != nil) ){
                            
                            if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:TO_BE_UPLOADED] || [@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:PENDING] ){
                                
                                syncStatusStr = NSLocalizedString(@"to_be_upload", nil);
                            }
                            else if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:ERROR]){
                                
                                //                                syncStatusStr = NSLocalizedString(@"cann't_upload", nil);
                                syncStatusStr = NSLocalizedString(@"pending", nil);
                            }
                            else{
                                
                                syncStatusStr = NSLocalizedString(@"uploaded", nil);
                            }
                            
                        }
                        
                        //upto here on 07/08/2017....
                        
                        //changed by Srinivasulu on 07/08/2017....
                        //                        bills = [[NSMutableDictionary alloc]initWithObjects:[NSArray arrayWithObjects:bill_id,date,due,cashier,counter,userName, nil] forKeys:[NSArray arrayWithObjects:@"billId",@"dateAndTime",@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME, nil]];
                        
                        bills = [[NSMutableDictionary alloc]initWithObjects:@[bill_id,date,due,cashier,counter,userName,billAmountStr,syncStatusStr,serialBillId] forKeys:@[@"billId",BUSSINESS_DATE,@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,TOTAL_BILL_AMT,SYNC_STATUS,kSerialBillId]];
                        
                        
                        [result addObject:bills];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                if (result.count!=0) {
                    
                    query = [NSString stringWithFormat:@"select count (*) from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%cancelled%%'",presentLocation];
                    const char *sqlStatement = query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            count = sqlite3_column_int(selectStmt, 0);
                            
                            
                            
                        }
                        sqlite3_finalize(selectStmt);
                        selectStmt = nil;
                        
                        [result addObject:[NSString stringWithFormat:@"%d",count]];
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                    }
                    
                }
            }
            
            
            
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
    
}

/**
 * @description  here are search the exchange bills based on search text....
 * @date
 * @method       getReturnedBills:
 * @author
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 06/08/2017....
 * @reason      added the comments and  and added two extra field billAmount and syncStatus.... not completed....
 *
 */

-(NSMutableArray *)getReturnedBills:(NSString *)searchString {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            if (searchString.length!=0) {
                
                query = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%returned%%' COLLATE NOCASE",searchString,presentLocation];
                
                //changed by Srinivasulu on 08/07/2017....
                //undo by Srinivasulu on10/07/2017.... reason service modification are done....
                
                if (isCustomerBillId) {
                    query = [NSString stringWithFormat:@"select serial_billId from billing_table where serial_billId LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%returned%%' COLLATE NOCASE ",searchString,presentLocation];
                    
                }
                
                //upto here on 08/07/2017....
                
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        
                        [result addObject:bill_id];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            else {
                
                query = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%returned%%'",presentLocation];
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSMutableDictionary *bills = [[NSMutableDictionary alloc]init];
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        NSString  *date = @((char *)sqlite3_column_text(selectStmt, 1));
                        NSString  *due = @((char *)sqlite3_column_text(selectStmt,9));
                        NSString  *totalPrice = @((char *)sqlite3_column_text(selectStmt,8));
                        
                        NSString  *cashier = @((char *)sqlite3_column_text(selectStmt,2));
                        NSString  *counter = @((char *)sqlite3_column_text(selectStmt,3));
                        NSString  *userName = @((char *)sqlite3_column_text(selectStmt,14));
                        
                        NSString  *status = @((char *)sqlite3_column_text(selectStmt,10));
                        
                        NSString *serialBillId = @"";
                        if (sqlite3_column_text(selectStmt, 26) != nil) {
                            
                            serialBillId = @((char *)sqlite3_column_text(selectStmt, 26));
                            
                        }
                        
                        
                        //added by Srinivasulu on 07/08/2017....
                        // SUCCESS ------   TO_BE_UPLOADED, PENDING  -----  ERROR
                        
                        NSString  * syncStatusStr = @"--";
                        
                        NSString  * billAmountStr = @"0.00";
                        
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,8)  && (sqlite3_column_text(selectStmt, 8) != nil) ){
                            
                            billAmountStr = @((char *)sqlite3_column_text(selectStmt,8));
                        }
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,16)  && (sqlite3_column_text(selectStmt, 16) != nil) ){
                            
                            if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:TO_BE_UPLOADED] || [@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:PENDING] ){
                                
                                syncStatusStr = NSLocalizedString(@"to_be_upload", nil);
                            }
                            else if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:ERROR]){
                                
                                //                                syncStatusStr = NSLocalizedString(@"cann't_upload", nil);
                                syncStatusStr = NSLocalizedString(@"pending", nil);
                            }
                            else{
                                
                                syncStatusStr = NSLocalizedString(@"uploaded", nil);
                            }
                            
                        }
                        
                        //upto here on 07/08/2017....
                        
                        //changed by Srinivasulu on 07/08/2017....
                        
                        //                        bills = [[NSMutableDictionary alloc]initWithObjects:[NSArray arrayWithObjects:bill_id,date,due,cashier,counter,userName,totalPrice,status,serialBillId, nil] forKeys:[NSArray arrayWithObjects:@"billId",@"dateAndTime",@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,@"totalPrice",@"status",kSerialBillId, nil]];
                        
                        bills = [[NSMutableDictionary alloc]initWithObjects:@[bill_id,date,due,cashier,counter,userName,totalPrice,status,serialBillId,billAmountStr,syncStatusStr] forKeys:@[@"billId",BUSSINESS_DATE,@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,@"totalPrice",@"status",kSerialBillId,TOTAL_BILL_AMT,SYNC_STATUS]];
                        
                        [result addObject:bills];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                if (result.count!=0) {
                    
                    query = [NSString stringWithFormat:@"select count (*) from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%returned%%' ",presentLocation];
                    const char *sqlStatement = query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            count = sqlite3_column_int(selectStmt, 0);
                            
                            
                            
                        }
                        sqlite3_finalize(selectStmt);
                        selectStmt = nil;
                        
                        //[result addObject:[NSString stringWithFormat:@"%d",count]];
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                    }
                    
                }
            }
            
            
            
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
    
}

/**
 * @description  here are search the exchange bills based on search text....
 * @date
 * @method       getExchangedBills:
 * @author
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 06/08/2017....
 * @reason      added the comments and  and added two extra field billAmount and syncStatus.... not completed....
 *
 */

-(NSMutableArray *)getExchangedBills:(NSString *)searchString {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            if (searchString.length!=0) {
                
                query = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%exchanged%%' COLLATE NOCASE",searchString,presentLocation];
                
                //changed by Srinivasulu on 08/07/2017....
                //undo by Srinivasulu on10/07/2017.... reason service modification are done....
                
                if (isCustomerBillId) {
                    query = [NSString stringWithFormat:@"select serial_billId from billing_table where serial_billId LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%exchanged%%' COLLATE NOCASE ",searchString,presentLocation];
                    
                }
                
                //upto here on 08/07/2017....
                
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        
                        [result addObject:bill_id];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            else {
                
                query = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%exchanged%%'",presentLocation];
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSMutableDictionary *bills = [[NSMutableDictionary alloc]init];
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        NSString  *date = @((char *)sqlite3_column_text(selectStmt, 1));
                        NSString  *due = @((char *)sqlite3_column_text(selectStmt,9));
                        NSString  *totalPrice = @((char *)sqlite3_column_text(selectStmt,8));
                        
                        NSString  *cashier = @((char *)sqlite3_column_text(selectStmt,2));
                        NSString  *counter = @((char *)sqlite3_column_text(selectStmt,3));
                        NSString  *userName = @((char *)sqlite3_column_text(selectStmt,14));
                        
                        NSString  *status = @((char *)sqlite3_column_text(selectStmt,10));
                        
                        NSString *serialBillId = @"";
                        if (sqlite3_column_text(selectStmt, 26) != nil) {
                            
                            serialBillId = @((char *)sqlite3_column_text(selectStmt, 26));
                            
                        }
                        
                        
                        //added by Srinivasulu on 07/08/2017....
                        // SUCCESS ------   TO_BE_UPLOADED, PENDING  -----  ERROR
                        
                        NSString  * syncStatusStr = @"--";
                        
                        NSString  * billAmountStr = @"0.00";
                        
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,8)  && (sqlite3_column_text(selectStmt, 8) != nil) ){
                            
                            billAmountStr = @((char *)sqlite3_column_text(selectStmt,8));
                        }
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,16)  && (sqlite3_column_text(selectStmt, 16) != nil) ){
                            
                            if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:TO_BE_UPLOADED] || [@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:PENDING] ){
                                
                                syncStatusStr = NSLocalizedString(@"to_be_upload", nil);
                            }
                            else if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:ERROR]){
                                
                                //                                syncStatusStr = NSLocalizedString(@"cann't_upload", nil);
                                syncStatusStr = NSLocalizedString(@"pending", nil);
                            }
                            else{
                                
                                syncStatusStr = NSLocalizedString(@"uploaded", nil);
                            }
                            
                        }
                        
                        //upto here on 07/08/2017....
                        
                        //changed by Srinivasulu on 07/08/2017....
                        
                        //                        bills = [[NSMutableDictionary alloc]initWithObjects:[NSArray arrayWithObjects:bill_id,date,due,cashier,counter,userName,totalPrice,status,serialBillId, nil] forKeys:[NSArray arrayWithObjects:@"billId",@"dateAndTime",@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,@"totalPrice",@"status",kSerialBillId, nil]];
                        
                        bills = [[NSMutableDictionary alloc]initWithObjects:@[bill_id,date,due,cashier,counter,userName,totalPrice,status,serialBillId,billAmountStr,syncStatusStr] forKeys:@[@"billId",BUSSINESS_DATE,@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,@"totalPrice",@"status",kSerialBillId,TOTAL_BILL_AMT,SYNC_STATUS]];
                        
                        
                        [result addObject:bills];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                if (result.count!=0) {
                    
                    query = [NSString stringWithFormat:@"select count (*) from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%exchanged%%' ",presentLocation];
                    const char *sqlStatement = query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            count = sqlite3_column_int(selectStmt, 0);
                            
                            
                            
                        }
                        sqlite3_finalize(selectStmt);
                        selectStmt = nil;
                        
                        //  [result addObject:[NSString stringWithFormat:@"%d",count]];
                        
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                    }
                    
                }
            }
            
            
            
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
    
}

/**
 * @description  here are search the creadit bills based on the search criteria....
 * @date
 * @method       getCreditBills:
 * @author
 * @param        NSString
 * @param
 * @return       NSMutableArray
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 06/08/2017....
 * @reason      added the comments and  and added two extra field billAmount and syncStatus.... not completed....
 *
 */

-(NSMutableArray *)getCreditBills:(NSString *)searchString {
    
    NSMutableArray * result = [[NSMutableArray alloc]init];
    int count = 0;
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            if (searchString.length!=0) {
                
                query = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%Open%%' COLLATE NOCASE  and due_amount>'0.00'",searchString,presentLocation];
                
                //undo by Srinivasulu on10/07/2017.... reason service modification are done....
                
                if (isCustomerBillId) {
                    query = [NSString stringWithFormat:@"select serial_billId from billing_table where serial_billId LIKE '%%%@%%' and store_location LIKE '%%%@%%' and status LIKE '%%pending%%' COLLATE NOCASE or status LIKE '%%draft%%' COLLATE NOCASE and due_amount>'0.00'",searchString,presentLocation];
                    
                }
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        
                        [result addObject:bill_id];
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            else {
                
                query = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%Open%%' and due_amount>'0.00'",presentLocation];
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSMutableDictionary *bills = [[NSMutableDictionary alloc]init];
                        
                        count = sqlite3_column_int(selectStmt, 0);
                        
                        // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        NSString  *date = @((char *)sqlite3_column_text(selectStmt, 1));
                        NSString  *due = @((char *)sqlite3_column_text(selectStmt,9));
                        NSString  *totalPrice = @((char *)sqlite3_column_text(selectStmt,8));
                        
                        NSString  *cashier = @((char *)sqlite3_column_text(selectStmt,2));
                        NSString  *counter = @((char *)sqlite3_column_text(selectStmt,3));
                        NSString  *userName = @((char *)sqlite3_column_text(selectStmt,14));
                        
                        NSString  *status = @((char *)sqlite3_column_text(selectStmt,10));
                        
                        NSString *serialBillId = @"";
                        if (sqlite3_column_text(selectStmt, 26) != nil) {
                            
                            serialBillId = @((char *)sqlite3_column_text(selectStmt, 26));
                            
                        }
                        //added by Srinivasulu on 07/08/2017....
                        // SUCCESS ------   TO_BE_UPLOADED, PENDING  -----  ERROR
                        
                        NSString  * syncStatusStr = @"--";
                        
                        NSString  * billAmountStr = @"0.00";
                        
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,8)  && (sqlite3_column_text(selectStmt, 8) != nil) ){
                            
                            billAmountStr = @((char *)sqlite3_column_text(selectStmt,8));
                        }
                        
                        
                        if( (char *)sqlite3_column_text(selectStmt,16)  && (sqlite3_column_text(selectStmt, 16) != nil) ){
                            
                            if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:TO_BE_UPLOADED] || [@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:PENDING] ){
                                
                                syncStatusStr = NSLocalizedString(@"to_be_upload", nil);
                            }
                            else if([@((char *)sqlite3_column_text(selectStmt,16)) isEqualToString:ERROR]){
                                
                                //                                syncStatusStr = NSLocalizedString(@"cann't_upload", nil);
                                syncStatusStr = NSLocalizedString(@"pending", nil);
                            }
                            else{
                                
                                syncStatusStr = NSLocalizedString(@"uploaded", nil);
                            }
                            
                        }
                        
                        //upto here on 07/08/2017....
                        
                        //changed by Srinivasulu on 07/08/2017....
                        
                        
                        //                        bills = [[NSMutableDictionary alloc]initWithObjects:[NSArray arrayWithObjects:bill_id,date,due,cashier,counter,userName,totalPrice,status,serialBillId, nil] forKeys:[NSArray arrayWithObjects:@"billId",@"dateAndTime",@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,@"totalPrice",@"status",kSerialBillId, nil]];
                        
                        bills = [[NSMutableDictionary alloc]initWithObjects:@[bill_id,date,due,cashier,counter,userName,totalPrice,status,serialBillId,billAmountStr,syncStatusStr] forKeys:@[@"billId",BUSSINESS_DATE,@"dueAmount",@"cashierId",@"counterId",CUSTOMER_NAME,@"totalPrice",@"status",kSerialBillId,TOTAL_BILL_AMT,SYNC_STATUS]];
                        
                        [result addObject:bills];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                if (result.count!=0) {
                    
                    query = [NSString stringWithFormat:@"select count (*) from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%pending%%'",presentLocation];
                    const char *sqlStatement = query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            
                            count = sqlite3_column_int(selectStmt, 0);
                            
                            
                            
                        }
                        sqlite3_finalize(selectStmt);
                        selectStmt = nil;
                        
                        [result addObject:[NSString stringWithFormat:@"%d",count]];
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                    }
                    
                }
            }
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    return result;
    
}

/**
 * @description  here are we retriving bill complete details....
 * @date
 * @method       openBill:
 * @author
 * @param        NSString
 * @param
 * @return       NSMutableDictionary
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 07/08/2017....
 * @reason      added the comments and  and added two extra field  syncStatus.... not completed....
 *
 */

-(NSMutableDictionary*)openBill:(NSString *)billId{
    NSString *transaction_id;
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        billDetails = [[NSMutableDictionary alloc]init];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            //        NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%% %@ %%'",selected_SKID];
            
            NSString *query = [NSString stringWithFormat:@"select * from billing_table where bill_id='%@' and store_location LIKE '%%%@%%'",billId,presentLocation];
            
            //changed by Srinivasulu on 08/07/2017....
            //undo by Srinivasulu on10/07/2017.... reason service modification are done....
            
            if (isCustomerBillId) {
                
                query = [NSString stringWithFormat:@"select * from billing_table where serial_billId='%@' and store_location LIKE '%%%@%%'",billId,presentLocation];
            }
            
            
            //upto here on 08/07/2017....
            
            const char *sqlStatement = query.UTF8String;
            
            NSString * total_price_str = @"0.00";
            NSString * billAmountStr = @"0.00";
            NSString * bill_sub_total_str = @"0.00";
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    
                    billId = @((char *)sqlite3_column_text(selectStmt, 0));
                    NSString  *date = @((char *)sqlite3_column_text(selectStmt, 1));
                    NSString  *cashier_id = @((char *)sqlite3_column_text(selectStmt, 2));
                    NSString  *counter_id = @((char *)sqlite3_column_text(selectStmt, 3));
                    NSString  *Total_discount = @((char *)sqlite3_column_text(selectStmt, 4));
                    NSString  *discount_type = @((char *)sqlite3_column_text(selectStmt, 5));
                    NSString  *discount_type_id = @((char *)sqlite3_column_text(selectStmt,6));
                    NSString  *tax = @((char *)sqlite3_column_text(selectStmt, 7));
                    total_price_str = @((char *)sqlite3_column_text(selectStmt, 8));
                    NSString  *due_amount = @((char *)sqlite3_column_text(selectStmt, 9));
                    NSString  *status = @((char *)sqlite3_column_text(selectStmt, 10));
                    NSString  *custName = @((char *)sqlite3_column_text(selectStmt, 14));
                    //                        NSString  *email_id = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 11)];
                    NSString  *phone_number = @((char *)sqlite3_column_text(selectStmt, 12));
                    int  printCount = sqlite3_column_int(selectStmt, 17);
                    NSString  *other_disc = @((char *)sqlite3_column_text(selectStmt, 19));
                    NSString  *scanStartTime = [WebServiceUtility getCurrentDate];
                    
                    
                    
                    
                    if (sqlite3_column_text(selectStmt, 21) != nil) {
                        
                        scanStartTime = @((char *)sqlite3_column_text(selectStmt, 21));
                        
                    }
                    
                    NSString  *scanEndTime = [WebServiceUtility getCurrentDate];
                    if (sqlite3_column_text(selectStmt, 22) != nil) {
                        
                        scanEndTime = @((char *)sqlite3_column_text(selectStmt, 22));
                        
                    }
                    
                    NSString  *printTime = [WebServiceUtility getCurrentDate];
                    if (sqlite3_column_text(selectStmt, 23) != nil) {
                        
                        printTime = @((char *)sqlite3_column_text(selectStmt, 23));
                        
                    }
                    
                    NSString *serialBillId = @"";
                    if (sqlite3_column_text(selectStmt, 26) != nil) {
                        
                        serialBillId = @((char *)sqlite3_column_text(selectStmt, 26));
                        
                    }
                    
                    //                        NSString  *store_location = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 13)];
                    
                    //added by Srinivasulu  on 07/08/2017 && 26/03/2018....
                    
                    NSString * syncStatusStr = @"";
                    
                    if (sqlite3_column_text(selectStmt, 16) != nil) {
                        
                        syncStatusStr = @((char *)sqlite3_column_text(selectStmt, 16));
                    }
                    
                    billDetails[SYNC_STATUS] = syncStatusStr;
                    
                    NSString * customerGstinStr = @"";
                    NSString * billCommentsStr = @"";
                    
                    billAmountStr = [total_price_str copy];
                    bill_sub_total_str = [total_price_str copy];
                    
                    if (sqlite3_column_text(selectStmt, 33) != nil) {
                        
                        customerGstinStr = @((char *)sqlite3_column_text(selectStmt, 33));
                    }
                    
                    
                    if( (char *)sqlite3_column_text(selectStmt,34) &&  (sqlite3_column_text(selectStmt, 34) != nil))
                        billAmountStr = @((char *)sqlite3_column_text(selectStmt, 34));
                    
                    if( (char *)sqlite3_column_text(selectStmt,32) &&  (sqlite3_column_text(selectStmt, 32) != nil))
                        bill_sub_total_str = @((char *)sqlite3_column_text(selectStmt, 32));
                    
                    
                    
                    billDetails[CUSTOMER_GSTIN] = customerGstinStr;
                    billDetails[GST_IN] = customerGstinStr;
                    billDetails[kComments] = billCommentsStr;
                    
                    NSString * bussinessDateStr = @"";
                    NSString * billTimeStr = @"";
                    
                    if([[date componentsSeparatedByString:@" "] count]){
                        
                        bussinessDateStr = [[date componentsSeparatedByString:@" "] objectAtIndex:0];
                        billTimeStr = [[date componentsSeparatedByString:@" "] objectAtIndex:1];
                    }
                    billDetails[BUSSINESS_DATE] = bussinessDateStr;
                    billDetails[BILL_TIME_STR] = billTimeStr;
                    
                    //upto here on 07/08/2017 && 26/03/2018 && 17/08/2017....
                    
                    
                    billDetails[@"cashierId"] = cashier_id;
                    billDetails[@"counterId"] = counter_id;
                    billDetails[@"bill_date"] = date;
                    billDetails[@"discountType"] = discount_type;
                    billDetails[@"discountTypeId"] = discount_type_id;
                    billDetails[@"dueAmount"] = due_amount;
                    billDetails[@"status"] = status;
                    billDetails[@"tax"] = tax;
                    billDetails[@"totalDiscount"] = Total_discount;
                    billDetails[@"totalPrice"] = total_price_str;
                    billDetails[@"customerName"] = custName;
                    billDetails[MOBILE_NO] = phone_number;
                    billDetails[PRINT_COUNT] = [NSString stringWithFormat:@"%d",printCount];
                    billDetails[OTHER_DISCOUNT] = other_disc;
                    billDetails[SCAN_START_TIME] = scanStartTime;
                    billDetails[SCAN_START_TIME] = scanEndTime;
                    billDetails[PRINT_TIME] = printTime;
                    billDetails[@"billId"] = billId;
                    billDetails[kSerialBillId] = serialBillId;
                    billDetails[BILL_AMOUNT] = billAmountStr;
                    billDetails[CUSTOMER_BILL_ID_FORMAT] = serialBillId;
                    
                }
                sqlite3_reset(selectStmt);
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
                return nil;
            }
            if (billDetails.count!=0) {
                
                
                NSString *item_query = [NSString stringWithFormat:@"select * from billing_items where bill_id='%@' and status!='%@'",billId,@"void"];
                
                const char *sqlStatement1 = item_query.UTF8String;
                
                NSMutableArray *items = [[NSMutableArray alloc]init];
                
                if(sqlite3_prepare_v2(database, sqlStatement1, -1, &selectStmt, NULL) == SQLITE_OK) {
                    
                    float totalBillQty = 0;
                    float totalBillDealDiscounts = 0;
                    
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        
                        NSString  *sku_id = @((char *)sqlite3_column_text(selectStmt, 2));
                        NSString  *item = @((char *)sqlite3_column_text(selectStmt, 3));
                        NSString  *quantity = @((char *)sqlite3_column_text(selectStmt, 4));
                        NSString  *total_price = @((char *)sqlite3_column_text(selectStmt, 5));
                        NSString  *tax_code = @((char *)sqlite3_column_text(selectStmt, 6));
                        NSString  *tax_value = @((char *)sqlite3_column_text(selectStmt,7));
                        NSString  *status = @((char *)sqlite3_column_text(selectStmt, 8));
                        NSString  *pluCode = @((char *)sqlite3_column_text(selectStmt, 9));
                        NSString  *editedPrice = @((char *)sqlite3_column_text(selectStmt, 10));
                        NSString  *mrpPrice = [NSString stringWithFormat:@"%.2f",(total_price.floatValue/quantity.floatValue)];
                        
                        
                        if (sqlite3_column_text(selectStmt, 14) != nil) {
                            mrpPrice = @((char *)sqlite3_column_text(selectStmt, 14));
                        }
                        NSString *discountPrice = @((char *)sqlite3_column_text(selectStmt, 13));
                        NSString *itemDiscount = @((char *)sqlite3_column_text(selectStmt, 15));
                        NSString *itemDiscountDesc = @((char *)sqlite3_column_text(selectStmt, 16));
                        NSString *itemScanCode = @"";
                        if (sqlite3_column_text(selectStmt, 17) != nil) {
                            itemScanCode = @((char *)sqlite3_column_text(selectStmt, 17));
                        }
                        NSString  *itemPromoFlag = @"";
                        if (sqlite3_column_text(selectStmt, 18) != nil) {
                            itemPromoFlag = @((char *)sqlite3_column_text(selectStmt, 18));
                        }
                        
                        totalBillQty = totalBillQty + [quantity floatValue];
                        totalBillDealDiscounts = totalBillDealDiscounts + [discountPrice floatValue];
                        
                        NSString  *isManufacturedItem = @"";
                        if (sqlite3_column_text(selectStmt, 19) != nil) {
                            isManufacturedItem = @((char *)sqlite3_column_text(selectStmt, 19));
                        }
                        
                        NSString  *isPackagedItem = @"";
                        if (sqlite3_column_text(selectStmt, 20) != nil) {
                            isPackagedItem = @((char *)sqlite3_column_text(selectStmt, 20));
                        }
                        
                        NSString  *category = @"";
                        if (sqlite3_column_text(selectStmt, 21) != nil) {
                            category = @((char *)sqlite3_column_text(selectStmt, 21));
                        }
                        
                        NSString  *subCategory = @"";
                        if (sqlite3_column_text(selectStmt, 22) != nil) {
                            subCategory = @((char *)sqlite3_column_text(selectStmt, 22));
                        }
                        
                        NSString  *productRange = @"";
                        if (sqlite3_column_text(selectStmt, 23) != nil) {
                            productRange = @((char *)sqlite3_column_text(selectStmt, 23));
                        }
                        
                        NSString  *measureRange = @"";
                        if (sqlite3_column_text(selectStmt, 24) != nil) {
                            measureRange = @((char *)sqlite3_column_text(selectStmt, 24));
                        }
                        
                        NSString  *brand = @"";
                        if (sqlite3_column_text(selectStmt, 25) != nil) {
                            brand = @((char *)sqlite3_column_text(selectStmt, 25));
                        }
                        NSString  *model = @"";
                        if (sqlite3_column_text(selectStmt, 26) != nil) {
                            model = @((char *)sqlite3_column_text(selectStmt, 26));
                        }
                        
                        NSArray *keys = @[@"sku_id",@"item_name",@"quantity",@"item_total_price",@"taxCode",@"taxRate",@"status",AVAIL_QTY, PLU_CODE, EDITED_PRICE,MRP_Price,DISCOUNT_PRICE_3,ITEM_DISCOUNT,ITEM_DISCOUNT_DESC,@"itemScanCode",@"promoItemFlag",kIsManuFacturedItem,kPackagedType,kProductCategory,kProductSubCategory,kProductRange,kMeasureRange,kProductBrand,kProductModel];
                        NSArray *objects = @[sku_id,item,quantity,total_price,tax_code,tax_value,status,@"100", pluCode, editedPrice,mrpPrice,discountPrice,itemDiscount,itemDiscountDesc,itemScanCode,itemPromoFlag,@(isManufacturedItem.boolValue),@(isPackagedItem.boolValue),category,subCategory,productRange,measureRange,brand,model];
                        
                        //                        NSString *temp = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",sku_id,@"#",item,@"#",quantity,@"#",total_price,@"#",tax_code,@"#",tax_value,@"#",status];
                        
                        //added by Srinivaslulu on 12/07/2017....
                        //no need store && retrive the itemUnitPrice.... because in webUtilites we are calculating it....
                        
                        NSString  * itemScanFlagStr = @"";//29 -- 28
                        
                        NSString  * employeSaldIdStr = @"";//30 -- 39
                        
                        NSString  * departmentStr = @"";//31 -- 30
                        NSString  * subDepartmentStr = @"";//32 -- 31
                        
                        NSString  * employeeNameStr = @"";//33 -- 32
                        
                        NSString  * taxCostStr = @"";//34 -- 33 // notRequired
                        
                        NSString  * styleStr = @"";//35 -- 34
                        NSString  * patternStr = @"";//36 -- 35
                        NSString  * batchStr = @"";//37 -- 36
                        NSString  * colorStr = @"";//38 -- 37
                        NSString  * sizeStr = @"";//39 -- 38
                        NSString  * sectionStr = @"";//40 -- 39
                        NSString  * hsnCodeStr = @"";//41 -- 40
                        NSString  * utilityStr = @"";//42  -- 41
                        
                        NSString  * isTaxInclusiveStr = @"0";//43  -- 42
                        
                        
                        
                        //added by Srinivasulu on 21/08/2017....
                        
                        NSString  * productClassStr = @"";//44  -- 43
                        NSString  * productSubClassStr = @"";//45  -- 44
                        NSString  * styleRangeStr = @"";//46  -- 45
                        NSString  * editPriceReasonStr = @"";//47  -- 46
                        
                        //upto here on 21/08/2017....
                        
                        
                        
                        if (sqlite3_column_text(selectStmt, 28) != nil) {
                            itemScanFlagStr = @((char *)sqlite3_column_text(selectStmt, 28));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 29) != nil) {
                            employeSaldIdStr = @((char *)sqlite3_column_text(selectStmt, 29));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 30) != nil) {
                            departmentStr = @((char *)sqlite3_column_text(selectStmt, 30));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 31) != nil) {
                            subDepartmentStr = @((char *)sqlite3_column_text(selectStmt, 31));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 32) != nil) {
                            employeeNameStr = @((char *)sqlite3_column_text(selectStmt, 32));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 33) != nil) {
                            taxCostStr = @((char *)sqlite3_column_text(selectStmt, 33));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 34) != nil) {
                            styleStr = @((char *)sqlite3_column_text(selectStmt, 34));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 35) != nil) {
                            patternStr = @((char *)sqlite3_column_text(selectStmt, 35));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 36) != nil) {
                            batchStr = @((char *)sqlite3_column_text(selectStmt, 36));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 37) != nil) {
                            colorStr = @((char *)sqlite3_column_text(selectStmt, 37));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 38) != nil) {
                            sizeStr = @((char *)sqlite3_column_text(selectStmt, 38));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 39) != nil) {
                            sectionStr = @((char *)sqlite3_column_text(selectStmt, 39));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 40) != nil) {
                            hsnCodeStr = @((char *)sqlite3_column_text(selectStmt, 40));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 41) != nil) {
                            utilityStr = @((char *)sqlite3_column_text(selectStmt, 41));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 42) != nil) {
                            
                            isTaxInclusiveStr = @((char *)sqlite3_column_text(selectStmt, 42));
                        }
                        
                        
                        //added by Srinivasulu on 21/08/2017....
                        
                        if (sqlite3_column_text(selectStmt, 43) != nil) {
                            productClassStr = @((char *)sqlite3_column_text(selectStmt, 43));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 44) != nil) {
                            productSubClassStr = @((char *)sqlite3_column_text(selectStmt, 44));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 45) != nil) {
                            styleRangeStr = @((char *)sqlite3_column_text(selectStmt, 45));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 46) != nil) {
                            editPriceReasonStr = @((char *)sqlite3_column_text(selectStmt, 46));
                        }
                        
                        //upto here on 21/08/2017....
                        
                        
                        //added by Srinivasulu on 12/04/2017....
                        
                        NSMutableDictionary * productInfoMutDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
                        
                        productInfoMutDic[kItemDept] = departmentStr;
                        productInfoMutDic[kItemSubDept] = subDepartmentStr;
                        
                        productInfoMutDic[STYLE] = styleStr;
                        productInfoMutDic[PATTERN] = patternStr;
                        productInfoMutDic[BATCH] = batchStr;
                        productInfoMutDic[COLOR] = colorStr;
                        productInfoMutDic[SIZE] = sizeStr;
                        productInfoMutDic[SECTION] = sectionStr;
                        productInfoMutDic[HSN_CODE] = hsnCodeStr;
                        productInfoMutDic[UTILITY] = utilityStr;
                        
                        if(isTaxInclusiveStr.integerValue)
                            productInfoMutDic[TAX_INCLUSIVE] = @YES;
                        
                        else
                            productInfoMutDic[TAX_INCLUSIVE] = @NO;
                        
                        
                        //added by Srinivasulu on 21/08/2017....
                        
                        productInfoMutDic[PRODUCT_CLASS] = productClassStr;
                        productInfoMutDic[PRODUCT_SUB_CLASS] = productSubClassStr;
                        productInfoMutDic[STYLE_RANGE] = styleRangeStr;
                        productInfoMutDic[EDIT_PRICE_REASON] = editPriceReasonStr;
                        productInfoMutDic[kItemSpecificEmplName] = employeeNameStr;
                        productInfoMutDic[kItemSpecificEmplId] = employeSaldIdStr;
                        productInfoMutDic[ITEMUNITPRICE] = mrpPrice;
                        productInfoMutDic[ITEM_TOTAL_DISCOUNT_STR] = [NSString stringWithFormat:@"%.2f",  ([discountPrice floatValue] + [itemDiscount floatValue])];
                        productInfoMutDic[NET_COST] = total_price;
                        
                        //upto here on 21/08/2017 && 12/07/2017....
                        
                        [items addObject:productInfoMutDic];
                    }
                    
                    sqlite3_reset(selectStmt);
                    
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                    billDetails[BILL_ITEMS] = items;
                    
                    //added by Srinivasulu on 17/08/2018....
                    billDetails[NO_OF_ITEMS] = [NSNumber numberWithInteger:items.count];
                    billDetails[TOTAL_QUANTITY_OF_BILL] = [NSString stringWithFormat:@"%.2f",totalBillQty];
                    billDetails[PROMO_DISCOUNT] = [NSString stringWithFormat:@"%.2f",totalBillDealDiscounts];
                    
                    float roundOffValue = [total_price_str floatValue] - [billAmountStr floatValue];
                    if(roundOffValue < 0)
                        roundOffValue = -roundOffValue;
                    billDetails[ROUND_OFF] = [NSString stringWithFormat:@"%.2f",roundOffValue];
                    
                    billDetails[TOTAL_BILL_GROSS] = bill_sub_total_str;
                    
                    //upto here on 17/08/2018....
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                    return nil;
                }
                
                NSString *itransaction_query = [NSString stringWithFormat:@"select * from billing_transactions where bill_id='%@'",billId];
                
                const char *sqlStatement2 = itransaction_query.UTF8String;
                
                NSMutableArray *transactions = [[NSMutableArray alloc]init];
                NSMutableArray *returnItems = [[NSMutableArray alloc]init];
                NSMutableArray *exchangeItems = [[NSMutableArray alloc]init];
                NSString * cardNumberStr = @"";
                if(sqlite3_prepare_v2(database, sqlStatement2, -1, &selectStmt, NULL) == SQLITE_OK) {
                    
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        
                        NSString  *mode_of_payment = @((char *)sqlite3_column_text(selectStmt, 1));
                        transaction_id = @((char *)sqlite3_column_text(selectStmt, 2));
                        NSString  *card_type = @((char *)sqlite3_column_text(selectStmt, 3));
                        NSString  * card_subtype = @((char *)sqlite3_column_text(selectStmt, 4));
                        NSString  *card_no = @((char *)sqlite3_column_text(selectStmt, 5));
                        NSString  *paid_amt = @((char *)sqlite3_column_text(selectStmt, 6));
                        
                        //newly added
                        //added by Srinivasulu on 31/03/2018....
                        if(card_no.length){
                            
                            if(cardNumberStr.length)
                                card_no = [NSString stringWithFormat:@"%@%@",@",",card_no];
                            
                            cardNumberStr = [NSString stringWithFormat:@"%@%@",cardNumberStr,card_no];
                        }
                        
                        NSString  * transActionTypeStr = @"0";
                        
                        if( (char *)sqlite3_column_text(selectStmt, 15)  && (sqlite3_column_text(selectStmt, 15) != nil) ){
                            
                            transActionTypeStr = @((char *)sqlite3_column_text(selectStmt, 15));
                        }
                        
                        //upto here on 31/03/2018....
                        
                        NSString  *date;
                        
                        if (sqlite3_column_text(selectStmt, 7) != nil) {
                            
                            date = @((char *)sqlite3_column_text(selectStmt, 7));
                            
                        }
                        else {
                            date = @"";
                        }
                        
                        NSString  *cardInfo;
                        
                        if (sqlite3_column_text(selectStmt, 8) != nil) {
                            
                            cardInfo = @((char *)sqlite3_column_text(selectStmt, 8));
                        }
                        else{
                            
                            cardInfo = @"";
                        }
                        
                        NSString  *apprCode;
                        
                        if (sqlite3_column_text(selectStmt, 9) != nil) {
                            
                            apprCode = @((char *)sqlite3_column_text(selectStmt, 9));
                        }
                        else{
                            
                            apprCode = @"";
                        }
                        
                        NSString  *bankName = @"" ;
                        
                        if (sqlite3_column_text(selectStmt, 10) != nil) {
                            
                            bankName = @((char *)sqlite3_column_text(selectStmt,10));
                        }
                        
                        double change = sqlite3_column_double(selectStmt, 11);
                        double received_amt = sqlite3_column_double(selectStmt, 12);
                        
                        
                        NSDictionary *temp = @{TRANSACTION_ID: transaction_id,@"dateTime": date,MODE_OF_PAY: mode_of_payment,CARD_TYPE: card_type,@"couponNumber": card_no,PAID_AMT: paid_amt,CARD_INFO: cardInfo,APPROVAL_CODE: apprCode,BANK_NAME: bankName,CHANGE_RETURN: [NSString stringWithFormat:@"%.2f",change],RECEIVED_AMOUNT: [NSString stringWithFormat:@"%.2f",received_amt],TRANSACTION_TYPE_FLAG: transActionTypeStr,RECEIVED_AMOUNTT:[NSString stringWithFormat:@"%.2f",received_amt]};
                        
                        // NSString *temp = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",transaction_id,@"#",mode_of_payment,@"#",card_type,@"#",card_subtype,@"#",card_no,@"#",paid_amt,@"#",date];
                        [transactions addObject:temp];
                        
                    }
                    sqlite3_reset(selectStmt);
                    
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                    
                    billDetails[@"billingTransactions"] = transactions;
                    billDetails[CARD_NUM] = cardNumberStr;
                    
                    
                    billDetails[DENOMINATION] = [self getDenomination:billId];
                    billDetails[kItemCampigns] = [self getItemsCampaignsInfo:billId];
                    
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                    billDetails[@"billingTransactions"] = transactions;
                    billDetails[DENOMINATION] = [self getDenomination:billId];
                    billDetails[@"billReturnItems"] = returnItems;
                    billDetails[@"billExchangedItems"] = exchangeItems;
                    // return nil;
                }
                NSString *billItemTaxesQry = [NSString stringWithFormat:@"select * from billing_item_taxes where bill_id='%@'",billId];
                
                const char *sqlStatement7 = billItemTaxesQry.UTF8String;
                
                NSMutableArray *billItemTaxes = [[NSMutableArray alloc]init];
                
                if(sqlite3_prepare_v2(database, sqlStatement7, -1, &selectStmt, NULL) == SQLITE_OK) {
                    
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        //                        sqlStatement = "insert into billing_item_taxes(bill_id, sku_id,plu_code,tax_category,tax_code,tax_type,tax_rate,tax_value) Values(?,?,?,?,?,?,?,?)";
                        
                        NSString  *bill_id = @((char *)sqlite3_column_text(selectStmt, 0));
                        NSString * sku_id = @((char *)sqlite3_column_text(selectStmt, 1));
                        NSString  * plu_code = @((char *)sqlite3_column_text(selectStmt, 2));
                        
                        NSString *tax_category = @"";
                        
                        if (sqlite3_column_text(selectStmt, 3) != nil) {
                            
                            tax_category = @((char *)sqlite3_column_text(selectStmt, 3));
                            
                        }
                        
                        NSString *tax_code = @"";
                        
                        if (sqlite3_column_text(selectStmt, 4) != nil) {
                            
                            tax_code = @((char *)sqlite3_column_text(selectStmt, 4));
                            
                        }
                        
                        NSString *tax_type = @"";
                        
                        if (sqlite3_column_text(selectStmt, 5) != nil) {
                            
                            tax_type = @((char *)sqlite3_column_text(selectStmt, 5));
                            
                        }
                        NSString *tax_rate = @"";
                        
                        if (sqlite3_column_text(selectStmt, 6) != nil) {
                            
                            tax_rate = @((char *)sqlite3_column_text(selectStmt, 6));
                            
                        }
                        NSString *tax_value = @"";
                        
                        if (sqlite3_column_text(selectStmt, 7) != nil) {
                            
                            tax_value = @((char *)sqlite3_column_text(selectStmt, 7));
                            
                        }
                        
                        //newly added
                        NSMutableDictionary *itemTaxDic = [NSMutableDictionary new];
                        [itemTaxDic setValue:bill_id forKey:@"billId"];
                        [itemTaxDic setValue:sku_id forKey:@"sku_id"];
                        [itemTaxDic setValue:plu_code forKey:@"plu_code"];
                        [itemTaxDic setValue:tax_category forKey:@"tax_category"];
                        [itemTaxDic setValue:tax_code forKey:@"tax_code"];
                        [itemTaxDic setValue:tax_type forKey:@"tax_type"];
                        [itemTaxDic setValue:tax_rate forKey:@"tax_rate"];
                        [itemTaxDic setValue:tax_value forKey:@"tax_value"];
                        
                        // NSString *temp = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",transaction_id,@"#",mode_of_payment,@"#",card_type,@"#",card_subtype,@"#",card_no,@"#",paid_amt,@"#",date];
                        [billItemTaxes addObject:itemTaxDic];
                        
                    }
                    sqlite3_reset(selectStmt);
                    
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                    
                    billDetails[BILL_ITEM_TAXES] = billItemTaxes;
                    
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                    billDetails[BILL_ITEM_TAXES] = billItemTaxes;
                    // return nil;
                }
                
                NSString *return_items_query = [NSString stringWithFormat:@"select * from return_items where bill_id='%@'",billId];
                
                const char *sqlStatement3 = return_items_query.UTF8String;
                if(sqlite3_prepare_v2(database, sqlStatement3, -1, &selectStmt, NULL) == SQLITE_OK) {
                    
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        
                        NSString  * item_name = @((char *)sqlite3_column_text(selectStmt, 3));
                        NSString  * dateTime = @((char *)sqlite3_column_text(selectStmt, 7));
                        NSString  * item_price = @((char *)sqlite3_column_text(selectStmt, 5));
                        NSString  * cost = @((char *)sqlite3_column_text(selectStmt, 6));
                        NSString  * quantity = @((char *)sqlite3_column_text(selectStmt, 4));
                        NSString  * sku_id = @((char *)sqlite3_column_text(selectStmt, 2));
                        
                        NSString *pluCode = @"";
                        
                        if (sqlite3_column_text(selectStmt, 13) != nil) {
                            
                            pluCode = @((char *)sqlite3_column_text(selectStmt, 13));
                            
                        }
                        
                        NSDictionary *temp = @{ITEM_NAME: item_name,DATE_TIME: dateTime,ITEM_UNIT_PRICE: item_price,COST: cost,QUANTITY: quantity,SKU_ID: sku_id,PLU_CODE: pluCode};
                        
                        
                        
                        // NSString *temp = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",transaction_id,@"#",mode_of_payment,@"#",card_type,@"#",card_subtype,@"#",card_no,@"#",paid_amt,@"#",date];
                        [returnItems addObject:temp];
                        
                    }
                    billDetails[@"billReturnItems"] = returnItems;
                    sqlite3_reset(selectStmt);
                    
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                    
                    
                }
                else {
                    billDetails[@"billReturnItems"] = returnItems;
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                NSString *exchange_items_query = [NSString stringWithFormat:@"select * from exchange_items where bill_id='%@'",billId];
                
                const char *sqlStatement4 = exchange_items_query.UTF8String;
                if(sqlite3_prepare_v2(database, sqlStatement4, -1, &selectStmt, NULL) == SQLITE_OK) {
                    
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        
                        NSString  *item_name = @((char *)sqlite3_column_text(selectStmt, 3));
                        NSString *dateTime = @((char *)sqlite3_column_text(selectStmt, 7));
                        NSString  *item_price = @((char *)sqlite3_column_text(selectStmt, 5));
                        NSString  *cost = @((char *)sqlite3_column_text(selectStmt, 6));
                        NSString  *quantity = @((char *)sqlite3_column_text(selectStmt, 4));
                        NSString  *sku_id = @((char *)sqlite3_column_text(selectStmt, 2));
                        NSString *pluCode = @"";
                        
                        if (sqlite3_column_text(selectStmt, 14) != nil) {
                            
                            pluCode = @((char *)sqlite3_column_text(selectStmt, 14));
                            
                        }
                        
                        NSDictionary *temp = @{ITEM_NAME: item_name,DATE_TIME: dateTime,ITEM_UNIT_PRICE: item_price,COST: cost,QUANTITY: quantity,SKU_ID: sku_id,PLU_CODE: pluCode};
                        
                        // NSString *temp = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@",transaction_id,@"#",mode_of_payment,@"#",card_type,@"#",card_subtype,@"#",card_no,@"#",paid_amt,@"#",date];
                        [exchangeItems addObject:temp];
                        
                    }
                    billDetails[@"billExchangedItems"] = exchangeItems;
                    sqlite3_reset(selectStmt);
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                }
                else {
                    billDetails[@"billExchangedItems"] = exchangeItems;
                    sqlite3_reset(selectStmt);
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                    //                    return nil;
                }
                
                
                
                NSString * billItemTaxesInGroupedFrom_query = [NSString stringWithFormat:@"select t.tax_rate,t.tax_code,sum(t.tax_value) from billing_item_taxes t where  t.bill_id='%@' group by t.tax_rate,t.tax_code",billId];
                const char * billItemTaxesInGroupedFromSqlStmt = billItemTaxesInGroupedFrom_query.UTF8String;
                
                NSMutableArray * billItemTaxesInGroupedFrom = [[NSMutableArray alloc]init];
                
                if(sqlite3_prepare_v2(database, billItemTaxesInGroupedFromSqlStmt, -1, &selectStmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSString * tax_code = @"";
                        NSString * tax_rate = @"";
                        NSString * tax_value = @"";
                        
                        if (sqlite3_column_text(selectStmt, 0) != nil) {
                            
                            tax_code = @((char *)sqlite3_column_text(selectStmt, 0));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 1) != nil) {
                            
                            tax_rate = @((char *)sqlite3_column_text(selectStmt,1));
                        }
                        
                        if (sqlite3_column_text(selectStmt, 2) != nil) {
                            
                            tax_value = @((char *)sqlite3_column_text(selectStmt, 2));
                        }
                        
                        
                        NSMutableDictionary *itemTaxDic = [NSMutableDictionary new];
                        [itemTaxDic setValue:tax_code forKey:TAX_CODE];
                        [itemTaxDic setValue:tax_rate forKey:TAX_RATE];
                        [itemTaxDic setValue:tax_value forKey:TAX_VALUE];
                        
                        [billItemTaxesInGroupedFrom addObject:itemTaxDic];
                        
                    }
                    sqlite3_reset(selectStmt);
                    
                    sqlite3_finalize(selectStmt);
                    selectStmt = nil;
                    
                    billDetails[TAX_AGGREGATION_LIST] = billItemTaxesInGroupedFrom;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                    billDetails[TAX_AGGREGATION_LIST] = billItemTaxes;
                }
                
                
                //added by Srinivausulu on 20/08/2018....
                NSMutableArray * taxAggregationListByTaxRateArr = [NSMutableArray new];
                
                for (NSDictionary * billTaxDic in billItemTaxes) {
                    
                    NSString * taxCodeStr = [billTaxDic valueForKey:Tax_code];
                    NSString * taxRateStr = [NSString stringWithFormat:@"%.2f%@", [[billTaxDic valueForKey:Tax_rate] floatValue],@"%"];
                    
                    BOOL isNewTaxCategory = true;
                    BOOL isDifferentPercentage = true;
                    
                    NSMutableDictionary * foundMutableAggrDic;
                    NSMutableDictionary * foundMutablePercentDic;
                    
                    
                    int taxAggrFoundCount = 0;
                    int taxPercentFoundCount = 0;
                    
                    for(NSDictionary * taxAggrDic in taxAggregationListByTaxRateArr){
                        
                        if([[taxAggrDic valueForKey:TAX_NAME] isEqualToString:taxCodeStr]){
                            isNewTaxCategory = false;
                            foundMutableAggrDic = [taxAggrDic mutableCopy];
                            
                            for(NSDictionary * perDic in [taxAggrDic valueForKey:ITEM_TAXES_LIST]){
                                
                                if([[perDic valueForKey:TAX_RATE] isEqualToString:taxRateStr] && [[perDic valueForKey:TAX_CODE] isEqualToString:taxCodeStr]){
                                    
                                    isDifferentPercentage = false;
                                    foundMutablePercentDic = [perDic mutableCopy];
                                    break;
                                }
                                taxPercentFoundCount ++;
                            }
                            break;
                        }
                        taxAggrFoundCount ++;
                    }
                    
                    
                    if(!isNewTaxCategory){
                        
                        if(isDifferentPercentage){
                            
                            NSMutableArray * percentDicArr = [[foundMutableAggrDic valueForKey:ITEM_TAXES_LIST] mutableCopy];
                            
                            float taxValue = [[billTaxDic valueForKey:Tax_value] floatValue];
                            NSString * taxAmountStr = [NSString stringWithFormat:@"%.2f", taxValue];
                            
                            NSMutableDictionary * itemPercentTaxDic = [NSMutableDictionary new];
                            
                            [itemPercentTaxDic setValue:taxCodeStr forKey:TAX_CODE];
                            [itemPercentTaxDic setValue:@"0.00" forKey:BASE_AMOUNT];
                            [itemPercentTaxDic setValue:taxRateStr forKey:TAX_RATE];
                            [itemPercentTaxDic setValue:taxAmountStr forKey:TAX_VALUE];
                            
                            [percentDicArr addObject:itemPercentTaxDic];
                            [foundMutableAggrDic setObject:percentDicArr forKey:ITEM_TAXES_LIST];
                            
                            [taxAggregationListByTaxRateArr replaceObjectAtIndex:taxAggrFoundCount withObject:foundMutableAggrDic];
                        }
                        else{
                            
                            NSMutableArray * percentDicArr = [[foundMutableAggrDic valueForKey:ITEM_TAXES_LIST] mutableCopy];
                            
                            float taxValue = [[billTaxDic valueForKey:Tax_value] floatValue];
                            float existingTotalTaxValue = [[foundMutableAggrDic valueForKey:TOTAL_TAX] floatValue];
                            float existingPercentTaxValue = [[foundMutablePercentDic valueForKey:TOTAL_TAX] floatValue];
                            
                            [foundMutablePercentDic setValue:[NSString stringWithFormat:@"%.2f",(existingPercentTaxValue + taxValue)] forKey:TAX_VALUE];
                            [percentDicArr replaceObjectAtIndex:taxPercentFoundCount withObject:foundMutablePercentDic];
                            
                            [foundMutableAggrDic setValue:[NSString stringWithFormat:@"%.2f",(existingTotalTaxValue + taxValue)] forKey:TAX_VALUE];
                            [taxAggregationListByTaxRateArr replaceObjectAtIndex:taxAggrFoundCount withObject:foundMutableAggrDic];
                        }
                    }
                    else {
                        NSMutableDictionary * itemTaxDic = [NSMutableDictionary new];
                        
                        float taxValue = [[billTaxDic valueForKey:Tax_value] floatValue];
                        NSString * taxAmountStr = [NSString stringWithFormat:@"%.2f", taxValue];
                        
                        [itemTaxDic setValue:taxCodeStr forKey:TAX_NAME];
                        [itemTaxDic setValue:@"0.00" forKey:BASE_AMOUNT_TOTAL];
                        [itemTaxDic setValue:taxAmountStr forKey:TOTAL_TAX];
                        
                        NSMutableDictionary * itemPercentTaxDic = [NSMutableDictionary new];
                        
                        [itemPercentTaxDic setValue:taxCodeStr forKey:TAX_CODE];
                        [itemPercentTaxDic setValue:@"0.00" forKey:BASE_AMOUNT];
                        [itemPercentTaxDic setValue:taxRateStr forKey:TAX_RATE];
                        [itemPercentTaxDic setValue:taxAmountStr forKey:TAX_VALUE];
                        
                        NSArray * tempArr = [NSArray arrayWithObjects:itemPercentTaxDic, nil];
                        
                        [itemTaxDic setValue:tempArr forKey:ITEM_TAXES_LIST];
                        
                        [taxAggregationListByTaxRateArr addObject:itemTaxDic];
                    }
                }
                
                
                
                NSMutableArray * taxBaseAmountsArr = [NSMutableArray new];
                for(int i = 0; i < items.count; i++){
                    
                    NSMutableArray * itemTaxesListArr = [NSMutableArray new];
                    NSMutableDictionary * tempItemsDic = [items objectAtIndex:i];
                    
                    for (NSDictionary * billTaxDic in billItemTaxes) {
                        if([[tempItemsDic valueForKey:PLU_CODE] isEqualToString:[billTaxDic valueForKey:plu_code_]]){
                            
                            [itemTaxesListArr addObject:tempItemsDic];
                            
                            NSString * taxCodeStr = [billTaxDic valueForKey:Tax_code];
                            NSString * taxRateStr = [NSString stringWithFormat:@"%.2f%@", [[billTaxDic valueForKey:Tax_rate] floatValue],@"%"];
                            NSString * itemTotalPriceStr = [NSString stringWithFormat:@"%.2f", [[tempItemsDic valueForKey:ITEM_TOTAL_PRICE] floatValue]];
                            
                            int itemCount = 0;
                            BOOL isFound = false;
                            
                            for(NSDictionary * perDic in taxBaseAmountsArr){
                                
                                if([[perDic valueForKey:TAX_RATE] isEqualToString:taxRateStr] && [[perDic valueForKey:TAX_CODE] isEqualToString:taxCodeStr]){
                                    
                                    isFound = true;
                                    break;
                                }
                                itemCount++;
                            }
                            
                            if(isFound){
                                NSMutableDictionary * itemPercentTaxDic = [[taxBaseAmountsArr objectAtIndex:itemCount] mutableCopy];
                                
                                itemTotalPriceStr = [NSString stringWithFormat:@"%.2f", [[itemPercentTaxDic valueForKey:BASE_AMOUNT] floatValue] + [itemTotalPriceStr floatValue]];
                                [itemPercentTaxDic setValue:itemTotalPriceStr forKey:BASE_AMOUNT];
                                [taxBaseAmountsArr replaceObjectAtIndex:itemCount withObject:itemPercentTaxDic];
                            }
                            else{
                                
                                NSMutableDictionary * itemPercentTaxDic = [NSMutableDictionary new];
                                
                                [itemPercentTaxDic setValue:taxCodeStr forKey:TAX_CODE];
                                [itemPercentTaxDic setValue:itemTotalPriceStr forKey:BASE_AMOUNT];
                                [itemPercentTaxDic setValue:taxRateStr forKey:TAX_RATE];
                                
                                [taxBaseAmountsArr addObject:itemPercentTaxDic];
                            }
                        }
                    }
                    
                    [tempItemsDic setObject:itemTaxesListArr forKey:ITEM_TAXES_LIST];
                    [items replaceObjectAtIndex:i withObject:tempItemsDic];
                }
                
                for(int i = 0; i < returnItems.count; i++){
                    NSMutableArray * itemTaxesListArr = [NSMutableArray new];
                    NSMutableDictionary * tempReturnItemDic = [items objectAtIndex:i];
                    
                    for (NSDictionary * billTaxDic in billItemTaxes) {
                        if([[tempReturnItemDic valueForKey:PLU_CODE] isEqualToString:[billTaxDic valueForKey:plu_code_]]){
                            
                            [itemTaxesListArr addObject:tempReturnItemDic];
                            
                        }
                    }
                    
                    
                    for(int j = 0; j < items.count; j++){
                        
                        NSMutableDictionary * tempItemsDic = [items objectAtIndex:j];
                        
                        if([[tempReturnItemDic valueForKey:PLU_CODE] isEqualToString:[tempItemsDic valueForKey:PLU_CODE]]){
                            
                            [tempItemsDic setObject:[tempReturnItemDic valueForKey:DISCOUNT_PRICE_3] forKey:RETURN_ITEM_DISCOUNT_STR];
                            [tempItemsDic setObject:[tempReturnItemDic valueForKey:HSN_CODE] forKey:HSN_CODE];
                        }
                    }
                    
                    [tempReturnItemDic setObject:[tempReturnItemDic valueForKey:QUANTITY] forKey:RETURN_QTY_1];
                    [tempReturnItemDic setObject:[tempReturnItemDic valueForKey:COST] forKey:RETURN_NET_COST];
                    
                    
                    [tempReturnItemDic setObject:itemTaxesListArr forKey:ITEM_TAXES_LIST];
                    [items replaceObjectAtIndex:i withObject:tempReturnItemDic];
                }
                
                
                for(int i = 0; i < exchangeItems.count; i++){
                    NSMutableArray * itemTaxesListArr = [NSMutableArray new];
                    NSMutableDictionary * tempExchangeItemDic = [items objectAtIndex:i];
                    
                    for (NSDictionary * billTaxDic in billItemTaxes) {
                        if([[tempExchangeItemDic valueForKey:PLU_CODE] isEqualToString:[billTaxDic valueForKey:plu_code_]]){
                            
                            [itemTaxesListArr addObject:tempExchangeItemDic];
                            
                        }
                    }
                    
                    
                    for(int j = 0; j < items.count; j++){
                        
                        NSMutableDictionary * tempItemsDic = [items objectAtIndex:j];
                        
                        if([[tempExchangeItemDic valueForKey:PLU_CODE] isEqualToString:[tempItemsDic valueForKey:PLU_CODE]]){
                            
                            [tempItemsDic setObject:[tempExchangeItemDic valueForKey:DISCOUNT_PRICE_3] forKey:RETURN_ITEM_DISCOUNT_STR];
                            [tempItemsDic setObject:[tempExchangeItemDic valueForKey:HSN_CODE] forKey:HSN_CODE];
                        }
                    }
                    
                    [tempExchangeItemDic setObject:[tempExchangeItemDic valueForKey:QUANTITY] forKey:RETURN_QTY_1];
                    [tempExchangeItemDic setObject:[tempExchangeItemDic valueForKey:COST] forKey:RETURN_NET_COST];
                    
                    
                    [tempExchangeItemDic setObject:itemTaxesListArr forKey:ITEM_TAXES_LIST];
                    [items replaceObjectAtIndex:i withObject:tempExchangeItemDic];
                }
                
                for(int i = 0; i < taxAggregationListByTaxRateArr.count; i++){
                    NSMutableDictionary * tempAggrDic = [[taxAggregationListByTaxRateArr objectAtIndex:i] mutableCopy];
                    
                    NSString * taxName_CodeStr = [tempAggrDic valueForKey:TAX_NAME];
                    
                    for(NSDictionary * tempBaseDic in taxBaseAmountsArr){
                        
                        NSString * taxCodeStr = [tempBaseDic valueForKey:TAX_CODE];
                        NSString * taxRateStr = [tempBaseDic valueForKey:TAX_RATE];
                        
                        
                        if([[tempBaseDic valueForKey:TAX_CODE] isEqualToString:taxName_CodeStr]){
                            NSString * baseAmountStr = [NSString stringWithFormat:@"%.2f", [[tempBaseDic valueForKey:BASE_AMOUNT] floatValue]];
                            
                            [tempAggrDic setValue:[NSString stringWithFormat:@"%.2f", [[tempAggrDic valueForKey:BASE_AMOUNT_TOTAL] floatValue] + [baseAmountStr floatValue]] forKey:BASE_AMOUNT_TOTAL];
                            
                            NSMutableArray * taxListArr = [[tempAggrDic valueForKey:ITEM_TAXES_LIST] mutableCopy];
                            
                            for(int j = 0; j < taxListArr.count; j++){
                                NSMutableDictionary * tempTaxListDic = [[taxListArr objectAtIndex:j] mutableCopy];
                                if([[tempTaxListDic valueForKey:TAX_RATE] isEqualToString:taxRateStr] && [[tempTaxListDic valueForKey:TAX_CODE] isEqualToString:taxCodeStr]){
                                    
                                    [tempTaxListDic setValue:[NSString stringWithFormat:@"%.2f", [[tempTaxListDic valueForKey:BASE_AMOUNT] floatValue] + [baseAmountStr floatValue]] forKey:BASE_AMOUNT];
                                    [taxListArr replaceObjectAtIndex:j withObject:tempTaxListDic];
                                }
                            }
                            
                            [tempAggrDic setValue:taxListArr forKey:ITEM_TAXES_LIST];
                            
                        }
                    }
                    
                    [taxAggregationListByTaxRateArr replaceObjectAtIndex:i withObject:tempAggrDic];
                }
                
                billDetails[BILL_ITEMS] = items;
                billDetails[@"billReturnItems"] = returnItems;
                billDetails[@"billExchangedItems"] = exchangeItems;
                
                billDetails[TAX_AGGREGATION_LIST_BY_TAX_RATE] = taxAggregationListByTaxRateArr;
                
                //upto here on 20/08/2018....
            }
            
        }
    }
    @catch (NSException *exception) {
        sqlite3_reset(selectStmt);
        sqlite3_finalize(selectStmt);
        NSLog(@"%@",exception);
    }
    @finally {
        sqlite3_close(database);
        return billDetails;
        
    }
    //commented by Srinivasulu on 17/08/2018.. reason already in finally return is there.. not middle also return in their..
    //    return billDetails;
}

#pragma -mark upto here on 06/08/2017...  to retrive the bills in local....


/*/**
 *
 * @author Kesav A
 * @Modified By:
 * @created on :
 * @param dealsList
 * @return int
 * This method is used apply item specific offers
 *'/'
 
 private static void applyPriceBasedConfigurationOffers(List<ApplyOffer> applyOffersList) {
 float totalOffer = 0;
 int itemId = 0;
 Map<String, Float> discountInfo = new LinkedHashMap<String, Float>();
 Map<String, Map<String, Float>> skuDiscountInfo = new LinkedHashMap<String, Map<String, Float>>();
 if (applyOffersList != null && applyOffersList.size() > 0) {
 List<String> discountIdsList = new ArrayList<String>();
 for (int p = 0; p < applyOffersList.size(); p++) {
 ApplyOffer applyOffer = applyOffersList.get(p);
 List<OfferRanges> offerRangesList = applyOffer.getOfferRangesList();
 float minPurchaseQty = 0, rewardValue = 0;
 String rewardType = applyOffer.getRewardType();
 for (OfferRanges range : offerRangesList) {
 
 if (range.getRangeMode() == null || range.getRangeMode().contains("condition") || range.getRangeMode().toLowerCase().contains("both")) {
 minPurchaseQty = range.getMinimumPurchaseQuantity();
 }
 applyOffer(range.getStartPrice(), range.getEndPrice(), range.getMinimumPurchaseQuantity(), range.getRewardValue(), individualItemIndexes,applyOffer.getOfferID());
 }
 applyOffer.setRewardValue(rewardValue);
 }
 }
 System.out.println("mProductOfferPrice:::::::::" + mProductOfferPrice);
 System.out.println("totalOffer:::::::::" + totalOffer);
 }*/

/**
 * @description  here are we retriving bill complete details....
 * @date         17/08/2017....
 * @method       applyPriceBasedConfigurationOffers:
 * @author       Srinivasulu
 * @param        NSString
 * @param
 * @return       void
 *
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 *
 */

-(void)applyPriceBasedConfigurationOffers:(NSArray *)priceBaseArr{
    
    @try {
        
        // offerModelObj.offerRangesList = rangesArr;
        // applyOfferModel.offerRangesList = offerSlabsList;
        // OfferModel *offerModelObj
        
        for(ApplyOfferModel * applyOfferModel in priceBaseArr){
            
            for(int i = 0; i <  applyOfferModel.offerRangesList.count; i++){
                
                NSMutableArray * rangeArr =  [applyOfferModel.offerRangesList mutableCopy];
                
                
                // NSMutableArray *offerRangesList = applyOffer.offerRangesList;
                // individualItemIndexesInCombo = [NSMutableArray new];
                
                // for (OfferRangesModel *range in offerRangesList) {
                for(OfferRangesModel * offerRangesModelArr in  rangeArr){
                    
                    if((offerRangesModelArr.groupItemsList).count){
                        
                        //added by Srinivasulu on 08/09/2017....
                        
                        
                        
                        //NSMutableArray *commonSkuList = [self findDuplicates:offerRangesModelArr.groupItemsList];
                        NSMutableArray *indices = [NSMutableArray new];
                        
                        
                        int i,count=0;
                        
                        for (NSString *str in offerRangesModelArr.groupItemsList) {
                            
                            for (i = 0; i < itemsSkuIdList.count; i++) {
                                if ([str isEqualToString:itemsSkuIdList[i]] && ![indices containsObject:@(i)]) {
                                    indices[count++] = @(i);
                                    
                                }
                            }
                        }
                        
                        
                        [self applyPriceBasedConfigurationOffers:offerRangesModelArr.startRangePrice endRange:offerRangesModelArr.endRangePrice rewardValue:offerRangesModelArr.rewardValue individualItemsIndexes:indices offerId:offerRangesModelArr.offerId];
                        
                        //upto here on 08/09/2017....
                        
                    }
                }
                
            }
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}


/**
 * @description  here are we retriving bill complete details....
 * @date         17/08/2017....
 * @method       applyPriceBasedConfigurationOffers:--  endRange:--  rewardValue:-- individualItemsIndexes:-- offerId:--
 * @author       Srinivasulu
 *
 * @param        float
 * @param        float
 * @param        float
 * @param        NSArray
 * @param        NSString
 * @param
 * @return       void
 *
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 *
 */

-(void)applyPriceBasedConfigurationOffers:(float )startRange   endRange:(float )endRange  rewardValue:(float )rewardValue individualItemsIndexes:(NSArray *)individualItemsIndexeArr offerId:(NSString *)offerIdStr  {
    
    @try {
        
        for(int i = 0; i < individualItemsIndexeArr.count; i++){
            
            
            
            int index = (int)individualItemsIndexeArr[i];
            
            BOOL isAppliedToALLPrice = false;
            
            
            
            float itemPrice = [itemsUnitPriceList[index] floatValue];
            
            
            float itemQty = [itemsIndividualQtyList[index] floatValue];
            
            if(![itemsStatusList[index] isEqualToString:@"void"]){
                
                
                if((startRange > endRange) && (endRange == 0)){
                    
                    isAppliedToALLPrice = true;
                }
                
                if(!isAppliedToALLPrice){
                    
                    if( (itemPrice >= startRange) && (itemPrice <= endRange) ){
                        
                        float totalOfferPrice= (itemPrice * itemQty) - (rewardValue * itemQty);
                        mProductOfferPrice[index] = @(totalOfferPrice);
                        discountIdArrayList[index] = offerIdStr;
                        discountTypeArrayList[index] = @"Offer";
                    }
                }
                else{
                    
                    if(itemPrice >= startRange){
                        
                        float totalOfferPrice = (itemPrice * itemQty) - (rewardValue * itemQty);
                        
                        mProductOfferPrice[index] = @(totalOfferPrice);
                        discountIdArrayList[index] = offerIdStr;
                        discountTypeArrayList[index] = @"Offer";
                    }
                }
            }
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}


/*
 
 private static void applyPriceBasedConfigurationOffers(List<ApplyOffer> applyOffersList) {
 float totalOffer = 0;
 int itemId = 0;
 Map<String, Float> discountInfo = new LinkedHashMap<String, Float>();
 Map<String, Map<String, Float>> skuDiscountInfo = new LinkedHashMap<String, Map<String, Float>>();
 if (applyOffersList != null && applyOffersList.size() > 0) {
 List<String> discountIdsList = new ArrayList<String>();
 for (int p = 0; p < applyOffersList.size(); p++) {
 ApplyOffer applyOffer = applyOffersList.get(p);
 List<OfferRanges> offerRangesList = applyOffer.getOfferRangesList();
 float minPurchaseQty = 0, rewardValue = 0;
 String rewardType = applyOffer.getRewardType();
 for (OfferRanges range : offerRangesList) {
 
 if (range.getRangeMode() == null || range.getRangeMode().contains("condition") || range.getRangeMode().toLowerCase().contains("both")) {
 minPurchaseQty = range.getMinimumPurchaseQuantity();
 }
 applyOffer(range.getStartPrice(), range.getEndPrice(), range.getMinimumPurchaseQuantity(), range.getRewardValue(), individualItemIndexes,applyOffer.getOfferID());
 }
 applyOffer.setRewardValue(rewardValue);
 }
 }
 System.out.println("mProductOfferPrice:::::::::" + mProductOfferPrice);
 System.out.println("totalOffer:::::::::" + totalOffer);
 }
 
 
 /'**
 * @author Kesav A
 * @Modified By:
 * @created on :
 * @param dealsList
 * @return int
 * This method is used apply item specific offers
 *'/
 public static boolean applyOffer(float startRange,float endRange ,float minmumPurchaseQty,float rewardValue,List<Integer> individualItemIndexes,String offerId){
 boolean applied=false;
 try{
 for(Integer itemIndex:individualItemIndexes){
 float itemPrice=mProductUnitPriceArrayList.get(itemIndex);
 float itemQty=mProductIndividualQtyArrayList.get(itemIndex);
 boolean aboveFlag=false;
 if(!mProductStatusArrayList.get(itemIndex).equals("void")){
 if(startRange>endRange && endRange==0){
 aboveFlag=true;
 }
 if(!aboveFlag){
 if(itemPrice >= startRange && itemPrice <= endRange){
 float totalOfferPrice=(itemPrice*itemQty)-(rewardValue*itemQty);
 mProductOfferPrice.remove(itemIndex);
 mProductOfferPrice.add(itemIndex, totalOfferPrice);
 discountIdArrayList.remove(itemIndex);
 discountTypeArrayList.remove(itemIndex);
 discountIdArrayList.add(itemIndex, offerId);
 discountTypeArrayList.add(itemIndex, "Offer");
 applied=true;
 }
 
 }else{
 if(itemPrice>=startRange){
 float totalOfferPrice=(itemPrice*itemQty)-(rewardValue*itemQty);
 mProductOfferPrice.remove(itemIndex);
 discountIdArrayList.remove(itemIndex);
 discountTypeArrayList.remove(itemIndex);
 discountIdArrayList.add(itemIndex, offerId);
 discountTypeArrayList.add(itemIndex, "Offer");
 mProductOfferPrice.add(itemIndex, totalOfferPrice);
 applied=true;
 }
 }}
 }
 }catch(Exception e){
 e.printStackTrace();
 }
 return applied;
 }
 
 */
#pragma -mark start store_taxation && tax_sale_ranges  related downloading and retriving methods....

/**
 * @description  In this method we are taking taxCode as input and sending taxes array list as reponse....
 * @date         07/07/2017.
 * @method       saveEmployeeDetails:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason -- added comments and SQL related object need to make them as local........
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableArray *)getTaxForSku:(NSString *)taxCode {
    
    NSMutableArray * taxArrWithSaleRanges = [[NSMutableArray alloc] init];
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            NSString * query = [NSString stringWithFormat:@"select tax_name,tax_category_name,tax_rate,tax_type,tax_code from store_taxation where tax_category_name= '%@' COLLATE NOCASE and status = 'enable' COLLATE NOCASE",taxCode];
            
            const char * sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    NSString * taxCode = @"";
                    NSString * taxCategory = @"";
                    NSString * taxRate = @"";
                    NSString * taxType = @"";
                    NSString * saleRangeName = @"";
                    
                    
                    NSMutableDictionary *taxDic = [NSMutableDictionary new];
                    
                    if( (char *)sqlite3_column_text(selectStmt,0))
                        taxCode = @((char *)sqlite3_column_text(selectStmt,0));
                    
                    if( (char *)sqlite3_column_text(selectStmt,1))
                        taxCategory = @((char *)sqlite3_column_text(selectStmt,1));
                    
                    if( (char *)sqlite3_column_text(selectStmt,2))
                        taxRate = @((char *)sqlite3_column_text(selectStmt,2));
                    
                    if( (char *)sqlite3_column_text(selectStmt,3))
                        taxType = @((char *)sqlite3_column_text(selectStmt,3));
                    
                    if( (char *)sqlite3_column_text(selectStmt,4))
                        saleRangeName = @((char *)sqlite3_column_text(selectStmt,4));
                    
                    [taxDic setValue:taxCode forKey:@"taxCode"];
                    [taxDic setValue:taxCategory forKey:@"taxCategory"];
                    [taxDic setValue:taxRate forKey:@"taxRate"];
                    [taxDic setValue:taxType forKey:@"taxType"];
                    [taxDic setValue:saleRangeName forKey:@"saleRangeName"];
                    
                    [taxArrWithSaleRanges addObject:taxDic];
                    
                }
                sqlite3_finalize(selectStmt);
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
            
            for(int i = 0; i < taxArrWithSaleRanges.count; i++){
                
                NSMutableDictionary * SaleDic =  [taxArrWithSaleRanges[i] mutableCopy];
                
                if(![[SaleDic valueForKey:@"saleRangeName"] isEqualToString:@""]){
                    
                    query = [NSString stringWithFormat:@"select tax_rate,sale_value_from,sale_value_to from tax_sale_ranges where tax_code = '%@' COLLATE NOCASE",[SaleDic valueForKey:@"saleRangeName"]];
                    
                    sqlStatement = query.UTF8String;
                    
                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                        
                        NSMutableArray * saleRangeArr = [NSMutableArray new];
                        
                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                            NSString * taxCode = [SaleDic valueForKey:@"taxCode"];
                            NSString * taxRate = @"0.00";
                            NSString * saleValueFrom = @"0.00";
                            NSString * saleValueTo = @"0.00";
                            
                            NSMutableDictionary *taxDic = [NSMutableDictionary new];
                            
                            if( (char *)sqlite3_column_text(selectStmt,0))
                                taxRate = @((char *)sqlite3_column_text(selectStmt,0));
                            
                            if( (char *)sqlite3_column_text(selectStmt,1))
                                saleValueFrom = @((char *)sqlite3_column_text(selectStmt,1));
                            
                            if( (char *)sqlite3_column_text(selectStmt,2))
                                saleValueTo = @((char *)sqlite3_column_text(selectStmt,2));
                            
                            [taxDic setValue:taxCode forKey:@"taxCode"];
                            [taxDic setValue:taxRate forKey:@"taxRate"];
                            [taxDic setValue:saleValueFrom forKey:@"saleValueFrom"];
                            [taxDic setValue:saleValueTo forKey:@"saleValueTo"];
                            
                            [saleRangeArr addObject:taxDic];
                            
                        }
                        sqlite3_finalize(selectStmt);
                        
                        SaleDic[@"saleRangesList"] = saleRangeArr;
                        
                        taxArrWithSaleRanges[i] = SaleDic;
                    }
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            
        }
        
    } @catch (NSException *exception) {
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    } @finally {
        
        return taxArrWithSaleRanges;
    }
    
    
    
    //    NSString *taxVal = @"" ;
    //    NSString *taxId = @"" ;
    //    NSString *taxCategory = @"" ;
    //    NSString *taxType = @"" ;
    //    NSMutableArray *taxArr = [NSMutableArray new];
    //    @try {
    //
    //        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    //
    //
    //
    //        if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
    //
    //            //        NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%% %@ %%'",selected_SKID];
    //
    //            NSString *query = [NSString stringWithFormat:@"select * from tax_master where tax_category= '%@' COLLATE NOCASE",taxCode];
    //
    //            const char *sqlStatement = [query UTF8String];
    //
    //
    //            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
    //
    //
    //                //                int count = sqlite3_column_count(selectStmt);
    //                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
    //
    //                    // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
    //                    NSMutableDictionary *taxDic = [NSMutableDictionary new];
    //
    //                    taxVal = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt,1)];
    //                    taxId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt,3)];
    //                    taxCategory = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt,4)];
    //                    taxType = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt,5)];
    //
    //                    [taxDic setValue:taxVal forKey:@"taxRate"];
    //                    [taxDic setValue:taxId forKey:@"taxCode"];
    //                    [taxDic setValue:taxCategory forKey:@"taxCategory"];
    //                    [taxDic setValue:taxType forKey:@"taxType"];
    //
    //                    [taxArr addObject:taxDic];
    //                }
    //                sqlite3_finalize(selectStmt);
    //            }
    //            else {
    //                NSLog(@"%s",sqlite3_errmsg(database)) ;
    //            }
    //
    //        }
    //    }
    //    @catch (NSException *exception) {
    //        NSLog(@"%@",exception);
    //
    //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    //        [alert show];
    //
    //    }
    //    @finally {
    //        sqlite3_finalize(selectStmt);
    //        sqlite3_close(database);
    //
    //    }
    //
    //
    //    return taxArr;
    
}

#pragma -mark  start employee_master related downloading and retriving methods....

/**
 * @description  In this method we are getting the required field values from employee_master....
 * @date         22/09/2017...
 * @method       getOfflineEmplooyeDetails
 * @author
 * @param
 * @param
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableArray *)getOfflineEmplooyeDetails{
    
    NSMutableArray * employeeArr = [NSMutableArray new];
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            NSString *query;
            
            query = [NSString stringWithFormat:@"select * from employee_master where location ='%@' COLLATE NOCASE",presentLocation];
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    
                    NSMutableDictionary * emplooyeDetailsDic = [NSMutableDictionary new];
                    
                    //employeeCode --  firstName -- middleName --  lastName -- location
                    
                    NSString   * employeeCodeStr = @"";
                    NSString   * firstName  = @"";
                    NSString   * middleName  = @"";
                    NSString   * lastName  = @"";
                    NSString   * location  = @"";
                    
                    
                    if( (char *)sqlite3_column_text(selectStmt,0))
                        employeeCodeStr = @((char *)sqlite3_column_text(selectStmt,0));
                    
                    if( (char *)sqlite3_column_text(selectStmt,1))
                        firstName = @((char *)sqlite3_column_text(selectStmt,1));
                    
                    if( (char *)sqlite3_column_text(selectStmt,3))
                        middleName = @((char *)sqlite3_column_text(selectStmt,3));
                    
                    if( (char *)sqlite3_column_text(selectStmt,2))
                        lastName = @((char *)sqlite3_column_text(selectStmt,2));
                    
                    location = presentLocation;
                    
                    emplooyeDetailsDic = [NSMutableDictionary dictionaryWithObjects:@[employeeCodeStr,firstName,middleName,lastName,location] forKeys:@[@"employeeCode",@"firstName",@"middleName",@"lastName",@"location"]];
                    
                    [employeeArr addObject:emplooyeDetailsDic];
                }
                sqlite3_finalize(selectStmt);
                selectStmt = nil;
                
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
            
        }
        if (employeeArr.count>0) {
            //            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:[NSString stringWithFormat:@"Following Bill Id(s) cannot be uploaded to the server\n%@",[bill_ids componentsJoinedByString:@" "]] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //            [alert show];
        }
    } @catch (NSException *exception) {
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    } @finally {
        
        return employeeArr;
    }
    
}

#pragma -mark start denomination_master related downloading and retriving methods....

/**
 * @description  In this method we are getting the required field values from product_subcategory_master....
 * @date
 * @method       getDenominationDetails
 * @author
 * @param
 * @param
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason --  added comments and SQL related object need to make them as local.... added the newinputParameter....
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableArray*)getDenominationDetails:(NSString *)currencyTypeStr {
    
    NSMutableArray *denomArr = [[NSMutableArray alloc] init];
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            //        NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%% %@ %%'",selected_SKID];
            
            //            NSString *query = [NSString stringWithFormat:@"select * from sku_price_list where sku_id= '%@' or ean= '%@'",skuId,skuId];
            
            //            NSString *query = [NSString stringWithFormat:@"select den_name,den_value,den_type,den_image from denomination_master where status=1"];
            
            //changed by Srinivasulu on 16/082/107....
            
            
            //            NSString *query = [NSString stringWithFormat:@"select den_name,den_value,den_type,den_image from denomination_master where status=1"];
            
            //            NSString * query = [NSString stringWithFormat:@"select den_name,den_value,den_type,den_image from denomination_master where status=1 ORDER BY den_value ASC"];
            
            NSString * query = [NSString stringWithFormat:@"select den_name,den_value,den_type,den_image from denomination_master where status=1 and currency_code LIKE '%%%@%%' ORDER BY den_value DESC",currencyTypeStr];
            
            //upto here on 16/08/2017....
            
            const char * sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                
                
                //                        int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                    NSString  *denName = @((char *)sqlite3_column_text(selectStmt, 0));
                    float denomVal = sqlite3_column_double(selectStmt, 1);
                    int denomType = sqlite3_column_int(selectStmt, 2);
                    NSString  *denomImg = @((char *)sqlite3_column_text(selectStmt,3));
                    
                    NSDictionary *dic = @{kDenomName: denName,kDenomValue: @(denomVal),kDenomType: @(denomType),kDenomImage: denomImg};
                    
                    [denomArr addObject:dic];
                    
                }
                sqlite3_finalize(selectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    @finally {
        sqlite3_close(database);
        
    }
    
    return denomArr;
}

#pragma -mark end  related downloading and retriving methods....


#pragma  -mark start of offline Search and scan releated methods will adding an item in billing....
//Note in below for scanning items two set of methods are we can use only one set but it will take time. (i.e.,(1,2,3,4) first four are one set && (5,6,7,1) next three and first are one set)
//

/**
 * @description  In this method we are trying to read the data from sqlite file based on EAN,SKU_ID.  Which will be directly related to flag in outlet settings....
 * @date
 * @method       getProductDetails:--  isEanSearch:--
 * @author
 * @param        NSString
 * @param        NSString
 * @param
 *
 * @return       NSMutableDictionary
 *
 * @modified By  Srinivasulu on 04/08/2017 && 11/07/2017 && 12/08/2017 && 08/03/2018 && 28/04/2018 && 09/05/2018....
 * @reason       added comments,new fields, conditions for null checking and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableDictionary *)getProductDetails:(NSString *)skuId isEanSearch:(BOOL)isEanSearch {
    
    NSMutableDictionary *itemString = [NSMutableDictionary new];
    
    @try {
        
        NSString* dbPath;
        
        static sqlite3 * localDatabase = nil;
        static sqlite3_stmt * localSelectStmt =nil;
        
        if (isEanSearch) {
            
            // NSLog(@"%@",[NSDate date]);
            itemString = [self getProductDetailsWithEAN:skuId];
            // NSLog(@"%@",[NSDate date]);
            
            //        if([itemString count] > 0)
            //        return itemString;
            
            //changed by Srinivasulu on 02/11/2017..... reason is crash due to recriveise call
            //            if ([itemString count]==0 && isEanSearch) {
            //
            //                itemString = [self getProductDetailsWithEAN:skuId];
            //            }
            if (itemString.count==0 && isEanSearch) {
                
                itemString = [self getProductDetailsWithPlu:skuId];
            }
            if (itemString.count==0 && isEanSearch) {
                
                itemString = [self getProductDetails:skuId isEanSearch:NO];
            }
            
            // NSLog(@"%@",[NSDate date]);
        }
        else {
            @try {
                dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
                
                
                if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
                    
                    //        NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%% %@ %%'",selected_SKID];
                    
                    //added by Srinivasulu on 11/07/2017 && 12/08/2017 && 08/03/2018....
                    
                    //                NSString * query = [NSString stringWithFormat:@"select sku_Id,short_description,quantity,last_cost,editable,tax_code,is_manufactured_item,is_packed,brand_code,model,product_Id,is_tax_exclusive from sku_master where sku_id= '%@' or ean = '%@' LIMIT 1",skuId,skuId];
                    
                    //                NSString * query = [NSString stringWithFormat:@"select sku_Id,short_description,quantity,last_cost,editable,tax_code,is_manufactured_item,is_packed,brand_code,model,product_Id,is_tax_exclusive,section,hsn_code,brand_code,pattern_code,primary_department,secondary_department from sku_master where sku_id= '%@' or ean = '%@' LIMIT 1",skuId,skuId];
                    
                    // product_class ---------  product_sub_class
                    // PRODUCT_CLASS ---------  PRODUCT_SUB_CLASS
                    
                    //category --  sub_category  -- is_tax_on_discounted_price -- tracking_required   21/04/2018 -- kZeroStock -- zero_stock
                    
                    NSString * query = [NSString stringWithFormat:@"select sku_Id,short_description,quantity,last_cost,editable,tax_code,is_manufactured_item,is_packed,brand_code,model,product_Id,is_tax_exclusive,section,hsn_code,brand_code,pattern_code,primary_department,secondary_department,product_class,product_category,product_subcategory,is_tax_on_discounted_price,tracking_recquired,zero_stock from sku_master where sku_id= '%@' or ean = '%@' LIMIT 1",skuId,skuId];
                    
                    //upto here on 11/07/2017 && 12/08/2017 && 08/03/2018....
                    
                    const char *sqlStatement = query.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                            
                            //added by Srinivasulu on 04/08/2017 && 11/07/2017 && 12/08/2017 && 08/03/2018 && 28/04/2018....
                            
                            NSString  * skuId = @"";
                            NSString  * name = @"";
                            NSString  * description = @"";
                            NSString  * quantity = @"";
                            NSString  * price = @"0.00";
                            int isEditable = 1;
                            NSString *taxCode = @"";
                            int isManufacturedItem = 1;
                            int isPacked = 1;
                            NSString * brand = @"";
                            NSString * model = @"";
                            NSString * productId = @"";
                            int isTaxExclusive = 1;
                            
                            if((sqlite3_column_text(localSelectStmt, 0) != nil)  && (char *)sqlite3_column_text(localSelectStmt,0))
                                skuId = @((char *)sqlite3_column_text(localSelectStmt, 0));
                            
                            if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                                name = @((char *)sqlite3_column_text(localSelectStmt, 1));
                            
                            if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                                description = @((char *)sqlite3_column_text(localSelectStmt, 1));
                            
                            if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                                quantity = @((char *)sqlite3_column_text(localSelectStmt, 2));
                            //                            NSString  *sell_uom = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 4)];
                            
                            if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                                price = @((char *)sqlite3_column_text(localSelectStmt, 3));
                            
                            if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                                isEditable = sqlite3_column_int(localSelectStmt, 4);
                            
                            if ((sqlite3_column_text(localSelectStmt, 5) != nil) && ((char *)sqlite3_column_text(localSelectStmt,5)))
                                taxCode = @((char *)sqlite3_column_text(localSelectStmt, 5));
                            
                            if ((sqlite3_column_text(localSelectStmt, 6) != nil) && ((char *)sqlite3_column_text(localSelectStmt,6)))
                                isManufacturedItem = sqlite3_column_int(localSelectStmt, 6);
                            
                            if ((sqlite3_column_text(localSelectStmt, 7) != nil) && ((char *)sqlite3_column_text(localSelectStmt,7)))
                                isPacked = sqlite3_column_int(localSelectStmt, 7);
                            
                            if((sqlite3_column_text(localSelectStmt, 8) != nil) && (char *)sqlite3_column_text(localSelectStmt,8))
                                brand = @((char *)sqlite3_column_text(localSelectStmt, 8));
                            
                            if((sqlite3_column_text(localSelectStmt, 9) != nil) && (char *)sqlite3_column_text(localSelectStmt,9))
                                model = @((char *)sqlite3_column_text(localSelectStmt, 9));
                            
                            if((sqlite3_column_text(localSelectStmt, 10) != nil) && (char *)sqlite3_column_text(localSelectStmt,10))
                                productId = @((char *)sqlite3_column_text(localSelectStmt, 10));
                            
                            if ((sqlite3_column_text(localSelectStmt, 11) != nil)  && ((char *)sqlite3_column_text(localSelectStmt,11)))
                                isTaxExclusive = sqlite3_column_int(localSelectStmt, 11);
                            
                            
                            NSString * productClassStr = @"";
                            
                            NSString * sectionStr = @"";
                            NSString * hsnCodeStr = @"";
                            NSString * brandStr = @"";
                            NSString * patternStr = @"";
                            NSString * primaryDepartmentStr = @"";
                            NSString * secondaryDepartmentStr = @"";
                            
                            NSString * categoryStr = @"";
                            NSString * subCategoryStr = @"";
                            Boolean isTaxationOnDiscountPrice = true;
                            Boolean isTrackingRequired = false;
                            
                            Boolean allowZeroStockBilling = true;
                            
                            
                            if((sqlite3_column_text(localSelectStmt, 12) != nil)  && (char *)sqlite3_column_text(localSelectStmt,12))
                                sectionStr = @((char *)sqlite3_column_text(localSelectStmt, 12));
                            
                            if((sqlite3_column_text(localSelectStmt, 13) != nil)  && (char *)sqlite3_column_text(localSelectStmt,13))
                                hsnCodeStr = @((char *)sqlite3_column_text(localSelectStmt, 13));
                            
                            if((sqlite3_column_text(localSelectStmt, 14) != nil) && (char *)sqlite3_column_text(localSelectStmt,14))
                                brandStr = @((char *)sqlite3_column_text(localSelectStmt, 14));
                            
                            if((sqlite3_column_text(localSelectStmt, 15) != nil) && (char *)sqlite3_column_text(localSelectStmt,15))
                                patternStr = @((char *)sqlite3_column_text(localSelectStmt, 15));
                            
                            if((sqlite3_column_text(localSelectStmt, 16) != nil) && (char *)sqlite3_column_text(localSelectStmt,16))
                                primaryDepartmentStr = @((char *)sqlite3_column_text(localSelectStmt, 16));
                            
                            if((sqlite3_column_text(localSelectStmt, 17) != nil)  && (char *)sqlite3_column_text(localSelectStmt,17))
                                secondaryDepartmentStr = @((char *)sqlite3_column_text(localSelectStmt, 17));
                            
                            if ((sqlite3_column_text(localSelectStmt, 18) != nil)  && ((char *)sqlite3_column_text(localSelectStmt,18)))
                                productClassStr = @((char *)sqlite3_column_text(localSelectStmt, 18));
                            
                            if ((sqlite3_column_text(localSelectStmt, 19) != nil)  && ((char *)sqlite3_column_text(localSelectStmt,19)))
                                categoryStr = @((char *)sqlite3_column_text(localSelectStmt, 19));
                            
                            if ((sqlite3_column_text(localSelectStmt, 20) != nil)  && ((char *)sqlite3_column_text(localSelectStmt,20)))
                                subCategoryStr = @((char *)sqlite3_column_text(localSelectStmt, 20));
                            
                            if ((sqlite3_column_text(localSelectStmt, 21) != nil)  && ((char *)sqlite3_column_text(localSelectStmt,21)))
                                isTaxationOnDiscountPrice = sqlite3_column_int(localSelectStmt, 21);
                            
                            if ((sqlite3_column_text(localSelectStmt, 22) != nil)  && ((char *)sqlite3_column_text(localSelectStmt,22)))
                                isTrackingRequired = sqlite3_column_int(localSelectStmt, 22);
                            
                            if ((sqlite3_column_text(localSelectStmt, 23) != nil)  && ((char *)sqlite3_column_text(localSelectStmt,23)))
                                allowZeroStockBilling = sqlite3_column_int(localSelectStmt, 23);
                            
                            //                        itemString = [NSMutableDictionary dictionaryWithObjects:[NSArray arrayWithObjects:skuId,name,description,quantity,price,taxCode,[NSNumber numberWithInt:isEditable],[NSNumber numberWithInt:isManufacturedItem],[NSNumber numberWithInt:isPacked],brand,model,productId,[NSNumber numberWithInt:isTaxExclusive], nil] forKeys:[NSArray arrayWithObjects:@"skuId",@"description",@"description",@"quantity",@"price",@"taxCode",@"editable",kIsManuFacturedItem,kPackagedType,kProductBrand,kProductModel,kProductId,kItemTaxExclusive, nil]];
                            
                            //kProductCategory -- kProductSubCategory -- TAXATION_ON_DISCOUNT_PRICE -- TRACKING_REQUIRED
                            
                            itemString = [NSMutableDictionary dictionaryWithObjects:@[skuId,name,description,quantity,price,taxCode,@(isEditable),@(isManufacturedItem),@(isPacked),brand,model,productId,@(isTaxExclusive),sectionStr,hsnCodeStr,brandStr,patternStr,primaryDepartmentStr,primaryDepartmentStr,productClassStr,categoryStr,subCategoryStr,[NSNumber numberWithInt:isTaxationOnDiscountPrice],[NSNumber numberWithInt:isTrackingRequired],[NSNumber numberWithInt:allowZeroStockBilling]] forKeys:@[@"skuId",@"description",@"description",@"quantity",@"price",@"taxCode",@"editable",kIsManuFacturedItem,kPackagedType,kProductBrand,kProductModel,kProductId,kItemTaxExclusive,SECTION,HSN_CODE,kBrand,PATTERN,kPrimaryDepartment,SECONDARY_DEPARTMENT,PRODUCT_CLASS,kProductCategory,kProductSubCategory,TAXATION_ON_DISCOUNT_PRICE,TRACKING_REQUIRED,kZeroStock]];
                            
                            //upto here on 04/08/2017 && 11/07/2017 && 12/08/2017 && 08/03/2018 && 28/04/2018....
                            
                            break;
                        }
                        //                        sqlite3_reset(localSelectStmt);
                        sqlite3_finalize(localSelectStmt);
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                        return itemString;
                    }
                }
            }
            @catch (NSException *exception) {
                
                NSLog(@"%@",exception);
                
                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            @finally {
                sqlite3_close(localDatabase);
            }
            // NSLog(@"%@",[NSDate date]);
        }
        
    } @catch (NSException *exception) {
        
    }
    
    return itemString;
}

/**
 * @description  In this method we are trying to read the data from sqlite file based on EAN from sku_eans table....
 * @date
 * @method       getProductDetailsWithEAN:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       NSMutableDictionary
 *
 * @modified By  Srinivasulu on 09/05/2018....
 * @reason       added comments....
 *
 * @verified By
 * @verified On
 *
 */

- (NSMutableDictionary *)getProductDetailsWithEAN:(NSString *)ean {
    NSMutableDictionary *itemString = [NSMutableDictionary new];
    NSString *sku_id=@"";
    
    static sqlite3_stmt * localSelectStmt =nil;
    static sqlite3 * localDatabase = nil;
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            //        NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%% %@ %%'",selected_SKID];
            
            NSString *query = [NSString stringWithFormat:@"select sku_id from sku_eans  where ean = '%@' LIMIT 1",ean];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                //                        int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    if( (char *)sqlite3_column_text(localSelectStmt, 0)  && (sqlite3_column_text(localSelectStmt, 0) != nil) )
                        sku_id = @((char *)sqlite3_column_text(localSelectStmt,0));
                    break;
                }
                sqlite3_finalize(localSelectStmt);
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    @finally {
        sqlite3_close(localDatabase);
        if (sku_id.length>0) {
            
            itemString =[self getProductDetails:sku_id isEanSearch:NO];
        }
    }
    
    return itemString;
}

/**
 * @description  In this method we are trying to read the sku_id from sqlite file based on plucode from sku_price_list table....
 * @date
 * @method       getProductDetailsWithPlu:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       NSMutableDictionary
 *
 * @modified By  Srinivasulu on 09/05/2018....
 * @reason       added comments....
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableDictionary *)getProductDetailsWithPlu:(NSString *)skuId {
    
    NSMutableDictionary *itemString = [NSMutableDictionary new];
    NSString *sku_id=@"";
    static sqlite3_stmt * localSelectStmt =nil;
    static sqlite3 * localDatabase = nil;
    @try {
        @try {
            NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
            
            if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
                
                //        NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%% %@ %%'",selected_SKID];
                
                //-*-*--5
//                NSString *query = [NSString stringWithFormat:@"select sku_id from sku_price_list where plu_code= '%@'",skuId];
                NSString *query = [NSString stringWithFormat:@"select sku_id from sku_price_list where plu_code= '%@' and sku_status == 1",skuId];

                const char * sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 0)  && (sqlite3_column_text(localSelectStmt, 0) != nil) )
                            sku_id = @((char *)sqlite3_column_text(localSelectStmt,0));
                        break;
                    }
                    sqlite3_finalize(localSelectStmt);
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
                
            }
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        @finally {
            
            sqlite3_close(localDatabase);
        }
        
        if (sku_id.length>0) {
            
            itemString =[self getProductDetails:sku_id isEanSearch:NO];
        }
        //        if ([itemString count]==0) { }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    
    return itemString;
}

/**
 * @description  In this method we are trying to read the sku_price_list information from sku_price_list table....
 * @date
 * @method       getLocalPriceLists:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By  Srinivasulu on 11/07/2017 && 09/05/2018....
 * @reason       added comments, new fields....
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableArray *)getLocalPriceLists:(NSString *)skuId {
    
    NSMutableArray * priceArr = [[NSMutableArray alloc]init];
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            //changed by Srinivasulu on 11/07/2017....
            
            //            NSString * query = [NSString stringWithFormat:@"select description,sale_price,sku_id,quantity_in_hand,plu_code,cost_price,measure_range,product_range,size,color from sku_price_list where sku_id= '%@'",skuId];
            //-*-*--5
            NSString * query = [NSString stringWithFormat:@"select description,sale_price,sku_id,quantity_in_hand,plu_code,price,measure_range,product_range,size,color,product_batch_no,utility,product_sub_class,style_range,pack_size,expiry_date from sku_price_list where sku_status == 1 and (sku_id= '%@' or plu_code = '%@')",skuId,skuId];
            
            //upto here on 11/07/2017....
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                
                //                        int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    
                    //                    if(tel == (id)[NSNull null])
                    
                    //changed && added by Srinivausulu on 28/04/2017 && 11/07/2017 && 12/08/2017.....
                    
                    NSString  * description = @"";
                    NSString  * price = @"0.00";
                    NSString  * skuid = @"";
                    NSString  * qty = @"0.00";
                    NSString  * pluCode = @"";
                    NSString  * mrp = @"0.00";
                    NSString  * measureRange = @"";
                    NSString  * productRange = @"";
                    NSString  * size = @"";
                    NSString  * color = @"";
                    
                    // product_class ---------  product_sub_class
                    NSString  * batchNoStr = @"";
                    NSString  * utilitStr = @"";
                    
                    NSString  * productSubClassStr = @"";
                    NSString  * styleRangeStr = @"";
                    NSString  * packSizeStr = @"1";
                    NSString  * expiryDateStr = @"";
                    
                    
                    //                        NSLog(@"---------------%s",sqlite3_column_text(selectStmt,6));
                    //                        NSLog(@"-------------------%s",(char *)sqlite3_column_text(selectStmt,6));
                    
                    
                    // NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                    if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt,0))
                        description = @((char *)sqlite3_column_text(selectStmt, 0));
                    
                    if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt,1))
                        price = @((char *)sqlite3_column_text(selectStmt,1));
                    
                    if((sqlite3_column_text(selectStmt, 2) != nil) && (char *)sqlite3_column_text(selectStmt,2))
                        skuid = @((char *)sqlite3_column_text(selectStmt, 2));
                    
                    if((sqlite3_column_text(selectStmt, 3) != nil) && (char *)sqlite3_column_text(selectStmt,3))
                        qty = @((char *)sqlite3_column_text(selectStmt,3));
                    
                    if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt,4))
                        pluCode = @((char *)sqlite3_column_text(selectStmt,4));
                    
                    if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt,5))
                        mrp = @((char *)sqlite3_column_text(selectStmt,5));
                    
                    if((sqlite3_column_text(selectStmt, 6) != nil) && (char *)sqlite3_column_text(selectStmt,6))
                        measureRange = @((char *)sqlite3_column_text(selectStmt,6));
                    
                    if((sqlite3_column_text(selectStmt, 7) != nil) && (char *)sqlite3_column_text(selectStmt,7))
                        productRange = @((char *)sqlite3_column_text(selectStmt,7));
                    
                    if((sqlite3_column_text(selectStmt, 8) != nil) && (char *)sqlite3_column_text(selectStmt,8))
                        size = @((char *)sqlite3_column_text(selectStmt,8));
                    
                    if((sqlite3_column_text(selectStmt, 9) != nil) && (char *)sqlite3_column_text(selectStmt,9))
                        color = @((char *)sqlite3_column_text(selectStmt,9));
                    
                    if((sqlite3_column_text(selectStmt, 10) != nil) && (char *)sqlite3_column_text(selectStmt,10))
                        batchNoStr = @((char *)sqlite3_column_text(selectStmt,10));
                    
                    if((sqlite3_column_text(selectStmt,11) != nil) && (char *)sqlite3_column_text(selectStmt,11))
                        utilitStr = @((char *)sqlite3_column_text(selectStmt,11));
                    
                    // product_class ---------  product_sub_class
                    // PRODUCT_CLASS ---------  PRODUCT_SUB_CLASS
                    
                    if((sqlite3_column_text(selectStmt, 12) != nil) && (char *)sqlite3_column_text(selectStmt,12))
                        productSubClassStr = @((char *)sqlite3_column_text(selectStmt,12));
                    
                    if((sqlite3_column_text(selectStmt, 13) != nil) && (char *)sqlite3_column_text(selectStmt,13))
                        styleRangeStr = @((char *)sqlite3_column_text(selectStmt,13));
                    
                    if((sqlite3_column_text(selectStmt, 14) != nil) && (char *)sqlite3_column_text(selectStmt,14))
                        packSizeStr = @((char *)sqlite3_column_text(selectStmt,14));
                    
                    if((sqlite3_column_text(selectStmt, 15) != nil) && (char *)sqlite3_column_text(selectStmt,15))
                        expiryDateStr = @((char *)sqlite3_column_text(selectStmt,15));
                    
                    
                    //added by Srinivasulu on 30/08/2018....
                    if([packSizeStr floatValue] > 0){
                        
                        price = [NSString stringWithFormat:@"%.2f", ([price floatValue]/[packSizeStr floatValue])];
                    }
                    
                    //                    NSDictionary *dic = [NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:description,price,skuid,qty,pluCode,mrp,measureRange,productRange,size,color,batchNoStr,utilitStr, nil] forKeys:[NSArray arrayWithObjects:@"description",@"price",@"skuId",@"quantity",PLU_CODE,MRP,kMeasureRange,kProductRange,@"size",@"color",BATCH,UTILITY, nil]];
                    NSDictionary * dic = @{@"description": description,@"price": price,@"skuId": skuid,QUANTITY: qty,PLU_CODE: pluCode,MRP: mrp,kMeasureRange: measureRange,kProductRange: productRange,SIZE: size,extracted(): color,BATCH: batchNoStr,UTILITY: utilitStr,PRODUCT_SUB_CLASS: productSubClassStr,STYLE_RANGE: styleRangeStr,Pack_Size:packSizeStr,EXPIRY_DATE:expiryDateStr};
                    
                    //                    if([self isItemWithOfferAndMRP:skuid itemPluCode:pluCode]){
                    //
                    //                        dic = [NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:description,mrp,skuid,qty,pluCode,mrp,measureRange,productRange,size,color,batchNoStr,utilitStr,productSubClassStr,styleRangeStr, nil] forKeys:[NSArray arrayWithObjects:@"description",@"price",@"skuId",QUANTITY,PLU_CODE,MRP,kMeasureRange,kProductRange,SIZE,extracted(),BATCH,UTILITY,PRODUCT_SUB_CLASS,STYLE_RANGE, nil]];
                    //                    }
                    //                    else{
                    //
                    //                    }
                    
                    //upto here on 12/08/2017 && 28/04/2017....
                    
                    [priceArr addObject:dic];
                    
                }
                sqlite3_finalize(selectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    @finally {
        sqlite3_close(database);
        
        @try {
            
//            if(priceArr.count){
//
//                if([priceArr[0] allKeys])
//                    if([self isItemWithOfferAndMRP:[priceArr[0] valueForKey:@"skuId"] itemPluCode:[priceArr[0] valueForKey:PLU_CODE]]){
//
//                        for(int i = 0; i < priceArr.count; i++){
//
//                            NSMutableDictionary * mutDic = [priceArr[i] mutableCopy];
//                            mutDic[ITEM_UNIT_PRICE] = [mutDic valueForKey:MRP];
//                            priceArr[i] = mutDic;
//                        }
//                    }
//            }
        } @catch (NSException *exception) {
            
        }
    }
    
    return priceArr;
}

/**
 * @description  here are we retriving itemDetails based on barcode type....
 * @date         28/08/2017....
 * @method       getScannedItemDetails:--  isEanSearch:--
 * @author       Srinivasulu
 *
 * @param        NSString
 * @param        BOOL
 * @param
 *
 * @return       NSMutableDictionary
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 *
 */

-(NSMutableDictionary *)getScannedItemDetails:(NSString *)skuId isEanSearch:(BOOL)isEanSearch {
    
    NSMutableDictionary * productInfoDic = [NSMutableDictionary new];
    @try {
        
        NSMutableArray * priceListArr =  [self getPriceListItemsForScanned:skuId isEanSearch:isEanSearch];
        
        if((!priceListArr.count) && isEanSearch){
            
            priceListArr =  [self getProductPriceListDetailsWithEAN:skuId];
        }
        
        if(priceListArr.count){
            
            if([[priceListArr[0] allKeys] containsObject:ITEM_SKU] && (![[priceListArr[0] valueForKey:ITEM_SKU] isKindOfClass: [NSNull class]])){
                
                productInfoDic = [[self getProductDetails:[priceListArr[0] valueForKey:ITEM_SKU] isEanSearch:NO] mutableCopy];
            }
            
            productInfoDic[kSkuLists] = priceListArr;
        }
    } @catch (NSException *exception) {
        
    } @finally {
        return productInfoDic;
    }
    
}

/**
 * @description  here are we retriving itemDetails based on barcode type....
 * @date         28/08/2017....
 * @method       getPriceListItemsForScanned:--  isEanSearch:--
 * @author       Srinivasulu
 *
 * @param        NSString
 * @param        BOOL
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 *
 */

-(NSMutableArray *)getPriceListItemsForScanned:(NSString *)skuId isEanSearch:(BOOL)isEanSearch {
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    NSMutableArray * priceListArr = [[NSMutableArray alloc]init];
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            //-*-*--5
            NSString * query = [NSString stringWithFormat:@"select description,sale_price,sku_id,quantity_in_hand,plu_code,price,measure_range,product_range,size,color,product_batch_no,utility,product_sub_class,style_range,pack_size,expiry_date from sku_price_list where sku_status == 1 and (sku_id= '%@' or ean = '%@')",skuId,skuId];
            
            const char * sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2( localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    NSString  * description = @"";
                    NSString  * price = @"0.00";
                    NSString  * skuid = @"";
                    NSString  * qty = @"0.00";
                    NSString  * pluCode = @"";
                    NSString  * mrp = @"0.00";
                    NSString  * measureRange = @"";
                    NSString  * productRange = @"";
                    NSString  * size = @"";
                    NSString  * color = @"";
                    NSString  * batchNoStr = @"";
                    NSString  * utilitStr = @"";
                    NSString  * productSubClassStr = @"";
                    NSString  * styleRangeStr = @"";
                    NSString  * packSizeStr = @"1";
                    NSString  * expiryDateStr = @"";
                    
                    if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt,0))
                        description = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    
                    if((sqlite3_column_text(localSelectStmt, 1) != nil) && (char *)sqlite3_column_text(localSelectStmt,1))
                        price = @((char *)sqlite3_column_text(localSelectStmt,1));
                    
                    if((sqlite3_column_text(localSelectStmt, 2) != nil) && (char *)sqlite3_column_text(localSelectStmt,2))
                        skuid = @((char *)sqlite3_column_text(localSelectStmt, 2));
                    
                    if((sqlite3_column_text(localSelectStmt, 3) != nil) && (char *)sqlite3_column_text(localSelectStmt,3))
                        qty = @((char *)sqlite3_column_text(localSelectStmt,3));
                    
                    if((sqlite3_column_text(localSelectStmt, 4) != nil) && (char *)sqlite3_column_text(localSelectStmt,4))
                        pluCode = @((char *)sqlite3_column_text(localSelectStmt,4));
                    
                    if((sqlite3_column_text(localSelectStmt, 5) != nil) && (char *)sqlite3_column_text(localSelectStmt,5))
                        mrp = @((char *)sqlite3_column_text(localSelectStmt,5));
                    
                    if((sqlite3_column_text(localSelectStmt, 6) != nil) && (char *)sqlite3_column_text(localSelectStmt,6))
                        measureRange = @((char *)sqlite3_column_text(localSelectStmt,6));
                    
                    if((sqlite3_column_text(localSelectStmt, 7) != nil) && (char *)sqlite3_column_text(localSelectStmt,7))
                        productRange = @((char *)sqlite3_column_text(localSelectStmt,7));
                    
                    if((sqlite3_column_text(localSelectStmt, 8) != nil) && (char *)sqlite3_column_text(localSelectStmt,8))
                        size = @((char *)sqlite3_column_text(localSelectStmt,8));
                    
                    if((sqlite3_column_text(localSelectStmt, 9) != nil) && (char *)sqlite3_column_text(localSelectStmt,9))
                        color = @((char *)sqlite3_column_text(localSelectStmt,9));
                    
                    
                    if((sqlite3_column_text(localSelectStmt, 10) != nil) && (char *)sqlite3_column_text(localSelectStmt,10))
                        batchNoStr = @((char *)sqlite3_column_text(localSelectStmt,10));
                    
                    if((sqlite3_column_text(localSelectStmt, 11) != nil) && (char *)sqlite3_column_text(localSelectStmt,11))
                        utilitStr = @((char *)sqlite3_column_text(localSelectStmt,11));
                    
                    if((sqlite3_column_text(localSelectStmt, 12) != nil) && (char *)sqlite3_column_text(localSelectStmt,12))
                        productSubClassStr = @((char *)sqlite3_column_text(localSelectStmt,12));
                    
                    if((sqlite3_column_text(localSelectStmt, 13) != nil) && (char *)sqlite3_column_text(localSelectStmt,13))
                        styleRangeStr = @((char *)sqlite3_column_text(localSelectStmt,13));
                    
                    if((sqlite3_column_text(localSelectStmt, 14) != nil) && (char *)sqlite3_column_text(localSelectStmt,14))
                        packSizeStr = @((char *)sqlite3_column_text(localSelectStmt,14));
                    
                    if((sqlite3_column_text(localSelectStmt, 15) != nil) && (char *)sqlite3_column_text(localSelectStmt,15))
                        expiryDateStr = @((char *)sqlite3_column_text(localSelectStmt,15));
                    
                    //added by Srinivasulu on 30/08/2018....
                    if([packSizeStr floatValue] > 0){
                        
                        price = [NSString stringWithFormat:@"%.2f", ([price floatValue]/[packSizeStr floatValue])];
                    }
                    
                    NSDictionary * dic = @{@"description": description,@"price": price,@"skuId": skuid,@"quantity": qty,PLU_CODE: pluCode,MRP: mrp,kMeasureRange: measureRange,kProductRange: productRange,@"size": size,@"color": color,BATCH: batchNoStr,UTILITY: utilitStr,PRODUCT_SUB_CLASS: productSubClassStr,STYLE_RANGE: styleRangeStr,Pack_Size:packSizeStr,EXPIRY_DATE:expiryDateStr};
                    
                    //                    if([self isItemWithOfferAndMRP:skuid itemPluCode:pluCode]){
                    //
                    //                  dic = [NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:description,mrp,skuid,qty,pluCode,mrp,measureRange,productRange,size,color,batchNoStr,utilitStr,productSubClassStr,styleRangeStr, nil] forKeys:[NSArray arrayWithObjects:@"description",@"price",@"skuId",@"quantity",PLU_CODE,MRP,kMeasureRange,kProductRange,@"size",@"color",BATCH,UTILITY,PRODUCT_SUB_CLASS,STYLE_RANGE, nil]];
                    //                    }
                    
                    [priceListArr addObject:dic];
                    
                }
                
                //                sqlite3_reset(localSelectStmt);
                sqlite3_finalize(localSelectStmt);
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        sqlite3_close(localDatabase);
        
        @try {
            
//            if(priceListArr.count){
//
//                if([priceListArr[0] allKeys])
//                    if([self isItemWithOfferAndMRP:[priceListArr[0] valueForKey:@"skuId"] itemPluCode:[priceListArr[0] valueForKey:PLU_CODE]]){
//
//                        for(int i = 0; i < priceListArr.count; i++){
//
//                            NSMutableDictionary * mutDic = [priceListArr[i] mutableCopy];
//                            mutDic[ITEM_UNIT_PRICE] = [mutDic valueForKey:MRP];
//                            priceListArr[i] = mutDic;
//                        }
//                    }
//            }
        } @catch (NSException *exception) {
            
        }
        
        return priceListArr;
    }
}

/**
 * @description  here are we retriving sku_id from sku_eans table based on ean....
 * @date         28/08/2017....
 * @method       getProductPriceListDetailsWithEAN:--
 * @author       Srinivasulu
 *
 * @param        NSString
 * @param
 * @param
 *
 * @return       NSMutableArray
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 *
 */

- (NSMutableArray *)getProductPriceListDetailsWithEAN:(NSString *)ean {
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    NSMutableArray * priceListArr = [NSMutableArray new];
    NSString * sku_id = @"";
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSString *query = [NSString stringWithFormat:@"select sku_id from sku_eans  where ean = '%@' LIMIT 1",ean];
            
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2( localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                if(sqlite3_column_count(localSelectStmt))
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        if((sqlite3_column_text(localSelectStmt, 0) != nil) && (char *)sqlite3_column_text(localSelectStmt,0))
                            sku_id = @((char *)sqlite3_column_text(localSelectStmt,0));
                        break;
                    }
                sqlite3_finalize(localSelectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
            
        }
        
        if (sku_id.length > 0) {
            
            priceListArr =[self getPriceListItemsForScanned:sku_id isEanSearch:NO];
        }
        
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    @finally {
        
        sqlite3_close(localDatabase);
        return priceListArr;
    }
    
}
#pragma  -mark start of item related search && getting product details methods....

/**
 * @description  In this method we are getting bill related information based on filter used by client....
 * @date
 * @method       getBillInfo:--  searchInfo:--  startingDate:--  endDate:--  startIndex:--  maxRecords:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param        NSString
 * @param        NSString
 * @param        NSString
 * @param        int
 * @param        int
 *
 * @return       NSMutableArray
 *
 * @modified By  Srinivasul on 03/07/2018..
 * @reason       Order By Filter works..
 *
 * @verified By
 * @verified On
 *
 */

-(NSMutableDictionary *)getBillInfo:(NSString *)billStatus  searchInfo:(NSString *)searchStr  mobileNo:(NSString *)phoneNo startingDate:(NSString *)startDateStr endDate:(NSString *)endDateStr startIndex:(int)startIndexNo maxRecords:(int)maxRecordsNo{
    
    
    NSMutableDictionary * completeDic = [[NSMutableDictionary alloc] init];
    NSMutableArray * billIdsArr = [[NSMutableArray alloc] init];
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try {
        
        if(phoneNo == nil)
            phoneNo = @"";
        else if(phoneNo.length > 0 && phoneNo.length != 10)
            phoneNo = @"";
        
        
        NSString * searchQueryStr;
        
        if (searchStr.length != 0) {
            
            searchQueryStr = [NSString stringWithFormat:@"select bill_id from billing_table where bill_id LIKE '%%%@%%' and store_location LIKE '%%%@%%' and phone_number LIKE '%%%@%%' and status LIKE '%%%@%%' COLLATE NOCASE",searchStr,presentLocation,phoneNo,billStatus];
            
            if (isCustomerBillId) {
                
                searchQueryStr = [NSString stringWithFormat:@"select serial_billId from billing_table where serial_billId LIKE '%%%@%%' and store_location LIKE '%%%@%%' and phone_number LIKE '%%%@%%' and status LIKE '%%%@%%' COLLATE NOCASE ",searchStr,presentLocation,phoneNo,billStatus];
            }
        }
        else{
            
            //            searchQueryStr = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%%@%%'",presentLocation,billStatus];
            searchQueryStr = [NSString stringWithFormat:@"select * from billing_table where store_location LIKE '%%%@%%' and phone_number LIKE '%%%@%%' and status LIKE '%%%@%%' COLLATE NOCASE",presentLocation,phoneNo,billStatus];
            
            
            if(startDateStr.length || endDateStr.length){
                
                //                if(startDateStr.length)
                //                    if(!endDateStr.length)
                //                        endDateStr = startDateStr;
                //
                //                if(endDateStr.length)
                //                    if(!startDateStr.length)
                //                        startDateStr = endDateStr;
                //
                //
                //                startDateStr = [startDateStr stringByReplacingOccurrencesOfString:@"/" withString:@"-"];
                //                endDateStr = [endDateStr stringByReplacingOccurrencesOfString:@"/" withString:@"-"];
                //
                //                startDateStr = [self dateToFormatedDate:startDateStr];
                //                endDateStr = [self dateToFormatedDate:endDateStr];
                
                
                if(startDateStr.length){
                    
                    startDateStr = [startDateStr stringByReplacingOccurrencesOfString:@"/" withString:@"-"];
                    startDateStr = [self dateToFormatedDate:startDateStr];
                }
                
                if(endDateStr.length){
                    
                    endDateStr = [endDateStr stringByReplacingOccurrencesOfString:@"/" withString:@"-"];
                    endDateStr = [self dateToFormatedDate:endDateStr];
                }
                
                if(startDateStr.length && endDateStr.length)
                    searchQueryStr = [NSString stringWithFormat:@"%@ and   DATE(substr(date_and_time,7,4) ||'-' ||substr(date_and_time,4,2) ||'-'||substr(date_and_time,1,2)) BETWEEN DATE('%@') AND DATE('%@')",searchQueryStr,startDateStr,endDateStr];
                
                else if(startDateStr.length)
                    searchQueryStr = [NSString stringWithFormat:@"%@ and   DATE(substr(date_and_time,7,4) ||'-' ||substr(date_and_time,4,2) ||'-'||substr(date_and_time,1,2)) >= ('%@')",searchQueryStr,startDateStr];
                
                else if(endDateStr.length)
                    searchQueryStr = [NSString stringWithFormat:@"%@ and   DATE(substr(date_and_time,7,4) ||'-' ||substr(date_and_time,4,2) ||'-'||substr(date_and_time,1,2)) <= ('%@')",searchQueryStr,endDateStr];
                //                else
                //                    searchQueryStr = [NSString stringWithFormat:@"%@ ORDER BY date_and_time ASC",searchQueryStr];
                
            }
            
            searchQueryStr = [NSString stringWithFormat:@"%@ ORDER BY datetime(substr(date_and_time,7,4) ||'-' ||substr(date_and_time,4,2) ||'-'||substr(date_and_time,1,2)||' '||substr(date_and_time,12,8) ) DESC",searchQueryStr];
            
            if(startIndexNo > 0 || maxRecordsNo > 0)
                searchQueryStr = [NSString stringWithFormat:@"%@ LIMIT '%d', '%d'",searchQueryStr,startIndexNo,maxRecordsNo];
        }
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        int count = 0;
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            if (searchStr.length!=0) {
                const char * sqlStatement = searchQueryStr.UTF8String;
                
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        count = sqlite3_column_int(localSelectStmt, 0);
                        
                        NSString  *bill_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                        
                        [billIdsArr addObject:bill_id];
                    }
                    sqlite3_finalize(localSelectStmt);
                    localSelectStmt = nil;
                    
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
                
            }
            else {
                
                
                const char * sqlStatement = searchQueryStr.UTF8String;
                
                
                if(sqlite3_prepare_v2( localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        NSMutableDictionary *bills = [[NSMutableDictionary alloc]init];
                        
                        count = sqlite3_column_int(localSelectStmt, 0);
                        
                        NSString  * bill_id = @"";
                        NSString  * date = @"";
                        NSString  * due = @"0.00";
                        NSString  * totalPrice = @"";
                        NSString  * cashier = @"";
                        NSString  * counter = @"";
                        NSString  * userName = @"--";
                        NSString  * status = @"";
                        NSString  * serialBillId = @"";
                        NSString  * syncStatusStr = @"--";
                        NSString  * billAmountStr = @"0.00";
                        NSString  * statusStr = @"-";
                        NSString  * isOfflineBillStr = @"1";
                        
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 0)  && (sqlite3_column_text(localSelectStmt,  0) != nil) ){
                            
                            bill_id = @((char *)sqlite3_column_text(localSelectStmt, 0));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 1)  && (sqlite3_column_text(localSelectStmt, 1) != nil) ){
                            
                            date = @((char *)sqlite3_column_text(localSelectStmt,1));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 9)  && (sqlite3_column_text(localSelectStmt, 9) != nil) ){
                            
                            due = @((char *)sqlite3_column_text(localSelectStmt,9));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 8)  && (sqlite3_column_text(localSelectStmt, 8) != nil) ){
                            
                            totalPrice = @((char *)sqlite3_column_text(localSelectStmt,8));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 2)  && (sqlite3_column_text(localSelectStmt, 2) != nil) ){
                            
                            cashier = @((char *)sqlite3_column_text(localSelectStmt,2));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 3)  && (sqlite3_column_text(localSelectStmt, 3) != nil) ){
                            
                            counter = @((char *)sqlite3_column_text(localSelectStmt,3));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 14)  && (sqlite3_column_text(localSelectStmt, 14) != nil) ){
                            
                            userName = @((char *)sqlite3_column_text(localSelectStmt,14));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 10)  && (sqlite3_column_text(localSelectStmt, 10) != nil) ){
                            
                            status = @((char *)sqlite3_column_text(localSelectStmt,10));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 26)  && (sqlite3_column_text(localSelectStmt, 26) != nil) ){
                            
                            serialBillId = @((char *)sqlite3_column_text(localSelectStmt, 26));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 8)  && (sqlite3_column_text(localSelectStmt, 8) != nil) ){
                            
                            billAmountStr = @((char *)sqlite3_column_text(localSelectStmt,8));
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 16)  && (sqlite3_column_text(localSelectStmt, 16) != nil) ){
                            
                            if([@((char *)sqlite3_column_text(localSelectStmt,16)) isEqualToString:TO_BE_UPLOADED] || [@((char *)sqlite3_column_text(localSelectStmt,16)) isEqualToString:PENDING] ){
                                
                                syncStatusStr = NSLocalizedString(@"to_be_upload", nil);
                            }
                            else if([@((char *)sqlite3_column_text(localSelectStmt, 16)) isEqualToString:ERROR]){
                                
                                syncStatusStr = NSLocalizedString(@"pending", nil);
                            }
                            else{
                                
                                syncStatusStr = NSLocalizedString(@"uploaded", nil);
                            }
                        }
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 10)  && (sqlite3_column_text(localSelectStmt,  10) != nil) ){
                            
                            statusStr = @((char *)sqlite3_column_text(localSelectStmt, 10));
                        }
                        
                        
                        if( (char *)sqlite3_column_text(localSelectStmt, 39)  && (sqlite3_column_text(localSelectStmt, 39) != nil) ){
                            
                            isOfflineBillStr = @((char *)sqlite3_column_text(localSelectStmt, 39));
                        }
                        
                        bills = [[NSMutableDictionary alloc]initWithObjects:@[bill_id,date,due,cashier,counter,userName,totalPrice,status,serialBillId,billAmountStr,syncStatusStr,statusStr,isOfflineBillStr,isOfflineBillStr] forKeys:@[BILL_ID,BUSSINESS_DATE,BILL_DUE,CASHIER_ID,COUNTER,CUSTOMER_NAME,TOTAL_BILL_AMT,STATUS,kSerialBillId,TOTAL_BILL_AMT,SYNC_STATUS,STATUS,IS_OFFLINE_BILL,OFFLINE_BILL]];
                        
                        [billIdsArr addObject:bills];
                    }
                    sqlite3_finalize(localSelectStmt);
                    localSelectStmt = nil;
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                }
                if (billIdsArr.count != 0) {
                    
                    searchQueryStr = [NSString stringWithFormat:@"select count (*) from billing_table where store_location LIKE '%%%@%%' and status LIKE '%%%@%%' ",presentLocation,billStatus];
                    
                    if(startDateStr.length && endDateStr.length)
                        searchQueryStr = [NSString stringWithFormat:@"%@ and   DATE(substr(date_and_time,7,4) ||'-' ||substr(date_and_time,4,2) ||'-'||substr(date_and_time,1,2)) BETWEEN DATE('%@') AND DATE('%@') ORDER BY date_and_time DESC",searchQueryStr,startDateStr,endDateStr];
                    
                    else if(startDateStr.length)
                        searchQueryStr = [NSString stringWithFormat:@"%@ and   DATE(substr(date_and_time,7,4) ||'-' ||substr(date_and_time,4,2) ||'-'||substr(date_and_time,1,2)) >= ('%@') ORDER BY date_and_time DESC",searchQueryStr,startDateStr];
                    
                    else if(endDateStr.length)
                        searchQueryStr = [NSString stringWithFormat:@"%@ and   DATE(substr(date_and_time,7,4) ||'-' ||substr(date_and_time,4,2) ||'-'||substr(date_and_time,1,2)) <= ('%@') ORDER BY date_and_time DESC'",searchQueryStr,endDateStr];
                    
                    const char * sqlStatement = searchQueryStr.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                        
                        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                            
                            count = sqlite3_column_int(localSelectStmt, 0);
                        }
                        sqlite3_finalize(localSelectStmt);
                        localSelectStmt = nil;
                    }
                    else {
                        
                        NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                    }
                }
                
                [completeDic setValue:billIdsArr forKey:BILL_LIST];
                [completeDic setValue:[NSString stringWithFormat:@"%d", count] forKey:TOTAL_SKUS];
            }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
        sqlite3_close(localDatabase);
    }
    return  completeDic;
}

-(NSString *)dateToFormatedDate:(NSString *)dateStr {
    
    NSString * result = [[NSString alloc] init];
    
    @try{
        
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        dateFormatter.dateFormat = @"dd/MM/yyyy";
        NSDate *date = [dateFormatter dateFromString:dateStr];
        dateFormatter.dateFormat = @"yyyy-MM-dd";
        
        result = [dateFormatter stringFromDate:date];
    } @catch (NSException *exception) {
        
    } @finally {
        
        return result;
    }
}



-(BOOL)isItemWithOfferAndMRP:(NSString *)skuIdStr itemPluCode:(NSString *)pluCodeStr{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    BOOL isMrpItem = false;
    
    @try {
        
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            NSMutableArray *groupIdList = [NSMutableArray new];
            
            NSString * appendSkuStr;
            NSMutableString * appendGroupStr = [NSMutableString new];
            
            NSMutableDictionary *skuInfo = [NSMutableDictionary new];
            NSMutableDictionary * listOfSkusUnderCategory = [NSMutableDictionary new];//-*-*-
            
            appendSkuStr = [NSString stringWithFormat:@"%@%@%@",@" (sell_sku_ids like '%",skuIdStr,@"%')"];
            
            groupIdList= [self getGroupsForSkuId:@[skuIdStr]];
            
            for (int a = 0; a < groupIdList.count; a++) {
                [appendGroupStr appendString:@" ( sell_group_id = '"];
                [appendGroupStr appendString:groupIdList[a]];
                [appendGroupStr appendString:@"' and (sell_sku_ids IS NULL or sell_sku_ids = '' or sell_sku_ids = 'null'))"];
                if (a != (groupIdList.count - 1)) {
                    [appendGroupStr appendString:@" or "];
                }
            }
            int weekDayNumber = [WebServiceUtility getTodayWeekDayNumber];
            
            
            NSMutableArray *categoriesInfo = [NSMutableArray new];
            
            NSString *getCategoriesQry =
            [NSString stringWithFormat:@"select distinct(product.category),product.sub_category, sku.sku_Id  from product_master product,sku_master sku where sku.product_Id=product.product_ID and sku.sku_Id in ('%@%@) and (product.category is not null or product.sub_category is not null) ",skuIdStr,@"'"] ;
            getCategoriesQry = [NSString stringWithFormat:@"select sku.product_category,sku.product_subcategory, sku.sku_Id,sku.primary_department,sku.brand_code,sku.section  from sku_master sku where sku.sku_Id = ('%@%@) ",skuIdStr,@"'"];

            const char *selectGroupQry = getCategoriesQry.UTF8String ;
            
            if(sqlite3_prepare_v2(database, selectGroupQry, -1, &selectStmt, NULL) == SQLITE_OK) {
                offersDic = [[NSMutableDictionary alloc]init];
                //                int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSString * categoryStr  = @"";
                    NSString * subCategoryStr  = @"";
                    NSString * skuIdStr  = @"";
                    NSString * primaryDepartmentStr  = @"";
                    NSString * brandCodeStr  = @"";
                    NSString * sectionStr  = @"";
                    
                    if((sqlite3_column_text(selectStmt, 0) != nil) && (char *)sqlite3_column_text(selectStmt,0))
                        categoryStr = @((char *)sqlite3_column_text(selectStmt, 0));
                    if((sqlite3_column_text(selectStmt, 1) != nil) && (char *)sqlite3_column_text(selectStmt,1))
                        subCategoryStr = @((char *)sqlite3_column_text(selectStmt, 1));
                    if((sqlite3_column_text(selectStmt, 2) != nil) && (char *)sqlite3_column_text(selectStmt,2))
                        skuIdStr = @((char *)sqlite3_column_text(selectStmt, 2));
                    if((sqlite3_column_text(selectStmt, 3) != nil) && (char *)sqlite3_column_text(selectStmt,3))
                        primaryDepartmentStr = @((char *)sqlite3_column_text(selectStmt, 3));
                    if((sqlite3_column_text(selectStmt, 4) != nil) && (char *)sqlite3_column_text(selectStmt,4))
                        brandCodeStr = @((char *)sqlite3_column_text(selectStmt, 4));
                    if((sqlite3_column_text(selectStmt, 5) != nil) && (char *)sqlite3_column_text(selectStmt,5))
                        sectionStr = @((char *)sqlite3_column_text(selectStmt, 5));
                    
                    [categoriesInfo addObject:@{kcategory: categoryStr, kSubCategory: subCategoryStr, ITEM_SKU: skuIdStr, kPrimaryDepartment: primaryDepartmentStr, kProductBrand: brandCodeStr, SECTION: sectionStr}];
                }
            }
            
            if (categoriesInfo.count) {
                
                for (NSDictionary *productInfo in categoriesInfo) {
                    
                    if (![[productInfo valueForKey:ITEM_SKU] isKindOfClass:[NSNull class]]){
                        NSString * skuId = [productInfo valueForKey:ITEM_SKU];
                        if(skuId.length > 0){
                            NSMutableDictionary * categoryAndSubInfo=[NSMutableDictionary new];
                            
                            [categoryAndSubInfo setValue:@"" forKey:kcategory];
                            [categoryAndSubInfo setValue:@"" forKey:kSubCategory];
                            [categoryAndSubInfo setValue:@"" forKey:kPrimaryDepartment];
                            [categoryAndSubInfo setValue:@"" forKey:kProductBrand];
                            [categoryAndSubInfo setValue:@"" forKey:SECTION];
                            
                            if (![[productInfo valueForKey:kcategory] isKindOfClass:[NSNull class]]){
                                NSString * categoryStr = [productInfo valueForKey:kcategory];
                                if(categoryStr.length > 0)
                                    [categoryAndSubInfo setValue:categoryStr forKey:kcategory];
                            }
                            
                            if (![[productInfo valueForKey:kSubCategory] isKindOfClass:[NSNull class]]){
                                NSString * subCategoryStr = [productInfo valueForKey:kSubCategory];
                                if(subCategoryStr.length > 0)
                                    [categoryAndSubInfo setValue:subCategoryStr forKey:kSubCategory];
                            }
                            
                            if (![[productInfo valueForKey:kPrimaryDepartment] isKindOfClass:[NSNull class]]){
                                NSString * primaryDepartmentStr = [productInfo valueForKey:kPrimaryDepartment];
                                if(primaryDepartmentStr.length > 0)
                                    [categoryAndSubInfo setValue:primaryDepartmentStr forKey:kPrimaryDepartment];
                            }
                            
                            if (![[productInfo valueForKey:kProductBrand] isKindOfClass:[NSNull class]]){
                                NSString * productBrandStr = [productInfo valueForKey:kProductBrand];
                                if(productBrandStr.length > 0)
                                    [categoryAndSubInfo setValue:productBrandStr forKey:kProductBrand];
                            }
                            
                            if (![[productInfo valueForKey:SECTION] isKindOfClass:[NSNull class]]){
                                NSString * sectionStr = [productInfo valueForKey:SECTION];
                                if(sectionStr.length > 0)
                                    [categoryAndSubInfo setValue:sectionStr forKey:SECTION];
                            }
                            
                            skuInfo[skuId] = categoryAndSubInfo;
                        }
                    }
                }
            }
            
            
            
            BOOL categoryFlag=false;
            BOOL subCategoryFlag=false;
            NSString *categoryValue=@"";
            NSString *subCategoryValue=@"";
            
            //need to change written by Srinivaslulu on 17/08/2017....
            //reason In query location should not be there because in download we have to get this location related deals and offers only....
            //---====++
            NSMutableString   *availableOffersForItem= [NSMutableString stringWithFormat:@"select * from offers where offer_status= '1' and store_location LIKE '%%%@%%' and day%@='1'  and (sell_group_id IN (select DISTINCT(g.group_id) from groups_master g,groups_child c where g.group_id=c.group_id and c.sku_Id='%@' and c.status = '1') or offer_category = 'turn_over'",presentLocation,[NSString stringWithFormat:@"%d",weekDayNumber],skuIdStr];
            //
            
            //changed by Srinivasulu onc 19/08/2017....
            //from NSString to NSMutableString....
            
            //                        NSString   *availableDealsForItem= [NSString stringWithFormat:@"select * from deals where deal_status= '1' and store_location LIKE '%%%@%%' and day%@='1' and is_customer_specific='0' and sell_group_id IN (select DISTINCT(g.group_id) from groups_master g,groups_child c where g.group_id=c.group_id and c.sku_Id='%@' and c.status = '1') or deal_category='turn_over' order by start_date DESC",presentLocation,[NSString stringWithFormat:@"%d",weekDayNumber],cartItem];
            
            //changed by Srinivasulu on 22/02/2017....
            
            NSMutableString   * availableDealsForItem= [NSMutableString stringWithFormat:@"select * from deals where deal_status= '1' and store_location LIKE '%%%@%%' and day%@='1' and is_customer_specific='0' and ((sell_group_id IN (select DISTINCT(g.group_id) from groups_master g,groups_child c where g.group_id=c.group_id and c.sku_Id='%@' and c.status = '1') or deals.sell_sku_ids like '%@' or deal_category='turn_over' ",presentLocation,[NSString stringWithFormat:@"%d",weekDayNumber],skuIdStr,skuIdStr];
            
            
            //upto here on 17/08/2017....
            
            NSString * openBracess = @") or (";
            NSString * closeBracess = @"))";
            if ([skuInfo count] && [[skuInfo allKeys] containsObject:skuIdStr]) {
                NSDictionary *categoryAndSubInfo = [skuInfo objectForKey:skuIdStr];
                
                if ([[categoryAndSubInfo allKeys] containsObject:kcategory]) {
                    
                    NSString * categoryValue = [categoryAndSubInfo valueForKey:kcategory];
                    if(categoryValue.length){
                        [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_category='%@'",openBracess,categoryValue]];
                        openBracess = @"";
                    }
                }
                
                if ([[categoryAndSubInfo allKeys] containsObject:kSubCategory]) {
                    
                    NSString * subCategoryValue = [categoryAndSubInfo valueForKey:kSubCategory];
                    if(subCategoryValue.length){
                        [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_sub_category='%@'",openBracess,subCategoryValue]];
                        openBracess = @"";
                    }
                }
                
                if ([[categoryAndSubInfo allKeys] containsObject:kPrimaryDepartment]) {
                    
                    NSString * departmentValue = [categoryAndSubInfo valueForKey:kPrimaryDepartment];
                    if(departmentValue.length){
                        [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ product_department='%@'",openBracess,departmentValue]];
                        openBracess = @"";
                    }
                }
                
                if ([[categoryAndSubInfo allKeys] containsObject:kProductBrand]) {
                    
                    NSString * brandValue = [categoryAndSubInfo valueForKey:kProductBrand];
                    [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ brand='%@'",openBracess,brandValue]];
                }
                
                if ([[categoryAndSubInfo allKeys] containsObject:SECTION]) {
                    
                    NSString * sectionValue = [categoryAndSubInfo valueForKey:SECTION];
                    if(sectionValue.length){
                        [availableOffersForItem appendString:[NSString stringWithFormat:@" or %@ section='%@'",openBracess,sectionValue]];
                        openBracess = @"";
                    }
                }
            }
            
            if(openBracess.length){
                [availableOffersForItem appendString:closeBracess];
                closeBracess = @"";
            }
            
            [availableOffersForItem appendString:[NSString stringWithFormat:@" %@ and is_customer_specific!='1'",closeBracess]];
//            [availableOffersForItem appendString:@") and is_customer_specific!='1' order by start_date DESC"];
            
            //==--00
            
            const char *select_Offer_Qry = availableOffersForItem.UTF8String ;
            
            const char *select_Deal_Qry = availableDealsForItem.UTF8String ;
            
            
            //        if (![campaignRequestModel.employeeCode isKindOfClass:[NSNull class]] && [campaignRequestModel.employeeCode length]>0) {
            //
            //            campaignRequestModel.skuId = cartItem;
            //            applyDealsAndOfferResponse = [self fetchEmployeeSpecificCampaigns:campaignRequestModel];
            //            if (![[applyDealsAndOfferResponse objectForKey:@"employeeSpecificOffers"] isKindOfClass:[NSNull class]] && [[applyDealsAndOfferResponse objectForKey:@"employeeSpecificOffers"] count] >0) {
            //
            //                for (OfferModel *offer in [applyDealsAndOfferResponse objectForKey:@"employeeSpecificOffers"]) {
            //
            //                    offer.employeeSpecific = true;
            //                    [fetchedOffersList addObject:offer];
            //                }
            //            }
            //        }
            
            BOOL offerStatusTime;
            
            //==--00
            
            
            
            if(sqlite3_prepare_v2(localDatabase, select_Offer_Qry, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    NSString *startDate = @((char *)sqlite3_column_text(localSelectStmt, 11));
                    NSString *endDate = @((char *)sqlite3_column_text(localSelectStmt, 8));
                    NSString *dealStartTime = @((char *)sqlite3_column_text(localSelectStmt, 30));
                    NSString *dealEndTime = @((char *)sqlite3_column_text(localSelectStmt, 31));
                    
                    offerStatusTime = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                    
                    if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                        if (offerStatusTime) {
                            isMrpItem = true;
                            break;
                        }
                        
                    }
                    
                }
                
            }
            
            
            BOOL dealStatusTime;
            
            
            if(!isMrpItem)
                if(sqlite3_prepare_v2(localDatabase, select_Deal_Qry, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        NSString *startDate = @((char *)sqlite3_column_text(localSelectStmt, 14));
                        
                        NSString *endDate = @((char *)sqlite3_column_text(localSelectStmt, 8));
                        NSString *dealStartTime = @((char *)sqlite3_column_text(localSelectStmt, 29));
                        NSString *dealEndTime = @((char *)sqlite3_column_text(localSelectStmt, 30));
                        
                        dealStatusTime = [WebServiceUtility checkOfferAvailabilityBetween:dealStartTime endTime:dealEndTime];
                        
                        if ([WebServiceUtility checkDateValidity:startDate secondDate:endDate]) {
                            if (dealStatusTime) {
                                isMrpItem = true;
                                break;
                            }
                        }
                        
                    }
                }
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        sqlite3_finalize(localSelectStmt);
        sqlite3_close(localDatabase);
        
        return isMrpItem;
    }
    
}




-(void)reduceTheBillingItemsStock:(NSArray *)items stockUpdationType:(NSString *)increase_or_reduce_str{
    
    if(isMasterCounter){
        static sqlite3 * localDatabase = nil;
        static sqlite3_stmt * localSelect_update_Stmt = nil;
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        @try {
            
            if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
                
                
                for(NSDictionary * dic in items){
                    
                    NSString * updateQuantityStr = @"0";
                    [dic valueForKey:QUANTITY];
                    [dic valueForKey:SKU_ID];
                    [dic valueForKey:PLU_CODE];
                    //-*-*--5 --  sku_status == 1
                    NSString * query = [NSString stringWithFormat:@"select quantity_in_hand from sku_price_list WHERE  sku_status == 1 and (sku_id = '%@' and plu_code = '%@')",[dic valueForKey:SKU_ID],[dic valueForKey:PLU_CODE]];
                    
                    
                    const char * sqlStatement = query.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                        
                        while (sqlite3_step(localSelect_update_Stmt) == SQLITE_ROW ) {
                            
                            if((char *)sqlite3_column_text(localSelect_update_Stmt,0) && (sqlite3_column_text(localSelect_update_Stmt, 0) != nil))
                                
                                updateQuantityStr = @((char *)sqlite3_column_text(localSelect_update_Stmt,0));
                            break;
                        }
                        
                        
                        sqlite3_finalize(localSelect_update_Stmt);
                        localSelect_update_Stmt = nil;
                    }
                    else {
                        NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                    }
                    
                    if([increase_or_reduce_str  isEqualToString:REDUCE])
                        updateQuantityStr = [NSString stringWithFormat:@"%.2f", updateQuantityStr.floatValue - [[dic valueForKey:QUANTITY] floatValue]];
                    else
                        updateQuantityStr = [NSString stringWithFormat:@"%.2f", updateQuantityStr.floatValue + [[dic valueForKey:QUANTITY] floatValue]];
                    
                    
                    //-*-*--5
                    query = [NSString stringWithFormat:@"UPDATE sku_price_list SET quantity_in_hand = %@ WHERE sku_status == 1 and (sku_id = '%@' and plu_code = '%@')",updateQuantityStr,[dic valueForKey:SKU_ID],[dic valueForKey:PLU_CODE]];
                    
                    sqlStatement = query.UTF8String;
                    
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelect_update_Stmt, NULL) == SQLITE_OK) {
                        //                        int count = sqlite3_column_count(selectStmt);
                        if (sqlite3_step(localSelect_update_Stmt) == SQLITE_DONE) {
                            
                        }
                        else {
                            
                        }
                        
                        sqlite3_finalize(localSelect_update_Stmt);
                        localSelect_update_Stmt = nil;
                    }
                    else {
                        
                        NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
                    }
                }
            }
        }
        @catch (NSException *exception) {
            NSLog(@"%@",exception);
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        @finally {
            
            sqlite3_finalize(localSelect_update_Stmt);
            sqlite3_close(localDatabase);
        }
    }
}

#pragma -mark Methods used for Product Menu Display..

-(void)deleteProductMenuInfoTableInformations:(int)delectionTableNum{
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localDelectStmt =nil;
    
    @try {
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        //  BOOL isExists = [self createTable:@"billing"];
        
        //  if (isExists) {
        
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            if(delectionTableNum == 1){
                if (localDelectStmt == nil) {
                    NSString *query = [NSString stringWithFormat:@"delete from menu"];
                    const char *sqlStatement = query.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localDelectStmt, NULL) == SQLITE_OK) {
                        
                        if(SQLITE_DONE != sqlite3_step(localDelectStmt)){
                            NSLog(@"%s",sqlite3_errmsg(localDatabase));
                            NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(localDatabase));
                        }
                        else {
                        }
                        sqlite3_reset(localDelectStmt);
                    }
                    localDelectStmt = nil;
                    
                }
            }
            else if(delectionTableNum == 2){
                if (localDelectStmt == nil) {
                    NSString *query = [NSString stringWithFormat:@"delete from menu_categories"];
                    const char *sqlStatement = query.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localDelectStmt, NULL) == SQLITE_OK) {
                        
                        if(SQLITE_DONE != sqlite3_step(localDelectStmt)){
                            NSLog(@"%s",sqlite3_errmsg(localDatabase));
                            NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(localDatabase));
                        }
                        else {
                        }
                        sqlite3_reset(localDelectStmt);
                    }
                    localDelectStmt = nil;
                    
                }
            }
            else if(delectionTableNum == 3){
                if (localDelectStmt == nil) {
                    NSString *query = [NSString stringWithFormat:@"delete from menu_items"];
                    const char *sqlStatement = query.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localDelectStmt, NULL) == SQLITE_OK) {
                        
                        if(SQLITE_DONE != sqlite3_step(localDelectStmt)){
                            NSLog(@"%s",sqlite3_errmsg(localDatabase));
                            NSAssert1(0, @"Error While Deleting. '%s'",sqlite3_errmsg(localDatabase));
                        }
                        else {
                        }
                        sqlite3_reset(localDelectStmt);
                    }
                    localDelectStmt = nil;
                    
                }
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
    }
    @finally {
        sqlite3_close(localDatabase);
        localDelectStmt = nil;
    }
}

-(NSMutableDictionary *)getProductMenuDetailsFromfflineDB{
    
    NSMutableDictionary * productMenuDic = [NSMutableDictionary new];
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localSelectStmt =nil;
    
    @try {
        NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        NSString * menuNameStr = @"";
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            if (localSelectStmt == nil) {
                NSString *query = [NSString stringWithFormat:@"select menu_name from menu"];
                const char *sqlStatement = query.UTF8String;
                
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        menuNameStr = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    }
                    
                    sqlite3_reset(localSelectStmt);
                }
                localSelectStmt = nil;
            }
            
            NSMutableArray * categoriesArr = [NSMutableArray new];
            if(menuNameStr.length){
                if (localSelectStmt == nil) {
                    NSString * query = [NSString stringWithFormat:@"select category_name from menu_categories where menu_name = '%@'",menuNameStr];
                    const char * sqlStatement = query.UTF8String;
                    
                    if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                        
                        while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                            
                            [categoriesArr addObject:@((char *)sqlite3_column_text(localSelectStmt, 0))];
                        }
                        sqlite3_reset(localSelectStmt);
                    }
                    localSelectStmt = nil;
                }
            }
            
            productMenuDic[CATEGORY_NAMES] = categoriesArr;
            
            [categoriesArr addObject:@"ALL"];
            for(NSString * categoryNameStr in categoriesArr){
                
                NSMutableArray * categoryItemsArr = [NSMutableArray new];
                
                NSString * query = [NSString stringWithFormat:@"select item_name, pluCode, item_desc from menu_items where category_name = '%@'",categoryNameStr];
                const char * sqlStatement = query.UTF8String;
                if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                    
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        NSString * itemNameStr = @"";
                        NSString * pluCodeStr = @"";
                        NSString * itemDescStr = @"";
                        
                        itemNameStr = @((char *)sqlite3_column_text(localSelectStmt, 0));
                        pluCodeStr  = @((char *)sqlite3_column_text(localSelectStmt, 1));
                        itemDescStr = @((char *)sqlite3_column_text(localSelectStmt, 2));
                        
                        NSDictionary * itemDetailsDic = @{ITEM_NAME: itemNameStr,PLU_CODE: pluCodeStr,ITEM__DESC: itemDescStr};
                        
                        [categoryItemsArr addObject:itemDetailsDic];
                    }
                    sqlite3_reset(localSelectStmt);
                }
                productMenuDic[categoryNameStr] = categoryItemsArr;
            }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        return productMenuDic;
    }
}



-(BOOL)DownLoadFileAndInsertItInLoadDB:(NSString *)fileUrlStr dataType:(NSString *)fileContainDataStr{
    
    BOOL isFileDataSaved = false;
    
    @try {
        
        fileUrlStr = [fileUrlStr stringByReplacingOccurrencesOfString:@"\\" withString:@"/" ];
        
//        fileUrlStr = [fileUrlStr stringByReplacingOccurrencesOfString:@"183.82.102.209:80" withString:@"10.10.0.90:80"];
        
        // comment while giving to production...
        fileUrlStr = [fileUrlStr stringByReplacingOccurrencesOfString:@"183.82.102.209:80" withString:@"14.192.17.222"];
        
        fileUrlStr = [fileUrlStr stringByReplacingOccurrencesOfString:@" " withString:@"%20"];
        
        NSData * fileContainData = [NSData dataWithContentsOfURL:[NSURL URLWithString:fileUrlStr]];
        
        if (fileContainData != nil) {
            
            NSArray * paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
            NSString * documentsDirectory = paths[0];
            
            NSString * billPrintFormatFilePath = [documentsDirectory stringByAppendingPathComponent:OFFLINE_CSV_FILE];
            [fileContainData writeToFile:billPrintFormatFilePath atomically:NO];
            NSError * err =nil;
            NSString *content =  [NSString stringWithContentsOfFile:billPrintFormatFilePath  encoding:NSUTF8StringEncoding error:&err];
            
            
            if(content == nil){//[fileContainDataStr isEqualToString:CUSTOMER_LOYALTY_CARD] || [fileContainDataStr isEqualToString:CUSTOMER_COUPONS_STRING] ) &&
                
                content = [[NSString alloc] initWithContentsOfFile:billPrintFormatFilePath encoding:NSASCIIStringEncoding error:&err];
                //                  content = [[NSString alloc] initWithContentsOfFile:billPrintFormatFilePath encoding:CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingWindowsHebrew) error:&err];

                NSLog(@"ERROR----- %@",err);
            }
            
            
            
            NSMutableArray *arrayfarm = [[content componentsSeparatedByString:@"\n"] mutableCopy];
            [arrayfarm removeObjectAtIndex:0];
            
            if([fileContainDataStr isEqualToString:SKU_MASTER]){
                isFileDataSaved =  [self saveSKUMasterDataFromCSVFile:arrayfarm];
                //                skuStartIndex = (int)[arrayfarm count];
            }
            else  if([fileContainDataStr isEqualToString:SKU_EAN]){
                isFileDataSaved = [self saveProductsEANDataFromCSVFile:arrayfarm];
                //                skuEanIndex = (int)[arrayfarm count];
            }
            else  if([fileContainDataStr isEqualToString:SKU_PRICE_LIST_TABLE]){
                isFileDataSaved =  [self savePricesListDataFromCSVFile:arrayfarm];
                //                skuPriceStartIndex = (int)[arrayfarm count];
            }
            else  if([fileContainDataStr isEqualToString:GROUP_CHILD_TABLE]){
                isFileDataSaved = [self saveGroupsChildsDataFromCSVFileIntoTable:arrayfarm];
                groupsChildsStartIndex = (int)[arrayfarm count];
            }
            else  if([fileContainDataStr isEqualToString:MEMBER_SHIP_USERS]){
                isFileDataSaved = [self saveMemberShipUsersDetailsFromCSVFile:arrayfarm];
                //                groupsChildsStartIndex = (int)[arrayfarm count];
            }
            // added by roja on 15/05/2019..
            else  if([fileContainDataStr isEqualToString:LOYALTY_CARD_MASTER]){
                isFileDataSaved = [self saveLoyalytyCardMasterFromCSVFile:arrayfarm];
            }
            else  if([fileContainDataStr isEqualToString:CUSTOMER_LOYALTY_CARD]){
                isFileDataSaved = [self saveCustomerLoyaltyCardFromCSVFile:arrayfarm];
            }
            else  if([fileContainDataStr isEqualToString:LOYALTY_CARD_PURCHASE_RANGE]){
                isFileDataSaved = [self saveLoyaltyCardPurchaseRangesFromCSVFile:arrayfarm];
            }
            else  if([fileContainDataStr isEqualToString:LOYALTY_CARD]){
                isFileDataSaved = [self saveLoyalytyCardDetailsFromCSVFile:arrayfarm];
            }
            else  if([fileContainDataStr isEqualToString:LOYALTY_CARD_LEDGER]){
                isFileDataSaved = [self saveLoyaltyCardLedgerFromCSVFile:arrayfarm];
            }
            else  if([fileContainDataStr isEqualToString:GIFT_COUPONS_STRING]){
                isFileDataSaved = [self saveGiftCouponsFromCSVFile:arrayfarm];
            }
            else  if([fileContainDataStr isEqualToString:CUSTOMER_COUPONS_STRING]){
                isFileDataSaved = [self saveCustomerGiftCouponsFromCSVFile:arrayfarm];
            }
            else  if([fileContainDataStr isEqualToString:COUPONS_MASTER_STRING]){
                isFileDataSaved = [self saveCouponMasterFromCSVFile:arrayfarm];
            }
            else  if([fileContainDataStr isEqualToString:COUPONS_LOCATION_STRING]){
                isFileDataSaved = [self saveGiftCouponLocationFromCSVFile:arrayfarm];
            }
            
            
            else  if([fileContainDataStr isEqualToString:VOUCHERS_MASTER_STRING]){
                isFileDataSaved = [self saveVoucherMasterFromCSVFile:arrayfarm];
            }
            
            else  if([fileContainDataStr isEqualToString:CUSTOMER_VOUCHERS_STRING]){
                isFileDataSaved = [self saveCustomerVouchersFromCSVFile:arrayfarm];
            }
            
            else  if([fileContainDataStr isEqualToString:VOUCHERS_STRING]){
                isFileDataSaved = [self saveVouchersFromCSVFile:arrayfarm];
            }
            
            else  if([fileContainDataStr isEqualToString:VOUCHERS_LOCATION_STRING]){
                isFileDataSaved = [self saveVoucherLocationFromCSVFile:arrayfarm];
            }
          
            // Upto here added by roja on 15/05/2019..
            
            //            NSFileManager *manager = [NSFileManager defaultManager];
            NSError *error = nil;
            //            [manager removeItemAtPath:[NSHomeDirectory() stringByAppendingPathComponent:OFFLINE_CSV_FILE] error:&error];
            
            [[NSFileManager defaultManager] removeItemAtPath:billPrintFormatFilePath error:&error];
            
            NSLog(@"removeItemAtPath: %@ ---> %@",billPrintFormatFilePath,error);
            
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
        return isFileDataSaved;
    }
}


-(void)saveInformationInHybirdMode:(NSArray *)infoArr{
    
    @try{
        
        [self saveProducts:infoArr];
        [self savePricesList:infoArr];
    }
    @catch(NSException * exception){
        
    }
}




//-(void)decode{
////    NSData * encryptedData  = [@"nb4rE4MgDJ3fTss9k6jRZQ==" dataUsingEncoding: NSASCIIStringEncoding];
//
//    for(NSString * str in @[@"nb4rE4MgDJ3fTss9k6jRZQ==",@"LnFBvwwk0XCpdfShVht+fA==",@"c3t9eaPBHDZR6lHEdltrqw=="]){
//
//    NSData * encryptedData = [[NSData alloc] initWithBase64EncodedString:str options:0];
//
//    char * key = "TheBestSecretKey";
//    NSUInteger dataLength = [encryptedData length];
//    uint8_t unencryptedData[dataLength + kCCKeySizeAES128];
//    size_t unencryptedLength;
//
//    CCCrypt(kCCDecrypt, kCCAlgorithmAES, 0, key, kCCKeySizeAES128, NULL, [encryptedData bytes], dataLength, unencryptedData, dataLength, &unencryptedLength);
//
//
//    NSString * output = [[NSString alloc] initWithBytes:unencryptedData length:unencryptedLength encoding:NSUTF8StringEncoding];
//    NSLog(@"----%@",output);
//    }
//
//    for(NSString * str in @[@"nb4rE4MgDJ3fTss9k6jRZQ==",@"LnFBvwwk0XCpdfShVht+fA==",@"c3t9eaPBHDZR6lHEdltrqw=="]){
//
//        NSData * encryptedData = [[NSData alloc] initWithBase64EncodedString:str options:0];
//
//        char * key = "TheBestSecretKey";
//        NSUInteger dataLength = [encryptedData length];
//        uint8_t unencryptedData[dataLength + kCCKeySizeAES256];
//        size_t unencryptedLength;
//
//        CCCrypt(kCCDecrypt, kCCAlgorithmAES, 0, key, kCCKeySizeAES256, NULL, [encryptedData bytes], dataLength, unencryptedData, dataLength, &unencryptedLength);
//
//
//        NSString * output = [[NSString alloc] initWithBytes:unencryptedData length:unencryptedLength encoding:NSUTF8StringEncoding];
//        NSLog(@"----%@",output);
//    }
//}

//- (int) encryptWithKey: (NSString *) key
//{
//    // 'key' should be 32 bytes for AES256, will be null-padded otherwise
//    char * keyPtr[kCCKeySizeAES128+1]; // room for terminator (unused)
//    bzero( keyPtr, sizeof(keyPtr) ); // fill with zeroes (for padding)
//
//    // fetch key data
//    [key getCString: keyPtr maxLength: sizeof(keyPtr) encoding: NSUTF8StringEncoding];
//
//    // encrypts in-place, since this is a mutable data object
//    size_t numBytesEncrypted = 0;
//    CCCryptorStatus result = CCCrypt( kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,
//                                     keyPtr, kCCKeySizeAES128,
//                                     NULL /* initialization vector (optional) */,
//                                     [self mutableBytes], [self length], /* input */
//                                     [self mutableBytes], [self length]+32, /* output */
//                                     &numBytesEncrypted );
//    return numBytesEncrypted;
//}






#pragma mark below commented code is related to service call's(also saving data) for offline download of all Loyalty table's(5).
//Below code written by roja on 05/05/2019...
// Here we are doing separate service calls for each loyalty table.. and saving data...(presnt no need to do this process).. it slow down's the downloading process..
//Reason for commenting the code is, present we are downloading the data from CSV file's(all loyalty related table's data).. so, no need to do seperate service calls for each loyalty table..


//You can delete if not used future
/*
-(BOOL)getLoyaltyCardDetails{
    
    BOOL status = false;
    
    @try {
        
        NSArray *loyaltyKeys = @[@"loyaltyCardNumber", @"requestHeader", @"locations",START_INDEX, LAST_LOYALTY_CARDS_UPDATED, TOTAL_SKUS, FILE_REQUIRED];
        
        NSArray * loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,@"",[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        if([[defaults valueForKey:LAST_LOYALTY_CARDS_UPDATED] length]){
            
            NSLog(@"----LAST_LOYALTY_CARDS_UPDATED----Download----%@",[defaults valueForKey:LAST_LOYALTY_CARDS_UPDATED]);
            
            loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_LOYALTY_CARDS_UPDATED]],[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        }
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        // Need to work on Loyalty_cards related service call..
        //        WebServiceController * controller = [[WebServiceController alloc] init];
        //        controller.skuServiceDelegate = self;
        //        status = [controller :loyaltyString];
        
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        // temprly creating array to check wheather the data saving into loyalty_cards Table or not..
        //need to delete..
        NSArray *keys = @[@"loyalty_card_number", @"assigned_status", @"card_status", @"loyalty_program_number", @"card_id", @"otp_required", @"assigned_cust_Id", @"start_date", @"end_date"];
        NSArray *objects = @[@"LC10000000300106",@"1", @"1", @"100000",@"28901", @"0",@"",@"2019-05-01 00:00:00",@"2019-05-31 00:00:00"];
        
        
        NSMutableDictionary * loyaltyDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSMutableArray * loyaltydetailsArr = [[NSMutableArray alloc]init];
        
        [loyaltydetailsArr addObject:loyaltyDic];
        
        status = [self saveLoyaltyCardsInfo:loyaltydetailsArr];
        // Till Here need to remove after getting service support...
        return status;
    }
}

// Need to work on success && error responces ...
// In success responce saveLoyaltyCardsInfo method need to call


-(BOOL)saveLoyaltyCardsInfo:(NSArray *)loyaltyCardsInfoArr { //NSMutableArray ||  NSArray
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- LOYALTY_CARDS----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createLoyaltyCardsSqlStatement  = "create table if not exists 'loyalty_cards' ('loyalty_card_number' VARCHAR (50) NOT NULL, 'assigned_status' TINYINT (5) NOT NULL,'card_status' TINYINT (5) NOT NULL, 'loyalty_program_number' VARCHAR (50) NOT NULL, 'card_id' VARCHAR (50) DEFAULT NULL, 'otp_required' TINYINT (4)  DEFAULT '0', 'assigned_cust_Id' CHAR (12) DEFAULT NULL, 'start_date' DATETIME DEFAULT NULL, 'end_date' DATETIME DEFAULT NULL, PRIMARY KEY ('loyalty_card_number'))";
            
            if (sqlite3_exec(localDatabase, createLoyaltyCardsSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- loyalty_cards TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            
            const char * InsertLoyaltyCardsSqlStatement = "INSERT OR REPLACE into loyalty_cards(loyalty_card_number, assigned_status, card_status, loyalty_program_number, card_id, otp_required, assigned_cust_Id, start_date, end_date) Values(?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardsSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in loyaltyCardsInfoArr) {
                    
                    if ([temp.allKeys containsObject:@"loyalty_card_number"] && ![[temp valueForKey:@"loyalty_card_number"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:@"loyalty_card_number"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 1,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"assigned_status"] && ![[temp valueForKey:@"assigned_status"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_int(localInsertStmt, 2, [[temp valueForKey:@"assigned_status"] intValue]);
                    }
                    else{
                        
                        sqlite3_bind_int(localInsertStmt, 2, 0);
                    }
                    
                    if ([temp.allKeys containsObject:@"card_status"] && ![[temp valueForKey:@"card_status"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_int(localInsertStmt, 3, [[temp valueForKey:@"card_status"] intValue]);
                    }
                    else{
                        
                        sqlite3_bind_int(localInsertStmt, 3, 0);
                    }
                    
                    if ([temp.allKeys containsObject:@"loyalty_program_number"] && ![[temp valueForKey:@"loyalty_program_number"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 4,  [[temp valueForKey:@"loyalty_program_number"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else
                        sqlite3_bind_text(localInsertStmt, 4,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([temp.allKeys containsObject:@"card_id"] && ![[temp valueForKey:@"card_id"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 5,  [[temp valueForKey:@"card_id"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 5,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"otp_required"] && ![[temp valueForKey:@"otp_required"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_int(localInsertStmt, 6, [[temp valueForKey:@"otp_required"] intValue]);
                    }
                    else
                        sqlite3_bind_int(localInsertStmt, 6, 0);
                    
                    if ([temp.allKeys containsObject:@"assigned_cust_Id"] && ![[temp valueForKey:@"assigned_cust_Id"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 7,  [[temp valueForKey:@"assigned_cust_Id"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 7,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"start_date"] && ![[temp valueForKey:@"start_date"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 8,  [[temp valueForKey:@"start_date"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 8,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"end_date"] && ![[temp valueForKey:@"end_date"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 9,  [[temp valueForKey:@"end_date"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 9,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){ // finished executing..
                        
                        //                        isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        NSLog(@"loyalty_card becomes false in due error while inserting into database");
                    }
                    else {
                        
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed -- LOYALTY_CARDS ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- LOYALTY_CARDS ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- LOYALTY_CARDS----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

 
-(BOOL)getCustomerLoyaltyCardDetails{
    
    BOOL status = false;
    
    @try {
        
        NSArray *loyaltyKeys = @[@"loyaltyCardNumber", @"requestHeader", @"locations",START_INDEX, LAST_CUSTOMER_LOYALTY_UPDATED, TOTAL_SKUS, FILE_REQUIRED];
        
        NSArray * loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,@"",[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        if([[defaults valueForKey:LAST_CUSTOMER_LOYALTY_UPDATED] length]){
            
            NSLog(@"----LAST_CUSTOMER_LOYALTY_UPDATED----Download----%@",[defaults valueForKey:LAST_CUSTOMER_LOYALTY_UPDATED]);
            
            loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_CUSTOMER_LOYALTY_UPDATED]],[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        }
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        // Need to work on Loyalty_cards related service call..
        //        WebServiceController * controller = [[WebServiceController alloc] init];
        //        controller.skuServiceDelegate = self;
        //        status = [controller :loyaltyString];
        
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        // temprly creating array to check wheather the data saving into loyalty_cards Table or not..
        //need to delete..
        
        NSArray *keys = @[@"loyalty_card_number", @"customer_name", @"phone_num", @"email", @"loyalty_program_number", @"card_id", @"points_earned", @"points_used", @"points_remaining", @"cash", @"id_card_type", @"id_card_number", @"status", @"issued_on", @"issued_to"];
        NSArray *objects = @[@"LC10000000300106",@"Roja", @"9440838286", @"roja1@gmail.com",@"100000", @"28901",@"160",@"110",@"50", @"50", @"Fixed", @"", @"1", @"2019-05-09", @"2019-06-08"];
        
        
        NSMutableDictionary * loyaltyDic;
        loyaltyDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSMutableArray * loyaltydetailsArr = [[NSMutableArray alloc]init];
        
        [loyaltydetailsArr addObject:loyaltyDic];
        
        status = [self saveCustomerLoyaltyCardsInfo:loyaltydetailsArr];
        // Till Here need to remove after getting service support...
        return status;
    }
}
// Need to work on success && error responces ...
// In success responce saveCustomerLoyaltyCardsInfo method need to call


-(BOOL)getLoyaltyCardMasterDetails{
    
    BOOL status = false;
    
    @try {
        
        NSArray *loyaltyKeys = @[@"loyaltyCardNumber", @"requestHeader", @"locations",START_INDEX, LAST_LOYALTY_CARD_MASTER_UPDATED, TOTAL_SKUS, FILE_REQUIRED];
        
        NSArray * loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,@"",[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        if([[defaults valueForKey:LAST_LOYALTY_CARD_MASTER_UPDATED] length]){
            
            NSLog(@"----LAST_CUSTOMER_LOYALTY_UPDATED----Download----%@",[defaults valueForKey:LAST_LOYALTY_CARD_MASTER_UPDATED]);
            
            loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_LOYALTY_CARD_MASTER_UPDATED]],[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        }
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        // Need to work on Loyalty_cards related service call..
        //        WebServiceController * controller = [[WebServiceController alloc] init];
        //        controller.skuServiceDelegate = self;
        //        status = [controller :loyaltyString];
        
    } @catch (NSException *exception) {
        
        status = false;
    } @finally {
        
        // temprly creating array to check wheather the data saving into loyalty_cards Table or not..
        //need to delete..
        
        NSArray *keys = @[@"loyalty_program_number", @"loyalty_program_name", @"loyality_program_description", @"loyalty_card_type", @"valid_from", @"valid_to", @"otp_requirement", @"start_date", @"end_date", @"reward_life_span", @"validity_period", @"reward_type", @"reward_criteria", @"reward_conversion_ratio", @"status", @"created_date", @"updated_date", @"user_name", @"role_name", @"no_of_cards", @"auto_issue", @"base_points", @"min_redeem_points", @"min_claim_points"];
        
        NSArray *objects = @[@"100000",@"Test001", @"", @"Bronze",@"2019-05-01", @"2019-05-31",@"0",@"2019-05-01", @"2019-05-31", @"10", @"30", @"Fixed", @"Turn Over", @"1", @"1", @"2019-05-09", @"", @"praveenkumar.sr@freshworld.in", @"", @"1", @"1", @"100.00", @"500.00", @"50.00"];
        
        NSMutableDictionary * loyaltyDic;
        loyaltyDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSMutableArray * loyaltydetailsArr = [[NSMutableArray alloc]init];
        [loyaltydetailsArr addObject:loyaltyDic];
        
        status = [self saveLoyaltyCardMasterInfo:loyaltydetailsArr];
        // Till Here need to remove after getting service support...
        return status;
    }
}


// Need to work on success && error responces ...
// In success responce saveLoyaltyCardMasterInfo method need to call


-(BOOL)saveLoyaltyCardMasterInfo:(NSArray *)loyaltyCardsMasterInfoArr { //NSMutableArray ||  NSArray
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- LOYALTY_CARDS_MASTER----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createLoyaltyCardMasterSqlStatement  = "create table if not exists 'loyalty_card_master' (`loyalty_program_number` VARCHAR(20) NOT NULL, `loyalty_program_name` VARCHAR(50) NOT NULL, `loyality_program_description` VARCHAR(255) NULL DEFAULT NULL, `loyalty_card_type` VARCHAR(30) NOT NULL, `valid_from` DATETIME NOT NULL, `valid_to` DATETIME NOT NULL, `otp_requirement` TINYINT(4) NULL DEFAULT NULL, `start_date` DATE NULL DEFAULT NULL, `end_date` DATE NULL DEFAULT NULL, `reward_life_span` INT(8) NULL DEFAULT NULL, `validity_period` INT(8) NULL DEFAULT NULL, `reward_type` VARCHAR(10) NOT NULL, `reward_criteria` VARCHAR(30) NULL DEFAULT NULL, `reward_conversion_ratio` FLOAT NULL DEFAULT NULL, `status` CHAR(10) NOT NULL, `created_date` DATE NULL DEFAULT NULL, `updated_date` DATE NULL DEFAULT NULL, `user_name` VARCHAR(30) NULL DEFAULT NULL, `role_name` VARCHAR(30) NULL DEFAULT NULL, `no_of_cards` INT(10) NULL DEFAULT NULL, `auto_issue` TINYINT(1) NULL DEFAULT NULL, `base_points` DECIMAL(10,2) NULL DEFAULT '0.00', `min_redeem_points` DECIMAL(10,2) NULL DEFAULT '0.00', `min_claim_points` DECIMAL(10,2) NOT NULL, PRIMARY KEY (`loyalty_program_number`))";
            
            if (sqlite3_exec(localDatabase, createLoyaltyCardMasterSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- loyalty_card_master TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            
            const char * InsertLoyaltyCardMasterSqlStatement = "INSERT OR REPLACE into loyalty_card_master(loyalty_program_number, loyalty_program_name, loyality_program_description, loyalty_card_type, valid_from, valid_to, otp_requirement, start_date, end_date, reward_life_span, validity_period, reward_type, reward_criteria, reward_conversion_ratio, status, created_date, updated_date, user_name, role_name, no_of_cards, auto_issue, base_points, min_redeem_points, min_claim_points) Values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardMasterSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in loyaltyCardsMasterInfoArr) {
                    
                    if ([temp.allKeys containsObject:@"loyalty_program_number"] && ![[temp valueForKey:@"loyalty_program_number"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_text(localInsertStmt, 1, [[temp valueForKey:@"loyalty_program_number"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 1,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"loyalty_program_name"] && ![[temp valueForKey:@"loyalty_program_name"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 2,  [[temp valueForKey:@"loyalty_program_name"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        
                        sqlite3_bind_text(localInsertStmt, 2,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:@"loyality_program_description"] && ![[temp valueForKey:@"loyality_program_description"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 3,  [[temp valueForKey:@"loyality_program_description"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        
                        sqlite3_bind_text(localInsertStmt, 3,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:@"loyalty_card_type"] && ![[temp valueForKey:@"loyalty_card_type"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 4,  [[temp valueForKey:@"loyalty_card_type"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else
                        sqlite3_bind_text(localInsertStmt, 4,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([temp.allKeys containsObject:@"valid_from"] && ![[temp valueForKey:@"valid_from"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 5,  [[temp valueForKey:@"valid_from"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 5,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"valid_to"] && ![[temp valueForKey:@"valid_to"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 6,  [[temp valueForKey:@"valid_to"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else
                        sqlite3_bind_text(localInsertStmt, 6,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"otp_requirement"] && ![[temp valueForKey:@"otp_requirement"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 7, [[temp valueForKey:@"otp_requirement"] intValue]);
                    
                    else
                        sqlite3_bind_int(localInsertStmt, 7, 0);
                    
                    if ([temp.allKeys containsObject:@"start_date"] && ![[temp valueForKey:@"start_date"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 8,  [[temp valueForKey:@"start_date"] UTF8String], -1, SQLITE_TRANSIENT);
                    
                    else
                        sqlite3_bind_text(localInsertStmt, 8,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"end_date"] && ![[temp valueForKey:@"end_date"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_text(localInsertStmt, 9,  [[temp valueForKey:@"end_date"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 9,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"reward_life_span"] && ![[temp valueForKey:@"reward_life_span"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 10, [[temp valueForKey:@"reward_life_span"] intValue]);
                    
                    else
                        sqlite3_bind_int(localInsertStmt, 10, 0);
                    
                    if ([temp.allKeys containsObject:@"validity_period"] && ![[temp valueForKey:@"validity_period"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_int(localInsertStmt, 11, [[temp valueForKey:@"validity_period"] intValue]);
                    else
                        sqlite3_bind_int(localInsertStmt, 11, 0);
                    
                    
                    if ([temp.allKeys containsObject:@"reward_type"] && ![[temp valueForKey:@"reward_type"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_text(localInsertStmt, 12,  [[temp valueForKey:@"reward_type"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 12,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"reward_criteria"] && ![[temp valueForKey:@"reward_criteria"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 13, [[temp valueForKey:@"reward_criteria"] intValue]);
                    
                    else
                        sqlite3_bind_int(localInsertStmt, 13, 0);
                    
                    if ([temp.allKeys containsObject:@"reward_conversion_ratio"] && ![[temp valueForKey:@"reward_conversion_ratio"] isKindOfClass:[NSNull class]])
                        
                        sqlite3_bind_double(localInsertStmt, 14, [[temp valueForKey:@"reward_conversion_ratio"] floatValue]);
                    else
                        sqlite3_bind_double(localInsertStmt, 14, 0);
                    
                    if ([temp.allKeys containsObject:@"status"] && ![[temp valueForKey:@"status"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 15,  [[temp valueForKey:@"status"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 15,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([temp.allKeys containsObject:@"created_date"] && ![[temp valueForKey:@"created_date"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 16,  [[temp valueForKey:@"created_date"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 16,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"updated_date"] && ![[temp valueForKey:@"updated_date"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 17,  [[temp valueForKey:@"updated_date"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 17,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"user_name"] && ![[temp valueForKey:@"user_name"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 18,  [[temp valueForKey:@"user_name"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 18,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"role_name"] && ![[temp valueForKey:@"role_name"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 19,  [[temp valueForKey:@"role_name"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 19,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    if ([temp.allKeys containsObject:@"no_of_cards"] && ![[temp valueForKey:@"no_of_cards"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 20, [[temp valueForKey:@"no_of_cards"] intValue]);
                    
                    else
                        sqlite3_bind_int(localInsertStmt, 20, 0);
                    
                    if ([temp.allKeys containsObject:@"auto_issue"] && ![[temp valueForKey:@"auto_issue"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_int(localInsertStmt, 21, [[temp valueForKey:@"auto_issue"] intValue]);
                    
                    else
                        sqlite3_bind_int(localInsertStmt, 21, 0);
                    
                    if ([temp.allKeys containsObject:@"base_points"] && ![[temp valueForKey:@"base_points"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_double(localInsertStmt, 22, [[temp valueForKey:@"base_points"] floatValue]);
                    
                    else
                        sqlite3_bind_double(localInsertStmt, 22, 0);
                    
                    if ([temp.allKeys containsObject:@"min_redeem_points"] && ![[temp valueForKey:@"min_redeem_points"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_double(localInsertStmt, 23, [[temp valueForKey:@"min_redeem_points"] floatValue]);
                    
                    else
                        sqlite3_bind_double(localInsertStmt, 23, 0);
                    
                    if ([temp.allKeys containsObject:@"min_claim_points"] && ![[temp valueForKey:@"min_claim_points"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_double(localInsertStmt, 24, [[temp valueForKey:@"min_claim_points"] floatValue]);
                    
                    else
                        sqlite3_bind_double(localInsertStmt, 24, 0);
                    
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){ // finished executing..
                        
                        //                        isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        NSLog(@"loyalty_card_master becomes false in due error while inserting into database");
                    }
                    else {
                        
                        //                        isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed --  LOYALTY_CARDS_MASTER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- LOYALTY_CARDS_MASTER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- LOYALTY_CARDS_MASTER----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}



-(BOOL)getLoyaltyPurchaseRanges{
    
    BOOL status = false;
    
    @try {
        
        NSArray *loyaltyKeys = @[@"loyaltyCardNumber", @"requestHeader", @"locations",START_INDEX, LAST_LOYALTY_PURCHASE_RANGES_UPDATED, TOTAL_SKUS, FILE_REQUIRED];
        
        NSArray * loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,@"",[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        if([[defaults valueForKey:LAST_LOYALTY_PURCHASE_RANGES_UPDATED] length]){
            
            NSLog(@"----LAST_LOYALTY_PURCHASE_RANGES_UPDATED----Download----%@",[defaults valueForKey:LAST_LOYALTY_PURCHASE_RANGES_UPDATED]);
            
            loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_LOYALTY_PURCHASE_RANGES_UPDATED]],[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        }
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        // Need to work on LAST_LOYALTY_PURCHASE_RANGES related service call..
        //        WebServiceController * controller = [[WebServiceController alloc] init];
        //        controller.skuServiceDelegate = self;
        //        status = [controller :loyaltyString];
        
    } @catch (NSException *exception) {
        
        status = false;
        
    } @finally {
        
        // temprly creating array to check wheather the data saving into loyalty_cards Table or not..
        //need to delete..
        NSArray *keys = @[@"sno", @"loyalty_program_number", @"min_purchase_value", @"max_purchase_value", @"reward_type", @"reward_value", @"reward_criteria"];
        NSArray *objects = @[@"100000",@"100", @"1000", @"Fixed",@"20", @"Turn Over"];
        
        NSMutableDictionary * loyaltyDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSMutableArray * loyaltydetailsArr = [[NSMutableArray alloc]init];
        
        [loyaltydetailsArr addObject:loyaltyDic];
        
        status = [self saveLoyaltyPurchaseRanges:loyaltydetailsArr];
        // Till Here need to remove after getting service support...
        return status;
    }
}


// Need to work on success && error responces ...
// In success responce saveLoyaltyPurchaseRanges method need to call



-(BOOL)saveLoyaltyPurchaseRanges:(NSArray *)loyaltyCardsPurchaseRangesArr { //NSMutableArray ||  NSArray
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- LOYALTY_CARDS_PURCHASE_RANGES----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createLoyaltyCardPurchaseRangeSqlStatement  = "create table if not exists 'loyalty_purchase_ranges' ( `sno` INT(11) NOT NULL, `loyalty_program_number` VARCHAR(50) NULL DEFAULT NULL, `min_purchase_value` DECIMAL(10,2) NULL DEFAULT NULL, `max_purchase_value` DECIMAL(10,2) NULL DEFAULT NULL, `reward_type` VARCHAR(20) NULL DEFAULT NULL, `reward_value` DECIMAL(10,2) NULL DEFAULT '0.00', `reward_criteria` VARCHAR(20) NULL DEFAULT NULL)";
            
            
            if (sqlite3_exec(localDatabase, createLoyaltyCardPurchaseRangeSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- loyalty_purchase_ranges TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            
            const char * InsertLoyaltyCardPurchaseRangeSqlStatement = "INSERT OR REPLACE into loyalty_purchase_ranges(sno, loyalty_program_number, min_purchase_value, max_purchase_value, reward_type, reward_value, reward_criteria) Values(?,?,?,?,?,?,?)";
            
            // SNo value increment Process..
            const char * sqlSelectStatement = "select sno from loyalty_purchase_ranges order by sno DESC LIMIT 1";
            
            NSString * sNoValue = @"1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    sNoValue = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    sNoValue = [NSString stringWithFormat:@"%d", sNoValue.intValue+1];
                }
                sqlite3_reset(localSelectStmt);
                localSelectStmt = nil;
            }
            //Upto here SNo value increment Process..
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardPurchaseRangeSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in loyaltyCardsPurchaseRangesArr) {
                    
                    sqlite3_bind_int(localInsertStmt, 1, sNoValue.intValue);
                    
                    if ([temp.allKeys containsObject:@"loyalty_program_number"] && ![[temp valueForKey:@"loyalty_program_number"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 2,  [[temp valueForKey:@"loyalty_program_number"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        
                        sqlite3_bind_text(localInsertStmt, 2,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    if ([temp.allKeys containsObject:@"min_purchase_value"] && ![[temp valueForKey:@"min_purchase_value"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_double(localInsertStmt, 3, [[temp valueForKey:@"min_purchase_value"] floatValue]);
                    }
                    else{
                        
                        sqlite3_bind_double(localInsertStmt, 3, 0.0);
                    }
                    
                    if ([temp.allKeys containsObject:@"max_purchase_value"] && ![[temp valueForKey:@"max_purchase_value"] isKindOfClass:[NSNull class]]){
                        sqlite3_bind_double(localInsertStmt, 4, [[temp valueForKey:@"max_purchase_value"] floatValue]);
                    }
                    else
                        sqlite3_bind_double(localInsertStmt, 4, 0.0);
                    
                    if ([temp.allKeys containsObject:@"reward_type"] && ![[temp valueForKey:@"reward_type"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 5,  [[temp valueForKey:@"reward_type"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 5,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([temp.allKeys containsObject:@"reward_value"] && ![[temp valueForKey:@"reward_value"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_double(localInsertStmt, 6, [[temp valueForKey:@"reward_value"] floatValue]);
                    }
                    else
                        sqlite3_bind_double(localInsertStmt, 6, 0.0);
                    
                    if ([temp.allKeys containsObject:@"reward_criteria"] && ![[temp valueForKey:@"reward_criteria"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 7,  [[temp valueForKey:@"reward_criteria"] UTF8String], -1, SQLITE_TRANSIENT);
                    
                    else
                        sqlite3_bind_text(localInsertStmt, 7,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){ // finished executing..
                        
                        //  isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        NSLog(@"loyalty_card_purchase_range becomes false in due error while inserting into database");
                    }
                    else {
                        
                        //  isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed --  LOYALTY_CARDS_PURCHASE_RANGE ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- LOYALTY_CARDS_PURCHASE_RANGE ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- LOYALTY_CARDS_PURCHASE_RANGES----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}


-(BOOL)getLoyaltyCardLedger{
    
    BOOL status = false;
    
    @try {
        
        NSArray *loyaltyKeys = @[@"loyaltyCardNumber", @"requestHeader", @"locations",START_INDEX, LAST_LOYALTY_CARD_LEDGER_UPDATED, TOTAL_SKUS, FILE_REQUIRED];
        
        NSArray * loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,@"",[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        
        NSUserDefaults * defaults = [[NSUserDefaults alloc] init];
        
        if([[defaults valueForKey:LAST_LOYALTY_CARD_LEDGER_UPDATED] length]){
            
            NSLog(@"----LAST_LOYALTY_CARD_LEDGER_UPDATED----Download----%@",[defaults valueForKey:LAST_LOYALTY_CARD_LEDGER_UPDATED]);
            
            loyaltyObjects = @[@"",[RequestHeader getRequestHeader], presentLocation, ZERO_CONSTANT,[NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_LOYALTY_CARD_LEDGER_UPDATED]],[NSString stringWithFormat:@"%d", 1000], [NSNumber numberWithBool:isFileDownload]];
        }
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        // Need to work on LAST_LOYALTY_PURCHASE_RANGES related service call..
        //        WebServiceController * controller = [[WebServiceController alloc] init];
        //        controller.skuServiceDelegate = self;
        //        status = [controller :loyaltyString];
        
    } @catch (NSException *exception) {
        
        status = false;
        
    } @finally {
        
        // temprly creating array to check wheather the data saving into loyalty_cards Table or not..
        //need to delete..
        NSArray *keys = @[@"loyalty_card_number", @"sno", @"points_credited", @"points_debited", @"created_date", @"updated_date", @"points_remaining"];
        NSArray *objects = @[@"LC10000000300106",@"1", @"160", @"0",@"2019-05-09 18:28:33", @"2019-05-09 18:28:33", @"50"];
        
        NSMutableDictionary * loyaltyDic = [NSMutableDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSMutableArray * loyaltydetailsArr = [[NSMutableArray alloc]init];
        
        [loyaltydetailsArr addObject:loyaltyDic];
        
        status = [self saveLoyaltyCardLedger:loyaltydetailsArr];
        // Till Here need to remove after getting service support...
        return status;
    }
}




// Need to work on success && error responces ...
// In success responce saveLoyaltyPurchaseRanges method need to call



-(BOOL)saveLoyaltyCardLedger:(NSArray *)loyaltyCardLedgerArr { //NSMutableArray ||  NSArray
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    NSLog(@"-----Start Time ---- LOYALTY_CARDS_LEDGER----%@",currentdate);
    
    NSString * localDBPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    BOOL isCompleteDataInserted = FALSE;
    
    static sqlite3 * localDatabase = nil;
    static sqlite3_stmt * localInsertStmt = nil;
    static sqlite3_stmt * localSelectStmt = nil;
    
    @try{
        
        if(sqlite3_open(localDBPath.UTF8String, &localDatabase) == SQLITE_OK){
            
            char *errMsg;
            
            const char * createLoyaltyCardLedgerSqlStatement  = "create table if not exists 'loyalty_card_ledger' (`loyalty_card_number` VARCHAR(50) NULL DEFAULT NULL,`sno` INT(11) NOT NULL, `points_credited` INT(11) NULL DEFAULT '0', `points_debited` INT(11) NULL DEFAULT '0', `created_date` DATETIME NULL DEFAULT NULL, `updated_date` DATETIME NULL DEFAULT NULL, `points_remaining` INT(11) NULL DEFAULT '0', PRIMARY KEY (`sno`))";
            
            
            if (sqlite3_exec(localDatabase, createLoyaltyCardLedgerSqlStatement, NULL, NULL, &errMsg)
                == SQLITE_OK) {
                
                NSLog(@"---- loyalty_card_ledger TABLE Created Sucessfully ----");
            }
            
            sqlite3_exec(localDatabase, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
            
            
            const char * InsertLoyaltyCardLedgerSqlStatement = "INSERT OR REPLACE into loyalty_card_ledger(loyalty_card_number, sno, points_credited, points_debited, created_date, updated_date, points_remaining) Values(?,?,?,?,?,?,?)";
            
            // SNo value increment Process..
            const char * sqlSelectStatement = "select sno from loyalty_card_ledger order by sno DESC LIMIT 1";
            
            NSString * sNoValue = @"1";
            
            if(sqlite3_prepare_v2(localDatabase, sqlSelectStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                if (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                    
                    sNoValue = @((char *)sqlite3_column_text(localSelectStmt, 0));
                    sNoValue = [NSString stringWithFormat:@"%d", sNoValue.intValue+1];
                }
                sqlite3_reset(localSelectStmt);
                localSelectStmt = nil;
            }
            //Upto here SNo value increment Process..
            
            if(sqlite3_prepare_v2(localDatabase, InsertLoyaltyCardLedgerSqlStatement, -1, &localInsertStmt, NULL) == SQLITE_OK) {
                
                for ( NSDictionary * temp in loyaltyCardLedgerArr) {
                    
                    if ([temp.allKeys containsObject:@"loyalty_card_number"] && ![[temp valueForKey:@"loyalty_card_number"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_text(localInsertStmt, 1,  [[temp valueForKey:@"loyalty_card_number"] UTF8String], -1, SQLITE_TRANSIENT);
                    }
                    else{
                        sqlite3_bind_text(localInsertStmt, 1,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    }
                    
                    sqlite3_bind_int(localInsertStmt, 2, sNoValue.intValue);
                    
                    if ([temp.allKeys containsObject:@"points_credited"] && ![[temp valueForKey:@"points_credited"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_double(localInsertStmt, 3, [[temp valueForKey:@"points_credited"] floatValue]);
                    }
                    else{
                        
                        sqlite3_bind_double(localInsertStmt, 3, 0.0);
                    }
                    
                    if ([temp.allKeys containsObject:@"points_debited"] && ![[temp valueForKey:@"points_debited"] isKindOfClass:[NSNull class]]){
                        sqlite3_bind_double(localInsertStmt, 4, [[temp valueForKey:@"points_debited"] floatValue]);
                    }
                    else
                        sqlite3_bind_double(localInsertStmt, 4, 0.0);
                    
                    if ([temp.allKeys containsObject:@"created_date"] && ![[temp valueForKey:@"created_date"] isKindOfClass:[NSNull class]])
                        sqlite3_bind_text(localInsertStmt, 5,  [[temp valueForKey:@"created_date"] UTF8String], -1, SQLITE_TRANSIENT);
                    else
                        sqlite3_bind_text(localInsertStmt, 5,  (@"").UTF8String, -1, SQLITE_TRANSIENT);
                    
                    
                    if ([temp.allKeys containsObject:@"updated_date"] && ![[temp valueForKey:@"updated_date"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_double(localInsertStmt, 6, [[temp valueForKey:@"updated_date"] floatValue]);
                    }
                    else
                        sqlite3_bind_double(localInsertStmt, 6, 0.0);
                    
                    if ([temp.allKeys containsObject:@"points_remaining"] && ![[temp valueForKey:@"points_remaining"] isKindOfClass:[NSNull class]]){
                        
                        sqlite3_bind_double(localInsertStmt, 7, [[temp valueForKey:@"points_remaining"] floatValue]);
                    }
                    else{
                        sqlite3_bind_double(localInsertStmt, 7, 0.0);
                    }
                    
                    
                    if(SQLITE_DONE != sqlite3_step(localInsertStmt)){ // finished executing..
                        
                        //  isCompleteDataInserted = FALSE;
                        NSAssert1(0, @"Error While Inserting. '%s'",sqlite3_errmsg(localDatabase));
                        NSLog(@"loyalty_card_ledger becomes false in due error while inserting into database");
                    }
                    else {
                        
                        //  isCompleteDataInserted = true;
                    }
                    
                    sqlite3_reset(localInsertStmt);
                }
                
                if(sqlite3_exec( localDatabase, "COMMIT TRANSACTION", NULL, NULL, &errMsg)==SQLITE_OK)
                {
                    isCompleteDataInserted = true;
                    NSLog(@"----Committed --  LOYALTY_CARDS_LEDGER ----");
                }
                else
                {
                    isCompleteDataInserted = false;
                    NSLog(@"----Commit -- failed -- LOYALTY_CARDS_LEDGER ----");
                }
                sqlite3_finalize(localInsertStmt);
            }
        }
        else {
            
            NSLog(@"%s",sqlite3_errmsg(localDatabase));
        }
    }
    @catch(NSException * exception){
        
    }
    @finally{
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
        NSString* currentdate = [f stringFromDate:today];
        NSLog(@"-----End Time ---- LOYALTY_CARDS_LEDGER----%@",currentdate);
        
        localInsertStmt = nil;
        localSelectStmt = nil;
        sqlite3_close(localDatabase);
        return isCompleteDataInserted;
    }
}

*/
#pragma mark upto here commented code for offline download of all Loyalty table's(5)



@end
