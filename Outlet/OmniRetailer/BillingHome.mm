//
//  BillingHome.m
//  OmniRetailer
//
//  Created by Satya Siva Saradhi on 23/10/12.
//  Copyright 2012 __techolabssoftware.com__. All rights reserved.
//


#ifndef ZXQR
#define ZXQR 1
#endif
#import "BillingHome.h"


//#if ZXQR
//#import "MultiFormatOneDReader.h"
//#endif


#ifndef ZXAZ
#define ZXAZ 0
#endif
#import <QuartzCore/QuartzCore.h>
#import "SalesServiceSvc.h"
#import "Global.h"
#import "math.h"
#import "DataBaseConnection.h"
#import "sqlite3.h"
#import "SKTCPSocket.h"
#import "VouchercouponServiceSvc.h"
#import "LoyaltycardServiceSvc.h"
#import "SwipeController.h"
#import "SwipeControllerIpadViewController.h"
#import "SalesServiceSvc.h"
#import "PastBilling.h"
//#import <MailCore/MailCore.h>
#import "DealsController.h"
#import "DealServicesSvc.h"
#import "OfferServiceSvc.h"
#import "CustomerServiceSvc.h"
#import "WisePadController.h"
#import "MswipeWisepadController.h"
#import "MerchantSettings.h"
#import "OmniHomePage.h"
#import "GiftVoucherServices.h"
#import "GiftCouponServicesSvc.h"
#import "CheckWifi.h"
#import "OmniRetailerViewController.h"
#import "RequestHeader.h"
#import "CampaignRequestModel.h"
#import "ApplyDealModel.h"
#import "ApplyOfferModel.h"
#import "DealModel.h"
#import "OfferModel.h"


//NSString *offerType = @"";

static sqlite3 *database = nil;
static sqlite3_stmt *selectStmt = nil;

int pastGiftValueToDeduct = 0;

int tagid = 0;

float offerDiscount = 0.0;
NSString *dealDiscount = @"0.0";

bool flag = false;

NSString *billIDValue = @"";
NSString *billUserName = @"";
NSString *card_Number = @"";
NSString *finalBillDue = @"0";
NSString *changeReturn = @"";

BOOL customerStatus = false;



NSString *turnOverDis = @"";
NSString *offerDescStr = @"";
NSString *turnOverDealDes = @"";


int rownumberofUpdating = 0;
float dealTempVal = 0.0f;


float totalBeforeTurnOver = 0;

BOOL isFreeItemAdded = false;

//ZBarReaderViewController *reader;
@implementation BillingHome

@synthesize BillField;
@synthesize skuArrayList, filteredSkuArrayList;
@synthesize aTimer;
@synthesize payTxt1, payTxt2, payTxt3;
@synthesize bgimage,spinner,loadingLabel;
@synthesize giftTypeArrayList;
@synthesize presentTextField;
@synthesize soundFileURLRef,soundFileObject;
@synthesize lastConnectedBTv4DeviceName,mCardSaleData,mSettings,mCardSaleResults;
@synthesize phoneNo,emailId,amountView,amt,bluetoothManager;
@synthesize popOver,draftBillID;
@synthesize selectIndex,selectSectionIndex,isOpen;
//it is used for cart billing .. and also reducing the stock when bill is success full.. on written on 20/04/2018....
@synthesize itemsFromCartArr,salesOrderIdStr,salesOrderBookingTypeStr,isOrderedBill;

//added by Srinivasulu on 30/01/2018....
@synthesize isNewReturnBill,isDuplicateBillIdResponse;
//upto hereon 30/01/0218....

//added by roja on 03/12/2019...
@synthesize isPaidVoucher,issueVoucherDetailsStr,paidVoucherItemDetailsDic;
//Upto here added by roja on 03/12/2019...



//commented by Srinivasulu on 08/09/2017....
//reason is they are using as properties they are producting crash.... while changing from online to offline....

//added by Srinivasulu on 02/08/2017....

//@synthesize totalBillAmountStr;

//added by Srinivasulu on 12/08/2017....

//@synthesize customerGstinStr;

//upto here on 12/08/2017....

//upto here on 02/08/2017....

#define kLastConnectedBTv4DeviceName @"kLastConnectedBTv4DeviceName"


- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

//- (void)dealloc
//{
//    [super dealloc];
//
//    cartTable = nil;
//
//    skuArrayList = nil;
//    filteredSkuArrayList = nil;
//    skListTable = nil;
//    cartItem = nil;
//
//    dealoroffersTxt = nil;
//    giftVoucherTxt  = nil;
//    subtotalTxt = nil;
//    taxTxt = nil;
//    totalTxt = nil;
//    payTxt1 = nil;
//    payTxt2 = nil;
//    payTxt3 = nil;
//
//
//
//    giftType        = nil;
//    giftNo          = nil;
//    giftValidTo     = nil;
//    giftAmt         = nil;
//
//
//
//    avai_points    = nil;
//    recash         = nil;
//
//
//
//    giftTypeTableView = nil;
//
//    giftTypeArrayList = nil;
//
//    //
//    offierPrice = nil;
//    validFrom = nil;
//    validTo = nil;
//    offerLabel = nil;
//
//
//
//    dealofferArry = nil;
//
//
//    // phnotext.text = nil;
//    emailtext.text = nil;
//    nametext.text = nil;
//    streettext.text = nil;
//    locltytext.text = nil;
//    citytext.text = nil;
//    pintext.text = nil;
//
//
//}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    NSLog(@"memory warning in billing");
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - View lifecycle

/*
 // Implement loadView to create a view hierarchy programmatically, without using a nib.
 - (void)loadView
 {
 }
 */


- (void) goHomePage {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    //[self.navigationController popViewControllerAnimated:YES];
    [UIView  transitionWithView:self.navigationController.view duration:0.8  options:UIViewAnimationOptionTransitionFlipFromRight
                     animations:^(void) {
                         BOOL oldState = [UIView areAnimationsEnabled];
                         [UIView setAnimationsEnabled:NO];
                         
                         //reason is the navigation barItems are missplacing....
                         //        [self.navigationController popViewControllerAnimated:YES];
                         [self.navigationController popViewControllerAnimated:NO];
                         [UIView setAnimationsEnabled:oldState];
                     }
                     completion:nil];
    
}


// disable all siblings of a view ..
- (void)setSiblings:(UIView *)view enabled:(BOOL)enabled {
    
    //NSLog(@" %@",[self.view subviews]);
    for (UIView *sibling in self.view.subviews) {
        if (sibling != view) sibling.userInteractionEnabled = enabled;
    }
}

// verified by chandhu, shiva

// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad
{
    [super viewDidLoad];
    
    //    NSMutableArray *navigationArray = [[NSMutableArray alloc] initWithArray: self.navigationController.viewControllers];
    //
    //    // [navigationArray removeAllObjects];    // This is just for remove all view controller from navigation stack.
    //    [navigationArray removeObjectAtIndex: 2];  // You can pass your index here
    //    self.navigationController.viewControllers = navigationArray;
    
    
    
    isItemEmpl = false;
    
    dealDiscount = @"0.0";
    offerDiscount = 0.0;
    
    salesPersonIdStr = @"";
    
    backAction = NO;
    customerStatus = false;
    finalBillDue = @"0.00";
    billingErrorStatus = FALSE;
    typeOfPayment = [[NSMutableString alloc] initWithString:@"Cash"];
    
    foodCouponTypeStr = @"Sodexo";
    
    deletedTaxDic = [NSMutableDictionary new];
    @try {
        
        if (scanner) {
            
            [scanner addObserver:self];
            [scanner setScannerAutoScan:YES];
        }
        else {
            OmniRetailerViewController *controller = [[OmniRetailerViewController alloc] init];
            [controller initializePowaPeripherals];
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@ scanner-%@ printer - %@ powa peripheral- %@",exception,scanner,printer,powaPOS);
    }
    
    
    //commented by Srinivasulu on 23/08/2017...
    //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
    
    //    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
    
    //upto here on 23/08/2017....
    
    
    version = [UIDevice currentDevice].systemVersion.floatValue;
    
    [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];
    //    [[NSNotificationCenter defaultCenter] addObserver: self selector:@selector(deviceOrientationDidChange:) name: UIDeviceOrientationDidChangeNotification object: nil];
    currentOriention = [UIDevice currentDevice].orientation;
    
    //added by Srinivasulu on 26/03/2018....
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad && !(currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight))
        currentOriention = UIDeviceOrientationLandscapeRight;
    
    //upto here on 26/03/2018....
    
    //powa integration...
    
    deliveryType = @"TA";
    cardPaymentSelection = @"POS";
    // Audio Sound load url......
    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"tap" withExtension: @"aif"];
    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
    
    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject);
    
    self.navigationController.navigationBarHidden = NO;
    
    //    [self networkSwitch];
    
    if (isOfflineService) {
        
        //        self.titleLabel.text = @"New Billing-Offline";
        self.titleLabel.text = @"NEW BILLING";
        
    }
    else {
        //        self.titleLabel.text = @"New Billing-Online";
        self.titleLabel.text = @"NEW BILLING";
        
    }
    
    if(isNewReturnBill)
        self.titleLabel.text = NSLocalizedString(@"return_bill", nil);
    
    
    //added by Srinivasulu on 14/11/2017....
    
    UILabel * backGroundColor_1;
    UILabel * backGroundColor_2;
    UILabel * backGroundColor_3;
    
    backGroundColor_1 = [[UILabel alloc] init];
    backGroundColor_1.backgroundColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4];
    
    backGroundColor_2 = [[UILabel alloc] init];
    backGroundColor_2.backgroundColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4];
    
    backGroundColor_3 = [[UILabel alloc] init];
    backGroundColor_3.backgroundColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.47];
    
    [self.view addSubview:backGroundColor_1];
    [self.view addSubview:backGroundColor_2];
    [self.view addSubview:backGroundColor_3];
    
    
    //upto here on 14/11/2017....
    
    quickPayBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    // pay the cash button to continue the transaction ..
    [quickPayBtn addTarget:self action:@selector(quickPayCall) forControlEvents:UIControlEventTouchUpInside];
    [quickPayBtn setTitle:@"Quick Pay"    forState:UIControlStateNormal];
    quickPayBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    quickPayBtn.titleLabel.textColor = [UIColor whiteColor];
    quickPayBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0f];
    quickPayBtn.backgroundColor = [UIColor grayColor];
    quickPayBtn.layer.cornerRadius = 20.0f;
    
    
    paymentTransactionArray = [[NSMutableArray alloc] init];
    // billUserName = [user_name copy];
    
    giftNumber = @"";
    giftTypeString = @"";
    
    //main view bakgroung setting...
    self.view.backgroundColor = [UIColor blackColor];
    
    couponView    = [[UIView alloc] init];
    (couponView.layer).borderWidth = 1.0f;
    (couponView.layer).cornerRadius = 8.0f;
    couponView.backgroundColor = [UIColor blackColor];
    couponView.hidden = TRUE;
    couponView.tag = 33;
    
    //crete switch for search....
    
    isSearch = [[UISwitch alloc] init];
    [isSearch addTarget:self action:@selector(changeSwitchAction:) forControlEvents:UIControlEventValueChanged];
    isSearch.onTintColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    isSearch.tintColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    [isSearch setOn:YES];
    //    [isSearch setThumbTintColor:[UIColor purpleColor]];
    
    searchBarcodeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    
    UIImage *buttonImageDD2 = [UIImage imageNamed:@"searchImage.png"];
    [searchBarcodeBtn setBackgroundImage:buttonImageDD2 forState:UIControlStateNormal];
    [searchBarcodeBtn addTarget:self
                         action:@selector(searchBarcode:) forControlEvents:UIControlEventTouchDown];
    searchBarcodeBtn.tag = 1;
    searchBarcodeBtn.hidden = YES;
    
    suggestion = [[UILabel alloc] init];
    suggestion.text = @"Suggestion ON";
    suggestion.textColor = [UIColor whiteColor];
    
    streettext = [[UITextField alloc] init];
    payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    
    
    streettext.borderStyle = UITextBorderStyleRoundedRect;
    streettext.autocorrectionType = UITextAutocorrectionTypeNo;
    streettext.keyboardType = UIKeyboardTypeDefault;
    streettext.returnKeyType = UIReturnKeyDone;
    streettext.clearButtonMode = UITextFieldViewModeWhileEditing;
    streettext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    streettext.delegate = self;
    streettext.placeholder = @"Enter street";
    locltytext = [[UITextField alloc] init];
    
    locltytext.borderStyle = UITextBorderStyleRoundedRect;
    locltytext.autocorrectionType = UITextAutocorrectionTypeNo;
    locltytext.keyboardType = UIKeyboardTypeDefault;
    locltytext.returnKeyType = UIReturnKeyDone;
    locltytext.clearButtonMode = UITextFieldViewModeWhileEditing;
    locltytext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    locltytext.delegate = self;
    locltytext.placeholder = @"Enter locality";
    citytext = [[UITextField alloc] init];
    
    citytext.borderStyle = UITextBorderStyleRoundedRect;
    citytext.autocorrectionType = UITextAutocorrectionTypeNo;
    citytext.keyboardType = UIKeyboardTypeDefault;
    citytext.returnKeyType = UIReturnKeyDone;
    citytext.clearButtonMode = UITextFieldViewModeWhileEditing;
    citytext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    citytext.delegate = self;
    citytext.placeholder = @"Enter city";
    
    pintext = [[UITextField alloc] init];
    
    pintext.borderStyle = UITextBorderStyleRoundedRect;
    pintext.autocorrectionType = UITextAutocorrectionTypeNo;
    pintext.keyboardType = UIKeyboardTypeNumberPad;
    pintext.returnKeyType = UIReturnKeyDone;
    pintext.clearButtonMode = UITextFieldViewModeWhileEditing;
    pintext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    pintext.delegate = self;
    pintext.placeholder = @"Enter pin";
    
    cardInfoTxt = [[UITextField alloc] init];
    cardInfoTxt.borderStyle = UITextBorderStyleRoundedRect;
    cardInfoTxt.textColor = [UIColor blackColor];
    cardInfoTxt.font = [UIFont systemFontOfSize:18.0];
    cardInfoTxt.backgroundColor = [UIColor whiteColor];
    cardInfoTxt.keyboardType = UIKeyboardTypeNumberPad;
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    cardInfoTxt.text = @"";
    cardInfoTxt.delegate = self;
    cardInfoTxt.placeholder = @"Card Info";
    
    approvalCodeTxt = [[UITextField alloc] init];
    approvalCodeTxt.borderStyle = UITextBorderStyleRoundedRect;
    approvalCodeTxt.textColor = [UIColor blackColor];
    approvalCodeTxt.font = [UIFont systemFontOfSize:18.0];
    approvalCodeTxt.backgroundColor = [UIColor whiteColor];
    approvalCodeTxt.placeholder = @"Approval code";
    approvalCodeTxt.text = @"";
    
    
    //added by Srinivasulu on 21/11/2017....
    
    cardTypeTxt = [[UITextField alloc] init];
    cardTypeTxt.borderStyle = UITextBorderStyleRoundedRect;
    cardTypeTxt.textColor = [UIColor blackColor];
    cardTypeTxt.font = [UIFont systemFontOfSize:18.0];
    cardTypeTxt.backgroundColor = [UIColor whiteColor];
    cardTypeTxt.placeholder = NSLocalizedString(@"card_type", nil);
    cardTypeTxt.text = @"";
    
    
    //upto here on 21/11/2017....
    
    
    approvalCodeTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    approvalCodeTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
    numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                             [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar1 sizeToFit];
    approvalCodeTxt.inputAccessoryView = numberToolbar1;
    approvalCodeTxt.keyboardType = UIKeyboardTypeNumberPad;
    approvalCodeTxt.delegate = self;
    
    
    
    bankNameTxt = [[UITextField alloc] init];
    
    bankNameTxt.borderStyle = UITextBorderStyleRoundedRect;
    bankNameTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    bankNameTxt.returnKeyType = UIReturnKeyDone;
    bankNameTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    bankNameTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    //    phnotext.delegate = self;
    // phnotext.tag = 111;
    bankNameTxt.placeholder = @"Bank Name";
    bankNameTxt.text = @"";
    bankNameTxt.delegate = self;
    
    
    cartItemDetails = [[NSMutableArray alloc] init];
    taxArr = [[NSMutableArray alloc]init];
    
    /** SearchBar Design */
    BillField = [[UITextField alloc] init];
    BillField.borderStyle = UITextBorderStyleRoundedRect;
    BillField.textColor = [UIColor blackColor];
    BillField.font = [UIFont systemFontOfSize:18.0];
    BillField.clearButtonMode = UITextFieldViewModeWhileEditing;
    BillField.autocorrectionType = UITextAutocorrectionTypeNo;
    BillField.layer.borderColor = [UIColor whiteColor].CGColor;
    BillField.backgroundColor = [UIColor whiteColor];
    BillField.delegate = self;
    BillField.placeholder = @"Search items here";
    [BillField addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    
    custmerPhNum = [[CustomTextField alloc] init];
    custmerPhNum.delegate = self;
    custmerPhNum.borderStyle = UITextBorderStyleRoundedRect;
    custmerPhNum.textColor = [UIColor blackColor];
    custmerPhNum.font = [UIFont systemFontOfSize:12.0];
    custmerPhNum.autocorrectionType = UITextAutocorrectionTypeNo;
    custmerPhNum.keyboardType = UIKeyboardTypeNumberPad;
    custmerPhNum.placeholder = @"Customer Mobile";
    custmerPhNum.backgroundColor = [UIColor whiteColor];
    custmerPhNum.layer.borderColor = [UIColor grayColor].CGColor;
    custmerPhNum.text = @"";
    [custmerPhNum addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    
    
    // table for drop down list to show the skuid's ..
    skListTable = [[UITableView alloc] init];
    skListTable.backgroundColor = [UIColor blackColor];
    skListTable.dataSource = self;
    skListTable.delegate = self;
    // [priceTable.layer setBorderWidth:1.0f];
    skListTable.layer.cornerRadius = 3;
    
    
    priceTable = [[UITableView alloc] init];
    priceTable.backgroundColor = [UIColor blackColor];
    priceTable.dataSource = self;
    priceTable.delegate = self;
    // [priceTable.layer setBorderWidth:1.0f];
    priceTable.layer.cornerRadius = 3;
    // priceTable.layer.borderColor = [UIColor grayColor].CGColor;
    
    priceArr = [[NSMutableArray alloc]init];
    descArr = [[NSMutableArray alloc]init];
    itemScanCode = [[NSMutableArray alloc] init];
    
    closeBtn = [[UIButton alloc] init] ;
    [closeBtn addTarget:self action:@selector(closePriceView:) forControlEvents:UIControlEventTouchUpInside];
    closeBtn.tag = 11;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [closeBtn setBackgroundImage:image    forState:UIControlStateNormal];
    
    
    priceView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
    priceView.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:0.6f];
    // priceView.hidden = YES;
    
    transparentView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
    transparentView.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:0.6f];
    transparentView.hidden = YES;
    
    descLabl = [[UILabel alloc]init];
    descLabl.text = @"Description";
    descLabl.layer.cornerRadius = 14;
    descLabl.textAlignment = NSTextAlignmentCenter;
    descLabl.layer.masksToBounds = YES;
    descLabl.font = [UIFont boldSystemFontOfSize:14.0];
    descLabl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    descLabl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    descLabl.textColor = [UIColor whiteColor];
    
    mrpLbl = [[UILabel alloc]init];
    mrpLbl.text = @"MRP(RS)";
    mrpLbl.layer.cornerRadius = 14;
    mrpLbl.layer.masksToBounds = YES;
    mrpLbl.textAlignment = NSTextAlignmentCenter;
    mrpLbl.font = [UIFont boldSystemFontOfSize:14.0];
    mrpLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    mrpLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    mrpLbl.textColor = [UIColor whiteColor];
    
    
    priceLbl = [[UILabel alloc]init];
    priceLbl.text = @"Price";
    priceLbl.layer.cornerRadius = 14;
    priceLbl.layer.masksToBounds = YES;
    priceLbl.textAlignment = NSTextAlignmentCenter;
    priceLbl.font = [UIFont boldSystemFontOfSize:14.0];
    priceLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    priceLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    priceLbl.textColor = [UIColor whiteColor];
    
    
    colorLbl = [[UILabel alloc]init];
    colorLbl.text = @"Color";
    colorLbl.layer.cornerRadius = 14;
    colorLbl.layer.masksToBounds = YES;
    colorLbl.textAlignment = NSTextAlignmentCenter;
    colorLbl.font = [UIFont boldSystemFontOfSize:15.0];
    //    colorLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    colorLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    colorLbl.textColor = [UIColor whiteColor];
    
    
    
    sizeLbl = [[UILabel alloc]init];
    sizeLbl.text = @"Size";
    sizeLbl.layer.cornerRadius = 14;
    sizeLbl.layer.masksToBounds = YES;
    sizeLbl.textAlignment = NSTextAlignmentCenter;
    sizeLbl.font = [UIFont boldSystemFontOfSize:15.0];
    //    sizeLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    sizeLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    sizeLbl.textColor = [UIColor whiteColor];
    
    //skListTable.bounces = FALSE;
    
    // Scanner Button for barcode scannig ..
    barcodeBtn  = [[UIButton alloc] init];
    [barcodeBtn setImage:[UIImage imageNamed:@"scan_icon.png"] forState:UIControlStateNormal];
    [barcodeBtn addTarget:self action:@selector(openBarcode) forControlEvents:UIControlEventTouchUpInside];
    barcodeBtn.tag = 1;
    barcodeBtn.enabled = FALSE;
    
    eraseButton  = [[UIButton alloc] init];
    [eraseButton setImage:[UIImage imageNamed:@"erase.png"] forState:UIControlStateNormal];
    [eraseButton addTarget:self action:@selector(eraseEntireDetails:) forControlEvents:UIControlEventTouchUpInside];
    eraseButton.tag = 0;
    
    
    //change by Srinivasulu on 12/09/2017....
    
    listBilledItemsScrollView = [[UIScrollView alloc] init];
    listBilledItemsScrollView.backgroundColor = [UIColor clearColor];
    
    //upto here on 12/09/2017....
    
    /**table header labels */
    label11 = [[UILabel alloc]init];
    label11.layer.cornerRadius = 14;
    label11.textAlignment = NSTextAlignmentCenter;
    label11.layer.masksToBounds = YES;
    label11.font = [UIFont boldSystemFontOfSize:14.0];
    label11.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    label11.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label11.textColor = [UIColor whiteColor];
    
    label22 = [[UILabel alloc]init];
    label22.layer.cornerRadius = 14;
    label22.layer.masksToBounds = YES;
    label22.textAlignment = NSTextAlignmentCenter;
    label22.font = [UIFont boldSystemFontOfSize:14.0];
    label22.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    label22.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label22.textColor = [UIColor whiteColor];
    
    label66 = [[UILabel alloc] init] ;
    label66.layer.cornerRadius = 14;
    label66.textAlignment = NSTextAlignmentCenter;
    label66.layer.masksToBounds = YES;
    label66.font = [UIFont boldSystemFontOfSize:14.0];
    label66.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    label66.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label66.textColor = [UIColor whiteColor];
    
    label33 = [[UILabel alloc] init];
    label33.layer.cornerRadius = 14;
    label33.layer.masksToBounds = YES;
    label33.textAlignment = NSTextAlignmentCenter;
    label33.font = [UIFont boldSystemFontOfSize:14.0];
    label33.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    label33.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label33.textColor = [UIColor whiteColor];
    
    label44 = [[UILabel alloc] init];
    label44.layer.cornerRadius = 14;
    label44.layer.masksToBounds = YES;
    label44.textAlignment = NSTextAlignmentCenter;
    label44.font = [UIFont boldSystemFontOfSize:14.0];
    label44.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    label44.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label44.textColor = [UIColor whiteColor];
    
    label55 = [[UILabel alloc] init];
    label55.layer.cornerRadius = 14;
    label55.layer.masksToBounds = YES;
    label55.textAlignment = NSTextAlignmentCenter;
    label55.font = [UIFont boldSystemFontOfSize:14.0];
    label55.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    label55.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label55.textColor = [UIColor whiteColor];
    
    
    //added by Srinivasulu on 03/08/2017....
    
    label77 = [[UILabel alloc] init];
    label77.layer.cornerRadius = 14;
    label77.layer.masksToBounds = YES;
    label77.textAlignment = NSTextAlignmentCenter;
    label77.font = [UIFont boldSystemFontOfSize:14.0];
    label77.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    label77.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label77.textColor = [UIColor whiteColor];
    
    //upto here 03/08/2017....
    
    //added by Srinivasulu on 12/09/2017....
    
    label88 = [[UILabel alloc] init];
    label88.layer.cornerRadius = 14;
    label88.layer.masksToBounds = YES;
    label88.textAlignment = NSTextAlignmentCenter;
    label88.font = [UIFont boldSystemFontOfSize:14.0];
    label88.font = [UIFont fontWithName:TEXT_FONT_NAME size:14.0f];
    label88.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label88.textColor = [UIColor whiteColor];
    
    label99 = [[UILabel alloc] init];
    label99.layer.cornerRadius = 14;
    label99.layer.masksToBounds = YES;
    label99.textAlignment = NSTextAlignmentCenter;
    label99.font = [UIFont boldSystemFontOfSize:14.0];
    label99.font = [UIFont fontWithName:TEXT_FONT_NAME size:14.0f];
    label99.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label99.textColor = [UIColor whiteColor];
    
    label10 = [[UILabel alloc] init];
    label10.layer.cornerRadius = 14;
    label10.layer.masksToBounds = YES;
    label10.textAlignment = NSTextAlignmentCenter;
    label10.font = [UIFont boldSystemFontOfSize:14.0];
    label10.font = [UIFont fontWithName:TEXT_FONT_NAME size:14.0f];
    label10.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label10.textColor = [UIColor whiteColor];
    
    
    
    /** UIScrollView Design */
    scrollView = [[UIScrollView alloc] init];
    scrollView.hidden = YES;
    scrollView.backgroundColor = [UIColor clearColor];
    scrollView.bounces = FALSE;
    
    // Table for storing the items ..
    cartTable = [[UITableView alloc] init];
    cartTable.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    cartTable.backgroundColor = [UIColor clearColor];
    cartTable.dataSource = self;
    cartTable.delegate = self;
    cartTable.hidden = YES;
    
    //added by Srinivasul on 23/10/2017....
    cartTable.tableFooterView = [[UIView  alloc] initWithFrame:CGRectZero];
    //upto here on 23/10/2017.....
    
    //cartTable.bounces = FALSE;
    
    //[cartTable.layer setBorderWidth:1.0f];
    
    
    //changed by Srinivasulu on 13/11/2017....
    //reason --..-- reading form localized file -- While working GUI Changes....
    
    // creating the final values ..
    dealoroffersTitle = [[UILabel alloc] init];
    dealoroffersTitle.font = [UIFont systemFontOfSize:12.0];
    dealoroffersTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
    dealoroffersTitle.backgroundColor = [UIColor clearColor];
    dealoroffersTitle.textColor = [UIColor whiteColor];
    
    dealoroffersTxt = [[UITextField alloc] init] ;
    dealoroffersTxt.font = [UIFont systemFontOfSize:12.0];
    dealoroffersTxt.backgroundColor = [UIColor clearColor];
    dealoroffersTxt.textAlignment = NSTextAlignmentLeft;
    dealoroffersTxt.textColor = [UIColor whiteColor];
    [dealoroffersTxt setEnabled:FALSE];
    
    giftVoucherTitle = [[UILabel alloc] init] ;
    giftVoucherTitle.font = [UIFont systemFontOfSize:12.0];
    giftVoucherTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0];
    giftVoucherTitle.backgroundColor = [UIColor clearColor];
    giftVoucherTitle.textColor = [UIColor whiteColor];
    
    
    
    
    giftVoucherTxt = [[UITextField alloc] init] ;
    giftVoucherTxt.font = [UIFont systemFontOfSize:13.0];
    giftVoucherTxt.backgroundColor = [UIColor clearColor];
    giftVoucherTxt.textAlignment = NSTextAlignmentLeft;
    giftVoucherTxt.textColor = [UIColor whiteColor];
    [giftVoucherTxt setEnabled:FALSE];
    
    otherDiscountTitle = [[UILabel alloc] init] ;
    otherDiscountTitle.font = [UIFont systemFontOfSize:12.0];
    otherDiscountTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
    otherDiscountTitle.backgroundColor = [UIColor clearColor];
    otherDiscountTitle.textColor = [UIColor whiteColor];
    
    otherDiscountTxt = [[CustomTextField alloc] init] ;
    otherDiscountTxt.font = [UIFont systemFontOfSize:12.0];
    otherDiscountTxt.backgroundColor = [UIColor clearColor];
    otherDiscountTxt.textAlignment = NSTextAlignmentLeft;
    otherDiscountTxt.textColor = [UIColor whiteColor];
    [otherDiscountTxt awakeFromNib];
    otherDiscountTxt.delegate = self;
    otherDiscountTxt.keyboardType = UIKeyboardTypeNumberPad;
    [otherDiscountTxt setEnabled:FALSE];
    
    totalItemsLabel = [[UILabel alloc] init] ;
    
    //changed && added by Srinivasulu on 11/08/2017 && 18/05/2018....
    
    //    totalItemsLabel.text = @"Total No. Of Items Qty";
    
    otherDiscountValueTxt = [[CustomTextField alloc] init] ;
    otherDiscountValueTxt.font = [UIFont systemFontOfSize:12.0];
    otherDiscountValueTxt.backgroundColor = [UIColor clearColor];
    otherDiscountValueTxt.textAlignment = NSTextAlignmentLeft;
    otherDiscountValueTxt.textColor = [UIColor whiteColor];
    [otherDiscountValueTxt awakeFromNib];
    otherDiscountValueTxt.delegate = self;
    otherDiscountValueTxt.keyboardType = UIKeyboardTypeNumberPad;
    [otherDiscountValueTxt setEnabled:FALSE];
    
    //upto here on 11/08/2017 && 18/05/2018....
    
    totalItemsLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    totalItemsLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    totalItemsLabel.backgroundColor = [UIColor clearColor];
    totalItemsLabel.textColor = [UIColor whiteColor];
    
    totalItemsLabelValue = [[UILabel alloc] init] ;
    totalItemsLabelValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    totalItemsLabelValue.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    totalItemsLabelValue.backgroundColor = [UIColor clearColor];
    totalItemsLabelValue.textColor = [UIColor whiteColor];
    
    subtotalTitle = [[UILabel alloc] init] ;
    subtotalTitle.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    subtotalTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    subtotalTitle.backgroundColor = [UIColor clearColor];
    subtotalTitle.textColor = [UIColor whiteColor];
    
    subtotalTxt = [[UITextField alloc] init] ;
    subtotalTxt.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    subtotalTxt.backgroundColor = [UIColor clearColor];
    subtotalTxt.textAlignment = NSTextAlignmentLeft;
    subtotalTxt.textColor = [UIColor whiteColor];
    [subtotalTxt setEnabled:FALSE];
    
    
    
    
    
    yposition = 780.0f;
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        if (version>=8.0) {
            yposition = 450.0;
        }
        else {
            yposition = 300.0;
        }
    }
    else {
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            
            yposition = 595;
            
        }
    }
    
    textFieldData = [[NSMutableArray alloc] init];
    textLabel = [[NSMutableArray alloc] init];
    
    
    taxTitle = [[UILabel alloc] init];
    
    
    taxTitle.backgroundColor = [UIColor clearColor];
    taxTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    taxTitle.textColor = [UIColor whiteColor];
    
    taxTxt = [[UITextField alloc] init] ;
    taxTxt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14];
    taxTxt.backgroundColor = [UIColor clearColor];
    taxTxt.textAlignment = NSTextAlignmentLeft;
    taxTxt.textColor = [UIColor whiteColor];
    [taxTxt setEnabled:FALSE];
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            
            //            taxTitle.backgroundColor = [UIColor redColor];
            //            taxTxt.backgroundColor = [UIColor redColor];
            
            //changed by Srinivasulu on 11/08/2017....
            
            taxTitle.font = [UIFont boldSystemFontOfSize:20];
            taxTitle.frame = CGRectMake(650, yposition - 8, 240, 60);
            taxTxt.font = [UIFont boldSystemFontOfSize:20];
            taxTxt.frame = CGRectMake(895, yposition - 8, 550, 60);
            yposition = yposition + 45.0f;
            
            //upto here on 11/08/2017....
            
        }
        else {
            taxTitle.font = [UIFont boldSystemFontOfSize:20];
            taxTitle.frame = CGRectMake(30, yposition, 240, 40);
            taxTxt.font = [UIFont boldSystemFontOfSize:20];
            taxTxt.frame = CGRectMake(640, yposition, 550, 40);
            yposition = yposition + 40.0f;
        }
        
    }
    else {
        taxTitle.frame = CGRectMake(20, yposition, 100, 25);
        taxTxt.frame = CGRectMake(200, yposition, 100, 25);
        yposition = yposition + 25.0f;
        
    }
    
    [textFieldData addObject:taxTxt];
    [textLabel addObject:taxTitle];
    
    [self.view addSubview:taxTitle];
    [self.view addSubview:taxTxt];
    //    }
    
    
    starRat = [[UIImageView alloc] init];
    starRat.backgroundColor = [UIColor clearColor];
    
    customerStatusLbl = [[UILabel alloc] init];
    customerStatusLbl.text = @"";
    customerStatusLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16.0f];
    customerStatusLbl.backgroundColor = [UIColor clearColor];
    customerStatusLbl.textColor = [UIColor whiteColor];
    customerStatusLbl.textAlignment = NSTextAlignmentCenter;
    
    
    totalTitle = [[UILabel alloc] init];
    totalTitle.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    totalTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    totalTitle.backgroundColor = [UIColor clearColor];
    totalTitle.textColor = [UIColor whiteColor];
    
    totalTxt = [[UITextField alloc] init] ;
    totalTxt.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    totalTxt.backgroundColor = [UIColor clearColor];
    totalTxt.textAlignment = NSTextAlignmentLeft;
    totalTxt.textColor = [UIColor whiteColor];
    [totalTxt setEnabled:FALSE];
    
    netPayLbl = [[UILabel alloc] init];
    netPayLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    netPayLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    netPayLbl.backgroundColor = [UIColor clearColor];
    netPayLbl.textColor = [UIColor whiteColor];
    
    netPayLblVal = [[UILabel alloc] init] ;
    netPayLblVal.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    netPayLblVal.backgroundColor = [UIColor clearColor];
    netPayLblVal.textAlignment = NSTextAlignmentLeft;
    netPayLblVal.textColor = [UIColor whiteColor];
    
    
    //added by Srinivasulu on 15/10/2018....
    UILabel * amountToBePaidLbl;
    
    
    amountToBePaidLbl = [[UILabel alloc] init];
    amountToBePaidLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:12.0f];
    amountToBePaidLbl.backgroundColor = [UIColor clearColor];
    amountToBePaidLbl.textColor = [UIColor whiteColor];
    
    amountToBePaidValLbl = [[UILabel alloc] init] ;
    amountToBePaidValLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:12];
    amountToBePaidValLbl.backgroundColor = [UIColor clearColor];
    amountToBePaidValLbl.textAlignment = NSTextAlignmentLeft;
    amountToBePaidValLbl.textColor = [UIColor whiteColor];
    
    amountToBePaidLbl.text = NSLocalizedString(@"amount_to_be_paid",nil);
    amountToBePaidValLbl.text = NSLocalizedString(@"0_00", nil);
    //upto here on 15/10/2018....
    
    //populating text to labels....
    @try {
        
        label11.text = NSLocalizedString(@"sku_id", nil);
        label22.text = NSLocalizedString(@"item_desc", nil);
        label33.text = NSLocalizedString(@"uom", nil);
        label44.text = NSLocalizedString(@"mrp", nil);
        label55.text = NSLocalizedString(@"offers", nil);
        label66.text = NSLocalizedString(@"disc", nil);
        label77.text = NSLocalizedString(@"s_price", nil);
        label88.text = NSLocalizedString(@"qty", nil);
        label99.text = NSLocalizedString(@"cost", nil);
        label10.text = NSLocalizedString(@"net_cost", nil);
        
        dealoroffersTitle.text = NSLocalizedString(@"deals_or_offers_(_-_)", nil);
        dealoroffersTxt.text = NSLocalizedString(@"0_00", nil);
        
        giftVoucherTitle.text = NSLocalizedString(@"voucher_coupon_(_-_)", nil);
        giftVoucherTxt.text = NSLocalizedString(@"0_00", nil);
        
        otherDiscountTitle.text = NSLocalizedString(@"other_discount_(_%_)_(_-_)",nil);
        otherDiscountTxt.text = NSLocalizedString(@"0_00", nil);
        
        //added by Srinivasulu on 18/05/2018....
        
        otherDiscountValueTxt.text = NSLocalizedString(@"0_00", nil);
        
        //upto here on 18/05/2018....
        
        taxTitle.text = NSLocalizedString(@"tax",nil);;
        taxTxt.text = NSLocalizedString(@"0_00", nil);;
        
        totalItemsLabel.text = NSLocalizedString(@"total_qty_2", nil);
        totalItemsLabelValue.text = NSLocalizedString(@"0_00", nil);
        
        subtotalTitle.text = NSLocalizedString(@"sub_total", nil);
        subtotalTxt.text = NSLocalizedString(@"0_00", nil);
        
        totalTitle.text = NSLocalizedString(@"value", nil);
        totalTxt.text = NSLocalizedString(@"0_00", nil);
        
        netPayLbl.text = NSLocalizedString(@"net_pay", nil);
        netPayLblVal.text = NSLocalizedString(@"0_00", nil);
        
        //NSLocalizedString(@"net_pay", nil)
        
    } @catch (NSException *exception) {
        
    }
    
    //upto here 12/09/2017....
    
    
    // bottombar ..
    NSArray *segmentText1;
    
    version = [UIDevice currentDevice].systemVersion.floatValue;
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        float width = (self.view.frame.size.width + 4) / 8;//self.view.frame.size.width+4
        
        if(!isNewReturnBill)
            width = (self.view.frame.size.width - 220) / 8;
        
        UIImage * quickPayImg = [[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
        UIImage * cashPaylImg = [[UIImage imageNamed:@"pay_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
        UIImage * cardPayImg = [[UIImage imageNamed:@"card_pay@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
        UIImage * savePayImg = [[UIImage imageNamed:@"save_bill1-iPhone.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
        UIImage * otherPayImg = [[UIImage imageNamed:@"Bill_Coupens.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
        UIImage * empInfoImg = [[UIImage imageNamed:@"Employe_Offer.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
        UIImage * giftCouponImg = [[UIImage imageNamed:@"gift_voucher@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
        UIImage * cerditPayImg = [[UIImage imageNamed:@"credit_note.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
        
        quickPayImg = [[self  imageFromImage:[UIImage imageNamed:@"FastBill.png"]
                        imageBackGroundColor:[UIColor blackColor]
                                      string:NSLocalizedString(@"quick_pay", nil)
                                       color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                        font:16
                                       width:width
                                      height:16
                                    fontType:TEXT_FONT_NAME
                                  imageWidth:40
                                 imageHeight:40] imageWithRenderingMode:
                       UIImageRenderingModeAlwaysOriginal];
        
        cashPaylImg = [[self  imageFromImage:[UIImage imageNamed:@"pay_bill@2x.png"]
                        imageBackGroundColor:[UIColor blackColor]
                                      string:NSLocalizedString(@"cash_pay", nil)
                                       color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                        font:16
                                       width:width
                                      height:16
                                    fontType:TEXT_FONT_NAME
                                  imageWidth:40
                                 imageHeight:40] imageWithRenderingMode:
                       UIImageRenderingModeAlwaysOriginal];
        
        cardPayImg = [[self  imageFromImage:[UIImage imageNamed:@"card_pay@2x.png"]
                       imageBackGroundColor:[UIColor blackColor]
                                     string:NSLocalizedString(@"card_pay", nil)
                                      color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                       font:16
                                      width:width
                                     height:16
                                   fontType:TEXT_FONT_NAME
                                 imageWidth:40
                                imageHeight:40] imageWithRenderingMode:
                      UIImageRenderingModeAlwaysOriginal];
        
        savePayImg = [[self  imageFromImage:[UIImage imageNamed:@"save_bill1@2x.png"]
                       imageBackGroundColor:[UIColor blackColor]
                                     string:NSLocalizedString(@"save_bill", nil)
                                      color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                       font:16
                                      width:width
                                     height:16
                                   fontType:TEXT_FONT_NAME
                                 imageWidth:40
                                imageHeight:40] imageWithRenderingMode:
                      UIImageRenderingModeAlwaysOriginal];
        
        otherPayImg = [[self  imageFromImage:[UIImage imageNamed:@"Bill_Coupens.png"]
                        imageBackGroundColor:[UIColor blackColor]
                                      string:NSLocalizedString(@"other_pay", nil)
                                       color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                        font:16
                                       width:width
                                      height:16
                                    fontType:TEXT_FONT_NAME
                                  imageWidth:40
                                 imageHeight:40] imageWithRenderingMode:
                       UIImageRenderingModeAlwaysOriginal];
        
        empInfoImg = [[self  imageFromImage:[UIImage imageNamed:@"Employe_Offer.png"]
                       imageBackGroundColor:[UIColor blackColor]
                                     string:NSLocalizedString(@"emp_info", nil)
                                      color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                       font:16
                                      width:width
                                     height:16
                                   fontType:TEXT_FONT_NAME
                                 imageWidth:40
                                imageHeight:40] imageWithRenderingMode:
                      UIImageRenderingModeAlwaysOriginal];
        
        giftCouponImg = [[self  imageFromImage:[UIImage imageNamed:@"gift_voucher@2x.png"]
                          imageBackGroundColor:[UIColor blackColor]
                                        string:NSLocalizedString(@"gift_cpn", nil)
                                         color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                          font:16
                                         width:width
                                        height:16
                                      fontType:TEXT_FONT_NAME
                                    imageWidth:40
                                   imageHeight:40] imageWithRenderingMode:
                         UIImageRenderingModeAlwaysOriginal];
        
        cerditPayImg = [[self  imageFromImage:[UIImage imageNamed:@"credit_note.png"]
                         imageBackGroundColor:[UIColor blackColor]
                                       string:NSLocalizedString(@"credit_note", nil)
                                        color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                         font:16
                                        width:width
                                       height:16
                                     fontType:TEXT_FONT_NAME
                                   imageWidth:40
                                  imageHeight:40] imageWithRenderingMode:
                        UIImageRenderingModeAlwaysOriginal];
        //        segmentText1 = [NSArray arrayWithObjects:[[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                        [[UIImage imageNamed:@"pay_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                        [[UIImage imageNamed:@"card_pay@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                        [[UIImage imageNamed:@"save_bill1-iPhone.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],[[UIImage imageNamed:@"Bill_Coupens.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                        [[UIImage imageNamed:@"Employe_Offer.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                        [[UIImage imageNamed:@"gift_voucher@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                        [[UIImage imageNamed:@"credit_note.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                        nil];
        segmentText1 = @[quickPayImg,cashPaylImg,cardPayImg,savePayImg,otherPayImg,empInfoImg,giftCouponImg,cerditPayImg];
        
    }
    else{
        
        if (version >= 8.0) {
            
            segmentText1 = @[[[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                             [[UIImage imageNamed:@"pay_bill@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                             [[UIImage imageNamed:@"card_pay@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                             [[UIImage imageNamed:@"save_bill1-iPhone.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],[[UIImage imageNamed:@"Bill_Coupens.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                             [[UIImage imageNamed:@"Employe_Offer.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
                             [[UIImage imageNamed:@"gift_voucher@2x.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]];
        }
        else{
            
            segmentText1 = @[[UIImage imageNamed:@"pay_bill(30_30).png"],
                             [UIImage imageNamed:@"sms_bill(30_30).png"],
                             [UIImage imageNamed:@"print_bill(30_30).png"],
                             [UIImage imageNamed:@"Bill_Coupens@30_30.png"],
                             [UIImage imageNamed:@"Employe_Offer.png"],
                             [UIImage imageNamed:@"gift_voucher(30_30).png"]];
        }
        
    }
    
    
    //added by Srinivasulu on 30/01/2018....
    //commented by Srinivasulu on 13/02/2018.... reason all bottam segment has to be visible....
    
    //    if(isNewReturnBill){
    //        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
    //
    //            returnMode = @"cash";
    //
    //            if ([[[NSUserDefaults standardUserDefaults] valueForKey:kReturnMode] isKindOfClass:[NSNull class]] || [[NSUserDefaults standardUserDefaults] valueForKey:kReturnMode] == nil) {
    //
    //                returnMode = [[[NSUserDefaults standardUserDefaults] valueForKey:kReturnMode] copy];
    //            }
    //
    //            if([returnMode caseInsensitiveCompare:@"both"] == NSOrderedSame){
    //                segmentText1 = [NSArray arrayWithObjects:[[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
    //                                [[UIImage imageNamed:@"credit_note.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal], nil];
    //            }
    //            else if([returnMode caseInsensitiveCompare:@"cash"] == NSOrderedSame  || isOfflineService)
    //            {
    //                returnMode = @"cash";
    //                segmentText1 = [NSArray arrayWithObjects:[[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal], nil];
    //            }
    //            else{
    //                segmentText1 = [NSArray arrayWithObjects:[[UIImage imageNamed:@"credit_note.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal], nil];
    //            }
    //
    //        }
    //        else{
    //
    //            if (version >= 8.0) {
    //
    //                segmentText1 = [NSArray arrayWithObjects:
    //                                [[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
    //                                [[UIImage imageNamed:@"credit_note.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
    //                                nil];
    //            }
    //            else{
    //
    //                segmentText1 = [NSArray arrayWithObjects:
    //                                [UIImage imageNamed:@"FastBill.png"],
    //                                [UIImage imageNamed:@"credit_note.png"],
    //                                nil];
    //            }
    //
    //        }
    //
    //    }
    
    //upto here on 30/01/2018....
    
    
    //segmentedControl = [[UISegmentedControl alloc] initWithItems:[NSArray arrayWithObjects:                                                                 @"card",@"sms",@"email",@"print",@"gift",                                                                  nil]];
    segmentedControl = [[UISegmentedControl alloc] initWithItems:segmentText1];
    segmentedControl.tintColor=[UIColor clearColor];
    //segmentedControl.autoresizingMask = UIViewAutoresizingFlexibleWidth;
    //    segmentedControl.segmentedControlStyle = UISegmentedControlStyleBar;
    segmentedControl.backgroundColor = [UIColor blackColor];
    
    //UIColor *tintcolor=[UIColor colorWithRed:63.0/255.0 green:127.0/255.0 blue:187.0/255.0 alpha:1.0];
    //[[segmentedControl.subviews objectAtIndex:0] setTintColor:tintcolor];
    
    [segmentedControl addTarget:self action:@selector(segmentAction:) forControlEvents:UIControlEventValueChanged];
    //    [segmentedControl addTarget:self action:@selector(segmentAction:) forControlEvents:UIControlEventTouchUpInside];
    
    // assigning a value to check the bill finished ..
    segmentedControl.tag = 0;
    
    
    
    
    if(isNewReturnBill){
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            returnMode = @"cash";
            
            if (!([[[NSUserDefaults standardUserDefaults] valueForKey:kReturnMode] isKindOfClass:[NSNull class]] || [[NSUserDefaults standardUserDefaults] valueForKey:kReturnMode] == nil)) {
                
                returnMode = [[[NSUserDefaults standardUserDefaults] valueForKey:kReturnMode] copy];
            }
            
            
            
            if([returnMode caseInsensitiveCompare:@"cash"] == NSOrderedSame  || isOfflineService)
            {
                returnMode = @"cash";
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:1];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:2];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:3];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:5];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:6];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:7];
            }
            else if([returnMode caseInsensitiveCompare:@"both"] == NSOrderedSame){
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:1];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:2];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:3];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:5];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:6];
            }
            
            else{
                
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:1];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:2];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:3];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:5];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:6];
            }
            
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            
            if ( ! ([[defaults valueForKey:COUPON_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:COUPON_OPTIONS] == nil)) {
                
                for(NSDictionary * dic in [defaults valueForKey:COUPON_OPTIONS]){
                    
                    if([[self checkGivenValueIsNullOrNil:[dic valueForKey:RETURN_TENDER] defaultReturn:@"0"] integerValue]){
                        [segmentedControl setEnabled:TRUE forSegmentAtIndex:4];
                        break;
                    }
                }
            }
            
            
            
        }
        else{
            
        }
    }
    
    
    
    
    // intialize the View for segmeneted controller . .
    paymentView = [[UIView alloc] init];
    smsView     = [[UIView alloc] init];
    mailView    = [[UIView alloc] init];
    printView   = [[UIView alloc] init];
    giftView    = [[UIView alloc] init];
    
    (paymentView.layer).borderWidth = 1.0f;
    (smsView.layer).borderWidth = 1.0f;
    (mailView.layer).borderWidth = 1.0f;
    (printView.layer).borderWidth = 1.0f;
    (giftView.layer).borderWidth = 1.0f;
    
    (paymentView.layer).cornerRadius = 8.0f;
    (smsView.layer).cornerRadius = 8.0f;
    (mailView.layer).cornerRadius = 8.0f;
    (printView.layer).cornerRadius = 8.0f;
    (giftView.layer).cornerRadius = 8.0f;
    
    //paymentView.backgroundColor = [UIColor whiteColor];
    smsView.backgroundColor = [UIColor whiteColor];
    mailView.backgroundColor = [UIColor whiteColor];
    printView.backgroundColor = [UIColor whiteColor];
    
    giftView.backgroundColor = [UIColor blackColor];
    giftView.layer.borderColor = [UIColor whiteColor].CGColor;
    
    paymentView.hidden = TRUE;
    smsView.hidden = TRUE;
    mailView.hidden = TRUE;
    printView.hidden = TRUE;
    giftView.hidden = TRUE;
    
    cardDetailsView = [[UIView alloc] init];
    (cardDetailsView.layer).borderWidth = 1.0f;
    (cardDetailsView.layer).cornerRadius = 8.0f;
    cardDetailsView.hidden = TRUE;
    cardDetailsView.backgroundColor = [UIColor blackColor];
    cardDetailsView.layer.borderColor = [UIColor whiteColor].CGColor;
    cardDetailsView.tag = 88;
    
    skuArrayList = [[NSMutableArray alloc] init];
    filteredSkuArrayList = [[NSMutableArray alloc] init];
    
    
    // nsmutable array to store the data of selected sku ..
    cartItem = [[NSMutableArray alloc] init];
    emailtext = [[UITextField alloc]init];
    nametext = [[UITextField alloc]init];
    phnotext = [[UITextField alloc]init];
    
    // initializing giftType Table and Array list ..
    // Table for storing the items ..
    giftTypeTableView = [[UITableView alloc] init];
    //giftTypeTableView.backgroundColor = [UIColor whiteColor];
    giftTypeTableView.dataSource = self;
    giftTypeTableView.delegate = self;
    giftTypeTableView.bounces = FALSE;
    giftTypeTableView.backgroundColor = [UIColor whiteColor];
    giftTypeTableView.layer.cornerRadius = 3.0f;
    (giftTypeTableView.layer).borderWidth = 1.0f;
    
    giftTypeArrayList = [[NSMutableArray alloc] init];
    //    [giftTypeArrayList addObject:@"Gift Voucher"];
    //    [giftTypeArrayList addObject:@"Coupon"];
    //    [giftTypeArrayList addObject:@"Loyalty Card"];
    
    //    HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
    //    [self.navigationController.view addSubview:HUD];
    //    // Regiser for HUD callbacks so we can remove it from the window at the right time
    //    HUD.delegate = self;
    //    HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
    //    HUD.mode = MBProgressHUDModeCustomView;
    //    // Show the HUD
    //    [HUD show:YES];
    //    [HUD setHidden:YES];
    
    giftScannerBtn = [[UIButton alloc] init];
    [giftScannerBtn setImage:[UIImage imageNamed:@"scan_icon.png"] forState:UIControlStateNormal];
    [giftScannerBtn addTarget:self action:@selector(giftBarcodeScanner:) forControlEvents:UIControlEventTouchUpInside];
    giftScannerBtn.tag = 0;
    
    //Some GiftView Fields creation////
    giftType = [[UITextField alloc] init];
    giftType.borderStyle = UITextBorderStyleRoundedRect;
    giftType.textColor = [UIColor blackColor];
    giftType.font = [UIFont systemFontOfSize:18.0];
    giftType.backgroundColor = [UIColor clearColor];
    giftType.placeholder = @"select Type";
    giftType.text = @"";
    [giftType setEnabled:FALSE];
    giftType.tag = 0;
    //[giftView addSubview:giftType];
    giftType.hidden = NO;
    
    giftNo = [[CustomTextField alloc] init];
    giftNo.borderStyle = UITextBorderStyleRoundedRect;
    giftNo.textColor = [UIColor blackColor];
    giftNo.font = [UIFont systemFontOfSize:18.0];
    giftNo.backgroundColor = [UIColor clearColor];
    giftNo.text = @"";
    //[giftView addSubview:giftNo];
    giftNo.hidden = NO;
    giftNo.placeholder = @"5 Digit Code";
    [giftNo awakeFromNib];
    
    giftAmt = [[CustomTextField alloc] init];
    giftAmt.borderStyle = UITextBorderStyleRoundedRect;
    giftAmt.textColor = [UIColor whiteColor];
    giftAmt.font = [UIFont systemFontOfSize:18.0];
    giftAmt.backgroundColor = [UIColor clearColor];
    giftAmt.text = @"0.0";
    giftAmt.userInteractionEnabled = NO;
    giftAmt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    giftAmt.autocorrectionType = UITextAutocorrectionTypeNo;
    giftAmt.keyboardType = UIKeyboardTypeAlphabet;
    giftAmt.delegate = self;
    //[giftView addSubview:giftAmt];
    giftAmt.hidden = NO;
    [giftAmt awakeFromNib];
    
    // Override point for customization after application launch
    NSArray *options =@[@"   Debit Card",@"   Credit Card",@"   Pay Cash"];
    
    group =[[MIRadioButtonGroup alloc] initWithFrame:CGRectMake(5, 50, 150, 120) andOptions:options andColumns:1];
    
    
    //NumberKeyBoard hidden....
    numberToolbar = [[UIToolbar alloc] init];
    numberToolbar.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                            [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar sizeToFit];
    
    presentTextField = nil;
    
    dealSkuCount = [[NSMutableArray alloc] init];
    dealSkuids = [[NSMutableArray alloc] init];
    dealDataItems = [[NSMutableArray alloc] init];
    offerItems = [[NSMutableArray alloc] init];
    dealItems = [[NSMutableArray alloc] init];
    productID = [[NSMutableArray alloc] init];
    minimumQty = [[NSMutableArray alloc] init];
    freeQty = [[NSMutableArray alloc] init];
    offerType = [[NSMutableArray alloc] init];
    offierPrice = [[NSMutableArray alloc] init];
    validFrom = [[NSMutableArray alloc] init];
    validTo = [[NSMutableArray alloc] init];
    offerLabel = [[UILabel alloc] init];
    dealofferArry = [[NSMutableArray alloc] init];
    unitOfMeasurement = [[NSMutableArray alloc] init];
    offerDic = [[NSMutableDictionary alloc]init];
    tempSkuArrayList = [[NSMutableArray alloc]init];
    isPriceEditableArr = [[NSMutableArray alloc] init];
    editedPriceArr = [[NSMutableArray alloc] init];
    giftVoucherArr = [[NSMutableArray alloc] init];
    itemDiscountArr = [[NSMutableArray alloc] init];
    itemDiscountDescArr = [[NSMutableArray alloc] init];
    
    //added by Srinivasulu on 28/09/2017 && 06/03/2018....
    
    isItemFlatDiscountedArr  = [[NSMutableArray alloc] init];
    isItemTrackingRequiredArr = [[NSMutableArray alloc] init];
    
    //upto here on 28/09/2017 && 06/03/2018....
    
    radioBtn1 = [[UIButton alloc] init] ;
    [radioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
    radioBtn1.backgroundColor = [UIColor clearColor];
    radioBtn1.layer.masksToBounds = YES;
    radioBtn1.layer.cornerRadius = 5.0f;
    radioBtn1.tag = 0;
    [radioBtn1 addTarget:self action:@selector(radioAction:) forControlEvents:UIControlEventTouchUpInside];
    
    radioBtn2 = [[UIButton alloc] init] ;
    [radioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
    //cancelOrder.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
    radioBtn2.backgroundColor = [UIColor clearColor];
    radioBtn2.layer.masksToBounds = YES;
    radioBtn2.layer.cornerRadius = 5.0f;
    radioBtn2.tag = 1;
    [radioBtn2 addTarget:self action:@selector(radioAction:) forControlEvents:UIControlEventTouchUpInside];
    
    //added by Srinivasulu on 20/4/2017....
    
    radioBtn3 = [[UIButton alloc] init] ;
    [radioBtn3 setImage:[UIImage imageNamed:@"Credit_Deselect.png"] forState:UIControlStateNormal];
    radioBtn3.backgroundColor = [UIColor clearColor];
    radioBtn3.layer.masksToBounds = YES;
    radioBtn3.layer.cornerRadius = 5.0f;
    radioBtn3.tag = 2;
    [radioBtn3 addTarget:self action:@selector(selectedCreditBillPayment:) forControlEvents:UIControlEventTouchUpInside];
    
    UILabel * creditBillLbl = [[UILabel alloc] init];
    creditBillLbl.text = @"Credit Bill";
    creditBillLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    creditBillLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    creditBillLbl.backgroundColor = [UIColor clearColor];
    creditBillLbl.textColor = [UIColor whiteColor];
    
    
    
    
    
    //upto here on 20/04/2017....
    
    //added by Srinivasulu on 20/04/2017....
    
    UILabel  * deliveryTypesBackGroundLbl;
    
    deliveryTypesBackGroundLbl = [[UILabel alloc] init];
    
    deliveryTypesBackGroundLbl.backgroundColor = [UIColor clearColor];
    deliveryTypesBackGroundLbl.layer.borderWidth = 1.5;
    deliveryTypesBackGroundLbl.layer.borderColor = [UIColor lightGrayColor].CGColor;
    [self.view addSubview:deliveryTypesBackGroundLbl];
    
    
    UILabel  * creditBillBackGroundLbl;
    
    creditBillBackGroundLbl = [[UILabel alloc] init];
    
    creditBillBackGroundLbl.backgroundColor = [UIColor clearColor];
    creditBillBackGroundLbl.layer.borderWidth = 1.5;
    creditBillBackGroundLbl.layer.borderColor = [UIColor lightGrayColor].CGColor;
    
    [self.view addSubview:creditBillBackGroundLbl];
    
    [self.view addSubview:radioBtn3];
    [self.view addSubview:creditBillLbl];
    
    
    
    
    //upto here on 20/04/2017....
    
    
    
    UILabel *takeAway = [[UILabel alloc] init];
    takeAway.text = @"Take Away";
    takeAway.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    takeAway.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    takeAway.backgroundColor = [UIColor clearColor];
    takeAway.textColor = [UIColor whiteColor];
    
    UILabel *doorDel = [[UILabel alloc] init];
    doorDel.text = @"Door Delivery ";
    doorDel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    doorDel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    doorDel.backgroundColor = [UIColor clearColor];
    doorDel.textColor = [UIColor whiteColor];
    
    customerInfoEnable = [[UIButton alloc] init];
    [customerInfoEnable addTarget:self action:@selector(customerInfoClicked:) forControlEvents:UIControlEventTouchUpInside];
    [customerInfoEnable setBackgroundImage:[UIImage imageNamed:@"MB__info.png"] forState:UIControlStateNormal];
    
    itemScanCode = [NSMutableArray new];
    
    
    deliveryTypesBackGroundLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
    creditBillBackGroundLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        //changed by Srinivasulu on 27/04/2017....
        
        //        radioBtn1.frame = CGRectMake( 15,80, 30, 30);
        //        takeAway.frame = CGRectMake( 60, 75, 150, 40);
        //        takeAway.font = [UIFont systemFontOfSize:25.0];
        //        radioBtn2.frame = CGRectMake( 240, 80, 30, 30);
        //        doorDel.frame =  CGRectMake( 290, 75, 150, 40);
        //        doorDel.font = [UIFont systemFontOfSize:25.0];
        //
        //        //added by Srinivasulu on 20/04/2017....
        //
        //        radioBtn3.frame = CGRectMake( 550,80, 30, 30);
        //        creditBillLbl.frame =  CGRectMake( 600, 75, 150, 40);
        //        creditBillLbl.font = [UIFont systemFontOfSize:25.0];
        //
        //        deliveryTypesBackGroundLbl.frame = CGRectMake( 5, 75, 450, 40);
        //
        //
        //
        //        //upto here on 20/04/2017....
        
        
        radioBtn1.frame = CGRectMake( 15,90, 30, 30);
        takeAway.frame = CGRectMake( 60, 85, 120, 40);
        takeAway.font = [UIFont systemFontOfSize:24.0];
        radioBtn2.frame = CGRectMake( 190, 90, 30, 30);
        doorDel.frame =  CGRectMake( 225, 85, 150, 40);
        doorDel.font = [UIFont systemFontOfSize:24.0];
        
        //added by Srinivasulu on 20/04/2017....
        
        radioBtn3.frame = CGRectMake( 400,90, 30, 30);
        creditBillLbl.frame =  CGRectMake( (560 - 120), 85, 110, 40);
        creditBillLbl.font = [UIFont systemFontOfSize:25.0];
        
        deliveryTypesBackGroundLbl.frame = CGRectMake( 5, 85, 375, 40);
        
        creditBillBackGroundLbl.frame = CGRectMake( 395, 85, (560 - 395), 40);
        
        
        
        
        //upto here on 27/04/2017....
        
        
        //        radioBtn1.frame = CGRectMake(15,80, 30, 30);
        //        takeAway.frame = CGRectMake(60, 75, 150, 40);
        //        takeAway.font = [UIFont systemFontOfSize:25.0];
        //        radioBtn2.frame = CGRectMake(350, 80, 30, 30);
        //        doorDel.frame =  CGRectMake(400, 75, 150, 40);
        //        doorDel.font = [UIFont systemFontOfSize:25.0];
        //
        //        //added by Srinivasulu on 20/04/2017....
        //
        //        radioBtn3.frame = CGRectMake(550,80, 30, 30);
        //        creditBillLbl.frame =  CGRectMake(600, 75, 150, 40);
        //        creditBillLbl.font = [UIFont systemFontOfSize:25.0];
        //
        //
        //
        //        //upto here on 20/04/2017....
        
        
        UIImage * refreshImg = [[self  imageFromImage:[UIImage imageNamed:@"reset.png"]
                                 imageBackGroundColor:[UIColor blackColor]
                                               string:NSLocalizedString(@"refresh", nil)
                                                color:[UIColor colorWithRed:0  green:230 blue:230 alpha:0.7]
                                                 font:16
                                                width:66
                                               height:16
                                             fontType:TEXT_FONT_NAME
                                           imageWidth:35
                                          imageHeight:40] imageWithRenderingMode:
                                UIImageRenderingModeAlwaysOriginal];
        
        refreshOnlineOrderBtn = [[UIButton alloc] init];
        [refreshOnlineOrderBtn setImage:refreshImg forState:UIControlStateNormal];
        refreshOnlineOrderBtn.backgroundColor = [UIColor clearColor];
        [refreshOnlineOrderBtn addTarget:self action:@selector(callingOutletOrders) forControlEvents:UIControlEventTouchUpInside];
        refreshOnlineOrderBtn.tag = 2;
        
        onlineOrderBtn = [[UIButton alloc] init];
        onlineOrderBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [onlineOrderBtn addTarget:self action:@selector(callingOnlineOrderDetails:) forControlEvents:UIControlEventTouchUpInside];
        [onlineOrderBtn setTitle:@"O\n0"    forState:UIControlStateNormal];
        onlineOrderBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        onlineOrderBtn.titleLabel.textColor = [UIColor whiteColor];
        onlineOrderBtn.titleLabel.font = [UIFont boldSystemFontOfSize:20.0f];
        onlineOrderBtn.backgroundColor = [UIColor clearColor];
        onlineOrderBtn.layer.cornerRadius = 12.0f;
        onlineOrderBtn.titleLabel.numberOfLines = 2;
        onlineOrderBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        
        mobileOrderBtn = [[UIButton alloc] init];
        mobileOrderBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [mobileOrderBtn addTarget:self action:@selector(callingMobileOrderDetails:) forControlEvents:UIControlEventTouchUpInside];
        [mobileOrderBtn setTitle:@"M\n0"    forState:UIControlStateNormal];
        mobileOrderBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        mobileOrderBtn.titleLabel.textColor = [UIColor whiteColor];
        mobileOrderBtn.titleLabel.font = [UIFont boldSystemFontOfSize:20.0f];
        mobileOrderBtn.backgroundColor = [UIColor clearColor];
        mobileOrderBtn.layer.cornerRadius = 12.0f;
        mobileOrderBtn.titleLabel.numberOfLines = 2;
        mobileOrderBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        
        telePhoneOrderBtn = [[UIButton alloc] init];
        telePhoneOrderBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [telePhoneOrderBtn addTarget:self action:@selector(callingTelePhoneOrderDetails:) forControlEvents:UIControlEventTouchUpInside];
        [telePhoneOrderBtn setTitle:@"T\n0"    forState:UIControlStateNormal];
        telePhoneOrderBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        telePhoneOrderBtn.titleLabel.textColor = [UIColor whiteColor];
        telePhoneOrderBtn.titleLabel.font = [UIFont boldSystemFontOfSize:20.0f];
        telePhoneOrderBtn.backgroundColor = [UIColor clearColor];
        telePhoneOrderBtn.layer.cornerRadius = 12.0f;
        telePhoneOrderBtn.titleLabel.numberOfLines = 2;
        telePhoneOrderBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        
        
        
        onlineOrderBtn.userInteractionEnabled = NO;
        mobileOrderBtn.userInteractionEnabled = NO;
        telePhoneOrderBtn.userInteractionEnabled = NO;
        
        if(isToShowOnlineOrders){
            
            
            
        }
        
        isSearch.frame = CGRectMake(570, 165,100,100);
        
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            //            quickPayBtn.frame = CGRectMake(750.0, 75, 250.0, 40.0);
            
            custmerPhNum.frame = CGRectMake(700, 160.0, 180.0, 40);
            custmerPhNum.font = [UIFont boldSystemFontOfSize:17];
            customerInfoEnable.frame = CGRectMake(842, 162.0, 35, 35);
            starRat.frame = CGRectMake(880, 80, 140, 30);
            //            customerStatusLbl.frame = CGRectMake(870, 85, 150, 30);
            
            BillField.font = [UIFont boldSystemFontOfSize:25];
            BillField.frame = CGRectMake(5, 160, 560, 40);
            skListTable.frame = CGRectMake(15, 180, 360,0);
            barcodeBtn.frame = CGRectMake(630, 150.0f, 60, 60);
            eraseButton.frame = CGRectMake(590, 205.0f, 45.0f, 45.0f);
            searchBarcodeBtn.frame  =CGRectMake(510, 160, 50, 40);
            
            //            label11.font = [UIFont boldSystemFontOfSize:18];
            //            label11.frame = CGRectMake(5, 210, 90, 30);
            //            label11.layer.cornerRadius = 10;
            //
            //            label22.font = [UIFont boldSystemFontOfSize:18];
            //            label22.frame = CGRectMake(100, 210, 90, 30);
            //            label22.layer.cornerRadius = 10;
            //
            //            label33.font = [UIFont boldSystemFontOfSize:18];
            //            label33.frame = CGRectMake(290, 210, 90, 30);
            //            label33.layer.cornerRadius = 10;
            //
            //            label44.font = [UIFont boldSystemFontOfSize:18];
            //            label44.frame = CGRectMake(385, 210, 90, 30);
            //            label44.layer.cornerRadius = 10;
            //
            //            label55.font = [UIFont boldSystemFontOfSize:18];
            //            label55.frame = CGRectMake(480, 210, 90, 30);
            //            label55.layer.cornerRadius = 10;
            //
            //            label66.font = [UIFont boldSystemFontOfSize:18];
            //            label66.frame = CGRectMake(195, 210, 90, 30);
            //            label66.layer.cornerRadius = 10;
            
            
            //commented by Srinivasulu on 12/09/2017....
            
            //added by Srinivasulu on 03/08/2017....
            //label77 -- label11 --  label22 --  label66 --  label33  --  label44  --  label55
            label77.font = [UIFont boldSystemFontOfSize:18];
            label77.frame = CGRectMake( 5, 210, 75, 30);
            label77.layer.cornerRadius = 10;
            
            label11.font = [UIFont boldSystemFontOfSize:18];
            label11.frame = CGRectMake( 82, 210, 89, 30);
            label11.layer.cornerRadius = 10;
            
            label22.font = [UIFont boldSystemFontOfSize:18];
            label22.frame = CGRectMake( 173, 210, 45, 30);
            label22.layer.cornerRadius = 10;
            
            label66.font = [UIFont boldSystemFontOfSize:18];
            label66.frame = CGRectMake( 220, 210, 93, 30);
            label66.layer.cornerRadius = 10;
            
            label33.font = [UIFont boldSystemFontOfSize:18];
            label33.frame = CGRectMake( 315, 210, 73, 30);
            label33.layer.cornerRadius = 10;
            
            label44.font = [UIFont boldSystemFontOfSize:18];
            label44.frame = CGRectMake( 390, 210, 93, 30);
            label44.layer.cornerRadius = 10;
            
            label55.font = [UIFont boldSystemFontOfSize:18];
            label55.frame = CGRectMake( 485, 210, 90, 30);
            label55.layer.cornerRadius = 10;//570
            
            //upto here 03/08/2017....
            
            
            //upto here 12/09/2017....
            
            
            scrollView.frame = CGRectMake(0, 250, 820, 400);
            scrollView.contentSize = CGSizeMake(778 + 70, 1500);
            cartTable.frame = CGRectMake(0, 250, 650,400);
            
            
            //changed by Srinivasulu on 13/11/2017....
            
            dealoroffersTitle.font = [UIFont boldSystemFontOfSize:18];
            dealoroffersTitle.frame = CGRectMake(650, 420, 200, 30);
            dealoroffersTxt.font = [UIFont boldSystemFontOfSize:18];
            dealoroffersTxt.frame = CGRectMake(895, 420, 150, 30);
            giftVoucherTitle.font = [UIFont boldSystemFontOfSize:18];
            giftVoucherTitle.frame = CGRectMake(650, 455, 200, 30);
            giftVoucherTxt.font = [UIFont boldSystemFontOfSize:18];
            giftVoucherTxt.frame = CGRectMake(895, 455, 150, 30);
            
            otherDiscountTitle.font = [UIFont boldSystemFontOfSize:18];
            otherDiscountTitle.frame = CGRectMake(650, 490, 200, 30);
            otherDiscountTxt.font = [UIFont boldSystemFontOfSize:18];
            otherDiscountTxt.frame = CGRectMake(895, 490, 90, 30);
            
            totalItemsLabel.font = [UIFont boldSystemFontOfSize:18];
            totalItemsLabel.frame = CGRectMake(650, 525, 200, 30);
            totalItemsLabelValue.font = [UIFont boldSystemFontOfSize:18];
            totalItemsLabelValue.frame = CGRectMake(895, 525, 150, 30);
            
            subtotalTitle.font = [UIFont boldSystemFontOfSize:18];
            subtotalTitle.frame = CGRectMake(650, 560, 200, 30);
            subtotalTxt.font = [UIFont boldSystemFontOfSize:18];
            subtotalTxt.frame = CGRectMake(895, 560, 150, 30);
            
            totalTitle.font = [UIFont boldSystemFontOfSize:18];
            totalTitle.frame = CGRectMake(650, yposition, 120, 30);
            totalTxt.font = [UIFont boldSystemFontOfSize:18];
            totalTxt.frame = CGRectMake(895, yposition , 150, 30);
            
            netPayLbl.font = [UIFont boldSystemFontOfSize:25];
            netPayLbl.frame = CGRectMake(650, yposition + 35, 120, 30);
            netPayLblVal.font = [UIFont boldSystemFontOfSize:25];
            netPayLblVal.frame = CGRectMake(780, yposition + 35 , 300, 30);
            netPayLblVal.textAlignment = NSTextAlignmentCenter;
            
            
            segmentedControl.frame = CGRectMake( -2, 700, self.view.frame.size.width + 4, 60);
            
            //            if(!isNewReturnBill && false){
            if(!isNewReturnBill){
                
                [self.view addSubview:refreshOnlineOrderBtn];
                [self.view addSubview:onlineOrderBtn];
                [self.view addSubview:mobileOrderBtn];
                [self.view addSubview:telePhoneOrderBtn];
                
                segmentedControl.frame = CGRectMake( -1, 700,self.view.frame.size.width - 220, 60);
                
                refreshOnlineOrderBtn.frame = CGRectMake( segmentedControl.frame.origin.x + segmentedControl.frame.size.width, segmentedControl.frame.origin.y, 60, segmentedControl.frame.size.height);
                
                float buttonWidth = (self.view.frame.size.width - (refreshOnlineOrderBtn.frame.origin.x + refreshOnlineOrderBtn.frame.size.width))/3;
                
                onlineOrderBtn.frame = CGRectMake( refreshOnlineOrderBtn.frame.origin.x + refreshOnlineOrderBtn.frame.size.width, refreshOnlineOrderBtn.frame.origin.y + 2, buttonWidth, refreshOnlineOrderBtn.frame.size.height);
                mobileOrderBtn.frame = CGRectMake( onlineOrderBtn.frame.origin.x + onlineOrderBtn.frame.size.width, onlineOrderBtn.frame.origin.y, onlineOrderBtn.frame.size.width, refreshOnlineOrderBtn.frame.size.height);
                telePhoneOrderBtn.frame = CGRectMake( mobileOrderBtn.frame.origin.x + mobileOrderBtn.frame.size.width, onlineOrderBtn.frame.origin.y, onlineOrderBtn.frame.size.width, refreshOnlineOrderBtn.frame.size.height);
            }
            
            
            giftTypeTableView.frame = CGRectMake(300, 120, 300, 160);
            giftScannerBtn.frame = CGRectMake(10.0, 170.0, 50.0, 50.0);
            numberToolbar.frame = CGRectMake(0, 0, 320, 50);
            
            group.frame = CGRectMake(20, 100, 758, 340);
            
            descLabl.frame = CGRectMake(10,10, 225, 35);
            
            
            mrpLbl.frame = CGRectMake(descLabl.frame.origin.x+descLabl.frame.size.width+2,descLabl.frame.origin.y, 100, 35);
            
            priceLbl.frame  = CGRectMake(mrpLbl.frame.origin.x+mrpLbl.frame.size.width+2,descLabl.frame.origin.y, 100, 35);
            
            colorLbl.frame  = CGRectMake(priceLbl.frame.origin.x+priceLbl.frame.size.width+2,descLabl.frame.origin.y,100,35);
            
            sizeLbl.frame  =CGRectMake(colorLbl.frame.origin.x+colorLbl.frame.size.width+2,descLabl.frame.origin.y , 100, 35);
            
            priceView.frame = CGRectMake(200, 150, sizeLbl.frame.origin.x+sizeLbl.frame.size.width ,400);
            priceView.layer.borderColor = [UIColor whiteColor].CGColor;
            priceView.layer.borderWidth = 1.0;
            
            priceTable.frame = CGRectMake (descLabl.frame.origin.x,descLabl.frame.origin.y+descLabl.frame.size.height+10, sizeLbl.frame.origin.x+sizeLbl.frame.size.width - (descLabl.frame.origin.x), priceView.frame.size.height - (descLabl.frame.origin.y + descLabl.frame.size.height +48));
            
            
            closeBtn.frame = CGRectMake(priceView.frame.origin.x + priceView.frame.size.width - 50, priceView.frame.origin.y - 40, 40, 40);
            
            transparentView.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
            
            //added && changed  by Srinivasulu on 12/09/2017....
            
            listBilledItemsScrollView.frame = CGRectMake( BillField.frame.origin.x, BillField.frame.origin.y + BillField.frame.size.height + 10, eraseButton.frame.origin.x + eraseButton.frame.size.width - BillField.frame.origin.x, segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height + 10));
            
            //listBilledItemsScrollView.backgroundColor = [UIColor redColor];
            
            label11.font = [UIFont boldSystemFontOfSize:18];
            label22.font = [UIFont boldSystemFontOfSize:18];
            label33.font = [UIFont boldSystemFontOfSize:18];
            label44.font = [UIFont boldSystemFontOfSize:18];
            label55.font = [UIFont boldSystemFontOfSize:18];
            label66.font = [UIFont boldSystemFontOfSize:18];
            label77.font = [UIFont boldSystemFontOfSize:18];
            label88.font = [UIFont boldSystemFontOfSize:18];
            label99.font = [UIFont boldSystemFontOfSize:18];
            label10.font = [UIFont boldSystemFontOfSize:18];
            
            label11.layer.cornerRadius = 5;
            label22.layer.cornerRadius = 5;
            label33.layer.cornerRadius = 5;
            label44.layer.cornerRadius = 5;
            label55.layer.cornerRadius = 5;
            label66.layer.cornerRadius = 5;
            label77.layer.cornerRadius = 5;
            label88.layer.cornerRadius = 5;
            label99.layer.cornerRadius = 5;
            label10.layer.cornerRadius = 5;
            
            //            label11.frame = CGRectMake( 100, 0, 100, 30);
            
            float userOrigin = 50;
            
            //commented by Srinivasulu on 26/10/2017....
            //reason -- this value has to use for the salePerson mandatory field....
            //            if(isEmployeeSaleId)
            userOrigin = 100;
            
            eraseButton.frame = CGRectMake( userOrigin - 50, -2, 40.0f, 40.0f);
            
            label11.frame = CGRectMake( userOrigin, 0, 100, 30);
            label22.frame = CGRectMake( label11.frame.origin.x + label11.frame.size.width + 2, label11.frame.origin.y, 100, label11.frame.size.height);
            label33.frame = CGRectMake( label22.frame.origin.x + label22.frame.size.width + 2, label11.frame.origin.y, 60, label11.frame.size.height);
            label44.frame = CGRectMake( label33.frame.origin.x + label33.frame.size.width + 2, label11.frame.origin.y, 80, label11.frame.size.height);
            
            float qtyLblWidth = 60;
            //added by Srinivausulu on 02/07/2018....
            //            if([businessCategoryStr caseInsensitiveCompare:FMCG] == NSOrderedSame)
            qtyLblWidth = 80;
            
            label88.frame = CGRectMake( label44.frame.origin.x + label44.frame.size.width + 2, label11.frame.origin.y, qtyLblWidth, label11.frame.size.height);
            label55.frame = CGRectMake( label88.frame.origin.x + label88.frame.size.width + 2, label11.frame.origin.y, 75, label11.frame.size.height);
            label66.frame = CGRectMake( label55.frame.origin.x + label55.frame.size.width + 2, label11.frame.origin.y, 75, label11.frame.size.height);
            label77.frame = CGRectMake( label66.frame.origin.x + label66.frame.size.width + 2, label11.frame.origin.y, 80, label11.frame.size.height);
            label99.frame = CGRectMake( label77.frame.origin.x + label77.frame.size.width + 2, label11.frame.origin.y, 100, label11.frame.size.height);
            label10.frame = CGRectMake( label99.frame.origin.x + label99.frame.size.width + 2, label11.frame.origin.y, 100, label11.frame.size.height);
            
            
            //            eraseButton.frame = CGRectMake( label10.frame.origin.x + label10.frame.size.width + 2, label11.frame.origin.y, 40.0f, 40.0f);
            
            
            
            // cartTable.frame = CGRectMake(label11.frame.origin.x, label11.frame.origin.y + label11.frame.size.height + 10,  label10.frame.origin.x + label10.frame.size.width + 100, listBilledItemsScrollView.frame.size.height - (label11.frame.origin.y + label77.frame.size.height + 10));
            
            cartTable.frame = CGRectMake( 0, label11.frame.origin.y + label11.frame.size.height + 10,  label10.frame.origin.x + label10.frame.size.width + 4, listBilledItemsScrollView.frame.size.height - (label11.frame.origin.y + label77.frame.size.height + 10));
            
            
            listBilledItemsScrollView.contentSize = CGSizeMake( cartTable.frame.size.width + 10, listBilledItemsScrollView.frame.size.height);
            
            //--*
            
            //upto here on 12/09/2017....
            
            
            
        }
        else {
            BillField.font = [UIFont boldSystemFontOfSize:25];
            BillField.frame = CGRectMake(15, 140, 600, 40);
            skListTable.frame = CGRectMake(15, 180, 360,0);
            barcodeBtn.frame = CGRectMake(630, 130.0f, 80.0f, 80.0f);
            eraseButton.frame = CGRectMake(710, 140.0f, 55.0f, 55.0f);
            label11.font = [UIFont boldSystemFontOfSize:22];
            label11.frame = CGRectMake(12, 210, 120, 55);
            label22.font = [UIFont boldSystemFontOfSize:22];
            label22.frame = CGRectMake(135, 210, 120, 55);
            label66.font = [UIFont boldSystemFontOfSize:22];
            label66.frame = CGRectMake(258, 210, 120, 55);
            label33.font = [UIFont boldSystemFontOfSize:22];
            label33.frame = CGRectMake(381, 210, 120, 55);
            label44.font = [UIFont boldSystemFontOfSize:22];
            label44.frame = CGRectMake(504, 210, 120, 55);
            label55.font = [UIFont boldSystemFontOfSize:22];
            label55.frame = CGRectMake(627, 210, 120, 55);
            
            scrollView.frame = CGRectMake(0, 280, 778, 300);
            scrollView.contentSize = CGSizeMake(778 + 70, 800);
            cartTable.frame = CGRectMake(0, 280, 820,60);
            
            dealoroffersTitle.font = [UIFont boldSystemFontOfSize:20];
            dealoroffersTitle.frame = CGRectMake(30, 590, 240, 40);
            dealoroffersTxt.font = [UIFont boldSystemFontOfSize:20];
            dealoroffersTxt.frame = CGRectMake(640, 590, 550, 40);
            giftVoucherTitle.font = [UIFont boldSystemFontOfSize:20];
            giftVoucherTitle.frame = CGRectMake(30, 640, 260, 40);
            giftVoucherTxt.font = [UIFont boldSystemFontOfSize:20];
            giftVoucherTxt.frame = CGRectMake(640, 640, 550, 40);
            
            otherDiscountTitle.font = [UIFont boldSystemFontOfSize:20];
            otherDiscountTitle.frame = CGRectMake(30, 690, 240, 40);
            otherDiscountTxt.font = [UIFont boldSystemFontOfSize:20];
            otherDiscountTxt.frame = CGRectMake(640, 690, 120, 40);
            
            subtotalTitle.font = [UIFont boldSystemFontOfSize:20];
            subtotalTitle.frame = CGRectMake(30, 740, 240, 40);
            subtotalTxt.font = [UIFont boldSystemFontOfSize:20];
            subtotalTxt.frame = CGRectMake(640, 740, 550, 40);
            //taxTitle.font = [UIFont boldSystemFontOfSize:20];
            //taxTitle.frame = CGRectMake(30, 740, 240, 40);
            
            totalTitle.font = [UIFont boldSystemFontOfSize:20];
            totalTitle.frame = CGRectMake(30, yposition, 240, 40);
            totalTxt.font = [UIFont boldSystemFontOfSize:20];
            totalTxt.frame = CGRectMake(640, yposition , 550, 40);
            
            segmentedControl.frame = CGRectMake(-6,965,self.view.frame.size.width,60);
            giftTypeTableView.frame = CGRectMake(300, 155, 300, 160);
            giftScannerBtn.frame = CGRectMake(10.0, 170.0, 50.0, 50.0);
            numberToolbar.frame = CGRectMake(0, 0, 320, 50);
            
            group.frame = CGRectMake(20, 100, 758, 340);
            
        }
        
        
        giftAmt.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"Amount" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        giftNo.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"5 Digit Code" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        giftID.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"16 Digit Code" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        [self.view addSubview:isSearch];
        
    }
    else {
        
        //        img.frame = CGRectMake(0, 0, 320, 31);
        //        label.frame = CGRectMake(3, 1, 120, 30);
        //        mainBackbutton.frame = CGRectMake(285.0, 2.0, 27.0, 27.0);
        if (version >= 8.0) {
            
            radioBtn1.frame = CGRectMake(10,70, 30, 30);
            takeAway.frame = CGRectMake(60, 70, 100, 30);
            takeAway.font = [UIFont systemFontOfSize:15];
            radioBtn2.frame = CGRectMake(180, 70, 30, 30);
            doorDel.frame =  CGRectMake(220, 70, 120, 30);
            doorDel.font = [UIFont systemFontOfSize:15];
            
            
            //added by Srinivasulu on 20/04/2017....
            
            radioBtn3.frame = CGRectMake( 460, 80, 30, 30);
            creditBillLbl.frame =  CGRectMake( 500, 75, 150, 40);
            creditBillLbl.font = [UIFont systemFontOfSize:15.0];
            
            
            
            //upto here on 20/04/2017....
            
            
            
            BillField.frame = CGRectMake(40, 110, 180, 35);
            skListTable.frame = CGRectMake(40, 160, 213,0);
            barcodeBtn.frame = CGRectMake(223.0f, 110, 40.0f, 40.0f);
            eraseButton.frame = CGRectMake(272.0f, 110, 40.0f, 40.0f);
            label11.frame = CGRectMake(5, 160, 56, 30);
            label22.frame = CGRectMake(63, 160, 56, 30);
            label33.frame = CGRectMake(121, 160, 56, 30);
            label44.frame = CGRectMake(179, 160, 56, 30);
            label55.frame = CGRectMake(237, 160, 56, 30);
            scrollView.frame = CGRectMake(0, 200, 320, 150);
            scrollView.contentSize = CGSizeMake(320, 590);
            cartTable.frame = CGRectMake(0, 200, 322,150);
            
            dealoroffersTitle.frame = CGRectMake(20, 360, 120, 25);
            dealoroffersTitle.font = [UIFont boldSystemFontOfSize:14];
            
            dealoroffersTxt.frame = CGRectMake(200, 360, 100, 25);
            dealoroffersTxt.font = [UIFont boldSystemFontOfSize:15];
            
            giftVoucherTitle.frame = CGRectMake(20, 390, 150, 25);
            giftVoucherTitle.font = [UIFont boldSystemFontOfSize:14];
            
            giftVoucherTxt.frame = CGRectMake(200, 390, 100, 25);
            giftVoucherTxt.font = [UIFont boldSystemFontOfSize:15];
            
            subtotalTitle.frame = CGRectMake(20, 420, 100, 25);
            subtotalTitle.font = [UIFont boldSystemFontOfSize:14];
            subtotalTxt.font = [UIFont boldSystemFontOfSize:15];
            
            
            subtotalTxt.frame = CGRectMake(200, 420, 100, 25);
            //taxTitle.frame = CGRectMake(20, 410, 100, 25);
            //taxTxt.frame = CGRectMake(200, 410, 100, 25);
            totalTitle.frame = CGRectMake(20, yposition, 100, 25);
            totalTitle.font = [UIFont boldSystemFontOfSize:14];
            
            totalTxt.frame = CGRectMake(200, yposition, 100, 25);
            totalTxt.font = [UIFont boldSystemFontOfSize:15];
            
            segmentedControl.frame = CGRectMake(-2,(self.view.frame.size.height-48),324,47);
            giftTypeTableView.frame = CGRectMake(90, 81, 161, 175);
            giftScannerBtn.frame = CGRectMake(10.0, 55.0, 25.0, 35.0);
            numberToolbar.frame = CGRectMake(0, 0, 320, 50);
            
        }
        else{
            
            radioBtn1.frame = CGRectMake(5,5, 20, 20);
            takeAway.frame = CGRectMake(30, 5,100, 20);
            takeAway.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            radioBtn2.frame = CGRectMake(150, 5, 20, 20);
            doorDel.frame =  CGRectMake(175, 5, 120, 20);
            doorDel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            
            //added by Srinivasulu on 20/04/2017....
            
            radioBtn3.frame = CGRectMake( 345, 5, 20, 20);
            creditBillLbl.frame =  CGRectMake( 370, 5, 100, 20);
            creditBillLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            
            
            
            //upto here on 20/04/2017....
            
            
            BillField.frame = CGRectMake(20, 40, 213, 35);
            skListTable.frame = CGRectMake(20, 75, 213,0);
            barcodeBtn.frame = CGRectMake(236.0f, 35.0f, 40.0f, 40.0f);
            eraseButton.frame = CGRectMake(280.0f, 35.0f, 40.0f, 40.0f);
            label11.frame = CGRectMake(5, 80, 56, 30);
            label22.frame = CGRectMake(63, 80, 56, 30);
            label33.frame = CGRectMake(121, 80, 56, 30);
            label44.frame = CGRectMake(179, 80, 56, 30);
            label55.frame = CGRectMake(237, 80, 56, 30);
            scrollView.frame = CGRectMake(0, 115, 320, 120);
            scrollView.contentSize = CGSizeMake(320, 590);
            cartTable.frame = CGRectMake(0, 115, 322,30);
            dealoroffersTitle.frame = CGRectMake(20, 227, 140, 25);
            dealoroffersTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            dealoroffersTxt.frame = CGRectMake(200, 227, 100, 25);
            dealoroffersTxt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            giftVoucherTitle.frame = CGRectMake(20, 250, 160, 25);
            giftVoucherTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            giftVoucherTxt.frame = CGRectMake(200, 250, 100, 25);
            giftVoucherTxt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            subtotalTitle.frame = CGRectMake(20, 275, 100, 25);
            subtotalTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            subtotalTxt.frame = CGRectMake(200, 275, 100, 25);
            subtotalTxt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            //            taxTitle.frame = CGRectMake(20, 300, 100, 25);
            // taxTxt.frame = CGRectMake(200, 300, 100, 25);
            // taxTxt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            totalTitle.frame = CGRectMake(20, yposition, 100, 25);
            totalTitle.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            totalTxt.frame = CGRectMake(200, yposition, 100, 25);
            totalTxt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            segmentedControl.frame = CGRectMake(-2,370,324,47);
            giftTypeTableView.frame = CGRectMake(90, 81, 161, 175);
            giftScannerBtn.frame = CGRectMake(10.0, 55.0, 25.0, 35.0);
            numberToolbar.frame = CGRectMake(0, 0, 320, 50);
            
        }
    }
    
    
    [self.view addSubview:takeAway];
    [self.view addSubview:radioBtn1];
    [self.view addSubview:radioBtn2];
    [self.view addSubview:doorDel];
    [self.view addSubview:quickPayBtn];
    [self.view addSubview:suggestion];
    [self.view addSubview:starRat];
    [self.view addSubview:mainBackbutton];
    [self.view addSubview:BillField];
    [self.view addSubview:custmerPhNum];
    [self.view addSubview:customerInfoEnable];
    [self.view addSubview:skListTable];
    [self.view addSubview:barcodeBtn];
    // [self.view addSubview:eraseButton];
    
    
    //commented by Srinivasulu on 12/09/2017....
    
    //    [self.view addSubview:label11];
    //    [self.view addSubview:label22];
    //    [self.view addSubview:label66];
    //    [self.view addSubview:label33];
    //    [self.view addSubview:label44];
    //    [self.view addSubview:label55];
    //
    //    //added by Srinivasulu on 03/08/2017....
    //
    //    [self.view addSubview:label77];
    //
    //    //upto here 03/08/2017....
    
    //upto here 12/09/2017....
    
    //added and changed by Srinivasulu on 12/09/2017....
    
    [listBilledItemsScrollView addSubview:label11];
    [listBilledItemsScrollView addSubview:label22];
    [listBilledItemsScrollView addSubview:label33];
    [listBilledItemsScrollView addSubview:label44];
    [listBilledItemsScrollView addSubview:label55];
    [listBilledItemsScrollView addSubview:label66];
    [listBilledItemsScrollView addSubview:label77];
    [listBilledItemsScrollView addSubview:label88];
    [listBilledItemsScrollView addSubview:label99];
    [listBilledItemsScrollView addSubview:label10];
    
    [listBilledItemsScrollView addSubview:eraseButton];
    
    //[self.view addSubview:cartTable];
    
    [listBilledItemsScrollView addSubview:cartTable];
    
    
    [self.view addSubview:listBilledItemsScrollView];
    
    //upto here on 12/09/2017....
    
    [self.view addSubview:dealoroffersTitle];
    [self.view addSubview:dealoroffersTxt];
    [self.view addSubview:giftVoucherTitle];
    [self.view addSubview:giftVoucherTxt];
    [self.view addSubview:otherDiscountTitle];
    [self.view addSubview:otherDiscountTxt];
    
    //added by Srinivasulu on 18/05/2018....
    
    [self.view addSubview:otherDiscountValueTxt];
    
    //upto here on 18/05/2018....
    [self.view addSubview:subtotalTitle];
    [self.view addSubview:subtotalTxt];
    [self.view addSubview:totalTitle];
    [self.view addSubview:totalTxt];
    [self.view addSubview:netPayLbl];
    [self.view addSubview:netPayLblVal];
    [self.view addSubview:totalItemsLabel];
    [self.view addSubview:totalItemsLabelValue];
    [self.view addSubview:segmentedControl];
    [self.view addSubview:searchBarcodeBtn];
    
    //added by Srinivasulu on 15/10/2018....
    
    [self.view addSubview:amountToBePaidLbl];
    [self.view addSubview:amountToBePaidValLbl];
    
    //upto here on 13/11/2017....
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        if(version >= 8.0) {
            descLabl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
            priceLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
            priceView.frame = CGRectMake(10, 140.0, self.view.frame.size.width, self.view.frame.size.height);
            priceLbl.frame = CGRectMake(140.0, 5, 100, 30);
            descLabl.frame = CGRectMake(30, 5, 100, 30);
            closeBtn.frame = CGRectMake(250.0, 140.0, 40, 40);
            transparentView.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
            priceTable.frame = CGRectMake(20, 40, 220, 200);
        }
        else {
            descLabl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
            priceLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12.0f];
            priceView.frame = CGRectMake(10, 50.0, self.view.frame.size.width, self.view.frame.size.height);
            priceLbl.frame = CGRectMake(140.0, 5, 100, 30);
            descLabl.frame = CGRectMake(30, 5, 100, 30);
            closeBtn.frame = CGRectMake(250.0, 50.0, 40, 40);
            transparentView.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
            priceTable.frame = CGRectMake(20, 40, 220, 200);
        }
    }
    [self populateHeaderView];
    
    [priceView addSubview:descLabl];
    [priceView addSubview:mrpLbl];
    [priceView addSubview:priceLbl];
    [priceView addSubview:colorLbl];
    [priceView addSubview:sizeLbl];
    [priceView addSubview:priceTable];
    [transparentView addSubview:priceView];
    [transparentView addSubview:closeBtn];
    [self.view addSubview:transparentView];
    
    phnotext = [[UITextField alloc] init];
    emailtext = [[UITextField alloc] init];
    nametext = [[UITextField alloc] init];
    cartTotalItems = [NSMutableArray new];
    isVoidedArray = [NSMutableArray new];
    isVegetable = [NSMutableArray new];
    payTxt2 = [[UITextField alloc] init];
    itemPromoFlagArr = [NSMutableArray new];
    
    [self provideCustomerRatingfor:nil];
    
    phoneNumberText = [[CustomTextField alloc] init];
    
    phoneNumberText.borderStyle = UITextBorderStyleRoundedRect;
    phoneNumberText.autocorrectionType = UITextAutocorrectionTypeNo;
    phoneNumberText.keyboardType = UIKeyboardTypeDefault;
    phoneNumberText.returnKeyType = UIReturnKeyDone;
    phoneNumberText.clearButtonMode = UITextFieldViewModeWhileEditing;
    phoneNumberText.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    phoneNumberText.delegate = self;
    phoneNumberText.placeholder = @"Phone Number";
    phoneNumberText.hidden = NO;
    
    //added by Srinivasulu on 09/03/2018.... reason for NewReturnBill it result in crushing....
    if (!isFoodCouponsAvail && !isOfflineService && !isNewReturnBill) {
        //--
        [segmentedControl setEnabled:false forSegmentAtIndex:4];
    }
    if (![[[NSUserDefaults standardUserDefaults] valueForKey:kDoorDelivery] boolValue]) {
        
        radioBtn2.enabled = false;
        doorDel.textColor = [UIColor grayColor];
    }
    
    employeeDic = [NSMutableDictionary new];
    manufacturedItemsArr = [NSMutableArray new];
    isPackagedItem = [NSMutableArray new];
    
    isFlatDisc = true;
    
    onlineDealDiscountPriceArr = [NSMutableArray new];
    onlineOfferDiscountPriceArr = [NSMutableArray new];
    totalDealSkusArr = [NSMutableArray new];
    appliedOfferIdsArr = [NSMutableArray new];
    appliedDealIdsArr = [NSMutableArray new];
    turnOverFreeItemsDesc = [NSMutableArray new];
    
#pragma mark product menu
    
    /*Creation of UIButton for providing user to display the product menu......*/
    productMenuBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    UIImage *productMenuImg = [UIImage imageNamed:@"summaryInfo.png"];
    [productMenuBtn setBackgroundImage:productMenuImg forState:UIControlStateNormal];
    //    [productMenuBtn addTarget:self action:@selector(displayProductMenu:) forControlEvents:UIControlEventTouchDown];
    [productMenuBtn addTarget:self action:@selector(displayNewProductMenu:) forControlEvents:UIControlEventTouchDown];
    [self.view addSubview:productMenuBtn];
    
    
    productMenuBtn.frame  = CGRectMake(self.view.frame.size.width-40, doorDel.frame.origin.y+5, 40, 30);
    if (isProductsMenu) {
        [self.view addSubview:productMenuBtn];
    }
    
    HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
    [self.navigationController.view addSubview:HUD];
    // Regiser for HUD callbacks so we can remove it from the window at the right time
    HUD.delegate = self;
    HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
    HUD.mode = MBProgressHUDModeCustomView;
    HUD.dimBackground = YES;
    HUD.labelText = @"Please wait...";
    // Show the HUD
    [HUD show:YES];
    [HUD setHidden:YES];
    
    unAppliedDealIndex = -1;
    
    productInfoArr = [NSMutableArray new];
    
    isItemUnVoided = false;
    
    empCodeTxt = [[UITextField alloc] init];
    empCodeTxt.borderStyle = UITextBorderStyleRoundedRect;
    empCodeTxt.textColor = [UIColor blackColor];
    //NumberKeyBoard hidden....
    empCodeTxt.font = [UIFont systemFontOfSize:17.0];
    empCodeTxt.backgroundColor = [UIColor whiteColor];
    empCodeTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    //qtyFeild.keyboardType = UIKeyboardTypeDefault;
    empCodeTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    empCodeTxt.returnKeyType = UIReturnKeyDone;
    empCodeTxt.delegate = self;
    empCodeTxt.userInteractionEnabled = false;
    empNameTxt = [[UITextField alloc] init];
    empNameTxt.borderStyle = UITextBorderStyleRoundedRect;
    empNameTxt.textColor = [UIColor blackColor];
    empNameTxt.font = [UIFont systemFontOfSize:17.0];
    empNameTxt.backgroundColor = [UIColor whiteColor];
    empNameTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    //qtyFeild.keyboardType = UIKeyboardTypeDefault;
    empNameTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    empNameTxt.returnKeyType = UIReturnKeyDone;
    empNameTxt.delegate = self;
    empNameTxt.userInteractionEnabled = false;
    
    empLocTxt = [[UITextField alloc] init];
    empLocTxt.borderStyle = UITextBorderStyleRoundedRect;
    empLocTxt.textColor = [UIColor blackColor];
    empLocTxt.font = [UIFont systemFontOfSize:17.0];
    empLocTxt.backgroundColor = [UIColor whiteColor];
    empLocTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    //qtyFeild.keyboardType = UIKeyboardTypeDefault;
    empLocTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    empLocTxt.returnKeyType = UIReturnKeyDone;
    empLocTxt.delegate = self;
    empLocTxt.userInteractionEnabled = false;
    
    zeroStockAvailInfoArr = [NSMutableArray new];
    
    taxTypeArr = [NSMutableArray new];
    
    
    isSearchBool = true;
    
    // btManager = [BluetoothManager sharedInstance];
    
    
    //added by Srinivasulu on 17/06/2017....
    //need to be test with some more bills ..... in order to check memory issue.....
    
    [[UIApplication sharedApplication].keyWindow addSubview:HUD];
    
    //upto here on 17/06/2017...
    
    
    
    //creation of UITables used in popUp's....
    
    
    //deprtmntTbl table creation....
    deprtmntTbl = [[UITableView alloc] init];
    deprtmntTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    deprtmntTbl.dataSource = self;
    deprtmntTbl.delegate = self;
    (deprtmntTbl.layer).borderWidth = 1.0f;
    deprtmntTbl.layer.cornerRadius = 3;
    deprtmntTbl.layer.borderColor = [UIColor grayColor].CGColor;
    
    //subDepartmentTbl table creation....
    subDepartmentTbl = [[UITableView alloc] init];
    subDepartmentTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    subDepartmentTbl.dataSource = self;
    subDepartmentTbl.delegate = self;
    (subDepartmentTbl.layer).borderWidth = 1.0f;
    subDepartmentTbl.layer.cornerRadius = 3;
    subDepartmentTbl.layer.borderColor = [UIColor grayColor].CGColor;
    
    
    //subDepartmentTbl table creation....
    salesPersonTbl = [[UITableView alloc] init];
    salesPersonTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    salesPersonTbl.dataSource = self;
    salesPersonTbl.delegate = self;
    (salesPersonTbl.layer).borderWidth = 1.0f;
    salesPersonTbl.layer.cornerRadius = 3;
    salesPersonTbl.layer.borderColor = [UIColor grayColor].CGColor;
    
    //editPriceReasonTbl table creation....
    reasonsTable = [[UITableView alloc] init];
    reasonsTable.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    reasonsTable.dataSource = self;
    reasonsTable.delegate = self;
    (reasonsTable.layer).borderWidth = 1.0f;
    reasonsTable.layer.cornerRadius = 3;
    reasonsTable.layer.borderColor = [UIColor grayColor].CGColor;
    
    
    //upto here on 17/06/2017...
    
    
    //added by sai on 30/07/2019
    
    deliveryPersonTbl = [[UITableView alloc] init];
    deliveryPersonTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    deliveryPersonTbl.dataSource = self;
    deliveryPersonTbl.delegate = self;
    (deliveryPersonTbl.layer).borderWidth = 1.0f;
    deliveryPersonTbl.layer.cornerRadius = 3;
    deliveryPersonTbl.layer.borderColor = [UIColor grayColor].CGColor;
    //Upto here
    
    //added by Srinivasulu on 06/09/2017....
    
    voidItemReasonsTbl = [[UITableView alloc] init];
    voidItemReasonsTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    voidItemReasonsTbl.dataSource = self;
    voidItemReasonsTbl.delegate = self;
    (voidItemReasonsTbl.layer).borderWidth = 1.0f;
    voidItemReasonsTbl.layer.cornerRadius = 3;
    voidItemReasonsTbl.layer.borderColor = [UIColor grayColor].CGColor;
    
    //added by Srinivasulu on 30/06/2017....
    
    @try {
        //taxTitle
        taxDetailsScrollView = [[UIScrollView alloc] init];
        [self.view addSubview:taxDetailsScrollView];
        
        [taxDetailsScrollView addSubview:taxTitle];
        [taxDetailsScrollView addSubview:taxTxt];
        
        
        //added by srinivasulu on 13/11/2017....
        
        UILabel * labelUnderLine_1;
        UILabel * labelUnderLine_2;
        UILabel * labelUnderLine_3;
        UILabel * labelUnderLine_4;
        UILabel * labelUnderLine_5;
        UILabel * labelUnderLine_6;
        
        UILabel * completeBillDiscountLbl;
        
        completeBillDiscountLbl = [[UILabel alloc] init];
        completeBillDiscountLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:12.0];
        completeBillDiscountLbl.backgroundColor = [UIColor clearColor];
        completeBillDiscountLbl.textColor = [UIColor whiteColor];
        
        completeBillDiscountValueLbl = [[UILabel alloc] init];
        completeBillDiscountValueLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:12.0];
        completeBillDiscountValueLbl.backgroundColor = [UIColor clearColor];
        completeBillDiscountValueLbl.textColor = [UIColor whiteColor];
        
        completeBillDiscountLbl.text = NSLocalizedString(@"total_discount", nil);
        completeBillDiscountValueLbl.text = NSLocalizedString(@"0_00", nil);
        
        
        labelUnderLine_1 = [[UILabel alloc] init];
        labelUnderLine_1.backgroundColor = [UIColor lightGrayColor];
        //        labelUnderLine_1.layer.borderWidth = 1.5;
        //        labelUnderLine_1.layer.borderColor = [UIColor lightGrayColor].CGColor;
        
        labelUnderLine_2 = [[UILabel alloc] init];
        labelUnderLine_2.backgroundColor = [UIColor lightGrayColor];
        //        labelUnderLine_2.layer.borderWidth = 1.5;
        //        labelUnderLine_2.layer.borderColor = [UIColor lightGrayColor].CGColor;
        
        labelUnderLine_3 = [[UILabel alloc] init];
        labelUnderLine_3.backgroundColor = [UIColor lightGrayColor];
        //        labelUnderLine_3.layer.borderWidth = 1.5;
        //        labelUnderLine_3.layer.borderColor = [UIColor lightGrayColor].CGColor;
        
        labelUnderLine_4 = [[UILabel alloc] init];
        labelUnderLine_4.backgroundColor = [UIColor lightGrayColor];
        //        labelUnderLine_4.layer.borderWidth = 1.5;
        //        labelUnderLine_4.layer.borderColor = [UIColor lightGrayColor].CGColor;
        
        labelUnderLine_5 = [[UILabel alloc] init];
        labelUnderLine_5.backgroundColor = [UIColor lightGrayColor];
        //        labelUnderLine_5.layer.borderWidth = 1.5;
        //        labelUnderLine_5.layer.borderColor = [UIColor lightGrayColor].CGColor;
        
        labelUnderLine_6 = [[UILabel alloc] init];
        labelUnderLine_6.backgroundColor = [UIColor lightGrayColor];
        //        labelUnderLine_6.layer.borderWidth = 1.5;
        //        labelUnderLine_6.layer.borderColor = [UIColor lightGrayColor].CGColor;
        
        
        [self.view addSubview:labelUnderLine_1];
        [self.view addSubview:labelUnderLine_2];
        [self.view addSubview:labelUnderLine_3];
        [self.view addSubview:labelUnderLine_4];
        [self.view addSubview:labelUnderLine_5];
        [self.view addSubview:labelUnderLine_6];
        
        
        
        [self.view addSubview:completeBillDiscountLbl];
        [self.view addSubview:completeBillDiscountValueLbl];
        
        
        //--*
        
        
        
        
        //upto here on 13/11/2017....
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            }
            else{
            }
            
            taxDetailsScrollView.frame = CGRectMake( taxTitle.frame.origin.x, taxTitle.frame.origin.y, taxTitle.frame.size.width + taxTxt.frame.size.width, taxTitle.frame.size.height);
            
            taxTitle.frame = CGRectMake( 0, 0, taxTitle.frame.size.width, taxTitle.frame.size.height);
            taxTxt.frame = CGRectMake( taxTitle.frame.size.width, 0, taxTxt.frame.size.width, taxTxt.frame.size.height);
            
            //changed by Srinivasulu on 13/11/2017....
            
            labelUnderLine_1.frame = CGRectMake( headerView.frame.origin.x, headerView.frame.origin.y + headerView.frame.size.height + 5,  headerView.frame.size.width, 1.5);
            
            backGroundColor_1.frame =  CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_1.frame.origin.y + labelUnderLine_1.frame.size.height, headerView.frame.size.width, 26);
            
            totalItemsLabel.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_1.frame.origin.y + labelUnderLine_1.frame.size.height, headerView.frame.size.width/4, 26);
            totalItemsLabelValue.frame = CGRectMake( totalItemsLabel.frame.origin.x + totalItemsLabel.frame.size.width, totalItemsLabel.frame.origin.y, totalItemsLabel.frame.size.width, totalItemsLabel.frame.size.height);
            
            totalTitle.frame = CGRectMake( totalItemsLabelValue.frame.origin.x + totalItemsLabelValue.frame.size.width, totalItemsLabel.frame.origin.y, totalItemsLabel.frame.size.width - 10, totalItemsLabel.frame.size.height);
            totalTxt.frame = CGRectMake( totalTitle.frame.origin.x + totalTitle.frame.size.width, totalItemsLabel.frame.origin.y, totalItemsLabel.frame.size.width, totalItemsLabel.frame.size.height);
            
            
            labelUnderLine_2.frame = CGRectMake( labelUnderLine_1.frame.origin.x, totalItemsLabelValue.frame.origin.y + totalItemsLabelValue.frame.size.height,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            
            dealoroffersTitle.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_2.frame.origin.y + labelUnderLine_2.frame.size.height + 5, headerView.frame.size.width/1.6, 26);
            dealoroffersTxt.frame = CGRectMake( dealoroffersTitle.frame.origin.x + dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.origin.y, labelUnderLine_2.frame.size.width - dealoroffersTitle.frame.size.width - 10, dealoroffersTitle.frame.size.height);
            
            giftVoucherTitle.frame = CGRectMake( labelUnderLine_1.frame.origin.x, dealoroffersTitle.frame.origin.y + dealoroffersTitle.frame.size.height + 5, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            giftVoucherTxt.frame = CGRectMake( dealoroffersTxt.frame.origin.x, giftVoucherTitle.frame.origin.y, dealoroffersTxt.frame.size.width, dealoroffersTitle.frame.size.height);
            
            otherDiscountTitle.frame = CGRectMake( labelUnderLine_1.frame.origin.x, giftVoucherTitle.frame.origin.y + giftVoucherTitle.frame.size.height + 5, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            
            otherDiscountTxt.frame = CGRectMake( dealoroffersTxt.frame.origin.x, otherDiscountTitle.frame.origin.y, (dealoroffersTxt.frame.size.width - 10) / 2, dealoroffersTitle.frame.size.height);
            //added by Srinivasulu on 18/05/2018....
            
            otherDiscountValueTxt.frame = CGRectMake( otherDiscountTxt.frame.origin.x + otherDiscountTxt.frame.size.width + 5, otherDiscountTitle.frame.origin.y, otherDiscountTxt.frame.size.width, dealoroffersTitle.frame.size.height);
            
            //upto here on 18/05/2018....
            
            
            labelUnderLine_3.frame = CGRectMake( headerView.frame.origin.x, otherDiscountTxt.frame.origin.y + otherDiscountTxt.frame.size.height + 5,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            
            backGroundColor_2.frame =  CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_3.frame.origin.y + labelUnderLine_3.frame.size.height, headerView.frame.size.width, 26);
            
            completeBillDiscountLbl.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_3.frame.origin.y + labelUnderLine_3.frame.size.height, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            completeBillDiscountValueLbl.frame = CGRectMake( dealoroffersTxt.frame.origin.x, completeBillDiscountLbl.frame.origin.y, dealoroffersTxt.frame.size.width, dealoroffersTitle.frame.size.height);
            
            
            labelUnderLine_4.frame = CGRectMake( labelUnderLine_1.frame.origin.x, completeBillDiscountLbl.frame.origin.y + completeBillDiscountLbl.frame.size.height,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            
            subtotalTitle.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_4.frame.origin.y + labelUnderLine_4.frame.size.height + 5, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            subtotalTxt.frame = CGRectMake( dealoroffersTxt.frame.origin.x, subtotalTitle.frame.origin.y, dealoroffersTxt.frame.size.width, dealoroffersTitle.frame.size.height);
            
            taxDetailsScrollView.frame = CGRectMake( labelUnderLine_1.frame.origin.x, subtotalTxt.frame.origin.y + subtotalTxt.frame.size.height, labelUnderLine_1.frame.size.width, 2.5 * subtotalTxt.frame.size.height);
            
            taxTitle.frame = CGRectMake( 0, 0, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            taxTxt.frame = CGRectMake( taxTitle.frame.size.width, 0, subtotalTxt.frame.size.width, taxTxt.frame.size.height);
            
            labelUnderLine_5.frame = CGRectMake( headerView.frame.origin.x, taxDetailsScrollView.frame.origin.y + taxDetailsScrollView.frame.size.height,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            
            backGroundColor_3.frame =  CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_5.frame.origin.y + labelUnderLine_5.frame.size.height, headerView.frame.size.width, 30);
            
            netPayLbl.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_5.frame.origin.y + labelUnderLine_5.frame.size.height, subtotalTitle.frame.size.width, 30);
            netPayLblVal.frame = CGRectMake( dealoroffersTxt.frame.origin.x, netPayLbl.frame.origin.y, dealoroffersTxt.frame.size.width, netPayLbl.frame.size.height);
            
            labelUnderLine_6.frame = CGRectMake( labelUnderLine_1.frame.origin.x, netPayLblVal.frame.origin.y + netPayLblVal.frame.size.height,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            
            totalItemsLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            totalItemsLabelValue.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            
            totalTitle.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            totalTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            totalTxt.textAlignment = NSTextAlignmentRight;
            
            dealoroffersTitle.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            dealoroffersTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            dealoroffersTxt.textAlignment = NSTextAlignmentRight;
            
            giftVoucherTitle.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            giftVoucherTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            giftVoucherTxt.textAlignment = NSTextAlignmentRight;
            
            otherDiscountTitle.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            otherDiscountTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            
            //added by Srinivasulu on 18/05/2018....
            
            otherDiscountTxt.textAlignment = NSTextAlignmentCenter;
            otherDiscountValueTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            otherDiscountValueTxt.textAlignment = NSTextAlignmentRight;
            
            //upto here on 18/05/2018....
            
            completeBillDiscountLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            completeBillDiscountValueLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            completeBillDiscountValueLbl.textAlignment = NSTextAlignmentRight;
            
            subtotalTitle.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            subtotalTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            subtotalTxt.textAlignment = NSTextAlignmentRight;
            
            netPayLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:22.0];
            netPayLblVal.font = [UIFont fontWithName:TEXT_FONT_NAME size:22.0];
            netPayLblVal.textAlignment = NSTextAlignmentRight;
            
            //added by Srinivasulu on 16/10/2018....
            amountToBePaidValLbl.frame = netPayLblVal.frame;
            amountToBePaidValLbl.font = netPayLblVal.font;
            amountToBePaidValLbl.textAlignment = netPayLblVal.textAlignment;
            netPayLblVal.hidden = YES;
            //upto here on 13/11/2017....
            
            //added by Srinivasulu on 15/10/2018....
            //            float setHeight = 24;
            //
            //            taxDetailsScrollView.frame = CGRectMake( taxTitle.frame.origin.x, taxTitle.frame.origin.y, taxTitle.frame.size.width + taxTxt.frame.size.width, (setHeight + 2) * 2);
            //
            //            taxTitle.frame = CGRectMake( 0, 0, taxTitle.frame.size.width, taxTitle.frame.size.height);
            //            taxTxt.frame = CGRectMake( taxTitle.frame.size.width, 0, taxTxt.frame.size.width, taxTxt.frame.size.height);
            //
            //            //changed by Srinivasulu on 13/11/2017....
            //
            //            labelUnderLine_1.frame = CGRectMake( headerView.frame.origin.x, headerView.frame.origin.y + headerView.frame.size.height + 5,  headerView.frame.size.width, 1.5);
            //
            //            backGroundColor_1.frame =  CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_1.frame.origin.y + labelUnderLine_1.frame.size.height, headerView.frame.size.width, setHeight - (2 * labelUnderLine_1.frame.size.height));
            //
            //            totalItemsLabel.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_1.frame.origin.y + labelUnderLine_1.frame.size.height, headerView.frame.size.width/4, setHeight - (2 * labelUnderLine_1.frame.size.height));
            //            totalItemsLabelValue.frame = CGRectMake( totalItemsLabel.frame.origin.x + totalItemsLabel.frame.size.width, totalItemsLabel.frame.origin.y, totalItemsLabel.frame.size.width, totalItemsLabel.frame.size.height);
            //
            //            totalTitle.frame = CGRectMake( totalItemsLabelValue.frame.origin.x + totalItemsLabelValue.frame.size.width, totalItemsLabel.frame.origin.y, totalItemsLabel.frame.size.width - 10, totalItemsLabel.frame.size.height);
            //            totalTxt.frame = CGRectMake( totalTitle.frame.origin.x + totalTitle.frame.size.width, totalItemsLabel.frame.origin.y, totalItemsLabel.frame.size.width, totalItemsLabel.frame.size.height);
            //
            //
            //            labelUnderLine_2.frame = CGRectMake( labelUnderLine_1.frame.origin.x, totalItemsLabelValue.frame.origin.y + totalItemsLabelValue.frame.size.height,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            //
            //            dealoroffersTitle.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_2.frame.origin.y + labelUnderLine_2.frame.size.height + 5, headerView.frame.size.width/1.6, setHeight);
            //            dealoroffersTxt.frame = CGRectMake( dealoroffersTitle.frame.origin.x + dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.origin.y, labelUnderLine_2.frame.size.width - dealoroffersTitle.frame.size.width - 10, dealoroffersTitle.frame.size.height);
            //
            //            giftVoucherTitle.frame = CGRectMake( labelUnderLine_1.frame.origin.x, dealoroffersTitle.frame.origin.y + dealoroffersTitle.frame.size.height + 5, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            //            giftVoucherTxt.frame = CGRectMake( dealoroffersTxt.frame.origin.x, giftVoucherTitle.frame.origin.y, dealoroffersTxt.frame.size.width, dealoroffersTitle.frame.size.height);
            //
            //            otherDiscountTitle.frame = CGRectMake( labelUnderLine_1.frame.origin.x, giftVoucherTitle.frame.origin.y + giftVoucherTitle.frame.size.height + 5, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            //
            //            otherDiscountTxt.frame = CGRectMake( dealoroffersTxt.frame.origin.x, otherDiscountTitle.frame.origin.y, (dealoroffersTxt.frame.size.width - 10) / 2, dealoroffersTitle.frame.size.height);
            //
            //            otherDiscountValueTxt.frame = CGRectMake( otherDiscountTxt.frame.origin.x + otherDiscountTxt.frame.size.width + 5, otherDiscountTitle.frame.origin.y, otherDiscountTxt.frame.size.width , dealoroffersTitle.frame.size.height);
            //
            //            labelUnderLine_3.frame = CGRectMake( headerView.frame.origin.x, otherDiscountTxt.frame.origin.y + otherDiscountTxt.frame.size.height + 5,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            //
            //            backGroundColor_2.frame =  CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_3.frame.origin.y + labelUnderLine_3.frame.size.height, headerView.frame.size.width, 26);
            //
            //            completeBillDiscountLbl.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_3.frame.origin.y + labelUnderLine_3.frame.size.height, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            //            completeBillDiscountValueLbl.frame = CGRectMake( dealoroffersTxt.frame.origin.x, completeBillDiscountLbl.frame.origin.y, dealoroffersTxt.frame.size.width, dealoroffersTitle.frame.size.height);
            //
            //
            //            labelUnderLine_4.frame = CGRectMake( labelUnderLine_1.frame.origin.x, completeBillDiscountLbl.frame.origin.y + completeBillDiscountLbl.frame.size.height,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            //
            //            subtotalTitle.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_4.frame.origin.y + labelUnderLine_4.frame.size.height + 5, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            //            subtotalTxt.frame = CGRectMake( dealoroffersTxt.frame.origin.x, subtotalTitle.frame.origin.y, dealoroffersTxt.frame.size.width, dealoroffersTitle.frame.size.height);
            //
            //            taxDetailsScrollView.frame = CGRectMake( labelUnderLine_1.frame.origin.x, subtotalTxt.frame.origin.y + subtotalTxt.frame.size.height, labelUnderLine_1.frame.size.width, 2.5 * subtotalTxt.frame.size.height);
            //
            //            taxTitle.frame = CGRectMake( 0, 0, dealoroffersTitle.frame.size.width, dealoroffersTitle.frame.size.height);
            //            taxTxt.frame = CGRectMake( taxTitle.frame.size.width, 0, subtotalTxt.frame.size.width, taxTxt.frame.size.height);
            //
            //            labelUnderLine_5.frame = CGRectMake( headerView.frame.origin.x, taxDetailsScrollView.frame.origin.y + taxDetailsScrollView.frame.size.height,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            //
            //            backGroundColor_3.frame =  CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_5.frame.origin.y + labelUnderLine_5.frame.size.height, headerView.frame.size.width, 30);
            //
            //            netPayLbl.frame = CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_5.frame.origin.y + labelUnderLine_5.frame.size.height, subtotalTitle.frame.size.width, 30);
            //            netPayLblVal.frame = CGRectMake( dealoroffersTxt.frame.origin.x, netPayLbl.frame.origin.y, dealoroffersTxt.frame.size.width, netPayLbl.frame.size.height);
            //
            //            labelUnderLine_6.frame = CGRectMake( labelUnderLine_1.frame.origin.x, netPayLblVal.frame.origin.y + netPayLblVal.frame.size.height,  labelUnderLine_1.frame.size.width, labelUnderLine_1.frame.size.height);
            //
            //            amountToBePaidLbl.frame =  CGRectMake( labelUnderLine_1.frame.origin.x, labelUnderLine_6.frame.origin.y + labelUnderLine_6.frame.size.height, subtotalTitle.frame.size.width, 30);
            //            amountToBePaidValLbl.frame = CGRectMake( dealoroffersTxt.frame.origin.x, amountToBePaidLbl.frame.origin.y, dealoroffersTxt.frame.size.width, netPayLbl.frame.size.height);
            //
            //            amountToBePaidLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            //            amountToBePaidValLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
            //            amountToBePaidValLbl.textAlignment = NSTextAlignmentRight;
            
            //upto here on 15/10/2018....
            
            
            //upto here on 13/11/2017....
            
            [self addLabelsToScrollView:nil];
        }
        else{
            
            
        }
        
        //added By Bhargav . v on 03/03/2018....
        
        ordersPagenationTable = [[UITableView alloc]init];
        
        //upto here on 13/13/2018....
        
        
        
        //added by Srinivasulu on 04/09/2018....
        isMemberShipItemAdded = false;
        customerMemberShipStatus = false;
        isToCreateNewMemberShip = false;
        isFirstTimeMemberShip = false;
        
        if(isNewReturnBill){
            
            radioBtn1.hidden = YES;
            takeAway.hidden = YES;
            radioBtn2.hidden = YES;
            doorDel.hidden = YES;
            radioBtn3.hidden = YES;
            creditBillLbl.hidden = YES;
            deliveryTypesBackGroundLbl.hidden = YES;
            creditBillBackGroundLbl.hidden = YES;
        }
        
        //added by Srinivasulu on 24/03/2018 && 28/08/2018....
        if(isHybirdMode)
            isHybirdCallFailed = true;
        
        NSArray* tempVCA = (self.navigationController).viewControllers;
        
        for(UIViewController *tempVC in tempVCA)
        {
            
            if([tempVC isKindOfClass:[PastBilling class]])
            {
                
                [tempVC removeFromParentViewController];
            }
            
        }
        
        //upto here on 24/03/2018....
        
        //added By Srinivasulu on 11/01/2019....
        isF_B_OrderBill = false;
        
        if(isF_B_OrderBill){
            NSArray * segmentLabels;
            
            segmentLabels = [NSArray arrayWithObjects:NSLocalizedString(@"menu", nil),NSLocalizedString(@"billing", nil), nil];
            topSegmentControl = [[UISegmentedControl alloc] initWithItems:segmentLabels];
            topSegmentControl.segmentedControlStyle = UISegmentedControlStyleBar;
            topSegmentControl.backgroundColor = [UIColor clearColor];
            topSegmentControl.selectedSegmentIndex = 0;
            [topSegmentControl addTarget:self action:@selector(changedMenuAndBillingView:) forControlEvents:UIControlEventValueChanged];
            // assigning a value to check the bill finished ..
            topSegmentControl.tag = 0;
            topSegmentControl.tintColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
            topSegmentControl.backgroundColor = [UIColor clearColor];
            NSDictionary *attributes = [NSDictionary dictionaryWithObjectsAndKeys:
                                        [UIFont boldSystemFontOfSize:25], UITextAttributeFont,[UIColor whiteColor],UITextAttributeTextColor,
                                        nil];
            [topSegmentControl setTitleTextAttributes:attributes forState:UIControlStateNormal];
            
            [self.view addSubview:topSegmentControl];
            topSegmentControl.frame = CGRectMake( -2, 65, self.view.frame.size.width + 4, 40);
            
            radioBtn1.frame = CGRectMake( 15, topSegmentControl.frame.origin.y + topSegmentControl.frame.size.height + 10, 30, 30);
            takeAway.frame = CGRectMake( 60, radioBtn1.frame.origin.y - 5, 120, 40);
            takeAway.font = [UIFont systemFontOfSize:24.0];
            radioBtn2.frame = CGRectMake( 190, radioBtn1.frame.origin.y, 30, 30);
            doorDel.frame =  CGRectMake( 225, takeAway.frame.origin.y, 150, 40);
            doorDel.font = [UIFont systemFontOfSize:24.0];
            
            //added by Srinivasulu on 20/04/2017....
            
            radioBtn3.frame = CGRectMake( 400, radioBtn1.frame.origin.y, 30, 30);
            creditBillLbl.frame =  CGRectMake( (560 - 120), takeAway.frame.origin.y, 110, 40);
            creditBillLbl.font = [UIFont systemFontOfSize:25.0];
            
            deliveryTypesBackGroundLbl.frame = CGRectMake( 5, takeAway.frame.origin.y, 375, 40);
            
            creditBillBackGroundLbl.frame = CGRectMake( 395, deliveryTypesBackGroundLbl.frame.origin.y, (560 - 395), 40);
            
            productMenuBtn.frame  = CGRectMake( productMenuBtn.frame.origin.x, deliveryTypesBackGroundLbl.frame.origin.y, productMenuBtn.frame.size.width, productMenuBtn.frame.size.height);
            
            
        }
        //upto here on 11/01/2019....
        
        // added by roja on 29/07/2019..
        memberShipText = [[UITextField alloc] init];
        memberShipText.text = @"";
        
        isWalletItemAdded = false;
        isToCallCreateWalletService = false;
        walletCreditAmt = 0.0;
        walletDebitAmt = 0.0;
        //upto here added by roja on 29/07/2019..

    } @catch (NSException *exception) {
        
    }
    
    //upto here on 30/06/2017....
    salesPersonIDArr = [NSMutableArray new];
    deliveryPersonIDArr = [NSMutableArray new];
    isCustomerDetailsCall = false;
    isWalletBtnSelected = false;
}

- (void)quickPayCall {
    if (cartItem.count > 0) {
        [self addPaymentViewFor:@"QUICKCASH"];
    }
}

- (void)deviceOrientationDidChange:(NSNotification *)notification{
    
    
    UIDeviceOrientation orientation = [UIDevice currentDevice].orientation;
    
    if ((UIDeviceOrientationIsPortrait(orientation) ||UIDeviceOrientationIsPortrait(orientation)) ||
        (UIDeviceOrientationIsLandscape(orientation) || UIDeviceOrientationIsLandscape(orientation))) {
        //still saving the current orientation
        currentOriention = orientation;
    }
    
    
    //added by Srinivasulu on 26/03/2018....
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad && !(currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight))
        currentOriention = UIDeviceOrientationLandscapeRight;
    
    //upto here on 26/03/2018....
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (!segmentedControl.selectedSegmentIndex) {
            
            yposition = 780.0f;
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                if (version>=8.0) {
                    yposition = 410.0;
                }
                else {
                    yposition = 300.0;
                }
            }
            else {
                if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                    
                    yposition = 510;
                    
                }
            }
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                    
                    taxTitle.font = [UIFont boldSystemFontOfSize:20];
                    taxTitle.frame = CGRectMake(650, yposition, 240, 30);
                    taxTxt.font = [UIFont boldSystemFontOfSize:20];
                    taxTxt.frame = CGRectMake(920, yposition, 550, 30);
                    yposition = yposition + 40.0f;
                }
                else {
                    taxTitle.font = [UIFont boldSystemFontOfSize:20];
                    taxTitle.frame = CGRectMake(30, yposition, 240, 40);
                    taxTxt.font = [UIFont boldSystemFontOfSize:20];
                    taxTxt.frame = CGRectMake(640, yposition, 550, 40);
                    yposition = yposition + 40.0f;
                }
                
            }
            else {
                taxTitle.frame = CGRectMake(20, yposition, 100, 25);
                taxTxt.frame = CGRectMake(200, yposition, 100, 25);
                yposition = yposition + 25.0f;
                
            }
            
            
        }
        
        
        
        radioBtn1.frame = CGRectMake(15,80, 30, 30);
        
        radioBtn2.frame = CGRectMake(400, 80, 30, 30);
        
        //added by Srinivasulu on 20/04/2017....
        
        radioBtn3.frame = CGRectMake(550,80, 30, 30);
        //        creditBillLbl.frame =  CGRectMake(600, 75, 150, 40);
        //        creditBillLbl.font = [UIFont systemFontOfSize:25.0];
        
        
        
        //upto here on 20/04/2017....
        
        
        BillField.font = [UIFont boldSystemFontOfSize:25];
        BillField.frame = CGRectMake(15, 140, 810, 40);
        skListTable.frame = CGRectMake(175, 180, 360,0);
        barcodeBtn.frame = CGRectMake(840, 130.0f, 80.0f, 80.0f);
        eraseButton.frame = CGRectMake(940, 140.0f, 55.0f, 55.0f);
        
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            
            BillField.font = [UIFont boldSystemFontOfSize:25];
            BillField.frame = CGRectMake(15, 140, 810, 40);
            skListTable.frame = CGRectMake(15, 180, 360,0);
            barcodeBtn.frame = CGRectMake(840, 130.0f, 80.0f, 80.0f);
            eraseButton.frame = CGRectMake(940, 140.0f, 55.0f, 55.0f);
            
            label11.font = [UIFont boldSystemFontOfSize:18];
            label11.frame = CGRectMake(5, 210, 90, 30);
            label11.layer.cornerRadius = 10;
            
            label22.font = [UIFont boldSystemFontOfSize:18];
            label22.frame = CGRectMake(100, 210, 90, 30);
            label22.layer.cornerRadius = 10;
            
            label33.font = [UIFont boldSystemFontOfSize:18];
            label33.frame = CGRectMake(290, 210, 90, 30);
            label33.layer.cornerRadius = 10;
            
            label44.font = [UIFont boldSystemFontOfSize:18];
            label44.frame = CGRectMake(385, 210, 90, 30);
            label44.layer.cornerRadius = 10;
            
            label55.font = [UIFont boldSystemFontOfSize:18];
            label55.frame = CGRectMake(480, 210, 90, 30);
            label55.layer.cornerRadius = 10;
            
            label66.font = [UIFont boldSystemFontOfSize:18];
            label66.frame = CGRectMake(195, 210, 90, 30);
            label66.layer.cornerRadius = 10;
            
            
            scrollView.frame = CGRectMake(0, 250, 820, 400);
            scrollView.contentSize = CGSizeMake(778 + 70, 1500);
            cartTable.frame = CGRectMake(0, 0, 650,400);
            
            dealoroffersTitle.font = [UIFont boldSystemFontOfSize:18];
            dealoroffersTitle.frame = CGRectMake(650, 350, 200, 30);
            dealoroffersTxt.font = [UIFont boldSystemFontOfSize:18];
            dealoroffersTxt.frame = CGRectMake(920, 350, 150, 30);
            giftVoucherTitle.font = [UIFont boldSystemFontOfSize:18];
            giftVoucherTitle.frame = CGRectMake(650, 390, 200, 30);
            giftVoucherTxt.font = [UIFont boldSystemFontOfSize:18];
            giftVoucherTxt.frame = CGRectMake(920, 390, 150, 30);
            
            otherDiscountTitle.font = [UIFont boldSystemFontOfSize:18];
            otherDiscountTitle.frame = CGRectMake(650, 430, 200, 30);
            otherDiscountTxt.font = [UIFont boldSystemFontOfSize:18];
            otherDiscountTxt.frame = CGRectMake(920, 430, 90, 30);
            
            subtotalTitle.font = [UIFont boldSystemFontOfSize:18];
            subtotalTitle.frame = CGRectMake(650, 470, 200, 30);
            subtotalTxt.font = [UIFont boldSystemFontOfSize:18];
            subtotalTxt.frame = CGRectMake(920, 470, 150, 30);
            //taxTitle.font = [UIFont boldSystemFontOfSize:18];
            //taxTitle.frame = CGRectMake(30, 740, 240, 40);
            
            totalTitle.font = [UIFont boldSystemFontOfSize:18];
            totalTitle.frame = CGRectMake(650, yposition, 200, 30);
            totalTxt.font = [UIFont boldSystemFontOfSize:18];
            totalTxt.frame = CGRectMake(920, yposition , 150, 30);
            
            segmentedControl.frame = CGRectMake(-6,700,self.view.frame.size.width+20,60);
            giftTypeTableView.frame = CGRectMake(300, 155, 300, 160);
            giftScannerBtn.frame = CGRectMake(10.0, 170.0, 50.0, 50.0);
            numberToolbar.frame = CGRectMake(0, 0, 320, 50);
            
            group.frame = CGRectMake(20, 100, 758, 340);
            
            priceView.frame = CGRectMake(250, 150, 480,400);
            priceView.layer.borderColor = [UIColor whiteColor].CGColor;
            priceView.layer.borderWidth = 1.0;
            descLabl.frame = CGRectMake(30, 5, 250, 30);
            priceLbl.frame = CGRectMake(300, 5, 180, 30);
            transparentView.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
            priceTable.frame = CGRectMake(0, 40, 480, 400);
            closeBtn.frame = CGRectMake(700, 112, 40, 40);
            
        }
        else {
            BillField.font = [UIFont boldSystemFontOfSize:25];
            BillField.frame = CGRectMake(15, 140, 600, 40);
            skListTable.frame = CGRectMake(15, 180, 360,0);
            barcodeBtn.frame = CGRectMake(630, 130.0f, 80.0f, 80.0f);
            eraseButton.frame = CGRectMake(710, 140.0f, 55.0f, 55.0f);
            label11.font = [UIFont boldSystemFontOfSize:22];
            label11.frame = CGRectMake(12, 210, 120, 55);
            label22.font = [UIFont boldSystemFontOfSize:22];
            label22.frame = CGRectMake(135, 210, 120, 55);
            label66.font = [UIFont boldSystemFontOfSize:22];
            label66.frame = CGRectMake(258, 210, 120, 55);
            label33.font = [UIFont boldSystemFontOfSize:22];
            label33.frame = CGRectMake(381, 210, 120, 55);
            label44.font = [UIFont boldSystemFontOfSize:22];
            label44.frame = CGRectMake(504, 210, 120, 55);
            label55.font = [UIFont boldSystemFontOfSize:22];
            label55.frame = CGRectMake(627, 210, 120, 55);
            
            scrollView.frame = CGRectMake(0, 280, 778, 300);
            scrollView.contentSize = CGSizeMake(778 + 70, 800);
            cartTable.frame = CGRectMake(0, 0, 820,60);
            
            dealoroffersTitle.font = [UIFont boldSystemFontOfSize:20];
            dealoroffersTitle.frame = CGRectMake(30, 590, 240, 40);
            dealoroffersTxt.font = [UIFont boldSystemFontOfSize:20];
            dealoroffersTxt.frame = CGRectMake(640, 590, 550, 40);
            giftVoucherTitle.font = [UIFont boldSystemFontOfSize:20];
            giftVoucherTitle.frame = CGRectMake(30, 640, 260, 40);
            giftVoucherTxt.font = [UIFont boldSystemFontOfSize:20];
            giftVoucherTxt.frame = CGRectMake(640, 640, 550, 40);
            
            otherDiscountTitle.font = [UIFont boldSystemFontOfSize:20];
            otherDiscountTitle.frame = CGRectMake(30, 690, 240, 40);
            otherDiscountTxt.font = [UIFont boldSystemFontOfSize:20];
            otherDiscountTxt.frame = CGRectMake(640, 690, 120, 40);
            
            subtotalTitle.font = [UIFont boldSystemFontOfSize:20];
            subtotalTitle.frame = CGRectMake(30, 740, 240, 40);
            subtotalTxt.font = [UIFont boldSystemFontOfSize:20];
            subtotalTxt.frame = CGRectMake(640, 740, 550, 40);
            //taxTitle.font = [UIFont boldSystemFontOfSize:20];
            //taxTitle.frame = CGRectMake(30, 740, 240, 40);
            
            totalTitle.font = [UIFont boldSystemFontOfSize:20];
            totalTitle.frame = CGRectMake(30, yposition, 240, 40);
            totalTxt.font = [UIFont boldSystemFontOfSize:20];
            totalTxt.frame = CGRectMake(640, yposition , 550, 40);
            
            segmentedControl.frame = CGRectMake(-6,965,self.view.frame.size.width,60);
            giftTypeTableView.frame = CGRectMake(300, 155, 300, 160);
            giftScannerBtn.frame = CGRectMake(10.0, 170.0, 50.0, 50.0);
            numberToolbar.frame = CGRectMake(0, 0, 320, 50);
            
            group.frame = CGRectMake(20, 100, 758, 340);
            
        }
        
        
        giftAmt.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"Amount" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        giftNo.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"5 Digit Code" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        giftID.attributedPlaceholder = [[NSAttributedString alloc]initWithString:@"16 Digit Code" attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        
    }
    [cartTable reloadData];
    if (segmentedControl.selectedSegmentIndex == 0) {
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                
                paymentView.frame = CGRectMake(100, 100, 800, 650);
                // payBtn.frame = CGRectMake(120.0, 500, 500, 60.0);
                //label.frame = CGRectMake(0, 0, 800, 80);
                // backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                
                label.font = [UIFont systemFontOfSize:25];
                
                billStatusLabel.font = [UIFont systemFontOfSize:20];
                billStatusLabel.frame = CGRectMake(15,220,120,30);
                billStatusLabelValue.font = [UIFont systemFontOfSize:20];
                billStatusLabelValue.frame = CGRectMake(210,160,160,30);
                billLabel.font = [UIFont systemFontOfSize:20];
                billLabel.frame = CGRectMake(15, 100.0, 120, 30);
                paidLbl.font = [UIFont systemFontOfSize:20];
                paidLbl.frame = CGRectMake(15, 170.0, 120, 30);
                
                phonelbl.font = [UIFont systemFontOfSize:20];
                phonelbl.frame = CGRectMake(15, 270.0, 120, 30);
                emaillbl.font = [UIFont systemFontOfSize:20];
                emaillbl.frame = CGRectMake(15, 340.0, 120, 30);
                namelbl.font = [UIFont systemFontOfSize:20];
                namelbl.frame = CGRectMake(15, 410.0, 120, 30);
                
                payTxt1.font = [UIFont systemFontOfSize:20];
                payTxt1.frame = CGRectMake(160, 100.0, 200, 40);
                payTxt2.font = [UIFont systemFontOfSize:20];
                payTxt2.frame = CGRectMake(160, 170.0, 200, 40);
                phnotext.frame = CGRectMake(160.0, 270.0, 200, 40);
                phnotext.font = [UIFont systemFontOfSize:20];
                emailtext.frame = CGRectMake(160.0, 340.0, 200, 40);
                emailtext.font = [UIFont systemFontOfSize:20.0];
                nametext.frame = CGRectMake(160, 410.0, 200, 40);
                nametext.font = [UIFont systemFontOfSize:20];
                
                streetlbl.font = [UIFont systemFontOfSize:20.0];
                streetlbl.frame = CGRectMake(400, 100, 120, 30);
                localitylbl.font = [UIFont systemFontOfSize:20.0];
                localitylbl.frame = CGRectMake(400, 170, 120, 30);
                citylbl.font = [UIFont systemFontOfSize:20.0];
                citylbl.frame = CGRectMake(400, 240, 120, 30);
                pinlbl.font = [UIFont systemFontOfSize:20.0];
                pinlbl.frame = CGRectMake(400, 310, 120, 30);
                
                streettext.font = [UIFont systemFontOfSize:20];
                streettext.frame = CGRectMake(530, 100.0, 200, 40);
                locltytext.font = [UIFont systemFontOfSize:20];
                locltytext.frame = CGRectMake(530, 170.0, 200, 40);
                citytext.frame = CGRectMake(530, 240.0, 200.0, 40);
                citytext.font = [UIFont systemFontOfSize:20];
                pintext.frame = CGRectMake(530, 310.0, 200.0, 40);
                pintext.font = [UIFont systemFontOfSize:20.0];
                
                
                payBtn.layer.cornerRadius = 25.0f;
                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                
                
            }
            else {
                
                // img1.frame = CGRectMake(0, 0, 630, 460);
                label.font = [UIFont systemFontOfSize:25];
                label.frame = CGRectMake(0, 0, 730, 80);
                backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
                billStatusLabel.font = [UIFont systemFontOfSize:25];
                billStatusLabel.frame = CGRectMake(15,300,220,45);
                billStatusLabelValue.font = [UIFont systemFontOfSize:25];
                billStatusLabelValue.frame = CGRectMake(210,300,160,45);
                billLabel.font = [UIFont systemFontOfSize:25];
                billLabel.frame = CGRectMake(15, 100.0, 160, 45);
                paidLbl.font = [UIFont systemFontOfSize:25];
                paidLbl.frame = CGRectMake(15, 200.0, 160, 45);
                phonelbl.font = [UIFont systemFontOfSize:25.0];
                phonelbl.frame = CGRectMake(15, 400.0, 160.0, 45);
                emaillbl.font = [UIFont systemFontOfSize:25.0];
                emaillbl.frame = CGRectMake(15, 500.0, 160.0, 45);
                namelbl.font = [UIFont systemFontOfSize:25.0];
                namelbl.frame = CGRectMake(15, 600.0, 160.0, 45);
                payTxt1.font = [UIFont systemFontOfSize:25];
                payTxt1.frame = CGRectMake(200, 100.0, 300, 45);
                payTxt2.font = [UIFont systemFontOfSize:25];
                payTxt2.frame = CGRectMake(200, 200.0, 300, 45);
                phnotext.frame = CGRectMake(200.0, 400.0, 300.0, 45);
                phnotext.font = [UIFont systemFontOfSize:25];
                emailtext.frame = CGRectMake(200.0, 500.0, 300.0, 45);
                emailtext.font = [UIFont systemFontOfSize:25.0];
                nametext.frame = CGRectMake(200.0, 600.0, 300.0, 45);
                nametext.font = [UIFont systemFontOfSize:25];
                payBtn.frame = CGRectMake(50.0, 680.0, 630.0, 60.0);
                payBtn.layer.cornerRadius = 25.0f;
                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                paymentView.frame = CGRectMake(20, 140, 730, 750.0);
                
            }
            
        }
        
    }
    else if (segment_index == 1) {
        
        
    }
    
}

-(void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:YES];
    giftVoucherArr = [[NSMutableArray alloc] init];
    
    isCustomerDetailsCall = false;

    //commented ny Srinivasulu on Srinivasulu on 29/04/2017....
    
    //    isOfflineService = YES;
    isScanningItem = TRUE;
    isSearchingItem = TRUE;
    
    //added by Srinivasulu on29/04/2017....
    
    if (! (draftBillID != nil && draftBillID.length > 0)){
        CheckWifi *wifi = [[CheckWifi alloc]init];
        BOOL status = [wifi checkWifi];
        
        if (status) {
            
            isOfflineService = false;
        }
        else {
            isOfflineService = true;
        }
    }
    
    //upto here on 29/04/2017....
    
    
    if(isVoidItemArr == nil ||  itemVoidReasonsArr == nil){
        
        isVoidItemArr = [NSMutableArray arrayWithObjects:NSLocalizedString(@"yes", nil),NSLocalizedString(@"no", nil), nil];
        
        itemVoidReasonsArr = [NSMutableArray arrayWithObjects:NSLocalizedString(@"change_mind",nil),NSLocalizedString(@"defective", nil), nil];
        
        //Change Mind
        //Defective
        
        //Insufficient Money
        //Failed Card Payment
    }
    
}

-(void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:YES];
    
    isScanningItem = TRUE;
    isSearchingItem = TRUE;
    
    NSString *appDoc = @"NewBill";
    
    
    
    
    //added by Srinivasulu on 27/06/2017....
    
    //    hsnArr  = [NSMutableArray new];
    
    //upto here on 27/06/2017....
    
    
    //added by Srinivasulu on 12/08/2017 && 26/06/2018 && 03/07/2018....
    
    customerGstinStr = @"";
    offSetViewTo = 0;
    startIndexint_ = 0;
    orderShipmentCharges = 0;
    
    //upto here on 12/08/2017 && 26/06/2018 && 03/07/2018....
    Boolean isToCheckDraft_Defaults = true;
    
    if(salesOrderIdStr == nil)
        salesOrderIdStr = @"";
    else if(salesOrderIdStr.length){
        isToCheckDraft_Defaults = false;
        //        isToDisplayOrderView = true;
        [self callingOutletOrderIdDetails:salesOrderIdStr orderChannel:salesOrderBookingTypeStr];
    }
    
    if(isToCheckDraft_Defaults){
        if (draftBillID != nil && draftBillID.length > 0) {
            
            @try {
                
                //modified by sonali....
                
                CheckWifi *wifi = [[CheckWifi alloc] init];
                
                
                if ([wifi checkWifi]) {
                    
                    isOfflineService = false;
                }
                
                //added ny Srinivasulu on 29/04/2017....
                
                else{
                    
                    isOfflineService = true;
                }
                
                //upto here on 29/04/2017....
                
                cartItemDetails = [NSMutableArray new];
                
                [HUD setHidden:NO];
                HUD.labelText = @"Loading Bill Please Wait";
                
                
                if (!isOfflineService) {
                    
                    WebServiceController *service = [[WebServiceController alloc] init];
                    service.getBillsDelegate = self;
                    [service getBillDetails:draftBillID];
                    // isOfflineService = TRUE;
                    
                }
                
                else {
                    
                    offline = [[OfflineBillingServices alloc]init];
                    NSMutableDictionary *json = [offline openBill:draftBillID];
                    if (json.count>0) {
                        [self getBillDetailsSuccesResponse:json];
                        
                    }
                    else {
                        [HUD setHidden:YES];
                        
                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Bill not available" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                    }
                    
                }
            } @catch (NSException *exception) {
                [HUD setHidden:YES];
                
                NSLog(@"%@",exception);
                
            } @finally {
                
                // isOfflineService = YES;
            }
            
        }
        else {
            
            appDoc = @"NewBill";
            
            
            offline = [[OfflineBillingServices alloc]init];
            giftVoucherArr = [[NSMutableArray alloc] init];
            turnOverDealVal = [[NSMutableArray alloc]init];
            
            CheckWifi *wifi = [[CheckWifi alloc]init];
            BOOL status = [wifi checkWifi];
            if (status) {
                
                isOfflineService = false;
            }
            else {
                isOfflineService = true;
            }
            
            @try {
                
                //get value from nsuserdefaults...
                //commented by Srinivasulu on 23/08/2017...
                //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
                
                if(itemsFromCartArr != nil){
                    
                    for(NSDictionary * cartItemTempdic in itemsFromCartArr){
                        
                        selected_SKID = [NSString stringWithFormat:@"%@",cartItemTempdic[@"skuId"]];
                        NSArray * temptaxArr = [cartItemTempdic valueForKey:@"tax"];
                        NSString * itemString = @"";
                        if (temptaxArr.count > 0) {
                            
                            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",cartItemTempdic[@"description"],@"#",cartItemTempdic[@"description"],@"#",[cartItemTempdic[@"quantity"] floatValue],@"#",[cartItemTempdic[@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",[cartItemTempdic[@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[cartItemTempdic[@"tax"][0] valueForKey:@"taxRate"] doubleValue]], @"#", [cartItemTempdic valueForKey:@"pluCode"], @"#", [[cartItemTempdic valueForKey:@"price"] floatValue]];
                        }
                        else {
                            
                            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",cartItemTempdic[@"description"],@"#",cartItemTempdic[@"description"],@"#",[cartItemTempdic[@"quantity"] floatValue],@"#",[cartItemTempdic[@"price"] floatValue], @"#",[NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00], @"#", [cartItemTempdic valueForKey:@"pluCode"], @"#", [[cartItemTempdic valueForKey:@"price"] floatValue]];
                        }
                        
                        selected_desc = [[NSString stringWithFormat:@"%@",cartItemTempdic[@"description"]] copy];
                        selected_price = [[NSString stringWithFormat:@"%.2f",[cartItemTempdic[@"price"] floatValue]] copy];
                        selectedPluCode = [cartItemTempdic[@"pluCode"] copy];
                        
                        [self getSkuDetailsHandler:itemString productInfo:cartItemTempdic];
                    }
                }
                
                // added by roja on 03/12/2019... (Below condition is for paidVoucher (Making user to come to billing page from issueGiftVoucher flow,only when isPaid flag is true))
                else if(isPaidVoucher && paidVoucherItemDetailsDic != nil){
                    
                        selected_SKID = [NSString stringWithFormat:@"%@",paidVoucherItemDetailsDic[@"sku_id"]];
                        NSString * itemString = @"";

                         itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",paidVoucherItemDetailsDic[@"description"],@"#",paidVoucherItemDetailsDic[@"description"],@"#",[paidVoucherItemDetailsDic[@"quantity"] floatValue],@"#",[paidVoucherItemDetailsDic[@"price"] floatValue], @"#",[NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00], @"#", [paidVoucherItemDetailsDic valueForKey:@"pluCode"], @"#", [[paidVoucherItemDetailsDic valueForKey:@"price"] floatValue]]; // without tax
                        
                        selected_desc = [[NSString stringWithFormat:@"%@",paidVoucherItemDetailsDic[@"description"]] copy];
                        selected_price = [[NSString stringWithFormat:@"%.2f",[paidVoucherItemDetailsDic[@"price"] floatValue]] copy]; // price
                        selectedPluCode = [paidVoucherItemDetailsDic[@"pluCode"] copy];
                        
                    [itemDiscountDescArr addObject:@"0.0"];

                        [self getSkuDetailsHandler:itemString productInfo:paidVoucherItemDetailsDic];
                }
                
                // upto here added by roja on 03/12/2019...
                else{
                    
                    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                    
                    //added by Srinivasulu on 30/01/2018....
                    if(!isNewReturnBill)
                        //upto here on 30/01/2018....
                        cartTotalItems = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"cartItems"]] mutableCopy];
                    else
                        eraseButton.hidden = YES;
                    
                    
                    
                    
                    if ([cartTotalItems isKindOfClass:[NSNull class]] || cartTotalItems == nil) {
                        cartTotalItems = [NSMutableArray new];
                    }
                    
                    if (cartTotalItems.count) {
                        
                        [HUD setHidden:NO];
                        HUD.labelText = @"Restoring data...";
                        
                        isVoidedArray = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"voidItems"]] mutableCopy];
                        itemPromoFlagArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"itemPromoFlag"]] mutableCopy];
                        isPriceEditableArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"priceEditArr"]] mutableCopy];
                        editedPriceArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"editedPriceArr"]] mutableCopy];
                        NSArray *taxdetails = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"taxArr"]] mutableCopy];
                        deletedTaxDic = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"deletedTaxDic"]] mutableCopy];
                        itemDiscountArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"itemDiscountArr"]] mutableCopy];
                        itemDiscountDescArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"itemDiscountDescArr"]] mutableCopy];
                        itemScanCode = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"itemScanCode"]] mutableCopy];
                        manufacturedItemsArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:kIsManuFacturedItem]] mutableCopy];
                        isPackagedItem = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:kPackagedType]] mutableCopy];
                        productInfoArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:@"productInfo"]] mutableCopy];
                        zeroStockAvailInfoArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:kZeroStockArr]] mutableCopy];
                        taxTypeArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:kItemTaxExclusive]] mutableCopy];
                        
                        //added by Srinivasulu on 28/09/2017  && 06/03/2018 && 27/04/2018....
                        
                        isItemFlatDiscountedArr  = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:IS_ITEM_FLAT_DISCOUNTED]] mutableCopy];
                        isItemTrackingRequiredArr = [[NSKeyedUnarchiver unarchiveObjectWithData:[defaults objectForKey:TRACKING_REQUIRED]] mutableCopy];
                        
                        NSString *currentDate = [WebServiceUtility getCurrentDate];
                        
                        [defaults setValue:currentDate forKey:SCAN_START_TIME];
                        [defaults setValue:currentDate forKey:SCAN_END_TIME];
                        //upto here on 28/09/2017 && 06/03/2018 && 27/04/2018....
                        
                        for (int i = 0; i < taxdetails.count; i++) {
                            [taxArr addObject:taxdetails[i]];
                        }
                        for (int i=0; i<cartTotalItems.count; i++) {
                            
                            if (![isVoidedArray[i] boolValue]) {
                                
                                [cartItem addObject:cartTotalItems[i]];
                                
                            }
                            
                        }
                        if (cartItem.count>0) {
                            float totalPrice = 0.0f;
                            for (int j = 0; j < cartItem.count; j++) {
                                
                                NSArray *temp = [cartItem[j] componentsSeparatedByString:@"#"];
                                [cartItemDetails addObject:temp[5]];
                                //                        NSDictionary *json = [offline applyDealsAndOffers:[temp objectAtIndex:0] qty:[temp objectAtIndex:5] total:[NSString stringWithFormat:@"%.2f",([[temp objectAtIndex:4] floatValue]*[[temp objectAtIndex:5] integerValue])] itemPrice:[temp objectAtIndex:4]];
                                totalPrice += ([temp[4] floatValue]*[temp[5] integerValue]);
                                //                        [self applyDealsOffline:json sku_id:[temp objectAtIndex:0]];
                                [cartTable reloadData];
                                [self updateValues];
                                [self goToBottom];
                            }
                            
                            //changed by Srinivasulu on 13/02/2018....
                            
                            if (isToCallApplyCampaigns && !isNewReturnBill) {
                                
                                //upto here on 13/02/2018....
                                [self callOffersForScanning:@"" qty:@"1" total:[NSString stringWithFormat:@"%.2f",totalPrice] itemPrice:@"100.0"];
                            }
                            else{
                                [HUD setHidden:YES];
                                [cartTable reloadData];
                            }
                        }
                        else {
                            
                            [HUD setHidden:YES];
                            
                            [cartTable reloadData];
                            [self updateValues];
                            [self goToBottom];
                            
                        }
                    }
                    
                    //                [HUD setHidden:YES];
                    //                [cartTable reloadData];
                }
                
            }
            @catch (NSException *exception) {
                
                [HUD setHidden:YES];
                
                NSLog(@"%@",exception);
            }
            @finally {
                // [HUD setHidden:YES];
            }
            
        }
    }
    
    @try {
        
        //added by Srinivasulu on 30/01/2018....
        //        if(isNewReturnBill)
        //        {
        //            CGRect rect = segmentedControl.frame;
        //            // bottombar ..
        //            NSArray *segmentText1;
        //
        //
        //            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //
        //                segmentText1 = [NSArray arrayWithObjects:[[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                                [[UIImage imageNamed:@"credit_note.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                                nil];
        //            }
        //            else{
        //
        //                if (version >= 8.0) {
        //
        //                    segmentText1 = [NSArray arrayWithObjects:
        //                                    [[UIImage imageNamed:@"FastBill.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                                    [[UIImage imageNamed:@"credit_note.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal],
        //                                    nil];
        //                }
        //                else{
        //
        //                    segmentText1 = [NSArray arrayWithObjects:
        //                                    [UIImage imageNamed:@"FastBill.png"],
        //                                    [UIImage imageNamed:@"credit_note.png"],
        //                                    nil];
        //                }
        //
        //            }
        //
        //            //segmentedControl = [[UISegmentedControl alloc] initWithItems:[NSArray arrayWithObjects:                                                                 @"card",@"sms",@"email",@"print",@"gift",                                                                  nil]];
        //            segmentedControl = [[UISegmentedControl alloc] initWithItems:segmentText1];
        //            segmentedControl.tintColor=[UIColor clearColor];
        //            //segmentedControl.autoresizingMask = UIViewAutoresizingFlexibleWidth;
        ////            segmentedControl.segmentedControlStyle = UISegmentedControlStyleBar;
        //            segmentedControl.backgroundColor = [UIColor blackColor];
        //
        //            [segmentedControl addTarget:self action:@selector(segmentAction:) forControlEvents:UIControlEventValueChanged];
        //
        //            [self.view addSubview:segmentedControl];
        //
        //            segmentedControl.frame = rect;
        //
        //
        //        }
        //        else
        if(isNewReturnBill)
        {
            
            self.view.frame = CGRectMake( self.view.frame.origin.x, self.view.frame.origin.y - segmentedControl.frame.size.height, self.view.frame.size.width, self.view.frame.size.height + segmentedControl.frame.size.height);
            segmentedControl.frame = CGRectMake( segmentedControl.frame.origin.x, segmentedControl.frame.origin.y + segmentedControl.frame.size.height, segmentedControl.frame.size.width, segmentedControl.frame.size.height);
        }
        else{
            //upto here on 30/01/2018....
            
            
//            if(!isOfflineService) { // commented by roja on 10/05/2019..
                //--
                if (![self isSegmentAcessible:@"Quick Pay" appDocument:appDoc]) {
                    
                    [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
                }
                if (![self isSegmentAcessible:@"Cash Payment" appDocument:appDoc]) {
                    
                    [segmentedControl setEnabled:FALSE forSegmentAtIndex:1];
                }
                if (![self isSegmentAcessible:@"Card Payment" appDocument:appDoc]) {
                    
                    [segmentedControl setEnabled:FALSE forSegmentAtIndex:2];
                }
                if (![self isSegmentAcessible:@"Food Coupons" appDocument:appDoc]) {
                    
                    [segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
                }
                if (![self isSegmentAcessible:@"Gift Vouchers" appDocument:appDoc] && ![self isSegmentAcessible:@"Loyalty Cards" appDocument:appDoc] && ![self isSegmentAcessible:@"Discount Coupons" appDocument:appDoc]) {
                    
                    [segmentedControl setEnabled:FALSE forSegmentAtIndex:5];
                }
                else {
                    if ([self isSegmentAcessible:@"Gift Vouchers" appDocument:appDoc]) {
                        [giftTypeArrayList addObject:@"Gift Voucher"];
                    }
                    if ([self isSegmentAcessible:@"Discount Coupons" appDocument:appDoc]) {
                        [giftTypeArrayList addObject:@"Coupon"];
                    }
                    if ([self isSegmentAcessible:@"Loyalty Cards" appDocument:appDoc]) {
                        [giftTypeArrayList addObject:@"Loyalty Card"];
                    }
                    // added by roja on 29/07/2019....
//                    if ([self isSegmentAcessible:@"Wallet" appDocument:appDoc]) {
                        [giftTypeArrayList addObject:@"Wallet"];
//                    }
                }
                //    if (![self isSegmentAcessible:@"Credit Note" appDocument:appDoc]) {
                //
                //        [segmentedControl setEnabled:FALSE forSegmentAtIndex:6];
                //    }
                
           // } // commented by roja on 10/05/2019..
        }
       
        //added by Srinivasulu on 19/01/2017.......
        
        isItemScanned = false;
        //upto here on 19/01/2017....
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
        //        [HUD setHidden:YES];
    }
    
    
    
    
    
    //    for (int i = 0; i < 2; i++) {
    //  [self scanner:scanner scannedBarcodeData:nil];
    //    }
}

#pragma -mark billDetailsDelegates

-(void)getBillDetailsSuccesResponse:(NSDictionary *)successDictionary{
    @try {
        if(isDuplicateBillIdResponse && !isOfflineService){
            
            [HUD setHidden:YES];
            
            if(!isCustomerBillId)
                billIDValue = [successDictionary valueForKey:BILL_ID];
            
            
            if(([successDictionary.allKeys containsObject:STATUS]) && (! [[successDictionary valueForKey:STATUS]  isKindOfClass:[NSNull class]])){
                
                if([[[successDictionary valueForKey:STATUS] lowercaseString] containsString:@"draft"]){
                    
                    
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Bill Saved" message:[NSString stringWithFormat:@"%@\t%@",@"Bill Id",billIDValue] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                    SystemSoundID    soundFileObject1;
                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                    AudioServicesPlaySystemSound (soundFileObject1);
                    //                    OmniHomePage * home = [[OmniHomePage alloc]init];
                    //                    [self.navigationController pushViewController:home animated:NO];
                }
                else{
                    //upto here on 04/02/2018....
                    
                    segmentedControl.tag = 0;
                    [segmentedControl setUserInteractionEnabled:TRUE];
                    [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
                    
                    if(!isNewReturnBill)
                        [segmentedControl setEnabled:TRUE forSegmentAtIndex:3];
                    
                    
                    mainBackbutton.enabled = TRUE;
                    mainBackbutton.userInteractionEnabled = TRUE;
                    
                    billTypeStatus = TRUE;
                    changeReturnStatus = TRUE;
                    cartItem = nil;
                    filteredSkuArrayList = nil;
                    
                    typeBilling = @"past";
         
                    
                    PastBilling *pbh = [[PastBilling alloc] initWithBillType:billIDValue] ;
                    pbh.billingType = @"past";
                    pbh.billTypeStr = NSLocalizedString(@"past_bill", nil);
                    
                    if ([[self checkGivenValueIsNullOrNil:[successDictionary valueForKey:BILL_DUE] defaultReturn:@"0.00"] floatValue]>0) {
                        
                        typeBilling = @"pending";
                        pbh.billTypeStr = NSLocalizedString(@"pending_bills", nil);
                    }
                    
                    pbh.isBillSummery = false;
                    [self.navigationController pushViewController:pbh animated:YES];
                    billIDValue = @"";
                }
                
            }
            
            
        }
        else{
            
            //    HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
            //    [self.navigationController.view addSubview:HUD];
            //    // Regiser for HUD callbacks so we can remove it from the window at the right time
            //    HUD.delegate = self;
            //    HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
            //    HUD.mode = MBProgressHUDModeCustomView;
            //    // Show the HUD
            //    [HUD show:YES];
            
            bill_details = [successDictionary mutableCopy];
            // if(isOfflineService){
            // dispatch_async(dispatch_get_main_queue(), ^{
            [self getBillingDetailsHandler];
            //        });
            // }
            //    else {
            //        [self performSelectorInBackground:@selector(getBillingDetailsHandler) withObject:nil];
            //    }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}
-(void)getBillsFailureResponse:(NSString *)failureString {
    [HUD setHidden:YES];
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:failureString message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
    [alert show];
}

- (void) getBillingDetailsHandler{
    
    //added by Srinivasulu on 16/01/2017.... exception handling....
    @try {
        
        // index = 0;
        
        //added by Srinivasulu 24/04/2017....
        
        if( ([bill_details.allKeys containsObject:@"status"]) && (![[bill_details valueForKey:@"status"] isKindOfClass:[NSNull class]])){
            
            if([[bill_details valueForKey:@"status"] isEqualToString:@"TA-CB-Draft"]){
                radioBtn3.tag = 4;
                
                [radioBtn3 setImage:[UIImage imageNamed:@"Credit_Select.png"] forState:UIControlStateNormal];
                
                
                deliveryType = @"TA-CB";
                radioBtn1.tag = 1;
                [radioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
                [radioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                
            }
            else if([[bill_details valueForKey:@"status"] isEqualToString:@"DD-CB-Draft"]){
                radioBtn3.tag = 4;
                [radioBtn3 setImage:[UIImage imageNamed:@"Credit_Select.png"] forState:UIControlStateNormal];
                
                deliveryType = @"DD-CB";
                radioBtn1.tag = 0;
                [radioBtn1 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                [radioBtn2 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
                
            }
            else if([[bill_details valueForKey:@"status"] containsString:@"TA"]){
                
                
                
                deliveryType = @"TA";
                radioBtn1.tag = 1;
                [radioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
                [radioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                
            }
            //            else if([[bill_details valueForKey:@"status"] containsString:@"HD"]){
            else
            {
                
                deliveryType = @"DD";
                radioBtn1.tag = 0;
                [radioBtn1 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                [radioBtn2 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
            }
            
        }
        else {
            
            deliveryType = @"DD";
            radioBtn1.tag = 0;
            [radioBtn1 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
            [radioBtn2 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        }
        
        
        
        
        //upto here on 24/04/2017....
        
        
        NSMutableArray *draftBillItems = bill_details[@"billItems"];
        
        originalBillId = [[bill_details valueForKey:@"billId"] copy];
        
        
        if ([bill_details.allKeys containsObject:OTHER_DISCOUNT] && ![[bill_details valueForKey:OTHER_DISCOUNT] isKindOfClass:[NSNull class]]) {
            
            otherDiscountTxt.text = [NSString stringWithFormat:@"%.2f",[[bill_details valueForKey:OTHER_DISCOUNT] floatValue]];
            
            //added by Srinivasulu on 14/06/2017....
            //reason to solve the bug no.. 2629....
            
            otherDiscountValue = [otherDiscountTxt.text copy];
            //upto here on 14/06/2017....
            
        }
        //added by Srinivasulu on 03/05/2018....
        
        salesOrderIdStr = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:ORDER_ID] defaultReturn:@""];
        
        //upto here on 03/05/2018....
        
        for (NSDictionary *itemInfo in draftBillItems) {
            
            NSMutableDictionary *itemDic = [itemInfo mutableCopy];
            
            if (!isOfflineService) {
                
                //  NSArray *keys = [NSArray arrayWithObjects:@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns",@"cartDetails", nil];
                
                skuIdList = [NSMutableArray new];
                pluCodeList = [NSMutableArray new];
                unitPriceList = [NSMutableArray new];
                qtyList = [NSMutableArray new];
                totalPriceList = [NSMutableArray new];
                itemStatusList = [NSMutableArray new];
                itemDiscountList = [NSMutableArray new];
                
                NSMutableDictionary *productInfoDic = [NSMutableDictionary new];
                
                float totalAmt = 0;
                
                float itemUnitPrice = 0;
                
                for (int i = 0; i < cartTotalItems.count; i++) {
                    NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                    [skuIdList addObject:itemDetails[0]];
                    [pluCodeList addObject:itemDetails[8]];
                    [unitPriceList addObject:@([itemDetails[4] floatValue])];
                    [qtyList addObject:@([itemDetails[5] floatValue])];
                    [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
                    if ([isVoidedArray[i] boolValue]) {
                        [itemStatusList addObject:@"void"];
                    }
                    else {
                        [itemStatusList addObject:@""];
                    }
                    [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
                    
                    totalAmt = totalAmt + [itemDetails[4] floatValue];
                    
                }
                
                if ([[itemDic valueForKey:EDITED_PRICE] floatValue] > 0) {
                    
                    itemUnitPrice = [[itemDic valueForKey:EDITED_PRICE] floatValue];
                    
                    // [editedPriceArr addObject:[NSNumber numberWithFloat:[[itemDic valueForKey:EDITED_PRICE] floatValue]]];
                    
                }
                else {
                    
                    itemUnitPrice = [[itemDic valueForKey:MRP_Price] floatValue];
                }
                
                NSString  *itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%@%@%@",itemDic[@"item_name"],@"#",itemDic[@"item_name"],@"#",[itemDic[@"availQty"] floatValue],@"#",itemUnitPrice, @"#", [NSString stringWithFormat:@"%@",[itemDic valueForKey:@"taxCode"]], @"#", [NSString stringWithFormat:@"%.2f",[[itemDic valueForKey:@"taxRate"] doubleValue]], @"#", [itemDic valueForKey:@"pluCode"], @"#",[NSString stringWithFormat:@"%.2f",itemUnitPrice] ,@"#",[itemDic valueForKey:@"quantity"]];
                
                //                [isPriceEditableArr addObject:[NSNumber numberWithInt:[[[priceDic objectAtIndex:0] valueForKey:@"editable"] intValue]]];
                
                [isPriceEditableArr addObject:@1];
                
                
                //added by Srinivausulu on 06/03/2018....
                
                if ([itemDic.allKeys containsObject:TRACKING_REQUIRED] && ![[itemDic valueForKey:TRACKING_REQUIRED] isKindOfClass:[NSNull class]]) {
                    
                    [isItemTrackingRequiredArr addObject:@([[itemDic valueForKey:TRACKING_REQUIRED] intValue])];
                }
                else {
                    
                    [isItemTrackingRequiredArr addObject:@0];
                }
                
                //upto here on 06/03/2018....
                
                
                // [itemDiscountArr addObject:[NSNumber numberWithFloat:[[itemDic valueForKey:@"itemDiscount"] floatValue]]];
                [itemDiscountDescArr addObject:[itemDic valueForKey:@"itemDiscountDesc"]];
                
                selected_desc = [[NSString stringWithFormat:@"%@",itemDic[@"item_name"]] copy];
                
                selected_price = [[NSString stringWithFormat:@"%@",itemDic[MRP_Price]] copy];
                
                selected_SKID = [itemDic[@"sku_id"] copy];
                
                selectedPluCode = [[itemDic valueForKey:@"pluCode"] copy];
                
                // for (NSDictionary *dic in [[bill_details objectForKey:@"billingItemTaxes"] reverseObjectEnumerator] ) {
                
                NSMutableArray *arr = [NSMutableArray new];
                
                //                if ([[bill_details objectForKey:@"billingItemTaxes"] count] > index) {
                //
                //                    NSDictionary *dic = [[bill_details objectForKey:@"billingItemTaxes"] objectAtIndex:index];
                //                    NSMutableDictionary *mutableDic = [dic mutableCopy];
                //
                //                    [mutableDic setObject:[dic valueForKey:@"tax_type"] forKey:@"taxType"];
                //                    [mutableDic setObject:[dic valueForKey:@"tax_rate"] forKey:@"taxRate"];
                //
                //                    [arr addObject:mutableDic];
                //                }
                
                for (NSDictionary *dic in bill_details[@"billingItemTaxes"]) {
                    
                    NSMutableDictionary *mutableDic = [dic mutableCopy];
                    
                    if ([[dic valueForKey:@"plu_code"] isEqualToString:[itemDic valueForKey:@"pluCode"]]) {
                        
                        mutableDic[@"taxType"] = [dic valueForKey:@"tax_type"];
                        mutableDic[@"taxRate"] = [dic valueForKey:@"tax_rate"];
                        
                        //aded by Srinivasulu on 02/06/2017....
                        
                        mutableDic[@"taxCode"] = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"tax_code"] defaultReturn:@""];
                        mutableDic[@"taxCategory"] = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"tax_category"] defaultReturn:@""];
                        
                        //upto here on 02/06/2017....
                        
                        
                        [arr addObject:mutableDic];
                        
                    }
                }
                
                
                itemDic[@"tax"] = arr;
                //  [taxArr addObject:arr];
                //}
                
                [manufacturedItemsArr addObject:@([itemDic[kIsManuFacturedItem] boolValue])];
                
                if ([itemDic.allKeys containsObject:kPackagedType] && ![itemDic[kPackagedType] isKindOfClass:[NSNull class]]) {
                    [isPackagedItem addObject:@([itemDic[kPackagedType] boolValue])];
                }
                else {
                    [isPackagedItem addObject:@NO];
                }
                
                if (([itemDic.allKeys containsObject:kProductCategory] && ![itemDic[kProductCategory] isKindOfClass:[NSNull class]])) {
                    productInfoDic[kProductCategory] = itemDic[kProductCategory];
                }
                
                if (([itemDic.allKeys containsObject:kProductSubCategory] && ![itemDic[kProductSubCategory] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[kProductSubCategory] = itemDic[kProductSubCategory];
                }
                if (([itemDic.allKeys containsObject:kProductRange] && ![itemDic[kProductRange] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[kProductRange] = itemDic[kProductRange];
                }
                if (([itemDic.allKeys containsObject:kMeasureRange] && ![itemDic[kMeasureRange] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[kMeasureRange] = itemDic[kMeasureRange];
                }
                
                if (([itemDic.allKeys containsObject:kProductBrand] && ![itemDic[kProductBrand] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[kProductBrand] = itemDic[kProductBrand];
                }
                
                if (([itemDic.allKeys containsObject:kProductModel] && ![itemDic[kProductModel] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[kProductModel] = itemDic[kProductModel];
                }
                
                //changed by Srinivasulu on 12/05/2017....
                
                
                //added by Srinivasulu on 12/05/2017...
                
                
                if (([itemDic.allKeys containsObject:kItemDept] && ![itemDic[kItemDept] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[kItemDept] = itemDic[kItemDept];
                }
                
                if (([itemDic.allKeys containsObject:kItemSubDept] && ![itemDic[kItemSubDept] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[kItemSubDept] = itemDic[kItemSubDept];
                }
                //added by Srinivasulu on 09/10/2017
                else{
                    
                    productInfoDic[kItemSubDept] = @"";
                }
                //upto here on 09/10/2017
                
                
                if (([itemDic.allKeys containsObject:SECTION] && ![itemDic[SECTION] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[SECTION] = itemDic[SECTION];
                }
                
                
                //added by Srinivasulu on 27/06/2017 && 21/08/2017 && 29/08/2018....
                
                if (([itemDic.allKeys containsObject:HSN_CODE] && ![itemDic[HSN_CODE] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[HSN_CODE] = itemDic[HSN_CODE];
                }
                
                if (([itemDic.allKeys containsObject:Pack_Size] && ![itemDic[Pack_Size] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[Pack_Size] = [NSString stringWithFormat:@"%li", [[itemDic valueForKey:Pack_Size] integerValue]];
                }
                
                if (([itemDic.allKeys containsObject:EXPIRY_DATE] && ![itemDic[EXPIRY_DATE] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[EXPIRY_DATE] = itemDic[EXPIRY_DATE];
                }
                
                if (([itemDic.allKeys containsObject:EDIT_PRICE_REASON] && ![itemDic[EDIT_PRICE_REASON] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[EDIT_PRICE_REASON] = itemDic[EDIT_PRICE_REASON];
                }
                
                //upto here on 27/06/2017 && 21/08/2017 && 29/08/2018....
                
                
                //newly added keys....
                //added by Srinivasulu on 06/07/2017....
                
                if (([itemDic.allKeys containsObject:COLOR] && ![itemDic[COLOR] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[COLOR] = itemDic[COLOR];
                }
                
                if (([itemDic.allKeys containsObject:SIZE] && ![itemDic[SIZE] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[SIZE] = itemDic[SIZE];
                }
                
                if (([itemDic.allKeys containsObject:PRODUCT_RANGE] && ![itemDic[PRODUCT_RANGE] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[PRODUCT_RANGE] = itemDic[PRODUCT_RANGE];
                }
                
                if (([itemDic.allKeys containsObject:kMeasureRange] && ![itemDic[kMeasureRange] isKindOfClass:[NSNull class]])) {//MEASUREMENT_RANGE
                    
                    productInfoDic[kMeasureRange] = itemDic[kMeasureRange];
                }
                
                if (([itemDic.allKeys containsObject:ITEM_CATEGORY] && ![itemDic[ITEM_CATEGORY] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[ITEM_CATEGORY] = itemDic[ITEM_CATEGORY];
                }
                
                if (([itemDic.allKeys containsObject:kProductBrand] && ![itemDic[kProductBrand] isKindOfClass:[NSNull class]])) {//kBrand
                    
                    productInfoDic[kProductBrand] = itemDic[kProductBrand];
                }
                
                if (([itemDic.allKeys containsObject:MODEL] && ![itemDic[MODEL] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[MODEL] = itemDic[MODEL];
                }
                
                if (([itemDic.allKeys containsObject:SELL_UOM] && ![itemDic[SELL_UOM] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[SELL_UOM] = itemDic[SELL_UOM];
                }
                
                //upto here on 06/07/2017....
                
                //added by Srinivasulu on 07/07/2017....
                
                if (([itemDic.allKeys containsObject:STYLE] && ![itemDic[STYLE] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[STYLE] = itemDic[STYLE];
                }
                
                if (([itemDic.allKeys containsObject:PATTERN] && ![itemDic[PATTERN] isKindOfClass:[NSNull class]])) {//kBrand
                    
                    productInfoDic[PATTERN] = itemDic[PATTERN];
                }
                
                if (([itemDic.allKeys containsObject:BATCH] && ![itemDic[BATCH] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[BATCH] = itemDic[BATCH];
                }
                
                if (([itemDic.allKeys containsObject:UTILITY] && ![itemDic[UTILITY] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[UTILITY] = itemDic[UTILITY];
                }
                
                
                //added by Srinivasulu on 12/08/2017....
                
                if (([itemDic.allKeys containsObject:PRODUCT_CLASS] && ![itemDic[PRODUCT_CLASS] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[PRODUCT_CLASS] = itemDic[PRODUCT_CLASS];
                }
                
                if (([itemDic.allKeys containsObject:PRODUCT_SUB_CLASS] && ![itemDic[PRODUCT_SUB_CLASS] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[PRODUCT_SUB_CLASS] = itemDic[PRODUCT_SUB_CLASS];
                }
                
                if (([itemDic.allKeys containsObject:STYLE_RANGE] && ![itemDic[STYLE_RANGE] isKindOfClass:[NSNull class]])) {
                    
                    productInfoDic[STYLE_RANGE] = itemDic[STYLE_RANGE];
                }
                
                //upot here on 12/08/2017....
                //upot here on 07/07/2017....
                
                //uncommented by Srinivasulu on 12/05/2017....
                
                //                [productInfoArr addObject:productInfoDic];
                
                // [productInfoArr addObject:productInfoDic];
                
                
                //upto here on 12/05/2017....
                
                
                //upto here on 12/05/2017.....
                
                
                //changed by Srinivasulu on 07/06/2017....
                //commented
                
                
                //                [zeroStockAvailInfoArr addObject:[NSNumber numberWithBool:[[itemDic valueForKey:kZeroStock] boolValue]]];
                
                //changed by Srinivasulu on 23/10/2017....
                //reason scope changed by Sir....
                
                if(!zeroStockCheckAtOutletLevel){
                    
                    [zeroStockAvailInfoArr addObject:@NO];
                }
                else{
                    
                    [zeroStockAvailInfoArr addObject:@([[itemDic valueForKey:kZeroStock] boolValue])];
                }
                
                //upto here on 07/06/2017....
                
                // tax category array....
                
                itemDic[kItemTaxExclusive] = @([[itemDic valueForKey:@"itemTaxable"] boolValue]);
                
                itemDic[EDITED_PRICE] = @([[itemDic valueForKey:EDITED_PRICE] floatValue]);
                
                //  [taxTypeArr addObject:[NSNumber numberWithBool:[[itemDic valueForKey:@"itemTaxable"] boolValue]]];
                
                
                [self getSkuDetailsHandler:itemString productInfo:itemDic];
                
                //changed by Srinivasulu on 13/02/2018....
                
                if (isToCallApplyCampaigns && !isNewReturnBill) {
                    
                    //upto here on 13/02/2018....
                    [self callOffersForScanning:selected_SKID qty:@"1" total:[NSString stringWithFormat:@"%.2f",totalAmt+amount.floatValue] itemPrice:amount];
                }
                
                //added by Srinivasulu on 21/03/2018....
                else
                    [HUD setHidden:YES];
                //upto here on 21/03/2018....
            }
            
            else {
                
                @try {
                    
                    offline = [[OfflineBillingServices alloc]init];
                    priceDic = [[NSMutableArray alloc]init];
                    
                    //modified by sonali for multiple quantity
                    
                    //  for (int i=0; i<[[itemDic valueForKey:@"quantity"] intValue]; i++) {
                    
                    NSDictionary *itemDic_ = [offline getProductDetails:[NSString stringWithFormat:@"%@",itemDic[@"sku_id"]] isEanSearch:NO];
                    
                    if (itemDic_.count>0) {
                        
                        NSMutableArray *taxRate = [offline getTaxForSku:[NSString stringWithFormat:@"%@",[itemDic_ valueForKey:@"taxCode"]]];
                        
                        NSString *itemString = @"";
                        [isPriceEditableArr addObject:@([[itemDic_ valueForKey:@"editable"] intValue])];
                        
                        //added by Srinivausulu on 06/03/2018....
                        
                        if ([itemDic.allKeys containsObject:TRACKING_REQUIRED] && ![[itemDic valueForKey:TRACKING_REQUIRED] isKindOfClass:[NSNull class]]) {
                            
                            [isItemTrackingRequiredArr addObject:@([[itemDic valueForKey:TRACKING_REQUIRED] intValue])];
                        }
                        else {
                            
                            [isItemTrackingRequiredArr addObject:@0];
                        }
                        
                        //upto here on 06/03/2018....
                        
                        float itemUnitPrice = 0;
                        
                        if ([[itemDic valueForKey:EDITED_PRICE] floatValue] > 0) {
                            
                            itemUnitPrice = [[itemDic valueForKey:EDITED_PRICE] floatValue];
                            [editedPriceArr addObject:@([[itemDic valueForKey:EDITED_PRICE] floatValue])];
                            
                        }
                        else {
                            
                            itemUnitPrice = [[itemDic valueForKey:MRP_Price] floatValue];
                            
                        }
                        
                        itemDic[EDITED_PRICE] = @([[itemDic valueForKey:EDITED_PRICE] floatValue]);
                        
                        
                        // [itemDiscountArr addObject:[NSNumber numberWithFloat:[[itemDic valueForKey:@"itemDiscountStr"] floatValue]]];
                        [itemDiscountDescArr addObject:[itemDic valueForKey:@"itemDiscountDesc"]];
                        
                        itemDic[kItemTaxExclusive] = @([[itemDic_ valueForKey:@"itemTaxExclusive"] boolValue]);
                        
                        itemDic[@"itemDiscount"] = @([[itemDic valueForKey:@"itemDiscountStr"] floatValue]);
                        
                        // [taxTypeArr addObject:[NSNumber numberWithBool:[[itemDic_ valueForKey:@"itemTaxExclusive"] boolValue]]];
                        
                        //taxes info....
                        
                        NSMutableArray *arr = [NSMutableArray new];
                        
                        //                        if ([[bill_details objectForKey:@"billingItemTaxes"] count] > index) {
                        //
                        //                            NSDictionary *dic = [[bill_details objectForKey:@"billingItemTaxes"] objectAtIndex:index];
                        //                            NSMutableDictionary *mutableDic = [dic mutableCopy];
                        //
                        //                            [mutableDic setObject:[dic valueForKey:@"tax_type"] forKey:@"taxType"];
                        //                            [mutableDic setObject:[dic valueForKey:@"tax_rate"] forKey:@"taxRate"];
                        //
                        //                            [arr addObject:mutableDic];
                        //                        }
                        
                        for (NSDictionary *dic in bill_details[@"billingItemTaxes"]) {
                            
                            NSMutableDictionary *mutableDic = [dic mutableCopy];
                            
                            if ([[dic valueForKey:@"plu_code"] isEqualToString:[itemDic valueForKey:@"pluCode"]]) {
                                
                                mutableDic[@"taxType"] = [dic valueForKey:@"tax_type"];
                                mutableDic[@"taxRate"] = [dic valueForKey:@"tax_rate"];
                                
                                [arr addObject:mutableDic];
                                
                            }
                        }
                        
                        //changed by Srinivasulu on 12/07/2017....
                        itemDic[@"tax"] = arr;
                        
                        
                        itemDic[@"tax"] = taxRate;
                        
                        
                        //upto here on 12/07/2017....
                        
                        
                        priceDic = [offline getLocalPriceLists:[NSString stringWithFormat:@"%@",itemDic[@"sku_id"]]];
                        NSMutableArray *tempPriceDic = [priceDic mutableCopy];
                        for (NSDictionary *dic in tempPriceDic) {
                            if (![[dic valueForKey:PLU_CODE] isEqualToString:[itemDic valueForKey:@"pluCode"]]) {
                                [priceDic removeObject:dic];
                            }
                            
                        }
                        itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@",itemDic_[@"description"],@"#",itemDic_[@"description"],@"#",[itemDic_[@"quantity"] floatValue],@"#",itemUnitPrice, @"#", [NSString stringWithFormat:@"%@",itemDic_[@"taxCode"]]];
                        if (taxRate.count>0) {
                            
                            // [taxArr addObject:taxRate];
                            itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[taxRate[0] valueForKey:@"taxRate"] floatValue]];
                        }
                        else {
                            
                            //[taxArr addObject:taxRate];
                            itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
                        }
                        
                        itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[itemDic valueForKey:@"quantity"]];
                        
                        if (priceDic.count >1) {
                            
                            [HUD setHidden:YES];
                            for (int i=0; i<priceDic.count; i++) {
                                NSString *tax_code = [itemString componentsSeparatedByString:@"#"][4];
                                NSString *desc = [itemString componentsSeparatedByString:@"#"][1];
                                NSMutableDictionary *dic = [priceDic[i] mutableCopy];
                                [dic setValue:tax_code forKey:@"taxCode"];
                                [dic setValue:taxRate forKey:@"tax"];
                                [dic setValue:desc forKey:@"description"];
                                priceDic[i] = dic;
                            }
                            transparentView.hidden = NO;
                            [priceTable reloadData];
                            SystemSoundID    soundFileObject1;
                            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"popup_tune" withExtension: @"mp3"];
                            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                            
                            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                            AudioServicesPlaySystemSound (soundFileObject1);
                            
                        }
                        else {
                            if(priceDic.count == 1) {
                                NSMutableDictionary *dic = [priceDic[0] mutableCopy];
                                itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@",itemDic_[@"description"],@"#",itemDic_[@"description"],@"#",[itemDic_[@"quantity"] floatValue],@"#",itemUnitPrice, @"#", [NSString stringWithFormat:@"%@",itemDic_[@"taxCode"]]];
                                if (taxRate.count>0) {
                                    
                                    itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[taxRate[0] valueForKey:@"taxRate"] floatValue]];
                                }
                                else {
                                    
                                    itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
                                }
                                itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[dic valueForKey:PLU_CODE]];
                                itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",itemUnitPrice];
                                itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[itemDic valueForKey:@"quantity"] floatValue]];
                                selectedPluCode = [[dic valueForKey:PLU_CODE] copy];
                                
                            }
                            //                            if ([[[itemString componentsSeparatedByString:@"#"] objectAtIndex:2] intValue]>=0) {
                            
                            if (priceDic.count > 0) {
                                selected_SKID = itemDic[@"sku_id"];
                                selected_desc = [itemString componentsSeparatedByString:@"#"][1];
                                selected_price = [[itemString componentsSeparatedByString:@"#"][3] copy];
                                
                                [self getSkuDetailsHandler:itemString productInfo:itemDic];
                                
                            }
                            else {
                                [HUD setHidden:YES];
                                [MBProgressHUD hideHUDForView:self.view animated:YES];
                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                                [alert show];
                                
                            }
                        }
                    }
                    else {
                        
                        [HUD setHidden:YES];
                        [MBProgressHUD hideHUDForView:self.view animated:YES];
                        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        break;
                    }
                    
                    //                }
                    
                    
                }
                @catch (NSException *exception) {
                    NSLog(@"%@",exception);
                    [HUD setHidden:YES];
                    [MBProgressHUD hideHUDForView:self.view animated:YES];
                    UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                    
                }
            }
            
            
            
        }
        
        
        if (cartItem.count>0) {
            float totalPrice = 0.0f;
            for (int j = 0; j < cartItem.count; j++) {
                
                NSArray *temp = [cartItem[j] componentsSeparatedByString:@"#"];
                //changed by srinivasulu on 16/01/2017....
                totalPrice += ([temp[4] floatValue]*[temp[5] floatValue]);
                
                //upto here on 16/01/2017....
                [cartTable reloadData];
                [self updateValues];
                [self goToBottom];
            }
            if (isOfflineService) {
                //changed by Srinivasulu on 13/02/2018....
                
                if (isToCallApplyCampaigns && !isNewReturnBill)
                    
                    //upto here on 13/02/2018....
                    [self callOffersForScanning:@"" qty:@"1" total:[NSString stringWithFormat:@"%.2f",totalPrice] itemPrice:@"100.0"];
            }
        }
        
        //modified by sonali
        
        billIDValue = [self.draftBillID copy];
        self.draftBillID = nil;
        
        //added by Srinivasulu on 07/08/2017 && 12/08/2017 && 28/06/2018....
        
        customerGstinStr = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:CUSTOMER_GSTIN] defaultReturn:@""];
        
        
        if ( isOfflineService ) {
            
            BOOL allowReturn = true;
            
            if(isOfflineService && [[bill_details valueForKey:SYNC_STATUS] isEqualToString:SUCCESS])
                allowReturn = false;
            
            else if(isOfflineService && [[bill_details valueForKey:SYNC_STATUS] isEqualToString:ERROR])
                allowReturn = false;
            if(!allowReturn){
                
                //            if([[bill_details valueForKey:SYNC_STATUS] isEqualToString:STATUS] || [[bill_details valueForKey:SYNC_STATUS] caseInsensitiveCompare:ERROR] ){
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:1];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:2];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:3];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:5];
                [segmentedControl setEnabled:FALSE forSegmentAtIndex:6];
            }
        }
        
        
        orderShipmentCharges = [[self checkGivenValueIsNullOrNil:[bill_details valueForKey:SHIPPING_CHARGES] defaultReturn:@"0.00"] floatValue];
        //upto here on 07/08/2017 && 12/08/2017 && 28/06/2018....
    } @catch (NSException *exception) {
        
        [HUD setHidden:YES];
        NSLog(@"--exception in getBillingDeatilsHandler--%@",exception);
    } @finally {
        
    }
    
}

-(IBAction)radioAction:(id)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    if ((UIButton *)sender == radioBtn1 ) {
        
        // if (!menuStatus) {
        //            customerEmail.text = @"";
        //            customerPhNo.text = @"";
        //        }
        deliveryType = @"TA";
        radioBtn1.tag = 1;
        [radioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        [radioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        
        if( radioBtn3.tag == 4){
            deliveryType = @"TA-CB";
            
        }
        
        
    }
    else if ((UIButton *)sender == radioBtn2 ) {
        deliveryType = @"DD";
        radioBtn1.tag = 0;
        [radioBtn1 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        [radioBtn2 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        
        if( radioBtn3.tag == 4){
            deliveryType = @"DD-CB";
            
        }
        
        
        
        //Play Audio for button touch....
        AudioServicesPlaySystemSound (soundFileObject);
        
    }
    else{
        
        //        [radioBtn1 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        //        [radioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        //        [radioBtn3 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        
        
        
        
    }
    
    
    
}

-(IBAction)discRadioAction:(id)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    if ((UIButton *)sender == isFlatDiscBtn) {
        [isFlatDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        [isPercentileDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        isFlatDisc = TRUE;
        percentageDiscTxt.text = @"";
        percentageDiscValTxt.text = @"";
        percentageDiscTxt.userInteractionEnabled = false;
        newPriceField.userInteractionEnabled = TRUE;
        [newPriceField becomeFirstResponder];
        
    }
    else{
        
        
        [isFlatDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        [isPercentileDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        isFlatDisc = false;
        newPriceField.text = @"";
        percentageDiscTxt.userInteractionEnabled = TRUE;
        newPriceField.userInteractionEnabled = FALSE;
        [percentageDiscTxt becomeFirstResponder];
        
    }
}


-(IBAction)cardRadioAction:(id)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    if ((UIButton *)sender == cardradioBtn1 ) {
        
        // if (!menuStatus) {
        //            customerEmail.text = @"";
        //            customerPhNo.text = @"";
        //        }
        cardPaymentSelection = @"POS";
        
        //added by Srinivasulu on 21/11/2017....
        //reason -- removing  the existing action.... means resetting existing....
        
        [payBtn removeTarget:nil action:NULL forControlEvents:UIControlEventAllEvents];
        
        //upto here on 21/11/2017....
        
        [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
        [payBtn setTitle:@"Continue" forState:UIControlStateNormal];
        cardradioBtn1.tag = 1;
        [cardradioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        [cardradioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
    }
    else{
        cardPaymentSelection = @"Mobile POS";
        
        //added by Srinivasulu on 21/11/2017....
        //reason -- removing  the existing action.... means resetting existing....
        
        [payBtn removeTarget:nil action:NULL forControlEvents:UIControlEventAllEvents];
        
        //upto here on 21/11/2017....
        
        [payBtn addTarget:self action:@selector(cardPaymentCall) forControlEvents:UIControlEventTouchUpInside];
        cardradioBtn1.tag = 0;
        [cardradioBtn1 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        [cardradioBtn2 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        
        //Play Audio for button touch....
        AudioServicesPlaySystemSound (soundFileObject);
    }
}


-(void) buttonClicked1:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    [self.popOver dismissPopoverAnimated:YES];
    
    if (sender.tag == 0) {
        
        [self.popOver dismissPopoverAnimated:YES];
        doorDeliveryType = @"PP";
        
    }
    else {
        [self.popOver dismissPopoverAnimated:YES];
        //doorDeliveryType = @"COD";
        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Service not available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
    }
    
}


-(void) openBarcode{
    
    NSLog(@"-******-------********---/n1111111111111/n222222222222222/n333333333333/n444444444444444/n555555555555555/n66666666666/n77777777777777/n888888888888888/n99999999999999/-----**--------*******----");
    
    [self barcodeScanner:barcodeBtn];
}

- (void) barcodeScanner:(id)sender {
    
    
    NSLog(@"------------/n1111111111111/n222222222222222/n333333333333/n444444444444444/n555555555555555/n66666666666/n77777777777777/n888888888888888/n99999999999999/-----------------------------");
    
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    BillField.text = @"";
    [BillField resignFirstResponder];
    skListTable.hidden = YES;
    
    barcodeBtn.tag = 1;
    
    [HUD setHidden:NO];
    
    @try {
        
        //        AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
        //        if(authStatus == AVAuthorizationStatusAuthorized)
        //        {
        [HUD setHidden:YES];
        
        //            ZXingWidgetController *widController =
        //            [[ZXingWidgetController alloc] initWithDelegate:self showCancel:YES OneDMode:YES];
        //
        //
        //            NSMutableSet *readers = [[NSMutableSet alloc ] init];
        //
        //            MultiFormatOneDReader* reader = [[MultiFormatOneDReader alloc] init];
        //            [readers addObject:reader];
        //
        //            //        if ([reader canAddInput: widController])
        //            //        {
        //            //            [session addInput: backCameraDeviceInput];
        //            //        }
        //
        //            widController.readers = readers;
        //
        //
        //           // CATransform3D transform =  CATransform3DMakeRotation(90, 0, 0, 1.0);
        //            CGAffineTransform transform = CGAffineTransformMakeRotation(0);
        //            widController.overlayView.transform =transform;
        //            widController.overlayView.oneDMode = YES;
        //          //  NSLog(@"%f%f",widController.overlayView.frame.size.height,widController.overlayView.frame.size.width);
        ////            if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
        ////            widController.overlayView.frame = CGRectMake(0, 0, self.view.frame.size.height, self.view.frame.size.width);
        ////
        ////
        ////            }
        //
        //
        //            NSLog(@"%f%f",widController.overlayView.frame.size.height,widController.overlayView.frame.size.width);
        //
        //            [widController shouldAutorotate];
        //       //  UIInterfaceOrientation orientation  = widController.interfaceOrientation ;
        //           // widController.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
        //
        //            [self presentViewController:widController animated:YES completion:NULL];
        //        }
        //        else
        //        {
        //            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted)
        //             {
        //                 if (granted)
        //                 {
        //                     [HUD setHidden:YES];
        //
        //                     ZXingWidgetController *widController =
        //                     [[ZXingWidgetController alloc] initWithDelegate:self showCancel:YES OneDMode:YES];
        //
        //                     NSMutableSet *readers = [[NSMutableSet alloc ] init];
        //
        //
        //
        //                     MultiFormatOneDReader* reader = [[MultiFormatOneDReader alloc] init];
        //                     [readers addObject:reader];
        //
        //                     //        if ([reader canAddInput: widController])
        //                     //        {
        //                     //            [session addInput: backCameraDeviceInput];
        //                     //        }
        //
        //                     widController.readers = readers;
        //
        //                     //    NSBundle *mainBundle = [NSBundle mainBundle];
        //                     //    widController.soundToPlay =
        //                     //    [NSURL fileURLWithPath:[mainBundle pathForResource:@"beep-beep" ofType:@"aiff"] isDirectory:NO];
        //
        //                     [self presentViewController:widController animated:YES completion:NULL];
        //                 }
        //                 else
        //                 {          [HUD setHidden:YES];
        //
        //                     UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable camera permissions for the app" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        //                     [alert show];
        //                     NSLog(@"User Denied");
        //                 }
        //             }];
        //        }
        
        
    }
    @catch (NSException *exception) {
        
        
    }
    @finally {
        [HUD setHidden:YES];
        
        
    }
    
    
    
    //[widController release];
    
}

- (void) giftBarcodeScanner:(id)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    giftScannerBtn.tag = 2;
    //    ZXingWidgetController *widController = [[ZXingWidgetController alloc] initWithDelegate:self showCancel:YES OneDMode:YES] ;
    //    NSMutableSet *readers = [[NSMutableSet alloc ] init];
    //
    //#if ZXQR
    //    //QRCodeReader* qrcodeReader = [[QRCodeReader alloc] init];
    //    //[readers addObject:qrcodeReader];
    //    //[qrcodeReader release];
    //    MultiFormatOneDReader *reader = [[MultiFormatOneDReader alloc] init] ;
    //    [readers addObject:reader];
    //    //[reader release];
    //#endif
    //
    //    widController.readers = readers;
    //
    //    //    NSBundle *mainBundle = [NSBundle mainBundle];
    //    //    widController.soundToPlay =
    //    //    [NSURL fileURLWithPath:[mainBundle pathForResource:@"beep-beep" ofType:@"aiff"] isDirectory:NO];
    //    //[self presentModalViewController:widController animated:YES];   // deprecated in ios 6.0
    //    [self presentViewController:widController animated:YES completion:NULL];
    
    
}

-(UIView*)CommomOverlay{
    UIView* view = [[UIView alloc] init];
    UIImageView *FrameImg = [[UIImageView alloc] init];
    FrameImg.image = [UIImage imageNamed:@"technolabslogo.png"];
    
    UIButton *cancelButton  = [[UIButton alloc] init];
    [cancelButton setImage:[UIImage imageNamed:@"closebutton.png"] forState:UIControlStateNormal];
    [cancelButton addTarget:self action:@selector(closeBarcodeView) forControlEvents:UIControlEventTouchUpInside];
    
    UIImageView *technolabsLabel = [[UIImageView alloc] init];
    technolabsLabel.image = [UIImage imageNamed:@"technolabslogo1.png"];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        view.frame = CGRectMake(0,0,760.0,1024);
        FrameImg.frame = CGRectMake(670.0,20.0,60.0,190.0);
        cancelButton.frame = CGRectMake(670.0, 900.0, 50.0, 50.0);
        technolabsLabel.frame = CGRectMake(-90.0, 20.0, 300.0, 300.0);
    }
    else{
        view.frame = CGRectMake(0,0,320,480);
        FrameImg.frame = CGRectMake(260.0,10.0,50.0,130.0);
        cancelButton.frame = CGRectMake(270.0, 415.0, 40.0, 40.0);
        technolabsLabel.frame = CGRectMake(-60.0, 10.0, 180.0, 200.0);
    }
    [view addSubview:FrameImg];
    [view addSubview:technolabsLabel];
    [view addSubview:cancelButton];
    return view;
}

-(void)closeBarcodeView:(NSTimer *) timer{
    
    NSLog(@"-******-------********---/n1111111111111/n222222222222222/n333333333333/n444444444444444/n555555555555555/n66666666666/n77777777777777/n888888888888888/n99999999999999/-----**--------*******----");
    
    
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)tseries:(PowaTSeries *)tseries deviceConnectedAtPort:(NSUInteger)port;
{
    NSString *string = [NSString stringWithFormat:@"Connected device in port: %i", (int)port];
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Device Connected"
                                                        message:string
                                                       delegate:self
                                              cancelButtonTitle:@"Cancel"
                                              otherButtonTitles:nil, nil];
    [alertView show];
}

- (void)tseries:(PowaTSeries *)tseries deviceDisconnectedAtPort:(NSUInteger)port
{
    NSString *string = [NSString stringWithFormat:@"Disconnected device in port: %i", (int)port];
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Device Disconnected"
                                                        message:string
                                                       delegate:self
                                              cancelButtonTitle:@"Cancel"
                                              otherButtonTitles:nil, nil];
    [alertView show];
}

- (void)tseriesDidFinishInitializing:(PowaTSeries *)tseries
{
    NSString *string = [NSString stringWithFormat:@"Initialized"];
    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Init"
                                                        message:string
                                                       delegate:self
                                              cancelButtonTitle:@"Cancel"
                                              otherButtonTitles:nil, nil];
    [alertView show];
}

- (void)peripheral:(id <PowaPeripheral>)peripheral connectionStateChanged:(PowaPeripheralConnectionState)connectionState
{
    NSString *string = nil;
    
    
    if(connectionState == PowaPeripheralConnectionStateConnected)
    {
        string = @"Connected";
        powaStatusLblVal.textColor = [UIColor colorWithRed:0.0/255.0 green:102.0/255.0 blue:0.0/255.0 alpha:1.0];
        
    }
    else
    {
        string = @"Disconnected";
        powaStatusLblVal.textColor = [UIColor redColor];
    }
    
    powaStatusLblVal.text = string;
    
}

#pragma mark - PowaScannerObserver

// Commented by roja on 17/10/2019.. // reason :- (scanner:  scannedBarcodeData:) method is not using anywhere of this class...
// At the time of converting SOAP call's to REST

//- (void)scanner:(id<PowaScanner>)scanner scannedBarcodeData:(NSData *)data {
//
//    @try {
//
//
//
//        //added by Srinivasulu on 19/01/2017 && 03/07/2018....
//        if(!isItemScanned){
//            isItemScanned = true;
//            startIndexint_ = 0;
//            //upto here on 19/01/2017 && 03/07/2018....
//
//            NSString * barcodeString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
//            // barcodeString = @"#W03569001000002200";
//            // barcodeString = @"0001";
//            selected_SKID= [barcodeString copy];
//            if (barcodeString.length>0) {
//
//                //            HUD.dimBackground = YES;
//                //            HUD.labelText = @"Please Wait..";
//                //            [HUD setHidden:NO];
//
//                if (segment_index == 5) {
//
//                    if ( [giftTypeString isEqualToString: @"loyaltycard"]) {
//                        CheckWifi *wifi = [[CheckWifi alloc]init];
//                        BOOL status = [wifi checkWifi];
//                        if (status) {
//
//                            giftNo.text = barcodeString;
//
//                            HUD.labelText = @"Wait..";
//                            [HUD setHidden:NO];
//
//
//                            LoyaltycardServiceSoapBinding *skuService = [LoyaltycardServiceSvc LoyaltycardServiceSoapBinding] ;
//
//                            LoyaltycardServiceSvc_getissuedLoyaltycard *getSkuid = [[LoyaltycardServiceSvc_getissuedLoyaltycard alloc] init];
//
//
//                            NSArray *loyaltyKeys = @[@"loyaltyCardNumber", @"requestHeader", @"locations"];
//
//                            NSArray *loyaltyObjects = @[barcodeString,[RequestHeader getRequestHeader], presentLocation];
//                            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                            NSError * err_;
//                            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
//                            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//
//                            getSkuid.loyaltyCardNumber = loyaltyString;
//                            @try {
//
//                                LoyaltycardServiceSoapBindingResponse *response = [skuService getissuedLoyaltycardUsingParameters:(LoyaltycardServiceSvc_getissuedLoyaltycard *)getSkuid];
//                                NSArray *responseBodyParts = response.bodyParts;
//
//                                for (id bodyPart in responseBodyParts) {
//                                    if ([bodyPart isKindOfClass:[LoyaltycardServiceSvc_getissuedLoyaltycardResponse class]]) {
//                                        LoyaltycardServiceSvc_getissuedLoyaltycardResponse *body = (LoyaltycardServiceSvc_getissuedLoyaltycardResponse *)bodyPart;
//                                        printf("\nresponse=%s",(body.return_).UTF8String);
//
//                                        [self getLoyalcardDetailsHandler:body.return_];
//                                    }
//                                }
//                            }
//                            @catch (NSException *exception) {
//                                //added by Srinivasulu on 19/01/2017....
//                                isItemScanned = false;
//                                //upto here on 19/01/2017....
//
//                                NSLog(@"%@",exception);
//
//                            }
//
//
//                        }
//                        else {
//
//                            //added by Srinivasulu on 19/01/2017....
//                            isItemScanned = false;
//                            //upto here on 19/01/2017....
//
//                            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                            [alert show];
//
//                        }
//
//                    }
//                    else if ([giftTypeString isEqualToString:@"coupon"]) {
//
//                        CheckWifi *wifi = [[CheckWifi alloc]init];
//                        BOOL status = [wifi checkWifi];
//                        if (status) {
//                            giftNo.text = barcodeString;
//                            //get gift coupon details....
//
//                            GiftCouponServicesSoapBinding *skuService = [GiftCouponServicesSvc GiftCouponServicesSoapBinding] ;
//
//                            GiftCouponServicesSvc_getCouponDetails *coupon = [[GiftCouponServicesSvc_getCouponDetails alloc] init];
//
//
//                            NSArray *loyaltyKeys = @[@"couponCode", @"requestHeader"];
//
//                            NSArray *loyaltyObjects = @[giftNo.text,[RequestHeader getRequestHeader]];
//                            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                            NSError * err_;
//                            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
//                            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//
//
//                            coupon.couponDetails = loyaltyString;
//                            @try {
//
//                                GiftCouponServicesSoapBindingResponse *response = [skuService getCouponDetailsUsingParameters:coupon];
//                                NSArray *responseBodyParts = response.bodyParts;
//                                for (id bodyPart in responseBodyParts) {
//
//                                    if ([bodyPart isKindOfClass:[GiftCouponServicesSvc_getCouponDetailsResponse class]]) {
//                                        GiftCouponServicesSvc_getCouponDetailsResponse *body = (GiftCouponServicesSvc_getCouponDetailsResponse *)bodyPart;
//                                        printf("\nresponse=%s",(body.return_).UTF8String);
//                                        [self getCouponDetailsHandler:body.return_];
//                                    }
//                                }
//                            }
//                            @catch (NSException *exception) {
//
//
//                                //added by Srinivasulu on 19/01/2017....
//                                isItemScanned = false;
//                                //upto here on 19/01/2017....
//
//
//
//                                [HUD setHidden:YES];
//                                NSLog(@"Exception %@",exception.name);
//                            }
//                        }
//                        else {
//
//                            //added by Srinivasulu on 19/01/2017....
//                            isItemScanned = false;
//                            //upto here on 19/01/2017....
//
//                            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                            [alert show];
//                        }
//
//                    }
//                    else if ([giftTypeString isEqualToString:@"giftvoucher"]){
//
//                        CheckWifi *wifi = [[CheckWifi alloc]init];
//                        BOOL status = [wifi checkWifi];
//                        if (status) {
//
//                            giftNo.text = barcodeString;
//
//                            GiftVoucherServicesSoapBinding *skuService = [GiftVoucherServices GiftVoucherServicesSoapBinding] ;
//
//                            GiftVoucherServices_getGiftVoucherDetails *voucher = [[GiftVoucherServices_getGiftVoucherDetails alloc] init];
//
//
//                            NSArray *loyaltyKeys = @[@"voucherCode", @"requestHeader"];
//
//                            NSArray *loyaltyObjects = @[giftNo.text,[RequestHeader getRequestHeader]];
//                            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                            NSError * err_;
//                            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
//                            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//
//
//                            voucher.giftVoucherDetails = loyaltyString;
//                            @try {
//
//                                GiftVoucherServicesSoapBindingResponse *response = [skuService getGiftVoucherDetailsUsingParameters:voucher];
//                                NSArray *responseBodyParts = response.bodyParts;
//                                for (id bodyPart in responseBodyParts) {
//                                    if ([bodyPart isKindOfClass:[GiftVoucherServices_getGiftVoucherDetailsResponse class]]) {
//                                        GiftVoucherServices_getGiftVoucherDetailsResponse *body = (GiftVoucherServices_getGiftVoucherDetailsResponse *)bodyPart;
//                                        printf("\nresponse=%s",(body.return_).UTF8String);
//                                        [self getVoucherDetailsHandler:body.return_];
//                                    }
//                                }
//                            }
//                            @catch (NSException *exception) {
//
//                                //added by Srinivasulu on 19/01/2017....
//                                isItemScanned = false;
//                                //upto here on 19/01/2017....
//
//
//
//                                [HUD setHidden:YES];
//                                NSLog(@"Exception %@",exception.name);
//                            }
//
//                        }
//                        else {
//
//                            //added by Srinivasulu on 19/01/2017....
//                            isItemScanned = false;
//                            //upto here on 19/01/2017....
//
//                            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                            [alert show];
//                        }
//
//                    }
//                }
//                else if ([barcodeString containsString:@"#W"] || [barcodeString containsString:@"#P"]){
//                    @try {
//                        offerLabel.text = barcodeString;
//                        selected_SKID = [[barcodeString substringWithRange:NSMakeRange(2, 6)] copy];
//
//                        NSString *qty = [barcodeString substringWithRange:NSMakeRange(8, 5)];
//                        NSString *vegQty = [NSString stringWithFormat:@"%.3f",qty.floatValue/1000];
//                        if ([barcodeString containsString:@"#P"]) {
//                            vegQty = [NSString stringWithFormat:@"%.1f",qty.floatValue];
//                        }
//                        NSString *price = [barcodeString substringWithRange:NSMakeRange(14, 5)];
//                        NSString *price1 = [NSString stringWithFormat:@"%.2f",price.floatValue/100];
//
//                        NSMutableDictionary *productInfoDic = [NSMutableDictionary new];
//
//                        //added by Srinivasulu on 28/08/2018....
//                        Boolean callOnline = true;
//                        NSMutableDictionary *itemDic = [NSMutableDictionary new];
//
//                        if (!(!isOfflineService && (!isHybirdCallFailed || !isHybirdMode))){
//
//                            offline = [[OfflineBillingServices alloc]init];
//                            priceDic = [[NSMutableArray alloc]init];
//
//
//                            if (isBarcodeType) {
//                                itemDic = [[offline getProductDetails:[NSString stringWithFormat:@"%@",selected_SKID] isEanSearch:YES] mutableCopy];
//
//                            }
//                            else {
//                                itemDic = [[offline getProductDetails:[NSString stringWithFormat:@"%@",selected_SKID] isEanSearch:NO] mutableCopy];
//
//                            }
//
//                            if (itemDic.count>0){
//                                callOnline = false;
//                            }
//                            else{
//                                isHybirdCallFailed = false;
//                            }
//                        }
//
//                        //                        if (!isOfflineService && (!isHybirdCallFailed || !isHybirdMode)) {
//
//                        if (callOnline) {
//                            @try {
//
//                                NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation"];
//                                NSArray *objects = @[selected_SKID,[RequestHeader getRequestHeader],presentLocation];
//
//                                NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
//
//                                NSError * err;
//                                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
//                                NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//                                NSString *serviceUrl = [WebServiceUtility getURLFor:GET_SKU_DETAILS];
//                                serviceUrl = [NSString stringWithFormat:@"%@%@",serviceUrl,salesReportJsonString];
//                                serviceUrl = [WebServiceUtility addPercentEscapesFor:serviceUrl];
//
//                                NSURL *url = [NSURL URLWithString:serviceUrl];
//                                NSMutableURLRequest  *request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy
//                                                                                    timeoutInterval:60.0];
//                                request.HTTPMethod = @"GET";
//                                [NSURLConnection sendAsynchronousRequest:request
//                                                                   queue:[NSOperationQueue mainQueue]
//                                                       completionHandler:^(NSURLResponse *response,
//                                                                           NSData *data, NSError *connectionError)
//                                 {
//                                     if (data.length > 0 && connectionError == nil)
//                                     {
//                                         NSDictionary *billingResponse = [NSJSONSerialization JSONObjectWithData:data
//                                                                                                         options:0
//                                                                                                           error:NULL];
//
//                                         if (![[billingResponse valueForKey:@"skuLists"] isKindOfClass:[NSNull class]]) {
//                                             priceDic = [[NSMutableArray alloc]init];
//
//                                             NSArray *price_arr = [billingResponse valueForKey:@"skuLists"];
//                                             for (int i=0; i<price_arr.count; i++) {
//
//                                                 NSDictionary *json = price_arr[i];
//                                                 [priceDic addObject:json];
//                                             }
//                                             NSArray *tempTaxArray = [priceDic[0] valueForKey:@"tax"];
//                                             NSString *itemString = @"";
//                                             if (tempTaxArray.count > 0) {
//                                                 itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",priceDic[0][@"quantity"],@"#",price1,@"#",[NSString stringWithFormat:@"%.2f",vegQty.floatValue], @"#", [NSString stringWithFormat:@"%@",[priceDic[0][@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[priceDic[0][@"tax"][0] valueForKey:@"taxRate"] doubleValue]]];
//                                             }
//                                             else {
//                                                 itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",priceDic[0][@"quantity"],@"#",price1,@"#",[NSString stringWithFormat:@"%.2f",vegQty.floatValue], @"#", [NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00]];
//                                             }
//                                             itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[priceDic[0] valueForKey:PLU_CODE]];
//                                             itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[priceDic[0] valueForKey:@"price"] floatValue]];
//
//                                             if ([cartTotalItems containsObject:itemString]) {
//
//                                                 if (![cartItem containsObject:itemString]) {
//
//                                                     //added by Srinivasulu on 19/01/2017....
//                                                     isItemScanned = false;
//                                                     //upto here on 19/01/2017....
//
//                                                     [HUD setHidden:YES];
//
//                                                     UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                                     [alert show];
//                                                     return;
//                                                 }
//
//
//                                                 //                                             UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product already added to the cart" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                                 //                                             [alert show];
//                                                 //                                             return;
//
//                                             }
//
//
//                                             //                                         if ([[[priceDic objectAtIndex:0] objectForKey:@"quantity"] floatValue] > 0) {
//                                             selected_SKID = [NSString stringWithFormat:@"%@",priceDic[0][@"skuId"]];
//
//
//                                             selected_desc = [[NSString stringWithFormat:@"%@",priceDic[0][@"description"]] copy];
//                                             selected_price = [price1 copy];
//                                             selectedPluCode = [[priceDic[0] valueForKey:PLU_CODE] copy];
//                                             [taxArr addObject:priceDic[0][@"tax"]];
//                                             [cartItemDetails addObject:vegQty];
//                                             [cartItem addObject:itemString];
//                                             [cartTotalItems addObject:itemString];
//                                             [isVoidedArray addObject:@NO];
//                                             [isPriceEditableArr addObject:@0];
//
//                                             //added by Srinivausulu on 06/03/2018 && 03/09/2018....
//
//                                             if ([[priceDic[0] allKeys] containsObject:TRACKING_REQUIRED] && ![[priceDic[0] valueForKey:TRACKING_REQUIRED] isKindOfClass:[NSNull class]]) {
//
//                                                 [isItemTrackingRequiredArr addObject:@([[priceDic[0] valueForKey:TRACKING_REQUIRED] intValue])];
//                                             }
//                                             else {
//
//                                                 [isItemTrackingRequiredArr addObject:@0];
//                                             }
//
//                                             if ([[priceDic[0] allKeys] containsObject:ITEM_TYPE_] && ![[[priceDic[0] allKeys] valueForKey:ITEM_TYPE_] isKindOfClass:[NSNull class]]) {
//
//                                                 productInfoDic[ITEM_TYPE_] = [priceDic[0] valueForKey:ITEM_TYPE_];
//                                                 if([[[priceDic[0] allKeys] valueForKey:ITEM_TYPE_] caseInsensitiveCompare:MEMBER_SHIP] == NSOrderedSame){
//                                                     isMemberShipItemAdded = true;
//                                                 }
//                                                 // added by roja on 29/07/2019..
//                                                 else if ([[[priceDic[0] allKeys] valueForKey:ITEM_TYPE_] caseInsensitiveCompare:WALLET] == NSOrderedSame){
//
//                                                     isWalletItemAdded = true;
//                                                 }  // upto here added by roja on 29/07/2019..
//                                             }
//
//                                             //upto here on 06/03/2018 && 03/09/2018....
//
//                                             [editedPriceArr addObject:@"0.0"];
//                                             [isVegetable addObject:selected_SKID];
//                                             [itemPromoFlagArr addObject:@"N"];
//
//                                             if (!isItemUnVoided) {
//
//
//                                                 [itemDiscountArr addObject:@"0.00"];
//                                                 [itemDiscountDescArr addObject:@""];
//
//
//                                                 //added by Srinivasulu on 28/09/2017....
//
//                                                 [isItemFlatDiscountedArr addObject:@YES];
//
//                                                 //upto here on 28/09/2017....
//
//
//                                                 [itemScanCode addObject:selected_SKID];
//                                                 [manufacturedItemsArr addObject:@([priceDic[0][kIsManuFacturedItem] boolValue])];
//                                                 if ([[priceDic[0] allKeys] containsObject:kPackagedType] && ![priceDic[0][kPackagedType] isKindOfClass:[NSNull class]]) {
//
//                                                     [isPackagedItem addObject:@([priceDic[0][kPackagedType] boolValue])];
//                                                 }
//                                                 else {
//                                                     [isPackagedItem addObject:@NO];
//
//                                                 }
//                                                 if (([[priceDic[0] allKeys] containsObject:kProductCategory] && ![priceDic[0][kProductCategory] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kProductCategory] = priceDic[0][kProductCategory];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:kProductSubCategory] && ![priceDic[0][kProductSubCategory] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kProductSubCategory] = priceDic[0][kProductSubCategory];
//                                                 }
//                                                 if (([[priceDic[0] allKeys] containsObject:kProductRange] && ![priceDic[0][kProductRange] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kProductRange] = priceDic[0][kProductRange];
//                                                 }
//                                                 if (([[priceDic[0] allKeys] containsObject:kMeasureRange] && ![priceDic[0][kMeasureRange] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kMeasureRange] = priceDic[0][kMeasureRange];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:kProductBrand] && ![priceDic[0][kProductBrand] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kProductBrand] = priceDic[0][kProductBrand];
//                                                 }
//                                                 else if (([[priceDic[0] allKeys] containsObject:kBrand] && ![priceDic[0][kBrand] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kProductBrand] = priceDic[0][kBrand];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:kProductModel] && ![priceDic[0][kProductModel] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kProductModel] = priceDic[0][kProductModel];
//                                                 }
//
//
//
//                                                 //added by Srinivasulu on 11/05/2017...
//
//
//                                                 if (([[priceDic[0] allKeys] containsObject:kPrimaryDepartment] && ![priceDic[0][kPrimaryDepartment] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kItemDept] = priceDic[0][kPrimaryDepartment];
//                                                 }
//
//                                                 else if (([[priceDic[0] allKeys] containsObject:kItemDept] && ![priceDic[0][kItemDept] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kItemDept] = priceDic[0][kItemDept];
//                                                 }
//
//
//                                                 if (([[priceDic[0] allKeys] containsObject:SECONDARY_DEPARTMENT] && ![priceDic[0][SECONDARY_DEPARTMENT] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kItemSubDept] = priceDic[0][SECONDARY_DEPARTMENT];
//                                                 }
//                                                 else if (([[priceDic[0] allKeys] containsObject:kItemSubDept] && ![priceDic[0][kItemSubDept] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[kItemSubDept] = priceDic[0][kItemSubDept];
//                                                 }
//                                                 //added by Srinivasulu on 09/10/2017
//                                                 else{
//
//                                                     productInfoDic[kItemSubDept] = @"";
//                                                 }
//                                                 //upto here on 09/10/2017
//
//
//
//                                                 if (([[priceDic[0] allKeys] containsObject:SECTION] && ![priceDic[0][SECTION] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[SECTION] = priceDic[0][SECTION];
//                                                 }
//
//                                                 //added by Srinivasulu on 27/06/2017 && 29/08/2018....
//
//                                                 if (([[priceDic[0] allKeys] containsObject:HSN_CODE] && ![priceDic[0][HSN_CODE] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[HSN_CODE] = priceDic[0][HSN_CODE];
//                                                 }
//
//                                                 if (([itemDic.allKeys containsObject:Pack_Size] && ![itemDic[Pack_Size] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[Pack_Size] = [NSString stringWithFormat:@"%li", [[itemDic valueForKey:Pack_Size] integerValue]];
//                                                 }
//
//
//                                                 if (([itemDic.allKeys containsObject:EXPIRY_DATE] && ![itemDic[EXPIRY_DATE] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[EXPIRY_DATE] = itemDic[EXPIRY_DATE];
//                                                 }
//                                                 //upto here on 27/06/2017 && 29/08/2018....
//
//
//                                                 //newly added keys....
//                                                 //added by Srinivasulu on 05/07/2017....
//
//                                                 if (([[priceDic[0] allKeys] containsObject:COLOR] && ![priceDic[0][COLOR] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[COLOR] = priceDic[0][COLOR];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:SIZE] && ![priceDic[0][SIZE] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[SIZE] = priceDic[0][SIZE];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:PRODUCT_RANGE] && ![priceDic[0][PRODUCT_RANGE] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[PRODUCT_RANGE] = priceDic[0][PRODUCT_RANGE];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:kMeasureRange] && ![priceDic[0][kMeasureRange] isKindOfClass:[NSNull class]])) {//MEASUREMENT_RANGE
//
//                                                     productInfoDic[kMeasureRange] = priceDic[0][kMeasureRange];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:ITEM_CATEGORY] && ![priceDic[0][ITEM_CATEGORY] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[ITEM_CATEGORY] = priceDic[0][ITEM_CATEGORY];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:kProductBrand] && ![priceDic[0][kProductBrand] isKindOfClass:[NSNull class]])) {//kBrand
//
//                                                     productInfoDic[kProductBrand] = priceDic[0][kProductBrand];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:MODEL] && ![priceDic[0][MODEL] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[MODEL] = priceDic[0][MODEL];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:SELL_UOM] && ![priceDic[0][SELL_UOM] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[SELL_UOM] = priceDic[0][SELL_UOM];
//                                                 }
//
//                                                 //upto here on 05/07/2017....
//
//                                                 //added by Srinivasulu on 07/07/2017....
//
//                                                 if (([[priceDic[0] allKeys] containsObject:STYLE] && ![priceDic[0][STYLE] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[STYLE] = priceDic[0][STYLE];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:PATTERN] && ![priceDic[0][PATTERN] isKindOfClass:[NSNull class]])) {//kBrand
//
//                                                     productInfoDic[PATTERN] = priceDic[0][PATTERN];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:BATCH] && ![priceDic[0][BATCH] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[BATCH] = priceDic[0][BATCH];
//                                                 }
//
//                                                 if (([[priceDic[0] allKeys] containsObject:UTILITY] && ![priceDic[0][UTILITY] isKindOfClass:[NSNull class]])) {
//
//                                                     productInfoDic[UTILITY] = priceDic[0][UTILITY];
//                                                 }
//
//                                                 //upot here on 07/07/2017....
//
//                                                 //upto here on 11/05/2017....
//
//
//                                                 [productInfoArr addObject:productInfoDic];
//
//                                                 //zero stock info..
//                                                 //changed by Srinivasulu on 13/03/2017.... reason in return stock
//                                                 //                        if (!isOfflineService && ![[productInfo valueForKey:kZeroStock] isKindOfClass:[NSNull class]]){
//                                                 if (!isOfflineService && ![[priceDic[0] valueForKey:kZeroStock] isKindOfClass:[NSNull class]] && !isNewReturnBill) {
//                                                     //changed by Srinivasulu on 07/06/2017....
//                                                     //commented
//
//                                                     //                                                     [zeroStockAvailInfoArr addObject:[NSNumber numberWithBool:[[[priceDic objectAtIndex:0] valueForKey:kZeroStock] boolValue]]];
//
//
//                                                     //changed by Srinivasulu on 23/10/2017....
//                                                     //reason scope changed by Sir....
//
//                                                     if(!zeroStockCheckAtOutletLevel){
//
//                                                         [zeroStockAvailInfoArr addObject:@NO];
//                                                     }
//                                                     else{
//
//                                                         [zeroStockAvailInfoArr addObject:@([[priceDic[0] valueForKey:kZeroStock] boolValue])];
//                                                     }
//
//                                                     //upto here on 07/06/2017....
//
//                                                 }
//                                                 else {
//                                                     [zeroStockAvailInfoArr addObject:@YES];
//                                                 }
//
//                                                 //tax type...
//
//                                                 if ([[priceDic[0] allKeys] containsObject:kItemTaxExclusive] && ![priceDic[0][kItemTaxExclusive] isKindOfClass:[NSNull class]]) {
//
//                                                     [taxTypeArr addObject:@([priceDic[0][kItemTaxExclusive] boolValue])];
//                                                 }
//                                                 else {
//                                                     [taxTypeArr addObject:@NO];
//
//                                                 }
//                                             }
//
//
//                                             if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//                                                 cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
//                                             }
//                                             else {
//                                                 cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height + 30);
//                                             }
//                                             scrollView.hidden = NO;
//                                             cartTable.hidden = NO;
//                                             [cartTable reloadData];
//
//                                             SystemSoundID    soundFileObject1;
//                                             NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
//                                             self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                                             AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                                             AudioServicesPlaySystemSound (soundFileObject1);
//
//                                             if (dealDataItems.count!=0) {                   //removing deals....
//
//                                                 for (int i = 0; i < dealDataItems.count; i++) {
//
//                                                     DealsController *_dealsController = dealDataItems[i];
//                                                     _dealsController.isDealApplied = NO;
//                                                 }
//                                             }
//
//                                             [self updateValues];
//                                             [self updateItemScanTime];
//
//                                             //added by Srinivasulu on 28/08/2018....
//                                             if(isHybirdMode && !isHybirdCallFailed && [priceDic count] > 0){
//
//                                                 if(offline == nil)
//                                                     offline = [OfflineBillingServices new];
//
//                                                 [offline saveInformationInHybirdMode:priceDic];
//                                                 isHybirdCallFailed = true;
//                                             }
//
//                                             if (isToCallApplyCampaigns && !isNewReturnBill) {
//
//                                                 [self callOffersForScanning:selected_SKID qty:@"0" total:@"00" itemPrice:@"00"];
//                                             }
//                                             //upto  here on 28/08/2018....
//
//
//                                             //                                         }
//                                             //                                         else{
//                                             //                                             [HUD setHidden:YES];
//                                             //                                             UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                             //                                             [alert show];
//                                             //                                         }
//
//
//                                             //
//                                         }
//                                         else {
//                                             SystemSoundID    soundFileObject1;
//                                             NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                                             self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                                             AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                                             AudioServicesPlaySystemSound (soundFileObject1);
//                                             [HUD setHidden:YES];
//                                             [MBProgressHUD hideHUDForView:self.view animated:YES];
//                                             UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Product not available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                                             [alert show];
//                                         }
//                                     }
//                                 }];
//
//                                //                        });
//                            }
//                            @catch (NSException *exception) {
//
//                                NSLog(@"%@",exception);
//
//                            }
//                            @finally {
//                                //added by Srinivasulu on 19/01/2017....
//                                isItemScanned = false;
//                                //upto here on 19/01/2017....
//
//
//                                [HUD setHidden:YES];
//                                //added by Srinivasulu on 28/08/2018....
//                                if(isHybirdMode)
//                                    isHybirdCallFailed = true;
//                            }
//                        }
//                        else  {
//
//                            @try {
//
//
//                                if (itemDic.count>0) {
//                                    NSMutableArray *taxRate = [offline getTaxForSku:[NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
//                                    NSString *taxValue = @"";
//                                    if (taxRate.count>0) {
//                                        taxValue = [NSString stringWithFormat:@"%.2f",[[taxRate[0] valueForKey:@"taxRate"] floatValue]];
//                                        [taxArr addObject:taxRate];
//                                    }
//                                    else {
//                                        taxValue = @"0.00";
//                                        [taxArr addObject:taxRate];
//                                    }
//                                    //added by sonali....
//                                    priceDic = [offline getLocalPriceLists:selected_SKID];
//                                    NSString *itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",itemDic[@"description"],@"#",itemDic[@"description"],@"#",itemDic[@"quantity"],@"#",price1,@"#",[NSString stringWithFormat:@"%.3f",vegQty.floatValue], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]], @"#", [NSString stringWithFormat:@"%.2f",taxValue.floatValue]];
//
//                                    itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[priceDic[0] valueForKey:PLU_CODE]];
//                                    itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[priceDic[0] valueForKey:MRP] floatValue]];
//
//                                    if ([cartTotalItems containsObject:itemString]) {
//
//                                        if (![cartItem containsObject:itemString]) {
//
//                                            //added by Srinivasulu on 19/01/2017 && 28/08/2018....
//                                            isItemScanned = false;
//                                            if (isHybirdCallFailed && isHybirdMode && !isOfflineService){
//                                                isHybirdCallFailed = false;
//                                                [self callGetSKUDetailOnline:selected_SKID];
//                                            }
//                                            //upto here on 19/01/2017 && 28/08/2018....
//
//
//                                            [HUD setHidden:YES];
//
//                                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                            [alert show];
//                                            return;
//                                        }
//
//
//                                        //                                    UIAlertView *alert =  [[UIAlertView alloc] initWithTitle:@"Product already added to the cart" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                        //                                    [alert show];
//                                        //                                    return;
//
//                                    }
//
//
//
//                                    selected_desc = [NSString stringWithFormat:@"%@",[[itemString componentsSeparatedByString:@"#"][0] copy]];
//                                    selected_price = [NSString stringWithFormat:@"%@",[price1 copy]];
//                                    selectedPluCode = [[priceDic[0] valueForKey:PLU_CODE] copy];
//                                    [cartItemDetails addObject:vegQty];
//                                    [cartItem addObject:itemString];
//                                    [cartTotalItems addObject:itemString];
//                                    [isVoidedArray addObject:@NO];
//                                    [itemPromoFlagArr addObject:@"N"];
//
//                                    [isVegetable addObject:selected_SKID];
//                                    [isPriceEditableArr addObject:@0];
//
//                                    //added by Srinivausulu on 06/03/2018....
//
//                                    if ([itemDic.allKeys containsObject:TRACKING_REQUIRED] && ![[itemDic valueForKey:TRACKING_REQUIRED] isKindOfClass:[NSNull class]]) {
//
//                                        [isItemTrackingRequiredArr addObject:@([[itemDic valueForKey:TRACKING_REQUIRED] intValue])];
//                                    }
//                                    else {
//
//                                        [isItemTrackingRequiredArr addObject:@0];
//                                    }
//
//                                    //upto here on 06/03/2018....
//
//                                    [editedPriceArr addObject:@"0.00"];
//
//                                    if (!isItemUnVoided) {
//
//
//                                        [itemDiscountArr addObject:@"0.00"];
//                                        [itemDiscountDescArr addObject:@""];
//
//                                        //added by Srinivasulu on 28/09/2017....
//
//                                        [isItemFlatDiscountedArr addObject:@YES];
//
//                                        //upto here on 28/09/2017....
//
//                                        [itemScanCode addObject:selected_SKID];
//                                        [manufacturedItemsArr addObject:@([priceDic[0][kIsManuFacturedItem] boolValue])];
//                                        if ([[priceDic[0] allKeys] containsObject:kPackagedType] && ![priceDic[0][kPackagedType] isKindOfClass:[NSNull class]]) {
//
//                                            [isPackagedItem addObject:@([priceDic[0][kPackagedType] boolValue])];
//                                        }
//                                        else {
//                                            [isPackagedItem addObject:@NO];
//
//                                        }
//                                        if (([[priceDic[0] allKeys] containsObject:kProductCategory] && ![priceDic[0][kProductCategory] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[kProductCategory] = priceDic[0][kProductCategory];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:kProductSubCategory] && ![priceDic[0][kProductSubCategory] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[kProductSubCategory] = priceDic[0][kProductSubCategory];
//                                        }
//                                        if (([[priceDic[0] allKeys] containsObject:kProductRange] && ![priceDic[0][kProductRange] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[kProductRange] = priceDic[0][kProductRange];
//                                        }
//                                        if (([[priceDic[0] allKeys] containsObject:kMeasureRange] && ![priceDic[0][kMeasureRange] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[kMeasureRange] = priceDic[0][kMeasureRange];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:kProductBrand] && ![priceDic[0][kProductBrand] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[kProductBrand] = priceDic[0][kProductBrand];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:kProductModel] && ![priceDic[0][kProductModel] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[kProductModel] = priceDic[0][kProductModel];
//                                        }
//
//                                        //added by Srinivasulu on 11/05/2017...
//
//
//                                        if (([[priceDic[0] allKeys] containsObject:kPrimaryDepartment] && ![priceDic[0][kPrimaryDepartment] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[kItemDept] = priceDic[0][kPrimaryDepartment];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:SECONDARY_DEPARTMENT] && ![priceDic[0][SECONDARY_DEPARTMENT] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[kItemSubDept] = priceDic[0][SECONDARY_DEPARTMENT];
//                                        }
//                                        //added by Srinivasulu on 09/10/2017
//                                        else{
//
//                                            productInfoDic[kItemSubDept] = @"";
//                                        }
//                                        //upto here on 09/10/2017
//
//                                        if (([[priceDic[0] allKeys] containsObject:SECTION] && ![priceDic[0][SECTION] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[SECTION] = priceDic[0][SECTION];
//                                        }
//
//                                        if ([[priceDic[0] allKeys] containsObject:ITEM_TYPE_] && ![[[priceDic[0] allKeys] valueForKey:ITEM_TYPE_] isKindOfClass:[NSNull class]]) {
//
//                                            productInfoDic[ITEM_TYPE_] = priceDic[0][ITEM_TYPE_];
//                                            if([[[priceDic[0] allKeys] valueForKey:ITEM_TYPE_] caseInsensitiveCompare:MEMBER_SHIP] == NSOrderedSame){
//                                                isMemberShipItemAdded = true;
//                                            }
//
//                                            // added by roja on 29/07/2019..
//                                            else if ([[[priceDic[0] allKeys] valueForKey:ITEM_TYPE_] caseInsensitiveCompare:WALLET] == NSOrderedSame){
//
//                                                isWalletItemAdded = true;
//                                            }  // upto here added by roja on 29/07/2019..
//                                        }
//                                        //added by Srinivasulu on 27/06/2017....
//
//                                        if (([[priceDic[0] allKeys] containsObject:HSN_CODE] && ![priceDic[0][HSN_CODE] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[HSN_CODE] = priceDic[0][HSN_CODE];
//                                        }
//
//                                        if (([itemDic.allKeys containsObject:Pack_Size] && ![itemDic[Pack_Size] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[Pack_Size] = [NSString stringWithFormat:@"%li", [[itemDic valueForKey:Pack_Size] integerValue]];
//                                        }
//
//
//                                        if (([itemDic.allKeys containsObject:EXPIRY_DATE] && ![itemDic[EXPIRY_DATE] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[EXPIRY_DATE] = itemDic[EXPIRY_DATE];
//                                        }
//                                        //upto here on 27/06/2017....
//
//                                        //newly added keys....
//                                        //added by Srinivasulu on 05/07/2017....
//
//                                        if (([[priceDic[0] allKeys] containsObject:COLOR] && ![priceDic[0][COLOR] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[COLOR] = priceDic[0][COLOR];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:SIZE] && ![priceDic[0][SIZE] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[SIZE] = priceDic[0][SIZE];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:PRODUCT_RANGE] && ![priceDic[0][PRODUCT_RANGE] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[PRODUCT_RANGE] = priceDic[0][PRODUCT_RANGE];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:kMeasureRange] && ![priceDic[0][kMeasureRange] isKindOfClass:[NSNull class]])) {//MEASUREMENT_RANGE
//
//                                            productInfoDic[kMeasureRange] = priceDic[0][kMeasureRange];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:ITEM_CATEGORY] && ![priceDic[0][ITEM_CATEGORY] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[ITEM_CATEGORY] = priceDic[0][ITEM_CATEGORY];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:kProductBrand] && ![priceDic[0][kProductBrand] isKindOfClass:[NSNull class]])) {//kBrand
//
//                                            productInfoDic[kProductBrand] = priceDic[0][kProductBrand];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:MODEL] && ![priceDic[0][MODEL] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[MODEL] = priceDic[0][MODEL];
//                                        }
//
//                                        if (([[priceDic[0] allKeys] containsObject:SELL_UOM] && ![priceDic[0][SELL_UOM] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[SELL_UOM] = priceDic[0][SELL_UOM];
//                                        }
//
//                                        //upto here on 05/07/2017....
//
//                                        //added by Srinivasulu on  11/07/2017.....
//
//                                        //added by Srinivasulu on 11/07/2017 && 29/08/2018....
//
//                                        if (([itemDic.allKeys containsObject:kBrand] && ![itemDic[kBrand] isKindOfClass:[NSNull class]]))
//                                            [productInfoDic setValue:[itemDic valueForKey:kBrand] forKey:kBrand];
//
//                                        if (([itemDic.allKeys containsObject:HSN_CODE] && ![itemDic[HSN_CODE] isKindOfClass:[NSNull class]]))
//                                            [productInfoDic setValue:[itemDic valueForKey:HSN_CODE] forKey:HSN_CODE];
//
//                                        if (([itemDic.allKeys containsObject:Pack_Size] && ![itemDic[Pack_Size] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[Pack_Size] = [NSString stringWithFormat:@"%li", [[itemDic valueForKey:Pack_Size] integerValue]];
//                                        }
//
//
//                                        if (([itemDic.allKeys containsObject:EXPIRY_DATE] && ![itemDic[EXPIRY_DATE] isKindOfClass:[NSNull class]])) {
//
//                                            productInfoDic[EXPIRY_DATE] = itemDic[EXPIRY_DATE];
//                                        }
//
//                                        if (([itemDic.allKeys containsObject:SECTION] && ![itemDic[SECTION] isKindOfClass:[NSNull class]]))
//                                            [productInfoDic setValue:[itemDic valueForKey:SECTION] forKey:SECTION];
//
//                                        if (([itemDic.allKeys containsObject:PATTERN] && ![itemDic[PATTERN] isKindOfClass:[NSNull class]]))
//                                            [productInfoDic setValue:[itemDic valueForKey:PATTERN] forKey:PATTERN];
//
//                                        if (([itemDic.allKeys containsObject:kPrimaryDepartment] && ![itemDic[kPrimaryDepartment] isKindOfClass:[NSNull class]]))
//                                            [productInfoDic setValue:[itemDic valueForKey:kPrimaryDepartment] forKey:kPrimaryDepartment];
//
//                                        if (([itemDic.allKeys containsObject:SECONDARY_DEPARTMENT] && ![itemDic[SECONDARY_DEPARTMENT] isKindOfClass:[NSNull class]]))
//                                            [productInfoDic setValue:[itemDic valueForKey:SECONDARY_DEPARTMENT] forKey:SECONDARY_DEPARTMENT];
//
//                                        if (([itemDic.allKeys containsObject:kPackagedType] && ![itemDic[kPackagedType] isKindOfClass:[NSNull class]]))
//                                            [productInfoDic setValue:[itemDic valueForKey:kPackagedType] forKey:kPackagedType];
//
//                                        if (([itemDic.allKeys containsObject:kIsManuFacturedItem] && ![itemDic[kIsManuFacturedItem] isKindOfClass:[NSNull class]]))
//                                            [productInfoDic setValue:[itemDic valueForKey:kIsManuFacturedItem] forKey:kIsManuFacturedItem];
//
//                                        if (([itemDic.allKeys containsObject:kItemTaxExclusive] && ![itemDic[kItemTaxExclusive] isKindOfClass:[NSNull class]]))
//                                            [productInfoDic setValue:[itemDic valueForKey:kItemTaxExclusive] forKey:kItemTaxExclusive];
//                                        //upto here on11/07/2017....
//
//
//
//                                        //upto here on 11/07/2017.....
//
//
//                                        //upto here on 11/05/2017....
//
//                                        [productInfoArr addObject:productInfoDic];
//
//                                        //zero stock info..
//
//                                        if (!isOfflineService && ![[priceDic[0] valueForKey:kZeroStock] isKindOfClass:[NSNull class]]) {
//
//
//                                            //changed by Srinivasulu on 07/06/2017....
//                                            //commented
//
//
//                                            //                                            [zeroStockAvailInfoArr addObject:[NSNumber numberWithBool:[[[priceDic objectAtIndex:0] valueForKey:kZeroStock] boolValue]]];
//
//                                            //changed by Srinivasulu on 23/10/2017....
//                                            //reason scope changed by Sir....
//
//                                            if(!zeroStockCheckAtOutletLevel){
//
//                                                [zeroStockAvailInfoArr addObject:@NO];
//                                            }
//                                            else{
//
//                                                [zeroStockAvailInfoArr addObject:@([[priceDic[0] valueForKey:kZeroStock] boolValue])];
//                                            }
//
//                                            //upto here on 07/06/2017....
//                                        }
//                                        else {
//                                            [zeroStockAvailInfoArr addObject:@YES];
//
//                                        }
//
//                                        //tax type...
//
//                                        if ([[priceDic[0] allKeys] containsObject:kItemTaxExclusive] && ![priceDic[0][kItemTaxExclusive] isKindOfClass:[NSNull class]]) {
//
//                                            [taxTypeArr addObject:@([priceDic[0][kItemTaxExclusive] boolValue])];
//                                        }
//                                        else {
//                                            [taxTypeArr addObject:@NO];
//
//                                        }
//                                    }
//
//                                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//                                        cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
//                                    }
//                                    else {
//                                        cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height + 30);
//                                    }
//                                    scrollView.hidden = NO;
//                                    cartTable.hidden = NO;
//
//                                    [cartTable reloadData];
//                                    [HUD setHidden:YES];
//
//
//
//                                    SystemSoundID    soundFileObject1;
//                                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
//                                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                                    AudioServicesPlaySystemSound (soundFileObject1);
//                                    if (dealDataItems.count!=0) {                   //removing deals....
//
//                                        for (int i = 0; i < dealDataItems.count; i++) {
//
//                                            DealsController *_dealsController = dealDataItems[i];
//                                            _dealsController.isDealApplied = NO;
//                                        }
//                                    }
//                                    [self updateValues];
//                                    [self updateItemScanTime];
//                                    [self goToBottom];
//                                }
//                                else {
//
//                                    //added by Srinivasulu on 19/01/2017....
//                                    isItemScanned = false;
//
//                                    //upto here on 19/01/2017....
//
//                                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//                                    [HUD setHidden:YES];
//                                    [MBProgressHUD hideHUDForView:self.view animated:YES];
//                                    UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                    [alert show];
//                                }
//                            }
//                            @catch (NSException *exception) {
//
//                                //added by Srinivasulu on 19/01/2017 && 28/08/2018....
//                                isHybirdCallFailed = false;
//                                //upto here on 19/01/2017 && 28/08/2018....
//
//                                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//                                [HUD setHidden:YES];
//                                [MBProgressHUD hideHUDForView:self.view animated:YES];
//                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                [alert show];
//                            }
//                            @finally {
//
//                                //added by Srinivasulu on 19/01/2017....
//                                isItemScanned = false;
//                                //upto here on 19/01/2017....
//
//                                [HUD setHidden:YES];
//                            }
//
//                        }
//                        [self saveCartItems:cartTotalItems];
//                    }
//                    @catch (NSException *exception) {
//
//
//                        //added by Srinivasulu on 19/01/2017....
//                        isItemScanned = false;
//                        //upto here on 19/01/2017....
//
//
//                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//                        [HUD setHidden:YES];
//                        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Failed to scan the product" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                        [alert show];
//
//                    }
//
//                }
//                else {
//
//                    offerLabel.text = barcodeString;
//                    if (transparentView.hidden) {
//
//                        //added by Srinivasulu on 28/08/2018....
//                        if (!isOfflineService && (!isHybirdCallFailed || !isHybirdMode))  {
//
//                            [HUD setHidden:NO];
//
//                            //changed by Srinivasulu on 13/02/2018....
//                            //reaosn added isToCallApplyCampaigns -- flag....
//                            selected_SKID = [barcodeString copy];
//
//                            NSDictionary * dictionary_;
//
//                            if(isToCallApplyCampaigns && !isNewReturnBill){
//
//                                skuIdList = [NSMutableArray new];
//                                pluCodeList = [NSMutableArray new];
//                                unitPriceList = [NSMutableArray new];
//                                qtyList = [NSMutableArray new];
//                                totalPriceList = [NSMutableArray new];
//                                itemStatusList = [NSMutableArray new];
//                                itemDiscountList = [NSMutableArray new];
//
//                                for (int i = 0; i < cartTotalItems.count; i++) {
//                                    NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
//                                    [skuIdList addObject:itemDetails[0]];
//                                    [pluCodeList addObject:itemDetails[8]];
//                                    [unitPriceList addObject:@([itemDetails[4] floatValue])];
//                                    [qtyList addObject:@([itemDetails[5] floatValue])];
//                                    [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
//                                    if ([isVoidedArray[i] boolValue]) {
//                                        [itemStatusList addObject:@"void"];
//                                    }
//                                    else {
//                                        [itemStatusList addObject:@""];
//                                    }
//                                    [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
//
//                                }
//
//                                NSArray *loyaltyKeys = @[@"storeLocation",@"requestHeader",@"skuIdArrList",@"pluCodeArrList",@"unitPriceArrList",@"qtyArrList",@"totalPriceArrList",@"itemStatusArrList",@"productOptionalDiscountArr",@"totalBillAmount",@"quantity",@"phonenumber",@"purchaseChannel"];
//
//                                NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],skuIdList,pluCodeList,unitPriceList,qtyList,totalPriceList,itemStatusList, itemDiscountList, totalTxt.text,@"1",custmerPhNum.text,@"POS"];
//
//                                dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//                            }
//                            else{
//
//                                dictionary_ = [[NSMutableDictionary alloc] init];
//                            }
//
//                            Boolean isCampaignsRequired = false;
//
//                            if (isToCallApplyCampaigns && !isNewReturnBill) {
//                                isCampaignsRequired = true;
//                            }
//
//                            NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns",@"cartDetails",kBarCodeType,kZeroStockBillCheck,IS_CAMPAIGNS_REQUIRED];
//
//                            NSArray *objects = @[barcodeString,[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],dictionary_,@(isBarcodeType),@true,[NSNumber numberWithBool:isCampaignsRequired]];
//
//                            NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
//
//                            NSError * err;
//                            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
//                            NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//                            //                    getSkuid.skuID = salesReportJsonString;
//                            @try {
//                                //                            @synchronized(self) {
//                                //                                dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
//                                if (isScanningItem) {
//                                    isScanningItem = FALSE;
//                                    //                                    MBProgressHUD *HUD_ = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
//                                    //                                        [self.navigationController.view addSubview:HUD_];
//                                    //                                        // Regiser for HUD callbacks so we can remove it from the window at the right time
//                                    //                                        HUD_.delegate = self;
//                                    //                                        HUD_.dimBackground = YES;
//                                    //                                        HUD_.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
//                                    //                                        HUD_.mode = MBProgressHUDModeCustomView;
//                                    //                                        // Show the HUD
//                                    //                                        [HUD_ show:YES];
//                                    //                                        [HUD_ setLabelText:@"Please Wait.."];
//                                    //                                        HUD = HUD_;
//
//                                    WebServiceController *serviceController = [WebServiceController new];
//                                    serviceController.getSkuDetailsDelegate = self;
//                                    [serviceController getSkuDetailsWithData:salesReportJsonString];
//                                }
//                                //                                });
//                                //                            }
//                            }
//                            @catch (NSException *exception) {
//
//                            }
//                            @finally {
//                                //added by Srinivasulu on 19/01/2017....
//                                isItemScanned = false;
//                                //upto here on 19/01/2017....
//                            }
//                        }
//                        else {
//
//                            @try {
//                                if (isScanningItem) {
//                                    isScanningItem = FALSE;
//                                    //                                HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
//                                    //                                [self.navigationController.view addSubview:HUD];
//                                    //                                // Regiser for HUD callbacks so we can remove it from the window at the right time
//                                    //                                HUD.delegate = self;
//                                    //                                HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
//                                    //                                HUD.dimBackground = YES;
//                                    //                                HUD.mode = MBProgressHUDModeCustomView;
//                                    //                                // Show the HUD
//                                    //                                [HUD show:YES];
//                                    //
//                                    //                                [HUD setLabelText:@"Please Wait.."];
//
//                                    [HUD setHidden:NO];
//
//                                    selected_SKID = [barcodeString copy];
//
//                                    //  [self performSelectorInBackground:@selector(getOfflineProducts:) withObject:barcodeString];
//
//                                    [self getOfflineProducts:barcodeString];
//                                    [HUD setHidden:YES];
//                                }
//                            }
//                            @catch (NSException *exception) {
//                                //added by Srinivasulu on 19/01/2017....
//                                isItemScanned = false;
//                                //upto here on 19/01/2017....
//
//
//                                [HUD setHidden:YES];
//                                [MBProgressHUD hideHUDForView:self.view animated:YES];
//                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                [alert show];
//
//                            }
//
//                        }
//
//                    }
//                    else {
//
//                        //added by Srinivasulu on 19/01/2017....
//                        isItemScanned = false;
//                        //upto here on 19/01/2017....
//
//                        SystemSoundID    soundFileObject1;
//                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                        AudioServicesPlaySystemSound (soundFileObject1);
//
//                    }
//                }
//
//
//            }
//            else {
//
//                //added by Srinivasulu on 19/01/2017....
//                isItemScanned = false;
//                //upto here on 19/01/2017....
//
//
//
//                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Failed to scan the barcode" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                [alert show];
//            }
//
//        }
//    }
//    @catch (NSException *exception) {
//        //added by Srinivasulu on 19/01/2017....
//        isItemScanned = false;
//        //upto here on 19/01/2017....
//
//        [HUD setHidden:YES];
//
//        NSLog(@"%@",exception);
//
//    }
//    @finally {
//    }
//
//    //    NSString *string = [NSString stringWithFormat:@"scanned: %@", barcodeString];
//    //    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Debug"
//    //                                                        message:string
//    //                                                       delegate:self
//    //                                              cancelButtonTitle:@"Cancel"
//    //                                              otherButtonTitles:nil, nil];
//    //    [alertView show];
//}


- (void)getOfflineProducts:(NSString *)barcodeString
{
    
    Boolean isToCallOnlineAgain = false;
    @try {
        
        offline = [[OfflineBillingServices alloc]init];
        priceDic = [[NSMutableArray alloc]init];
        
        NSMutableDictionary * itemDic = [NSMutableDictionary new];
        
        //changed by Srinivasulu on 28/08/2017....
        
        //        if (isBarcodeType) {
        //
        //            //changed by Srinivasulu on 28/08/2017....
        ////            itemDic = [[offline getProductDetails:[NSString stringWithFormat:@"%@",barcodeString] isEanSearch:YES] mutableCopy];
        //                        itemDic = [[offline getScannedItemDetails:[NSString stringWithFormat:@"%@",barcodeString] isEanSearch:YES] mutableCopy];
        //
        //
        //
        //        }
        //        else {
        //
        //            //changed by Srinivasulu on 28/08/2017....
        ////            itemDic = [[offline getProductDetails:[NSString stringWithFormat:@"%@",barcodeString] isEanSearch:NO] mutableCopy];
        //            itemDic = [[offline getScannedItemDetails:[NSString stringWithFormat:@"%@",barcodeString] isEanSearch:YES] mutableCopy];
        //
        //
        //        }
        
        
        itemDic = [[offline getScannedItemDetails:[NSString stringWithFormat:@"%@",barcodeString] isEanSearch:isBarcodeType] mutableCopy];
        
        //upto here on 28/08/2017....
        
        isScanningItem = FALSE;
        
        if (itemDic.count>0) {
            selected_SKID = [itemDic valueForKey:@"skuId"];
            
            //get the product category and sub-category.. commented by Srinivasulu on 08/03/2018.. b/z this details are retrived from skutable it self..
            //            NSDictionary *productInfoDic = [offline getProductCategory:[itemDic valueForKey:kProductId]];
            
            NSMutableArray *taxRate = [offline getTaxForSku:[NSString stringWithFormat:@"%@",[itemDic valueForKey:@"taxCode"]]];
            
            NSString *itemString = @"";
            
            //chagned by Srinivasulu on 28/08/2017....
            
            //            priceDic = [offline getLocalPriceLists:[NSString stringWithFormat:@"%@",[itemDic valueForKey:@"skuId"]]];
            
            priceDic = [[itemDic valueForKey:kSkuLists] mutableCopy];
            
            //upto here on 28/08/2017....
            
            //
            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@",itemDic[@"description"],@"#",itemDic[@"description"],@"#",[itemDic[@"quantity"] floatValue],@"#",[itemDic[@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
            
            if (taxRate.count>0) {
                
                // [taxArr addObject:taxRate];
                itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[taxRate[0] valueForKey:@"taxRate"] floatValue]];
            }
            else {
                
                //[taxArr addObject:taxRate];
                itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
            }
            
            
            if (priceDic.count >1) {
                
                [HUD setHidden:YES];
                for (int i=0; i<priceDic.count; i++) {
                    NSString *tax_code = [itemString componentsSeparatedByString:@"#"][4];
                    
                    NSMutableDictionary *dic = [priceDic[i] mutableCopy];
                    [dic setValue:tax_code forKey:@"taxCode"];
                    [dic setValue:taxRate forKey:@"tax"];
                    
                    //commented by Srinivasulu on 24/08/2017....
                    
                    //                    NSString *desc = [[itemString componentsSeparatedByString:@"#"]objectAtIndex:1];
                    
                    //                    [dic setValue:desc forKey:@"description"];
                    
                    //upto here on 24/08/2017...
                    
                    //changed by Srinivasulu on 24/08/2017....
                    
                    //it may produces carsh...
                    //                    [dic setValue:[dic valueForKey:@"description"] forKey:@"description"];
                    
                    //commented by Srinivasulu on same day....
                    //reason this already exist in this dictionary itself.
                    
                    //it doesn't produces any carsh. But  affect the processing time...
                    //                    [dic setValue:[self checkGivenValueIsNullOrNil:[dic valueForKey:kDescription] defaultReturn:@""] forKey:kDescription];
                    
                    //upto here on 24/08/2017....
                    
                    
                    [dic setValue:taxRate forKey:@"tax"];
                    //                    [dic setValue:[productInfoDic valueForKey:kProductCategory] forKey:kProductCategory];
                    //                    [dic setValue:[productInfoDic valueForKey:kProductSubCategory] forKey:kProductSubCategory];
                    [dic setValue:[itemDic valueForKey:kPackagedType] forKey:kPackagedType];
                    [dic setValue:[itemDic valueForKey:kIsManuFacturedItem] forKey:kIsManuFacturedItem];
                    [dic setValue:[itemDic valueForKey:kItemTaxExclusive] forKey:kItemTaxExclusive];
                    
                    //added by Srinivasulu on 11/07/2017 && 29/08/2018....
                    
                    [dic setValue:[itemDic valueForKey:kBrand] forKey:kBrand];
                    [dic setValue:[itemDic valueForKey:HSN_CODE] forKey:HSN_CODE];
                    [dic setValue:[itemDic valueForKey:Pack_Size] forKey:Pack_Size];
                    [dic setValue:[itemDic valueForKey:EXPIRY_DATE] forKey:EXPIRY_DATE];
                    [dic setValue:[itemDic valueForKey:SECTION] forKey:SECTION];
                    [dic setValue:[itemDic valueForKey:PATTERN] forKey:PATTERN];
                    [dic setValue:[itemDic valueForKey:kPrimaryDepartment] forKey:kPrimaryDepartment];
                    [dic setValue:[itemDic valueForKey:SECONDARY_DEPARTMENT] forKey:SECONDARY_DEPARTMENT];
                    
                    //added by Srinivasulu on 12/08/2017....
                    // product_class ---------  product_sub_class -- it's from sku_master....
                    // PRODUCT_CLASS ---------  PRODUCT_SUB_CLASS -- it's from sku_priceList....
                    
                    [dic setValue:[itemDic valueForKey:PRODUCT_CLASS] forKey:PRODUCT_CLASS];
                    
                    //kProductCategory -- kProductSubCategory -- TAXATION_ON_DISCOUNT_PRICE -- TRACKING_REQUIRED -- added on 08/07/2018....
                    
                    [dic setValue:[itemDic valueForKey:kProductCategory] forKey:kProductCategory];
                    [dic setValue:[itemDic valueForKey:kProductSubCategory] forKey:kProductSubCategory];
                    [dic setValue:[itemDic valueForKey:TAXATION_ON_DISCOUNT_PRICE] forKey:TAXATION_ON_DISCOUNT_PRICE];
                    [dic setValue:[itemDic valueForKey:TRACKING_REQUIRED] forKey:TRACKING_REQUIRED];
                    
                    //upto here on 11/07/2017....
                    
                    priceDic[i] = dic;
                }
                transparentView.hidden = NO;
                [priceTable reloadData];
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"popup_tune" withExtension: @"mp3"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
            }
            else {
                //                [itemDiscountArr addObject:@"0.00"];
                //                [itemDiscountDescArr addObject:@""];
                //                [itemScanCode addObject:selected_SKID];
                
                [itemDic setValue:taxRate forKey:@"tax"];
                [itemDic setValue:[priceDic[0] valueForKey:kProductRange] forKey:kProductRange];
                [itemDic setValue:[priceDic[0] valueForKey:kMeasureRange] forKey:kMeasureRange];
                //                [itemDic setValue:[productInfoDic valueForKey:kProductCategory] forKey:kProductCategory];
                //                [itemDic setValue:[productInfoDic valueForKey:kProductSubCategory] forKey:kProductSubCategory];
                
                
                
                //added by Srinivasulu on 12/08/2017....
                // product_class ---------  product_sub_class -- it's from sku_master....
                // PRODUCT_CLASS ---------  PRODUCT_SUB_CLASS -- it's from sku_priceList....
                
                [itemDic setValue:[priceDic[0] valueForKey:PRODUCT_SUB_CLASS] forKey:PRODUCT_SUB_CLASS];
                [itemDic setValue:[priceDic[0] valueForKey:STYLE_RANGE] forKey:STYLE_RANGE];
                
                [itemDic setValue:[priceDic[0] valueForKey:BATCH] forKey:BATCH];
                [itemDic setValue:[priceDic[0] valueForKey:UTILITY] forKey:UTILITY];
                
                
                //upto here on 11/07/2017....
                
                //upto here on 12/08/2017......
                
                
                if(priceDic.count == 1) {
                    NSMutableDictionary * dic = [priceDic[0] mutableCopy];
                    itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@",dic[@"description"],@"#",dic[@"description"],@"#",[dic[@"quantity"] floatValue],@"#",[dic[@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
                    if (taxRate.count>0) {
                        
                        // [taxArr addObject:taxRate];
                        itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[taxRate[0] valueForKey:@"taxRate"] floatValue]];
                    }
                    else {
                        
                        // [taxArr addObject:taxRate];
                        itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
                    }
                    itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[dic valueForKey:PLU_CODE]];
                    selectedPluCode = [[dic valueForKey:PLU_CODE] copy];
                    itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[dic valueForKey:@"price"] floatValue]];
                }
                
                if(priceDic.count > 0){
                    
                    selected_desc = [itemString componentsSeparatedByString:@"#"][1];
                    selected_price = [[itemString componentsSeparatedByString:@"#"][3] copy];
                    [self getSkuDetailsHandler:itemString productInfo:itemDic];
                }
                else {
                    //added by Srinivasulu on 28/08/2018....
                    isToCallOnlineAgain = true;
                    
                    [HUD setHidden:YES];
                    [MBProgressHUD hideHUDForView:self.view animated:YES];
                    UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
                
                //                                    }
                //                                    else {
                //
                //                                        [HUD setHidden:YES];
                //                                        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //                                        [alert show];
                //                                    }
            }
        }
        else {
            isScanningItem = TRUE;
            isItemScanned = false;
            
            //added by Srinivasulu on 28/08/2018....
            isToCallOnlineAgain = true;
            
            [HUD setHidden:YES];
            [MBProgressHUD hideHUDForView:self.view animated:YES];
            
            dispatch_async(dispatch_get_main_queue(), ^ {
                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            });
        }
    } @catch (NSException *exception) {
        
        //added by Srinivasulu on 28/08/2018....
        isToCallOnlineAgain = true;
        NSLog(@"%@",exception);
    } @finally {
        
        //added by Srinivasulu on 28/08/2018....
        if (isHybirdCallFailed && isHybirdMode && !isOfflineService  && isToCallOnlineAgain){
            isHybirdCallFailed = false;
            [self callGetSKUDetailOnline:barcodeString];
        }
    }
}

#pragma mark - EAAccessory

- (void)accessoryDidConnect:(NSNotification *)notification
{
    
    if(!scanner)
    {
        // Get the connected scanners
        NSArray *connectedScanners = [PowaS10Scanner connectedDevices];
        
        // Select the first S10 scanner device available
        if(connectedScanners.count)
        {
            scanner = connectedScanners[0];
            [scanner addObserver:self];
            [powaPOS addPeripheral:scanner];
        }
    }
}


//- (void) imagePickerController: (UIImagePickerController*) reader
// didFinishPickingMediaWithInfo: (NSDictionary*) info
//{
//    // ADD: get the decode results
//    id<NSFastEnumeration> results =
//    [info objectForKey: ZBarReaderControllerResults];
//    ZBarSymbol *symbol = nil;
//    for(symbol in results)
//        // EXAMPLE: just grab the first barcode
//        break;
//
//    // EXAMPLE: do something useful with the barcode data
//    //resultText.text = symbol.data;
//
//    // EXAMPLE: do something useful with the barcode image
//    //resultImage.image = [info objectForKey: UIImagePickerControllerOriginalImage];
//
//    // ADD: dismiss the controller (NB dismiss from the *reader*!)
//    [reader dismissViewControllerAnimated:YES completion:nil];
//
//    HUD.labelText = @"Wait..";
//    [HUD setHidden:NO];
//
//    offerLabel.text = symbol.data;
//
//    if (giftScannerBtn.tag == 2) {
//
//        giftScannerBtn.tag = 0;
//        if ([symbol.data length] > 0) {
//
//            giftNo.text = symbol.data;
//
//            HUD.labelText = @"Wait..";
//            [HUD setHidden:NO];
//
//            SDZLoyaltycardService* service = [SDZLoyaltycardService service];
//            service.logging = YES;
//            // Returns NSString*.
//            [service getLoyalcardDetails:self action:@selector(getLoyalcardDetailsHandler:) loyaltyCardNumber: symbol.data];
//        }
//    }
//    else {
//        if (symbol.data) {
//
//            HUD.dimBackground = YES;
//            HUD.labelText = @"Wait..";
//            [HUD setHidden:NO];
//
//            offerLabel.text = symbol.data;
//
//            // Create the service
//            SDZSkuService* service = [SDZSkuService service];
//            service.logging = YES;
//            //            // Returns NSStrin
//            [service getSkuDetails:self action:@selector(getSkuDetailsHandler:) skuID: symbol.data];
//            selected_SKID = [symbol.data copy];
//        }
//        else {
//            barcodeBtn.tag = 0;
//        }
//    }
//
//
//    // Create the service
////    SDZSkuService* service = [SDZSkuService service];
////    service.logging = YES;
////    // Returns NSStrin
////    [service getSkuDetails:self action:@selector(getSkuDetailsHandler:) skuID: symbol.data];
////    selected_SKID = [symbol.data copy];
//    //[reader dismissModalViewControllerAnimated: YES];
//}



#pragma mark -
#pragma mark ZXingWidgetDelegateMethods
//- (void)zxingController:(ZXingWidgetController*)controller didScanResult:(NSString *)result {
//    [self dismissViewControllerAnimated:YES completion:NULL];
//
//    CheckWifi *wifi = [[CheckWifi alloc]init];
//    BOOL status = [wifi checkWifi];
//    if (status) {
//
//        isOfflineService = FALSE;
//    }
//    else {
//        isOfflineService = TRUE;
//    }
//    [self scanner:nil scannedBarcodeData:[result dataUsingEncoding:NSUTF8StringEncoding]];
//    return;
//        if (result) {
//            if ([result containsString:@"#W"] || [result containsString:@"#P"]) {
//
//
//            HUD.dimBackground = YES;
//            HUD.labelText = @"Please Wait..";
//            [HUD setHidden:NO];
//
//            offerLabel.text = result;
//            selected_SKID = [[result substringWithRange:NSMakeRange(2, 6)] copy];
//
//            NSString *qty = [result substringWithRange:NSMakeRange(8, 5)];
//            NSString *vegQty = [NSString stringWithFormat:@"%.3f",[qty floatValue]/1000];
//            if ([result containsString:@"#P"]) {
//                vegQty = [NSString stringWithFormat:@"%.1f",[qty floatValue]];
//            }
//            NSString *price = [result substringWithRange:NSMakeRange(14, 5)];
//            NSString *price1 = [NSString stringWithFormat:@"%.2f",[price floatValue]/100];
//
//            // Create the service
//            //            SDZSkuService* service = [SDZSkuService service];
//            //    service.logging = YES;
//            ////            // Returns NSStrin
//            //            [service getSkuDetails:self action:@selector(getSkuDetailsHandler:) skuID: result];
//
//            if (!isOfflineService) {
//                @try {
//
//                    NSString *time = [NSDateFormatter localizedStringFromDate:[NSDate date] dateStyle:NSDateFormatterShortStyle timeStyle:NSDateFormatterFullStyle];
//                    NSArray *str = [time componentsSeparatedByString:@" "];
//                    NSString *date = [[[str objectAtIndex:0] componentsSeparatedByString:@","] objectAtIndex:0];
//                    NSArray *headerKeys = [NSArray arrayWithObjects:@"accessKey", @"customerId",@"applicationName",@"userName",@"correlationId",@"dateTime", nil];
//
//                    NSArray *headerObjects = [NSArray arrayWithObjects:custID,custID,@"omniRetailer",mail_,@"-",date, nil];
//                    NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:headerObjects forKeys:headerKeys];
//
//                    NSArray *keys = [NSArray arrayWithObjects:@"skuId",@"requestHeader",@"storeLocation", nil];
//                    NSArray *objects = [NSArray arrayWithObjects:selected_SKID,dictionary_,presentLocation, nil];
//
//                    NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
//
//                    NSError * err;
//                    NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
//                    NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//                    NSString *serviceUrl = [WebServiceUtility getURLFor:GET_SKU_DETAILS];
//                    serviceUrl = [NSString stringWithFormat:@"%@%@",serviceUrl,salesReportJsonString];
//                    serviceUrl = [WebServiceUtility addPercentEscapesFor:serviceUrl];
//
//                    NSURL *url = [NSURL URLWithString:serviceUrl];
//                    NSMutableURLRequest  *request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy
//                                                                        timeoutInterval:60.0];
//                    [request setHTTPMethod: @"GET"];
//                    [NSURLConnection sendAsynchronousRequest:request
//                                                       queue:[NSOperationQueue mainQueue]
//                                           completionHandler:^(NSURLResponse *response,
//                                                               NSData *data, NSError *connectionError)
//                     {
//                         if (data.length > 0 && connectionError == nil)
//                         {
//                             NSDictionary *billingResponse = [NSJSONSerialization JSONObjectWithData:data
//                                                                                             options:0
//                                                                                               error:NULL];
//
//                             if (![[billingResponse valueForKey:@"skuLists"] isKindOfClass:[NSNull class]]) {
//                                 priceDic = [[NSMutableArray alloc]init];
//
//                                 NSArray *price_arr = [billingResponse valueForKey:@"skuLists"];
//                                 for (int i=0; i<[price_arr count]; i++) {
//
//                                     NSDictionary *json = [price_arr objectAtIndex:i];
//                                     [priceDic addObject:json];
//                                 }
//
//                                 NSString *itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",[[priceDic objectAtIndex:0] objectForKey:@"description"],@"#",[[priceDic objectAtIndex:0] objectForKey:@"description"],@"#",[[priceDic objectAtIndex:0] objectForKey:@"quantity"],@"#",price1,@"#",[NSString stringWithFormat:@"%@",vegQty], @"#", [NSString stringWithFormat:@"%d",[[[priceDic objectAtIndex:0] objectForKey:@"taxCode"] intValue]], @"#", [NSString stringWithFormat:@"%.2f",[[[priceDic objectAtIndex:0] objectForKey:@"tax"] doubleValue]]];
//
//                                 if ([cartTotalItems containsObject:itemString]) {
//
//                                     if (![cartItem containsObject:itemString]) {
//
//                                         UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                         [alert show];
//                                         return;
//                                     }
//
//
//                                     UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product already added to the cart" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                     [alert show];
//                                     return;
//
//                                 }
//
//
//                                 if ([[[priceDic objectAtIndex:0] objectForKey:@"quantity"] floatValue] > 0) {
//                                     selected_SKID = [NSString stringWithFormat:@"%@",[[priceDic objectAtIndex:0] objectForKey:@"skuId"]];
//
//
//                                     selected_desc = [[NSString stringWithFormat:@"%@",[[priceDic objectAtIndex:0] objectForKey:@"description"]] copy];
//                                     selected_price = [[NSString stringWithFormat:@"%@",[[[priceDic objectAtIndex:0] objectForKey:@"price"] stringValue]] copy];
//                                     [taxArr addObject:[[priceDic objectAtIndex:0] objectForKey:@"tax"]];
//                                     [cartItemDetails addObject:vegQty];
//                                     [cartItem addObject:itemString];
//                                     [cartTotalItems addObject:itemString];
//                                     [isVoidedArray addObject:[NSNumber numberWithBool:NO]];
//                                     [isVegetable addObject:selected_SKID];
//                                 }
//                                 else{
//                                     [HUD setHidden:YES];
//                                     UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                     [alert show];
//                                 }
//
//
//
//                                 if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//                                     cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
//                                 }
//                                 else {
//                                     cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height + 30);
//                                 }
//                                 scrollView.hidden = NO;
//                                 cartTable.hidden = NO;
//                                 [cartTable reloadData];
//
//                                 SystemSoundID    soundFileObject1;
//                                 NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
//                                 self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                                 AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                                 AudioServicesPlaySystemSound (soundFileObject1);
//
//                                 [self updateValues];
//
//                                 //
//                             }
//
//
//                             else {
//                                 SystemSoundID    soundFileObject1;
//                                 NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                                 self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                                 AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                                 AudioServicesPlaySystemSound (soundFileObject1);
//                                 UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Product not available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                                 [alert show];
//                             }
//
//
//                         }
//                     }];
//
//
//                    //                        });
//                }
//                @catch (NSException *exception) {
//
//                    NSLog(@"%@",exception);
//
//                }
//                @finally {
//
//                    [HUD setHidden:YES];
//
//                }
//
//            }
//            else {
//
//                @try {
//
//                    //
//
//
//
//                    offline = [[OfflineBillingServices alloc]init];
//                    priceDic = [[NSMutableArray alloc]init];
//                    NSDictionary *itemDic = [offline getProductDetails:[NSString stringWithFormat:@"%@",selected_SKID]];
//
//                    if ([itemDic count]>0) {
//                        NSString *taxRate = [offline getTaxForSku:[NSString stringWithFormat:@"%@",[itemDic objectForKey:@"taxCode"]]];
//                        if ([taxRate length]>0) {
//
//                            [taxArr addObject:taxRate];
//                        }
//                        else {
//
//                            taxRate = @"0.00";
//                            [taxArr addObject:taxRate];
//                        }
//
//
//                        NSString *itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",[itemDic objectForKey:@"description"],@"#",[itemDic objectForKey:@"description"],@"#",[itemDic objectForKey:@"quantity"],@"#",price1,@"#",[NSString stringWithFormat:@"%@",vegQty], @"#", [NSString stringWithFormat:@"%d",[[itemDic objectForKey:@"taxCode"] intValue]], @"#", [NSString stringWithFormat:@"%.2f",[taxRate floatValue]]];
//
//                        if ([cartTotalItems containsObject:itemString]) {
//
//                            if (![cartItem containsObject:itemString]) {
//
//                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                [alert show];
//                                return;
//                            }
//
//
//                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product already added to the cart" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                            [alert show];
//                            return;
//
//                        }
//
//
//
//                        selected_desc = [NSString stringWithFormat:@"%@",[[[itemString componentsSeparatedByString:@"#"] objectAtIndex:0] copy]];
//                        selected_price = [NSString stringWithFormat:@"%@",[price1 copy]];
//                        [cartItemDetails addObject:vegQty];
//                        [cartItem addObject:itemString];
//                        [cartTotalItems addObject:itemString];
//                        [isVoidedArray addObject:[NSNumber numberWithBool:NO]];
//
//                        [isVegetable addObject:selected_SKID];
//
//
//
//                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//                            cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
//                        }
//                        else {
//                            cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height + 30);
//                        }
//                        scrollView.hidden = NO;
//                        cartTable.hidden = NO;
//
//                        [cartTable reloadData];
//                        [HUD setHidden:YES];
//
//
//
//                        SystemSoundID    soundFileObject1;
//                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
//                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                        AudioServicesPlaySystemSound (soundFileObject1);
//                        [self updateValues];
//
//                    }
//                    else {
//                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//                        [HUD setHidden:YES];
//                        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                        [alert show];
//                    }
//                }
//                @catch (NSException *exception) {
//                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//                    [HUD setHidden:YES];
//                    UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                    [alert show];
//
//                }
//                @finally {
//
//                    [HUD setHidden:YES];
//                }
//
//            }
//
//            [self saveCartItems:cartTotalItems];
//        }
//            {
//
//                offerLabel.text = result;
//                NSLog(@"%hhd",[transparentView isHidden]);
//                if ([transparentView isHidden]) {
//                    if (!isOfflineService) {
//
//                        selected_SKID = [result copy];
//
//
//                        NSString *time = [NSDateFormatter localizedStringFromDate:[NSDate date] dateStyle:NSDateFormatterShortStyle timeStyle:NSDateFormatterFullStyle];
//                        NSArray *str = [time componentsSeparatedByString:@" "];
//                        NSString *date = [[[str objectAtIndex:0] componentsSeparatedByString:@","] objectAtIndex:0];
//                        NSArray *headerKeys = [NSArray arrayWithObjects:@"accessKey", @"customerId",@"applicationName",@"userName",@"correlationId",@"dateTime", nil];
//
//                        NSArray *headerObjects = [NSArray arrayWithObjects:custID,custID,@"omniRetailer",mail_,@"-",date, nil];
//                        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:headerObjects forKeys:headerKeys];
//
//                        NSArray *keys = [NSArray arrayWithObjects:@"skuId",@"requestHeader",@"storeLocation", nil];
//                        NSArray *objects = [NSArray arrayWithObjects:result,dictionary_,presentLocation, nil];
//
//                        NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
//
//                        NSError * err;
//                        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
//                        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//                        //                    getSkuid.skuID = salesReportJsonString;
//                        @try {
//                            dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
//
//                                WebServiceController *serviceController = [WebServiceController new];
//                                [serviceController setGetSkuDetailsDelegate:self];
//                                [serviceController getSkuDetailsWithData:salesReportJsonString];
//
//                            });
//                        }
//                        @catch (NSException *exception) {
//
//
//                        }
//                        @finally {
//
//
//                        }
//
//                    }
//                    else {
//
//                        @try {
//
//                            selected_SKID = [result copy];
//
//                            offline = [[OfflineBillingServices alloc]init];
//                            priceDic = [[NSMutableArray alloc]init];
//                            NSDictionary *itemDic = [offline getProductDetails:[NSString stringWithFormat:@"%@",result]];
//
//                            if ([itemDic count]>0) {
//                                selected_SKID = [itemDic valueForKey:@"skuId"];
//                                NSString *taxRate = [offline getTaxForSku:[NSString stringWithFormat:@"%@",[itemDic valueForKey:@"taxCode"]]];
//
//                                NSString *itemString = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@",[itemDic  objectForKey:@"description"],@"#",[itemDic objectForKey:@"description"],@"#",[itemDic objectForKey:@"quantity"],@"#",[itemDic objectForKey:@"price"], @"#", [NSString stringWithFormat:@"%@",[itemDic objectForKey:@"taxCode"]]];
//
//                                if ([taxRate length]>0) {
//
//                                    [taxArr addObject:taxRate];
//                                    itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",taxRate];
//                                }
//                                else {
//
//                                    taxRate = @"0.00";
//                                    [taxArr addObject:taxRate];
//                                    itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",taxRate];
//                                }
//                                priceDic = [offline getLocalPriceLists:[NSString stringWithFormat:@"%@",[itemDic valueForKey:@"skuId"]]];
//                                if ([priceDic count] >1) {
//
//                                    [HUD setHidden:YES];
//                                    for (int i=0; i<[priceDic count]; i++) {
//                                        NSString *tax_code = [[itemString componentsSeparatedByString:@"#"] objectAtIndex:4];
//                                        NSString *desc = [[itemString componentsSeparatedByString:@"#"]objectAtIndex:1];
//                                        NSMutableDictionary *dic = [[priceDic objectAtIndex:i] mutableCopy];
//                                        [dic setValue:tax_code forKey:@"taxCode"];
//                                        [dic setValue:taxRate forKey:@"tax"];
//                                        [dic setValue:desc forKey:@"description"];
//                                        [priceDic replaceObjectAtIndex:i withObject:dic];
//                                    }
//                                    transparentView.hidden = NO;
//                                    [priceTable reloadData];
//
//
//                                }
//                                else {
//                                    if ([[[itemString componentsSeparatedByString:@"#"] objectAtIndex:2] intValue]!=0) {
//
//                                        selected_desc = [[itemString componentsSeparatedByString:@"#"] objectAtIndex:1];
//                                        selected_price = [[[itemString componentsSeparatedByString:@"#"] objectAtIndex:3] copy];
//                                        [self getSkuDetailsHandler:itemString];
//
//                                    }
//                                    else {
//
//                                        [HUD setHidden:YES];
//                                        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                        [alert show];
//                                    }
//                                }
//                            }
//                            else {
//
//                                [HUD setHidden:YES];
//                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                                [alert show];
//                            }
//                        }
//                        @catch (NSException *exception) {
//
//                            [HUD setHidden:YES];
//                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                            [alert show];
//
//                        }
//
//                    }
//
//                }
//                else {
//                    SystemSoundID    soundFileObject1;
//                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//
//                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//                    AudioServicesPlaySystemSound (soundFileObject1);
//
//                }
//            }
//        }
//        else {
//            barcodeBtn.tag = 0;
//        }
//
//}
//- (void)zxingControllerDidCancel:(ZXingWidgetController*)controller {
//
//    [self dismissViewControllerAnimated:YES completion:NULL];
//
//    barcodeBtn.tag = 0;
//    giftScannerBtn.tag = 0;
//    //
//}


// Handle the response from getSkuID.

- (void) getSkuIDHandler: (id) value {
    
    // Handle errors
    if([value isKindOfClass:[NSError class]]) {
        //NSLog(@"%@", value);
        return;
    }
    
    // Handle faults
    //    if([value isKindOfClass:[SoapFault class]]) {
    //        //NSLog(@"%@", value);
    //        return;
    //    }
    
    
    // Do something with the NSString* result
    NSString* result = (NSString*)value;
    
    NSArray *list = [result componentsSeparatedByString:@"#"];
    
    [skuArrayList addObjectsFromArray:list];
    //[skuArrayList removeObjectAtIndex: 0];
    //[skuArrayList removeLastObject];
    
}





-(void)callSkuIdService:(NSString *)searchString startIndex:(NSString *)start_index {
    
    CheckWifi *wifi = [[CheckWifi alloc]init];
    
    BOOL status = [wifi checkWifi];
    
    if (status) {
        
        
        [HUD setHidden:NO];
        HUD.labelText = @"Getting Product Details";
        @try {
            NSArray *keys = @[@"requestHeader",@"startIndex",@"searchCriteria",@"storeLocation"];
            NSArray *objects = @[[RequestHeader getRequestHeader],start_index,searchString,presentLocation];
            
            NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            
            NSError * err;
            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
            NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            //
            if (tempSkuArrayList.count!=0) {
                [tempSkuArrayList removeAllObjects];
            }
            //
            WebServiceController *serviceController = [WebServiceController new];
            serviceController.searchProductDelegate = self;
            [serviceController searchProductsWithData:salesReportJsonString];
            
            
        }
        @catch (NSException *exception) {
            
            [HUD setHidden:YES];
            
        }
    }
    else {
        
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Please enable wi-fi or mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alertView show];
    }
}

//- (void)textFieldDidBeginEditing:(UITextField *)textField {
//    if (textField == commentfield) {
//        [UIView beginAnimations:nil context:NULL];
//        [UIView setAnimationDelegate:self];
//        [UIView setAnimationDuration:0.5];
//        [UIView setAnimationBeginsFromCurrentState:YES];
//        commentfield.frame = CGRectMake(commentfield.frame.origin.x, (commentfield.frame.origin.y - 125.0), commentfield.frame.size.width, commentfield.frame.size.height);
//        [UIView commitAnimations];
//    }
//}


//- (void)textFieldDidEndEditing:(UITextField *)textField {
//
//    if (textField == qtyFeild) {
//        qty1.text = qtyFeild.text;
//    }
//}


// NextButtonPressed handing...
- (void) cancelButtonPressed:(id) sender {
    
}

- (IBAction)okEditPricePressed:(id)sender {
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    [newPriceField resignFirstResponder];
    
    
    //commented by Srinivasulu on 21/08/2017....
    //    BOOL shouldCallOffers = YES;
    
    
    //upto here on 21/08/2017....
    
    
    NSString *value = [newPriceField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    if(value.floatValue == 0 || value.length == 0){
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Valid Price." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
        newPriceField.text = nil;
    }
    
    //added by Srinivasulu on 21/08/2017....
    
    else if(!(editPriceReasonTxt.text).length){
        
        float y_axis = self.view.frame.size.height - 350;
        
        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_select_the_reason_for_editing_the_item_price", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
    }
    
    //upto here on 21/08/2017....
    
    else {
        [editPricePopOver dismissPopoverAnimated:YES];
        @try {
            NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[[sender tag]]];
            NSArray *temp = [cartItem[positionCount] componentsSeparatedByString:@"#"];
            cartItem[positionCount] = [NSString stringWithFormat:@"%@%@%@%@%@%@%d%@%@%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", [temp[3] intValue], @"#", [NSString stringWithFormat:@"%.2f",(newPriceField.text).floatValue], @"#", temp[5], @"#", temp[6], @"#", temp[7] ,@"#",temp[8], @"#", temp[9]];
            cartTotalItems[[sender tag]] = [NSString stringWithFormat:@"%@%@%@%@%@%@%d%@%@%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", [temp[3] intValue], @"#", [NSString stringWithFormat:@"%.2f",(newPriceField.text).floatValue], @"#", temp[5], @"#", temp[6], @"#", temp[7] ,@"#", temp[8], @"#", temp[9]];
            editedPriceArr[[sender tag]] = [NSString stringWithFormat:@"%.2f",(newPriceField.text).floatValue];
            
            
            //added by Srinivasulu on 21/08/2017....
            
            @try {
                
                NSMutableDictionary * productInfoDic = [productInfoArr[[sender tag]] mutableCopy];
                
                productInfoDic[EDIT_PRICE_REASON] = editPriceReasonTxt.text;
                
                productInfoArr[[sender tag]] = productInfoDic;
                
                
                
                
                //added by Srinivasulu on 13/09/2017....
                
                if(itemDiscountArr.count > [sender tag])
                    itemDiscountArr[[sender tag]] = @0;
                
                if(itemDiscountDescArr.count > [sender tag])
                    itemDiscountDescArr[[sender tag]] = @"";
                
                //upto here on 13/09/2017....
                
                
                
            } @catch (NSException *exception) {
                
            }
            //upot here on 21/08/2017....
            
            
            
            float price = 0;
            
            for (int i=0; i<cartItem.count; i++) {
                
                price = price + ([cartItem[i] componentsSeparatedByString:@"#"][5].intValue*[cartItem[i] componentsSeparatedByString:@"#"][4].floatValue);
            }
            
            NSMutableDictionary *inputDic = [NSMutableDictionary new];
            [inputDic setValue:temp[0] forKey:@"skuID"];
            [inputDic setValue:[NSString stringWithFormat:@"%.2f",[temp[5] floatValue]] forKey:@"qty"];
            [inputDic setValue:[NSString stringWithFormat:@"%.2f",price] forKey:@"totalPrice"];
            [inputDic setValue:[NSString stringWithFormat:@"%.02f",([temp[4] floatValue])] forKey:@"price"];
            
            [HUD setHidden:NO];
            
            [self callOffersForScanning:[inputDic valueForKey:@"skuID"] qty:[inputDic valueForKey:@"qty"] total:[inputDic valueForKey:@"totalPrice"] itemPrice:[inputDic valueForKey:@"price"]];
            
            
            //            [HUD showWhileExecuting:@selector(calculateDealsAndOffers:) onTarget:self withObject:inputDic animated:true];
            
            
            [cartTable reloadData];
            
            if (dealDataItems.count!=0) {                   //removing deals....
                
                for (int i = 0; i < dealDataItems.count; i++) {
                    
                    DealsController *_dealsController = dealDataItems[i];
                    _dealsController.isDealApplied = NO;
                }
            }
            
            [self updateValues];
            
            //commented by Srinivasulu on 23/08/2017...
            //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
            
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            
            //upto here on 23/08/2017....
            
            
            [defaults setValue:[WebServiceUtility getCurrentDate] forKey:SCAN_END_TIME];
            [self saveCartItems:cartTotalItems];
            
        }
        @catch (NSException *exception) {
            
            [HUD setHidden:YES];
            NSLog(@"%@",exception.name);
        }
        @finally {
            
            
            
            
        }
        
    }
}

// okButtonPressed handler for quantity changed..
- (IBAction)okButtonPressed:(id)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    [qtyFeild resignFirstResponder];
    cartTable.userInteractionEnabled = TRUE;
    barcodeBtn.userInteractionEnabled = TRUE;
    eraseButton.userInteractionEnabled = TRUE;
    segmentedControl.userInteractionEnabled = TRUE;
    BillField.userInteractionEnabled = TRUE;
    
    BOOL shouldCallOffers = YES;
    
    NSString * value = [qtyFeild.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    // PhoNumber validation...
    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
    BOOL isNumber = [decimalTest evaluateWithObject:qtyFeild.text];
    int qty = value.intValue;
    
    //    MBProgressHUD *HUD_ = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
    //    [self.navigationController.view addSubview:HUD_];
    //    // Regiser for HUD callbacks so we can remove it from the window at the right time
    //    HUD_.delegate = self;
    //    HUD_.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
    //    HUD_.dimBackground = YES;
    //    HUD_.mode = MBProgressHUDModeCustomView;
    //    // Show the HUD
    //    [HUD_ show:YES];
    //    //
    //    [HUD_ setLabelText:@"Updating.."];
    
    if (!isOfflineService) {
        if((qtyFeild.text).floatValue==0){
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Valid Quantity." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
            qtyFeild.text = nil;
            
        }
        else if (![zeroStockAvailInfoArr[tagid] boolValue] && ((qtyFeild.text).floatValue > [cartTotalItems[tagid] componentsSeparatedByString:@"#"][3].floatValue)) {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Quantity Should be Less than or Equal to  Availble Quantity" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else{
            
            @try {
                
                qtyChangeDisplyView.hidden = YES;
                
                NSString *skuid =  [cartTotalItems[tagid] componentsSeparatedByString:@"#"][0];
                dealoroffersTxt.text = @"0.0";
                
                
                // replace the cart array by new values ..
                float price = 0.0;
                NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[tagid]];
                NSArray *temp = [cartItem[positionCount] componentsSeparatedByString:@"#"];
                
                
                //changed by Srinivasulu on 16/01/2017....
                
                [qty1 setTitle:[NSString stringWithFormat:@"%.2f",(qtyFeild.text).floatValue] forState:UIControlStateNormal] ;
                
                //upto here on 16/01/2017 ....
                
                cartItem[positionCount] = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", temp[3], @"#", [temp[4] floatValue], @"#", qtyFeild.text, @"#", temp[6], @"#", temp[7], @"#", temp[8], @"#", temp[9]];
                cartTotalItems[tagid] = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", temp[3], @"#", [temp[4] floatValue], @"#", qtyFeild.text, @"#", temp[6], @"#", temp[7], @"#", temp[8], @"#", temp[9]];
                cartItemDetails[positionCount] = qtyFeild.text;
                
                //added by Srinivasulu on 22/07/2017....
                
                if(itemDiscountArr.count > tagid)
                    itemDiscountArr[tagid] = @0;
                
                if(itemDiscountDescArr.count > tagid)
                    itemDiscountDescArr[tagid] = @"";
                
                //upto here on 22/07/2017....
                
                for (int i=0; i<cartItem.count; i++) {
                    
                    DealsController *_dealsController = [[DealsController alloc] init];
                    NSDictionary *dealSkuids_ = _dealsController.productData;
                    
                    for (int d=0 ; d<dealSkuids_.allKeys.count; d++) {
                        
                        if ([[cartItem[i] componentsSeparatedByString:@"#"][0] isEqualToString:dealSkuids_.allKeys[d]] && (qty == [[dealSkuids_ valueForKey:[cartItem[i] componentsSeparatedByString:@"#"][0]][1] intValue])) {
                            
                            shouldCallOffers = NO;
                            
                        }
                        
                    }
                    price = price + ([cartItem[i] componentsSeparatedByString:@"#"][5].intValue*[cartItem[i] componentsSeparatedByString:@"#"][4].floatValue);
                }
                NSArray *arr = [cartItem[positionCount] componentsSeparatedByString:@"#"];
                [HUD setHidden:NO];
                
                NSMutableDictionary *inputDic = [NSMutableDictionary new];
                [inputDic setValue:skuid forKey:@"skuID"];
                [inputDic setValue:[NSString stringWithFormat:@"%d",qty] forKey:@"qty"];
                [inputDic setValue:[NSString stringWithFormat:@"%.2f",price] forKey:@"totalPrice"];
                [inputDic setValue:[NSString stringWithFormat:@"%.02f",([arr[5] intValue] * [arr[4] floatValue])] forKey:@"price"];
                
                // [self performSelectorInBackground:@selector(calculateDealsAndOffers:) withObject:inputDic];
                
                //chnaged by Srinivasulu on 04/10/2017....
                //reason is -- In thread call's we should not right UIrelated code.... other wise in some case.... It will crashes....
                
                // [HUD showWhileExecuting:@selector(calculateDealsAndOffers:) onTarget:self withObject:inputDic animated:true];
                [self calculateDealsAndOffers:inputDic];
                
                //upto here on 04/10/2017....
                
                
                qtyChangeDisplyView.hidden = YES;
                
                flag = true;
                
                [cartTable reloadData];
                
                if (dealDataItems.count!=0) {                   //removing deals....
                    
                    for (int i = 0; i < dealDataItems.count; i++) {
                        
                        DealsController *_dealsController = dealDataItems[i];
                        _dealsController.isDealApplied = NO;
                    }
                }
                
                [self updateValues];
                
                //commented by Srinivasulu on 23/08/2017...
                //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
                //    defaults = [NSUserDefaults standardUserDefaults];
                
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                
                //upto here on 23/08/2017....
                
                [defaults setValue:[WebServiceUtility getCurrentDate] forKey:SCAN_END_TIME];
                [self saveCartItems:cartTotalItems];
                
                //    [HUD setHidden:YES];
                
            }
            @catch (NSException *exception) {
                
                [HUD setHidden:YES];
                
                NSLog(@"exception %@",exception);
            }
            
        }
    }
    else {
        //        if([value length] == 0 || !isNumber){
        //
        //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Quantity in Number." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //            [alert show];
        //
        //            qtyFeild.text = NO;
        //        }
        if((qtyFeild.text).floatValue==0){
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Enter Valid Quantity." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
            qtyFeild.text = nil;
        }
        else{
            
            @try {
                
                qtyChangeDisplyView.hidden = YES;
                
                NSString *skuid =  [cartTotalItems[tagid] componentsSeparatedByString:@"#"][0];
                dealoroffersTxt.text = @"0.0";
                
                // replace the cart array by new values ..
                float price = 0.0;
                NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[tagid]];
                NSArray *temp = [cartItem[positionCount] componentsSeparatedByString:@"#"];
                
                //changed by Srinivasulu on 16/01/2017....
                
                [qty1 setTitle:[NSString stringWithFormat:@"%.2f",(qtyFeild.text).floatValue] forState:UIControlStateNormal] ;
                
                //NSString * qtyStr =
                //upto here on 16/01/2017 ....
                
                
                //                [cartItem replaceObjectAtIndex:positionCount withObject:[NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@%@%@", [temp objectAtIndex:0], @"#", [temp objectAtIndex:1], @"#", [temp objectAtIndex:2], @"#", [temp objectAtIndex:3], @"#", [[temp objectAtIndex:4] floatValue], @"#", qty1.titleLabel.text, @"#", [temp objectAtIndex:6], @"#", [temp objectAtIndex:7], @"#", [temp objectAtIndex:8], @"#", [temp objectAtIndex:9]]];
                //                [cartTotalItems replaceObjectAtIndex:tagid withObject:[NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@%@%@", [temp objectAtIndex:0], @"#", [temp objectAtIndex:1], @"#", [temp objectAtIndex:2], @"#", [temp objectAtIndex:3], @"#", [[temp objectAtIndex:4] floatValue], @"#", qty1.titleLabel.text, @"#", [temp objectAtIndex:6], @"#", [temp objectAtIndex:7], @"#", [temp objectAtIndex:8], @"#", [temp objectAtIndex:9]]];
                //                [cartItemDetails replaceObjectAtIndex:positionCount withObject:qty1.titleLabel.text];
                
                cartItem[positionCount] = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", temp[3], @"#", [temp[4] floatValue], @"#", value, @"#", temp[6], @"#", temp[7], @"#", temp[8], @"#", temp[9]];
                cartTotalItems[tagid] = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", temp[3], @"#", [temp[4] floatValue], @"#", value, @"#", temp[6], @"#", temp[7], @"#", temp[8], @"#", temp[9]];
                cartItemDetails[positionCount] = value;
                
                //added by Srinivasulu on 22/07/2017....
                
                if(itemDiscountArr.count > tagid)
                    itemDiscountArr[tagid] = @0;
                
                if(itemDiscountDescArr.count > tagid)
                    itemDiscountDescArr[tagid] = @"";
                
                //upto here on 22/07/2017....
                
                
                for (int i=0; i<cartItem.count; i++) {
                    
                    DealsController *_dealsController = [[DealsController alloc] init];
                    NSDictionary *dealSkuids_ = _dealsController.productData;
                    
                    for (int d=0 ; d<dealSkuids_.allKeys.count; d++) {
                        
                        if ([[cartItem[i] componentsSeparatedByString:@"#"][0] isEqualToString:dealSkuids_.allKeys[d]] && (qty == [[dealSkuids_ valueForKey:[cartItem[i] componentsSeparatedByString:@"#"][0]][1] intValue])) {
                            
                            shouldCallOffers = NO;
                            
                        }
                        
                    }
                    price = price + ([cartItem[i] componentsSeparatedByString:@"#"][5].intValue*[cartItem[i] componentsSeparatedByString:@"#"][4].floatValue);
                }
                NSArray *arr = [cartItem[positionCount] componentsSeparatedByString:@"#"];
                [HUD setHidden:NO];
                
                NSMutableDictionary *inputDic = [NSMutableDictionary new];
                [inputDic setValue:skuid forKey:@"skuID"];
                
                
                [inputDic setValue:[NSString stringWithFormat:@"%d",qty] forKey:@"qty"];
                
                
                
                
                [inputDic setValue:[NSString stringWithFormat:@"%.2f",price] forKey:@"totalPrice"];
                [inputDic setValue:[NSString stringWithFormat:@"%.02f",([arr[5] intValue] * [arr[4] floatValue])] forKey:@"price"];
                
                // [self performSelectorInBackground:@selector(calculateDealsAndOffers:) withObject:inputDic];
                
                
                //changed by Srinivasulu on  04/10/2017.....
                //reason is threading will result in crash....
                
                //                [HUD showWhileExecuting:@selector(calculateDealsAndOffers:) onTarget:self withObject:inputDic animated:true];
                [self calculateDealsAndOffers:inputDic];
                
                //upto here on 04/10/2017....
                
                
                
                
                qtyChangeDisplyView.hidden = YES;
                
                flag = true;
                
                [cartTable reloadData];
                
                //                [HUD setHidden:YES];
                if (dealDataItems.count!=0) {                   //removing deals....
                    
                    for (int i = 0; i < dealDataItems.count; i++) {
                        
                        DealsController *_dealsController = dealDataItems[i];
                        _dealsController.isDealApplied = NO;
                    }
                }
                
                [self updateValues];
                [self updateItemScanTime];
                [self saveCartItems:cartTotalItems];
            }
            @catch (NSException *exception) {
                
                [HUD setHidden:YES];
                
                NSLog(@"exception %@",exception);
            }
            
        }
        
    }
    
}

-(void)calculateDealsAndOffers:(NSMutableDictionary *)inputDic{
    
    //changed by Srinivasulu on 13/02/2018....
    
    if (isToCallApplyCampaigns && !isNewReturnBill)
        
        //upto here on 13/02/2018....
        
        [self callOffersForScanning:[inputDic valueForKey:@"skuID"] qty:[inputDic valueForKey:@"qty"] total:[inputDic valueForKey:@"totalPrice"] itemPrice:[inputDic valueForKey:@"price"]];
    else
        [HUD setHidden:YES];
    
}

// cancelButtonPressed handler quantity changed view cancel..
- (IBAction)QtyCancelButtonPressed:(id)sender {
    
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    @try {
        [qtyFeild resignFirstResponder];
        [segmentedControl setUserInteractionEnabled:YES];
        qtyChangeDisplyView.hidden = YES;
        cartTable.userInteractionEnabled = TRUE;
        eraseButton.userInteractionEnabled = TRUE;
        barcodeBtn.userInteractionEnabled = TRUE;
        BillField.userInteractionEnabled = TRUE;
        
        [cartTable reloadData];
    }
    @catch (NSException *exception) {
        
        
    }
    
    
    //    [cartTable reloadData];
    //    [qtyCancelButton release];
}



-(void)textChange:(NSNotification *)notification {
    
    if(giftSearchBtn == nil){
        giftSearchBtn = [[UIButton alloc] init];
        giftSearchBtn.tag = 3;
    }
    
    UITextField *textfield = notification.object;
    if (textfield == nil) {
        textfield = phoneNumberText;
    }
    if (textfield == giftNo) {
        
        if (giftNo.text.length == 5) {
            [giftNo resignFirstResponder];
            giftID.text = nil;
            [[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
            if (![giftVoucherArr containsObject:giftNo.text] && (giftID.text).length == 0) {
                [self giftContinue:(UIButton *)giftSearchBtn];
            }
            else {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
        }
    }
    else if (textfield == giftID){
        if (giftID.text.length == 16) {
            [giftID resignFirstResponder];
            giftNo.text = nil;
            [[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
            if (![giftVoucherArr containsObject:giftID.text] && (giftNo.text).length == 0) {
                [self giftContinue:(UIButton *)giftSearchBtn];
            }
            else {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
        }
    }
    else if (textfield == phoneNumberText){

        if (phoneNumberText.text.length == 10) {
            [phoneNumberText resignFirstResponder];
            giftNo.text = nil;
            [[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
            if (![giftVoucherArr containsObject:giftID.text] && (giftNo.text).length == 0) {
                [self giftContinue:(UIButton *)giftSearchBtn];
            }
            else {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
        }
    }
    
    else if (textfield == creditNoteTxt){
        if (creditNoteTxt.text.length == 19) {
            [creditNoteTxt resignFirstResponder];
            [self getCreditNoteDetailsForId:creditNoteTxt.text];
        }
    }
}

- (void)getCreditNoteDetailsForId:(NSString *)creditNoteStr {
    
    @try {
        
        [HUD setHidden:NO];
        
        //addded by Srinivasulu on 17/03/2018....
        
        [HUD setLabelText:NSLocalizedString(@"getting_creditnote_info_", nil)];
        
        //upto here on 17/03/2018....
        
        NSMutableDictionary *orderDetails = [NSMutableDictionary dictionaryWithObjects:@[[RequestHeader getRequestHeader],creditNoteStr] forKeys:@[REQUEST_HEADER,@"creditNoteNo"]];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:orderDetails options:0 error:&err];
        NSString * orderJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        NSString *serviceUrl = [WebServiceUtility getURLFor:GET_CREDIT_NOTE];
        serviceUrl = [NSString stringWithFormat:@"%@%@",serviceUrl,orderJsonString];
        serviceUrl = [WebServiceUtility addPercentEscapesFor:serviceUrl];
        
        NSURL *url = [NSURL URLWithString:serviceUrl];
        NSMutableURLRequest  *request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                            timeoutInterval:60.0];
        request.HTTPMethod = @"GET";
        
        //        NSError *error = nil;
        //        NSHTTPURLResponse *responseCode = nil;
        //
        //        NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&responseCode error:&error];
        //        NSDictionary *billingResponse = [NSJSONSerialization JSONObjectWithData:data options:0
        //                                                                          error:NULL];
        
        [NSURLConnection sendAsynchronousRequest:request
                                           queue:[NSOperationQueue mainQueue]
                               completionHandler:^(NSURLResponse *response,
                                                   NSData *data, NSError *connectionError)
         {
             if (data.length > 0 && connectionError == nil)
             {
                 NSDictionary *billingResponse = [NSJSONSerialization JSONObjectWithData:data
                                                                                 options:0
                                                                                   error:NULL];
                 
                 NSLog(@"%@",billingResponse);
                 
                 [HUD setHidden:YES];
                 
                 NSArray *creditReturnNotes = [billingResponse valueForKey:@"returnNotes"];
                 if (creditReturnNotes.count) {
                     NSDictionary *creditNoteDic = creditReturnNotes[0];
                     creditNoteTotalLbl.text = @"CN Total :";
                     creditNoteBalLbl.text = @"CN Balance :";
                     creditNoteStatusLbl.text = @"CN Status :";
                     if ([[creditNoteDic valueForKey:@"status"] boolValue]) {
                         creditNoteTotalLbl.text = [NSString stringWithFormat:@"%@ %.2f",creditNoteTotalLbl.text,[[creditNoteDic valueForKey:@"credit_amount"] floatValue]];
                         creditNoteBalLbl.text = [NSString stringWithFormat:@"%@ %.2f",creditNoteBalLbl.text,[[creditNoteDic valueForKey:@"balAmount"] floatValue]];
                         creditNoteStatusLbl.text = [NSString stringWithFormat:@"%@ %@",creditNoteStatusLbl.text,@"Available"];
                         payTxt2.text = [NSString stringWithFormat:@"%.2f",[[creditNoteDic valueForKey:@"balAmount"] floatValue]];
                         if ((payTxt1.text).floatValue > (payTxt2.text).floatValue) {
                             finalBillDue = [NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue - (payTxt2.text).floatValue];
                         }
                         creditNoteTotalLbl.textColor = [UIColor greenColor];
                         creditNoteBalLbl.textColor = [UIColor greenColor];
                         creditNoteStatusLbl.textColor = [UIColor greenColor];
                         
                     }
                     else {
                         creditNoteTotalLbl.text = [NSString stringWithFormat:@"%@%.2f",creditNoteTotalLbl.text,[[creditNoteDic valueForKey:@"credit_amount"] floatValue]];
                         creditNoteBalLbl.text = [NSString stringWithFormat:@"%@%.2f",creditNoteBalLbl.text,[[creditNoteDic valueForKey:@"balAmount"] floatValue]];
                         creditNoteStatusLbl.text = [NSString stringWithFormat:@"%@%@",creditNoteStatusLbl.text,@"Already Used"];
                         creditNoteTotalLbl.textColor = [UIColor redColor];
                         creditNoteBalLbl.textColor = [UIColor redColor];
                         creditNoteStatusLbl.textColor = [UIColor redColor];
                         
                     }
                 }
             }
             else {
                 [HUD setHidden:YES];
             }
         }];
        
    } @catch (NSException *exception) {
        [HUD setHidden:YES];
        
    } @finally {
        
    }
}
//- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
//{
//    [newBillField resignFirstResponder];
//}





// Commented by roja on 17/10/2019.. // reason cardPaymentCall method contains SOAP Service call .. so taken new method with same(cardPaymentCall) method name which contains REST service call....
// At the time of converting SOAP call's to REST

//-(void)cardPaymentCall{
//
//
//    if((payTxt2.text).floatValue < minPayAmt) {
//
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:NSLocalizedString(@"min_payment_not_reached", nil), minPayAmt] message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil, nil];
//        [alert show];
//        return;
//    }
//
//
//    NSString *phoneValue = [phnotext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
//
//    if ((payTxt2.text).floatValue==0) {
//
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Paid amount cannot be zero" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//        [alert show];
//        return;
//    }
//
//
//    if ([cardPaymentSelection isEqualToString:@"Mobile POS"]) {
//        if (phoneValue.length == 0) {
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Phone Number is mandatory" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//            [alert show];
//        }
//
//        //changed by Srinivasulu on 21/04/2017....
//        //reason credit bill added newly on this day....
//
//        //        else if([deliveryType isEqualToString:@"DD"])
//        else if (([deliveryType isEqualToString:@"DD"]) || ([deliveryType isEqualToString:@"TA-CB"]) || ([deliveryType isEqualToString:@"DD-CB"])) {
//
//            //upto here on 21/04/2017....
//
//            if ((streettext.text).length == 0) {
//
//                [self setSiblings:paymentView enabled:FALSE];
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter the street" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [alert show];
//            }
//            else if ((locltytext.text).length == 0) {
//
//                [self setSiblings:paymentView enabled:FALSE];
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter localty." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [alert show];
//            }
//            else if ((citytext.text).length == 0) {
//
//                [self setSiblings:paymentView enabled:FALSE];
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter city." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [alert show];
//            }
//            else if ((pintext.text).length == 0){
//
//                [self setSiblings:paymentView enabled:FALSE];
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter pin." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [alert show];
//            }
//
//            else {
//
//                CustomerServiceSoapBinding *custBindng =  [CustomerServiceSvc CustomerServiceSoapBinding] ;
//                CustomerServiceSvc_createCustomer *aParameters = [[CustomerServiceSvc_createCustomer alloc] init];
//
//
//                NSArray *loyaltyKeys = @[@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city",@"requestHeader"];
//
//                NSArray *loyaltyObjects = @[phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text,[RequestHeader getRequestHeader]];
//                NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                NSError * err_;
//                NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
//                NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//                aParameters.customerDetails = loyaltyString;
//
//
//                CustomerServiceSoapBindingResponse *response = [custBindng createCustomerUsingParameters:(CustomerServiceSvc_createCustomer *)aParameters];
//                NSArray *responseBodyParts = response.bodyParts;
//                for (id bodyPart in responseBodyParts) {
//                    if ([bodyPart isKindOfClass:[CustomerServiceSvc_createCustomerResponse class]]) {
//                        CustomerServiceSvc_createCustomerResponse *body = (CustomerServiceSvc_createCustomerResponse *)bodyPart;
//                        // printf("\nresponse=%d",[body.createCustomerReturn UTF8String]);
//                        NSError *e;
//
//                        NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
//                                                                              options: NSJSONReadingMutableContainers
//                                                                                error: &e];
//                        BOOL result = [JSON1[@"status"] boolValue];
//                        if (result) {
//
//                            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
//                                                                                         queue:dispatch_get_main_queue()
//                                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
//                        }
//                        else {
//                            //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Customer Already Registered." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                            //                    [alert show];
//                            //                    [alert release];
//                            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
//                                                                                         queue:dispatch_get_main_queue()
//                                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
//                        }
//                        [HUD setHidden:YES];
//                    }
//                }
//
//            }
//        }
//        else{
//            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
//                                                                         queue:dispatch_get_main_queue()
//                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
//        }
//    }
//    else if ([cardPaymentSelection isEqualToString:@"POS"]){
//
//        if ((cardInfoTxt.text).length==0) {
//
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please provide card info" message:@"" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//            [alert show];
//        }
//        else {
//            [self continuePay1];
//        }
//
//    }
//}



//cardPaymentCall method changed by roja on 17/10/2019.. // reason removed SOAP service call related code and  added REST service call code...
// At the time of converting SOAP call's to REST
-(void)cardPaymentCall{
    
    if((payTxt2.text).floatValue < minPayAmt) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:NSLocalizedString(@"min_payment_not_reached", nil), minPayAmt] message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil, nil];
        [alert show];
        return;
    }
    
    
    NSString *phoneValue = [phnotext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    if ((payTxt2.text).floatValue==0) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Paid amount cannot be zero" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        return;
    }
    
    
    if ([cardPaymentSelection isEqualToString:@"Mobile POS"]) {
        if (phoneValue.length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Phone Number is mandatory" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        
        //changed by Srinivasulu on 21/04/2017....
        //reason credit bill added newly on this day....
        
        //        else if([deliveryType isEqualToString:@"DD"])
        else if (([deliveryType isEqualToString:@"DD"]) || ([deliveryType isEqualToString:@"TA-CB"]) || ([deliveryType isEqualToString:@"DD-CB"])) {
            
            //upto here on 21/04/2017....
            
            if ((streettext.text).length == 0) {
                
                [self setSiblings:paymentView enabled:FALSE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter the street" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if ((locltytext.text).length == 0) {
                
                [self setSiblings:paymentView enabled:FALSE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter localty." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if ((citytext.text).length == 0) {
                
                [self setSiblings:paymentView enabled:FALSE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter city." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if ((pintext.text).length == 0){
                
                [self setSiblings:paymentView enabled:FALSE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter pin." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            
            else {
                
                @try {
                    
                    [HUD setHidden:NO];
                    
                    NSArray *loyaltyKeys = @[@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city",@"requestHeader"];
                    
                    NSArray *loyaltyObjects = @[phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text,[RequestHeader getRequestHeader]];
                    
                    NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                    
                    NSError * err_;
                    NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
                    NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                    
                    WebServiceController * services = [[WebServiceController alloc] init];
                    services.customerServiceDelegate = self;
                    [services createCustomer:loyaltyString];
                } @catch (NSException *exception) {
                    [HUD setHidden:YES];
                    NSLog(@"exception:%@",exception);
                }
                
            }
            
        }
        else{
            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
                                                                         queue:dispatch_get_main_queue()
                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
        }
    }
    else if ([cardPaymentSelection isEqualToString:@"POS"]){
        
        if ((cardInfoTxt.text).length==0) {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please provide card info" message:@"" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
        }
        else {
            [self continuePay1];
        }
    }
}


// added by Roja on 17/10/2019….
- (void)createCustomerSuccessResponse:(NSDictionary *)sucessDictionary{
    
    @try {
        BOOL result = [sucessDictionary [@"status"] boolValue];
        
        if (result) {
            
            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
                                                                         queue:dispatch_get_main_queue()
                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
        }
        else {
            //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Customer Already Registered." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            //                    [alert show];
            //                    [alert release];
            self.bluetoothManager = [[CBCentralManager alloc] initWithDelegate:self
                                                                         queue:dispatch_get_main_queue()
                                                                       options:@{CBCentralManagerOptionShowPowerAlertKey: @(NO)}];
        }

        
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}


// added by Roja on 17/10/2019….
- (void)createCustomerErrorResponse:(NSString *)errorResponse{
    
    @try {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:errorResponse delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];

    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}



#pragma -mark mswipe methods implementation

-(void)onResponseMswipeControllerResults:(id)obj {
    
    [HUD setHidden:YES];
    
    if ([obj isKindOfClass:[MerchantSettings class]]) {
        
        MerchantSettings *result = (MerchantSettings *)obj;
        
        NSLog(@"%hhd%@%@",result.status,result.statusMsg,result.mSessionToken);
        
        settings = result;
        
        self.mSettings = settings ;
        
        [WisePadController sharedController].delegate = self;
        
        if (result.status) {
            
            //            MSwipeViewController *viewcontroller = [[MSwipeViewController alloc]init];
            //            viewcontroller.mSettings = settings;
            //            viewcontroller.total = totalTxt.text;
            //            viewcontroller.phone = phoneTxt.text;
            //            viewcontroller.email = emailTxt.text;
            //
            //            UINavigationController *nc = [[UINavigationController alloc] initWithRootViewController:viewcontroller];
            //            nc.navigationBar.tintColor = [UIColor colorWithRed:100.0/255.0 green:100.0/255.0 blue:100.0/255.0 alpha:1.0];
            //           // [self presentViewController:nc animated:YES completion:nil];
            //            [self.navigationController pushViewController:viewcontroller animated:YES];
            
            cardPayment = [[UIView alloc] init];
            cardPayment.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
            cardPayment.backgroundColor = [UIColor blackColor] ;
            
            mcardSaleData = [[CardSaleData alloc] init];
            
            
            swiperMsgs = [[NSMutableArray alloc] init];
            
            amountView = [[UIView alloc]init];
            
            
            UIView *view1 = [[UIView alloc]init];
            view1.layer.borderColor = [UIColor whiteColor].CGColor;
            view1.layer.borderWidth = 1.0f;
            view1.layer.cornerRadius = 10.0f;
            
            
            sale = [[UILabel alloc] init];
            sale.text = @"Sale";
            sale.font = [UIFont boldSystemFontOfSize:25.0];
            sale.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:25.0];
            sale.textColor=[UIColor whiteColor];
            
            
            host1 = [[UILabel alloc] init];
            host1.textColor = [UIColor whiteColor];
            host1.font = [UIFont systemFontOfSize:22.0];
            host1.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0];
            host1.text  =@"    host offline";
            host1.textColor = [UIColor whiteColor];
            host1.layer.borderColor = [UIColor whiteColor].CGColor;
            host1.layer.borderWidth = 2.0f;
            
            inr = [[UILabel alloc] init];
            inr.textColor = [UIColor lightGrayColor];
            inr.font = [UIFont systemFontOfSize:18];
            inr.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18.0f];
            inr.text  =@"inr";
            
            UILabel  *l1 = [[UILabel alloc] init];
            l1.font = [UIFont systemFontOfSize:18];
            l1.textColor = [UIColor grayColor];
            l1.text  =@"=";
            
            UILabel  *l2 = [[UILabel alloc] init];
            l2.font = [UIFont systemFontOfSize:18];
            l2.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18.0];
            l2.textColor = [UIColor grayColor];
            l2.text  =@"+91";
            
            amt = [[UILabel alloc] init];
            amt.textColor = [UIColor whiteColor];
            amt.font = [UIFont systemFontOfSize:22.0];
            amt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0f];
            amt.backgroundColor = [UIColor clearColor];
            amt.text = netPayLblVal.text;
            
            totalAmt1 = [[UILabel alloc]init];
            totalAmt1.font = [UIFont boldSystemFontOfSize:24.0];
            totalAmt1.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0f];
            totalAmt1.textColor = [UIColor whiteColor];
            totalAmt1.backgroundColor = [UIColor clearColor];
            totalAmt1.text = netPayLblVal.text;
            
            
            phoneNo = [[UILabel alloc]init];
            phoneNo.font = [UIFont fontWithName:@"HelveticaNeueLTStd-LtCn" size:24.0];
            phoneNo.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0];
            phoneNo.textColor = [UIColor whiteColor];
            phoneNo.text = self.phone;
            
            
            nextBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
            nextBtn.layer.borderColor = [UIColor whiteColor].CGColor;
            nextBtn.layer.cornerRadius = 10.0f;
            nextBtn.layer.borderWidth = 1.0f;
            [nextBtn setTitle:@"Next" forState:UIControlStateNormal];
            [nextBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            (nextBtn.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
            [nextBtn addTarget:self action:@selector(nextAction:) forControlEvents:UIControlEventTouchUpInside];
            
            
            cancelBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
            cancelBtn.layer.borderColor = [UIColor whiteColor].CGColor;
            cancelBtn.layer.cornerRadius = 10.0f;
            cancelBtn.layer.borderWidth = 1.0f;
            [cancelBtn setTitle:@"Cancel" forState:UIControlStateNormal];
            [cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            (cancelBtn.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
            [cancelBtn addTarget:self action:@selector(nextAction:) forControlEvents:UIControlEventTouchUpInside];
            
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                // headerView.frame = CGRectMake(10, 0, 200, 200);
                sale.frame = CGRectMake(25, 10, 400, 50);
                //  host1.frame = CGRectMake(self.view.frame.size.width-250, 20, 150, 30);
                inr.frame = CGRectMake(15, 90, 50, 30);
                amt.frame = CGRectMake(self.view.frame.size.width-200, 90, 200, 30);
                l1.frame = CGRectMake(15, 170, 60, 30);
                totalAmt1.frame = CGRectMake(self.view.frame.size.width-200, 170, 200, 30);
                l2.frame = CGRectMake(15, 230, 60, 30);
                phoneNo.frame = CGRectMake(self.view.frame.size.width-200, 230, 400, 30);
                nextBtn.frame = CGRectMake(120, 450, 210, 50);
                cancelBtn.frame = CGRectMake(400,450 , 210, 50);
                view1.frame = CGRectMake(0, 80,self.view.frame.size.width-50 , 300);
                amountView.frame = CGRectMake(10, 100, self.view.frame.size.width-50, 600);
                
                
            }
            
            [amountView addSubview:sale];
            // [amountView addSubview:host1];
            [view1 addSubview:inr];
            [view1 addSubview:amt];
            [view1 addSubview:l1];
            [view1 addSubview:totalAmt1];
            [view1 addSubview:l2];
            [view1 addSubview:phoneNo];
            [amountView addSubview:view1];
            [amountView addSubview:nextBtn];
            [amountView addSubview:cancelBtn];
            [cardPayment addSubview:amountView];
            self.lastConnectedBTv4DeviceName = (NSString *)[self getNSUserDefaultsObject:kLastConnectedBTv4DeviceName];
            
            [WisePadController sharedController].delegate = self;
            [self.view addSubview:cardPayment];
            
        }
        
        else {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:result.statusMsg delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
        }
    }
    
    else {
        
        
        
        [HUD setHidden:YES];
        
        if(processMode == HTTP_PROCESS_CARDSALE) // for the card sale
        {
            CardSaleResults *cardSaleResults = (CardSaleResults*) obj;
            mcardSaleResults = cardSaleResults;
            mcardSaleData.mDate = mcardSaleResults.mDate;
            mcardSaleData.mSwitchCardType = mcardSaleResults.mSwitchCardType;
            mcardSaleData.mTotAmount = payTxt2.text;
            mcardSaleData.mISEMVTrx = isEmvSwiper;
            mcardSaleData.mStanID = mcardSaleResults.mStanID;
            mcardSaleData.mAuthCode = mcardSaleResults.mAuthCode;
            mcardSaleData.mRRNo = mcardSaleResults.mRRNo;
            
            if(isEmvSwiper)
            {
                mcardSaleData.mEmvCardExpdate = mcardSaleResults.mEmvCardExpdate;
                
            }
            
            
            mcardSaleResults = cardSaleResults;
            
            
            
            //if the transaction failed
            if(!cardSaleResults.status)
            {
                
                //[mBtnSubmitCardDetails setEnabled :(true)] ;
                if(isEmvSwiper)
                    [[WisePadController sharedController] sendOnlineProcessResult:@""];
                
                processMode = ALERT_TRXCLOSE;
                
                //            [Constants showDialog : CARDSALE_DIALOG_MSG  msgTxt : cardSaleResults.statusMsg firstBtn: @"Ok" secondBtn : nil delegate: self];
                
                
            }
            else {
                
                if(!isEmvSwiper)
                {
                    //[mBtnSubmitCardDetails setEnabled :(true)] ;
                    
                    processMode = ALERT_TRXCLOSE;
                    
                    status_mswipe = mcardSaleResults.statusMsg;
                    
                    [cardDetails removeFromSuperview];
                    [self signatureView];
                    
                    
                    
                }else{
                    
                    mCardSale_TRXState = CardSale_TRXState_ApprovedOnline;
                    
                    NSString *tlvProcessResultData =  mcardSaleResults.mIssuerAuthCode;
                    
#ifdef IS_DEBUGGING_ON
                    NSString *temp_log_msg = [NSString stringWithFormat:@"The issuer Authenticate code  sendOnlineProcessResult data %@",tlvProcessResultData ] ;
                    Logs(log_tab, temp_log_msg,YES, YES);
#endif
                    
                    [[WisePadController sharedController] sendOnlineProcessResult :tlvProcessResultData];
                    
                    self.mstrEMVProcessTaskType = @"onlinesubmit";
                    
                    
                    [cardDetails removeFromSuperview];
                    
                    [self signatureView];
                    
                    
                }
                
                
            }
            
            
        }
        else if(processMode == HTTP_PROCESS_AUTOVOID){
            
            NSDictionary* arrReceipt = (NSDictionary*) obj;
            
            processMode = ALERT_TRXCLOSE;
            
            UIAlertView *alert   = [[UIAlertView alloc] initWithTitle:@"Sale" message:arrReceipt[@"statusMsg"] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
        }
        else{
            
            NSLog(@"signature");
            
            NSDictionary* arrReceipt = (NSDictionary*) obj;
            
            signature  = [[UIAlertView alloc] initWithTitle:@"Sale" message:arrReceipt[@"statusMsg"] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [signature show];
        }
        
        
    }
    
    
    
    //
    //        if (result.status) {
    //
    //            NSLog(@"%@",totalTxt.text);
    //
    //            [[MswipeWisepadController sharedInstance]processCardSale_EMV:result.mMerchantId sessionToken:result.mSessionToken receipt:@"" phoneNo:@"9985341234" email:@"technolabs@gmail.com" notes:@"" amount:totalTxt.text responsehadnler:self];
    //
    //        }
    
}

-(void)nextAction:(id)sender {
    
    if (sender == (UIButton *)nextBtn) {
        
        [amountView removeFromSuperview];
        
        //    UIBarButtonItem *temp_btnNavLeft = [[UIBarButtonItem alloc] initWithTitle:
        //                                        @"Back" style:UIBarButtonItemStyleBordered target:
        //                                        self action:@selector(onBackKeyAction:)];
        //
        //    [temp_btnNavLeft setTitleTextAttributes: [NSDictionary dictionaryWithObjectsAndKeys:[UIFont systemFontOfSize:22.0], NSFontAttributeName,
        //                                              [UIColor whiteColor], NSForegroundColorAttributeName,nil] forState: UIControlStateNormal];
        //    [self.navigationItem setLeftBarButtonItem:temp_btnNavLeft];
        
        
        transactionView = [[UIView alloc] init];
        
        UILabel *label1 = [[UILabel alloc] init];
        label1.textColor = [UIColor whiteColor];
        label1.text  = [NSString stringWithFormat:@"%@%@",@"inr  ",payTxt2.text];
        label1.font = [UIFont boldSystemFontOfSize:22.0];
        label1.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0];
        
        UILabel *label2 = [[UILabel alloc] init];
        label2.textColor = [UIColor lightGrayColor];
        label2.text  = @"transaction total";
        
        
        info = [[UITextView alloc]init];
        info.backgroundColor = [UIColor clearColor];
        info.layer.cornerRadius = 10.0f;
        info.layer.borderColor = [UIColor whiteColor].CGColor;
        info.layer.borderWidth = 1.0f;
        info.font = [UIFont systemFontOfSize:20.0];
        info.textAlignment = NSTextAlignmentCenter;
        
        startBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
        startBtn.layer.borderColor = [UIColor grayColor].CGColor;
        startBtn.layer.cornerRadius = 10.0f;
        startBtn.layer.borderWidth = 1.0f;
        [startBtn setTitle:@"Start" forState:UIControlStateNormal];
        [startBtn setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];
        (startBtn.titleLabel).font = [UIFont fontWithName:@"HelveticaNeueLTStd-LtCn" size:22.0];
        [startBtn addTarget:self action:@selector(swipeCard:) forControlEvents:UIControlEventTouchUpInside];
        [startBtn setEnabled:NO];
        
        UILabel *label3 = [[UILabel alloc] init];
        label3.textColor = [UIColor lightGrayColor];
        label3.font = [UIFont systemFontOfSize:22.0];
        label3.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0];
        label3.text  = @"device connected";
        
        UILabel *label4 = [[UILabel alloc] init];
        label4.textColor = [UIColor lightGrayColor];
        label4.font = [UIFont systemFontOfSize:22.0];
        label4.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0];
        label4.text  = @"press start";
        
        UILabel *label5 = [[UILabel alloc] init];
        label5.textColor = [UIColor lightGrayColor];
        label5.font = [UIFont systemFontOfSize:22.0];
        label5.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0];
        label5.text  = @"initializing the swiper";
        
        UILabel *label6 = [[UILabel alloc] init];
        label6.textColor = [UIColor lightGrayColor];
        label6.font = [UIFont systemFontOfSize:22.0];
        label6.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0];
        label6.text  = @"please swipe/insert chip card";
        
        [swiperMsgs addObject:label3];
        [swiperMsgs addObject:label4];
        [swiperMsgs addObject:label5];
        [swiperMsgs addObject:label6];
        
        cardDetails = [[UIView alloc] init];
        
        UILabel *details = [[UILabel alloc] init];
        details.textColor = [UIColor whiteColor];
        details.font = [UIFont systemFontOfSize:26.0];
        details.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:26.0];
        details.text = @"Card Details";
        
        card_holder = [[UILabel alloc] init];
        card_holder.textColor = [UIColor whiteColor];
        card_holder.font = [UIFont systemFontOfSize:24.0];
        card_holder.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0];
        
        amount1 = [[UILabel alloc] init];
        amount1.textColor = [UIColor whiteColor];
        amount1.font = [UIFont systemFontOfSize:24.0];
        amount1.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0];
        amount1.text = payTxt2.text;
        
        expiry_date = [[UILabel alloc] init];
        expiry_date.textColor = [UIColor whiteColor];
        expiry_date.font = [UIFont systemFontOfSize:24.0];
        expiry_date.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0f];
        
        last_digits = [[UILabel alloc] init];
        last_digits.textColor = [UIColor whiteColor];
        last_digits.font = [UIFont systemFontOfSize:24.0];
        last_digits.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0f];
        
        continue_transaction = [UIButton buttonWithType:UIButtonTypeRoundedRect];
        continue_transaction.layer.borderColor = [UIColor whiteColor].CGColor;
        continue_transaction.layer.cornerRadius = 10.0f;
        continue_transaction.layer.borderWidth = 1.0f;
        [continue_transaction setTitle:@"Proceed" forState:UIControlStateNormal];
        [continue_transaction setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        (continue_transaction.titleLabel).font = [UIFont fontWithName:@"HelveticaNeueLTStd-LtCn" size:24.0];
        [continue_transaction addTarget:self action:@selector(proceed_transaction:) forControlEvents:UIControlEventTouchUpInside];
        [continue_transaction setEnabled:YES];
        
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            transactionView.frame = CGRectMake(10, 100, self.view.frame.size.width, self.view.frame.size.height);
            cardDetails.frame = CGRectMake(10, 10, self.view.frame.size.width, self.view.frame.size.height);
            sale.frame = CGRectMake(10, 10, 400, 50);
            host1.frame = CGRectMake(self.view.frame.size.width-250, 10, 150, 30);
            label1.frame = CGRectMake(10, 100, 400, 50);
            label2.frame = CGRectMake(10, 130, 500, 50);
            info.frame = CGRectMake(50, 230, 580, 90);
            startBtn.frame = CGRectMake(250, 390, 220, 50);
            label3.frame = CGRectMake(10, 470, 800, 50);
            label4.frame = CGRectMake(10, 520, 800, 50);
            label5.frame = CGRectMake(10, 590, 800, 50);
            label6.frame = CGRectMake(10, 660, 800, 50);
            
            details.frame = CGRectMake(self.view.frame.size.width/2, 5, 200, 60);
            card_holder.frame = CGRectMake(40,10 ,600, 300);
            amount1.frame = CGRectMake(40, 70, 600, 300);
            expiry_date.frame = CGRectMake(40, 220, 400, 150);
            last_digits.frame = CGRectMake(40, 230, 800, 300);
            continue_transaction.frame = CGRectMake(250, 550, 220, 60);
            
        }
        [cardDetails addSubview:details];
        [cardDetails addSubview:card_holder];
        [cardDetails addSubview:expiry_date];
        [cardDetails addSubview:amount1];
        [cardDetails addSubview:last_digits];
        [cardDetails addSubview:continue_transaction];
        cardDetails.hidden = YES;
        
        [transactionView addSubview:sale];
        [transactionView addSubview:host1];
        [transactionView addSubview:label1];
        [transactionView addSubview:label2];
        [transactionView addSubview:info];
        [transactionView addSubview:startBtn];
        [transactionView addSubview:label3];
        [transactionView addSubview:label4];
        [transactionView addSubview:label5];
        [transactionView addSubview:label6];
        [cardPayment addSubview:transactionView];
        [cardPayment addSubview:cardDetails];
        
        
        [WisePadController sharedController].delegate = self;
        
        [self start];
    }
    else {
        
        [cardPayment removeFromSuperview];
        
    }
    
}

-(void)start {
    
    if (![[WisePadController sharedController] isDevicePresent])
    {
#ifdef IS_DEBUGGING_ON
        Logs(log_tab ,@"Device not present connecting to device in the back ground",true, true);
#endif
        
        //[NSThread detachNewThreadSelector:@selector(checkConnections) toTarget:self withObject:nil];
        [self checkConnections];
    }
    else{
        
        
        [self setWisePadStateSequnce :@"device connected" step:0];
        [self setWisePadResultsInfo:@"press start" localizedmsg:nil];
        [startBtn setEnabled:YES];
        
        //[mBtnSwipe setTitle:@"Start" forState:UIControlStateNormal];
        //        [mBtnSwipe setHidden:NO];
        //        [mBtnConnect setHidden:YES];
        
        
    }
    
}

-(BOOL)checkConnections
{
    //the ios pairing works differenlty, the paired list is not available, and the scanning
    //of the pairing is done internally in the sdk and are notify through the funcation.
    //onWisePadBTv4DeviceListRefresh
    
    NSMutableArray *deviceNameArray = [NSMutableArray array];
    [deviceNameArray addObject:@"WisePad"];
    [deviceNameArray addObject:@"WP"];
    [[WisePadController sharedController] scanBTv4:deviceNameArray];
    [self setWisePadResultsInfo:@"scanning..." localizedmsg:nil];
    mConnesctionState = WisePadConnectionState_scanning;
    NSString* txt =@"scanning devices";
    [self setWisePadStateSequnce :txt step:0];
    
    // [(UILabel*)[viewDeviceListPicker viewWithTag:(5)] setText:@"searching for devices..."];
    
    return YES;
}


-(void) showCreditDetailsScreen
{
    cardDetails.hidden = NO;
    
    mCardSale_TRXState = CardSale_TRXState_Completed;
    
    NSString *card4digits=@"";
    
    int ilen1=(int)(mcardSaleData.mCreditCardNo).length;
    
    if(ilen1>=4)
        
        card4digits=[mcardSaleData.mCreditCardNo substringWithRange:NSMakeRange(ilen1-4, 4)];
    else
        card4digits=mcardSaleData.mCreditCardNo;
    
    card4digits = [self removeAlpaChars:card4digits];
    
    if(!isEmvSwiper)
    {
        
        if((mCardResults & MCRCardResults_AMEX_CARD) == MCRCardResults_AMEX_CARD)
        {
            // [Constants showAlertWithInputBox:self];
            
            
        }else{
            
            card_holder.text = [NSString stringWithFormat:@"%@",mcardSaleData.mCardHolderName];
            last_digits.text = [NSString stringWithFormat:@"**** **** **** %@",card4digits];
            expiry_date.text= [NSString stringWithFormat:@"%@/%@", [mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(0,2)],[mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(2,2)]];
            
            [transactionView removeFromSuperview];
            
        }
        
    }else{
        
        card_holder.text = [NSString stringWithFormat:@"%@",mcardSaleData.mCardHolderName];
        last_digits.text = [NSString stringWithFormat:@"**** **** **** %@",card4digits];
        if ([mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(0,2)] != nil && [mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(2,2)] != nil) {
            expiry_date.text= [NSString stringWithFormat:@"%@/%@", [mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(0,2)],[mcardSaleData.mExpiryDate substringWithRange : NSMakeRange(2,2)]];
            
        }
        else {
            expiry_date.text= @"xx/xx";
            
        }
        
        [transactionView removeFromSuperview];
        
        
    }
    
}


-(NSString*) removeAlpaChars:(NSString*) st
{
    NSMutableString* stdigits = [[NSMutableString alloc] initWithCapacity:0];
    for(int ictr=0;ictr<st.length; ictr++)
    {
        
        if([st characterAtIndex:ictr] >= 48 &&[st characterAtIndex:ictr]<= 57)
        {
            [stdigits appendString:[st substringWithRange: NSMakeRange(ictr, 1)]];
            
        }
        
        
    }
    
    NSString* ststring = [NSString stringWithString: stdigits];
    //[stdigits release];
    return ststring;
    
}


-(void)onWisePadBTv4DeviceListRefresh:(NSArray *)foundDevices   {
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadBTv4DeviceListRefresh",YES, YES);
#endif
    
    
    if (foundDevices == nil || foundDevices.count==0)
    {
#ifdef IS_DEBUGGING_ON
        Logs(log_tab, @"onWisePadBTv4DeviceListRefresh no devices found",YES, YES);
#endif
        [self onWisePadBTv4ScanTimeout];
        return;
    }
#ifdef IS_DEBUGGING_ON
    NSString* temp_msg = [NSString stringWithFormat:@"onWisePadBTv4DeviceListRefresh devices found %@",foundDevices];
    Logs(log_tab, temp_msg,YES, YES);
#endif
    
    
    
    //this will connect to the last know device, as this function runs in parallel so
    //this could send us the other devcies which isn't the last know devcies,
    //and when the list is shown for selecting the devices on choosing the connect button
    //and if the devices is selected which is not the last connected device,
    //then the scanning stop since the connection process has been initiated, and at this time if this fucnation gets called then do not
    // try to connect since the connection process to the other devcie has already started.
    
    
    //    if(mConnesctionState != WisePadConnectionState_connecting && [[WisePadController sharedController] isDevicePresent] == NO )
    //    {
    //[[WisePadController sharedController] connectBTv4:(CBPeripheral *)[foundDevices objectAtIndex:0]];
    //NSString *lastConnectedBTv4DeviceName = (NSString *)[self getNSUserDefaultsObject:kLastConnectedBTv4DeviceName];
    
    
    NSString *foundDeviceName = @"";
    
    //if (lastConnectedBTv4DeviceName != nil && [lastConnectedBTv4DeviceName length] > 0){
    for (int i=0 ; i<foundDevices.count; i++) {
        foundDeviceName = ((CBPeripheral *)foundDevices[i]).name;
        
        lastConnectedBTv4DeviceName = foundDeviceName;
        
        if ([foundDeviceName isEqualToString:lastConnectedBTv4DeviceName]){
            
            
            [self setWisePadResultsInfo:@"device detected, connecting to the last connected wisepad." localizedmsg:nil];
            
            
            //if the viewDeviceListPicker is shown then removed it
            // [viewDeviceListPicker removeFromSuperview];
            
            mConnesctionState = WisePadConnectionState_connecting;
            NSString* txt =@"device connecting";
            [self setWisePadStateSequnce :txt step:0];
            
            
            [[WisePadController sharedController] connectBTv4:(CBPeripheral *)foundDevices[i] connectTimeout:60];
            break;
        }
    }
    //        }
    //  else{
    //            //[focusUITextField resignFirstResponder];
    //           // self.mPickDeviceListDataSourceArray =foundDevices;
    //            UIPickerView *pickApplication = (UIPickerView*)[viewDeviceListPicker viewWithTag:100];
    //            [pickApplication reloadAllComponents];
    //
    //            CGRect currentScreen = [[UIScreen mainScreen] bounds];
    //            viewDeviceListPicker.frame= currentScreen;
    //            UIView *viewData = [viewDeviceListPicker viewWithTag:1002];
    //            viewData.frame = CGRectMake(viewData.frame.origin.x, viewDeviceListPicker.frame.size.height/2 -  viewData.frame.size.height /2, viewData.frame.size.width,  viewData.frame.size.height);
    //            [appdelegate.window addSubview: viewDeviceListPicker];
    
    
    //}
    //    }
    
}
//once the devcie is connect save the devcie info in the user default so this
//can be used to search and fileter among the searched devcies and directly could be
//intiated the connection process
- (void)onWisePadBTv4Connected
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadBTv4Connected",YES, YES);
#endif
    
    
    [self setNSUserDefaultsObject:[NSString stringWithString:self.lastConnectedBTv4DeviceName] key:kLastConnectedBTv4DeviceName];
    
    // [self dismissDialog];
    
    
    [startBtn setEnabled: YES];
    [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    
    
    mCardSale_TRXState = CardSale_TRXState_Completed;
    mCardSale_TRXType = CardSale_TRXType_Online;
    
    //[mBtnSubmitCardDetails setEnabled :(true)];
    
    [self setWisePadResultsInfo:@"device connected." localizedmsg:nil];
    
    if([self.mstrEMVProcessTaskType isEqualToString:@"backbutton"] || [self.mstrEMVProcessTaskType isEqualToString:@"onlinesubmit"]
       || [self.mstrEMVProcessTaskType isEqualToString:@"closecardsale"])
    {
        //        if (mEMVProcessTask != nil)
        //        {
        //            [self EMVProcessTask];
        //        }
        
    }
    
    ((UILabel*) swiperMsgs[0]).text = @"device connected";
    //NSString* txt =@"Device connected";
    NSString* txt =((UILabel*) swiperMsgs[1]).text;
    [self setWisePadStateSequnce :txt step:1];
    
    host1.text = @"host online";
    
    // we delay the connected process to wait for about a sec so that internally the sdk prepares it self for the communications,
    // and then show up the start command and then
    mConnesctionState = WisePadConnectionState_connected;
    [startBtn setHidden:NO];
    [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    // [mBtnConnect setHidden:YES];
}

#pragma mark - NSUserDefaults

/**
 * @description  Here we saving object into defaults....
 * @date
 * @method       setNSUserDefaultsObject:-- key:--
 * @author
 * @param        NSObject
 * @param        NSString
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 23/08/2017....
 * @reason       added comments and exception handling and change the defaults as local varible....
 *
 * @verified By
 * @verified On
 *
 */

- (void)setNSUserDefaultsObject:(NSObject *)object key:(NSString *)key{
    
    @try {
        
        //DebugLog(@"key: %@", key);
        
        //commented by Srinivasulu on 23/08/2017...
        //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
        //    defaults = [NSUserDefaults standardUserDefaults];
        
        NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
        
        //upto here on 23/08/2017....
        
        [defaults setObject:object forKey:key];
        [defaults synchronize];
        
    } @catch (NSException *exception) {
        
    }
    
}

/**
 * @description  Here we are retriving the object from defaults....
 * @date
 * @method       getNSUserDefaultsObject:--
 * @author
 * @param
 * @param        NSString
 * @param
 * @return       NSObject
 *
 * @modified By  Srinivasulu on 23/08/2017....
 * @reason       added comments and exception handling and change the defaults as local varible....
 *
 * @verified By
 * @verified On
 *
 */

- (NSObject *)getNSUserDefaultsObject:(NSString *)key{
    
    @try {
        
        //commented by Srinivasulu on 23/08/2017...
        //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
        //    defaults = [NSUserDefaults standardUserDefaults];
        
        NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
        
        //upto here on 23/08/2017....
        
        //DebugLog(@"key: %@", key);
        defaults = [NSUserDefaults standardUserDefaults];
        return [defaults objectForKey:key];
        
    } @catch (NSException *exception) {
        
    }
    
    
}

- (void) swipeCard : (id) sender
{
    
    if(mConnesctionState != WisePadConnectionState_connecting)
    {
        if (![[WisePadController sharedController] isDevicePresent])
        {
            
            processMode = DEVICE_LIST_DISPLAY;
            
            UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"wisePad not connected, please make sure the WisePad is switched on." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
            
        }
        else{
            
            NSString* txt =((UILabel*) swiperMsgs[2]).text;
            [self setWisePadStateSequnce :txt step:2];
            [self setWisePadResultsInfo:@"" localizedmsg:nil];
            
            mCardResults = MCRCardResults_SWIPERESULTSOK;
            mCardSale_TRXState = CardSale_TRXState_Processing;
            mCardSale_TRXType = CardSale_TRXType_Online;
            
#ifdef IS_DEBUGGING_ON
            Logs(log_tab ,@"********* Swiper IC-Card intialized ******************************************************",true, true);
#endif
            
            
            [startBtn setEnabled :NO];
            [startBtn setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];
            //[mBtnSwipeStop setEnabled :NO];
            
            
            [[WisePadController sharedController] checkCard];
        }
    }
    else{
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"connecting to  Wisepad, if it's taking longer than usual, please restart the WisePad and try re-connecting." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
        
    }
}


-(void)proceed_transaction:(id)sender {
    
    if(!isEmvSwiper)
        
        [self processCardSale_MCR];
    else
        [self processCardSale_EMV];
    
}



- (void)onWisePadReturnReversalData:(NSString *)tlv{
#ifdef IS_DEBUGGING_ON
    NSString* temp_msg = [NSString stringWithFormat:@"onReturnReversalData tlv data %@ %d",tlv,CardSale_TRXState_ApprovedOnline];
    Logs(log_tab, temp_msg,YES, YES);
#endif
    //[self dismissDialog];
    
    
    
    if(mCardSale_TRXState == CardSale_TRXState_ApprovedOnline)
        mCardSale_TRXType = CardSale_TRXType_Reversal;
    
    
}

- (void)onWisePadReturnBatchData:(NSString *)tlv{
#ifdef IS_DEBUGGING_ON
    NSString* temp_msg = [NSString stringWithFormat:@"onReturnBatchData tlv data %@",tlv];
    Logs(log_tab, temp_msg,YES, YES);
#endif
    
    //[self dismissDialog];
    // [mBtnSwipe setEnabled: YES];
    //[mBtnSubmitCardDetails setEnabled :(true)];
    
    NSDictionary* tlvDictionary = [[MswipeWisepadController sharedInstance] processOnReturnBatchData:tlv];
    mcardSaleData.mTSI = tlvDictionary[@"TSI"];
    mcardSaleData.mTVR = tlvDictionary[@"TVR"];
    
}

- (void)onWisePadReturnTransactionResult:(WisePadTransactionResult)result data:(NSDictionary *)data;
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onReturnTransactionResult",YES, YES);
#endif
    
    [[MswipeWisepadController sharedInstance] processOnReturnTransactionResult:result data:data];
    
    
    //if the transaction is approved online and for some reason the card has not sent a success message, and
    //the current screen is the details screen and not this error will not be shown to the user.
    //and this message should not be shown when auto reversal is goining on .
    bool notApproved = true;
    
    switch (result)
    {
        case WisePadTransactionResult_Approved:
            notApproved = false;
            
            [self setWisePadResultsInfo:nil localizedmsg:@"transaction_approved"];
            processMode = ALERT_TRXCLOSE;
            
            [cardDetails removeFromSuperview];
            
            cardDetails.hidden = YES;
            
            [self signatureView];
            
            
            break;
        case WisePadTransactionResult_Terminated:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_terminated"];
            
            
            break;
        case WisePadTransactionResult_Declined:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_declined"];
            
            break;
        case WisePadTransactionResult_SetAmountCancelOrTimeout:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_cancel"];
            
            break;
        case WisePadTransactionResult_CapkFail:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_capk_fail"];
            
            break;
        case WisePadTransactionResult_NotIcc:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_not_icc"];
            break;
        case WisePadTransactionResult_SelectApplicationFail:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_app_fail"];
            break;
        case WisePadTransactionResult_TdkError:
            [self setWisePadResultsError:nil localizedmsg:@"transaction_device_error"];
            
            break;
        case WisePadTransactionResult_ApplicationBlocked:
            [self setWisePadResultsError:@"application blocked" localizedmsg:nil];
            
            break;
        case WisePadTransactionResult_IccCardRemoved:{
            [self setWisePadResultsError:@"icc card removed" localizedmsg:nil];
            break;
        }
            
            
    }
#ifdef IS_DEBUGGING_ON
    // NSString* temp_msg = [NSString stringWithFormat:@"onReturnTransactionResult %@",int.text];
    Logs(log_tab, temp_msg,YES, YES);
#endif
    if(notApproved && mCardSale_TRXState == CardSale_TRXState_ApprovedOnline && mCardSale_TRXType!=CardSale_TRXType_Reversal)
    {
        processMode = ALERT_TRXCLOSE;
        NSString *temp_msg = [NSString stringWithFormat:@"approved online, card declined transaction reason,%@", info.text];
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:temp_msg delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
    }
    else {
        
        if (notApproved && mCardSale_TRXType==CardSale_TRXType_Reversal)
        {
            
            
            //if mReceiptEnabledForAutoVoid  is set to false at getway then do not do the auto reversal  and then straigh show the signature
            //and the trx status sent by the gateway
            if ([(mcardSaleResults.mReceiptEnabledForAutoVoid).lowercaseString isEqualToString:@("true")]) {
                //this will be called in the onTransaction result since to distinguish between offline decline when the card rejects it, and if the card
                //has been removed (for this the transaction is terminated where as for offline declined it says offline declined),
                // the tag that has to be sent is E1 for offline decline and E2 for fail back
                
                processMode = AUTO_REVERSAL_VOID;
                
                UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"approved online, card declined transaction, press ok for AutoReversal." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            else {
                
                
                processMode = ALERT_TRXCLOSE;
                //                [Constants showApprovedDialog:CARDSALE_DIALOG_MSG
                //                                       msgTxt:mCardSaleResults.statusMsg msgTxt1:mCardSaleData.mAuthCode  msgTxt3:mCardSaleData.mRRNo firstBtn:@"Ok" secondBtn:nil delegate:self dlgType:3];
                
                UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:mcardSaleResults.statusMsg delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            
        }
        
    }
    mCardSale_TRXState = CardSale_TRXState_Completed;
    
    
}

-(void) processCardSale_MCR
{
    processMode = HTTP_PROCESS_CARDSALE;
    @try
    {
        
        
        [[MswipeWisepadController sharedInstance] processCardSale_MCR:self.mSettings.mMerchantId
                                                         sessionToken:self.mSettings.mSessionToken receipt:@""
                                                              phoneNo:[NSString stringWithFormat:@"%@%@",@"+91",phnotext.text]
                                                                email:emailtext.text notes:@"" amount:payTxt2.text
                                                      amexCardPinCode:mcardSaleData.mAmexSecurityCode responsehadnler:self];
        
        [HUD setHidden:NO];
        HUD.labelText = @"processing transaction...";
        [cardDetails addSubview:HUD];
        
    }@catch (NSException *ex) {
        
        //        [Constants showDialog : CARDSALE_DIALOG_MSG  msgTxt : MSWIPE_ERROR_INENRYPTINGKEY firstBtn: @"Ok"
        //                    secondBtn : nil];
        continue_transaction.enabled = (true) ;
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"data encryption error. " delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    }
    
    
}
-(void) processCardSale_EMV
{
    
    processMode = HTTP_PROCESS_CARDSALE;
    
    @try
    {
        NSLog(@"%@%@ %@ %@ %@",self.mSettings.mMerchantId,self.mSettings.mSessionToken,self.email,phoneNo.text,payTxt2.text);
        
        [[MswipeWisepadController sharedInstance] processCardSale_EMV:self.mSettings.mMerchantId
                                                         sessionToken:self.mSettings.mSessionToken receipt:@""
                                                              phoneNo:[NSString stringWithFormat:@"%@%@",@"+91",phnotext.text]
                                                                email:emailtext.text notes:@"" amount:payTxt2.text responsehadnler:self];
        
        NSLog(@"%@",[NSString stringWithFormat:@"%@%@",@"+91 ",phoneNo.text]);
        
        HUD.labelText = @"processing transaction...";
        [HUD setHidden:NO];
        [cardDetails addSubview:HUD];
        
    }@catch (NSException *ex) {
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"data encryption error. " delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        continue_transaction.enabled = (true);
    }
    
    
    
}
-(void) setWisePadStateSequnce:(NSString*) txt step:(int) step
{
    for(int ictr =0 ; ictr<swiperMsgs.count; ictr++)
    {
        if(ictr == step)
        {
            ((UILabel*) swiperMsgs[step]).text = @"";
            ((UILabel*) swiperMsgs[step]).textColor = [UIColor whiteColor];
            ((UILabel*) swiperMsgs[step]).text = txt;
        }
        else{
            
            
            ((UILabel*) swiperMsgs[ictr]).textColor = [UIColor lightGrayColor];
        }
    }
    
}

-(void) setWisePadResultsInfo:(NSString*) txt localizedmsg :(NSString*)localizedmsg
{
    info.textColor =  [UIColor whiteColor];
    if(txt !=nil)
        info.text= txt;
    else if(localizedmsg!=nil)
        info.text = localizedmsg;
    
}



#pragma mark -
#pragma mark SwiperControllerDelegate


- (void)onWisePadWaitingForCard;
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWaitingForCard",YES, YES);
#endif
    
    
    NSString* txt =((UILabel*) swiperMsgs[3]).text;
    [self setWisePadStateSequnce :txt step:3];
    
    
    [self setWisePadResultsInfo:@"please insert or swipe card now." localizedmsg:nil];
    
}

- (void)onWisePadRequestInsertCard
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadRequestInsertCard",YES, YES);
#endif
    
    
    NSString* txt =((UILabel*) swiperMsgs[3]).text;
    [self setWisePadStateSequnce :txt step:3];
    
    [self setWisePadResultsInfo:@"please insert or swipe card now." localizedmsg:nil];
    
    
}

- (void)onWisePadRequestSetAmount
{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onRequestSetAmount",YES, YES);
#endif
    //    [self dismissDialog];
    /*[NSArray arrayWithObjects:@"A", @"B", @"C", @"D", @"E",@"F", @"G", @"H", @"I", @"J",@"K", @"L", @"M", @"N", @"O",
     @"P", @"Q", @"R", @"S", @"T",@"U", @"V", @"W", @"X", @"Y",@"Z",@" ",@"Dirham",@"Dollar",@"Euro",
     @"IndianRupee",@"Pound",@"SaudiRiyal",@"SaudiRiyal2",@"Won",@"Yen",@"/.",@".",
     //New currency enum value may be added
     @"NULL", nil];
     */
    //here 30 is the currency code of rupees
    NSArray *amountCharArray = @[@30];
#ifdef IS_DEBUGGING_ON
    NSString *temp_log = [NSString stringWithFormat:@"onRequestSetAmount amount array%@",amountCharArray];
    Logs(log_tab, temp_log,YES, YES);
#endif
    
    //this is called before the check card is called
    [[WisePadController sharedController] setAmount:payTxt2.text
                                     cashbackAmount:@""
                                       currencyCode:@"0840"
                                    transactionType:WisePadTransactionType_Goods
                                 currencyCharacters:amountCharArray];
}



- (void)onWisePadReturnAmountConfirmResult:(BOOL)isConfirmed{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadReturnAmountConfirmResult",YES, YES);
#endif
    // TODO Auto-generated method stub
    if (isConfirmed) {
        
        [self setWisePadResultsInfo:@"amount confirmed" localizedmsg:nil];
        
        
        
    } else {
        //statusEditText.setText(getString(R.string.amount_canceled));
        
        [self setWisePadResultsInfo:@"amount cancelled" localizedmsg:nil];
        
        // mCardSale_TRXState = CardSale_TRXState_Completed;
        // [mBtnSwipe setEnabled: YES];
        //[mBtnSwipe setBackgroundColor: [UIColor blueColor]];
        //[mBtnSwipe titleLabel].textColor =[UIColor greenColor];
        
        
    }
    
}


- (void)onWisePadReturnCheckCardResult:(WisePadCheckCardResult)result cardDataDict:(NSDictionary *)cardDataDict
{
    //[self dismissDialog];
    //     mCardSaleData = [[CardSaleData alloc] init];
    mCardResults = [[MswipeWisepadController sharedInstance] processMCRCardResults:result cardDataDict:cardDataDict];
    
    //     [[MswipeWisepadController sharedInstance]checkCard];
    
    
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onReturnCheckCardResult",YES, YES);
#endif
    
    switch (result)
    {
            
        case WisePadCheckCardResult_NoCard:
            
            [self setWisePadResultsError:nil localizedmsg:@"no_card_detected"];
            
            
            mCardSale_TRXState = CardSale_TRXState_Completed;
            
            [startBtn setEnabled:YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            
            break;
        case WisePadCheckCardResult_InsertedCard:
            isEmvSwiper = YES;
            mCardSaleData.mISEMVTrx = YES;
            [self setWisePadResultsInfo:@"IC card inserted, please wait..." localizedmsg:nil];
            
            [startBtn setEnabled: NO];
            //[mBtnSwipe setBackgroundColor: [UIColor grayColor]];
            //[mBtnSwipe titleLabel].textColor =[UIColor grayColor];
            [[WisePadController sharedController] startEmv:WisePadEmvOption_Start];
            break;
        case WisePadCheckCardResult_NotIccCard:
            [self setWisePadResultsError:nil localizedmsg:@"card_inserted"];
            
            mCardSale_TRXState = CardSale_TRXState_Completed;
            
            [startBtn setEnabled:YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            break;
        case WisePadCheckCardResult_BadSwipe:
            
            [self setWisePadResultsError:nil localizedmsg:@"bad_swipe"];
            mCardSale_TRXState = CardSale_TRXState_Completed;
            [startBtn setEnabled:YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            break;
        case WisePadCheckCardResult_SwipedCard:
        case WisePadCheckCardResult_OnlyTrack2:
        {
            isEmvSwiper = NO;
            mcardSaleData.mISEMVTrx = NO;
            
            mcardSaleData.mSno= cardDataDict[@"ksn"];
            mcardSaleData.mCreditCardNo= cardDataDict[@"maskedPAN"];
            mcardSaleData.mCardHolderName=cardDataDict[@"cardholderName"];
            
            if((mcardSaleData.mCardHolderName).length <=0)
            {
                mcardSaleData.mCardHolderName = @"XXXX-XXXX";
            }
            else{
                NSRange pos = [mcardSaleData.mCardHolderName rangeOfString:@"^"];
                if(pos.length>0)
                {
                    @try{
                        mcardSaleData.mCardHolderName = [mcardSaleData.mCardHolderName substringWithRange:pos];
                    }@catch(NSException *ex){
                        
                    }
                }
                
            }
            NSString *tempString=cardDataDict[@"expiryDate"];
            if(tempString.length==5)
            {
                mcardSaleData.mExpiryDate=[tempString substringWithRange : NSMakeRange(3,2)];
                mcardSaleData.mExpiryDate= [NSString stringWithFormat:@"%@%@", mcardSaleData.mExpiryDate,[tempString substringWithRange : NSMakeRange(0,2)]];
                
            }
            else if(tempString.length==4){
                
                mcardSaleData.mExpiryDate=[tempString substringWithRange : NSMakeRange(2,2)];
                mcardSaleData.mExpiryDate= [NSString stringWithFormat:@"%@%@", mcardSaleData.mExpiryDate,[tempString substringWithRange : NSMakeRange(0,2)]];
                
            }
            else{
                mcardSaleData.mExpiryDate=tempString;
            }
            
            
            if(mCardResults == MCRCardResults_BAD_SWIPE)
            {
                mCardSale_TRXState = CardSale_TRXState_Completed;
                info.textColor = [UIColor redColor];
                info.text =  @"Bad swipe.";
                [startBtn setEnabled : YES];
                [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
                //[mBtnSwipe setBackgroundColor: [UIColor blueColor]];
                return;
                
            }
            
            if(mCardResults == MCRCardResults_USE_CHIPCARD)
            {
                processMode = FALL_BACK;
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"sale" message:@"please use Chip card." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
                
                [startBtn setEnabled : YES];
                [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
                
                return;
            }
            
            if((mCardResults & MCRCardResults_PIN_REQUIRED) == MCRCardResults_PIN_REQUIRED)
            {
                [[WisePadController sharedController] startPinEntry];
                
            }
            else{
                
                if (!isEmvSwiper) {
                    
                    [self showCreditDetailsScreen];
                    
                }
                
                
            }
            
        }
            break;
        case WisePadCheckCardResult_NoResponse:
            
            [self setWisePadResultsError:nil localizedmsg:@"card_no_response"];
            
            mCardSale_TRXState = CardSale_TRXState_Completed;
            [startBtn setEnabled: YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            
            
            break;
            
        case WisePadCheckCardResult_MagHeadFail:
            
            [self setWisePadResultsError:nil localizedmsg:@"use_icc_card"];
            
            mCardSale_TRXState = CardSale_TRXState_Completed;
            
            [startBtn setEnabled:YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            
            break;
        default:
            [self setWisePadResultsError:@"hardware error, please try again." localizedmsg:nil];
            mCardSale_TRXState = CardSale_TRXState_Completed;
            [startBtn setEnabled: YES];
            [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            
            break;
            
    }
}

- (void)onWisePadRequestPinEntry{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onRequestPinEntry",YES, YES);
#endif
    
    //    [self dismissDialog];
    //    [self dismissEMVOnlieProcessProgressActivity];
    
    
    if ((mCardResults  & MCRCardResults_PIN_REQUIRED)  == MCRCardResults_PIN_REQUIRED) {
        
        [self setWisePadResultsInfo:@"please enter PIN on WisePad or Press ENTER (green key) to bypass PIN." localizedmsg:nil];
        
    } else {
        [self setWisePadResultsInfo:@"enter pin" localizedmsg:nil];
        
    }
    
}
- (void)onWisePadReturnPinEntryResult:(WisePadPinEntryResult)result epb:(NSString *)epb ksn:(NSString *)ksn{
    
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onWisePadReturnPinEntryResult",YES, YES);
#endif
    // [self dismissDialog];
    [[MswipeWisepadController sharedInstance] processPinEntryResult:result epb:epb ksn:ksn];
    
    switch (result) {
        case WisePadPinEntryResult_PinEntered:
        {
            
            [self setWisePadResultsInfo:@"pin entered" localizedmsg:nil];
            
            if ((mCardResults & MCRCardResults_PIN_REQUIRED) == MCRCardResults_PIN_REQUIRED)
            {
                [self showCreditDetailsScreen];
                
            }
            break;
        }
        case WisePadPinEntryResult_Cancel:
            
            [self setWisePadResultsError:@"cancel" localizedmsg:nil];
            
            break;
        case WisePadPinEntryResult_Timeout:
            [self setWisePadResultsError:@"timeout" localizedmsg:nil];
            
            break;
        case WisePadPinEntryResult_KeyError:
            [self setWisePadResultsError:@"hey error" localizedmsg:nil];
            
            break;
            
            
        case WisePadPinEntryResult_ByPass:
            [self setWisePadResultsError:@"pin bypass" localizedmsg:nil];
            
            break;
        case WisePadPinEntryResult_NoPin:
            [self setWisePadResultsError:@"no pin" localizedmsg:nil];
            
            if ((mCardResults & MCRCardResults_PIN_REQUIRED) == MCRCardResults_PIN_REQUIRED)
            {
                [self showCreditDetailsScreen];
            }
            break;
        case WisePadPinEntryResult_WrongPinLength:
            [self setWisePadResultsError:@"wrong pin length" localizedmsg:nil];
            
            break;
            
        case WisePadPinEntryResult_IncorrectPin:
            [self setWisePadResultsError:@"incorrect PIN" localizedmsg:nil];
            
            break;
            
        default:
            break;
    }
    
    if (result != WisePadPinEntryResult_PinEntered) {
        mCardSale_TRXState = CardSale_TRXState_Completed;
        [startBtn setEnabled: YES];
        [startBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        
        //[mBtnSwipe setBackgroundColor: [UIColor blueColor]];
        //[mBtnSwipe titleLabel].textColor =[UIColor greenColor];
        
        // [self dismissDialog ];
        //[self dismissEMVOnlieProcessProgressActivity];
    }
}

-(void) setWisePadResultsError:(NSString*) txt localizedmsg :(NSString*)localizedmsg
{
    info.textColor =  [UIColor whiteColor];
    if(txt !=nil)
        info.text= txt;
    else if(localizedmsg!=nil)
        info.text =NSLocalizedString(localizedmsg, @"");
    
}
-(void)onWisePadReturnEmvCardDataResult:(NSString *)tlv {
    
    NSLog(@"%@",tlv);
    
}
- (void)onWisePadRequestCheckServerConnectivity{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onRequestCheckServerConnectivity",YES, YES);
#endif
    //    [self dismissDialog];
    [[WisePadController sharedController] sendServerConnectivity:YES];
}

- (void)onWisePadRequestFinalConfirm{
#ifdef IS_DEBUGGING_ON
    Logs(log_tab, @"onRequestFinalConfirm",YES, YES);
#endif
    //    [self dismissDialog];
    
    [[WisePadController sharedController] sendFinalConfirmResult:YES];
    
    
}

- (void)onWisePadRequestOnlineProcess:(NSString *)tlv{
    
    [startBtn setEnabled: YES];
    NSDictionary* tlvDictionary = [[MswipeWisepadController sharedInstance] processOnRequestOnlineProcess:tlv];
    if(tlvDictionary ==nil || tlvDictionary.count == 0)
    {
        
        startBtn.enabled = (true);
    }
    else{
        
        mcardSaleData.mCardHolderName = tlvDictionary[@"cardHolderName"];
        
        mcardSaleData.mAppIdentifier = tlvDictionary[@"appIdentifier"]; // the universal app would send the
        
        mcardSaleData.mTSI = tlvDictionary[@"TSI"];
        
        mcardSaleData.mTVR = tlvDictionary[@"TVR"];
        
        mcardSaleData.mCertif = tlvDictionary[@"certif"]; // the universal app would send the
        
        mcardSaleData.mApplicationName = tlvDictionary[@"applicationName"]; // the universal app would send the
        
        mcardSaleData.mCreditCardNo = tlvDictionary[@"creditCardNo"]; // the universal app would send the
        
        mcardSaleData.mCardHolderName = tlvDictionary[@"cardHolderName"]; // the universal app would send the
        
        mcardSaleData.mExpiryDate = tlvDictionary[@"expiryDate"]; // the universal app would send the
        
        [self showCreditDetailsScreen];
        
        
    }
    
    
    
}
-(void) processAutoVoid
{
    @try
    {
        processMode = HTTP_PROCESS_AUTOVOID;
        [[MswipeWisepadController sharedInstance] processReversalSale:self.mSettings.mMerchantId
                                                         sessionToken:self.mSettings.mSessionToken
                                                            trxAmount:payTxt2.text trxDate:mcardSaleResults.mDate
                                                               stanid:mcardSaleResults.mStanID F055tag:mcardSaleResults.mF055tag
                                                      responsehadnler:self];
        
        
        HUD.labelText = @"processing auto void trx...";
        
        [cardDetails addSubview:HUD];
        
    }@catch (NSException *ex) {
        processMode = ALERT_TRXCLOSE;
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"data encryption error." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    }
    
    
}

-(void)signatureView {
    
    [cardDetails setHidden:YES];
    if ([cardPayment.subviews containsObject:receipt_view]) {
        
        [receipt_view removeFromSuperview];
    }
    
    signature_view = [[UIImageView alloc] init];
    signature_view.layer.borderColor = [UIColor whiteColor].CGColor;
    signature_view.layer.borderWidth = 1.0f;
    signature_view.layer.cornerRadius = 10.0f;
    
    buttonView = [[UIView alloc] init];
    
    receipt_view = [[UIView alloc] init];
    
    NSString *last4Digits = @"";
    
    int ilen= (int)(mcardSaleData.mCreditCardNo).length;
    if(ilen>=4)
        last4Digits = [mcardSaleData.mCreditCardNo substringFromIndex: ilen-4];
    else
        last4Digits = mcardSaleData.mCreditCardNo;
    
    
    UILabel *label1 = [[UILabel alloc] init];
    label1.textColor = [UIColor whiteColor];
    label1.font = [UIFont boldSystemFontOfSize:24.0];
    label1.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0f];
    label1.text = status_mswipe;
    
    UILabel *label2 = [[UILabel alloc] init];
    label2.textColor = [UIColor grayColor];
    label2.font = [UIFont systemFontOfSize:22.0];
    label2.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0f];
    label2.text = @"card transaction status";
    
    UILabel *label3 = [[UILabel alloc] init];
    label3.textColor = [UIColor whiteColor];
    label3.font = [UIFont boldSystemFontOfSize:24.0];
    label3.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0f];
    label3.text = mcardSaleData.mAuthCode;
    
    UILabel *label4 = [[UILabel alloc] init];
    label4.textColor = [UIColor grayColor];
    label4.font = [UIFont systemFontOfSize:22.0];
    label4.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0f];
    label4.text = @"authorisation code";
    
    UILabel *label5 = [[UILabel alloc] init];
    label5.textColor = [UIColor whiteColor];
    label5.font = [UIFont boldSystemFontOfSize:24.0];
    label5.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0f];
    label5.text = mcardSaleData.mRRNo;
    
    UILabel *label6 = [[UILabel alloc] init];
    label6.textColor = [UIColor grayColor];
    label6.font = [UIFont systemFontOfSize:22.0];
    label6.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:22.0f];
    label6.text = @"receipt retrieval no.";
    
    UIButton   *okBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    okBtn.layer.borderColor = [UIColor whiteColor].CGColor;
    okBtn.layer.cornerRadius = 10.0f;
    okBtn.layer.borderWidth = 1.0f;
    [okBtn setTitle:@"OK" forState:UIControlStateNormal];
    [okBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    (okBtn.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
    [okBtn addTarget:self action:@selector(okButtonPressed1:) forControlEvents:UIControlEventTouchUpInside];
    
    clearSign = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    clearSign.layer.borderColor = [UIColor whiteColor].CGColor;
    clearSign.layer.cornerRadius = 10.0f;
    clearSign.layer.borderWidth = 1.0f;
    [clearSign setTitle:@"Clear" forState:UIControlStateNormal];
    [clearSign setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    (clearSign.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
    [clearSign addTarget:self action:@selector(clearSign:) forControlEvents:UIControlEventTouchUpInside];
    
    signSubmit = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    signSubmit.layer.borderColor = [UIColor whiteColor].CGColor;
    signSubmit.layer.cornerRadius = 10.0f;
    signSubmit.layer.borderWidth = 1.0f;
    [signSubmit setTitle:@"Submit" forState:UIControlStateNormal];
    [signSubmit setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    (signSubmit.titleLabel).font = [UIFont boldSystemFontOfSize:22.0];
    [signSubmit addTarget:self action:@selector(submitSignature:) forControlEvents:UIControlEventTouchUpInside];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        receipt_view.frame = CGRectMake(0, 10, self.view.frame.size.width, 600);
        sale.frame = CGRectMake(20, 10, 400, 60);
        label1.frame = CGRectMake(20, 70, 500, 70);
        label2.frame = CGRectMake(20, 130, 500, 40);
        label3.frame = CGRectMake(20, 160, 500, 70);
        label4.frame = CGRectMake(20, 210, 500, 50);
        label5.frame = CGRectMake(20, 240, 500, 70);
        label6.frame = CGRectMake(20, 290, 500, 50);
        okBtn.frame = CGRectMake(230, 440, 250, 35);
        
        buttonView.frame = CGRectMake(20, 250, 500, 400);
        clearSign.frame = CGRectMake(150, 150, 120, 30);
        signSubmit.frame = CGRectMake(370, 150, 120, 30);
        
        
        
    }
    [receipt_view addSubview:sale];
    [receipt_view addSubview:label1];
    [receipt_view addSubview:label2];
    [receipt_view addSubview:label3];
    [receipt_view addSubview:label4];
    [receipt_view addSubview:label5];
    [receipt_view addSubview:label6];
    [receipt_view addSubview:okBtn];
    [cardPayment addSubview:receipt_view];
    [buttonView addSubview:clearSign];
    [buttonView addSubview:signSubmit];
    
    
}
-(void)okButtonPressed1 :(id)sender {
    
    if ([cardPayment.subviews containsObject:receipt_view]) {
        
        [receipt_view removeFromSuperview];
        receipt_view.hidden = YES;
    }
    
    signView = [[QImageView alloc]initWithFrame:CGRectMake(20, 100, self.view.frame.size.width-100, 200)];
    signView.layer.borderColor = [UIColor whiteColor].CGColor;
    signView.layer.borderWidth = 1.0f;
    signView.layer.cornerRadius = 10.0f;
    
    
    
    [cardPayment addSubview:signView];
    [cardPayment addSubview:buttonView];
    
    signView.userInteractionEnabled = YES;
    
}
-(void)clearSign:(id)sender {
    
    // mSignature = [[TouchTrackerView alloc] init];
    
    [signView clear];
    
}

-(void)submitSignature:(id)sender {
    [startBtn setEnabled:YES];
    
    if(signView.signatureDrawn)
    {
        // add image data
        NSData *signatureData = signView.renderImageData;
        @try
        {
            
            
            [[MswipeWisepadController sharedInstance]  processSignature:self.mSettings.mMerchantId
                                                           sessionToken:self.mSettings.mSessionToken signatureData:signatureData
                                                           creditCardNo:mcardSaleData.mCreditCardNo standId:mcardSaleData.mStanID trxAmount:payTxt2.text
                                                                    TSI:mcardSaleData.mTSI TVR:mcardSaleData.mTVR responsehadnler:self];
            // self.navigationController.navigationBar.hidden = YES;
            
            
            HUD.labelText = @"Processing signature...";
            [self.view addSubview:HUD];
            
        }
        @catch (NSException *ex) {
            
            UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"receipt needs to be signed to proceed. " delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
        }
        
        
        
        
        
    }else{
        
        UIAlertView *alert  = [[UIAlertView alloc] initWithTitle:@"Sale" message:@"receipt needs to be signed to proceed. " delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    }
    
}

#pragma -mark methods related to manual discount dispaly popUp view....

/**
 * @description  here we are froming and dispalying the display EditPrice view....
 * @date
 * @method       populatePriceEditView:
 * @author
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By  Srinivasulu on 23/06/2017 && changed on 21/08.2017....
 * @reason       added the cancel button to dismiss the popUpView....  added editPriceReason related filed on 21/08/2017....
 *
 * @verified By
 * @verified On
 *
 */

-(void)populatePriceEditView:(UIButton*)sender {
    
    PopOverViewController  * customerInfoPopUp = [[PopOverViewController alloc] init];
    
    editPriceView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 375, 300)];
    editPriceView.opaque = NO;
    editPriceView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
    editPriceView.layer.borderColor = [UIColor lightGrayColor].CGColor;
    editPriceView.layer.borderWidth = 2.0f;
    [editPriceView setHidden:NO];
    
    @try {
        
        NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[sender.tag]];
        
        NSArray *itemDetailsArr = [cartItem[positionCount] componentsSeparatedByString:@"#"];
        UIImageView *img  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
        
        UILabel *editPriceLbl = [[UILabel alloc] init];
        editPriceLbl.textColor = [UIColor blackColor];
        editPriceLbl.font = [UIFont boldSystemFontOfSize:18.0];
        editPriceLbl.text  = @"EDIT PRICE";
        editPriceLbl.textAlignment = NSTextAlignmentCenter;
        
        UILabel *itemNameLbl = [[UILabel alloc] init];
        itemNameLbl.textColor = [UIColor blackColor];
        itemNameLbl.font = [UIFont boldSystemFontOfSize:22.0];
        itemNameLbl.textAlignment = NSTextAlignmentCenter;
        itemNameLbl.text  = [NSString stringWithFormat:@"%@",itemDetailsArr[1]];
        
        
        
        UILabel * actualPriceLbl = [[UILabel alloc] init];
        actualPriceLbl.textColor = [UIColor blackColor];
        actualPriceLbl.font = [UIFont boldSystemFontOfSize:20.0];
        
        //changed  by Srinivasulu on 27/09/2017....
        //reason complete popUp has to be vissible....
        
        //        actualPriceLbl.text  = @"Actual Price";
        actualPriceLbl.text  = NSLocalizedString(@"sale_price", nil);
        
        
        //upto here on 27/09/2017....
        
        UILabel *actualPriceVal = [[UILabel alloc] init];
        actualPriceVal.textColor = [UIColor blackColor];
        actualPriceVal.font = [UIFont boldSystemFontOfSize:20.0];
        actualPriceVal.text  = [NSString stringWithFormat:@"%@",itemDetailsArr[4]];
        
        UILabel *newPriceLbl = [[UILabel alloc] init];
        newPriceLbl.textColor = [UIColor blackColor];
        newPriceLbl.font = [UIFont boldSystemFontOfSize:18.0];
        newPriceLbl.text  = @"New Price";
        
        newPriceField = [[UITextField alloc] init];
        newPriceField.borderStyle = UITextBorderStyleRoundedRect;
        newPriceField.textColor = [UIColor blackColor];
        newPriceField.placeholder = @"Enter Price";
        //NumberKeyBoard hidden....
        UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
        numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
        numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                                 [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
        [numberToolbar1 sizeToFit];
        
        
        //added by Srinivaslulu on 21/08/2017....
        
        UILabel * editPriceReasonLbl;
        
        
        UIImage * buttonImageDD;
        
        UIButton * selectReasonBtn;
        
        
        editPriceReasonLbl = [[UILabel alloc] init];
        editPriceReasonLbl.textColor = [UIColor blackColor];
        editPriceReasonLbl.font = [UIFont boldSystemFontOfSize:18.0];
        editPriceReasonLbl.text  = NSLocalizedString(@"reason", nil);
        
        editPriceReasonTxt = [[UITextField alloc] init];
        editPriceReasonTxt.borderStyle = UITextBorderStyleRoundedRect;
        editPriceReasonTxt.textColor = [UIColor blackColor];
        editPriceReasonTxt.placeholder = NSLocalizedString(@"reason", nil);
        editPriceReasonTxt.userInteractionEnabled = NO;
        buttonImageDD = [UIImage imageNamed:@"combo.png"];
        
        
        //added by Srinivaslulu on 22/08/2017....
        //reason is to fix the bug reported....
        
        if(productInfoArr.count > sender.tag){
            
            NSDictionary * dic = productInfoArr[sender.tag];
            
            editPriceReasonTxt.text =  [self checkGivenValueIsNullOrNil:[dic valueForKey:EDIT_PRICE_REASON] defaultReturn:@""];
        }
        
        if(!(editPriceReasonTxt.text).length){
            
            if(editPriceReasonArr == nil)
                editPriceReasonArr = [NSMutableArray arrayWithObjects:NSLocalizedString(@"in_correct_price", nil),NSLocalizedString(@"price_is_not_upto_date", nil),NSLocalizedString(@"no_price_information", nil), nil];
            
            editPriceReasonTxt.text  = editPriceReasonArr[0];
            
        }
        //upto here on 22/08/2017....
        
        
        
        selectReasonBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [selectReasonBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
        [selectReasonBtn addTarget:self
                            action:@selector(showListOfEditReasons:) forControlEvents:UIControlEventTouchDown];
        
        
        //upto here on 21/08/2017....
        
        newPriceField.keyboardType = UIKeyboardTypeNumberPad;
        newPriceField.text = sender.titleLabel.text;
        newPriceField.font = [UIFont systemFontOfSize:17.0];
        newPriceField.backgroundColor = [UIColor whiteColor];
        newPriceField.autocorrectionType = UITextAutocorrectionTypeNo;
        //qtyFeild.keyboardType = UIKeyboardTypeDefault;
        newPriceField.clearButtonMode = UITextFieldViewModeWhileEditing;
        newPriceField.returnKeyType = UIReturnKeyDone;
        newPriceField.delegate = self;
        [newPriceField selectAll:nil];
        [newPriceField becomeFirstResponder];
        
        /** ok Button for edit price view....*/
        okEditPriceButton = [UIButton buttonWithType:UIButtonTypeCustom];
        //[okButton setImage:[UIImage imageNamed:@"OK.png"] forState:UIControlStateNormal];
        [okEditPriceButton addTarget:self
                              action:@selector(okEditPricePressed:) forControlEvents:UIControlEventTouchDown];
        [okEditPriceButton setTitle:@"OK" forState:UIControlStateNormal];
        okEditPriceButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
        okEditPriceButton.backgroundColor = [UIColor grayColor];
        okEditPriceButton.tag = sender.tag;
        
        //added by Srinivasulu on 10/08/2017...
        
        UIButton * cancelDiscountBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        //[okButton setImage:[UIImage imageNamed:@"OK.png"] forState:UIControlStateNormal];
        [cancelDiscountBtn addTarget:self
                              action:@selector(dismissDisountView:) forControlEvents:UIControlEventTouchDown];
        [cancelDiscountBtn setTitle:NSLocalizedString(@"cancel", nil) forState:UIControlStateNormal];
        cancelDiscountBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
        cancelDiscountBtn.backgroundColor = [UIColor grayColor];
        cancelDiscountBtn.tag = sender.tag;
        
        
        //upto here on 10/08/2017....
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                img.frame = CGRectMake(0, 0, 375, 50);
                editPriceLbl.frame =  CGRectMake(0, 10, 375, 30);
                editPriceLbl.font = [UIFont boldSystemFontOfSize:25.0];
                itemNameLbl.frame =  CGRectMake(0, 60, 375, 30);
                
                actualPriceLbl.frame =  CGRectMake(10, 110, 150, 30);
                actualPriceVal.frame =  CGRectMake(180.0, 110, 200, 30);
                newPriceLbl.frame =  CGRectMake(10, 160.0, 150, 30);
                newPriceField.frame = CGRectMake(180.0, 150.0, 150, 30);
                newPriceField.font = [UIFont systemFontOfSize:20.0];
                
                
                //                okEditPriceButton.frame = CGRectMake(100, 235, 165, 45);
                //                okEditPriceButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                //                okEditPriceButton.layer.cornerRadius = 20.0f;
                
                //changed by Srinivasulu on 10/08/2017....
                
                
                //added by Srinivaslulu on 21/08/2017....
                
                editPriceReasonLbl.frame =  CGRectMake( actualPriceLbl.frame.origin.x, newPriceLbl.frame.origin.y + newPriceLbl.frame.size.height + 20, actualPriceLbl.frame.size.width, actualPriceLbl.frame.size.height);
                
                editPriceReasonTxt.frame =  CGRectMake( newPriceField.frame.origin.x, editPriceReasonLbl.frame.origin.y, newPriceField.frame.size.width + newPriceField.frame.size.height + 2, newPriceField.frame.size.height);
                
                selectReasonBtn.frame =  CGRectMake( newPriceField.frame.origin.x + newPriceField.frame.size.width, editPriceReasonLbl.frame.origin.y - 4, 40, 40);
                
                
                //upto here on 21/08/2017....
                
                okEditPriceButton.frame = CGRectMake( (editPriceView.frame.size.width - 300)/3, editPriceReasonTxt.frame.origin.y + editPriceReasonTxt.frame.size.height + 20, 150, 45);
                okEditPriceButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                okEditPriceButton.layer.cornerRadius = 20.0f;
                
                
                cancelDiscountBtn.frame = CGRectMake( 2 * okEditPriceButton.frame.origin.x + okEditPriceButton.frame.size.width, okEditPriceButton.frame.origin.y, okEditPriceButton.frame.size.width, okEditPriceButton.frame.size.height);
                cancelDiscountBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                cancelDiscountBtn.layer.cornerRadius = 20.0f;
                
                
                editPriceView.frame = CGRectMake( editPriceView.frame.origin.x, editPriceView.frame.origin.y, editPriceView.frame.size.width, okEditPriceButton.frame.origin.y + okEditPriceButton.frame.size.height + 10);
                
                
                //upto here on 10/08/2017....
                
            }
        }
        [editPriceView addSubview:img];
        [editPriceView addSubview:editPriceLbl];
        [editPriceView addSubview:itemNameLbl];
        [editPriceView addSubview:actualPriceLbl];
        [editPriceView addSubview:actualPriceVal];
        [editPriceView addSubview:newPriceLbl];
        [editPriceView addSubview:newPriceField];
        
        //changed by Srinivasulu on 10/08/2017....
        
        
        //added by Srinivaslulu on 21/08/2017....
        
        [editPriceView addSubview:editPriceReasonLbl];
        [editPriceView addSubview:editPriceReasonTxt];
        [editPriceView addSubview:selectReasonBtn];
        
        //upto here on 21/08/2017....
        
        [editPriceView addSubview:okEditPriceButton];
        [editPriceView addSubview:cancelDiscountBtn];
        
        //upto here on 10/08/2017....
        
        customerInfoPopUp.view = editPriceView;
        
        NSIndexPath *selectedRow = [NSIndexPath indexPathForRow:sender.tag inSection:0];
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            customerInfoPopUp.preferredContentSize =  CGSizeMake(editPriceView.frame.size.width, editPriceView.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            
            [popover presentPopoverFromRect:priceButton.frame inView:[cartTable cellForRowAtIndexPath:selectedRow] permittedArrowDirections:UIPopoverArrowDirectionLeft animated:YES];
            
            
            editPricePopOver= popover;
            
        }
        
        else {
            
            customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            // popover.contentViewController.view.alpha = 0.0;
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            editPricePopOver = popover;
        }
        
    }
    @catch (NSException *exception) {
        [editPricePopOver dismissPopoverAnimated:YES];
        NSLog(@"%@",exception.name);
    }
    @finally {
    }
}


/**
 * @description  here we are froming and dispalying the display EditPrice reasons....
 * @date         21/08/2017....
 * @method       showListOfEditReasons:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 z
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showListOfEditReasons:(UIButton *)sender{
    
    @try {
        
        if (isPriceEditableArr.count > 0 && ![isPriceEditableArr[sender.tag] boolValue]) {
            
            float y_axis = self.view.frame.size.height - 550;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"price_edit_is_not_allowed", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
            return;
        }
        
        
        if(editPriceReasonArr == nil ||  editPriceReasonTbl == nil){
            
            if(editPriceReasonArr == nil)
                editPriceReasonArr = [NSMutableArray arrayWithObjects:NSLocalizedString(@"in_correct_price", nil),NSLocalizedString(@"price_is_not_upto_date", nil),NSLocalizedString(@"no_price_information", nil), nil];
            
            
            //editPriceReasonTbl table creation....
            editPriceReasonTbl = [[UITableView alloc] init];
            editPriceReasonTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            editPriceReasonTbl.dataSource = self;
            editPriceReasonTbl.delegate = self;
            (editPriceReasonTbl.layer).borderWidth = 1.0f;
            editPriceReasonTbl.layer.cornerRadius = 3;
            editPriceReasonTbl.layer.borderColor = [UIColor grayColor].CGColor;
            
        }
        
        float tableHeight = editPriceReasonArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = editPriceReasonArr.count * 33;
        
        if(editPriceReasonArr.count > 5)
            tableHeight = (tableHeight/editPriceReasonArr.count) * 5;
        
        [self showPopUpForTables:editPriceReasonTbl  popUpWidth:editPriceReasonTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:editPriceReasonTxt  showViewIn:editPriceView permittedArrowDirections:UIPopoverArrowDirectionUp];
        
    } @catch (NSException *exception) {
        
        
        float y_axis = self.view.frame.size.height - 350;
        
        NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"unable_to_display_reasons", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
        
        
    } @finally {
        
    }
    
}
#pragma -mark methods related to manual discount dispaly popUp view....

/**
 * @description  here we are froming and dispalying the itme discount view....
 * @date
 * @method       populateItemDiscountView:
 * @author
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By  Srinivasulu on 23/06/2017....
 * @reason       allowing user to enter the text when manual discount is enabled in outlet setting && added the cancel button to dismiss the popUpView....
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateItemDiscountView:(UIButton*)sender {
    
    //added by Srinivasulu on 23/06/2017....
    
    if(!isManualDiscounts){
        
        float y_axis = self.view.frame.size.height - 350;
        
        NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"discount_is_not_applicable", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
        
        return;
    }
    
    //upto here on 23/06/2017....
    
    isFlatDisc = true;
    
    PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
    
    reasonView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 510, 380)];
    reasonView.opaque = NO;
    reasonView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
    reasonView.layer.borderColor = [UIColor lightGrayColor].CGColor;
    reasonView.layer.borderWidth = 2.0f;
    [reasonView setHidden:NO];
    @try {
        
        NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[sender.tag]];
        
        NSArray *itemDetailsArr = [cartItem[positionCount] componentsSeparatedByString:@"#"];
        UIImageView *img  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
        
        UILabel *editPriceLbl = [[UILabel alloc] init];
        editPriceLbl.textColor = [UIColor blackColor];
        editPriceLbl.font = [UIFont boldSystemFontOfSize:18.0];
        editPriceLbl.text  = @"ENTER DISCOUNT";
        editPriceLbl.textAlignment = NSTextAlignmentCenter;
        
        UILabel *actualPriceLbl = [[UILabel alloc] init];
        actualPriceLbl.textColor = [UIColor blackColor];
        actualPriceLbl.font = [UIFont boldSystemFontOfSize:20.0];
        actualPriceLbl.text  = @"Unit Price";
        
        UILabel *actualPriceVal = [[UILabel alloc] init];
        actualPriceVal.textColor = [UIColor blackColor];
        actualPriceVal.font = [UIFont boldSystemFontOfSize:20.0];
        actualPriceVal.text  = [NSString stringWithFormat:@"%@",itemDetailsArr[4]];
        
        isFlatDiscBtn = [[UIButton alloc] init] ;
        [isFlatDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        isFlatDiscBtn.backgroundColor = [UIColor clearColor];
        isFlatDiscBtn.layer.masksToBounds = YES;
        isFlatDiscBtn.layer.cornerRadius = 5.0f;
        isFlatDiscBtn.tag = 0;
        [isFlatDiscBtn addTarget:self action:@selector(discRadioAction:) forControlEvents:UIControlEventTouchUpInside];
        
        isPercentileDiscBtn = [[UIButton alloc] init] ;
        [isPercentileDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        //cancelOrder.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        isPercentileDiscBtn.backgroundColor = [UIColor clearColor];
        isPercentileDiscBtn.layer.masksToBounds = YES;
        isPercentileDiscBtn.layer.cornerRadius = 5.0f;
        isPercentileDiscBtn.tag = 1;
        [isPercentileDiscBtn addTarget:self action:@selector(discRadioAction:) forControlEvents:UIControlEventTouchUpInside];
        
        UILabel *flatDiscLbl = [[UILabel alloc] init];
        flatDiscLbl.textColor = [UIColor blackColor];
        flatDiscLbl.font = [UIFont boldSystemFontOfSize:20.0];
        flatDiscLbl.text  = NSLocalizedString(@"FlatDisc", nil);
        
        UILabel *percentageDiscLbl = [[UILabel alloc] init];
        percentageDiscLbl.textColor = [UIColor blackColor];
        percentageDiscLbl.font = [UIFont boldSystemFontOfSize:20.0];
        percentageDiscLbl.text  = NSLocalizedString(@"PercentileDisc", nil);
        
        
        newPriceField = [[UITextField alloc] init];
        newPriceField.borderStyle = UITextBorderStyleRoundedRect;
        newPriceField.textColor = [UIColor blackColor];
        newPriceField.placeholder = @"Enter Discount Here";
        //NumberKeyBoard hidden....
        UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
        numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
        numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                                 [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
        [numberToolbar1 sizeToFit];
        newPriceField.keyboardType = UIKeyboardTypeNumberPad;
        newPriceField.font = [UIFont systemFontOfSize:17.0];
        newPriceField.backgroundColor = [UIColor whiteColor];
        newPriceField.autocorrectionType = UITextAutocorrectionTypeNo;
        //qtyFeild.keyboardType = UIKeyboardTypeDefault;
        newPriceField.clearButtonMode = UITextFieldViewModeWhileEditing;
        newPriceField.returnKeyType = UIReturnKeyDone;
        newPriceField.delegate = self;
        [newPriceField selectAll:nil];
        [newPriceField becomeFirstResponder];
        
        percentageDiscTxt = [[UITextField alloc] init];
        percentageDiscTxt.borderStyle = UITextBorderStyleRoundedRect;
        percentageDiscTxt.textColor = [UIColor blackColor];
        percentageDiscTxt.placeholder = @"  %";
        percentageDiscTxt.font = [UIFont systemFontOfSize:17.0];
        percentageDiscTxt.backgroundColor = [UIColor whiteColor];
        percentageDiscTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        percentageDiscTxt.keyboardType = UIKeyboardTypeNumberPad;
        percentageDiscTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
        percentageDiscTxt.returnKeyType = UIReturnKeyDone;
        percentageDiscTxt.delegate = self;
        [percentageDiscTxt selectAll:nil];
        [percentageDiscTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        percentageDiscTxt.tag = sender.tag;
        percentageDiscTxt.delegate = self;
        //[percentageDiscTxt becomeFirstResponder];
        
        percentageDiscValTxt = [[UITextField alloc] init];
        percentageDiscValTxt.borderStyle = UITextBorderStyleRoundedRect;
        percentageDiscValTxt.textColor = [UIColor blackColor];
        percentageDiscValTxt.placeholder = @"Calculated";
        percentageDiscValTxt.font = [UIFont systemFontOfSize:17.0];
        percentageDiscValTxt.backgroundColor = [UIColor whiteColor];
        percentageDiscValTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        percentageDiscValTxt.keyboardType = UIKeyboardTypeNumberPad;
        percentageDiscValTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
        percentageDiscValTxt.returnKeyType = UIReturnKeyDone;
        percentageDiscValTxt.delegate = self;
        percentageDiscValTxt.userInteractionEnabled = NO;
        
        reasontextField = [[UITextField alloc] init];
        reasontextField.borderStyle = UITextBorderStyleRoundedRect;
        reasontextField.textColor = [UIColor blackColor];
        reasontextField.placeholder = @"Select Reason";
        //NumberKeyBoard hidden....
        reasontextField.keyboardType = UIKeyboardTypeNumberPad;
        reasontextField.font = [UIFont systemFontOfSize:17.0];
        reasontextField.backgroundColor = [UIColor whiteColor];
        reasontextField.autocorrectionType = UITextAutocorrectionTypeNo;
        //qtyFeild.keyboardType = UIKeyboardTypeDefault;
        reasontextField.clearButtonMode = UITextFieldViewModeWhileEditing;
        reasontextField.returnKeyType = UIReturnKeyDone;
        reasontextField.delegate = self;
        [reasontextField setUserInteractionEnabled:FALSE];
        
        UIButton *selectReason = [UIButton buttonWithType:UIButtonTypeCustom];
        
        UIImage *buttonImageDD = [UIImage imageNamed:@"combo.png"];
        [selectReason setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
        [selectReason addTarget:self
                         action:@selector(showReasonsView:) forControlEvents:UIControlEventTouchDown];
        
        
        /** ok Button for edit price view....*/
        okEditPriceButton = [UIButton buttonWithType:UIButtonTypeCustom];
        //[okButton setImage:[UIImage imageNamed:@"OK.png"] forState:UIControlStateNormal];
        [okEditPriceButton addTarget:self
                              action:@selector(okReasonPressed:) forControlEvents:UIControlEventTouchDown];
        [okEditPriceButton setTitle:@"OK" forState:UIControlStateNormal];
        okEditPriceButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
        okEditPriceButton.backgroundColor = [UIColor grayColor];
        okEditPriceButton.tag = sender.tag;
        
        
        //added by Srinivasulu on 10/08/2017...
        
        UIButton * cancelDiscountBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        //[okButton setImage:[UIImage imageNamed:@"OK.png"] forState:UIControlStateNormal];
        [cancelDiscountBtn addTarget:self
                              action:@selector(dismissDisountView:) forControlEvents:UIControlEventTouchDown];
        [cancelDiscountBtn setTitle:NSLocalizedString(@"cancel", nil) forState:UIControlStateNormal];
        cancelDiscountBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
        cancelDiscountBtn.backgroundColor = [UIColor grayColor];
        cancelDiscountBtn.tag = sender.tag;
        
        
        //upto here on 10/08/2017....
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                img.frame = CGRectMake(0, 0, reasonView.frame.size.width, 50);
                editPriceLbl.frame =  CGRectMake(0, 10, reasonView.frame.size.width, 30);
                editPriceLbl.font = [UIFont boldSystemFontOfSize:25.0];
                
                actualPriceLbl.frame =  CGRectMake(50, 60, 150, 30);
                actualPriceVal.frame =  CGRectMake(220.0, 60, 200, 30);
                
                isFlatDiscBtn.frame = CGRectMake(10, 110, 30, 30);
                flatDiscLbl.frame = CGRectMake(isFlatDiscBtn.frame.origin.x + isFlatDiscBtn.frame.size.width + 10, isFlatDiscBtn.frame.origin.y, 200, 30);
                
                newPriceField.frame = CGRectMake(flatDiscLbl.frame.origin.x + flatDiscLbl.frame.size.width + 10, 100, 210, 50);
                newPriceField.font = [UIFont systemFontOfSize:20.0];
                
                isPercentileDiscBtn.frame = CGRectMake(10, 170, 30, 30);
                percentageDiscLbl.frame = CGRectMake(isPercentileDiscBtn.frame.origin.x + isPercentileDiscBtn.frame.size.width + 10, 170, 200, 30);
                
                percentageDiscTxt.frame = CGRectMake(percentageDiscLbl.frame.origin.x + percentageDiscLbl.frame.size.width + 10, 160, 80, 50);
                percentageDiscTxt.font = [UIFont systemFontOfSize:20.0];
                
                percentageDiscValTxt.frame = CGRectMake(percentageDiscTxt.frame.origin.x + percentageDiscTxt.frame.size.width + 10, 160, 120, 50);
                percentageDiscValTxt.font = [UIFont systemFontOfSize:20.0];
                
                
                reasontextField.frame = CGRectMake(10.0, 240, 350.0, 50);
                reasontextField.font = [UIFont systemFontOfSize:20.0];
                selectReason.frame = CGRectMake(320.0, 235.0, 50.0, 65.0);
                
                //                okEditPriceButton.frame = CGRectMake(180, 320, 165, 45);
                //                okEditPriceButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                //                okEditPriceButton.layer.cornerRadius = 20.0f;
                
                //changed by Srinivasulu on 10/08/2017....
                
                
                okEditPriceButton.frame = CGRectMake( (reasonView.frame.size.width - 300)/3, 320, 150, 45);
                okEditPriceButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                okEditPriceButton.layer.cornerRadius = 20.0f;
                
                
                cancelDiscountBtn.frame = CGRectMake( 2 * okEditPriceButton.frame.origin.x + okEditPriceButton.frame.size.width, okEditPriceButton.frame.origin.y, okEditPriceButton.frame.size.width, okEditPriceButton.frame.size.height);
                cancelDiscountBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                cancelDiscountBtn.layer.cornerRadius = 20.0f;
                
                //upto here on 10/08/2017....
                
            }
        }
        [reasonView addSubview:img];
        [reasonView addSubview:editPriceLbl];
        [reasonView addSubview:actualPriceLbl];
        [reasonView addSubview:actualPriceVal];
        [reasonView addSubview:newPriceField];
        [reasonView addSubview:reasontextField];
        [reasonView addSubview:selectReason];
        
        [reasonView addSubview:isFlatDiscBtn];
        [reasonView addSubview:flatDiscLbl];
        [reasonView addSubview:isPercentileDiscBtn];
        [reasonView addSubview:percentageDiscLbl];
        [reasonView addSubview:percentageDiscTxt];
        [reasonView addSubview:percentageDiscValTxt];
        
        //changed by Srinivasulu on 10/08/2017....
        
        [reasonView addSubview:okEditPriceButton];
        [reasonView addSubview:cancelDiscountBtn];
        
        //upto here on 10/08/2017....
        
        
        //added by Srinivasulu on 28/09/2017....
        
        @try {
            
            
            if((isItemFlatDiscountedArr.count > sender.tag) && (itemDiscountArr.count > sender.tag)  && (itemDiscountDescArr.count > sender.tag) ){
                
                reasontextField.text = itemDiscountDescArr[sender.tag];
                
                if([isItemFlatDiscountedArr[sender.tag] integerValue] || (![itemDiscountArr[sender.tag] floatValue])){
                    
                    [isFlatDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
                    [isPercentileDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                    
                    newPriceField.text = [NSString stringWithFormat:@"%.2f", [itemDiscountArr[sender.tag] floatValue]];
                    newPriceField.userInteractionEnabled = YES;
                    percentageDiscTxt.userInteractionEnabled = NO;
                }
                else{
                    
                    [isFlatDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                    [isPercentileDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
                    
                    percentageDiscValTxt.text = [NSString stringWithFormat:@"%.2f", [itemDiscountArr[sender.tag] floatValue]];
                    
                    isFlatDisc = false;
                    
                    float itemTotalPrice = [itemDetailsArr[4] floatValue] * [itemDetailsArr[5] floatValue];
                    
                    if(onlineOfferDiscountPriceArr.count > sender.tag)
                        itemTotalPrice -= [onlineOfferDiscountPriceArr[sender.tag] floatValue];
                    
                    if(onlineDealDiscountPriceArr.count > sender.tag)
                        itemTotalPrice -= [onlineDealDiscountPriceArr[sender.tag] floatValue];
                    
                    float fraction = 0;
                    if (turnoverofferDiscount > 0) {
                        
                        fraction = ((itemTotalPrice / totalBeforeTurnOver) * 100);
                        itemTotalPrice = itemTotalPrice - ((turnoverofferDiscount * fraction) / 100);
                    }
                    
                    if(otherDiscountValue.floatValue > 0){
                        
                        itemTotalPrice = itemTotalPrice - (itemTotalPrice * (otherDiscountValue.floatValue/100.0));
                    }
                    
                    percentageDiscTxt.text = [NSString stringWithFormat:@"%.2f", (([itemDiscountArr[sender.tag] floatValue]/itemTotalPrice) * 100)];
                    
                    
                    newPriceField.userInteractionEnabled = NO;
                    percentageDiscTxt.userInteractionEnabled = YES;
                    
                    //                    if(![percentageDiscTxt.text floatValue]){
                    //
                    //                        [isFlatDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
                    //                        [isPercentileDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                    //
                    //                        percentageDiscTxt.text = = @"":
                    //                        percentageDiscValTxt.text = @"":
                    //
                    //                        newPriceField.text = [NSString stringWithFormat:@"%.2f", [[itemDiscountArr objectAtIndex:sender.tag] floatValue]];
                    //                        newPriceField.userInteractionEnabled = YES;
                    //                        percentageDiscTxt.userInteractionEnabled = NO;
                    //                    }
                    
                    
                }
                
            }
        } @catch (NSException *exception) {
            
        }
        
        //upto here on 28/09/2017....
        
        
        customerInfoPopUp.view = reasonView;
        
        NSIndexPath *selectedRow = [NSIndexPath indexPathForRow:sender.tag inSection:0];
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            customerInfoPopUp.preferredContentSize =  CGSizeMake(reasonView.frame.size.width, reasonView.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            
            
            
            //changed  by Srinivasulu on 27/09/2017....
            //reason complete popUp has to be vissible....
            
            //                   [popover presentPopoverFromRect:sender.frame inView:[cartTable cellForRowAtIndexPath:selectedRow] permittedArrowDirections:UIPopoverArrowDirectionLeft animated:YES];
            [popover presentPopoverFromRect:sender.frame inView:[cartTable cellForRowAtIndexPath:selectedRow] permittedArrowDirections:(UIPopoverArrowDirectionLeft | UIPopoverArrowDirectionRight) animated:YES];
            
            //upto here on 27/09/2017.....
            
            editPricePopOver = popover;
        }
        
        else {
            
            //commented by Srinivaslulu on 28/09/2017.... in order to remove the warraning....
            //reason -- it was deprecarted in iOS7 -- currently we are not designing for iPhones....
            
            //            customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            //upto here on 28/09/2017....
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            // popover.contentViewController.view.alpha = 0.0;
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            editPricePopOver = popover;
        }
        
    }
    @catch (NSException *exception) {
        [editPricePopOver dismissPopoverAnimated:YES];
        NSLog(@"%@",exception.name);
    }
    @finally {
    }
}

/**
 * @description  here we are validating the discout amount entered by user and saving it if valide....
 * @date
 * @method       okReasonPressed:
 * @author
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By  Srinivasulu on 03/07/2017....
 * @reason       checking with total itemcost and vadliating the enter discount amount is valide or not....
 *
 * @verified By
 * @verified On
 *
 */

-(void)okReasonPressed:(UIButton *)sender {
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        [newPriceField resignFirstResponder];
        
        NSString *value = [newPriceField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        NSArray *temp = [cartTotalItems[sender.tag] componentsSeparatedByString:@"#"];
        
        float price = 0.00f;
        
        if ([editedPriceArr[sender.tag] floatValue] > 0) {
            
            price = [editedPriceArr[sender.tag] floatValue];
        }
        else {
            
            price = [temp[4] floatValue];
        }
        
        //changed by Srinivasulu on 02/08/2017....
        
        //changed by Srinivasulu on 18/08/2017....
        //chagned from  sender.tag ------ to  -------- positionCount....
        
        NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[sender.tag]];
        
        //        NSArray * temp1 = [[cartItem objectAtIndex:sender.tag] componentsSeparatedByString:@"#"];
        
        NSArray * temp1 = [cartItem[positionCount] componentsSeparatedByString:@"#"];
        
        
        //upto here on 18/082017.....
        
        
        price = price * [temp1[5] floatValue];
        
        
        if(onlineDealDiscountPriceArr.count > sender.tag)
            price -= [onlineDealDiscountPriceArr[sender.tag] floatValue];
        
        if(onlineOfferDiscountPriceArr.count > sender.tag)
            price -= [onlineOfferDiscountPriceArr[sender.tag] floatValue];
        
        
        //added by Srinivasulu on  03/10/2017....
        
        float fraction = 0;
        if (turnoverofferDiscount > 0) {
            
            fraction = ((price / totalBeforeTurnOver) * 100);
            price = price - ((turnoverofferDiscount * fraction) / 100);
        }
        
        if(otherDiscountValue.floatValue > 0){
            
            price = price - (price  * (otherDiscountValue.floatValue/100.0));
        }
        
        
        //upto here on 03/10/2017....
        
        
        BOOL isValide = true;
        
        
        //verify the FlatDisc
        if ((value.floatValue > price) && isFlatDisc)
            
            isValide = false;
        
        else if( [percentageDiscTxt.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]].floatValue > 100)
            
            isValide = false;
        
        
        //    if(!isFlatDisc){
        //
        //        price = 101;
        //        value = [percentageDiscTxt.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        //    }
        //
        //    if ([value floatValue] > price) {
        
        if (!isValide) {
            //upto here on 02/08/2017....
            
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Discount Amount Exceeds Item Cost" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
            newPriceField.text = nil;
            
        }
        else {
            [editPricePopOver dismissPopoverAnimated:YES];
            if (isFlatDisc) {
                itemDiscountArr[sender.tag] = @((newPriceField.text).floatValue);
            }
            else {
                float discountedPrice = 0;
                
                
                //changed by Srinivasulu on 02/08/2017....
                
                //            NSArray *temp = [[cartItem objectAtIndex:[sender tag]] componentsSeparatedByString:@"#"];
                //
                //            NSLog(@"%f",(price * [[temp objectAtIndex:5] floatValue]));
                //            discountedPrice = ((price * [[temp objectAtIndex:5] floatValue]) * [percentageDiscTxt.text floatValue]) / 100;
                
                
                discountedPrice = (price * (percentageDiscTxt.text).floatValue) / 100;
                
                
                //upto here on 02/08/2017....
                
                itemDiscountArr[sender.tag] = @(discountedPrice);
                
                
            }
            
            itemDiscountDescArr[sender.tag] = reasontextField.text;
            
            
            //added by Srinivasulu on 28/09/2017....
            
            if(isItemFlatDiscountedArr.count > sender.tag){
                
                isItemFlatDiscountedArr[sender.tag] = @(isFlatDisc);
            }
            
            //upto her eon 28/09/2017....
            
            
            //added by Srinivasulu on 13/09/2017....
            //reason after manual discount campaign are not calling....
            
            @try {
                
                NSMutableDictionary * inputDic = [NSMutableDictionary new];
                [inputDic setValue:temp1[0] forKey:@"skuID"];
                [inputDic setValue:[NSString stringWithFormat:@"%.2f",[temp1[5] floatValue]] forKey:@"qty"];
                [inputDic setValue:[NSString stringWithFormat:@"%.2f",price] forKey:@"totalPrice"];
                [inputDic setValue:[NSString stringWithFormat:@"%.02f",([temp1[4] floatValue])] forKey:@"price"];
                
                [HUD setHidden:NO];
                
                [self callOffersForScanning:[inputDic valueForKey:@"skuID"] qty:[inputDic valueForKey:@"qty"] total:[inputDic valueForKey:@"totalPrice"] itemPrice:[inputDic valueForKey:@"price"]];
                
            } @catch (NSException *exception) {
                
            }
            
            //upto here on 13/09/2017....
            
            [cartTable reloadData];
            [self updateValues];
        }
        
    } @catch (NSException *exception) {
        
        
        float y_axis = self.view.frame.size.height - 350;
        
        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"unable_update_entered_discount_amount", nil)];
        
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
    }
    
    
}

/**
 * @description  here we are validating the discout amount entered by user and saving it if valide....
 * @date
 * @method       okReasonPressed:
 * @author
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By  Srinivasulu on 03/07/2017....
 * @reason       checking with total itemcost and vadliating the enter discount amount is valide or not....
 *
 * @verified By
 * @verified On
 *
 */

-(void)showReasonsView:(UIButton*)sender {
    
    @try {
        
        if(!discountReasons.count){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"discount_reasons_are_not_avaliable", nil)];
            
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            return;
        }
        
        float tableHeight = discountReasons.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = discountReasons.count * 33;
        
        if(discountReasons.count > 5)
            tableHeight = (tableHeight/discountReasons.count) * 5;
        
        
        [self showPopUpForTables:reasonsTable  popUpWidth:reasontextField.frame.size.width  popUpHeight:tableHeight presentPopUpAt:reasontextField  showViewIn:reasonView permittedArrowDirections:UIPopoverArrowDirectionUp];
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
    
    //    PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
    //
    //    UIView *editPriceView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, reasontextField.frame.size.width, 250)];
    //    editPriceView.opaque = NO;
    //    editPriceView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
    //    editPriceView.layer.borderColor = [UIColor lightGrayColor].CGColor;
    //    editPriceView.layer.borderWidth = 2.0f;
    //    [editPriceView setHidden:NO];
    //
    //    reasonsTable = [[UITableView alloc] init];
    //    reasonsTable.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    //    [reasonsTable setDataSource:self];
    //    [reasonsTable setDelegate:self];
    //    [reasonsTable.layer setBorderWidth:1.0f];
    //    reasonsTable.layer.cornerRadius = 3;
    //    reasonsTable.layer.borderColor = [UIColor grayColor].CGColor;
    //
    //    reasonsTable.frame = CGRectMake(0.0, 0.0, editPriceView.frame.size.width, editPriceView.frame.size.height);
    //
    //    [editPriceView addSubview:reasonsTable];
    //    customerInfoPopUp.view = editPriceView;
    //
    //    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
    //        customerInfoPopUp.preferredContentSize =  CGSizeMake(editPriceView.frame.size.width, editPriceView.frame.size.height);
    //
    //        UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
    //
    //        [popover presentPopoverFromRect:reasontextField.frame inView:reasonView permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
    //
    //
    //        reasonPopOver= popover;
    //
    //    }
    //
    //    else {
    //
    //        customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
    //
    //        UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
    //        // popover.contentViewController.view.alpha = 0.0;
    //        [[[popover contentViewController]  view] setBackgroundColor:[[UIColor whiteColor] colorWithAlphaComponent:1.0f]];
    //        [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
    //        reasonPopOver = popover;
    //
    //    }
    
}

/**
 * @description  here we are validating the discout amount entered by user and saving it if valide....
 * @date         10/08/2017....
 * @method       dismissDisountView:
 * @author
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)dismissDisountView:(UIButton*)sender{
    
    @try {
        
        [editPricePopOver dismissPopoverAnimated:YES];
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}


-(void)populateQtyView:(UIButton*)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        // if ([btManager powered]) {
        
        //            [btManager setPowered:NO];
        //            [btManager setEnabled:NO];
        //  }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
    [segmentedControl setUserInteractionEnabled:NO];
    cartTable.userInteractionEnabled = FALSE;
    eraseButton.userInteractionEnabled = FALSE;
    barcodeBtn.userInteractionEnabled = FALSE;
    BillField.userInteractionEnabled = FALSE;
    
    qtyChangeDisplyView = [[UIView alloc]init];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            
            qtyChangeDisplyView.frame = CGRectMake(300, 120, 375, 300);
            
        }
        else {
            qtyChangeDisplyView.frame = CGRectMake(200, 300, 375, 300);
            
        }
    }
    else{
        qtyChangeDisplyView.frame = CGRectMake(75, 68, 175, 200);
    }
    qtyChangeDisplyView.layer.borderWidth = 1.0;
    qtyChangeDisplyView.layer.cornerRadius = 10.0;
    qtyChangeDisplyView.layer.masksToBounds = YES;
    qtyChangeDisplyView.layer.borderColor = [UIColor blackColor].CGColor;
    qtyChangeDisplyView.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    [self.view addSubview:qtyChangeDisplyView];
    
    UIImageView *img  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
    
    // a label on top of the view ..
    UILabel *topbar = [[UILabel alloc] init];
    topbar.backgroundColor = [UIColor grayColor];
    topbar.text = @"    Enter Quantity";
    topbar.backgroundColor = [UIColor clearColor];
    topbar.textAlignment = NSTextAlignmentCenter;
    topbar.font = [UIFont boldSystemFontOfSize:17];
    topbar.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:17.0f];
    topbar.textColor = [UIColor whiteColor];
    topbar.textAlignment = NSTextAlignmentLeft;
    
    
    UILabel *availQty = [[UILabel alloc] init];
    availQty.text = @"Available Qty :";
    availQty.font = [UIFont boldSystemFontOfSize:14];
    availQty.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    availQty.backgroundColor = [UIColor clearColor];
    availQty.textColor = [UIColor blackColor];
    [qtyChangeDisplyView addSubview:availQty];
    
    UILabel *unitPrice = [[UILabel alloc] init];
    unitPrice.text = @"Unit Price       :";
    unitPrice.font = [UIFont boldSystemFontOfSize:14];
    unitPrice.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    unitPrice.backgroundColor = [UIColor clearColor];
    unitPrice.textColor = [UIColor blackColor];
    
    
    UILabel *availQtyData = [[UILabel alloc] init];
    availQtyData.text = [cartTotalItems[sender.tag] componentsSeparatedByString:@"#"][3];
    availQtyData.font = [UIFont boldSystemFontOfSize:14];
    availQtyData.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    availQtyData.backgroundColor = [UIColor clearColor];
    availQtyData.textColor = [UIColor blackColor];
    [qtyChangeDisplyView addSubview:availQtyData];
    
    UILabel *unitPriceData = [[UILabel alloc] init];
    unitPriceData.text = [NSString stringWithFormat:@"%.2f",[cartTotalItems[sender.tag] componentsSeparatedByString:@"#"][4].floatValue] ;
    unitPriceData.font = [UIFont boldSystemFontOfSize:14];
    unitPriceData.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    unitPriceData.backgroundColor = [UIColor clearColor];
    unitPriceData.textColor = [UIColor blackColor];
    
    //        if ([[unitOfMeasurement objectAtIndex:textField.tag] isEqualToString:@"Kilogram"]) {
    //            availQtyData.text = [NSString stringWithFormat:@"%@%@",availQtyData.text,@"Kg"];
    //            unitPriceData.text = [NSString stringWithFormat:@"%@%@",unitPriceData.text,@"/Kg"];
    //        }
    
    qtyFeild = [[UITextField alloc] init];
    qtyFeild.borderStyle = UITextBorderStyleRoundedRect;
    qtyFeild.textColor = [UIColor blackColor];
    qtyFeild.placeholder = @"Enter Qty";
    //NumberKeyBoard hidden....
    UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
    numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                             [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar1 sizeToFit];
    qtyFeild.keyboardType = UIKeyboardTypeNumberPad;
    qtyFeild.text = sender.titleLabel.text;
    qtyFeild.font = [UIFont systemFontOfSize:17.0];
    qtyFeild.backgroundColor = [UIColor whiteColor];
    qtyFeild.autocorrectionType = UITextAutocorrectionTypeNo;
    //qtyFeild.keyboardType = UIKeyboardTypeDefault;
    qtyFeild.clearButtonMode = UITextFieldViewModeWhileEditing;
    qtyFeild.returnKeyType = UIReturnKeyDone;
    qtyFeild.delegate = self;
    [qtyFeild becomeFirstResponder];
    qtyFeild.tag = sender.tag;
    
    /** ok Button for qtyChangeDisplyView....*/
    okButton = [UIButton buttonWithType:UIButtonTypeCustom];
    //[okButton setImage:[UIImage imageNamed:@"OK.png"] forState:UIControlStateNormal];
    [okButton addTarget:self
                 action:@selector(okButtonPressed:) forControlEvents:UIControlEventTouchDown];
    [okButton setTitle:@"OK" forState:UIControlStateNormal];
    okButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    okButton.backgroundColor = [UIColor grayColor];
    
    /** CancelButton for qtyChangeDisplyView....*/
    qtyCancelButton = [UIButton buttonWithType:UIButtonTypeCustom];
    //[qtyCancelButton setImage:[UIImage imageNamed:@"Cancel.png"] forState:UIControlStateNormal];
    [qtyCancelButton addTarget:self
                        action:@selector(QtyCancelButtonPressed:) forControlEvents:UIControlEventTouchDown];
    [qtyCancelButton setTitle:@"Cancel" forState:UIControlStateNormal];
    qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    qtyCancelButton.backgroundColor = [UIColor grayColor];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        
        img.frame = CGRectMake(0, 0, 375, 50);
        topbar.frame = CGRectMake(80, 5, 375, 40);
        topbar.font = [UIFont boldSystemFontOfSize:25];
        
        
        availQty.frame = CGRectMake(10,60,200,40);
        availQty.font = [UIFont boldSystemFontOfSize:25];
        
        
        unitPrice.frame = CGRectMake(10,110,200,40);
        unitPrice.font = [UIFont boldSystemFontOfSize:25];
        
        
        availQtyData.frame = CGRectMake(200,60,250,40);
        availQtyData.font = [UIFont boldSystemFontOfSize:25];
        
        
        unitPriceData.frame = CGRectMake(200,110,2500,40);
        unitPriceData.font = [UIFont boldSystemFontOfSize:25];
        
        
        qtyFeild.frame = CGRectMake(110, 165, 150, 50);
        qtyFeild.font = [UIFont systemFontOfSize:25.0];
        
        
        okButton.frame = CGRectMake(60, 220, 80, 50);
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        
        okButton.frame = CGRectMake(20, 235, 165, 45);
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        okButton.layer.cornerRadius = 20.0f;
        
        qtyCancelButton.frame = CGRectMake(190, 235, 165, 45);
        qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        qtyCancelButton.layer.cornerRadius = 20.0f;
        
        
    }
    else{
        qtyFeild.inputAccessoryView = numberToolbar1;
        
        img.frame = CGRectMake(0, 0, 175, 32);
        topbar.frame = CGRectMake(0, 0, 175, 30);
        topbar.font = [UIFont boldSystemFontOfSize:17];
        
        availQty.frame = CGRectMake(10,40,100,30);
        availQty.font = [UIFont boldSystemFontOfSize:14];
        
        unitPrice.frame = CGRectMake(10,70,100,30);
        unitPrice.font = [UIFont boldSystemFontOfSize:14];
        
        availQtyData.frame = CGRectMake(115,40,60,30);
        availQtyData.font = [UIFont boldSystemFontOfSize:14];
        
        unitPriceData.frame = CGRectMake(115,70,60,30);
        unitPriceData.font = [UIFont boldSystemFontOfSize:14];
        
        qtyFeild.frame = CGRectMake(36, 107, 100, 30);
        qtyFeild.font = [UIFont systemFontOfSize:17.0];
        
        okButton.frame = CGRectMake(10, 150, 75, 30);
        okButton.layer.cornerRadius = 14.0f;
        okButton.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
        qtyCancelButton.frame = CGRectMake(90, 150, 75, 30);
        qtyCancelButton.layer.cornerRadius = 14.0f;
        qtyCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
    }
    
    [qtyChangeDisplyView addSubview:img];
    [qtyChangeDisplyView addSubview:topbar];
    [qtyChangeDisplyView addSubview:availQty];
    [qtyChangeDisplyView addSubview:unitPrice];
    [qtyChangeDisplyView addSubview:availQtyData];
    [qtyChangeDisplyView addSubview:unitPriceData];
    [qtyChangeDisplyView addSubview:qtyFeild];
    [qtyChangeDisplyView addSubview:okButton];
    [qtyChangeDisplyView addSubview:qtyCancelButton];
    
    //changed by Srinivasulu on 28/09/2017.... in order to remove the warning....
    //reason -- NSInteger is going to aollocate to int....
    
    //    tagid = sender.tag;
    tagid = (int)sender.tag;
    
    //upto here on 28/09/2017....
    
    // [HUD setHidden:YES];
    
}


/**
 * @description  here we are ....
 * @date
 * @method       segmentAction:--
 * @author
 * @param         id
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 26/10/2017....
 * @reason       added the new parameter withPlucode:--
 *
 * @verified By
 * @verified On
 *
 */

// Action for the buttons on segmented control ..

- (void) segmentAction: (id) sender  {
    
    @try {
        
        //Play Audio for button touch....
        AudioServicesPlaySystemSound (soundFileObject);
        
        //added by Srinivasulu on 26/10/2017 && 09/03/2018....
        
        if (cartItem.count == 0) {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"please_add_items_to_cart", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
            [alert show];
            segmentedControl.selectedSegmentIndex = UISegmentedControlNoSegment;
            return;
        }
        
        
//        // added by roja on 20/11/2019...  // WALLET_RELATED
//        BOOL isWalletAmtEmpty = false;
//        for (int i = 0; i < cartItem.count; i++) {
//
//            NSLog(@"Wallet  %@",[cartItem[i] componentsSeparatedByString:@"#"][10]);
//            if([[cartItem[i] componentsSeparatedByString:@"#"][10] isEqualToString:@"WALLET"]){
//
//                if([[cartItem[i] componentsSeparatedByString:@"#"][4] floatValue] <= 0){
//                    isWalletAmtEmpty = true;
//                }
//            }
//        }
//        //Upto here added by roja on 20/11/2019...

        
        
        Boolean showEmployeeSelectionAlert = false;
        
        if(isEmployeeSaleId){
            
            if(!(employeeDic.allKeys.count == cartTotalItems.count))
                showEmployeeSelectionAlert = true;
        }
        
        if(showEmployeeSelectionAlert){
            
            [HUD setHidden:YES];
            
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"select_the_sales_person_for_all_items", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
            [alert show];
            segmentedControl.selectedSegmentIndex = UISegmentedControlNoSegment;
            return;
        }
        
        
        //upto here on 26/10/2017....
        
        isItemEmpl = false;
        
        isReturnDenom = false;
        
        
        segmentedControl = (UISegmentedControl *)sender;
        segment_index = segmentedControl.selectedSegmentIndex;
        
        //    [self networkSwitch];
        finalBillDue = @"0.00";
        
        segmentedControl.selectedSegmentIndex = UISegmentedControlNoSegment;
        
        if ([(self.view).subviews containsObject:skListTable]) {
            
            [skListTable setHidden:YES];
        }
        
        //    if ([paymentTransactionArray count]>0) {
        //
        //        [paymentTransactionArray removeAllObjects];
        //    }
        
        CheckWifi *wifi = [[CheckWifi alloc]init];
        BOOL status = [wifi checkWifi];
        
        if (turnOverFreeItems.length > 0) {
            BOOL freeStatus = [self checkForTurnOverItem];
            
            if (freeStatus) {
                
                turnOverFreeItems = @"";
            }
        }
        
        
        //added by Srinivasulu on 21/11/2017....
        
        if(cardTypeTxt.text != nil)
            cardTypeTxt.text = @"";
        
        
        //upto here on 21/11/2017....
        
        //added by Srinivasulu on 30/01/2018 && 21/03/2018....
        
        if(refreshOnlineOrderBtn.tag == 4 && isNewReturnBill)
            isNewReturnBill = false;
        
        
        NSInteger switchCase = segment_index;
        if(isNewReturnBill){
            
            if([returnMode caseInsensitiveCompare:@"cash"] != NSOrderedSame && segment_index != 0 && segment_index != 4)
                segment_index = 1;
            
            if(segment_index != 4)
                switchCase = 0;
        }
        //        switch (segment_index) {
        
        switch (switchCase) {
                
                //upto here on 30/01/2018....
                
            case 0:
            {
                if (cartItem.count == 0) {
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                // added by roja on 29/07/2019..
                // reason need to check wheather membership check-box and membership type is selected----(only if membership items are available in the cart)...
                else if(isMemberShipItemAdded && ([memberShipText.text length] == 0 || memberShipCheckBoxBtn.tag == 2)){

                    [self displayAlertMessage:@"Please update customer membership details" horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
                }
                else if(isWalletItemAdded && ([custmerPhNum.text length] == 0 || [custmerPhNum.text length] < 10)){
                        
                        [self displayAlertMessage:@"Wallet item requires customer mobile number" horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
                    
                }
//                else if(isWalletAmtEmpty){  // WALLET_RELATED
//                    [self displayAlertMessage:@"Please enter the price for the wallet item." horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
//
//                }
                // upto here added by roja on 29/07/2019..
                
                

                //commented by Srinivasulu on 18/07/2017....
                //reason commented
                
                //            else if ((unAppliedDealIndex >= 0 || ([turnOverFreeItems length] > 0 && [[turnOverFreeItemsDesc objectAtIndex:0]length] > 0)) && ([custID caseInsensitiveCompare:@"CID8995458"] != NSOrderedSame)) {
                //                //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please add all the Free Items" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                //                //                [alert show];
                //                [self populateUnAppliedDealItemInfo];
                //            }
                
                
                //upto here on 18/07/2017....
                
                
                
                else {
                    //added by srinivasulu on 24/11/2017....
                    
                    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                    
                    if (!([[defaults valueForKey:DENOMNINATION_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:DENOMNINATION_OPTIONS] == nil)) {
                        
                        for(NSDictionary * payDic in [defaults valueForKey:DENOMNINATION_OPTIONS]){
                            
                            if([[payDic valueForKey:TENDER_NAME] caseInsensitiveCompare:INR] == NSOrderedSame){
                                
                                if(billPaymentTendeInfoDic.allKeys.count)
                                    [billPaymentTendeInfoDic removeAllObjects];
                                
                                billPaymentTendeInfoDic = [payDic mutableCopy];
                                break;
                            }
                        }
                        
                        if( (billPaymentTendeInfoDic == nil ) && [[defaults valueForKey:DENOMNINATION_OPTIONS] count] &&  !billPaymentTendeInfoDic.allKeys.count)
                            billPaymentTendeInfoDic = [[defaults valueForKey:DENOMNINATION_OPTIONS][0] mutableCopy];
                    }
                    
                    
                    //upto here on 24/11/2017....
                    
                    
                    
                    if (isOfflineService) {
                        [self quickPayCall];
                    }
                    else {
                        if (![WebServiceUtility checkWhetherItemSpecificItemContainsInCart:itemDiscountArr isVoidedArray:isVoidedArray]) {
                            [self quickPayCall];
                        }
                        else {
                            if ([self allowItemSpecificDiscountToUser:roleNameLists]) {
                                [self quickPayCall];
                            }
                            else {
                                finalBillDue = [netPayLblVal.text copy];
                                [self logging];
                            }
                        }
                    }
                }
                break;
            }
            case 1:
            {
                
                if (paymentView.hidden) {
                    
                    
                    if (cartItem.count == 0) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                        
                    }
                    //commented by Srinivasulu on 20/07/2017....
                    
                    //                else if ((unAppliedDealIndex >= 0 || ([turnOverFreeItems length] > 0 && [[turnOverFreeItemsDesc objectAtIndex:0]length] > 0)) && ([custID caseInsensitiveCompare:@"CID8995458"] != NSOrderedSame)) {
                    //                    //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please add all the Free Items" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    //                    //                    [alert show];
                    //                    [self populateUnAppliedDealItemInfo];
                    //                }
                    
                    //upto here on 20/07/2017....
                    
                    // added by roja on 29/07/2019..
                    else if(isMemberShipItemAdded && ([memberShipText.text length] == 0 || memberShipCheckBoxBtn.tag == 2)){
                        
                        [self displayAlertMessage:@"Please update customer membership details" horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
                    }
                    else if(isWalletItemAdded && ([custmerPhNum.text length] == 0 || [custmerPhNum.text length] < 10)){
                        
                        [self displayAlertMessage:@"Please provide the customer mobile number." horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
                    }
                    
//                    else if(isWalletAmtEmpty){ // WALLET_RELATED
//
//                        [self displayAlertMessage:@"Please enter the price for the wallet item." horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
//
//                    }
                    // upto here added by roja on 29/07/2019..
                    

                    else {
                        if (isOfflineService) {
                            [self setSiblings:paymentView enabled:FALSE];
                            
                            // [self populateDenominationView];
                            
                            [self populateDenominations];
                            
                        }
                        else {
                            if (![WebServiceUtility checkWhetherItemSpecificItemContainsInCart:itemDiscountArr isVoidedArray:isVoidedArray]) {
                                // disable the backgroud view ..
                                [self setSiblings:paymentView enabled:FALSE];
                                
                                //                            [self populateDenominationView];
                                
                                [self populateDenominations];
                            }
                            else {
                                if ([self allowItemSpecificDiscountToUser:roleNameLists]) {
                                    // disable the backgroud view ..
                                    [self setSiblings:paymentView enabled:FALSE];
                                    
                                    // [self populateDenominationView];
                                    
                                    [self populateDenominations];
                                    
                                    
                                }
                                else {
                                    finalBillDue = [netPayLblVal.text copy];
                                    [self logging];
                                }
                            }
                        }
                    }
                    
                }
                
                break;
            }
            case 2:
            {
                
                if (cartItem.count == 0) {
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                //commented by Srinivasulu on 20/07/2017....
                
                
                //            else if ((unAppliedDealIndex >= 0 || ([turnOverFreeItems length] > 0 && [[turnOverFreeItemsDesc objectAtIndex:0]length] > 0)) && ([custID caseInsensitiveCompare:@"CID8995458"] != NSOrderedSame)) {
                //                //                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please add all the Free Items" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                //                //                    [alert show];
                //                [self populateUnAppliedDealItemInfo];
                //            }
                
                //upto here on 20/07/2017....
                
                
                // added by roja on 29/07/2019..
                else if(isMemberShipItemAdded && ([memberShipText.text length] == 0 || memberShipCheckBoxBtn.tag == 2)){
                    
                    [self displayAlertMessage:@"Please update customer membership details" horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
                }
                else if(isWalletItemAdded && ([custmerPhNum.text length] == 0 || [custmerPhNum.text length] < 10)) {
                    
                    [self displayAlertMessage:@"Please provide the customer mobile number." horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
                }
//                else if(isWalletAmtEmpty){ // WALLET_RELATED
//
//                                       [self displayAlertMessage:@"Please enter the price for the wallet item." horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
//
//                                   }
                // upto here added by roja on 29/07/2019..

                
                
                else if((netPayLblVal.text).floatValue < minPayAmt) {
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:NSLocalizedString(@"min_payment_not_reached", nil), minPayAmt] message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil, nil];
                    [alert show];
                }
                else{
                    if (isOfflineService) {
                        [self addPaymentViewFor:@"CARD"];
                    }
                    else {
                        if (![WebServiceUtility checkWhetherItemSpecificItemContainsInCart:itemDiscountArr isVoidedArray:isVoidedArray]) {
                            [self addPaymentViewFor:@"CARD"];
                        }
                        else {
                            if ([self allowItemSpecificDiscountToUser:roleNameLists]) {
                                [self addPaymentViewFor:@"CARD"];
                            }
                            else {
                                finalBillDue = [netPayLblVal.text copy];
                                [self logging];
                            }
                        }
                    }
                }
                
                
                break;
            }
            case 3:
            { // save bill to draft
                
                //added by Srinivasulu on 07/08/2017....
                
                
                if ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) {
                    
                    float y_axis = self.view.frame.size.height - 350;
                    
                    NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"credit_bills_can_not_be_draft", nil)];
                    
                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                    
                    break;
                }
                
                //upto here on 07/08/2017....
                
                if (mailView.hidden) {
                    
                    [self.view addSubview:mailView];
                    
                    if (segmentedControl.tag == 0) {
                        
                        emailtext = [[UITextField alloc] init];
                        phnotext = [[UITextField alloc]init];
                        nametext = [[UITextField alloc]init];
                        
                        NSString *paidAmt = @"0.00";
                        finalBillDue = [netPayLblVal.text copy];
                        // totalTxt.text = [NSString stringWithFormat:@"%@",paidAmt];
                        payTxt2 = [[UITextField alloc] init];
                        payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
                        typeOfPayment = [[NSMutableString alloc] initWithString:@"Cash"];
                        if (cartItem.count > 0) {
                            
                            //changed by Srinivasulu on 07/08/2017....
                            
                            //                        [self addPaymentViewFor:@""];
                            [self continuePay1];
                            
                            //upto here on 07/08/2017...
                            
                        }
                        
                        //commented by Srinivasulu on 20/07/2017....
                        
                        //                    else if ((unAppliedDealIndex >= 0 || ([turnOverFreeItems length] > 0 && [[turnOverFreeItemsDesc objectAtIndex:0]length] > 0)) && ([custID caseInsensitiveCompare:@"CID8995458"] != NSOrderedSame)) {
                        //                        //                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please add all the Free Items" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        //                        //                        [alert show];
                        //                        [self populateUnAppliedDealItemInfo];
                        //                    }
                        
                        //upot here  on 20/07/2017....
                        
                        else{
                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please Add Items to cart" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                            [alert show];
                            
                        }
                    }
                }
                
                break;
            }
            case 4:{ //Other Payments
                
                //changed by srinivasulu on 25/11/2017.....
                if (cartItem.count == 0) {
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                
                // added by roja on 29/07/2019..
                else if(isMemberShipItemAdded && ([memberShipText.text length] == 0 || memberShipCheckBoxBtn.tag == 2)){
                    
                    [self displayAlertMessage:@"Please update customer membership details" horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
                }
                else if(isWalletItemAdded && ([custmerPhNum.text length] == 0 || [custmerPhNum.text length] < 10)){
                    
                    [self displayAlertMessage:@"Please provide the customer mobile number." horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
                }
                
//                else if(isWalletAmtEmpty){ // WALLET_RELATED
//
//                                       [self displayAlertMessage:@"Please enter the price for the wallet item." horizontialAxis:(self.view.frame.size.width - 500)/2  verticalAxis:(self.view.frame.size.width)/2  msgType:@"Warning" conentWidth:500 contentHeight:70  isSoundRequired:YES timming:2.0 noOfLines:1];
//
//                                   }
                // upto here added by roja on 29/07/2019..

                
                
                //changed by Srinivasulu on 19/02/2018....
                else
                    //                [self showOtherPaymentsView];
                {
                    if (isOfflineService) {
                        [self showOtherPaymentsView];
                    }
                    else {
                        if (![WebServiceUtility checkWhetherItemSpecificItemContainsInCart:itemDiscountArr isVoidedArray:isVoidedArray]) {
                            [self showOtherPaymentsView];
                        }
                        else {
                            if ([self allowItemSpecificDiscountToUser:roleNameLists]) {
                                [self showOtherPaymentsView];
                            }
                            else {
                                finalBillDue = [netPayLblVal.text copy];
                                [self logging];
                            }
                        }
                    }
                }
                
                
                //upto here on 19/02/2018....
                
                //                if (![WebServiceUtility checkWhetherItemSpecificItemContainsInCart:itemDiscountArr isVoidedArray:isVoidedArray]) {
                //                    cupon_type = [[NSMutableArray alloc] init];
                //                    [cupon_type addObject:@"Sodexo Coupons"];
                //                    [cupon_type addObject:@"Ticket Restaurant"];
                //                    value_arr = [[NSMutableArray alloc] initWithObjects:@"5",@"10",@"15",@"17",@"20",@"25",@"30",@"35",@"40",@"45",@"50",@"100",@"151",@"250",@"500", nil];
                //                    foodCouponTypeStr = @"Sodexo";
                //
                //                    couponArr = [[NSMutableArray alloc] init];
                //                    couponValArr = [[NSMutableArray alloc] init];
                //                    couponIdArr = [[NSMutableArray alloc] init];
                //                    couponTotalArr = [[NSMutableArray alloc] init];
                //
                //                    if (couponView.hidden) {
                //
                //                        if ([cartItem count] == 0) {
                //
                //                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                //                            [alert show];
                //
                //                        }
                //
                //                        //commented by Srinivasulu on 20/07/2017....
                //
                //                        //                    else if ((unAppliedDealIndex >= 0 || ([turnOverFreeItems length] > 0 && [[turnOverFreeItemsDesc objectAtIndex:0]length] > 0)) && ([custID caseInsensitiveCompare:@"CID8995458"] != NSOrderedSame)) {
                //                        //                        //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please add all the Free Items" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                //                        //                        //                [alert show];
                //                        //                        [self populateUnAppliedDealItemInfo];
                //                        //                    }
                //
                //                        //upto here on 20/07/2017....
                //
                //                        else {
                //
                //                            // disable the backgroud view ..
                //                            [self setSiblings:couponView enabled:FALSE];
                //
                //                            typeOfPayment = [[NSMutableString alloc] initWithString:@"Food Coupons"];
                //
                //                            payTxt2 = [[UITextField alloc] init];
                //
                //                            label = [[UILabel alloc] init];
                //                            label.text = @"    Coupon Payment";
                //                            label.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:18];
                //                            label.alpha = 0.8f;
                //                            label.textAlignment = NSTextAlignmentLeft;
                //                            label.backgroundColor = [UIColor whiteColor];
                //                            label.textColor = [UIColor blackColor];
                //
                //                            // close button to close the view ..
                //                            backbutton = [[UIButton alloc] init];
                //                            [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
                //                            backbutton.tag = 20;
                //
                //                            UIImage * image = [UIImage imageNamed:@"delete.png"];
                //                            [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
                //
                //                            UIButton *giftOkBtn = [UIButton buttonWithType:UIButtonTypeCustom];
                //                            [giftOkBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
                //                            giftOkBtn.tag = 21;
                //                            [giftOkBtn setTitle:@"Continue"    forState:UIControlStateNormal];
                //                            giftOkBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
                //                            giftOkBtn.titleLabel.textColor = [UIColor whiteColor];
                //                            giftOkBtn.backgroundColor = [UIColor grayColor];
                //
                //                            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                //
                //                                // img1.frame = CGRectMake(0, 0, 630, 460);
                //                                label.font = [UIFont systemFontOfSize:25];
                //                                label.frame = CGRectMake(0, 0, 750, 60);
                //                                backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
                //                                giftOkBtn.frame = CGRectMake(200.0, 620, 300.0, 40.0);
                //                                giftOkBtn.layer.cornerRadius = 22.0f;
                //                                giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                //                                couponView.layer.borderColor = [UIColor whiteColor].CGColor;
                //                                couponView.layer.borderWidth = 1.5f;
                //                                couponView.frame = CGRectMake(150, 70, 750, 680);
                //
                //                            }
                //                            else {
                //
                //                                if (version >= 8.0 ) {
                //                                    label.frame = CGRectMake(0, 0, 300, 40);
                //                                    backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
                //                                    couponView.layer.borderColor = [UIColor whiteColor].CGColor;
                //                                    couponView.layer.borderWidth = 1.0f;
                //                                    couponView.frame = CGRectMake(10, 70, 300, 450.0);
                //                                    giftOkBtn.frame = CGRectMake(80.0, 390.0, 150.0, 35);
                //                                    giftOkBtn.layer.cornerRadius = 18;
                //                                    giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:18.0];
                //                                }
                //                                else{
                //                                    label.frame = CGRectMake(0, 0, 300, 40);
                //                                    backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
                //
                //                                    giftOkBtn.frame = CGRectMake(80.0, 320, 150.0, 35);
                //                                    giftOkBtn.layer.cornerRadius = 18;
                //                                    giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:18.0];
                //
                //                                    couponView.frame = CGRectMake(10, 10, 350, 350);
                //                                }
                //
                //                            }
                //
                //                            //[paymentView addSubview:img1];
                //                            [couponView addSubview:label];
                //                            [couponView addSubview:backbutton];
                //                            [couponView addSubview:giftOkBtn];
                //                            [self.view addSubview:couponView];
                //
                //                            couponView.hidden = NO;
                //                            [self couponsView];
                //                        }
                //
                //                    }
                //                }
                //                else {
                //                    if (isOfflineService) {
                //                        cupon_type = [[NSMutableArray alloc] init];
                //                        [cupon_type addObject:@"Sodexo Coupons"];
                //                        [cupon_type addObject:@"Ticket Restaurant"];
                //                        value_arr = [[NSMutableArray alloc] initWithObjects:@"5",@"10",@"15",@"17",@"20",@"25",@"30",@"35",@"40",@"45",@"50",@"100",@"151",@"250",@"500", nil];
                //                        foodCouponTypeStr = @"Sodexo";
                //
                //                        couponArr = [[NSMutableArray alloc] init];
                //                        couponValArr = [[NSMutableArray alloc] init];
                //                        couponIdArr = [[NSMutableArray alloc] init];
                //                        couponTotalArr = [[NSMutableArray alloc] init];
                //
                //                        if (couponView.hidden) {
                //
                //                            if ([cartItem count] == 0) {
                //
                //                                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                //                                [alert show];
                //
                //                            }
                //                            else {
                //
                //                                // disable the backgroud view ..
                //                                [self setSiblings:couponView enabled:FALSE];
                //
                //                                typeOfPayment = [[NSMutableString alloc] initWithString:@"Food Coupons"];
                //
                //                                payTxt2 = [[UITextField alloc] init];
                //
                //                                label = [[UILabel alloc] init];
                //                                label.text = @"    Coupon Payment";
                //                                label.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:18];
                //                                label.alpha = 0.8f;
                //                                label.textAlignment = NSTextAlignmentLeft;
                //                                label.backgroundColor = [UIColor whiteColor];
                //                                label.textColor = [UIColor blackColor];
                //
                //                                // close button to close the view ..
                //                                backbutton = [[UIButton alloc] init];
                //                                [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
                //                                backbutton.tag = 20;
                //
                //                                UIImage *image = [UIImage imageNamed:@"delete.png"];
                //                                [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
                //
                //                                UIButton *giftOkBtn = [UIButton buttonWithType:UIButtonTypeCustom];
                //                                [giftOkBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
                //                                giftOkBtn.tag = 21;
                //                                [giftOkBtn setTitle:@"Continue"    forState:UIControlStateNormal];
                //                                giftOkBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
                //                                giftOkBtn.titleLabel.textColor = [UIColor whiteColor];
                //                                giftOkBtn.backgroundColor = [UIColor grayColor];
                //
                //                                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                //
                //                                    // img1.frame = CGRectMake(0, 0, 630, 460);
                //                                    label.font = [UIFont systemFontOfSize:25];
                //                                    label.frame = CGRectMake(0, 0, 750, 60);
                //                                    backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
                //                                    giftOkBtn.frame = CGRectMake(200.0, 620, 300.0, 40.0);
                //                                    giftOkBtn.layer.cornerRadius = 22.0f;
                //                                    giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                //                                    couponView.layer.borderColor = [UIColor whiteColor].CGColor;
                //                                    couponView.layer.borderWidth = 1.5f;
                //                                    couponView.frame = CGRectMake(150, 70, 750, 680);
                //
                //                                }
                //                                else {
                //
                //                                    if (version >= 8.0 ) {
                //                                        label.frame = CGRectMake(0, 0, 300, 40);
                //                                        backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
                //                                        couponView.layer.borderColor = [UIColor whiteColor].CGColor;
                //                                        couponView.layer.borderWidth = 1.0f;
                //                                        couponView.frame = CGRectMake(10, 70, 300, 450.0);
                //                                        giftOkBtn.frame = CGRectMake(80.0, 390.0, 150.0, 35);
                //                                        giftOkBtn.layer.cornerRadius = 18;
                //                                        giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:18.0];
                //                                    }
                //                                    else{
                //                                        label.frame = CGRectMake(0, 0, 300, 40);
                //                                        backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
                //
                //                                        giftOkBtn.frame = CGRectMake(80.0, 320, 150.0, 35);
                //                                        giftOkBtn.layer.cornerRadius = 18;
                //                                        giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:18.0];
                //
                //                                        couponView.frame = CGRectMake(10, 10, 350, 350);
                //                                    }
                //
                //                                }
                //
                //                                //[paymentView addSubview:img1];
                //                                [couponView addSubview:label];
                //                                [couponView addSubview:backbutton];
                //                                [couponView addSubview:giftOkBtn];
                //                                [self.view addSubview:couponView];
                //
                //                                couponView.hidden = NO;
                //
                //                                [self couponsView];
                //
                //                            }
                //
                //                        }
                //
                //                    }
                //                    else {
                //                        if ([self allowItemSpecificDiscountToUser:roleNameLists]) {
                //                            cupon_type = [[NSMutableArray alloc] init];
                //                            [cupon_type addObject:@"Sodexo Coupons"];
                //                            [cupon_type addObject:@"Ticket Restaurant"];
                //                            value_arr = [[NSMutableArray alloc] initWithObjects:@"5",@"10",@"15",@"17",@"20",@"25",@"30",@"35",@"40",@"45",@"50",@"100",@"151",@"250",@"500", nil];
                //                            foodCouponTypeStr = @"Sodexo";
                //
                //                            couponArr = [[NSMutableArray alloc] init];
                //                            couponValArr = [[NSMutableArray alloc] init];
                //                            couponIdArr = [[NSMutableArray alloc] init];
                //                            couponTotalArr = [[NSMutableArray alloc] init];
                //
                //                            if (couponView.hidden) {
                //
                //                                if ([cartItem count] == 0) {
                //
                //                                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"ADD ITEMS TO CART" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                //                                    [alert show];
                //
                //                                }
                //                                else {
                //
                //                                    // disable the backgroud view ..
                //                                    [self setSiblings:couponView enabled:FALSE];
                //
                //                                    typeOfPayment = [[NSMutableString alloc] initWithString:@"Food Coupons"];
                //
                //                                    payTxt2 = [[UITextField alloc] init];
                //
                //                                    label = [[UILabel alloc] init];
                //                                    label.text = @"    Coupon Payment";
                //                                    label.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:18];
                //                                    label.alpha = 0.8f;
                //                                    label.textAlignment = NSTextAlignmentLeft;
                //                                    label.backgroundColor = [UIColor whiteColor];
                //                                    label.textColor = [UIColor blackColor];
                //
                //                                    // close button to close the view ..
                //                                    backbutton = [[UIButton alloc] init];
                //                                    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
                //                                    backbutton.tag = 20;
                //
                //                                    UIImage *image = [UIImage imageNamed:@"delete.png"];
                //                                    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
                //
                //                                    UIButton *giftOkBtn = [UIButton buttonWithType:UIButtonTypeCustom];
                //                                    [giftOkBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
                //                                    giftOkBtn.tag = 21;
                //                                    [giftOkBtn setTitle:@"Continue"    forState:UIControlStateNormal];
                //                                    giftOkBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
                //                                    giftOkBtn.titleLabel.textColor = [UIColor whiteColor];
                //                                    giftOkBtn.backgroundColor = [UIColor grayColor];
                //
                //                                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                //
                //                                        // img1.frame = CGRectMake(0, 0, 630, 460);
                //                                        label.font = [UIFont systemFontOfSize:25];
                //                                        label.frame = CGRectMake(0, 0, 750, 60);
                //                                        backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
                //                                        giftOkBtn.frame = CGRectMake(200.0, 620, 300.0, 40.0);
                //                                        giftOkBtn.layer.cornerRadius = 22.0f;
                //                                        giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                //                                        couponView.layer.borderColor = [UIColor whiteColor].CGColor;
                //                                        couponView.layer.borderWidth = 1.5f;
                //                                        couponView.frame = CGRectMake(150, 70, 750, 680);
                //
                //                                    }
                //                                    else {
                //
                //                                        if (version >= 8.0 ) {
                //                                            label.frame = CGRectMake(0, 0, 300, 40);
                //                                            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
                //                                            couponView.layer.borderColor = [UIColor whiteColor].CGColor;
                //                                            couponView.layer.borderWidth = 1.0f;
                //                                            couponView.frame = CGRectMake(10, 70, 300, 450.0);
                //                                            giftOkBtn.frame = CGRectMake(80.0, 390.0, 150.0, 35);
                //                                            giftOkBtn.layer.cornerRadius = 18;
                //                                            giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:18.0];
                //                                        }
                //                                        else{
                //                                            label.frame = CGRectMake(0, 0, 300, 40);
                //                                            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
                //
                //                                            giftOkBtn.frame = CGRectMake(80.0, 320, 150.0, 35);
                //                                            giftOkBtn.layer.cornerRadius = 18;
                //                                            giftOkBtn.titleLabel.font = [UIFont boldSystemFontOfSize:18.0];
                //
                //                                            couponView.frame = CGRectMake(10, 10, 350, 350);
                //                                        }
                //
                //                                    }
                //
                //                                    //[paymentView addSubview:img1];
                //                                    [couponView addSubview:label];
                //                                    [couponView addSubview:backbutton];
                //                                    [couponView addSubview:giftOkBtn];
                //                                    [self.view addSubview:couponView];
                //
                //                                    couponView.hidden = NO;
                //
                //                                    [self couponsView];
                //
                //                                }
                //
                //                            }
                //
                //                        }
                //                        else {
                //                            finalBillDue = [netPayLblVal.text copy];
                //                            [self logging];
                //                        }
                //                        //--
                //                    }
                //                }
                
                break;
            }
            case 5: { // emp information
                
                [self populateEmployeePopUp];
                break;
            }
            case 6:
            { // gift coupons
                //changed by Srinivasulu on 30/12/2017....
                //reason is implemented the oTP functionality as code modifications.....
                if(payTxt2 == nil)
                    payTxt2 = [[UITextField alloc] init];
                else
                    payTxt2.text = @"0.00";
                
                
                
                // Commented by roja on 08-05-2019...// Offline code is ready...
//                if(isOfflineService || !status){
//
//
//                    float y_position = BillField.frame.origin.y + BillField.frame.size.height;
//
//
//                    NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"message", nil),@"\n",NSLocalizedString(@"this_feature_can_only_be_used_with_internet_connectivity", nil)];
//
//                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
//
//                }
//                else if (giftView.hidden) {
                //Upto here Commented by roja on 08-05-2019...
                 if (giftView.hidden) {

                    //commented by Srinivasulu on 30/12/2017....
                    //                        [self.view addSubview:giftView];
                    //upto here on 30/12/2017....
                    
                    if (cartItem.count == 0) {
                        
                        //commented by Srinivasulu on 30/12/2017....
                        //                        giftView.backgroundColor = [UIColor blackColor];
                        //                        giftView.layer.borderColor = [UIColor whiteColor].CGColor;
                        //upto here on 30/12/2017....
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Add items to cart" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                    }
                    
                    //commented by Srinivasulu on 20/07/2017....
                    
                    //                    else if ((unAppliedDealIndex >= 0 || ([turnOverFreeItems length] > 0 && [[turnOverFreeItemsDesc objectAtIndex:0]length] > 0)) && ([custID caseInsensitiveCompare:@"CID8995458"] != NSOrderedSame)) {
                    //
                    ////                    else if (unAppliedDealIndex >= 0 || ([turnOverFreeItems length] > 0 && [[turnOverFreeItemsDesc objectAtIndex:0]length] > 0)) {
                    //                        //                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please add all the Free Items" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    //                        //                        [alert show];
                    //                        [self populateUnAppliedDealItemInfo];
                    //                    }
                    
                    //upto here on 20/07/2017....
                    
                    
                    //changed by Srinivasulu on 19/02/2018....
                    else
                        //                [self formAndViewGiftView:nil];
                    {
                        if (isOfflineService) {
                            [self formAndViewGiftView:nil];
                        }
                        else {
                            if (![WebServiceUtility checkWhetherItemSpecificItemContainsInCart:itemDiscountArr isVoidedArray:isVoidedArray]) {
                                [self formAndViewGiftView:nil];
                            }
                            else {
                                if ([self allowItemSpecificDiscountToUser:roleNameLists]) {
                                    [self formAndViewGiftView:nil];
                                }
                                else {
                                    finalBillDue = [netPayLblVal.text copy];
                                    [self logging];
                                }
                            }
                        }
                    }
                    
                    
                    //upto here on 19/02/2018....
                    
                    
                }
                
                break;
                
            }
            case 7:
            { // credit note
                
                if (cartItem.count == 0) {
                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please add items to cart" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
                
                //commented by Srinivasulu on 20/07/2017....
                
                //            else if ((unAppliedDealIndex >= 0 || ([turnOverFreeItems length] > 0 && [[turnOverFreeItemsDesc objectAtIndex:0]length] > 0)) && ([custID caseInsensitiveCompare:@"CID8995458"] != NSOrderedSame)) {
                //                //                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please add all the Free Items" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                //                //                [alert show];
                //                [self populateUnAppliedDealItemInfo];
                //            }
                
                //upto here on 20/07/2017....
                
                else {
                    if (status) {
                        
                        //changed by Srinivasulu on 19/02/2018....
                        
                        if (![WebServiceUtility checkWhetherItemSpecificItemContainsInCart:itemDiscountArr isVoidedArray:isVoidedArray]) {
                            [self showCreditNoteView:@""];
                        }
                        else {
                            if ([self allowItemSpecificDiscountToUser:roleNameLists]) {
                                [self showCreditNoteView:@""];
                            }
                            else {
                                finalBillDue = [netPayLblVal.text copy];
                                [self logging];
                            }
                        }
                        
                        //upto here on 19/02/2018....
                        
                    }
                    else {
                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enable wifi/mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                        
                    }
                }
                
                break;
            }
        }
        
        [segmentedControl reloadInputViews];
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

- (void)addPaymentViewFor:(NSString *)paymentType {
    
    if ([(self.view).subviews containsObject:couponView]){
        for (UIView *subview in couponView.subviews) {
            [subview removeFromSuperview];
        }
        [couponView setHidden:YES];
    }
    
    denominationView.hidden = YES;
    
    paymentView.userInteractionEnabled = TRUE;
    
    //    [self setSiblings:paymentView enabled:FALSE];
    
    paymentScrollView = [UIScrollView new];
    paymentScrollView.backgroundColor = [UIColor clearColor];
    paymentScrollView.bounces = NO;
    paymentScrollView.scrollEnabled = NO;
    
    paymentView.backgroundColor = [UIColor blackColor];
    paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
    
    
    label = [[UILabel alloc] init] ;
    label.text = @"    Cash Payment";
    label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
    label.alpha = 0.8f;
    label.textAlignment = NSTextAlignmentLeft;
    label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label.textColor = [UIColor whiteColor];
    
    
    
    // close button to close the view ..
    
    backbutton = [[UIButton alloc] init] ;
    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    backbutton.tag = 11;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
    
    billLabel = [[UILabel alloc] init] ;
    billLabel.text = @"Net Pay ";
    billLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billLabel.backgroundColor = [UIColor clearColor];
    billLabel.textColor = [UIColor whiteColor];
    
    paidLbl = [[UILabel alloc] init] ;
    paidLbl.text = @"Paid Cash ";
    paidLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    paidLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    paidLbl.backgroundColor = [UIColor clearColor];
    paidLbl.textColor = [UIColor whiteColor];
    
    billStatusLabel = [[UILabel alloc] init] ;
    billStatusLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billStatusLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billStatusLabel.backgroundColor = [UIColor clearColor];
    billStatusLabel.textColor = [UIColor whiteColor];
    billStatusLabel.hidden = YES;
    
    billStatusLabelValue = [[UILabel alloc] init] ;
    billStatusLabelValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billStatusLabelValue.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billStatusLabelValue.backgroundColor = [UIColor clearColor];
    billStatusLabelValue.textColor = [UIColor whiteColor];
    billStatusLabelValue.hidden = YES;
    
    
    //added by Srinivasulu on 24/08/2017....
    
    if(payTxt1 == nil)
        payTxt1 = [[UITextField alloc] init];
    
    payTxt1.borderStyle = UITextBorderStyleRoundedRect;
    payTxt1.textColor = [UIColor blackColor];
    payTxt1.font = [UIFont systemFontOfSize:18.0];
    payTxt1.backgroundColor = [UIColor whiteColor];
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    
    
    payTxt1.text = netPayLblVal.text;
    
    [payTxt1 setEnabled:FALSE];
    
    //added by Srinivasulu on 24/08/2017....
    
    if(payTxt2 == nil)
        payTxt2 = [[UITextField alloc] init];
    
    //upto here on 24/08/2017....
    
    
    payTxt2.borderStyle = UITextBorderStyleRoundedRect;
    payTxt2.textColor = [UIColor blackColor];
    payTxt2.font = [UIFont systemFontOfSize:18.0];
    payTxt2.backgroundColor = [UIColor whiteColor];
    payTxt2.text = paidVal.text;
    if ((changeReturnVal.text).floatValue>0 || paidVal == nil) {
        payTxt2.text = netPayLblVal.text;
    }
    
    
    
    
    payTxt2.clearButtonMode = UITextFieldViewModeWhileEditing;
    payTxt2.autocorrectionType = UITextAutocorrectionTypeNo;
    [payTxt2 addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
    numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                             [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar1 sizeToFit];
    payTxt2.inputAccessoryView = numberToolbar1;
    payTxt2.keyboardType = UIKeyboardTypeNumberPad;
    payTxt2.delegate = self;
    
    
    UILabel * salesPersonLbl = [[UILabel alloc] init] ;
    salesPersonLbl.text = @"Sales Person ";
    salesPersonLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    salesPersonLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    salesPersonLbl.backgroundColor = [UIColor clearColor];
    salesPersonLbl.textColor = [UIColor whiteColor];
    
    UILabel * deliveryPersonLbl = [[UILabel alloc] init];
    deliveryPersonLbl.text = @"Dlvry Person ";
    deliveryPersonLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    deliveryPersonLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    deliveryPersonLbl.backgroundColor = [UIColor clearColor];
    deliveryPersonLbl.textColor = [UIColor whiteColor];
    
    salesPersonId = [[UITextField alloc] init];
    salesPersonId.borderStyle = UITextBorderStyleRoundedRect;
    salesPersonId.textColor = [UIColor blackColor];
    salesPersonId.font = [UIFont systemFontOfSize:18.0];
    salesPersonId.backgroundColor = [UIColor whiteColor];
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    salesPersonId.placeholder = @"select sales person";
    [salesPersonId setEnabled:FALSE];
    
    deliveryPersonId = [[UITextField alloc] init];
    deliveryPersonId.borderStyle = UITextBorderStyleRoundedRect;
    deliveryPersonId.textColor = [UIColor blackColor];
    deliveryPersonId.font = [UIFont systemFontOfSize:18.0];
    deliveryPersonId.backgroundColor = [UIColor whiteColor];
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    deliveryPersonId.placeholder = @"select delivery person";
    [deliveryPersonId setEnabled:FALSE];
    
    UIImage *buttonImageDD1 = [UIImage imageNamed:@"arrow.png"];
    
    
    UIButton * selectSalesPerson  = [UIButton buttonWithType:UIButtonTypeCustom];
    [selectSalesPerson setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
    [selectSalesPerson addTarget:self
                          action:@selector(selectSalesPersonIds:) forControlEvents:UIControlEventTouchDown];
    
    
    UIButton * selectDeliveryPerson  = [UIButton buttonWithType:UIButtonTypeCustom];
    //    UIImage *buttonImageDD1 = [UIImage imageNamed:@"arrow.png"];
    selectDeliveryPerson.tag = 150;
    [selectDeliveryPerson setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
    [selectDeliveryPerson addTarget:self action:@selector(selectSalesPersonIds:) forControlEvents:UIControlEventTouchDown];
    
    
    phnotext = [[UITextField alloc] init];
    
    phnotext.borderStyle = UITextBorderStyleRoundedRect;
    phnotext.autocorrectionType = UITextAutocorrectionTypeNo;
    phnotext.keyboardType = UIKeyboardTypeNumberPad;
    phnotext.returnKeyType = UIReturnKeyDone;
    phnotext.clearButtonMode = UITextFieldViewModeWhileEditing;
    phnotext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    [phnotext addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    //    phnotext.delegate = self;
    // phnotext.tag = 111;
    phnotext.placeholder = @"Phone Number";
    phnotext.delegate = self;
    phnotext.text = @"";
    
    phonelbl = [[UILabel alloc] init] ;
    
    phonelbl.text= @"Phone";
    phonelbl.textColor = [UIColor whiteColor];
    phonelbl.backgroundColor = [UIColor clearColor];
    
    emaillbl = [[UILabel alloc] init] ;
    
    emaillbl.text= @"Email";
    emaillbl.textColor = [UIColor whiteColor];
    emaillbl.backgroundColor = [UIColor clearColor];
    
    namelbl = [[UILabel alloc] init] ;
    
    namelbl.text= @"Name ";
    namelbl.textColor = [UIColor whiteColor];
    namelbl.backgroundColor = [UIColor clearColor];
    
    
    emailtext = [[UITextField alloc] init];
    emailtext.borderStyle = UITextBorderStyleRoundedRect;
    emailtext.autocorrectionType = UITextAutocorrectionTypeNo;
    emailtext.keyboardType = UIKeyboardTypeEmailAddress;
    emailtext.returnKeyType = UIReturnKeyDone;
    emailtext.clearButtonMode = UITextFieldViewModeWhileEditing;
    emailtext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    emailtext.delegate = self;
    emailtext.placeholder = @"Customer Mail ID";
    emailtext.autocapitalizationType = UITextAutocapitalizationTypeNone;
    emailtext.text  = @"";
    
    
    nametext = [[UITextField alloc] init];
    
    nametext.borderStyle = UITextBorderStyleRoundedRect;
    nametext.autocorrectionType = UITextAutocorrectionTypeNo;
    nametext.keyboardType = UIKeyboardTypeDefault;
    nametext.returnKeyType = UIReturnKeyDone;
    nametext.clearButtonMode = UITextFieldViewModeWhileEditing;
    nametext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    nametext.placeholder = @"Customer Name";
    nametext.delegate = self;
    nametext.text = @"";
    
    
    payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    // pay the cash button to continue the transaction ..
    [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
    payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    payBtn.titleLabel.textColor = [UIColor whiteColor];
    payBtn.backgroundColor = [UIColor grayColor];
    
    
    //added & changed by Srinivasulu on 23/03/2018.. sir raised this....
    //    [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
    [payBtn setTitle:NSLocalizedString(@"submit_", nil)    forState:UIControlStateNormal];
    
    UIButton *cancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    //    [cancelBtn setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];
    cancelBtn.backgroundColor = [UIColor grayColor];
    [cancelBtn setTitle:NSLocalizedString(@"cancel_", nil)  forState:UIControlStateNormal];
    //    cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    [cancelBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [cancelBtn addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    cancelBtn.tag = 11;
    
    
    UILabel * billRemarksLbl = [[UILabel alloc] init] ;
    billRemarksLbl.text = NSLocalizedString(@"remarks", nil);
    billRemarksLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
    billRemarksLbl.backgroundColor = [UIColor clearColor];
    billRemarksLbl.textColor = [UIColor whiteColor];
    
    billRemarksTxt = [[UITextField alloc] init];
    billRemarksTxt.borderStyle = UITextBorderStyleRoundedRect;
    billRemarksTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    billRemarksTxt.keyboardType = UIKeyboardTypeDefault;
    billRemarksTxt.returnKeyType = UIReturnKeyDone;
    billRemarksTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    nametext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    billRemarksTxt.placeholder = NSLocalizedString(@"remarks", nil);
    billRemarksTxt.delegate = self;
    billRemarksTxt.text = @"";
    
    //upto here on 23/03/2018....
    
    
    
    
    streetlbl = [[UILabel alloc] init] ;
    
    streetlbl.text= @"Street";
    streetlbl.textColor = [UIColor whiteColor];
    streetlbl.backgroundColor = [UIColor clearColor];
    [paymentScrollView addSubview:streetlbl];
    
    localitylbl = [[UILabel alloc] init] ;
    
    localitylbl.text= @"Locality";
    localitylbl.textColor = [UIColor whiteColor];
    localitylbl.backgroundColor = [UIColor clearColor];
    [paymentScrollView addSubview:localitylbl];
    
    citylbl = [[UILabel alloc] init] ;
    
    citylbl.text= @"City";
    citylbl.backgroundColor = [UIColor clearColor];
    citylbl.textColor = [UIColor whiteColor];
    [paymentScrollView addSubview:citylbl];
    
    pinlbl = [[UILabel alloc] init] ;
    
    pinlbl.text= @"PIN";
    pinlbl.textColor = [UIColor whiteColor];
    pinlbl.backgroundColor = [UIColor clearColor] ;
    [paymentScrollView addSubview:pinlbl];
    
    
    //changed by Srinivasulu on 02/05/2017....
    
    nametext.placeholder = @"First Name";
    
    citylbl.text= @"Landmark";
    pinlbl.text= @"City / PIN";
    
    
    
    
    
    lastNameTxt = [[UITextField alloc] init];
    lastNameTxt.borderStyle = UITextBorderStyleRoundedRect;
    lastNameTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    lastNameTxt.keyboardType = UIKeyboardTypeEmailAddress;
    lastNameTxt.returnKeyType = UIReturnKeyDone;
    lastNameTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    lastNameTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    lastNameTxt.delegate = self;
    lastNameTxt.placeholder = @"Last Name";
    lastNameTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    
    doorNoTxt = [[UITextField alloc] init];
    doorNoTxt.borderStyle = UITextBorderStyleRoundedRect;
    doorNoTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    doorNoTxt.keyboardType = UIKeyboardTypeEmailAddress;
    doorNoTxt.returnKeyType = UIReturnKeyDone;
    doorNoTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    doorNoTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    doorNoTxt.delegate = self;
    doorNoTxt.placeholder = @"Door No";
    doorNoTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    landMarkTxt = [[UITextField alloc] init];
    landMarkTxt.borderStyle = UITextBorderStyleRoundedRect;
    landMarkTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    landMarkTxt.keyboardType = UIKeyboardTypeEmailAddress;
    landMarkTxt.returnKeyType = UIReturnKeyDone;
    landMarkTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    landMarkTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    landMarkTxt.delegate = self;
    landMarkTxt.placeholder = @"Landmark";
    landMarkTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    
    
    //upto here on 02/05/2017....
    
    [paymentScrollView addSubview:streettext];
    
    
    [paymentScrollView addSubview:locltytext];
    
    
    [paymentScrollView addSubview:citytext];
    
    [paymentScrollView addSubview:pintext];
    UIButton *back;
    
    if ([paymentType isKindOfClass:[NSString class]]) {
        
        if ([[UIImage imageNamed:@"unchecked2.png"] isEqual:radioBtn2.currentImage]) {
            
            NSLog(@"Door Delivery not Selected");
            deliveryPersonId.backgroundColor = [UIColor grayColor];
            selectDeliveryPerson.enabled = NO;
            //            deliveryPersonLbl.textColor = [UIColor cyanColor];
        }else{
            NSLog(@"Door Delivery Selected");
            
        }
        if ([paymentType isEqualToString:@"CARD"]) {
            
            label.text = @"    Card Payment";
            
            payTxt2.text = netPayLblVal.text;
            
            [payTxt2 setUserInteractionEnabled:TRUE];
            
            cardradioBtn1 = [[UIButton alloc] init] ;
            [cardradioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
            cardradioBtn1.backgroundColor = [UIColor clearColor];
            cardradioBtn1.layer.masksToBounds = YES;
            cardradioBtn1.layer.cornerRadius = 5.0f;
            cardradioBtn1.tag = 0;
            cardradioBtn1.hidden = NO;
            [cardradioBtn1 addTarget:self action:@selector(cardRadioAction:) forControlEvents:UIControlEventTouchUpInside];
            
            cardradioBtn2 = [[UIButton alloc] init] ;
            [cardradioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
            //cancelOrder.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            cardradioBtn2.backgroundColor = [UIColor clearColor];
            cardradioBtn2.layer.masksToBounds = YES;
            cardradioBtn2.layer.cornerRadius = 5.0f;
            cardradioBtn2.tag = 1;
            cardradioBtn2.hidden = NO;
            [cardradioBtn2 addTarget:self action:@selector(cardRadioAction:) forControlEvents:UIControlEventTouchUpInside];
            cardradioBtn2.userInteractionEnabled = YES;
            
            
            UILabel *takeAway = [[UILabel alloc] init] ;
            takeAway.text = @"Mobile POS";
            takeAway.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
            takeAway.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
            takeAway.backgroundColor = [UIColor clearColor];
            takeAway.hidden = NO;
            takeAway.textColor = [UIColor whiteColor];
            
            UILabel *doorDel = [[UILabel alloc] init] ;
            doorDel.text = @"POS";
            doorDel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
            doorDel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
            doorDel.backgroundColor = [UIColor clearColor];
            doorDel.textColor = [UIColor whiteColor];
            doorDel.hidden = NO;
            
            
            payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            
            // pay the cash button to continue the transaction ..
            if([cardPaymentSelection isEqualToString:@"POS"]) {
                
                [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
                [payBtn setTitle:@"Continue" forState:UIControlStateNormal];
            }
            else {
                
                [payBtn addTarget:self action:@selector(cardPaymentCall) forControlEvents:UIControlEventTouchUpInside];
            }
            
            [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
            payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            payBtn.titleLabel.textColor = [UIColor whiteColor];
            payBtn.backgroundColor = [UIColor grayColor];
            typeOfPayment = [[NSMutableString alloc] initWithString:@"Credit/Debit"];
            
            CheckWifi *wifi = [[CheckWifi alloc]init];
            BOOL status = [wifi checkWifi];
            if (!status) {
                
                cardradioBtn2.userInteractionEnabled = NO;
            }
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                cardradioBtn1.frame = CGRectMake(15,100, 30, 30);
                takeAway.frame = CGRectMake(450, 95, 200, 40);
                takeAway.font = [UIFont systemFontOfSize:25.0];
                cardradioBtn2.frame = CGRectMake(400, 100, 30, 30);
                doorDel.frame =  CGRectMake(60, 95, 150, 40);
                doorDel.font = [UIFont systemFontOfSize:25.0];
                
                
            }
            
            [paymentView addSubview:cardradioBtn1];
            [paymentView addSubview:takeAway];
            [paymentView addSubview:cardradioBtn2];
            [paymentView addSubview:doorDel];
        }
        else if ([paymentType isEqualToString:@"Food Coupons"]) {
            if ([paymentType isEqualToString:@"Food Coupons"]) {
                
                [payTxt2 setUserInteractionEnabled:FALSE];
                
            }
            
            label.text = @"    Coupon Payment";
            payTxt2.text = [NSString stringWithFormat:@"%.2f",(totalCoupValue.text).floatValue];
            
            //added by Srinivasulu on 24/11/2017....
            typeOfPayment = [[NSMutableString alloc] initWithString:@"Food Coupons"];
            
            
            
            finalBillDue = netPayLblVal.text;
            
            if(otherPaymentTotalAmountLbl != nil){
                payTxt2.text = [NSString stringWithFormat:@"%.2f",(otherPaymentTotalAmountLbl.text).floatValue];
                
                if( ((netPayLblVal.text).floatValue - (otherPaymentTotalAmountLbl.text).floatValue) > 0 ){
                    
                    finalBillDue =  [NSString stringWithFormat:@"%.2f",((netPayLblVal.text).floatValue - (otherPaymentTotalAmountLbl.text).floatValue) ];
                }
                else{
                    
                    finalBillDue = @"0.00";
                }
                
            }
            
            
            
            //upto here on 24/11/2017....
            
        }
        
        else if ([paymentType isEqualToString:@"CASH"] || [paymentType isEqualToString:@"QUICKCASH"]) {
            typeOfPayment = [[NSMutableString alloc] initWithString:@"Cash"];
            back = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            [back addTarget:self action:@selector(backToDenomination) forControlEvents:UIControlEventTouchUpInside];
            [back setTitle:@"Back"    forState:UIControlStateNormal];
            back.titleLabel.textAlignment = NSTextAlignmentCenter;
            back.titleLabel.textColor = [UIColor whiteColor];
            back.backgroundColor = [UIColor grayColor];
            
            payTxt2.userInteractionEnabled = NO;
            if (([paymentType isEqualToString:@"QUICKCASH"])) {
                payTxt2.userInteractionEnabled = YES;
            }
            
            
            if ((payTxt1.text).floatValue-(payTxt2.text).floatValue<0) {
                
                finalBillDue = @"0.00";
            }
            else {
                
                finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
            }
            
            //added by Srinivasulu on 21/04/2017....
            //reason credit pay was added on this day....
            
            if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && ([paymentType isEqualToString:@"QUICKCASH"] && !salesOrderIdStr.length)){
                
                payTxt2.text = @"0.00";
            }
            
            //upto here on 21/04/2017....
            
            
            
        }
        else if (paymentType.length==0) {
            
            payTxt1.userInteractionEnabled = NO;
            payTxt2.userInteractionEnabled = NO;
            payTxt2.text = @"0.00";
        }
        
    }
    else {
        typeOfPayment = [[NSMutableString alloc] initWithString:@"Cash"];
        
        payTxt2.userInteractionEnabled = NO;
        if ((payTxt1.text).floatValue-(payTxt2.text).floatValue<0) {
            finalBillDue = @"0.00";
            
        }
        else {
            finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
            
        }
        back = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [back addTarget:self action:@selector(backToDenomination) forControlEvents:UIControlEventTouchUpInside];
        [back setTitle:@"Back"    forState:UIControlStateNormal];
        back.titleLabel.textAlignment = NSTextAlignmentCenter;
        back.titleLabel.textColor = [UIColor whiteColor];
        back.backgroundColor = [UIColor grayColor];
    }
    
    
    //added by Srinivasulu on 24/08/2017....
    
    returnAmountTxt = [[UITextField alloc] init];
    returnAmountTxt.borderStyle = UITextBorderStyleRoundedRect;
    returnAmountTxt.textColor = [UIColor blackColor];
    returnAmountTxt.font = [UIFont systemFontOfSize:18.0];
    returnAmountTxt.backgroundColor = [UIColor whiteColor];
    returnAmountTxt.placeholder = NSLocalizedString(@"return_amount", nil);
    returnAmountTxt.userInteractionEnabled = NO;
    payTxt2.placeholder = NSLocalizedString(@"paid_amouont", nil);
    
    
    
    if(paidVal != nil)
        payTxt2.text = paidVal.text;
    
    if ((payTxt2.text).floatValue <= (netPayLblVal.text).floatValue)
        returnAmountTxt.text = @"0.00";
    else
        returnAmountTxt.text = [NSString stringWithFormat:@"%.02f",(payTxt2.text).floatValue - (netPayLblVal.text).floatValue];
    
    //    else if ([payTxt2.text floatValue] < [netPayLblVal.text floatValue])
    //        returnAmountTxt.text = [NSString stringWithFormat:@"%.02f",[payTxt2.text floatValue] - [netPayLblVal.text floatValue]];
    //    else
    //        returnAmountTxt.text = @"0.00";
    
    
    
    //upto here on 24/08/2017....
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            
            
            
            paymentScrollView.frame = CGRectMake(0.0, 0.0, 800.0, 550.0);
            
            
            
            paymentScrollView.contentSize = CGSizeMake(800.0, 650.0);
            paymentView.frame = CGRectMake(100, 80, 800, 550);
            
            if(isNewReturnBill){
                
                if(segment_index == 1)
                    label.text = NSLocalizedString(@"_credit_note", nil);
                
                paidLbl.text = NSLocalizedString(@"returned_amount", nil);
                paymentView.frame = CGRectMake(100, 180, 800, 550);
            }
            
            payBtn.frame = CGRectMake(150.0, 450, 500, 60.0);
            //            payBtn.frame = CGRectMake(75.0, 550, 500, 60.0);//Submit Changed
            label.frame = CGRectMake(0, 0, 800, 70);
            
            
            //added by Srinivasulu on 28/08/2017....
            //reason.. to solve temperory for phoneTxtField....
            //            paymentScrollView.frame = CGRectMake(0.0, label.frame.origin.y, paymentView.frame.size.width, 550.0 - label.frame.size.height);
            //            paymentScrollView.contentSize = CGSizeMake(800.0, 650.0);
            
            //upto here on 28/08/2017....
            
            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
            label.font = [UIFont systemFontOfSize:25];
            
            
            
            billStatusLabel.font = [UIFont systemFontOfSize:20];
            billStatusLabel.frame = CGRectMake(15,200,120,30);
            billStatusLabelValue.font = [UIFont systemFontOfSize:20];
            billStatusLabelValue.frame = CGRectMake(210,200,160,30);
            billLabel.font = [UIFont systemFontOfSize:20];
            billLabel.frame = CGRectMake(15, 100.0, 120, 30);
            paidLbl.font = [UIFont systemFontOfSize:20];
            paidLbl.frame = CGRectMake(15, 155.0, 120, 30);//here
            
            salesPersonLbl.font = [UIFont systemFontOfSize:20];
            salesPersonLbl.frame = CGRectMake(15, 210.0, 120, 30);//here
            
            deliveryPersonLbl.font = [UIFont systemFontOfSize : 20];
            deliveryPersonLbl.frame = CGRectMake(15, 265.0, 120, 30);//here
            
            phonelbl.font = [UIFont systemFontOfSize:20];
            phonelbl.frame = CGRectMake(15, 320.0, 120, 30);//here by sai on 25/07/19
            emaillbl.font = [UIFont systemFontOfSize:20];
            emaillbl.frame = CGRectMake(15, 380.0, 120, 30);
            
            payTxt1.font = [UIFont systemFontOfSize:20];
            payTxt1.frame = CGRectMake(160, 100.0, 200, 40);
            payTxt2.font = [UIFont systemFontOfSize:20];
            payTxt2.frame = CGRectMake(160, 155.0, 200, 40);//here
            
            salesPersonId.font = [UIFont systemFontOfSize:20];
            salesPersonId.frame = CGRectMake(160, 210, 200, 40);//here
            
            selectSalesPerson.frame = CGRectMake((salesPersonId.frame.origin.x + salesPersonId.frame.size.width - 60), 210, 60, 50);
            
            deliveryPersonId.font = [UIFont systemFontOfSize:20];
            deliveryPersonId.frame = CGRectMake(160, 265, 200, 40);
            
            selectDeliveryPerson.frame = CGRectMake((deliveryPersonId.frame.origin.x + deliveryPersonId.frame.size.width - 60),265 , 60, 50);
            
            phnotext.frame = CGRectMake(160.0, 340, 200, 40);//here
            phnotext.font = [UIFont systemFontOfSize:20];
            emailtext.frame = CGRectMake(160.0, 380, 200, 40);
            emailtext.font = [UIFont systemFontOfSize:20.0];
            
            namelbl.font = [UIFont systemFontOfSize:20];
            namelbl.frame = CGRectMake(400, 100, 120, 30);
            
            streetlbl.font = [UIFont systemFontOfSize:20.0];
            streetlbl.frame = CGRectMake(400, 155, 120, 30);//here
            localitylbl.font = [UIFont systemFontOfSize:20.0];
            localitylbl.frame = CGRectMake(400, 210, 120, 30);//here 24/07 by prasanth
            citylbl.font = [UIFont systemFontOfSize:20.0];
            citylbl.frame = CGRectMake(400, 265, 120, 30);//here 25/07 by prasanth
            pinlbl.font = [UIFont systemFontOfSize:20.0];
            pinlbl.frame = CGRectMake(400, 320, 120, 30);//here 25/07 by prasanth
            
            
            
            //added by Srinivasulu on 24/08/2017....
            
            if ([paymentType isEqualToString:@"CASH"] || [paymentType isEqualToString:@"QUICKCASH"]) {
                
                payTxt2.userInteractionEnabled = YES;
                
                //setting frames for UILabels....
                
                //                billStatusLabel.font = [UIFont systemFontOfSize:20];
                //                billStatusLabel.frame = CGRectMake( 15, 180,120,30);
                //                billStatusLabelValue.font = [UIFont systemFontOfSize:20];
                //                billStatusLabelValue.frame = CGRectMake( 210, billStatusLabel.frame,160,30);
                billLabel.font = [UIFont systemFontOfSize:20];
                billLabel.frame = CGRectMake(15, 100.0, 120, 30);
                paidLbl.font = [UIFont systemFontOfSize:20];
                paidLbl.frame = CGRectMake(15, 155.0, billLabel.frame.size.width, 30);//here
                
                salesPersonLbl.font = [UIFont systemFontOfSize:20];
                salesPersonLbl.frame = CGRectMake(15, 210, billLabel.frame.size.width, 30);//here
                
                deliveryPersonLbl.font = [UIFont systemFontOfSize:20];
                deliveryPersonLbl.frame = CGRectMake(15, 265, billLabel.frame.size.width, 30); //here
                phonelbl.font = [UIFont systemFontOfSize:20];
                phonelbl.frame = CGRectMake(15, 320.0, billLabel.frame.size.width, 30);//here
                emaillbl.font = [UIFont systemFontOfSize:20];
                emaillbl.frame = CGRectMake(15, 380.0, billLabel.frame.size.width, 30);
                
                
                //setting frames for UITextFields....
                
                payTxt1.font = [UIFont systemFontOfSize:20];
                payTxt1.frame = CGRectMake( 140, 100.0, 240, 40);
                payTxt2.font = [UIFont systemFontOfSize:20];
                payTxt2.frame = CGRectMake( payTxt1.frame.origin.x, 155.0, payTxt1.frame.size.width, 40);//here
                
                
                //added by Srinivasulu on 24/08/2017....
                
                payTxt2.font = [UIFont systemFontOfSize:20];
                payTxt2.frame = CGRectMake( payTxt1.frame.origin.x, 155.0, payTxt1.frame.size.width - 120, 40);//here
                
                returnAmountTxt .font = [UIFont systemFontOfSize:20];
                returnAmountTxt.frame = CGRectMake( payTxt2.frame.origin.x + payTxt2.frame.size.width + 5, 155.0, payTxt1.frame.size.width - (payTxt2.frame.size.width + 5), 40);// 170 to 155 y
                
                //upto here on 24/08/2017....
                
                
                salesPersonId.font = [UIFont systemFontOfSize:20];
                salesPersonId.frame = CGRectMake( payTxt1.frame.origin.x, 210, payTxt1.frame.size.width, 40);//here
                
                selectSalesPerson.frame = CGRectMake((salesPersonId.frame.origin.x + salesPersonId.frame.size.width - 50), salesPersonId.frame.origin.y - 2, 60, 50);
                
                deliveryPersonId.font = [UIFont systemFontOfSize:20];
                deliveryPersonId.frame = CGRectMake(payTxt1.frame.origin.x, 265, payTxt1.frame.size.width, 40);
                
                selectDeliveryPerson.frame = CGRectMake((deliveryPersonId.frame.origin.x + deliveryPersonId.frame.size.width - 50), deliveryPersonId.frame.origin.y - 2, 60, 50);
                
                
                phnotext.frame = CGRectMake( payTxt1.frame.origin.x, 320, payTxt1.frame.size.width, 40);//here
                phnotext.font = [UIFont systemFontOfSize:20];
                emailtext.frame = CGRectMake( payTxt1.frame.origin.x, 380, payTxt1.frame.size.width, 40);
                emailtext.font = [UIFont systemFontOfSize:20.0];
                
                cancelBtn.frame = CGRectMake( 500, 450, pintext.frame.size.width, 45);
                payBtn.frame = CGRectMake( 225, 450, cancelBtn.frame.size.width, cancelBtn.frame.size.height);
            }
            
            //upto here on 24/08/2017....
            
            
            //            //changed by Srinivasulu on 02/05/2017....
            //
            //
            ////            nametext.frame = CGRectMake(530, 100, 200, 40);
            ////            nametext.font = [UIFont systemFontOfSize:20];
            ////
            ////            streettext.font = [UIFont systemFontOfSize:20];
            ////            streettext.frame = CGRectMake(530, 170, 200, 40);
            ////            locltytext.font = [UIFont systemFontOfSize:20];
            ////            locltytext.frame = CGRectMake(530, 240, 200, 40);
            ////            citytext.frame = CGRectMake(530, 310, 200.0, 40);
            ////            citytext.font = [UIFont systemFontOfSize:20];
            ////            pintext.frame = CGRectMake(530, 380, 200.0, 40);
            ////            pintext.font = [UIFont systemFontOfSize:20.0];
            //
            //
            //            nametext.frame = CGRectMake( 500, 100, 115, 40);
            //            nametext.font = [UIFont systemFontOfSize:20];
            //
            //            lastNameTxt.frame = CGRectMake( nametext.frame.origin.x + nametext.frame.size.width + 10, nametext.frame.origin.y, 150, nametext.frame.size.height);
            //            lastNameTxt.font = [UIFont systemFontOfSize:20];
            //
            //
            //            doorNoTxt.frame = CGRectMake( nametext.frame.origin.x, 170, nametext.frame.size.width, nametext.frame.size.height);
            //            doorNoTxt.font = [UIFont systemFontOfSize:20];
            //            streettext.frame = CGRectMake( lastNameTxt.frame.origin.x, doorNoTxt.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            //            streettext.font = [UIFont systemFontOfSize:20];
            //
            //            locltytext.frame = CGRectMake( nametext.frame.origin.x, 240 , (streettext.frame.origin.x +  streettext.frame.size.width) - doorNoTxt.frame.origin.x, nametext.frame.size.height);
            //            locltytext.font = [UIFont systemFontOfSize:20];
            //
            //            landMarkTxt.frame = CGRectMake( locltytext.frame.origin.x, 310 , locltytext.frame.size.width, nametext.frame.size.height);
            //            landMarkTxt.font = [UIFont systemFontOfSize:20];
            //
            //
            //            citytext.frame = CGRectMake( nametext.frame.origin.x, 380, nametext.frame.size.width, nametext.frame.size.height);
            //            citytext.font = [UIFont systemFontOfSize:20];
            //            pintext.frame = CGRectMake( lastNameTxt.frame.origin.x, citytext.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            //            pintext.font = [UIFont systemFontOfSize:20];
            //
            //
            //
            //
            //
            //
            //            //upto here on 02/05/2017.......
            
            
            if ([paymentType isKindOfClass:[NSString class]]) {
                if ([paymentType isEqualToString:@"CARD"]) {
                    paymentScrollView.frame = CGRectMake(0.0, 135, 800.0, 450.0);
                    paymentScrollView.contentSize = CGSizeMake(800.0, 650.0);
                    paymentView.frame = CGRectMake(100, 80, 800, 600);
                    
                    
                    
                    //                    payBtn.frame = CGRectMake(150.0, 390, 500, 50.0);
                    payBtn.frame = CGRectMake(50.0, 390, 500, 50.0);
                    label.frame = CGRectMake(0, 0, 800, 80);
                    backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                    
                    label.font = [UIFont systemFontOfSize:25];
                    
                    billStatusLabel.font = [UIFont systemFontOfSize:20];
                    billStatusLabel.frame = CGRectMake(15,140,120,30);
                    billStatusLabelValue.font = [UIFont systemFontOfSize:20];
                    billStatusLabelValue.frame = CGRectMake(160,140,160,30);
                    billLabel.font = [UIFont systemFontOfSize:20];
                    billLabel.frame = CGRectMake(15, 30, 120, 30);
                    paidLbl.font = [UIFont systemFontOfSize:20];
                    paidLbl.frame = CGRectMake(15, 85, 120, 30);//here frame changed by sai
                    
                    salesPersonLbl.font = [UIFont systemFontOfSize:20];
                    salesPersonLbl.frame = CGRectMake(15, 140, 120, 30);//here frame changed by sai
                    // added by sai
                    deliveryPersonLbl.font = [UIFont systemFontOfSize:20];
                    deliveryPersonLbl.frame = CGRectMake(15, 195, 120, 30);//here frame changed by sai
                    //upto here added by sai
                    
                    phonelbl.font = [UIFont systemFontOfSize:20];
                    phonelbl.frame = CGRectMake(15, 250, 120, 30);//here frame changed by sai
                    emaillbl.font = [UIFont systemFontOfSize:20];
                    emaillbl.frame = CGRectMake(15, 310, 120, 30);
                    
                    payTxt1.font = [UIFont systemFontOfSize:20];
                    payTxt1.frame = CGRectMake(160, 30, 200, 40);
                    payTxt2.font = [UIFont systemFontOfSize:20];
                    payTxt2.frame = CGRectMake(160, 85, 200, 40);//here frame changed by sai
                    
                    salesPersonId.font = [UIFont systemFontOfSize:20];
                    salesPersonId.frame = CGRectMake(160, 140, 200, 40);//here frame changed by sai
                    
                    selectSalesPerson.frame = CGRectMake((salesPersonId.frame.origin.x + salesPersonId.frame.size.width - 60), 140, 60, 50); //here frame changed by sai
                    
                    // added by sai
                    deliveryPersonId.font = [UIFont systemFontOfSize:20];
                    deliveryPersonId.frame = CGRectMake(160, 195, 200, 40);
                    selectDeliveryPerson.frame = CGRectMake((deliveryPersonId.frame.origin.x + deliveryPersonId.frame.size.width - 60), 195, 60, 50);
                    //upto here added by sai
                    
                    
                    
                    phnotext.frame = CGRectMake(160.0, 250, 200, 40);//here
                    phnotext.font = [UIFont systemFontOfSize:20];
                    emailtext.frame = CGRectMake(160.0, 310, 200, 40);
                    emailtext.font = [UIFont systemFontOfSize:20.0];
                    
                    namelbl.font = [UIFont systemFontOfSize:20];
                    namelbl.frame = CGRectMake(400, 30, 120, 30);
                    
                    
                    streetlbl.font = [UIFont systemFontOfSize:20.0];
                    streetlbl.frame = CGRectMake(400, 85, 120, 30);
                    localitylbl.font = [UIFont systemFontOfSize:20.0];
                    localitylbl.frame = CGRectMake(400, 140, 120, 30);//here
                    citylbl.font = [UIFont systemFontOfSize:20.0];
                    citylbl.frame = CGRectMake(400, 195, 120, 30);//here 25/07
                    pinlbl.font = [UIFont systemFontOfSize:20.0];
                    pinlbl.frame = CGRectMake(400, 250, 120, 30);//here 25/07
                    
                    nametext.frame = CGRectMake(530, 30, 200, 40);
                    nametext.font = [UIFont systemFontOfSize:20];
                    
                    streettext.font = [UIFont systemFontOfSize:20];
                    streettext.frame = CGRectMake(530, 100, 200, 40);
                    locltytext.font = [UIFont systemFontOfSize:20];
                    locltytext.frame = CGRectMake(530, 170, 200, 40);
                    citytext.frame = CGRectMake(530, 250, 200.0, 40);
                    citytext.font = [UIFont systemFontOfSize:20];
                    pintext.frame = CGRectMake(530, 310, 200.0, 40);
                    pintext.font = [UIFont systemFontOfSize:20.0];
                    
                    // added by sai
                    cancelBtn.frame = CGRectMake( 500, 400, pintext.frame.size.width, 45);
                    payBtn.frame = CGRectMake( 160, 400, cancelBtn.frame.size.width, cancelBtn.frame.size.height);
                    // upto here added by sai
                    
                }
            }
            
            
            //changed by Srinivasulu on 02/05/2017....
            
            
            //            nametext.frame = CGRectMake(530, 100, 200, 40);
            //            nametext.font = [UIFont systemFontOfSize:20];
            //
            //            streettext.font = [UIFont systemFontOfSize:20];
            //            streettext.frame = CGRectMake(530, 170, 200, 40);
            //            locltytext.font = [UIFont systemFontOfSize:20];
            //            locltytext.frame = CGRectMake(530, 240, 200, 40);
            //            citytext.frame = CGRectMake(530, 310, 200.0, 40);
            //            citytext.font = [UIFont systemFontOfSize:20];
            //            pintext.frame = CGRectMake(530, 380, 200.0, 40);
            //            pintext.font = [UIFont systemFontOfSize:20.0];
            
            
            nametext.frame = CGRectMake( 500, payTxt1.frame.origin.y, 115, 40);
            nametext.font = [UIFont systemFontOfSize:20];
            
            lastNameTxt.frame = CGRectMake( nametext.frame.origin.x + nametext.frame.size.width + 10, nametext.frame.origin.y, 150, nametext.frame.size.height);
            lastNameTxt.font = [UIFont systemFontOfSize:20];
            
            
            doorNoTxt.frame = CGRectMake( nametext.frame.origin.x, payTxt2.frame.origin.y, nametext.frame.size.width, nametext.frame.size.height);
            doorNoTxt.font = [UIFont systemFontOfSize:20];
            streettext.frame = CGRectMake( lastNameTxt.frame.origin.x, doorNoTxt.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            streettext.font = [UIFont systemFontOfSize:20];
            
            locltytext.frame = CGRectMake( nametext.frame.origin.x, salesPersonId.frame.origin.y, (streettext.frame.origin.x +  streettext.frame.size.width) - doorNoTxt.frame.origin.x, nametext.frame.size.height);
            locltytext.font = [UIFont systemFontOfSize:20];
            
            landMarkTxt.frame = CGRectMake( locltytext.frame.origin.x, deliveryPersonId.frame.origin.y , locltytext.frame.size.width, nametext.frame.size.height);
            landMarkTxt.font = [UIFont systemFontOfSize:20];
            
            
            citytext.frame = CGRectMake( nametext.frame.origin.x, phnotext.frame.origin.y, nametext.frame.size.width, nametext.frame.size.height);
            citytext.font = [UIFont systemFontOfSize:20];
            pintext.frame = CGRectMake( lastNameTxt.frame.origin.x, phnotext.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            pintext.font = [UIFont systemFontOfSize:20];
            
            
            
            
            
            
            //upto here on 02/05/2017.......
            
            
            payBtn.layer.cornerRadius = 10.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
            if ([paymentType isKindOfClass:[UIButton class]]) {
                back.layer.cornerRadius = 10.0;
                back.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                payBtn.frame = CGRectMake(450.0, 470, 250, 40.0);
                back.frame = CGRectMake(100.0, 470, 250.0, 40.0);
                [paymentScrollView addSubview:back];
            }
            
            else if ([paymentType caseInsensitiveCompare:@"cash"] == NSOrderedSame) {
                back.layer.cornerRadius = 10.0;
                back.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                payBtn.frame = CGRectMake(225.0, 450, 150, 50.0);// x 50 to 150
                back.frame = CGRectMake(450.0, 470, 200.0, 50.0);
                [paymentScrollView addSubview:back];
            }
            
            
            
            
            //added & changed by Srinivasulu on 23/03/2018.. sir raised this....
            [payBtn setTitle:NSLocalizedString(@"submit_", nil)    forState:UIControlStateNormal];
            
            billRemarksLbl.font = [UIFont systemFontOfSize:20.0];
            //            billRemarksLbl.frame = CGRectMake( emaillbl.frame.origin.x, payBtn.frame.origin.y, emaillbl.frame.size.width, emaillbl.frame.size.height);
            //            billRemarksLbl.frame = CGRectMake( emaillbl.frame.origin.x, emailtext.frame.origin.y + 70, emaillbl.frame.size.width, emaillbl.frame.size.height);
            billRemarksLbl.frame = CGRectMake( citylbl.frame.origin.x, emailtext.frame.origin.y, emaillbl.frame.size.width, emaillbl.frame.size.height);
            
            //            billRemarksTxt.frame = CGRectMake( emailtext.frame.origin.x, billRemarksLbl.frame.origin.y, emailtext.frame.size.width, emailtext.frame.size.height);
            billRemarksTxt.frame = CGRectMake( citytext.frame.origin.x, billRemarksLbl.frame.origin.y, locltytext.frame.size.width, emailtext.frame.size.height);
            billRemarksTxt.font = [UIFont systemFontOfSize:20];
            
            //            cancelBtn.frame = CGRectMake( pintext.frame.origin.x, billRemarksLbl.frame.origin.y, pintext.frame.size.width, 45);
            cancelBtn.frame = CGRectMake( 500, 425, pintext.frame.size.width, 45);
            //
            ////            payBtn.frame = CGRectMake( citytext.frame.origin.x + citytext.frame.size.width - (cancelBtn.frame.size.width + 25), billRemarksLbl.frame.origin.y, cancelBtn.frame.size.width, cancelBtn.frame.size.height);
            payBtn.frame = CGRectMake( 225, 425, cancelBtn.frame.size.width, cancelBtn.frame.size.height);
            
            
            cancelBtn.layer.cornerRadius = 10.0f;
            cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            paymentScrollView.contentSize = CGSizeMake(800.0, cancelBtn.frame.origin.y + cancelBtn.frame.size.height + 20);
            
            if ([paymentType isEqualToString:@"CARD"]) {
                cancelBtn.frame = CGRectMake( 500, 400, pintext.frame.size.width, 45);
                
                payBtn.frame = CGRectMake( 175, 400, cancelBtn.frame.size.width, cancelBtn.frame.size.height);
            }else  if ([paymentType isEqualToString:@"CASH"] || [paymentType isEqualToString:@"QUICKCASH"]) {
                cancelBtn.frame = CGRectMake( 500, 450, pintext.frame.size.width, 45);
                
                
                payBtn.frame = CGRectMake( 225, 450, cancelBtn.frame.size.width, cancelBtn.frame.size.height);
            }
            //            }else{
            //                cancelBtn.frame = CGRectMake( 500, 425, pintext.frame.size.width, 45);
            //                payBtn.frame = CGRectMake( 225, 425, cancelBtn.frame.size.width, cancelBtn.frame.size.height);
            //
            //            }
            if ([paymentType isKindOfClass:[UIButton class]]) {
                
                cancelBtn.hidden = YES;
                back.frame = cancelBtn.frame;
            }
            else if ([paymentType caseInsensitiveCompare:@"cash"] == NSOrderedSame) {
                
                cancelBtn.hidden = YES;
                back.frame = cancelBtn.frame;
            }
            //upto here on 23/03/2018....
            
            
        }
        else {
            paymentView.frame = CGRectMake(20, 140, 730, 750.0);
            paymentScrollView.frame = CGRectMake(0.0, 0.0, 730.0, 750.0);
            paymentScrollView.contentSize = CGSizeMake(730.0, 850.0);
            payBtn.frame = CGRectMake(50.0, 680.0, 630.0, 60.0);
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            
            label.font = [UIFont systemFontOfSize:25];
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            billStatusLabel.font = [UIFont systemFontOfSize:25];
            billStatusLabel.frame = CGRectMake(15,220,220,45);
            billStatusLabelValue.font = [UIFont systemFontOfSize:25];
            billStatusLabelValue.frame = CGRectMake(210,220,160,45);
            billLabel.font = [UIFont systemFontOfSize:25];
            billLabel.frame = CGRectMake(15, 100.0, 160, 45);
            paidLbl.font = [UIFont systemFontOfSize:25];
            paidLbl.frame = CGRectMake(15, 155.0, 160, 45);//here
            phonelbl.font = [UIFont systemFontOfSize:25.0];
            phonelbl.frame = CGRectMake(15, 270.0, 160.0, 45);
            emaillbl.font = [UIFont systemFontOfSize:25.0];
            emaillbl.frame = CGRectMake(15, 340.0, 160.0, 45);
            namelbl.font = [UIFont systemFontOfSize:25.0];
            namelbl.frame = CGRectMake(15, 410.0, 160.0, 45);
            payTxt1.font = [UIFont systemFontOfSize:25];
            payTxt1.frame = CGRectMake(200, 100.0, 300, 45);
            payTxt2.font = [UIFont systemFontOfSize:25];
            payTxt2.frame = CGRectMake(200, 155.0, 300, 45);//here
            phnotext.frame = CGRectMake(200.0, 270.0, 300.0, 45);
            phnotext.font = [UIFont systemFontOfSize:25];
            emailtext.frame = CGRectMake(200.0, 340.0, 300.0, 45);
            emailtext.font = [UIFont systemFontOfSize:25.0];
            nametext.frame = CGRectMake(200.0, 410.0, 300.0, 45);
            nametext.font = [UIFont systemFontOfSize:25];
            
            streetlbl.font = [UIFont systemFontOfSize:25.0];
            streetlbl.frame = CGRectMake(15, 480.0, 160.0, 45);
            localitylbl.font = [UIFont systemFontOfSize:25.0];
            localitylbl.frame = CGRectMake(15, 550.0, 160.0, 45);
            citylbl.font = [UIFont systemFontOfSize:25.0];
            citylbl.frame = CGRectMake(15, 620.0, 160.0, 45);
            pinlbl.font = [UIFont systemFontOfSize:25.0];
            pinlbl.frame = CGRectMake(15, 690.0, 160.0, 45);
            
            streettext.font = [UIFont systemFontOfSize:25];
            streettext.frame = CGRectMake(200, 480.0, 300, 45);
            locltytext.font = [UIFont systemFontOfSize:25];
            locltytext.frame = CGRectMake(200, 550.0, 300, 45);
            citytext.frame = CGRectMake(200.0, 620.0, 300.0, 45);
            citytext.font = [UIFont systemFontOfSize:25];
            pintext.frame = CGRectMake(200.0, 690.0, 300.0, 45);
            pintext.font = [UIFont systemFontOfSize:25.0];
            
            
            payBtn.frame = CGRectMake(50.0, 755.0, 630.0, 50.0);
            payBtn.layer.cornerRadius = 25.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            paymentView.frame = CGRectMake(20, 140, 730, 820.0);
            
            
        }
        // img1.frame = CGRectMake(0, 0, 630, 460);
        
    }
    else {
        //
        //        if (version >= 8.0 ) {
        //            paymentView.backgroundColor = [UIColor blackColor];
        //            paymentScrollView.frame = CGRectMake(0.0, 0.0, 300.0, 540.0);
        //            paymentScrollView.contentSize = CGSizeMake(300.0, 850.0);
        //            label.frame = CGRectMake(0, 0, 300, 40);
        //            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
        //            billLabel.frame = CGRectMake(10, 50, 80, 30);
        //            paidLbl.frame = CGRectMake(10, 100, 120, 30);//here
        //            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
        //            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
        //            payTxt1.frame = CGRectMake(140, 50, 150, 35);
        //            payTxt2.frame = CGRectMake(140, 100, 150, 35);//here
        //            //                                payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
        //            //                                payBtn.layer.cornerRadius = 15.0f;
        //            //                                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        //            phonelbl.frame = CGRectMake(10, 150.0, 160.0, 30);
        //            emaillbl.frame = CGRectMake(10, 195.0, 160.0, 30);
        //            namelbl.frame = CGRectMake(10,240.0, 160.0, 45);
        //            phnotext.frame = CGRectMake(140.0, 150.0, 150.0, 35);
        //            emailtext.frame = CGRectMake(140.0, 195.0, 150.0, 35);
        //            nametext.frame = CGRectMake(140.0, 240.0, 150.0, 35);
        //
        //            streetlbl.frame = CGRectMake(10, 285, 160.0, 30);
        //            localitylbl.frame = CGRectMake(10, 330, 160.0, 30);
        //            citylbl.frame = CGRectMake(10, 375, 160.0, 35);
        //            pinlbl.frame = CGRectMake(10, 420, 160.0, 35);
        //
        //
        //            streetlbl.font = [UIFont systemFontOfSize:15];
        //            localitylbl.font = [UIFont systemFontOfSize:15];
        //            citylbl.font = [UIFont systemFontOfSize:15];
        //            pinlbl.font = [UIFont systemFontOfSize:15];
        //
        //            streettext.font = [UIFont systemFontOfSize:15];
        //            streettext.frame = CGRectMake(140, 285, 150, 30);
        //            locltytext.font = [UIFont systemFontOfSize:15];
        //            locltytext.frame = CGRectMake(140, 330, 150, 30);
        //            citytext.frame = CGRectMake(140, 375, 150, 30);
        //            citytext.font = [UIFont systemFontOfSize:15];
        //            pintext.frame = CGRectMake(140, 420.0, 150, 30);
        //            pintext.font = [UIFont systemFontOfSize:15];
        //
        //            payBtn.frame = CGRectMake(10.0, 455.0, 280.0, 30.0);
        //            payBtn.layer.cornerRadius = 15.0f;
        //            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        //            paymentView.frame = CGRectMake(10, 70, 300, 540);
        //        }
        //        else{
        //            label.frame = CGRectMake(0, 0, 300, 40);
        //            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
        //            billLabel.frame = CGRectMake(10, 50, 80, 30);
        //            paidLbl.frame = CGRectMake(10, 100, 120, 30);
        //            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
        //            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
        //            payTxt1.frame = CGRectMake(140, 50, 150, 35);
        //            payTxt2.frame = CGRectMake(140, 100, 150, 35);
        //            payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
        //            payBtn.layer.cornerRadius = 15.0f;
        //            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        //            paymentView.frame = CGRectMake(10, 70, 300, 240);
        //        }
        //
    }
    [paymentScrollView addSubview:billLabel];
    [paymentScrollView addSubview:paidLbl];
    [paymentScrollView addSubview:billStatusLabel];
    [paymentScrollView addSubview:billStatusLabelValue];
    [paymentScrollView addSubview:payTxt1];
    [paymentScrollView addSubview:payTxt2];
    [paymentScrollView addSubview:phonelbl];
    [paymentScrollView addSubview:salesPersonId];
    [paymentScrollView addSubview:salesPersonLbl];
    [paymentScrollView addSubview:deliveryPersonId];// Addedb by prasanth on 24/07/2019
    [paymentScrollView addSubview:deliveryPersonLbl];
    [paymentScrollView addSubview:selectSalesPerson];
    [paymentScrollView addSubview:selectDeliveryPerson];
    [paymentScrollView addSubview:emaillbl];
    [paymentScrollView addSubview:namelbl];
    [paymentScrollView addSubview:phnotext];
    [paymentScrollView addSubview:emailtext];
    [paymentScrollView addSubview:nametext];
    [paymentScrollView addSubview:payBtn];
    
    //added by Srinivauslu on 02/05/2017 24/08/2017 & 23/03/2018....
    
    [paymentScrollView addSubview:lastNameTxt];
    [paymentScrollView addSubview:doorNoTxt];
    [paymentScrollView addSubview:landMarkTxt];
    
    [paymentScrollView addSubview:returnAmountTxt];
    [paymentScrollView addSubview:cancelBtn];
    
    [paymentScrollView addSubview:billRemarksLbl];
    [paymentScrollView addSubview:billRemarksTxt];
    
    //upto here on 02/05/2017 & 24/08/2017 & 23/03/2018....
    
    [paymentView addSubview:paymentScrollView];
    [paymentView addSubview:label];
    [paymentView addSubview:backbutton];
    [self.view addSubview:paymentView];
    
    paymentView.hidden = NO;
    if ((custmerPhNum.text).length >= 10) {
        phnotext.text = custmerPhNum.text;
        [self getCustomerDetails];
    }
    else if( ([bill_details.allKeys containsObject:@"customerObj"] && !([[bill_details valueForKey:@"customerObj"] isKindOfClass:[NSNull class]]))){
        
        if([[[bill_details valueForKey:@"customerObj"] allKeys] containsObject:@"phone"] && !([[[bill_details valueForKey:@"customerObj"] valueForKey:@"phone"] isKindOfClass:[NSNull class]])){
            
            phnotext.text = [[bill_details valueForKey:@"customerObj"] valueForKey:@"phone"];
            [self getCustomerDetails];
        }
        
    }
    
    //Changes done by Srinivasulu on 17/05/2018....
    //reaons -- Sir side remove animations. Commented and written the code....
    
    //    [UIView transitionFromView:denominationView
    //                        toView:paymentView
    //                      duration:0.6
    //                       options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
    //                    completion:nil];
    
    if(denominationView != nil)
        denominationView.hidden = YES;
    paymentView.hidden = NO;
    //upto here on 17/05/2018....
    
}

- (void)showCreditNoteView:(NSString *)paymentType {
    
    if ([(self.view).subviews containsObject:couponView]){
        for (UIView *subview in couponView.subviews) {
            [subview removeFromSuperview];
        }
        [couponView setHidden:YES];
    }
    paymentView.userInteractionEnabled = TRUE;
    
    //    [self setSiblings:paymentView enabled:FALSE];
    
    paymentScrollView = [UIScrollView new];
    paymentScrollView.backgroundColor = [UIColor clearColor];
    paymentScrollView.bounces = NO;
    paymentScrollView.scrollEnabled = NO;
    
    paymentView.backgroundColor = [UIColor blackColor];
    paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
    
    
    label = [[UILabel alloc] init] ;
    label.text = @"    Credit Note Payment";
    label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
    label.alpha = 0.8f;
    label.textAlignment = NSTextAlignmentLeft;
    label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label.textColor = [UIColor whiteColor];
    
    
    
    // close button to close the view ..
    backbutton = [[UIButton alloc] init] ;
    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    backbutton.tag = 11;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
    
    billLabel = [[UILabel alloc] init] ;
    billLabel.text = @"Net Pay ";
    billLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billLabel.backgroundColor = [UIColor clearColor];
    billLabel.textColor = [UIColor whiteColor];
    
    creditNoteLbl = [[UILabel alloc] init] ;
    creditNoteLbl.text = @"Credit Note ID ";
    creditNoteLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    creditNoteLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    creditNoteLbl.backgroundColor = [UIColor clearColor];
    creditNoteLbl.textColor = [UIColor whiteColor];
    
    creditNoteTotalLbl = [[UILabel alloc] init] ;
    creditNoteTotalLbl.text = @"CN Total :";
    creditNoteTotalLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    creditNoteTotalLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    creditNoteTotalLbl.backgroundColor = [UIColor clearColor];
    creditNoteTotalLbl.textColor = [UIColor whiteColor];
    
    creditNoteBalLbl = [[UILabel alloc] init] ;
    creditNoteBalLbl.text = @"CN Balance :";
    creditNoteBalLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    creditNoteBalLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    creditNoteBalLbl.backgroundColor = [UIColor clearColor];
    creditNoteBalLbl.textColor = [UIColor whiteColor];
    
    creditNoteStatusLbl = [[UILabel alloc] init] ;
    creditNoteStatusLbl.text = @"CN Status :";
    creditNoteStatusLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    creditNoteStatusLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    creditNoteStatusLbl.backgroundColor = [UIColor clearColor];
    creditNoteStatusLbl.textColor = [UIColor whiteColor];
    
    paidLbl = [[UILabel alloc] init] ;
    paidLbl.text = @"Paid Cash ";
    paidLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    paidLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    paidLbl.backgroundColor = [UIColor clearColor];
    paidLbl.textColor = [UIColor whiteColor];
    
    billStatusLabel = [[UILabel alloc] init] ;
    billStatusLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billStatusLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billStatusLabel.backgroundColor = [UIColor clearColor];
    billStatusLabel.textColor = [UIColor whiteColor];
    billStatusLabel.hidden = YES;
    
    billStatusLabelValue = [[UILabel alloc] init] ;
    billStatusLabelValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    billStatusLabelValue.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    billStatusLabelValue.backgroundColor = [UIColor clearColor];
    billStatusLabelValue.textColor = [UIColor whiteColor];
    billStatusLabelValue.hidden = YES;
    
    payTxt1 = [[UITextField alloc] init];
    payTxt1.borderStyle = UITextBorderStyleRoundedRect;
    payTxt1.textColor = [UIColor blackColor];
    payTxt1.font = [UIFont systemFontOfSize:18.0];
    payTxt1.backgroundColor = [UIColor whiteColor];
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    payTxt1.text = netPayLblVal.text;
    [payTxt1 setEnabled:FALSE];
    
    payTxt2 = [[UITextField alloc] init];
    payTxt2.borderStyle = UITextBorderStyleRoundedRect;
    payTxt2.textColor = [UIColor blackColor];
    payTxt2.font = [UIFont systemFontOfSize:18.0];
    payTxt2.backgroundColor = [UIColor whiteColor];
    payTxt2.text = paidVal.text;
    if ((changeReturnVal.text).floatValue>0 || paidVal == nil) {
        payTxt2.text = netPayLblVal.text;
    }
    payTxt2.clearButtonMode = UITextFieldViewModeWhileEditing;
    payTxt2.autocorrectionType = UITextAutocorrectionTypeNo;
    [payTxt2 addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
    numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
    numberToolbar1.items = @[[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
                             [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)]];
    [numberToolbar1 sizeToFit];
    payTxt2.inputAccessoryView = numberToolbar1;
    payTxt2.keyboardType = UIKeyboardTypeNumberPad;
    payTxt2.delegate = self;
    
    UILabel *salesPersonLbl = [[UILabel alloc] init] ;
    salesPersonLbl.text = @"Sales Person ";
    salesPersonLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    salesPersonLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    salesPersonLbl.backgroundColor = [UIColor clearColor];
    salesPersonLbl.textColor = [UIColor whiteColor];
    
    UILabel *deliveryPersonLbl = [[UILabel alloc] init];
    deliveryPersonLbl.text = @"Dlvry Person ";
    deliveryPersonLbl.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    deliveryPersonLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    deliveryPersonLbl.backgroundColor = [UIColor clearColor];
    deliveryPersonLbl.textColor = [UIColor whiteColor];
    
    
    salesPersonId = [[UITextField alloc] init];
    salesPersonId.borderStyle = UITextBorderStyleRoundedRect;
    salesPersonId.textColor = [UIColor blackColor];
    salesPersonId.font = [UIFont systemFontOfSize:18.0];
    salesPersonId.backgroundColor = [UIColor whiteColor];
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    salesPersonId.placeholder = @"select sales person";
    [salesPersonId setEnabled:FALSE];
    
    deliveryPersonId = [[UITextField alloc] init];
    deliveryPersonId.borderStyle = UITextBorderStyleRoundedRect;
    deliveryPersonId.textColor = [UIColor blackColor];
    deliveryPersonId.font = [UIFont systemFontOfSize:18.0];
    deliveryPersonId.backgroundColor = [UIColor whiteColor];
    //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
    deliveryPersonId.placeholder = @"select delivery person";
    [deliveryPersonId setEnabled:FALSE];
    
    
    UIImage *buttonImageDD1 = [UIImage imageNamed:@"arrow.png"];
    
    
    UIButton *selectSalesPerson  = [UIButton buttonWithType:UIButtonTypeCustom];
    
    [selectSalesPerson setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
    [selectSalesPerson addTarget:self
                          action:@selector(selectSalesPersonIds:) forControlEvents:UIControlEventTouchDown];
    
    UIButton *selectDeliveryPerson  = [UIButton buttonWithType:UIButtonTypeCustom];
    //    UIImage *deliveryPersonImage = [UIImage imageNamed:@"arrow.png"];
    selectDeliveryPerson.tag = 150;
    [selectDeliveryPerson setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
    [selectDeliveryPerson addTarget:self action:@selector(selectSalesPersonIds:) forControlEvents:UIControlEventTouchDown];
    
    phnotext = [[UITextField alloc] init];
    
    phnotext.borderStyle = UITextBorderStyleRoundedRect;
    phnotext.autocorrectionType = UITextAutocorrectionTypeNo;
    phnotext.keyboardType = UIKeyboardTypeNumberPad;
    phnotext.returnKeyType = UIReturnKeyDone;
    phnotext.clearButtonMode = UITextFieldViewModeWhileEditing;
    phnotext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    [phnotext addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    //    phnotext.delegate = self;
    // phnotext.tag = 111;
    phnotext.placeholder = @"Phone Number";
    phnotext.delegate = self;
    phnotext.text = @"";
    
    phonelbl = [[UILabel alloc] init] ;
    
    phonelbl.text= @"Phone";
    phonelbl.textColor = [UIColor whiteColor];
    phonelbl.backgroundColor = [UIColor clearColor];
    
    emaillbl = [[UILabel alloc] init] ;
    
    emaillbl.text= @"Email";
    emaillbl.textColor = [UIColor whiteColor];
    emaillbl.backgroundColor = [UIColor clearColor];
    
    namelbl = [[UILabel alloc] init] ;
    
    namelbl.text= @"Name ";
    namelbl.textColor = [UIColor whiteColor];
    namelbl.backgroundColor = [UIColor clearColor];
    
    
    emailtext = [[UITextField alloc] init];
    emailtext.borderStyle = UITextBorderStyleRoundedRect;
    emailtext.autocorrectionType = UITextAutocorrectionTypeNo;
    emailtext.keyboardType = UIKeyboardTypeEmailAddress;
    emailtext.returnKeyType = UIReturnKeyDone;
    emailtext.clearButtonMode = UITextFieldViewModeWhileEditing;
    emailtext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    emailtext.delegate = self;
    emailtext.placeholder = @"Customer Mail ID";
    emailtext.autocapitalizationType = UITextAutocapitalizationTypeNone;
    emailtext.text  = @"";
    
    
    nametext = [[UITextField alloc] init];
    
    nametext.borderStyle = UITextBorderStyleRoundedRect;
    nametext.autocorrectionType = UITextAutocorrectionTypeNo;
    nametext.keyboardType = UIKeyboardTypeDefault;
    nametext.returnKeyType = UIReturnKeyDone;
    nametext.clearButtonMode = UITextFieldViewModeWhileEditing;
    nametext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    nametext.placeholder = @"Customer Name";
    nametext.delegate = self;
    nametext.text = @"";
    
    creditNoteTxt = [[UITextField alloc] init];
    
    creditNoteTxt.borderStyle = UITextBorderStyleRoundedRect;
    creditNoteTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    creditNoteTxt.keyboardType = UIKeyboardTypeDefault;
    creditNoteTxt.returnKeyType = UIReturnKeyDone;
    creditNoteTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    creditNoteTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    creditNoteTxt.placeholder = @"Credit Note ID";
    creditNoteTxt.delegate = self;
    creditNoteTxt.text = @"";
    
    
    payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    // pay the cash button to continue the transaction ..
    [payBtn addTarget:self action:@selector(continueCreditNotepay) forControlEvents:UIControlEventTouchUpInside];
    [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
    payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    payBtn.titleLabel.textColor = [UIColor whiteColor];
    payBtn.backgroundColor = [UIColor grayColor];
    
    
    
    streetlbl = [[UILabel alloc] init] ;
    
    streetlbl.text= @"Street";
    streetlbl.textColor = [UIColor whiteColor];
    streetlbl.backgroundColor = [UIColor clearColor];
    [paymentScrollView addSubview:streetlbl];
    
    localitylbl = [[UILabel alloc] init] ;
    
    localitylbl.text= @"Locality";
    localitylbl.textColor = [UIColor whiteColor];
    localitylbl.backgroundColor = [UIColor clearColor];
    [paymentScrollView addSubview:localitylbl];
    
    citylbl = [[UILabel alloc] init] ;
    
    citylbl.text= @"City";
    citylbl.backgroundColor = [UIColor clearColor];
    citylbl.textColor = [UIColor whiteColor];
    [paymentScrollView addSubview:citylbl];
    
    pinlbl = [[UILabel alloc] init] ;
    
    pinlbl.text= @"PIN";
    pinlbl.textColor = [UIColor whiteColor];
    pinlbl.backgroundColor = [UIColor clearColor] ;
    [paymentScrollView addSubview:pinlbl];
    
    
    //changed by Srinivasulu on 03/05/2017....
    
    nametext.placeholder = @"First Name";
    
    citylbl.text= @"Landmark";
    pinlbl.text= @"City / PIN";
    
    
    
    
    
    lastNameTxt = [[UITextField alloc] init];
    lastNameTxt.borderStyle = UITextBorderStyleRoundedRect;
    lastNameTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    lastNameTxt.keyboardType = UIKeyboardTypeEmailAddress;
    lastNameTxt.returnKeyType = UIReturnKeyDone;
    lastNameTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    lastNameTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    lastNameTxt.delegate = self;
    lastNameTxt.placeholder = @"Last Name";
    lastNameTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    
    doorNoTxt = [[UITextField alloc] init];
    doorNoTxt.borderStyle = UITextBorderStyleRoundedRect;
    doorNoTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    doorNoTxt.keyboardType = UIKeyboardTypeEmailAddress;
    doorNoTxt.returnKeyType = UIReturnKeyDone;
    doorNoTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    doorNoTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    doorNoTxt.delegate = self;
    doorNoTxt.placeholder = @"Door No";
    doorNoTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    landMarkTxt = [[UITextField alloc] init];
    landMarkTxt.borderStyle = UITextBorderStyleRoundedRect;
    landMarkTxt.autocorrectionType = UITextAutocorrectionTypeNo;
    landMarkTxt.keyboardType = UIKeyboardTypeEmailAddress;
    landMarkTxt.returnKeyType = UIReturnKeyDone;
    landMarkTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
    landMarkTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    landMarkTxt.delegate = self;
    landMarkTxt.placeholder = @"Landmark";
    landMarkTxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    
    //added by Srinivauslu on 02/05/2017....
    
    [paymentScrollView addSubview:lastNameTxt];
    [paymentScrollView addSubview:doorNoTxt];
    [paymentScrollView addSubview:landMarkTxt];
    
    //upto here on 02/05/2017....
    
    
    
    
    
    //upto here on 03/05/2017....
    
    [paymentScrollView addSubview:streettext];
    
    
    [paymentScrollView addSubview:locltytext];
    
    
    [paymentScrollView addSubview:citytext];
    
    [paymentScrollView addSubview:pintext];
    UIButton *back;
    if ([paymentType isKindOfClass:[NSString class]]) {
        if ([paymentType isEqualToString:@"CARD"]) {
            label.text = @"    Card Payment";
            
            payTxt2.text = netPayLblVal.text;
            
            
            
            [payTxt2 setUserInteractionEnabled:TRUE];
            
            cardradioBtn1 = [[UIButton alloc] init] ;
            [cardradioBtn1 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
            cardradioBtn1.backgroundColor = [UIColor clearColor];
            cardradioBtn1.layer.masksToBounds = YES;
            cardradioBtn1.layer.cornerRadius = 5.0f;
            cardradioBtn1.tag = 0;
            cardradioBtn1.hidden = NO;
            [cardradioBtn1 addTarget:self action:@selector(cardRadioAction:) forControlEvents:UIControlEventTouchUpInside];
            
            cardradioBtn2 = [[UIButton alloc] init] ;
            [cardradioBtn2 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
            //cancelOrder.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            cardradioBtn2.backgroundColor = [UIColor clearColor];
            cardradioBtn2.layer.masksToBounds = YES;
            cardradioBtn2.layer.cornerRadius = 5.0f;
            cardradioBtn2.tag = 1;
            cardradioBtn2.hidden = NO;
            [cardradioBtn2 addTarget:self action:@selector(cardRadioAction:) forControlEvents:UIControlEventTouchUpInside];
            cardradioBtn2.userInteractionEnabled = YES;
            
            
            UILabel *takeAway = [[UILabel alloc] init] ;
            takeAway.text = @"Mobile POS";
            takeAway.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
            takeAway.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
            takeAway.backgroundColor = [UIColor clearColor];
            takeAway.hidden = NO;
            takeAway.textColor = [UIColor whiteColor];
            
            UILabel *doorDel = [[UILabel alloc] init] ;
            doorDel.text = @"POS";
            doorDel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
            doorDel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
            doorDel.backgroundColor = [UIColor clearColor];
            doorDel.textColor = [UIColor whiteColor];
            doorDel.hidden = NO;
            
            
            payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            
            // pay the cash button to continue the transaction ..
            if([cardPaymentSelection isEqualToString:@"POS"]) {
                
                [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
                [payBtn setTitle:@"Continue" forState:UIControlStateNormal];
            }
            else {
                [payBtn addTarget:self action:@selector(cardPaymentCall) forControlEvents:UIControlEventTouchUpInside];
            }
            [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
            payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            payBtn.titleLabel.textColor = [UIColor whiteColor];
            payBtn.backgroundColor = [UIColor grayColor];
            typeOfPayment = [[NSMutableString alloc] initWithString:@"Credit/Debit"];
            
            CheckWifi *wifi = [[CheckWifi alloc]init];
            BOOL status = [wifi checkWifi];
            if (!status) {
                
                cardradioBtn2.userInteractionEnabled = NO;
            }
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                cardradioBtn1.frame = CGRectMake(15,100, 30, 30);
                takeAway.frame = CGRectMake(450, 95, 200, 40);
                takeAway.font = [UIFont systemFontOfSize:25.0];
                cardradioBtn2.frame = CGRectMake(400, 100, 30, 30);
                doorDel.frame =  CGRectMake(60, 95, 150, 40);
                doorDel.font = [UIFont systemFontOfSize:25.0];
            }
            
            [paymentView addSubview:cardradioBtn1];
            [paymentView addSubview:takeAway];
            [paymentView addSubview:cardradioBtn2];
            [paymentView addSubview:doorDel];
        }
        else if ([paymentType isEqualToString:@"Food Coupons"]) {
            if ([paymentType isEqualToString:@"Food Coupons"]) {
                
                [payTxt2 setUserInteractionEnabled:FALSE];
                
            }
            
            label.text = @"    Coupon Payment";
            payTxt2.text = [NSString stringWithFormat:@"%.2f",(totalCoupValue.text).floatValue];
            
        }
        
        else if ([paymentType isEqualToString:@"CASH"] || [paymentType isEqualToString:@"QUICKCASH"]) {
            typeOfPayment = [[NSMutableString alloc] initWithString:@"Cash"];
            back = [UIButton buttonWithType:UIButtonTypeCustom];
            // pay the cash button to continue the transaction ..
            [back addTarget:self action:@selector(backToDenomination) forControlEvents:UIControlEventTouchUpInside];
            [back setTitle:@"Back"    forState:UIControlStateNormal];
            back.titleLabel.textAlignment = NSTextAlignmentCenter;
            back.titleLabel.textColor = [UIColor whiteColor];
            back.backgroundColor = [UIColor grayColor];
            
            payTxt2.userInteractionEnabled = NO;
            if ([paymentType isEqualToString:@"QUICKCASH"]) {
                payTxt2.userInteractionEnabled = YES;
            }
            if ((payTxt1.text).floatValue-(payTxt2.text).floatValue<0) {
                finalBillDue = @"0.00";
                
            }
            else {
                finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
                
            }
        }
        else if (paymentType.length==0) {
            
            payTxt1.userInteractionEnabled = NO;
            payTxt2.userInteractionEnabled = TRUE;
            payTxt2.text = @"0.00";
        }
        
    }
    else {
        typeOfPayment = [[NSMutableString alloc] initWithString:@"Cash"];
        
        payTxt2.userInteractionEnabled = NO;
        if ((payTxt1.text).floatValue-(payTxt2.text).floatValue<0) {
            finalBillDue = @"0.00";
            
        }
        else {
            finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
            
        }
        back = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [back addTarget:self action:@selector(backToDenomination) forControlEvents:UIControlEventTouchUpInside];
        [back setTitle:@"Back"    forState:UIControlStateNormal];
        back.titleLabel.textAlignment = NSTextAlignmentCenter;
        back.titleLabel.textColor = [UIColor whiteColor];
        back.backgroundColor = [UIColor grayColor];
    }
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            paymentScrollView.frame = CGRectMake(0.0, 0.0, 800.0, 600.0);
            paymentScrollView.contentSize = CGSizeMake(800.0, 700.0);
            paymentView.frame = CGRectMake(100, 80, 800, 600.0);
            payBtn.frame = CGRectMake(150.0, 520.0, 500, 60.0);
            label.frame = CGRectMake(0, 0, 800, 70);
            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
            
            label.font = [UIFont systemFontOfSize:25];
            
            billStatusLabel.font = [UIFont systemFontOfSize:20];
            billStatusLabel.frame = CGRectMake(15,260,120,30);
            billStatusLabelValue.font = [UIFont systemFontOfSize:20];
            billStatusLabelValue.frame = CGRectMake(210,260,160,30);
            creditNoteLbl.font = [UIFont systemFontOfSize:20];
            creditNoteLbl.frame = CGRectMake(15, 125.0, 140.0, 30);// changed by sai on 29/07/2019 y 100.0 _ 125
            creditNoteTotalLbl.font = [UIFont systemFontOfSize:20];
            creditNoteTotalLbl.frame = CGRectMake(15, 80.0, 180.0, 30);// changed by sai on 29/07/2019 x - 400 to 150, 15
            creditNoteBalLbl.font = [UIFont systemFontOfSize:20];
            creditNoteBalLbl.frame = CGRectMake(290.0, 80.0, 200.0, 30);// changed by sai on 29/07/2019 x - 590 to 250 _ 325 _ 350 _ 290
            creditNoteStatusLbl.font = [UIFont systemFontOfSize:20];
            creditNoteStatusLbl.frame = CGRectMake(525, 80.0, 250.0, 30);// changed by sai on 29/07/2019 x - 400 to 400 _ 600 _ 550 _ 525 _ 575, y - 120 to 80.0
            creditNoteTotalLbl.textColor = [UIColor greenColor];
            creditNoteBalLbl.textColor = [UIColor greenColor];
            creditNoteStatusLbl.textColor = [UIColor greenColor];
            billLabel.font = [UIFont systemFontOfSize:20];
            billLabel.frame = CGRectMake(15, 175.0, 120, 30);//changed by sai on 29/07/2019 y 160 _ 170 _ 175.0
            paidLbl.font = [UIFont systemFontOfSize:20];
            paidLbl.frame = CGRectMake(15, 225, 120, 30);//changed by sai on 29/07/2019 y 225
            
            salesPersonLbl.font = [UIFont systemFontOfSize:20];
            salesPersonLbl.frame = CGRectMake(15, 275, 120, 30);//changed by sai on 29/07/2019 y 300 _ 280
            
            deliveryPersonLbl.font = [UIFont systemFontOfSize : 20];
            deliveryPersonLbl.frame = CGRectMake (15, 325, 120, 30);
            
            
            
            payTxt1.font = [UIFont systemFontOfSize:20];
            payTxt1.frame = CGRectMake(160, 175, 200, 40);//changed by sai on 29/07/2019 y 160 _ 170 _ 175
            payTxt2.font = [UIFont systemFontOfSize:20];
            payTxt2.frame = CGRectMake(160, 225, 200, 40);;//changed by sai on 29/07/2019 y 225
            
            salesPersonId.font = [UIFont systemFontOfSize:20];
            salesPersonId.frame = CGRectMake(160, 275, 200, 40);//changed by sai on 29/07/2019 y 300 _ 275
            
            selectSalesPerson.frame = CGRectMake((salesPersonId.frame.origin.x + salesPersonId.frame.size.width - 45), 275, 60, 50);//changed by sai on 29/07/2019 y 300 _ 275
            
            //added by sai On 29/07/2019 deliveryPersonID and deliveryPerson Selection Button
            deliveryPersonId.font = [UIFont systemFontOfSize : 20];
            deliveryPersonId.frame = CGRectMake(160, 325,200,40);
            
            selectDeliveryPerson.frame = CGRectMake((deliveryPersonId.frame.origin.x + deliveryPersonId.frame.size.width - 45), 325,60,50);
            // Upto herw by sai on 29/07/2019
            
            phnotext.frame = CGRectMake(160.0, 370, 200, 40);
            phnotext.font = [UIFont systemFontOfSize:20];
            emailtext.frame = CGRectMake(160.0, 440, 200, 40);
            emailtext.font = [UIFont systemFontOfSize:20.0];
            creditNoteTxt.frame = CGRectMake(160, 125, 200, 40);// changed by sai on 29/07/2019 y 90 _ 115 _ 125
            creditNoteTxt.font = [UIFont systemFontOfSize:20];
            
            namelbl.font = [UIFont systemFontOfSize:20];
            namelbl.frame = CGRectMake(400, creditNoteLbl.frame.origin.y, 120, 30); // changed by sai on 29/07/2019 x 160 _ 125 _creditNoteLbl y
            
            streetlbl.font = [UIFont systemFontOfSize:20.0];
            streetlbl.frame = CGRectMake(400, namelbl.frame.origin.y + 55, 120, 30);// changed by sai on 29/07/2019 y 230 _ billLbl y
            localitylbl.font = [UIFont systemFontOfSize:20.0];
            localitylbl.frame = CGRectMake(400, streetlbl.frame.origin.y + 55, 120, 30);//// changed by sai on 29/07/2019 y _ billLbl y
            citylbl.font = [UIFont systemFontOfSize:20.0];
            citylbl.frame = CGRectMake(400, localitylbl.frame.origin.y + 55, 120, 30);//changed b y sai on 29/07/2019 y to salesPerson Label y
            pinlbl.font = [UIFont systemFontOfSize:20.0];
            pinlbl.frame = CGRectMake(400, citylbl.frame.origin.y + 55, 120, 30);//changed b y sai on 29/07/2019 y to deliveryPerson Label y
            
            phonelbl.font = [UIFont systemFontOfSize:20];
            phonelbl.frame = CGRectMake(400, pinlbl.frame.origin.y + 55, 120, 30); // changed by sai on 29/07/2019
            emaillbl.font = [UIFont systemFontOfSize:20];
            emaillbl.frame = CGRectMake(400, phonelbl.frame.origin.y + 55, 120, 30);// changed by sai on 29/07/2019
            
            nametext.frame = CGRectMake(530, 125, 200, 40); // changed by sai on 29/07/2019 x 160 _ 125
            nametext.font = [UIFont systemFontOfSize:20];
            
            streettext.font = [UIFont systemFontOfSize:20];
            streettext.frame = CGRectMake(530, 230, 200, 40);
            locltytext.font = [UIFont systemFontOfSize:20];
            locltytext.frame = CGRectMake(530, 300, 200, 40);
            citytext.frame = CGRectMake(530, 370, 200.0, 40);
            citytext.font = [UIFont systemFontOfSize:20];
            pintext.frame = CGRectMake(530, 440, 200.0, 40);
            pintext.font = [UIFont systemFontOfSize:20.0];
            
            
            if ([paymentType isKindOfClass:[NSString class]]) {
                if ([paymentType isEqualToString:@"CARD"]) {
                    paymentScrollView.frame = CGRectMake(0.0, 135, 800.0, 450.0);
                    paymentScrollView.contentSize = CGSizeMake(800.0, 650.0);
                    paymentView.frame = CGRectMake(100, 80, 800, 600);
                    
                    payBtn.frame = CGRectMake(150.0, 390, 500, 50.0);
                    label.frame = CGRectMake(0, 0, 800, 80);
                    backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                    
                    label.font = [UIFont systemFontOfSize:25];
                    
                    billStatusLabel.font = [UIFont systemFontOfSize:20];
                    billStatusLabel.frame = CGRectMake(15,140,120,30);
                    billStatusLabelValue.font = [UIFont systemFontOfSize:20];
                    billStatusLabelValue.frame = CGRectMake(160,140,160,30);
                    billLabel.font = [UIFont systemFontOfSize:20];
                    billLabel.frame = CGRectMake(15, 30, 120, 30);
                    paidLbl.font = [UIFont systemFontOfSize:20];
                    paidLbl.frame = CGRectMake(15, 100, 120, 30);//here
                    
                    salesPersonLbl.font = [UIFont systemFontOfSize:20];
                    salesPersonLbl.frame = CGRectMake(15, 170, 120, 30);//here
                    
                    phonelbl.font = [UIFont systemFontOfSize:20];
                    phonelbl.frame = CGRectMake(15, 240, 120, 30);
                    emaillbl.font = [UIFont systemFontOfSize:20];
                    emaillbl.frame = CGRectMake(15, 310, 120, 30);
                    
                    payTxt1.font = [UIFont systemFontOfSize:20];
                    payTxt1.frame = CGRectMake(160, 30, 200, 40);
                    payTxt2.font = [UIFont systemFontOfSize:20];
                    payTxt2.frame = CGRectMake(160, 100, 200, 40);//here
                    phnotext.frame = CGRectMake(160.0, 170, 200, 40);
                    phnotext.font = [UIFont systemFontOfSize:20];
                    emailtext.frame = CGRectMake(160.0, 240, 200, 40);
                    emailtext.font = [UIFont systemFontOfSize:20.0];
                    nametext.frame = CGRectMake(160, 310, 200, 40);
                    nametext.font = [UIFont systemFontOfSize:20];
                    
                    namelbl.font = [UIFont systemFontOfSize:20];
                    namelbl.frame = CGRectMake(400, 310, 120, 30);
                    
                    streetlbl.font = [UIFont systemFontOfSize:20.0];
                    streetlbl.frame = CGRectMake(400, 85, 120, 30);
                    localitylbl.font = [UIFont systemFontOfSize:20.0];
                    localitylbl.frame = CGRectMake(400, 170, 120, 30);//here
                    citylbl.font = [UIFont systemFontOfSize:20.0];
                    citylbl.frame = CGRectMake(400, 170, 120, 30);
                    pinlbl.font = [UIFont systemFontOfSize:20.0];
                    pinlbl.frame = CGRectMake(400, 240, 120, 30);
                    
                    streettext.font = [UIFont systemFontOfSize:20];
                    streettext.frame = CGRectMake(530, 30, 200, 40);
                    locltytext.font = [UIFont systemFontOfSize:20];
                    locltytext.frame = CGRectMake(530, 100, 200, 40);
                    citytext.frame = CGRectMake(530, 170, 200.0, 40);
                    citytext.font = [UIFont systemFontOfSize:20];
                    pintext.frame = CGRectMake(530, 240, 200.0, 40);
                    pintext.font = [UIFont systemFontOfSize:20.0];
                    
                }
            }
            
            
            
            payBtn.layer.cornerRadius = 10.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
            if ([paymentType isKindOfClass:[UIButton class]]) {
                back.layer.cornerRadius = 10.0;
                back.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                payBtn.frame = CGRectMake(450.0, 470, 250, 40.0);
                back.frame = CGRectMake(100.0, 470, 250.0, 40.0);
                [paymentScrollView addSubview:back];
            }
            
            else if ([paymentType caseInsensitiveCompare:@"cash"] == NSOrderedSame) {
                back.layer.cornerRadius = 10.0;
                back.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
                payBtn.frame = CGRectMake(160.0, 470, 200, 50.0);
                back.frame = CGRectMake(450.0, 470, 200.0, 50.0);
                [paymentScrollView addSubview:back];
            }
            
            
            
            
            //changed by Srinivasulu on 02/05/2017....
            
            
            
            nametext.frame = CGRectMake( 500, creditNoteTxt.frame.origin.y, 115, 40);
            nametext.font = [UIFont systemFontOfSize:20];
            
            lastNameTxt.frame = CGRectMake( nametext.frame.origin.x + nametext.frame.size.width + 10, nametext.frame.origin.y, 150, nametext.frame.size.height);
            lastNameTxt.font = [UIFont systemFontOfSize:20];
            
            
            doorNoTxt.frame = CGRectMake( nametext.frame.origin.x, nametext.frame.origin.y + 55, nametext.frame.size.width, nametext.frame.size.height);
            doorNoTxt.font = [UIFont systemFontOfSize:20];
            
            streettext.frame = CGRectMake( lastNameTxt.frame.origin.x, doorNoTxt.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            streettext.font = [UIFont systemFontOfSize:20];
            
            locltytext.frame = CGRectMake( nametext.frame.origin.x, doorNoTxt.frame.origin.y + 55, (streettext.frame.origin.x +  streettext.frame.size.width) - doorNoTxt.frame.origin.x, nametext.frame.size.height); // y to paytx2.y
            locltytext.font = [UIFont systemFontOfSize:20];
            
            landMarkTxt.frame = CGRectMake( locltytext.frame.origin.x, locltytext.frame.origin.y + 55 , locltytext.frame.size.width, nametext.frame.size.height);
            landMarkTxt.font = [UIFont systemFontOfSize:20];
            
            
            citytext.frame = CGRectMake( nametext.frame.origin.x, landMarkTxt.frame.origin.y + 55, nametext.frame.size.width, nametext.frame.size.height);
            citytext.font = [UIFont systemFontOfSize:20];
            pintext.frame = CGRectMake( lastNameTxt.frame.origin.x, citytext.frame.origin.y, lastNameTxt.frame.size.width, nametext.frame.size.height);
            pintext.font = [UIFont systemFontOfSize:20];
            phnotext.frame = CGRectMake(citytext.frame.origin.x, (citytext.frame.origin.y + 55), locltytext.frame.size.width, 40);
            phnotext.font = [UIFont systemFontOfSize:20];
            emailtext.frame = CGRectMake(citytext.frame.origin.x, (phnotext.frame.origin.y + 55), locltytext.frame.size.width, 40);
            emailtext.font = [UIFont systemFontOfSize:20.0];
            
            //upto here on 02/05/2017.......
            if ([[UIImage imageNamed:@"unchecked2.png"] isEqual:radioBtn2.currentImage]) {
                
                NSLog(@"Door Delivery not Selected");
                deliveryPersonId.backgroundColor = [UIColor grayColor];
                selectDeliveryPerson.enabled = NO;
                //            deliveryPersonLbl.textColor = [UIColor cyanColor];
            }else{
                NSLog(@"Door Delivery Selected");
            }
        }
        else {
            paymentView.frame = CGRectMake(20, 140, 730, 750.0);
            paymentScrollView.frame = CGRectMake(0.0, 0.0, 730.0, 750.0);
            paymentScrollView.contentSize = CGSizeMake(730.0, 850.0);
            payBtn.frame = CGRectMake(50.0, 680.0, 630.0, 60.0);
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            
            label.font = [UIFont systemFontOfSize:25];
            label.frame = CGRectMake(0, 0, 730, 80);
            backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
            billStatusLabel.font = [UIFont systemFontOfSize:25];
            billStatusLabel.frame = CGRectMake(15,220,220,45);
            billStatusLabelValue.font = [UIFont systemFontOfSize:25];
            billStatusLabelValue.frame = CGRectMake(210,220,160,45);
            billLabel.font = [UIFont systemFontOfSize:25];
            billLabel.frame = CGRectMake(15, 100.0, 160, 45);
            paidLbl.font = [UIFont systemFontOfSize:25];
            paidLbl.frame = CGRectMake(15, 170.0, 160, 45);//here
            phonelbl.font = [UIFont systemFontOfSize:25.0];
            phonelbl.frame = CGRectMake(15, 270.0, 160.0, 45);
            emaillbl.font = [UIFont systemFontOfSize:25.0];
            emaillbl.frame = CGRectMake(15, 340.0, 160.0, 45);
            namelbl.font = [UIFont systemFontOfSize:25.0];
            namelbl.frame = CGRectMake(15, 410.0, 160.0, 45);
            payTxt1.font = [UIFont systemFontOfSize:25];
            payTxt1.frame = CGRectMake(200, 100.0, 300, 45);
            payTxt2.font = [UIFont systemFontOfSize:25];
            payTxt2.frame = CGRectMake(200, 170.0, 300, 45);//here
            phnotext.frame = CGRectMake(200.0, 270.0, 300.0, 45);
            phnotext.font = [UIFont systemFontOfSize:25];
            emailtext.frame = CGRectMake(200.0, 340.0, 300.0, 45);
            emailtext.font = [UIFont systemFontOfSize:25.0];
            nametext.frame = CGRectMake(200.0, 410.0, 300.0, 45);
            nametext.font = [UIFont systemFontOfSize:25];
            
            streetlbl.font = [UIFont systemFontOfSize:25.0];
            streetlbl.frame = CGRectMake(15, 480.0, 160.0, 45);
            localitylbl.font = [UIFont systemFontOfSize:25.0];
            localitylbl.frame = CGRectMake(15, 550.0, 160.0, 45);
            citylbl.font = [UIFont systemFontOfSize:25.0];
            citylbl.frame = CGRectMake(15, 620.0, 160.0, 45);
            pinlbl.font = [UIFont systemFontOfSize:25.0];
            pinlbl.frame = CGRectMake(15, 690.0, 160.0, 45);
            
            streettext.font = [UIFont systemFontOfSize:25];
            streettext.frame = CGRectMake(200, 480.0, 300, 45);
            locltytext.font = [UIFont systemFontOfSize:25];
            locltytext.frame = CGRectMake(200, 550.0, 300, 45);
            citytext.frame = CGRectMake(200.0, 620.0, 300.0, 45);
            citytext.font = [UIFont systemFontOfSize:25];
            pintext.frame = CGRectMake(200.0, 690.0, 300.0, 45);
            pintext.font = [UIFont systemFontOfSize:25.0];
            
            
            payBtn.frame = CGRectMake(50.0, 755.0, 630.0, 50.0);
            payBtn.layer.cornerRadius = 25.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            paymentView.frame = CGRectMake(20, 140, 730, 820.0);
            
            
        }
        
        
        // img1.frame = CGRectMake(0, 0, 630, 460);
        
        
    }
    else {
        
        if (version >= 8.0 ) {
            paymentView.backgroundColor = [UIColor blackColor];
            paymentScrollView.frame = CGRectMake(0.0, 0.0, 300.0, 540.0);
            paymentScrollView.contentSize = CGSizeMake(300.0, 850.0);
            label.frame = CGRectMake(0, 0, 300, 40);
            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            billLabel.frame = CGRectMake(10, 50, 80, 30);
            paidLbl.frame = CGRectMake(10, 100, 120, 30);//here
            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
            payTxt1.frame = CGRectMake(140, 50, 150, 35);
            payTxt2.frame = CGRectMake(140, 100, 150, 35);//here
            //                                payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
            //                                payBtn.layer.cornerRadius = 15.0f;
            //                                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            phonelbl.frame = CGRectMake(10, 150.0, 160.0, 30);
            emaillbl.frame = CGRectMake(10, 195.0, 160.0, 30);
            namelbl.frame = CGRectMake(10,240.0, 160.0, 45);
            phnotext.frame = CGRectMake(140.0, 150.0, 150.0, 35);
            emailtext.frame = CGRectMake(140.0, 195.0, 150.0, 35);
            nametext.frame = CGRectMake(140.0, 240.0, 150.0, 35);
            
            streetlbl.frame = CGRectMake(10, 285, 160.0, 30);
            localitylbl.frame = CGRectMake(10, 330, 160.0, 30);
            citylbl.frame = CGRectMake(10, 375, 160.0, 35);
            pinlbl.frame = CGRectMake(10, 420, 160.0, 35);
            
            
            streetlbl.font = [UIFont systemFontOfSize:15];
            localitylbl.font = [UIFont systemFontOfSize:15];
            citylbl.font = [UIFont systemFontOfSize:15];
            pinlbl.font = [UIFont systemFontOfSize:15];
            
            streettext.font = [UIFont systemFontOfSize:15];
            streettext.frame = CGRectMake(140, 285, 150, 30);
            locltytext.font = [UIFont systemFontOfSize:15];
            locltytext.frame = CGRectMake(140, 330, 150, 30);
            citytext.frame = CGRectMake(140, 375, 150, 30);
            citytext.font = [UIFont systemFontOfSize:15];
            pintext.frame = CGRectMake(140, 420.0, 150, 30);
            pintext.font = [UIFont systemFontOfSize:15];
            
            payBtn.frame = CGRectMake(10.0, 455.0, 280.0, 30.0);
            payBtn.layer.cornerRadius = 15.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            paymentView.frame = CGRectMake(10, 70, 300, 540);
        }
        else{
            label.frame = CGRectMake(0, 0, 300, 40);
            backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
            billLabel.frame = CGRectMake(10, 50, 80, 30);
            paidLbl.frame = CGRectMake(10, 100, 120, 30);//here
            billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
            billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
            payTxt1.frame = CGRectMake(140, 50, 150, 35);
            payTxt2.frame = CGRectMake(140, 100, 150, 35);//here
            payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
            payBtn.layer.cornerRadius = 15.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
            paymentView.frame = CGRectMake(10, 70, 300, 240);
        }
        
    }
    [paymentScrollView addSubview:creditNoteLbl];
    [paymentScrollView addSubview:creditNoteTotalLbl];
    [paymentScrollView addSubview:creditNoteBalLbl];
    [paymentScrollView addSubview:creditNoteStatusLbl];
    [paymentScrollView addSubview:billLabel];
    [paymentScrollView addSubview:paidLbl];
    [paymentScrollView addSubview:billStatusLabel];
    [paymentScrollView addSubview:billStatusLabelValue];
    [paymentScrollView addSubview:payTxt1];
    [paymentScrollView addSubview:payTxt2];
    [paymentScrollView addSubview:phonelbl];
    [paymentScrollView addSubview:emaillbl];
    [paymentScrollView addSubview:namelbl];
    [paymentScrollView addSubview:phnotext];
    [paymentScrollView addSubview:emailtext];
    [paymentScrollView addSubview:creditNoteTxt];
    [paymentScrollView addSubview:nametext];
    [paymentScrollView addSubview:payBtn];
    [paymentScrollView addSubview:salesPersonLbl];
    [paymentScrollView addSubview:deliveryPersonLbl];
    
    [paymentScrollView addSubview:salesPersonId];
    [paymentScrollView addSubview:selectSalesPerson];
    [paymentScrollView addSubview:deliveryPersonId];
    [paymentScrollView addSubview:selectDeliveryPerson];
    
    
    [paymentView addSubview:paymentScrollView];
    [paymentView addSubview:label];
    [paymentView addSubview:backbutton];
    [self.view addSubview:paymentView];
    
    paymentView.hidden = NO;
    if ((custmerPhNum.text).length >= 10) {
        phnotext.text = custmerPhNum.text;
        [self getCustomerDetails];
    }
    
    //Changes done by Srinivasulu on 17/05/2018....
    //reaons -- Sir side remove animations. Commented and written the code....
    
    //    [UIView transitionFromView:denomination
    //                        toView:paymentView
    //                      duration:0.6
    //                       options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
    //                    completion:nil];
    
    if(denomination != nil)
        denomination.hidden = YES;
    paymentView.hidden = NO;
    //upto here on 17/05/2018....
    
    
}

-(void)backToDenomination {
    
    isReturnDenom = false;
    [denomination setUserInteractionEnabled:YES];
    denominationView.hidden = false;
    
    
    //Changes done by Srinivasulu on 17/05/2018....
    //reaons -- Sir side remove animations. Commented and written the code....
    
    //    [UIView transitionFromView:paymentView
    //                        toView:denominationView
    //                      duration:0.6
    //                       options:UIViewAnimationOptionTransitionFlipFromRight | UIViewAnimationOptionShowHideTransitionViews
    //                    completion:nil];
    
    paymentView.hidden = YES;
    denominationView.hidden = NO;
    //upto here on 17/05/2018....
    
    
}

-(void)backToReturnDenomination {
    isReturnDenom = false;
    [denomination setUserInteractionEnabled:YES];
    denominationView.hidden = false;
    
    //Changes done by Srinivasulu on 17/05/2018....
    //reaons -- Sir side remove animations. Commented and written the code....
    
    
    //    [UIView transitionFromView:returnDenominationView
    //                        toView:denominationView
    //                      duration:0.6
    //                       options:UIViewAnimationOptionTransitionFlipFromRight | UIViewAnimationOptionShowHideTransitionViews
    //                    completion:nil];
    returnDenominationView.hidden = YES;
    denominationView.hidden = NO;
    //upto here on 17/05/2018....
    
}
-(void)backToPaymentView {
    [paymentView setUserInteractionEnabled:YES];
    [UIView transitionFromView:cardDetailsView
                        toView:paymentView
                      duration:0.6
                       options:UIViewAnimationOptionTransitionFlipFromRight | UIViewAnimationOptionShowHideTransitionViews
                    completion:nil];
    
}
- (void)centralManagerDidUpdateState:(CBCentralManager *)central {
    
    if (central.state == CBCentralManagerStatePoweredOn) {
        bluetoothEnabled = YES;
        [HUD setHidden:NO];
        HUD.labelText = @"Please wait...";
        
        [[MswipeWisepadController sharedInstance] processLoginAuthentication:@"9100000483" stPassord:@"techno" responsehadnler:self] ;
    }
    else {
        bluetoothEnabled = NO;
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Bluetooth Disabled" message:@"Please Enable Bluetooth to continue" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    }
}


// close SMSView....
-(void) closeSMSView{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    [smsField resignFirstResponder];
    [baseView setHidden:YES];
}

// If phone number is valid send sms to user...
-(void) handelSMS{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    // NSString *value = [smsField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    // PhoNumber validation...
    NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
    NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
    BOOL isNumber = [decimalTest evaluateWithObject:smsField.text];
    //int qty = [value intValue];
    
    if((smsField.text).length <= 9 || (smsField.text).length >= 12 || !isNumber) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    else{
        
        [smsField resignFirstResponder];
        [baseView setHidden:YES];
    }
}


// SMS delegte handle.....
- (void)messageComposeViewController:(MFMessageComposeViewController *)controller   didFinishWithResult:(MessageComposeResult)result
{
    switch (result)
    {
        case MessageComposeResultCancelled:{
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"SMS" message:@"MessageComposeResultCancelled"
                                                           delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
            [alert show];
            break;
        }
            
        case MessageComposeResultFailed:{
            UIAlertView *alert1 = [[UIAlertView alloc] initWithTitle:@"SMS" message:@"Message Failed"
                                                            delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
            [alert1 show];
            break;
        }
            
        case MessageComposeResultSent:{
            
            //            UIAlertView *alert1 = [[UIAlertView alloc] initWithTitle:@"SMS" message:@"Message has been sent"
            //                                                            delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
            //            [alert1 show];
            break;
        }
            
        default:
            break;
    }
    [self dismissViewControllerAnimated:YES completion:nil];
}




- (void) runScheduledTask:(NSTimer*)theTimer {
    
    if ([(NSString*)theTimer.userInfo isEqualToString:@"paymentView"]) {
        
        if (paymentView.subviews){
            //            for (UIView *subview in [paymentView subviews]) {
            //                [subview removeFromSuperview];
            //            }
            
            [label_1 removeFromSuperview];
            [label_2 removeFromSuperview];
            savebtn.tag = 0;
            
        }
        
        //paymentView.hidden = YES;
        //[paymentView removeFromSuperview];
    }
    else if ([(NSString*)theTimer.userInfo isEqualToString:@"paymentView1"]) {
        
        if (paymentView.subviews){
            for (UIView *subview in paymentView.subviews) {
                [subview removeFromSuperview];
            }
            
            [label_1 removeFromSuperview];
            [label_2 removeFromSuperview];
            savebtn.tag = 0;
            
        }
        paymentView.hidden = YES;
        [paymentView removeFromSuperview];
    }
    else if([(NSString*)theTimer.userInfo isEqualToString:@"giftView"]) {
        
        if (giftView.subviews){
            for (UIView *subview in giftView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        giftView.hidden = YES;
        [giftView removeFromSuperview];
    }
    else if([(NSString*)theTimer.userInfo isEqualToString:@"mailView"]) {
        
        if (mailView.subviews){
            for (UIView *subview in mailView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        mailView.hidden = YES;
        [mailView removeFromSuperview];
    }
    else if([(NSString*)theTimer.userInfo isEqualToString:@"printView"]) {
        
        if (printView.subviews){
            for (UIView *subview in printView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        printView.hidden = YES;
        [printView removeFromSuperview];
    }
    else if([(NSString*)theTimer.userInfo isEqualToString:@"smsView"]) {
        
        if (smsView.subviews){
            for (UIView *subview in smsView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        smsView.hidden = YES;
        [smsView removeFromSuperview];
    }
    
    
    aTimer = nil;
}

- (void) closeView:(id) sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    BillField.userInteractionEnabled = YES;
    [paymentView setUserInteractionEnabled:YES];
    [self setSiblings:paymentView enabled:TRUE];
    paidVal = nil;
    //    paymentTransactionArray = [NSMutableArray new];
    
    segment_index = 1;
    
    if ([sender tag] == 1 || [sender tag] == 11) {
        
        if (paymentView.subviews){
            for (UIView *subview in paymentView.subviews) {
                [subview removeFromSuperview];
            }
            
            if([addCardPaymentDetailsArr count] && addCardPaymentDetailsArr != nil)
                [addCardPaymentDetailsArr removeAllObjects];
        }
        
        // Enable the backgroud views ..
        [self setSiblings:paymentView enabled:TRUE];
        
        paymentView.hidden = YES;
    }
    else if ([sender tag] == 3 || [sender tag] == 33) {
        
        if (mailView.subviews){
            for (UIView *subview in mailView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        // Enable the backgroud views ..
        [self setSiblings:mailView enabled:TRUE];
        
        mailView.hidden = YES;
    }
    else if([sender tag] == 22){
        
        //Play Audio for button touch....
        AudioServicesPlaySystemSound (soundFileObject);
        
        // disable the backgroud view ..
        [self setSiblings:giftView enabled:TRUE];
        
        if (giftView.subviews){
            for (UIView *subview in giftView.subviews) {
                [subview removeFromSuperview];
            }
        }
        giftNo.text = nil;
        giftID.text = nil;
        giftView.hidden = YES;
        phoneNumberText.hidden = YES;
        
    }
    else if([sender tag] == 20){
        
        if (couponView.subviews){
            for (UIView *subview in couponView.subviews) {
                [subview removeFromSuperview];
            }
        }
        [self setSiblings:couponView enabled:TRUE];
        
        NSMutableArray *tempPaymentTransArr = [paymentTransactionArray mutableCopy];
        
        for (NSMutableDictionary *transDic in tempPaymentTransArr) {
            if ([[[transDic valueForKey:@"modeOfPayment"] lowercaseString] isEqualToString:@"sodexo"] || [[[transDic valueForKey:@"modeOfPayment"] lowercaseString] isEqualToString:@"ticket"]) {
                [tempPaymentTransArr removeObject:transDic];
                break;
            }
        }
        paymentTransactionArray = [tempPaymentTransArr mutableCopy];
        couponView.hidden = YES;
    }
    else if([sender tag] == 78){
        if (returnDenomination.subviews){
            for (UIView *subview in returnDenomination.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        // Enable the backgroud views ..
        [self setSiblings:returnDenomination enabled:TRUE];
        [segmentedControl setUserInteractionEnabled:YES];
        
        returnDenomination.hidden = YES;
        
        if (returnDenominationView.subviews){
            for (UIView *subview in returnDenominationView.subviews) {
                [subview removeFromSuperview];
            }
        }
        returnDenominationView.hidden=YES;
    }
    else if([sender tag] == 88){
        if (cardDetailsView.subviews){
            for (UIView *subview in cardDetailsView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if (paymentView.subviews){
            for (UIView *subview in paymentView.subviews) {
                [subview removeFromSuperview];
            }
        }
        // Enable the backgroud views ..
        [self setSiblings:cardDetailsView enabled:TRUE];
        [segmentedControl setUserInteractionEnabled:YES];
        
        cardDetailsView.hidden = YES;
    }
    else if ([sender tag] == 75) {
        
        if (denominationView.subviews){
            for (UIView *subview in denominationView.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        // Enable the backgroud views ..
        [self setSiblings:denomination enabled:TRUE];
        [segmentedControl setUserInteractionEnabled:YES];
        
        [denominationView removeFromSuperview];
    }
    else {
        
        if (denomination.subviews){
            for (UIView *subview in denomination.subviews) {
                [subview removeFromSuperview];
            }
        }
        
        // Enable the backgroud views ..
        [self setSiblings:denomination enabled:TRUE];
        [segmentedControl setUserInteractionEnabled:YES];
        
        denomination.hidden = YES;
    }
}


//- (void) continueFurther:(id) sender {
//
//    //Play Audio for button touch....
//    AudioServicesPlaySystemSound (soundFileObject);
//
//    //NSLog(@"%d",[sender tag]);
//
//    if ([sender tag] == 1) {     // payment
//
//        if ([group getSelected] == 0) {    // swipe
//
//            swipe_Status = totalTxt.text;
//
//            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//                //                @try {
//                //                    SwipeControllerIpadViewController *viewController = [[[SwipeControllerIpadViewController alloc] initWithNibName:@"SwipeControllerIpadViewController" bundle:nil] autorelease];
//                //                    [self presentViewController:viewController animated:YES completion:nil];
//                //                    [self setSiblings:paymentView enabled:TRUE];
//                //                }
//                //                @catch (NSException *exception) {
//                //                    UIAlertView *check = [[UIAlertView alloc] initWithTitle:@"Failed to load" message:@"Please try again" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                //                    [check show];
//                //                    [check release];
//                //                }
//                //                NSDecimalNumber *amount = [NSDecimalNumber decimalNumberWithMantissa:((UIButton *)sender).tag exponent:0 isNegative:NO];
//                //                [[iZettleSDK shared] startWithAPIKey:@"EB8AD48B0B4E5DB791FD8E2AB29B2D60"];
//                //                [[iZettleSDK shared] chargeAmount:amount reference:@"myId" presentFromViewController:self completion:^(NSDictionary *paymentInfo, NSError *error) {
//                //                    // Handle the result
//                //                    if (paymentInfo) { // Payment OK
//                //                        NSMutableString *resultString = [[NSMutableString alloc] init];
//                //
//                //                        [resultString appendFormat:@"iZettle payment was successfully executed with amount: %@", amount];
//                //
//                //                        [resultString appendFormat:@"\nPayment method: %@", paymentInfo[@"type"]];
//                //
//                //                        [resultString appendFormat:@"\nCustomer payed with a card type %@", paymentInfo[@"cardBrand"]];
//                //
//                //                        //_resultTextView.text = resultString;
//                //
//                //                    } else { // Payment not completed for some reason
//                //                        //_resultTextView.text = [NSString stringWithFormat:@"iZettle payment failed with reason: %@", error.userInfo[NSLocalizedDescriptionKey]];
//                //                    }
//                //
//                //                    // If we want the hardcore debug print - don't mind the fluffy print we just generated
//                ////                    if (SHOW_RESULT_DEBUG) {
//                ////                        _resultTextView.text = [NSString stringWithFormat:@"info = %@, error = %@", paymentInfo, error];
//                ////                    }
//                //                }];
//                //
//            }
//            else{
//                @try {
//                    SwipeController *viewController = [[[SwipeController alloc] initWithNibName:@"SwipeController" bundle:nil] autorelease];
//                    [self presentViewController:viewController animated:YES completion:nil];
//                    [self setSiblings:paymentView enabled:TRUE];
//                }
//                @catch (NSException *exception) {
//
//                    NSLog(@"%@",exception);
//
//                    UIAlertView *check = [[UIAlertView alloc] initWithTitle:@"Failed to load" message:@"Please try again" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                    [check show];
//                    [check release];
//                }
//
//            }
//        }
//        else if ([group getSelected] == 1) {    // swipe
//
//            swipe_Status = totalTxt.text;
//
//            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//                @try {
//                    SwipeControllerIpadViewController *viewController = [[[SwipeControllerIpadViewController alloc] initWithNibName:@"SwipeControllerIpadViewController" bundle:nil] autorelease];
//                    [self presentViewController:viewController animated:YES completion:nil];
//                    [self setSiblings:paymentView enabled:TRUE];
//                }
//                @catch (NSException *exception) {
//                    UIAlertView *check = [[UIAlertView alloc] initWithTitle:@"Failed to load" message:@"Please try again" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                    [check show];
//                    [check release];
//                }
//
//
//            }
//            else{
//                @try {
//                    SwipeController *viewController = [[[SwipeController alloc] initWithNibName:@"SwipeController" bundle:nil] autorelease];
//                    [self presentViewController:viewController animated:YES completion:nil];
//                    [self setSiblings:paymentView enabled:TRUE];
//                }
//                @catch (NSException *exception) {
//                    UIAlertView *check = [[UIAlertView alloc] initWithTitle:@"Failed to load" message:@"Please try again" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                    [check show];
//                    [check release];
//                }
//
//            }
//        }
//
//        else if ([group getSelected] == 2) {     // cash
//
//            paymentView.hidden = YES;
//
//            if ([paymentView subviews]){
//                for (UIView *subview in [paymentView subviews]) {
//                    [subview removeFromSuperview];
//                }
//            }
//
//            paymentView.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
//            // header ..
//           label = [[UILabel alloc] init] ;
//            label.text = @"    Pay Cash";
//            label.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:18];
//            label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
//            label.alpha = 0.8f;
//            label.textAlignment = NSTextAlignmentLeft;
//            label.backgroundColor = [UIColor blackColor];
//            label.textColor = [UIColor whiteColor];
//
//            // close button to close the view ..
//            UIButton *backbutton = [[UIButton alloc] init] ;
//            [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
//            backbutton.tag = 11;
//
//            UIImage *image = [UIImage imageNamed:@"delete.png"];
//            [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
//
//            UILabel *label1 = [[UILabel alloc] init] ;
//            label1.text = @"Total Bill ";
//            label1.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
//            label1.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
//            label1.backgroundColor = [UIColor clearColor];
//            label1.textColor = [UIColor blackColor];
//
//            UILabel *label2 = [[UILabel alloc] init] ;
//            label2.text = @"Paid Cash ";
//            label2.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
//            label2.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
//            label2.backgroundColor = [UIColor clearColor];
//            label2.textColor = [UIColor blackColor];
//
//            billStatusLabel = [[UILabel alloc] init] ;
//            billStatusLabel.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
//            billStatusLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
//            billStatusLabel.backgroundColor = [UIColor clearColor];
//            billStatusLabel.textColor = [UIColor blackColor];
//            billStatusLabel.hidden = YES;
//
//            billStatusLabelValue = [[UILabel alloc] init] ;
//            billStatusLabelValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
//            billStatusLabelValue.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
//            billStatusLabelValue.backgroundColor = [UIColor clearColor];
//            billStatusLabelValue.textColor = [UIColor blackColor];
//            billStatusLabelValue.hidden = YES;
//
//            payTxt1 = [[UITextField alloc] init];
//            payTxt1.borderStyle = UITextBorderStyleRoundedRect;
//            payTxt1.textColor = [UIColor blackColor];
//            payTxt1.font = [UIFont systemFontOfSize:18.0];
//            payTxt1.backgroundColor = [UIColor whiteColor];
//            //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
//            payTxt1.text = totalTxt.text;
//            [payTxt1 setEnabled:FALSE];
//            //            payTxt1.autocorrectionType = UITextAutocorrectionTypeNo;
//            //            [payTxt1 addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
//            //            UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
//            //            numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
//            //            numberToolbar1.items = [NSArray arrayWithObjects:
//            //                                    [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
//            //                                    [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)],
//            //                                    nil];
//            //            [numberToolbar1 sizeToFit];
//            //            payTxt1.inputAccessoryView = numberToolbar1;
//            //            payTxt1.keyboardType = UIKeyboardTypeNumberPad;
//            //            payTxt1.delegate = self;
//
//
//            payTxt2 = [[UITextField alloc] init];
//            payTxt2.borderStyle = UITextBorderStyleRoundedRect;
//            payTxt2.textColor = [UIColor blackColor];
//            payTxt2.font = [UIFont systemFontOfSize:18.0];
//            payTxt2.backgroundColor = [UIColor whiteColor];
//            payTxt2.text = totalTxt.text;
//            payTxt2.clearButtonMode = UITextFieldViewModeWhileEditing;
//            payTxt2.autocorrectionType = UITextAutocorrectionTypeNo;
//            [payTxt2 addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
//            UIToolbar* numberToolbar1 = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];
//            numberToolbar1.barStyle = UIBarStyleBlackTranslucent;
//            numberToolbar1.items = [NSArray arrayWithObjects:
//                                    [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
//                                    [[UIBarButtonItem alloc]initWithTitle:@"Close" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)],
//                                    nil];
//            [numberToolbar1 sizeToFit];
//            payTxt2.inputAccessoryView = numberToolbar1;
//            payTxt2.keyboardType = UIKeyboardTypeNumberPad;
//            payTxt2.delegate = self;
//
//
//
//            // pay the cash button to continue the transaction ..
//            payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
//            [payBtn addTarget:self action:@selector(continuePay2) forControlEvents:UIControlEventTouchUpInside];
//            [payBtn setTitle:@"Pay"    forState:UIControlStateNormal];
//            payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
//            payBtn.titleLabel.textColor = [UIColor whiteColor];
//            payBtn.backgroundColor = [UIColor grayColor];
//
//
//            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                // img1.frame = CGRectMake(0, 0, 630, 460);
//                label.font = [UIFont systemFontOfSize:25];
//                label.frame = CGRectMake(0, 0, 730, 80);
//                backbutton.frame = CGRectMake(670.0, 10.0, 45.0, 45.0);
//                billStatusLabel.font = [UIFont systemFontOfSize:25];
//                billStatusLabel.frame = CGRectMake(15,300,220,45);
//                billStatusLabelValue.font = [UIFont systemFontOfSize:25];
//                billStatusLabelValue.frame = CGRectMake(210,300,160,45);
//                label1.font = [UIFont systemFontOfSize:25];
//                label1.frame = CGRectMake(15, 100.0, 160, 45);
//                label2.font = [UIFont systemFontOfSize:25];
//                label2.frame = CGRectMake(15, 200.0, 160, 45);
//                payTxt1.font = [UIFont systemFontOfSize:25];
//                payTxt1.frame = CGRectMake(200, 100.0, 300, 45);
//                payTxt2.font = [UIFont systemFontOfSize:25];
//                payTxt2.frame = CGRectMake(200, 200.0, 300, 45);
//                payBtn.frame = CGRectMake(50.0, 360.0, 630.0, 60.0);
//                payBtn.layer.cornerRadius = 25.0f;
//                payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
//                paymentView.frame = CGRectMake(20, 240, 730, 460);
//
//            }
//            else {
//
//                if (version >= 8.0 ) {
//                    label.frame = CGRectMake(0, 0, 300, 40);
//                    backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
//                    label1.frame = CGRectMake(10, 50, 80, 30);
//                    label2.frame = CGRectMake(10, 100, 120, 30);
//                    billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
//                    billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
//                    payTxt1.frame = CGRectMake(140, 50, 150, 35);
//                    payTxt2.frame = CGRectMake(140, 100, 150, 35);
//                    payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
//                    payBtn.layer.cornerRadius = 15.0f;
//                    payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
//                    paymentView.frame = CGRectMake(10, 150, 300, 240);
//                }
//                else{
//                    label.frame = CGRectMake(0, 0, 300, 40);
//                    backbutton.frame = CGRectMake(265.0, 6.0, 27.0, 27.0);
//                    label1.frame = CGRectMake(10, 50, 80, 30);
//                    label2.frame = CGRectMake(10, 100, 120, 30);
//                    billStatusLabel.frame = CGRectMake(10, 150, 120, 30);
//                    billStatusLabelValue.frame = CGRectMake(140, 147, 100, 35);
//                    payTxt1.frame = CGRectMake(140, 50, 150, 35);
//                    payTxt2.frame = CGRectMake(140, 100, 150, 35);
//                    payBtn.frame = CGRectMake(10.0, 190.0, 280.0, 30.0);
//                    payBtn.layer.cornerRadius = 15.0f;
//                    payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
//                    paymentView.frame = CGRectMake(10, 70, 300, 240);
//                }
//
//            }
//
//            //[paymentView addSubview:img1];
//            [paymentView addSubview:label];
//            [paymentView addSubview:backbutton];
//            [paymentView addSubview:label1];
//            [paymentView addSubview:label2];
//            [paymentView addSubview:billStatusLabel];
//            [paymentView addSubview:billStatusLabelValue];
//            [paymentView addSubview:payTxt1];
//            [paymentView addSubview:payTxt2];
//            [paymentView addSubview:payBtn];
//
//            paymentView.hidden = NO;
//        }
//
//    }
//    else if ([sender tag] == 3) {      // email
//
//        NSString *emailStr;
//
//        if(savebtn.tag == 1 || savebtn.tag == 2){
//            emailStr = emailtext.text;
//            // savebtn.tag = 0;
//        }else{
//            emailStr = payTxt3.text;
//
//            mailView.hidden = YES;
//            if ([mailView subviews]){
//                for (UIView *subview in [mailView subviews]) {
//                    [subview removeFromSuperview];
//                }
//            }
//        }
//        if ([self validateEmail:emailStr]) {
//
//            // get the sender credentials from database ..
//            NSString *emailText = NULL;
//            NSString *password = NULL;
//            NSString *mailHost = NULL;
//            //NSString *portNumber = NULL;
//
//            NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
//
//            if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
//
//                const char *sqlStatement = "select * from EmailCredentials";
//
//                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
//                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
//
//                        emailText = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
//                        password = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 1)];
//                        mailHost = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 2)];
//                        //portNumber = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 3)];
//                    }
//                    sqlite3_finalize(selectStmt);
//                }
//            }
//
//            selectStmt = nil;
//            sqlite3_close(database);
//
//            if (emailText != NULL || password != NULL || mailHost != NULL) {
//
//                HUD.labelText = @"Sending Mail..";
//                [HUD setHidden:NO];
//
//                //                SKPSMTPMessage *testMsg = [[SKPSMTPMessage alloc] init];
//                //                testMsg.fromEmail = emailText;
//                //                testMsg.toEmail = emailStr;
//                //
//                //                testMsg.relayHost = mailHost;
//                //                testMsg.requiresAuth = YES;
//                //
//                //                if (testMsg.requiresAuth) {
//                //                    testMsg.login = emailText;
//                //                    testMsg.pass= password;
//                //
//                //                }
//                //                //testMsg.subject = @"This is mail from Omni Retailer ..";
//                //                testMsg.subject = @"Bill Status";
//                //
//                //
//                //
//                //                NSArray *arry = [emailText componentsSeparatedByString:@"@"];
//                //                if ([[arry objectAtIndex:1] isEqualToString:@"technolabssoftware.com"]) {
//                //                    testMsg.wantsSecure = NO;
//                //                }
//                //                else{
//                //                    testMsg.wantsSecure = YES;
//                //                }
//                //                testMsg.delegate = self;
//                //
//                //                //email contents
//                //
//                //                NSString * bodyMessage = [NSString stringWithFormat:@"%@",[self emailBill]];
//                //                NSDictionary *plainPart = [NSDictionary dictionaryWithObjectsAndKeys:@"text/html",kSKPSMTPPartContentTypeKey,
//                //                                           bodyMessage,kSKPSMTPPartMessageKey,@"8bit",kSKPSMTPPartContentTransferEncodingKey,nil];
//                //
//                //                testMsg.parts = [NSArray arrayWithObjects:plainPart,nil];
//                //
//                //                [testMsg send];
//
//                //                MCOSMTPSession *smtpSession = [[MCOSMTPSession alloc] init];
//                //                smtpSession.hostname = mailHost;
//                //                smtpSession.port = 465;
//                //                smtpSession.username = emailText;
//                //                smtpSession.password = password;
//                //                smtpSession.authType = MCOAuthTypeSASLPlain;
//                //                smtpSession.connectionType = MCOConnectionTypeTLS;
//                //                [smtpSession setCheckCertificateEnabled:NO];
//                //
//                //                NSData *rfc822Data = NULL;
//                //
//                //                MCOMessageBuilder *builder = [[MCOMessageBuilder alloc] init];
//                //                MCOAddress *from = [MCOAddress addressWithMailbox:emailText];
//                //                MCOAddress *to = [MCOAddress addressWithMailbox:[payTxt2.text copy]];
//                //                [[builder header] setFrom:from];
//                //                [[builder header] setTo:@[to]];
//                //                [[builder header] setSubject:@"Bill Status"];
//                //
//                //                NSData *imgdata = UIImagePNGRepresentation([UIImage imageNamed:@"logo_email.png"]);
//                //
//                //                MCOAttachment *attachment = [MCOAttachment attachmentWithData:imgdata filename:@"BillStatus"];
//                //                NSString *uuuid = [[NSUUID UUID] UUIDString];
//                //                [attachment setContentID:uuuid];
//                //                [attachment setInlineAttachment:YES];
//                //                [builder addRelatedAttachment:attachment];
//                //
//                //
//                //                [builder setHTMLBody:[self emailBill:uuuid]];
//                //                rfc822Data = [builder data];
//                //
//                //                MCOSMTPSendOperation *sendOperation =
//                //                [smtpSession sendOperationWithData:rfc822Data];
//                //                [sendOperation start:^(NSError *error) {
//                //                    if(error) {
//                //                        NSLog(@"Error sending email: %@", error);
//                //                        [HUD hide:YES];
//                //                        [HUD release];
//                //                        [self messageFailed];
//                //                    }
//                //
//                //                    else {
//                //                        [self messageSent];
//                //                    }
//                //                }];
//
//            }
//            else {
//
//                //                UILabel *label1 = [[UILabel alloc] init] ;
//                //                label1.text = @"Please configure \nSender Mail";
//                //                label1.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
//                //                label1.backgroundColor = [UIColor clearColor];
//                //                label1.numberOfLines = 2;
//                //                label1.textAlignment = NSTextAlignmentCenter;
//                //                label1.textColor = [UIColor blackColor];
//                //
//                //                mailView.hidden = NO;
//                //
//                //                //[self setSiblings:mailView enabled:TRUE];
//                //                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//                //                    label1.frame = CGRectMake(0, 10, 530, 180);
//                //                    mailView.frame = CGRectMake(110, 400, 530, 190);
//                //                }
//                //                else {
//                //                    label1.frame = CGRectMake(0, 10, 220, 70);
//                //                    mailView.frame = CGRectMake(50, 150, 220, 80);
//                //                }
//                //
//                //                [mailView addSubview:label1];
//                //
//                //                aTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(runScheduledTask:) userInfo:@"mailView" repeats:NO];
//
//                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please configure \n Sender mail" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                [alert show];
//                [alert release];
//
//            }
//
//        }
//        else {
//
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Please Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//            [alert show];
//            [alert release];
//
//        }
//
//    }
//}

//modified by sonali....

//- (void) getBillingDetailsHandler: (NSString *) value {
//
//    //[aTimer invalidate];
//
//    // Handle errors
//    if([value isKindOfClass:[NSError class]]) {
//        NSLog(@"%@", value);
//        return;
//    }
//
//    // Do something with the NSString* result
//    NSString* result = (NSString*)value;
//
//    [HUD setHidden:YES];
//
//    if ([result length] > 21) {
//
//        //NSLog(@"%@",result);
//
//        NSError *e;
//        NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [result dataUsingEncoding:NSUTF8StringEncoding]
//                                                              options: NSJSONReadingMutableContainers
//                                                                error: &e];
//        NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [[NSString stringWithFormat:@"%@",[JSON1 objectForKey:@"billDetails"]] dataUsingEncoding:NSUTF8StringEncoding]
//                                                             options: NSJSONReadingMutableContainers
//                                                               error: &e];
//        NSLog(@"%@",[JSON objectForKey:@"returned_items_details"]);
//        NSLog(@"%@",[JSON objectForKey:@"exchanged_items_details"]);
//
//        if ([[JSON objectForKey:@"billtransactions"] isEqualToString:@""]) {
//
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"No Data Found." delegate:self cancelButtonTitle:@"ok" otherButtonTitles:nil, nil];
//            [alert show];
//
//
//            [filteredSkuArrayList removeAllObjects];
//            [transactionArray removeAllObjects];
//
//
//            //[selectedSaleIdTable reloadData];
//            //[paymentDetailsTable reloadData];
//        }
//        else{
//            NSLog(@"%@",[JSON objectForKey:@"cashierId"]);
//
//
//            transactionArray = [[NSMutableArray alloc] init];
//
//
//            NSLog(@"%@",[JSON objectForKey:@"dueAmount"]);
//
//
//            NSArray *temp = [[JSON objectForKey:@"billtransactions"] componentsSeparatedByString:@"@"];
//
//
//            for (int i = 1; i < [temp count]; i++) {
//                NSArray *temp1 = [[temp objectAtIndex:i] componentsSeparatedByString:@"#"];
//                [transactionArray addObject:temp1];
//            }
//
//        }
//        //[self continueFurther:skipbtn];
//
//        [self skip];
//    }
//    else{
//
//        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"No Data Found." delegate:self cancelButtonTitle:@"ok" otherButtonTitles:nil, nil];
//        [alert show];
//
//    }
//}

//OKcancel method handler...
- (void) okcancel:(id)sender {
    
    if ((UIButton*)sender == okbtn) {
        
        [self continuePay1];
    }
    else {
    }
    
    swipe_Status = @"";
    //[self continuePay1];
    
    signView.hidden = YES;
    backview.hidden = YES;
    okbtn.hidden = YES;
    cancelbtn.hidden = YES;
    color.hidden = YES;
    tlabel.hidden = YES;
    BillField.enabled = YES;
    barcodeBtn.enabled = YES;
    
    
    cartTable.userInteractionEnabled = YES;
    skListTable.userInteractionEnabled = YES;
    
    segmentedControl.enabled  = YES;
}


- (void) continuePay2 {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    if(segment_index ==2 && ((payTxt2.text).floatValue < minPayAmt)) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:NSLocalizedString(@"min_payment_not_reached", nil), minPayAmt] message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil, nil];
        [alert show];
        return;
    }
    
    NSString *phoneValue = [phnotext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    NSString *mailValue = [emailtext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    NSString *nameValue = [nametext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    //changed by Srinivasulu on 21/04/2017....
    //reason credit bill added newly on this day....
    
    //         if([deliveryType isEqualToString:@"DD"])
    if (([deliveryType isEqualToString:@"DD"]) || ([deliveryType isEqualToString:@"TA-CB"]) || ([deliveryType isEqualToString:@"DD-CB"])  || (isNewReturnBill && segment_index == 1)) {
        
        //upto here on 21/04/2017....
        
        //changed by Srinivasulu  on 03/05/2017....
        
        //        if ([phoneValue length]>0 && [nameValue length]>0 && [streettext.text length]>0 && [locltytext.text length]>0 && [citytext.text length]>0) {
        
        if (phoneValue.length>0 && nameValue.length>0 && (streettext.text).length>0 && (locltytext.text).length>0 && (citytext.text).length>0 && (doorNoTxt.text).length > 0) {
            
            
            
            //upto here on 03/05/2017....
            
            
            if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                
                [self setSiblings:paymentView enabled:TRUE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            else  if ((emailtext.text).length!=0) {
                
                if([self validateEmail:emailtext.text] == FALSE){
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
                else {
                    
                    //changed by Srinivasulu on 11/08/2017....
                    
                    //                    [self addCustomerDetails];
                    [self addCustomerDetails:nil];
                    
                    //upto here on 11/08/2017....
                }
            }
            else {
                
                //changed by Srinivasulu on 11/08/2017....
                
                //                    [self addCustomerDetails];
                [self addCustomerDetails:nil];
                
                //upto here on 11/08/2017....
            }
            
        }
        
        else {
            
            if (phoneValue.length == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter phone no" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
                
            }
            
            //added by Srinivasulu on 03/05/2017....
            
            else if ((doorNoTxt.text).length == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please, Enter Door No." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
                
            }
            
            
            
            //upto here on 03/05/2017....
            
            else if (nameValue.length == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter user name" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            else if ((streettext.text).length == 0) {
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Pleaes enter street" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            else if ((locltytext.text).length == 0){
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter locality" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else if ((citytext.text).length == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Plese enter city" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else  if (phoneValue.length == 0 && mailValue.length != 0 && nameValue.length != 0){
                
                [self setSiblings:paymentView enabled:FALSE];
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            else if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                
                [self setSiblings:paymentView enabled:TRUE];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            
            
            else  if ((emailtext.text).length!=0) {
                
                if([self validateEmail:emailtext.text] == FALSE){
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
                else {
                    
                    //changed by Srinivasulu on 11/08/2017....
                    
                    //                    [self addCustomerDetails];
                    [self addCustomerDetails:nil];
                    
                    //upto here on 11/08/2017....
                }
            }
        }
    }
    else {
        if (phoneValue.length == 0 && mailValue.length == 0 && nameValue.length == 0) {
            if (segment_index == 2) {
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    //changed by Roja on 07/09/2018....
                    //                                [self populateCardDetailsView];
                    [self populateCardPaymentDetailsView];                }
                else {
                    [self continuePay1];
                }
            }
            else {
                
                
                [self continuePay1];
            }
        }
        else  if (phoneValue.length == 0 && mailValue.length != 0 && nameValue.length != 0){
            
            [self setSiblings:paymentView enabled:FALSE];
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else if(phoneValue.length <= 9 || phoneValue.length >= 12) {
            
            [self setSiblings:paymentView enabled:TRUE];
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        //    else if ([phoneValue length] != 0 && [mailValue length] == 0 && [nameValue length] != 0){
        //        [self setSiblings:paymentView enabled:FALSE];
        //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        [alert release];
        //
        //    }
        
        else  if ((emailtext.text).length!=0) {
            
            if([self validateEmail:emailtext.text] == FALSE){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
            else {
                
                //changed by Srinivasulu on 11/08/2017....
                
                //                    [self addCustomerDetails];
                [self addCustomerDetails:nil];
                
                //upto here on 11/08/2017....
                
            }
        }
        else {
            
            //changed by Srinivasulu on 11/08/2017....
            
            //                    [self addCustomerDetails];
            [self addCustomerDetails:nil];
            
            //upto here on 11/08/2017....
            
        }
    }
}

- (void) continueCreditNotepay {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    //added by Srinivasulu on 17/03/2018....
    
    @try {
        
        for(NSDictionary * tempDic in paymentTransactionArray){
            
            if([[tempDic valueForKey:MODE_OF_PAY] isEqualToString:CREDIT_NOTE]){
                
                [paymentTransactionArray removeObject:tempDic];
            }
        }
        
    } @catch (NSException *exception) {
        
    }
    
    //upto here on 17/03/2018....
    
    
    if ((creditNoteTxt.text).length > 0 && [creditNoteStatusLbl.text containsString:@"Available"]) {
        
        if ((payTxt2.text).floatValue <= (payTxt1.text).floatValue) {
            NSString *phoneValue = [phnotext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            NSString *mailValue = [emailtext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            NSString *nameValue = [nametext.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
            
            typeOfPayment = [[NSMutableString alloc] initWithString:@"Credit Note"];
            
            changeReturnStr = @"0.00";
            totalReceivedAmt = [payTxt2.text copy];
            NSMutableDictionary *transDic = [NSMutableDictionary new];
            [transDic setValue:CREDIT_NOTE forKey:@"modeOfPayment"];
            [transDic setValue:@"" forKey:@"cardType"];
            [transDic setValue:creditNoteTxt.text forKey:@"couponNumber"];
            [transDic setValue:payTxt2.text forKey:@"paidAmount"];
            [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
            [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
            [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
            
            [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
            [transDic setValue:changeReturnStr forKey:CHANGE_RETURN];
            [transDic setValue:totalReceivedAmt forKey:RECEIVED_AMOUNT];
            //added by Srinivasulu on 03/04/2018....
            
            [transDic setValue:CB forKey:TENDER_MODE];
            [transDic setValue:@"2" forKey:TENDER_KEY];
            
            //upto here on 03/04/2018....
            
            [paymentTransactionArray addObject:transDic];
            
            //changed by Srinivasulu on 21/04/2017....
            //reason credit bill added newly on this day....
            
            //         if([deliveryType isEqualToString:@"DD"])
            if (([deliveryType isEqualToString:@"DD"]) || ([deliveryType isEqualToString:@"TA-CB"]) || ([deliveryType isEqualToString:@"DD-CB"])) {
                
                //upto here on 21/04/2017....
                
                //changed by Srinivasulu  on 03/05/2017....
                
                //        if ([phoneValue length]>0 && [nameValue length]>0 && [streettext.text length]>0 && [locltytext.text length]>0 && [citytext.text length]>0) {
                
                if (phoneValue.length>0 && nameValue.length>0 && (streettext.text).length>0 && (locltytext.text).length>0 && (citytext.text).length>0 && (doorNoTxt.text).length > 0) {
                    
                    
                    
                    //upto here on 03/05/2017....
                    
                    
                    if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                        
                        [self setSiblings:paymentView enabled:TRUE];
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    else  if ((emailtext.text).length!=0) {
                        
                        if([self validateEmail:emailtext.text] == FALSE){
                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            [alert show];
                        }
                        else {
                            
                            //changed by Srinivasulu on 11/08/2017....
                            
                            //                    [self addCustomerDetails];
                            [self addCustomerDetails:nil];
                            
                            //upto here on 11/08/2017....
                        }
                    }
                    else {
                        
                        //changed by Srinivasulu on 11/08/2017....
                        
                        //                    [self addCustomerDetails];
                        [self addCustomerDetails:nil];
                        
                        //upto here on 11/08/2017....
                        
                    }
                    
                }
                
                else {
                    
                    if (phoneValue.length == 0) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter phone no" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                        
                    }
                    
                    //added by Srinivasulu on 03/05/2017....
                    
                    else if ((doorNoTxt.text).length == 0) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please, Enter Door No." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                        
                    }
                    
                    
                    
                    //upto here on 03/05/2017....
                    
                    
                    else if (nameValue.length == 0) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter user name" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    else if ((streettext.text).length == 0) {
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Pleaes enter street" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    else if ((locltytext.text).length == 0){
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter locality" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                    }
                    else if ((citytext.text).length == 0) {
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Plese enter city" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                    }
                    else  if (phoneValue.length == 0 && mailValue.length != 0 && nameValue.length != 0){
                        
                        [self setSiblings:paymentView enabled:FALSE];
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    else if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                        
                        [self setSiblings:paymentView enabled:TRUE];
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                    }
                    
                    
                    else  if ((emailtext.text).length!=0) {
                        
                        if([self validateEmail:emailtext.text] == FALSE){
                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            [alert show];
                        }
                        else {
                            
                            //changed by Srinivasulu on 11/08/2017....
                            
                            //                    [self addCustomerDetails];
                            [self addCustomerDetails:nil];
                            
                            //upto here on 11/08/2017....
                        }
                    }
                }
                
                
            }
            else {
                
                if (phoneValue.length == 0 && mailValue.length == 0 && nameValue.length == 0) {
                    [self continuePay1];
                }
                else  if (phoneValue.length == 0 && mailValue.length != 0 && nameValue.length != 0){
                    
                    [self setSiblings:paymentView enabled:FALSE];
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                    
                }
                else if(phoneValue.length <= 9 || phoneValue.length >= 12) {
                    
                    [self setSiblings:paymentView enabled:TRUE];
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                    
                }
                //    else if ([phoneValue length] != 0 && [mailValue length] == 0 && [nameValue length] != 0){
                //        [self setSiblings:paymentView enabled:FALSE];
                //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //        [alert show];
                //        [alert release];
                //
                //    }
                
                else  if ((emailtext.text).length!=0) {
                    
                    if([self validateEmail:emailtext.text] == FALSE){
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                    }
                    else {
                        
                        //changed by Srinivasulu on 11/08/2017....
                        
                        //                    [self addCustomerDetails];
                        [self addCustomerDetails:nil];
                        
                        //upto here on 11/08/2017....
                    }
                }
                else {
                    
                    //changed by Srinivasulu on 11/08/2017....
                    
                    //                    [self addCustomerDetails];
                    [self addCustomerDetails:nil];
                    
                    //upto here on 11/08/2017....
                }
                
            }
            
        }
        else {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Credit Note Value exceeds total bill amount" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        
    }
    else {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please Provide Valid Credit Note" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}

- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event{
    UITextField *resignTextField = (UITextField *)[self.view viewWithTag:111];
    [resignTextField resignFirstResponder];
}





-(void)skip{
    savebtn.tag = 0;
    
    //phnotext.text = @"";
    //emailtext.text = @"";
    //nametext.text = @"";
    // email
    
    NSString *emailStr;
    
    if(savebtn.tag == 1 || savebtn.tag == 2){
        emailStr = emailtext.text;
        // savebtn.tag = 0;
    }else{
        emailStr = emailtext.text;
        
        mailView.hidden = YES;
        if (mailView.subviews){
            for (UIView *subview in mailView.subviews) {
                [subview removeFromSuperview];
            }
        }
    }
    if (emailStr.length!= 0) {
        
        if ([self validateEmail:emailStr]) {
            
            // get the sender credentials from database ..
            NSString *emailText = NULL;
            NSString *password = NULL;
            NSString *mailHost = NULL;
            //NSString *portNumber = NULL;
            
            NSString* dbPath = [DataBaseConnection connection:@"RetailerConfigDataBase.sqlite"];
            
            if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
                
                const char *sqlStatement = "select * from EmailCredentials";
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        emailText = @((char *)sqlite3_column_text(selectStmt, 0));
                        password = @((char *)sqlite3_column_text(selectStmt, 1));
                        mailHost = @((char *)sqlite3_column_text(selectStmt, 2));
                        //portNumber = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 3)];
                    }
                    sqlite3_finalize(selectStmt);
                }
            }
            
            selectStmt = nil;
            sqlite3_close(database);
            
            if (emailText != NULL || password != NULL || mailHost != NULL) {
                
                HUD.labelText = @"Sending Mail..";
                [HUD setHidden:YES];
                
                //                SKPSMTPMessage *testMsg = [[SKPSMTPMessage alloc] init];
                //                testMsg.fromEmail = emailText;
                //                testMsg.toEmail = emailStr;
                //
                //                testMsg.relayHost = mailHost;
                //                testMsg.requiresAuth = YES;
                //
                //                if (testMsg.requiresAuth) {
                //                    testMsg.login = emailText;
                //                    testMsg.pass= password;
                //
                //                }
                //                //testMsg.subject = @"This is mail from Omni Retailer ..";
                //                testMsg.subject = @"Bill Status";
                //
                //
                //
                //                NSArray *arry = [emailText componentsSeparatedByString:@"@"];
                //                if ([[arry objectAtIndex:1] isEqualToString:@"technolabssoftware.com"]) {
                //                    testMsg.wantsSecure = NO;
                //                }
                //                else{
                //                    testMsg.wantsSecure = YES;
                //                }
                //                testMsg.delegate = self;
                //
                //                //email contents
                //
                //                NSString * bodyMessage = [NSString stringWithFormat:@"%@",[self emailBill]];
                //                NSDictionary *plainPart = [NSDictionary dictionaryWithObjectsAndKeys:@"text/html",kSKPSMTPPartContentTypeKey,
                //                                           bodyMessage,kSKPSMTPPartMessageKey,@"8bit",kSKPSMTPPartContentTransferEncodingKey,nil];
                //
                //                testMsg.parts = [NSArray arrayWithObjects:plainPart,nil];
                //
                //                [testMsg send];
                
                //                MCOSMTPSession *smtpSession = [[MCOSMTPSession alloc] init];
                //                smtpSession.hostname = mailHost;
                //                smtpSession.port = 465;
                //                smtpSession.username = emailText;
                //                smtpSession.password = password;
                //                smtpSession.authType = MCOAuthTypeSASLPlain;
                //                smtpSession.connectionType = MCOConnectionTypeTLS;
                //                [smtpSession setCheckCertificateEnabled:NO];
                //
                //                NSData *rfc822Data = NULL;
                //
                //                MCOMessageBuilder *builder = [[MCOMessageBuilder alloc] init];
                //                MCOAddress *from = [MCOAddress addressWithMailbox:emailText];
                //                MCOAddress *to = [MCOAddress addressWithMailbox:emailStr];
                //                [[builder header] setFrom:from];
                //                [[builder header] setTo:@[to]];
                //                [[builder header] setSubject:@"Bill Status"];
                //
                //                NSData *imgdata = UIImagePNGRepresentation([UIImage imageNamed:@"logo_email.png"]);
                //
                //                MCOAttachment *attachment = [MCOAttachment attachmentWithData:imgdata filename:@"BillStatus"];
                //                NSString *uuuid = [[NSUUID UUID] UUIDString];
                //                [attachment setContentID:uuuid];
                //                [attachment setInlineAttachment:YES];
                //                [builder addRelatedAttachment:attachment];
                //
                //
                //                [builder setHTMLBody:[self emailBill:uuuid]];
                //                rfc822Data = [builder data];
                //
                //                MCOSMTPSendOperation *sendOperation =
                //                [smtpSession sendOperationWithData:rfc822Data];
                //                [sendOperation start:^(NSError *error) {
                //                    if(error) {
                //                        NSLog(@"Error sending email: %@", error);
                //                        [HUD hide:YES];
                //                        [HUD release];
                //                        [self messageFailed];
                //                    }
                //
                //                    else {
                //                        [self messageSent];
                //                    }
                //                }];
                
            }
            else {
                
                //                UILabel *label1 = [[UILabel alloc] init] ;
                //                label1.text = @"Please configure \nSender Mail";
                //                label1.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                //                label1.backgroundColor = [UIColor clearColor];
                //                label1.numberOfLines = 2;
                //                label1.textAlignment = NSTextAlignmentCenter;
                //                label1.textColor = [UIColor blackColor];
                //
                //                mailView.hidden = NO;
                //
                //                //[self setSiblings:mailView enabled:TRUE];
                //                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                //                    label1.frame = CGRectMake(0, 10, 530, 180);
                //                    mailView.frame = CGRectMake(110, 400, 530, 190);
                //                }
                //                else {
                //                    label1.frame = CGRectMake(0, 10, 220, 70);
                //                    mailView.frame = CGRectMake(50, 150, 220, 80);
                //                }
                //
                //                [mailView addSubview:label1];
                //
                //                aTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(runScheduledTask:) userInfo:@"mailView" repeats:NO];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please configure \n Sender mail" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                
            }
            
        }
        else {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"VALID Email - ID" message:@"Please Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
    }
    
    // [self continuePay1];
}
-(NSArray *)prepareDenominationString:(NSString *)total{
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    
    NSMutableArray *tempArr = [[NSMutableArray alloc]init];
    NSArray *keys = @[@"denomination",@"paidDenominationNo",@"transactionId",@"billId",@"billDate",@"paidAmount",@"returnAmount",@"returnDenominationNo"];
    @try {
        
        for (int i=0; i<denominationDic.allKeys.count; i++) {
            
            
            NSArray *objects = @[denominationDic.allKeys[i],[denominationDic valueForKey:denominationDic.allKeys[i]],@"",@"",currentdate,[NSString stringWithFormat:@"%.2f",[denominationDic.allKeys[i] floatValue]*[[denominationDic valueForKey:denominationDic.allKeys[i]] intValue]],@"0.00",@"0"];
            NSDictionary *dic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            [tempArr addObject:dic];
            
        }
        for (int i=0; i<denominationCoinDic.allKeys.count; i++) {
            
            
            NSArray *objects = @[denominationCoinDic.allKeys[i],[denominationCoinDic valueForKey:denominationCoinDic.allKeys[i]],@"",@"",currentdate,[NSString stringWithFormat:@"%.2f",[denominationCoinDic.allKeys[i] floatValue]*[[denominationCoinDic valueForKey:denominationCoinDic.allKeys[i]] intValue]],@"0.00",@"0"];
            NSDictionary *dic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            [tempArr addObject:dic];
            
        }
        for (int i=0; i<returnDenominationDic.allKeys.count; i++) {
            
            NSArray *objects = @[returnDenominationDic.allKeys[i],@"0",@"",@"",currentdate,@"0.00",[NSString stringWithFormat:@"%.2f",[returnDenominationDic.allKeys[i] floatValue]*[[returnDenominationDic valueForKey:returnDenominationDic.allKeys[i]] intValue]], [returnDenominationDic valueForKey:returnDenominationDic.allKeys[i]]];
            NSDictionary *dic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            [tempArr addObject:dic];
            
        }
        
        for (int i=0; i<returnDenominationCoinDic.allKeys.count; i++) {
            
            NSArray *objects = @[returnDenominationCoinDic.allKeys[i],@"0",@"",@"",currentdate,@"0.00",[NSString stringWithFormat:@"%.2f",[returnDenominationCoinDic.allKeys[i] floatValue]*[[returnDenominationCoinDic valueForKey:returnDenominationCoinDic.allKeys[i]] intValue]], [returnDenominationCoinDic valueForKey:returnDenominationCoinDic.allKeys[i]]];
            NSDictionary *dic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            [tempArr addObject:dic];
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    
    
    
    return tempArr;
    
}

/**
 * @description  Here we saving object into defaults....
 * @date
 * @method       continuePay1
 * @author
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 23/08/2017....
 * @reason       added comments and exception handling and change the defaults as local varible  && some more change are done before itself....
 *
 * @verified By
 * @verified On
 *
 */

//continuePay1 handler...
- (void) continuePay1 {
    
    
    //commented by Srinivasulu on 23/08/2017...
    //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
    //    defaults = [NSUserDefaults standardUserDefaults];
    
    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
    
    //upto here on 23/08/2017....
    
    
    // isOfflineService = YES;
    
    //changed by Srinivasulu on 05/08/2017....
    
    //    if ( (eraseButton.tag != 1) || ((eraseButton.tag != 1) && (segment_index != 3)))
    //    payBtn.enabled = false;
    
    //changed by Srinivasulu on 16/08/2017....
    
    if ((eraseButton.tag != 1) || ((segment_index !=3) && (eraseButton.tag != 1))) {
        payBtn.enabled = false;
    }
    
    //upto here on 16/08/2017....≤
    
    //    HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
    //    [self.navigationController.view addSubview:HUD];
    //    // Regiser for HUD callbacks so we can remove it from the window at the right time
    //    HUD.delegate = self;
    //    HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
    //    HUD.mode = MBProgressHUDModeCustomView;
    //    // Show the HUD
    //    [HUD show:YES];
    HUD.labelText = @"Please Wait..";
    [HUD setHidden:NO];
    
    addCustView.hidden = YES;
    
    paymentView.hidden = YES;
    
    couponView.hidden = YES;
    
    if ([(self.view).subviews containsObject:denominationView]) {
        
        [denominationView setHidden:YES];
    }
    if ([(self.view).subviews containsObject:cardDetailsView]){
        for (UIView *subview in cardDetailsView.subviews) {
            
            [subview removeFromSuperview];
        }
        [cardDetailsView setHidden:YES];
    }
    
    if (paymentView.subviews){
        for (UIView *subview in paymentView.subviews) {
            
            [subview removeFromSuperview];
        }
    }
    if ([(self.view).subviews containsObject:couponView]){
        for (UIView *subview in couponView.subviews) {
            [subview removeFromSuperview];
        }
    }
    [self networkSwitch];
    
    if ([[defaults valueForKey:BUSSINESS_DATE] isKindOfClass:[NSNull class]] || [defaults valueForKey:BUSSINESS_DATE] == nil) {
        NSString *currentDate = [WebServiceUtility getCurrentDate];
        [defaults setValue:[currentDate componentsSeparatedByString:@" "][0] forKey:BUSSINESS_DATE];
        
        //added by Srinivasulu on 20/09/2017....
        
        [defaults setValue:@"0000" forKey:LAST_BILL_COUNT];
        
        
        //upto here on 20/09/2017....
        
    }
    else  {
        
        NSString *business_date = [defaults valueForKey:BUSSINESS_DATE];
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        // this is imporant - we set our input date format to match our input string
        // if format doesn't match you'll get nil from your string, so be careful
        dateFormatter.dateFormat = @"dd/MM/yyyy";
        NSDate *dateFromString = [[NSDate alloc] init];
        dateFromString = [dateFormatter dateFromString:business_date];
        
        NSDate *today = [NSDate date];
        NSString* currentdate = [dateFormatter stringFromDate:today];
        NSDate *now = [[NSDate alloc] init];
        now = [dateFormatter dateFromString:currentdate];
        
        //commented by Srinivasulu on 18/10/2017....
        //reason -- Issue araised by Sir..  It will not come under scope....
        
        //        if ([now compare:dateFromString] == NSOrderedDescending) {
        //
        //            [defaults setValue:[[[WebServiceUtility getCurrentDate] componentsSeparatedByString:@" "] objectAtIndex:0] forKey:BUSSINESS_DATE];
        //
        //            //added by Srinivasulu on 20/09/2017....
        //
        //            [defaults setValue:@"0000" forKey:LAST_BILL_COUNT];
        //
        //            //upto here on 20/09/2017....
        //        }
        
        //upto here on 18/10/2017....
        
    }
    [defaults synchronize];
    
    
    if ((payTxt1.text).floatValue <= (netPayLblVal.text).floatValue) {
        
        @try {
            
            NSString* currentdate = [WebServiceUtility getCurrentDate];
            
            NSString *paymentType;
            NSString *MOP;
            
            NSString *totalPrice;
            NSString *billDue;
            totalPrice = payTxt2.text;
            
            
            if ([typeOfPayment isEqualToString:@"Credit/Debit"]) {
                if ([cardPaymentSelection isEqualToString:@"POS"]) {
                    
                    paymentType = @"-";
                    
                }
                else {
                    paymentType = @"Card";
                    
                }
                MOP = @"Card";
            }
            else if ([typeOfPayment isEqualToString:@"Food Coupons"]) {
                paymentType = @"";
                MOP = [foodCouponTypeStr copy];
            }
            else{
                paymentType = @"";
                //  paymentType = @"Cash";
                MOP = @"Cash";
            }
            
            
            if(swipe_Status.length >= 1) {
                payTxt2.text = [swipe_Status copy];
            }
            
            int i = arc4random() % 1000;
            
            NSString *trasactionId = [NSString stringWithFormat:@"%@%d%d",@"C",arc4random(),i];
            
            trasactionId = [trasactionId stringByReplacingOccurrencesOfString:@"-" withString:@""];
            
            if (trasactionId.length != 15) {
                trasactionId = [trasactionId stringByAppendingString:@"0"];
            }
            
            [self setItemPromoFlags];
            
            NSString *getBillData = [self saveBill];
            
            //added by Srinivasulu on 12/01/2018....uncommented by Srinivasulu  on 17/03/2018.. It will the remove duplicate transactions.. completly
            //commented by Srinivasulu because this is handled previous code itself. I see it later.... cash or card transactions will be added only one time....
            
            @try {
                NSMutableArray * tempArr = [paymentTransactionArray mutableCopy];
                
                if([paymentTransactionArray count])
                    [paymentTransactionArray removeAllObjects];
                
                for(NSDictionary  * tempDic in tempArr){
                    billingErrorStatus = FALSE;
                    
                    if(!(([[tempDic valueForKey:MODE_OF_PAY] caseInsensitiveCompare:@"Cash"] == NSOrderedSame) || ([[tempDic valueForKey:MODE_OF_PAY] caseInsensitiveCompare:@"Card"] == NSOrderedSame) || ([[tempDic valueForKey:MODE_OF_PAY] caseInsensitiveCompare:@"Credits"] == NSOrderedSame))){
                        [paymentTransactionArray addObject:tempDic];
                    }
                }
            } @catch (NSException *exception) {
                
            }
            
            //upto here  on 12/01/2018....
            //upto here  on 12/01/2018 ....
            
            
            //added by Srinivasulu on 12/07/2017....
            
            for(int i = 0; i < productInfoArr.count; i++){
                
                NSMutableDictionary * tempDic = productInfoArr[i];
                
                if( ([self isDiscountedItemAt:i] && (discTaxation.length > 0)) && (! (discCalcOn.length > 0 && [discCalcOn caseInsensitiveCompare:@"Original Price"] == NSOrderedSame))){
                    
                    if (discTaxation.length > 0 && [discTaxation caseInsensitiveCompare:@"Inclusive"] == NSOrderedSame) {
                        
                        tempDic[TAX_INCLUSIVE] = @NO;
                    }
                    else{
                        
                        tempDic[TAX_INCLUSIVE] = @NO;
                    }
                    
                }
                else if(taxTypeArr.count > i){
                    
                    if([taxTypeArr[i] integerValue]){
                        
                        tempDic[TAX_INCLUSIVE] = @NO;
                    }
                    else{
                        
                        tempDic[TAX_INCLUSIVE] = @YES;
                    }
                }
                else{
                    
                    tempDic[TAX_INCLUSIVE] = @YES;
                }
                
                productInfoArr[i] = tempDic;
            }
            
            //upto here on 12/07/2017....
            
            
            //changed by Srinivasulu on 27/09/2017....
            
            //            NSMutableArray *itemArray = [WebServiceUtility getBillingItemsFrom:getBillData itemDiscountArr:itemDiscountArr itemDiscountDescArr:itemDiscountDescArr offerPriceArray:onlineOfferDiscountPriceArr dealPriceArray:onlineDealDiscountPriceArr itemScanCode:itemScanCode turnOverOffer:turnoverofferDiscount totalPriceBeforeTurnOver:totalBeforeTurnOver salesPersonInfo:employeeDic manufacturedItems:manufacturedItemsArr packagedItemsArr:isPackagedItem productInfoArr:productInfoArr];
            
            NSMutableArray *itemArray = [WebServiceUtility getBillingItemsFrom:getBillData itemDiscountArr:itemDiscountArr itemDiscountDescArr:itemDiscountDescArr offerPriceArray:onlineOfferDiscountPriceArr dealPriceArray:onlineDealDiscountPriceArr itemScanCode:itemScanCode turnOverOffer:turnoverofferDiscount totalPriceBeforeTurnOver:totalBeforeTurnOver salesPersonInfo:employeeDic manufacturedItems:manufacturedItemsArr packagedItemsArr:isPackagedItem productInfoArr:productInfoArr otherDiscountValue:otherDiscountValue];
            
            //upto here on 27/09/2017....
            
            NSArray *taxDetails = [WebServiceUtility getBillingItemsTaxDetails:itemArray taxArr:taxArr currentDate:currentdate offerPriceArray:onlineOfferDiscountPriceArr dealPriceArray:onlineDealDiscountPriceArr ];
            
            NSMutableArray * campaignsArr = [WebServiceUtility getBillingItemsCampaignsInfo:getBillData offerPriceArray:onlineOfferDiscountPriceArr dealPriceArray:onlineDealDiscountPriceArr dealIdsArr:appliedDealIdsArr offerIdsArr:appliedOfferIdsArr turnOverOffer:turnoverofferDiscount totalPriceBeforeTurnOver:totalBeforeTurnOver];
            
            NSMutableArray *billingItemTaxDetails = [WebServiceUtility getBillingItemTaxes:itemArray taxArr:taxArr];
            
            //added by Srinivasulu on 26/07/2017....
            
            @try {
                
                if(turnOverOfferIdsDic.allKeys)
                    for(NSString * idStr in turnOverOfferIdsDic.allKeys){
                        
                        NSMutableDictionary * itemDic = [NSMutableDictionary new];
                        [itemDic setValue:idStr forKey:@"discountId"];
                        [itemDic setValue:@"turnOverOffer" forKey:@"discountType"];
                        
                        [itemDic setValue:@0.0f forKey:@"itemPrice"];
                        [itemDic setValue:[turnOverOfferIdsDic valueForKey:idStr] forKey:@"discountPrice"];
                        
                        [campaignsArr addObject:itemDic];
                    }
                
                //added by Srinivasulu on 20/04/2018....
                
                if(itemsFromCartArr.count && itemsFromCartArr != nil)
                    [itemsFromCartArr removeAllObjects];
                
                itemsFromCartArr = itemArray;
                //upto here on 20/04/2018....
                
            } @catch (NSException *exception) {
                
            }
            //upto here on 26/07/2017....
            
            //added by Srinivasulu on  08/06/2017....
            
            for(int i = 0; i < itemArray.count; i++){
                
                NSMutableDictionary * itemDic = itemArray[i];
                
                float itemTaxValue = 0.00;
                float itemTaxRateValue = 0.00;
                
                
                int defaultItemNo = i;
                
                for( NSDictionary * itemLevelTaxDic in billingItemTaxDetails ){
                    
                    //added by Srinivasulu on 17/03/2018....
                    
                    if (([itemLevelTaxDic.allKeys containsObject:ITEM_NUMBER_IN_LIST] && ![itemLevelTaxDic[ITEM_NUMBER_IN_LIST] isKindOfClass:[NSNull class]])) {
                        
                        defaultItemNo = [itemLevelTaxDic[ITEM_NUMBER_IN_LIST] intValue] ;
                    }
                    
                    if(([[itemDic valueForKey:SKU_ID] isEqualToString:[itemLevelTaxDic valueForKey:SKU_ID]]) && ([[itemDic valueForKey:PLU_CODE] isEqualToString:[itemLevelTaxDic valueForKey:@"plu_code"]]) &&  (i == defaultItemNo)){
                        
                        //                        if(([[itemDic valueForKey:SKU_ID] isEqualToString:[itemLevelTaxDic valueForKey:SKU_ID]]) && ([[itemDic valueForKey:PLU_CODE] isEqualToString:[itemLevelTaxDic valueForKey:@"plu_code"]])){
                        
                        //upto here on 17/03/2018....
                        
                        
                        itemTaxValue += [ [itemLevelTaxDic valueForKey:@"tax_value"] floatValue];
                        
                        itemTaxRateValue += [[self checkGivenValueIsNullOrNil:[itemLevelTaxDic valueForKey:@"tax_rate"] defaultReturn:@"0.00"] floatValue];
                    }
                    
                }
                
                
                
                if(![[self checkGivenValueIsNullOrNil:[itemDic valueForKey:TAX_INCLUSIVE] defaultReturn:@"0"] integerValue]){
                    
                    [itemDic setValue:[NSString stringWithFormat:@"%.2f",([[itemDic valueForKey:ITEM_TOTAL_PRICE] floatValue] + itemTaxValue)] forKey:ITEM_TOTAL_PRICE];
                }
                
                
                [itemDic setValue:[NSString stringWithFormat:@"%.2f",itemTaxValue] forKey:TAX_COST];
                [itemDic setValue:[NSString stringWithFormat:@"%.2f",itemTaxRateValue] forKey:TAX_RATE];
                
                itemArray[i] = itemDic;
                
            }
            
            //upto here  on 08/06/2017....
            
            
            //changed by Srinivasulu on 21/04/2017....
            //reason credit bill added newly on this day....
            
            if ([deliveryType isEqualToString:@"TA-CB"]) {
                
                if (finalBillDue.floatValue > 0 ){
                    
                    delStatus = @"TA-CB-Open";
                }
                else{
                    
                    delStatus = @"TA-CB-Completed";
                }
                
                if (segment_index == 3) {
                    
                    //                    delStatus = @"TA-CB-Draft";
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"credit_bill_will_not_be_saved_as_draft_", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
                    [alert show];
                    
                    [HUD setHidden:YES];
                    return;
                }
                
                if (eraseButton.tag == 1) {
                    //                        delStatus = TA_CANCEL_STATUS;
                    eraseButton.tag = 0;
                    [HUD setHidden:YES];
                    return;
                }
                
            }
            else if([deliveryType isEqualToString:@"DD-CB"]){
                
                if (finalBillDue.floatValue > 0 ){
                    
                    delStatus = @"DD-CB-Open";
                }
                else{
                    
                    delStatus = @"DD-CB-Completed";
                }
                
                if (segment_index == 3) {
                    
                    //                    delStatus = @"DD-CB-Draft";
                    
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"credit_bill_will_not_be_saved_as_draft_", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
                    [alert show];
                    
                    [HUD setHidden:YES];
                    return;
                }
                
                
                if (eraseButton.tag == 1) {
                    //                        delStatus = HD_CANCEL_STATUS;
                    eraseButton.tag = 0;
                    [HUD setHidden:YES];
                    
                    return;
                }
                
            }
            
            //                if ([deliveryType isEqualToString:@"TA"]) {
            
            else if ([deliveryType isEqualToString:@"TA"]) {
                
                //upto here on 21/04/2017....
                
                
                
                if (finalBillDue.floatValue > 0 && segment_index!=3) {
                    
                    delStatus = @"TA-Pending";
                }
                else if (segment_index == 3) {
                    
                    delStatus = @"TA-Draft";
                }
                else {
                    
                    delStatus = @"TA-Completed";
                }
                
                if (eraseButton.tag == 1) {
                    //changed by Srinivasulu on 02/02/2018....
                    //                    delStatus = TA_CANCEL_STATUS;
                    delStatus = @"TA-Draft";
                    //upto here on 02/02/2018....
                }
            }
            else {
                
                if ([deliveryType isEqualToString:@"DD"]) {
                    
                    if (finalBillDue.floatValue > 0) {
                        
                        delStatus = @"HD-PP-Pending";
                    }
                    else if (segment_index == 3) {
                        
                        delStatus = @"HD-PP-Draft";
                    }
                    else {
                        delStatus = @"HD-PP-ToBeDelivered";
                    }
                    if (eraseButton.tag == 1) {
                        
                        //changed by Srinivasulu on 02/02/2018....
                        //                    delStatus = HD_CANCEL_STATUS;
                        delStatus = @"HD-PP-Draft";
                        //upto here on 02/02/2018....
                    }
                    
                }
                else {
                    
                    if (segment_index == 3) {
                        
                        delStatus = @"HD-COD-Draft";
                    }
                    if (eraseButton.tag == 1) {
                        
                        //changed by Srinivasulu on 02/02/2018....
                        //                    delStatus = HD_CANCEL_STATUS;
                        delStatus = @"HD-PP-Draft";
                        //upto here on 02/02/2018....
                    }
                    else {
                        delStatus = @"HD-COD-ToBeDelivered";
                    }
                }
                
            }
            
            // showing the HUD ..
            HUD.labelText = @"Placing Bill..";
            
            [HUD setHidden:NO];
            
            if ([dealoroffersTxt.text isEqualToString:@""]) {
                dealoroffersTxt.text = @"0.00";
            }
            
            
            billDue = finalBillDue;
            
            if(swipe_Status.length >= 1) {
                
                totalPrice = [NSString stringWithFormat:@"%d",(netPayLblVal.text).intValue - [[swipe_Status copy] intValue]];
                billDue = [swipe_Status copy];
            }
            if([billDue isEqualToString:@"null"]) {
                payTxt2.text = @"0";
            }
            
            //modified on 24/10/15....
            
            float totalDiscount = 0;
            int itemCount = 0;
            for (NSNumber * disc in itemDiscountArr) {
                
                //changed by Srinivasulu on 21/11/2017....
                //reason -- values has to be saved in decimals....
                if([isVoidedArray count] > itemCount)
                    if(![isVoidedArray[itemCount] boolValue])
                        totalDiscount += [NSString stringWithFormat:@"%.2f", disc.floatValue].floatValue;
                itemCount++;
                //upto here on 21/11/2017....
            }
            
            //commneted and added by Srinivasulu on 18/05/2018....
            
            //            totalDiscount += [dealoroffersTxt.text floatValue] + [otherDiscountTxt.text floatValue];
            totalDiscount += (dealoroffersTxt.text).floatValue + (otherDiscountValueTxt.text).floatValue;
            
            //upto here on 18/05/2018....
            
            
            
            if ((returnedval.text).floatValue!=0) {
                
                changeReturnStr = [NSString stringWithFormat:@"%.2f",(returnedval.text).floatValue];
                totalReceivedAmt = [NSString stringWithFormat:@"%.2f",(paidVal.text).floatValue];
                
                //added by Srinivasulu on 24/08/2017...
                
                if((returnAmountTxt != nil) && [typeOfPayment isEqualToString:@"Cash"]){
                    payTxt2.text = [NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue];
                    
                    changeReturnStr = [NSString stringWithFormat:@"%.2f",((paidVal.text).floatValue-(payTxt2.text).floatValue)];
                    
                }
                //upto here on24/08/2017....
            }
            else {
                if (((paidVal.text).floatValue-(netPayLblVal.text).floatValue) > 0) {
                    
                    changeReturnStr = [NSString stringWithFormat:@"%.2f",((paidVal.text).floatValue-(netPayLblVal.text).floatValue)];
                    totalReceivedAmt = [NSString stringWithFormat:@"%.2f",(paidVal.text).floatValue];
                    
                    //added by Srinivasulu on 24/08/2017...
                    
                    if((returnAmountTxt != nil) && [typeOfPayment isEqualToString:@"Cash"])
                        payTxt2.text = [NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue];
                    
                    //upto here on24/08/2017....
                    
                }
                else {
                    changeReturnStr = @"0.00";
                    totalReceivedAmt = [NSString stringWithFormat:@"%.2f",(payTxt2.text).floatValue];
                    if ([billStatusLabel.text isEqualToString:@"Change Return"]) {
                        changeReturnStr = billStatusLabelValue.text;
                        payTxt2.text = [NSString stringWithFormat:@"%.2f",(payTxt2.text).floatValue - (billStatusLabelValue.text).floatValue];
                    }
                }
            }
            
            //added by Srinivasulu on 24/08//2017....
            
            
            
            
            
            //added by Srinivasulu on 24/08/2017...
            
            //            if ([typeOfPayment isEqualToString:@"Cash"]) {
            //
            //
            //                if(returnAmountTxt != nil){
            //
            //                    if (([paidVal.text floatValue]-[netPayLblVal.text floatValue])>0) {
            //
            //                        changeReturnStr = [NSString stringWithFormat:@"%.2f",([paidVal.text floatValue]-[netPayLblVal.text floatValue])];
            //                        totalReceivedAmt = [NSString stringWithFormat:@"%.2f",[paidVal.text floatValue]];
            //
            //                        payTxt2.text = [NSString stringWithFormat:@"%.2f",[netPayLblVal.text floatValue]];
            //                    }
            //                    else {
            //                        changeReturnStr = @"0.00";
            //                        totalReceivedAmt = [NSString stringWithFormat:@"%.2f",[payTxt2.text floatValue]];
            //                        if ([billStatusLabel.text isEqualToString:@"Change Return"]) {
            //                            changeReturnStr = billStatusLabelValue.text;
            //
            //
            //                            if([payTxt2.text floatValue])
            //                            payTxt2.text = [NSString stringWithFormat:@"%.2f",[payTxt2.text floatValue] - [billStatusLabelValue.text floatValue]];
            //                        }
            //                    }
            //
            //                }
            //            }
            
            
            //upto here on24/08/2017....
            
            
            if ([MOP isEqualToString:@"Card"]){
                changeReturnStr = @"0.00";
                //                totalReceivedAmt = @"0.00";
                
            }
            
            //changed by Srinivasulu on 25/04/2017....
            //            if ((![typeOfPayment isEqualToString:@"Food Coupons"] && ![typeOfPayment isEqualToString:@"Credit Note"])
            //                ) {
            
            
            //added and commented by Srinivasulu on 27/04/2017....
            
            //            if ((![typeOfPayment isEqualToString:@"Food Coupons"] && ![typeOfPayment isEqualToString:@"Credit Note"]) && ([finalBillDue floatValue] == [netPayLbl.text floatValue])) {
            Boolean isTableOrderBill = false;
            
            if(salesOrderBookingTypeStr != nil || isOrderedBill)
                if([salesOrderBookingTypeStr length] || isOrderedBill)
                    isTableOrderBill = true;
            
            //added by Srinivasulu on 27/03/2018....
            if(refreshOnlineOrderBtn.tag == 2  || isTableOrderBill)
                
                if (![typeOfPayment isEqualToString:@"Food Coupons"] && ![typeOfPayment isEqualToString:@"Credit Note"] && ![MOP isEqualToString:@"Card"]) {
                    
                    
                    //upto here on 25/04/2017.....
                    
                    if (!billingErrorStatus && ([payTxt2.text floatValue] > 0)) {
                        NSMutableDictionary *transDic = [NSMutableDictionary new];
                        [transDic setValue:MOP forKey:@"modeOfPayment"];
                        [transDic setValue:@"" forKey:@"couponNumber"];
                        [transDic setValue:payTxt2.text forKey:@"paidAmount"];
                        [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                        [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                        [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                        
                        [transDic setValue:currentdate forKey:@"dateTime"];
                        [transDic setValue:changeReturnStr forKey:CHANGE_RETURN];
                        [transDic setValue:totalReceivedAmt forKey:RECEIVED_AMOUNT];
                        
                        
                        
                        //added by srinivasulu on 24/11/2017....
                        
                        if(billPaymentTendeInfoDic != nil && billPaymentTendeInfoDic.allKeys.count){
                            
                            //TENDER_NAME -- COUNTRY_CODE --  TENDER_CODE --  TENDER_KEY
                            
                            if ([MOP isEqualToString:@"Card"]){
                                
                                paymentType = [self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""];
                            }
                            
                            [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""] forKey:TENDER_NAME];
                            [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:COUNTRY_CODE] defaultReturn:@""] forKey:COUNTRY_CODE];
                            [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_CODE] defaultReturn:@""] forKey:TENDER_MODE];
                            [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_KEY] defaultReturn:@""] forKey:TENDER_KEY];
                        }
                        
                        [transDic setValue:paymentType forKey:@"cardType"];
                        
                        
                        //upto here on 24/11/2017....
                        
                        [paymentTransactionArray addObject:transDic];
                    }
                    
                    //added by Srinivasulu on 26/04/2017....
                    //changed by Srinivasulu on 13/07/2017....
                    
                    if(([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && ((((payTxt2.text).floatValue <= 0) || ((finalBillDue.floatValue == (netPayLblVal.text).floatValue))) && ([typeOfPayment isEqualToString:@"Cash"]))){
                        if(paymentTransactionArray.count)
                            [paymentTransactionArray removeLastObject];
                        
                    }
                    
                    //upto here on 26/04/2017....
                    
                    //written by Srinivasulu on 12/03/2018....  reason may help us in removing the duplicates....
                    //commented by Srinivasulu because it may result it only issue in payment....
                    //                billingErrorStatus = true;
                    
                }
            
            //added on 06/09/2018....
            if([MOP isEqualToString:@"Card"]){
                
                for(NSDictionary * tempDic in addCardPaymentDetailsArr)
                    [paymentTransactionArray addObject:tempDic];
            }
            //upto here on 06/09/2018....
            
            
            if (eraseButton.tag == 1) {
                
                paymentTransactionArray = [NSMutableArray new];
                if (billIDValue.length > 0) {
                    billIDValue = @"";
                }
            }
            
            
            //modified by sonali
            
            //            if ([billIDValue length] > 0) {
            //                billIDValue = @"";
            //            }
            
            
            NSString *time = [NSDateFormatter localizedStringFromDate:[NSDate date] dateStyle:NSDateFormatterShortStyle timeStyle:NSDateFormatterFullStyle];
            NSArray *str = [time componentsSeparatedByString:@" "];
            NSString *date = [str[0] componentsSeparatedByString:@","][0];
            // "appName" key --added by roja on 17/07/2019
            NSArray *headerKeys = @[ACCESS_KEY, CUSTOMER_ID,APPLICATION_NAME,USERNAME,CORRELATION_ID,DATE,@"appName"];
            // "Outlet" key --added by roja on 17/07/2019
            NSArray *headerObjects = @[custID,custID,APPLICATION_NAME_VALUE,mail_,@"-",date,@"Outlet"];
            
            NSDictionary *requestDictionary = [NSDictionary dictionaryWithObjects:headerObjects forKeys:headerKeys];
            
            NSArray *denomination_req = [self prepareDenominationString:totalPrice];
            NSLog(@"%@",[defaults valueForKey:BUSSINESS_DATE]);
            NSString *businessDate = [NSString stringWithFormat:@"%@%@%@",[defaults valueForKey:BUSSINESS_DATE],@" ",[currentdate componentsSeparatedByString:@" "][1]];
            
            NSString *serialBillId = @"";
            if ([custID caseInsensitiveCompare:@"CID8995438"] == NSOrderedSame) {
                
                if ([defaults valueForKey:kLatestSerialBillId] != nil) {
                    serialBillId = [NSString stringWithFormat:@"%lld",[[defaults valueForKey:kLatestSerialBillId] longLongValue] + 1];
                }
                
            }
            //added by Srinivasulu on 06/07/2017....
            else{
                
                serialBillId = billCountLblVal.text;
                
                if ([defaults valueForKey:LAST_BILL_COUNT] != nil) {
                    serialBillId = [NSString stringWithFormat:@"%i", ([[defaults valueForKey:LAST_BILL_COUNT] intValue] + 1)];
                    
                    if( [[defaults valueForKey:LAST_BILL_COUNT] integerValue] < 9)
                        serialBillId = [NSString stringWithFormat:@"%@%i", @"000", ([[defaults valueForKey:LAST_BILL_COUNT] intValue] + 1)];
                    
                    else if([[defaults valueForKey:LAST_BILL_COUNT] integerValue] < 99)
                        serialBillId = [NSString stringWithFormat:@"%@%i", @"00", ([[defaults valueForKey:LAST_BILL_COUNT] intValue] + 1)];
                    
                    else if([[defaults valueForKey:LAST_BILL_COUNT] integerValue] < 999)
                        serialBillId = [NSString stringWithFormat:@"%@%i", @"0", ([[defaults valueForKey:LAST_BILL_COUNT] intValue] + 1)];
                    
                }
                else{
                    
                    if((billCountLblVal.text).length <= 4){
                        
                        if( (billCountLblVal.text).integerValue < 9)
                            serialBillId = [NSString stringWithFormat:@"%@%i", @"000", ((billCountLblVal.text).intValue + 1)];
                        
                        else if((billCountLblVal.text).integerValue < 99)
                            serialBillId = [NSString stringWithFormat:@"%@%i", @"00", ((billCountLblVal.text).intValue + 1)];
                        
                        else if((billCountLblVal.text).integerValue < 999)
                            serialBillId = [NSString stringWithFormat:@"%@%i", @"0", ((billCountLblVal.text).intValue + 1)];
                        
                    }
                    
                }
                
                //added by Srinivasulu on 21/09/2017....
                //reason is serial billId generations is inculde in offline also....
                
                //                if((isOfflineService) && (serialBillId.length == 4)){
                if(serialBillId.length == 4){
                    
                    @try {
                        
                        NSString * locStr = storeCodeStr;
                        NSString * localCounterIdStr = counterName;
                        
                        NSString * dateStr = [NSString stringWithFormat:@"%@",businessDate];
                        
                        if(billIDValue.length)
                            dateStr = [self checkGivenValueIsNullOrNil:[bill_details valueForKey:@"bill_date"]  defaultReturn:@""];
                        
                        if(locStr.length > 3)
                            locStr = [NSString stringWithFormat:@"%@",[locStr substringWithRange:NSMakeRange(0, 3)]];
                        
                        if(localCounterIdStr.length > 2)
                            localCounterIdStr = [NSString stringWithFormat:@"%@",[localCounterIdStr substringWithRange:NSMakeRange(0, 2)]];
                        
                        NSString * printDateStr = @"";
                        
                        if(dateStr.length){
                            
                            if([dateStr componentsSeparatedByString:@" "]){
                                NSString * str = [dateStr componentsSeparatedByString:@" "][0];
                                
                                NSArray * temp = [str componentsSeparatedByString:@"/"];
                                
                                
                                for(int i = 0; i < (temp.count - 1); i++){
                                    
                                    NSString *  tempStr = temp[i];
                                    
                                    printDateStr = [NSString stringWithFormat:@"%@%@", printDateStr, tempStr];
                                }
                                
                                if(temp.count){
                                    
                                    NSString *  tempStr = temp.lastObject;
                                    
                                    if(tempStr.length >= 4)
                                        tempStr = [tempStr substringFromIndex:tempStr.length - 2];
                                    
                                    //                            tempStr = [NSString stringWithFormat:@"%@",[tempStr substringWithRange:NSMakeRange(2, 4)]];
                                    
                                    printDateStr = [NSString stringWithFormat:@"%@%@", printDateStr, tempStr];
                                    
                                }
                                
                            }
                        }
                        
                        serialBillId =  [NSString stringWithFormat:@"%@%@%@%@%@",locStr,localCounterIdStr,printDateStr,@"/",serialBillId];
                        
                    } @catch (NSException *exception) {
                        
                    }
                }
                
                //upto here on 21/09/2017.....
                
            }
            
            //upto here on 06/07/2017....
            
            
            //added by Srinivasulu on 08/09/2017 && 24/03/2018....
            
            NSString * cancelledReasonStr = @"";
            NSString * remarksAsCommentStr = @"";
            
            
            
            if(itemCancelReasonTxt != nil  && eraseButton.tag == 1)
                cancelledReasonStr = itemCancelReasonTxt.text;
            
            if(billRemarksTxt != nil)
                remarksAsCommentStr = billRemarksTxt.text;
            
            
            //added by Srinivasulu on 30/01/2018....
            if(isNewReturnBill)
                delStatus = TA_RE_ITEMS;
            
            if(isNewReturnBill && segment_index != 4){
                
                if(paymentTransactionArray.count)
                    [paymentTransactionArray removeAllObjects];
                
                NSMutableDictionary *transDic = [NSMutableDictionary new];
                
                [transDic setValue:CASH_RETURNS forKey:@"modeOfPayment"];
                
                if (segment_index == 1)
                    [transDic setValue:CREDIT_NOTE forKey:@"modeOfPayment"];
                
                
                [transDic setValue:@"" forKey:@"couponNumber"];
                [transDic setValue:payTxt2.text forKey:@"paidAmount"];
                [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                
                [transDic setValue:currentdate forKey:@"dateTime"];
                [transDic setValue:changeReturnStr forKey:CHANGE_RETURN];
                [transDic setValue:totalReceivedAmt forKey:RECEIVED_AMOUNT];
                
                [transDic setValue:@YES forKey:TRANSACTION_TYPE_FLAG];
                
                
                //added by srinivasulu on 24/11/2017....
                
                if(billPaymentTendeInfoDic != nil && billPaymentTendeInfoDic.allKeys.count){
                    
                    //TENDER_NAME -- COUNTRY_CODE --  TENDER_CODE --  TENDER_KEY
                    //--
                    
                    [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""] forKey:TENDER_NAME];
                    [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:COUNTRY_CODE] defaultReturn:@""] forKey:COUNTRY_CODE];
                    [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_CODE] defaultReturn:@""] forKey:TENDER_MODE];
                    [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_KEY] defaultReturn:@""] forKey:TENDER_KEY];
                }
                
                
                if (segment_index == 1){
                    
                    [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""] forKey:TENDER_NAME];
                    [transDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:COUNTRY_CODE] defaultReturn:@""] forKey:COUNTRY_CODE];
                    [transDic setValue:CR forKey:TENDER_MODE];
                    [transDic setValue:@"2" forKey:TENDER_KEY];
                    
                }
                
                
                [transDic setValue:paymentType forKey:@"cardType"];
                
                
                //upto here on 24/11/2017....
                
                [paymentTransactionArray addObject:transDic];
            }
               
               if(![delStatus containsString:@"Completed"]){ // this is for customer membership
                   
                   if(isFirstTimeMemberShip && isToCreateNewMemberShip){
                       customerMemberShipStatus = false;
                   }
                   isToCreateNewMemberShip = false;
               }
               
               // added by roja on  29/07/2019...
               if([delStatus containsString:@"Completed"]){ // this is for customer Wallet..
                   
                   if(isWalletItemAdded && ([custmerPhNum.text length] || [phnotext.text length])){
                       
                       isToCallCreateWalletService = true; // after completion of billing .. need to call create customer wallet...
                   }
               }
               // upto here added by roja on 29/07/2019...


            //upto here on 30/01/2018....
            
            //added by  Srinivasulu on 16/10/2018..
            NSString * totalNetPayStr = netPayLblVal.text;
            
            if([netPayLblVal.text floatValue] < [amountToBePaidValLbl.text floatValue])
                totalNetPayStr = amountToBePaidValLbl.text;
            //upto here on 16/10/2018..
            
            
            if ( billIDValue.length==0) {
                NSString * createBillingJsonString = @"";
                NSData * jsonData;
                if (segment_index == 3) {
                    
                    
                    //changed by Srinivasulu on 03/08/2017....
                    //resently added new key....
                    
                    //billAmount --------------    totalBillAmountStr
                    
                    //                    NSArray * keys = [NSArray arrayWithObjects:REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"denominations",@"bill_date",CUSTOMER_NAME,CHANGE_RETURN,OTHER_DISCOUNT,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,@"billDiscounts",@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",kCustomerBillId,kSerialBillId,nil];
                    //
                    //                    NSArray * objects  = [NSArray arrayWithObjects:requestDictionary,cashierId,counterName,[NSNumber numberWithFloat:totalDiscount],giftTypeString,giftNumber,taxTxt.text,netPayLblVal.text,billDue, emailtext.text,phnotext.text,delStatus,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemArray,denomination_req,currentdate,nametext.text,changeReturnStr,otherDiscountTxt.text,[NSString stringWithFormat:@"%@",businessDate],[defaults valueForKey:SCAN_START_TIME],[defaults valueForKey:SCAN_END_TIME],[WebServiceUtility getCurrentDate],taxDetails,billingItemTaxDetails,campaignsArr,salesPersonIdStr,@"Direct",firstName,[NSNumber numberWithFloat:[subtotalTxt.text floatValue]],[NSNumber numberWithBool:isCustomerBillId],serialBillId,nil];
                    
                    //                    NSArray * keys = [NSArray arrayWithObjects:REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"denominations",@"bill_date",CUSTOMER_NAME,CHANGE_RETURN,OTHER_DISCOUNT,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,@"billDiscounts",@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",kCustomerBillId,kSerialBillId,BILL_AMOUNT, nil];
                    //
                    //                    NSArray * objects  = [NSArray arrayWithObjects:requestDictionary,cashierId,counterName,[NSNumber numberWithFloat:totalDiscount],giftTypeString,giftNumber,taxTxt.text,netPayLblVal.text,billDue, emailtext.text,phnotext.text,delStatus,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemArray,denomination_req,currentdate,nametext.text,changeReturnStr,otherDiscountTxt.text,[NSString stringWithFormat:@"%@",businessDate],[defaults valueForKey:SCAN_START_TIME],[defaults valueForKey:SCAN_END_TIME],[WebServiceUtility getCurrentDate],taxDetails,billingItemTaxDetails,campaignsArr,salesPersonIdStr,@"Direct",firstName,[NSNumber numberWithFloat:[subtotalTxt.text floatValue]],[NSNumber numberWithBool:isCustomerBillId],serialBillId,totalBillAmountStr, nil];
                    
                    
                    
                    NSArray * keys = @[REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"denominations",@"bill_date",CUSTOMER_NAME,CHANGE_RETURN,OTHER_DISCOUNT,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,@"billDiscounts",@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",kCustomerBillId,kSerialBillId,BILL_AMOUNT,CUSTOMER_GSTIN,OFFLINE_BILL,BILL_CANCEL_REASON,kComments,SALES_ORDER_ID,SHIPPING_CHARGES];
                    
                    NSArray * objects  = @[requestDictionary,cashierId,counterName,@(totalDiscount),giftTypeString,giftNumber,taxTxt.text,totalNetPayStr,billDue, emailtext.text,phnotext.text,delStatus,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemArray,denomination_req,currentdate,nametext.text,changeReturnStr,otherDiscountValueTxt.text,[NSString stringWithFormat:@"%@",businessDate],[defaults valueForKey:SCAN_START_TIME],[defaults valueForKey:SCAN_END_TIME],[WebServiceUtility getCurrentDate],taxDetails,billingItemTaxDetails,campaignsArr,salesPersonIdStr,@"Direct",firstName,@((subtotalTxt.text).floatValue),@(isCustomerBillId),serialBillId,totalBillAmountStr,customerGstinStr,@false,cancelledReasonStr,remarksAsCommentStr,salesOrderIdStr,[NSString stringWithFormat:@"%.2f",orderShipmentCharges]];
                    
                    //CUSTOMER_GSTIN -- customerGstinStr
                    
                    //upto here on 03/08/2017....
                    
                    
                    NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                    
                    NSError * err;
                    jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
                    createBillingJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                    
                }
                else {
                    
                    //changed by Srinivasulu on 03/08/2017....
                    //resently added new key....
                    
                    //BILL_AMOUNT --------------    totalBillAmountStr
                    
                    
                    //                    NSArray *keys = [NSArray arrayWithObjects:REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"billingTransactions",@"denominations",@"bill_date",CUSTOMER_NAME,CHANGE_RETURN,OTHER_DISCOUNT,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,@"billDiscounts",@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",kCustomerBillId,kSerialBillId,nil];
                    //
                    //                    NSArray *objects  = [NSArray arrayWithObjects:requestDictionary, cashierId,counterName,[NSNumber numberWithFloat:totalDiscount],giftTypeString,giftNo.text,taxTxt.text,netPayLblVal.text,billDue, emailtext.text,phnotext.text,delStatus,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemArray,paymentTransactionArray,denomination_req,currentdate,nametext.text,changeReturnStr,otherDiscountTxt.text,businessDate,[defaults valueForKey:SCAN_START_TIME],[defaults valueForKey:SCAN_END_TIME],[WebServiceUtility getCurrentDate],taxDetails,billingItemTaxDetails,campaignsArr,salesPersonIdStr,@"Direct",firstName,[NSNumber numberWithFloat:[subtotalTxt.text floatValue]],[NSNumber numberWithBool:isCustomerBillId],serialBillId,nil];
                    //
                    
                    //                    NSArray *keys = [NSArray arrayWithObjects:REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"billingTransactions",@"denominations",@"bill_date",CUSTOMER_NAME,CHANGE_RETURN,OTHER_DISCOUNT,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,@"billDiscounts",@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",kCustomerBillId,kSerialBillId,BILL_AMOUNT,nil];
                    //
                    //                    NSArray *objects  = [NSArray arrayWithObjects:requestDictionary, cashierId,counterName,[NSNumber numberWithFloat:totalDiscount],giftTypeString,giftNo.text,taxTxt.text,netPayLblVal.text,billDue, emailtext.text,phnotext.text,delStatus,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemArray,paymentTransactionArray,denomination_req,currentdate,nametext.text,changeReturnStr,otherDiscountTxt.text,businessDate,[defaults valueForKey:SCAN_START_TIME],[defaults valueForKey:SCAN_END_TIME],[WebServiceUtility getCurrentDate],taxDetails,billingItemTaxDetails,campaignsArr,salesPersonIdStr,@"Direct",firstName,[NSNumber numberWithFloat:[subtotalTxt.text floatValue]],[NSNumber numberWithBool:isCustomerBillId],serialBillId,totalBillAmountStr,nil];
                    
                    //commneted and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
                    
                    //
                    NSArray *keys = @[REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"billingTransactions",@"denominations",@"bill_date",CUSTOMER_NAME,CHANGE_RETURN,OTHER_DISCOUNT,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,@"billDiscounts",@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",kCustomerBillId,kSerialBillId,BILL_AMOUNT,CUSTOMER_GSTIN,OFFLINE_BILL,BILL_CANCEL_REASON,kComments,SALES_ORDER_ID,SHIPPING_CHARGES, @"memberShipCreationRequired", @"category"];
                    
                    NSArray *objects  = @[requestDictionary, cashierId,counterName,@(totalDiscount),giftTypeString,giftNo.text,taxTxt.text,totalNetPayStr,billDue, emailtext.text,phnotext.text,delStatus,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemArray,paymentTransactionArray,denomination_req,currentdate,nametext.text,changeReturnStr,otherDiscountValueTxt.text,businessDate,[defaults valueForKey:SCAN_START_TIME],[defaults valueForKey:SCAN_END_TIME],[WebServiceUtility getCurrentDate],taxDetails,billingItemTaxDetails,campaignsArr,salesPersonIdStr,@"Direct",firstName,@((subtotalTxt.text).floatValue),@(isCustomerBillId),serialBillId,totalBillAmountStr,customerGstinStr,@false,cancelledReasonStr,remarksAsCommentStr,salesOrderIdStr,[NSString stringWithFormat:@"%.2f",orderShipmentCharges], [NSNumber numberWithBool:customerMemberShipStatus], memberShipText.text];
                    
                    
                    //CUSTOMER_GSTIN -- customerGstinStr
                    
                    //upto here on 03/08/2017....
                    
                    NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                    
                    NSError * err;
                    jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
                    createBillingJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                    
                    NSLog(@"****** CREATE BILL REQUEST STRING ******:%@",createBillingJsonString);
                }
                
                if (!isOfflineService) {
                    WebServiceController *webserviceController = [WebServiceController new];
                    webserviceController.createBillingDelegate = self;
                    [webserviceController createBillWithData:jsonData];
                    
                    paymentType = @"";
                    giftNo.text = @"";
                    giftType.text = @"";
                    giftAmt.text = @"0.0";
                    offerLabel.text = @"";
                }
                
                else {
                    
                    offline = [[OfflineBillingServices alloc]init];
                    
                    NSString *result = [offline createBilling:createBillingJsonString isToGenerateBillID:true];
                    
                    payBtn.enabled = true;
                    
                    [HUD setHidden:YES];
                    //  [self createBillingHandler:billDue billId:result];
                    
                    if (result.length>1) {
                        
      //<--------- Start of Loyalty Card && Gift Coupon && Gift Voucher Updation Process --------->

                        //added by roja on 10/05/2019.....
                        
                        BOOL loyaltyModeOfPay = false;
                        BOOL couponModeOfPay = false;
                        BOOL voucherModeOfPay = false;
                        NSString * serialBillIDstr = @"";
                        
                        NSError *err = nil;
                        NSData *data = [createBillingJsonString dataUsingEncoding:NSUTF8StringEncoding];
                        NSDictionary * createBillingDic = [NSJSONSerialization JSONObjectWithData:data options:0 error:&err];
                        
                        serialBillIDstr = [createBillingDic valueForKey:@"serialBillId"];

                        for (NSDictionary * billTransactionDic in [createBillingDic valueForKey:@"billingTransactions"]) {
                            //[billTransactionDic valueForKey:@"cardType"];
                            if([[billTransactionDic valueForKey:@"modeOfPayment"] caseInsensitiveCompare:@"Loyalty Points"] == NSOrderedSame){
                                
                                loyaltyModeOfPay = true;
                            }
                            if([[billTransactionDic valueForKey:@"modeOfPayment"] caseInsensitiveCompare:@"coupon"] == NSOrderedSame){
                                
                                couponModeOfPay = true;
                            }
                            if([[billTransactionDic valueForKey:@"modeOfPayment"] caseInsensitiveCompare:@"voucher"] == NSOrderedSame){
                                
                                voucherModeOfPay = true;
                            }
                            break;
                        }
                        
                        NSString * phoneNum = phnotext.text; //phnotext is the num entered while bill payment submission...
                        
                        if([giftID.text length] && [phoneNumberText.text length] && ![phoneNumberText.text isEqualToString:phnotext.text]){
                            //phoneNumberText is the phn num entered in Gift Details View...
                            phoneNum = phoneNumberText.text;
                        }
                        
                        offline = [[OfflineBillingServices alloc] init];
                        
                        NSMutableDictionary * customerLoyaltyCardDic = [offline fetchLoyaltyCardDetailsFromSqliteWithPhoneNumber:phoneNum withGiftId:giftID.text];

                        
                            //Means customer is already there and we getting existing loyalty card details of that customer...

                            if(customerLoyaltyCardDic != nil && [[[customerLoyaltyCardDic valueForKey:@"responseHeader"] valueForKey:@"responseCode"] intValue] == 0 ){ // if customer have loyalty_card then only condition satifies...
                                
                                [self updateCustomerLoyaltyCardDetails:customerLoyaltyCardDic];
                            }
                        
                        
                        // below code is for issue process.. present not required...
                        // Updating Loyalty Card details(points) into customer_loyalty_card table... Also issuing if customer don't have Loyalty_card(only if auto_issue flag = true)
//                        if(!loyaltyModeOfPay && (customerLoyaltyCardDic == nil || [[[customerLoyaltyCardDic valueForKey:@"responseHeader"] valueForKey:@"responseCode"] intValue] == 1 ) ){ // Here we are auto issuing the loyalty card to the new customer number after his billing...
//
//                            NSString *customerEmailId  = [createBillingDic valueForKey:@"emailId"];
//                            NSString *customerName  = [createBillingDic valueForKey:@"customerName"];
//                            float netValue  = [[createBillingDic valueForKey:@"totalPrice"] floatValue];
//
//                            bool status = [offline issueLoyaltyCardToTheCustomerWithPhoneNumber:phoneNum withEmailId:customerEmailId withName:customerName netBillValue:netValue];
//
//                        }// end of issuing loyalty card to customerr
                        
                        if(couponModeOfPay){
                            
                            NSMutableDictionary * customerCouponDetailsDic = [offline fetchGiftCouponDetailsFromSqliteWithPhoneNumber:phoneNumberText.text enteredCouponCode:giftID.text]; //giftID.text
                            
                            if(customerCouponDetailsDic != nil && [[[customerCouponDetailsDic valueForKey:@"responseHeader"] valueForKey:@"responseCode"] intValue] == 0 ){ // if customer have coupon then only condition satifies...
                                
                                [self updateCustomerCouponDetails:customerCouponDetailsDic billReference:serialBillIDstr];
                            }
                        } // couponModeOfPay - end
                        
                        if(voucherModeOfPay){
                            
                            NSString * serviceCallParamStr = giftNo.text;
                            
                            if((giftID.text).length >= 15)//16`
                                serviceCallParamStr = giftID.text;
                            
                            NSMutableDictionary * voucherDetailsDic = [offline fetchGiftVoucherDetailsFromSqliteWithVoucherCodeStr:serviceCallParamStr];
                            
                            if(voucherDetailsDic != nil && [[[voucherDetailsDic valueForKey:@"responseHeader"] valueForKey:@"responseCode"] intValue] == 0 ){// condition satifies, if voucher is issued to user and is not claimed by user...

                                [self updateVoucherDetails:voucherDetailsDic billReferenceString:serialBillIDstr];
                            }
                        } // voucherModeOfPay - end
                        
                        
                       // }
                     // upto here added by roja on 10/05/2019...
                        
    //<--------- End of Loyalty Card && Gift Coupon && Gift Voucher Updation Process ---->
                        
                        
                        if (eraseButton.tag == 1) {
                            
                            defaults = [NSUserDefaults standardUserDefaults];
                            [defaults removeObjectForKey:@"cartItems"];
                            if ([custID caseInsensitiveCompare:@"CID8995438"] == NSOrderedSame) {
                                
                                [defaults setObject:[NSString stringWithFormat:@"%lld",[[defaults valueForKey:kLatestSerialBillId] longLongValue] + 1] forKey:kLatestSerialBillId];
                            }
                            
                            [defaults synchronize];
                            
                            //added by Srinivasulu on 14/07/2017 && 18/07/2017 && 23/04/2018....
                            [self updateHeaderValues];
                            
                            [self updateBillCountAndTotal];
                            
                            //upto here on 14/07/2017 && 18/07/2017 && 23/04/2018...
                            
                            eraseButton.tag = 0;
                            return;
                        }
                        
                        if (billDue.floatValue==0) {
                            
                            saleID = result;
                            
                            billIDValue = [result copy];
                            
                            
                            if (result.length == 0) {
                                
                                [HUD setHidden:YES];
                                //                                if ([paymentTransactionArray count]>0) {
                                //
                                //                                    [paymentTransactionArray removeAllObjects];
                                //                                }
                                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                                [alert show];
                                SystemSoundID    soundFileObject1;
                                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
                                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                                
                                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                                AudioServicesPlaySystemSound (soundFileObject1);
                                
                                [segmentedControl setUserInteractionEnabled:TRUE];
                                [segmentedControl setEnabled:YES];
                                [cartTable setUserInteractionEnabled:YES];
                                
                                
                                return;
                            }
                            else{
                                
                                [self updateHeaderValues];
                                [HUD setHidden:YES];
                                
                                // else {
                                [giftVoucherArr removeAllObjects];
                                
                                paymentView.backgroundColor = [UIColor blackColor];
                                paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
                                
                                UILabel *label1 = [[UILabel alloc] init] ;
                                
                                label1.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                                label1.backgroundColor = [UIColor clearColor];
                                label1.textAlignment = NSTextAlignmentCenter;
                                label1.textColor = [UIColor whiteColor];
                                
                                UILabel *label2 = [[UILabel alloc] init] ;
                                
                                label2.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                                label2.textAlignment = NSTextAlignmentCenter;
                                label2.backgroundColor = [UIColor whiteColor];
                                label2.alpha = 0.9f;
                                label2.textColor = [UIColor blackColor];
                                
                                
                                label1.text = @"Payment Successfull ";
                                label2.text = result;
                                // button to make new fresh bill ..
                                pastBill = [UIButton buttonWithType:UIButtonTypeCustom];
                                [pastBill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
                                [pastBill setTitle:@"Open Bill"    forState:UIControlStateNormal];
                                pastBill.titleLabel.textAlignment = NSTextAlignmentLeft;
                                pastBill.titleLabel.textColor = [UIColor whiteColor];
                                pastBill.backgroundColor = [UIColor grayColor];
                                
                                //button for past billing
                                //modified by sonali
                                
                                newbill = [UIButton buttonWithType:UIButtonTypeCustom];
                                [newbill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
                                [newbill setTitle:@"New Bill"    forState:UIControlStateNormal];
                                newbill.titleLabel.textAlignment = NSTextAlignmentLeft;
                                newbill.titleLabel.textColor = [UIColor whiteColor];
                                newbill.backgroundColor = [UIColor grayColor];
                                
                                paymentView.hidden = NO;
                                
                                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                                    
                                    //img1.frame = CGRectMake(0, 0, 468, 400);
                                    label1.font = [UIFont systemFontOfSize:25];
                                    label1.frame = CGRectMake(0, 40, 468, 80);
                                    label2.font = [UIFont systemFontOfSize:25];
                                    label2.frame = CGRectMake(0, 160, 468, 80);
                                    pastBill.layer.cornerRadius = 25.0f;
                                    pastBill.titleLabel.font = [UIFont systemFontOfSize:25];
                                    pastBill.frame = CGRectMake(50.0, 320.0, 150.0, 50.0);
                                    newbill.layer.cornerRadius = 25.0f;
                                    newbill.titleLabel.font = [UIFont systemFontOfSize:25];
                                    newbill.frame = CGRectMake(260.0, 320.0, 150.0, 50.0);
                                    if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                                        
                                        paymentView.frame = CGRectMake(250, 150, 468, 400);
                                        
                                    }
                                    else {
                                        paymentView.frame = CGRectMake(150, 250, 468, 400);
                                        
                                    }
                                    
                                }
                                else {
                                    
                                    //img1.frame = CGRectMake(0, 0, 200, 200);
                                    if (version >= 8.0) {
                                        label1.frame = CGRectMake(0, 20, 300, 40);
                                        label2.frame = CGRectMake(0, 80, 300, 40);
                                        pastBill.frame = CGRectMake(180.0, 150.0, 100.0, 30.0);
                                        pastBill.layer.cornerRadius = 15.0f;
                                        pastBill.titleLabel.font = [UIFont systemFontOfSize:15];
                                        newbill.frame = CGRectMake(10.0, 150.0, 100.0, 30.0);
                                        newbill.layer.cornerRadius = 15.0f;
                                        newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                                        paymentView.frame = CGRectMake(10, 150, 300, 200);
                                    }
                                    else{
                                        label1.frame = CGRectMake(0, 20, 300, 40);
                                        label2.frame = CGRectMake(0, 80, 300, 40);
                                        pastBill.frame = CGRectMake(180.0, 150.0, 100.0, 30.0);
                                        pastBill.layer.cornerRadius = 15.0f;
                                        pastBill.titleLabel.font = [UIFont systemFontOfSize:15];
                                        newbill.frame = CGRectMake(10.0, 150.0, 100.0, 30.0);
                                        newbill.layer.cornerRadius = 15.0f;
                                        newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                                        paymentView.frame = CGRectMake(10, 70, 300, 200);
                                    }
                                    
                                    
                                }
                                
                                //[paymentView addSubview:img1];
                                [paymentView addSubview:label1];
                                [paymentView addSubview:label2];
                                [paymentView addSubview:newbill];
                                [paymentView addSubview:pastBill];
                                //                                if (![[self.view subviews] containsObject:paymentView]) {
                                //                                    [self.view addSubview:paymentView];
                                //                                }
                                
                                [segmentedControl setUserInteractionEnabled:TRUE];
                                [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
                                //[segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
                                
                                // this value is to check whether bill is finished or not ..
                                segmentedControl.tag = 1;
                                
                                SystemSoundID    soundFileObject1;
                                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                                
                                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                                AudioServicesPlaySystemSound (soundFileObject1);
                                
                                //reset local cart details....
                                
                                
                                defaults = [NSUserDefaults standardUserDefaults];
                                [defaults removeObjectForKey:@"cartItems"];
                                if ([custID caseInsensitiveCompare:@"CID8995438"] == NSOrderedSame) {
                                    
                                    [defaults setObject:[NSString stringWithFormat:@"%lld",[[defaults valueForKey:kLatestSerialBillId] longLongValue] + 1] forKey:kLatestSerialBillId];
                                }
                                
                                [defaults synchronize];
                                
                                [self newBill:(UIButton *)pastBill];
                                
                                
                            }
                            
                        }
                        
                        else {
                            
                            [HUD setHidden:YES];
                            
                            defaults = [NSUserDefaults standardUserDefaults];
                            [defaults removeObjectForKey:@"cartItems"];
                            if ([custID caseInsensitiveCompare:@"CID8995438"] == NSOrderedSame) {
                                
                                [defaults setObject:[NSString stringWithFormat:@"%lld",[[defaults valueForKey:kLatestSerialBillId] longLongValue] + 1] forKey:kLatestSerialBillId];
                            }
                            
                            [defaults synchronize];
                            
                            
                            [self updateHeaderValues];
                            
                            saleID = result;
                            
                            billIDValue = [result copy];
                            
                            if (segment_index == 3) {
                                
                                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Bill Saved" message:[NSString stringWithFormat:@"%@\t%@",@"Bill Id",result] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                                [alert show];
                                
                                SystemSoundID    soundFileObject1;
                                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                                
                                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                                AudioServicesPlaySystemSound (soundFileObject1);
                                
                                
                            }
                            else {
                                [giftVoucherArr removeAllObjects];
                                paymentView.backgroundColor = [UIColor blackColor];
                                paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
                                paymentView.layer.borderWidth = 1.0f;
                                UILabel *label1 = [[UILabel alloc] init] ;
                                label1.text = @"Payment Pending";
                                label1.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                                label1.backgroundColor = [UIColor clearColor];
                                label1.textAlignment = NSTextAlignmentCenter;
                                label1.textColor = [UIColor whiteColor];
                                
                                UILabel *label2 = [[UILabel alloc] init] ;
                                label2.text = result;
                                label2.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
                                label2.textAlignment = NSTextAlignmentCenter;
                                label2.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
                                
                                label2.alpha = 0.9f;
                                label2.textColor = [UIColor blackColor];
                                
                                if (result.length == 0) {
                                    //                                    if ([paymentTransactionArray count]>0) {
                                    //
                                    //                                        [paymentTransactionArray removeAllObjects];
                                    //                                    }
                                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                                    [alert show];
                                    [cartTable setUserInteractionEnabled:YES];
                                    
                                }
                                else{
                                    label1.text = @"Payment Pending";
                                    label2.text = result;
                                    
                                    // button to make new fresh bill ..
                                    pastBill = [UIButton buttonWithType:UIButtonTypeCustom];
                                    [pastBill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
                                    [pastBill setTitle:@"Open Bill"    forState:UIControlStateNormal];
                                    pastBill.titleLabel.textAlignment = NSTextAlignmentLeft;
                                    pastBill.titleLabel.textColor = [UIColor whiteColor];
                                    pastBill.backgroundColor = [UIColor grayColor];
                                    
                                    //button for past billing
                                    //modified by sonali
                                    
                                    newbill = [UIButton buttonWithType:UIButtonTypeCustom];
                                    [newbill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
                                    [newbill setTitle:@"New Bill"    forState:UIControlStateNormal];
                                    newbill.titleLabel.textAlignment = NSTextAlignmentLeft;
                                    newbill.titleLabel.textColor = [UIColor whiteColor];
                                    newbill.backgroundColor = [UIColor grayColor];
                                }
                                
                                
                                paymentView.hidden = NO;
                                
                                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                                    
                                    //img1.frame = CGRectMake(0, 0, 468, 400);
                                    label1.font = [UIFont systemFontOfSize:25];
                                    label1.frame = CGRectMake(0, 40, 468, 80);
                                    label2.font = [UIFont systemFontOfSize:25];
                                    label2.frame = CGRectMake(0, 160, 468, 80);
                                    pastBill.layer.cornerRadius = 25.0f;
                                    pastBill.titleLabel.font = [UIFont systemFontOfSize:25];
                                    pastBill.frame = CGRectMake(50.0, 320.0, 150.0, 50.0);
                                    newbill.layer.cornerRadius = 25.0f;
                                    newbill.titleLabel.font = [UIFont systemFontOfSize:25];
                                    newbill.frame = CGRectMake(260.0, 320.0, 150.0, 50.0);
                                    if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                                        
                                        paymentView.frame = CGRectMake(250, 150, 468, 400);
                                        
                                    }
                                    else {
                                        paymentView.frame = CGRectMake(150, 250, 468, 400);
                                        
                                    }
                                    
                                }
                                else {
                                    
                                    //img1.frame = CGRectMake(0, 0, 200, 200);
                                    label1.frame = CGRectMake(0, 20, 300, 40);
                                    label2.frame = CGRectMake(0, 80, 300, 40);
                                    pastBill.frame = CGRectMake(10.0, 150.0, 180.0, 30.0);
                                    pastBill.layer.cornerRadius = 15.0f;
                                    pastBill.titleLabel.font = [UIFont systemFontOfSize:15];
                                    newbill.frame = CGRectMake(10.0, 150.0, 180.0, 30.0);
                                    newbill.layer.cornerRadius = 15.0f;
                                    newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                                    paymentView.frame = CGRectMake(10, 70, 300, 200);
                                    
                                }
                                
                                //[paymentView addSubview:img1];
                                [paymentView addSubview:label1];
                                [paymentView addSubview:label2];
                                [paymentView addSubview:newbill];
                                [paymentView addSubview:pastBill];
                                if (![(self.view).subviews containsObject:paymentView]) {
                                    // [self.view addSubview:paymentView];
                                }
                                
                                [segmentedControl setUserInteractionEnabled:TRUE];
                                [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
                                //[segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
                                
                                // this value is to check whether bill is finished or not ..
                                segmentedControl.tag = 1;
                                
                                if(savebtn.tag == 1 || savebtn.tag == 2){
                                    // [self continueFurther:skipbtn];
                                }
                                [self newBill:(UIButton *)pastBill];
                                
                            }
                        }
                    }
                    else if (result.length == 0) {
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        [cartTable setUserInteractionEnabled:YES];
                        
                    }
                    else {
                        
                        if (eraseButton.tag == 1) {
                            
                            eraseButton.tag = 0;
                            return;
                        }
                        segmentedControl.userInteractionEnabled = YES;
                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Problem occured while processing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                        [alert show];
                    }
                    
                    paymentType = @"";
                    giftNo.text = @"";
                    giftType.text = @"";
                    giftAmt.text = @"0.00";
                    offerLabel.text = @"";
                }
            }
            else {
                
                
                
                //changed by Srinivasulu on 03/08/2017....
                //resently added new key....
                
                //BILL_AMOUNT --------------    totalBillAmountStr
                
                //                NSArray *keys = [NSArray arrayWithObjects:@"billId",REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"billingTransactions",@"denominations",@"bill_date",CUSTOMER_NAME,CHANGE_RETURN,OTHER_DISCOUNT,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,kItemCampigns,@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",kCustomerBillId,nil];
                //
                //
                //                NSArray *objects = [NSArray arrayWithObjects:originalBillId,requestDictionary, cashierId,counterName,[NSNumber numberWithFloat:totalDiscount],giftTypeString,giftNo.text,taxTxt.text,netPayLblVal.text,billDue, emailtext.text,phnotext.text,delStatus,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemArray,paymentTransactionArray,denomination_req,currentdate,nametext.text,changeReturnStr,otherDiscountTxt.text,businessDate,[defaults valueForKey:SCAN_START_TIME],[defaults valueForKey:SCAN_END_TIME],[WebServiceUtility getCurrentDate],taxDetails,billingItemTaxDetails,campaignsArr,salesPersonIdStr,@"Direct",firstName,[NSNumber numberWithFloat:[subtotalTxt.text floatValue]],[NSNumber numberWithBool:isCustomerBillId],nil];
                
                //                NSArray *keys = [NSArray arrayWithObjects:@"billId",REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"billingTransactions",@"denominations",@"bill_date",CUSTOMER_NAME,CHANGE_RETURN,OTHER_DISCOUNT,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,kItemCampigns,@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",kCustomerBillId,BILL_AMOUNT,nil];
                //
                //
                //                NSArray *objects = [NSArray arrayWithObjects:originalBillId,requestDictionary, cashierId,counterName,[NSNumber numberWithFloat:totalDiscount],giftTypeString,giftNo.text,taxTxt.text,netPayLblVal.text,billDue, emailtext.text,phnotext.text,delStatus,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemArray,paymentTransactionArray,denomination_req,currentdate,nametext.text,changeReturnStr,otherDiscountTxt.text,businessDate,[defaults valueForKey:SCAN_START_TIME],[defaults valueForKey:SCAN_END_TIME],[WebServiceUtility getCurrentDate],taxDetails,billingItemTaxDetails,campaignsArr,salesPersonIdStr,@"Direct",firstName,[NSNumber numberWithFloat:[subtotalTxt.text floatValue]],[NSNumber numberWithBool:isCustomerBillId],totalBillAmountStr,nil];
                
                //commneted and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
                
                NSArray *keys = @[@"billId",REQUEST_HEADER,CASHIER_ID,@"counterId",@"totalDiscount",@"discountType",@"discountTypeId",@"tax",@"totalPrice",@"dueAmount",@"emailId",@"phoneNumber",@"status",@"store_location",@"shiftId",@"billItems",@"billingTransactions",@"denominations",@"bill_date",CUSTOMER_NAME,CHANGE_RETURN,OTHER_DISCOUNT,BUSSINESS_DATE,SCAN_START_TIME,SCAN_END_TIME,PRINT_TIME,BILL_TAXES,BILL_ITEM_TAXES,kItemCampigns,@"employeeSaleId",@"billingChannel",@"cashierName",@"subTotal",kCustomerBillId,BILL_AMOUNT,CUSTOMER_GSTIN,BILL_CANCEL_REASON,kSerialBillId,SALES_ORDER_ID,SHIPPING_CHARGES];
                
                
                NSArray *objects = @[originalBillId, requestDictionary, cashierId, counterName, @(totalDiscount), giftTypeString, giftNo.text, taxTxt.text, totalNetPayStr,billDue, emailtext.text,phnotext.text,delStatus,presentLocation,[NSString stringWithFormat:@"%@",shiftId],itemArray,paymentTransactionArray,denomination_req,currentdate,nametext.text,changeReturnStr,otherDiscountValueTxt.text,businessDate,[defaults valueForKey:SCAN_START_TIME],[defaults valueForKey:SCAN_END_TIME],[WebServiceUtility getCurrentDate], taxDetails, billingItemTaxDetails, campaignsArr, salesPersonIdStr, @"Direct", firstName,@((subtotalTxt.text).floatValue),@(isCustomerBillId),totalBillAmountStr,customerGstinStr,cancelledReasonStr,billIDValue,salesOrderIdStr,[NSString stringWithFormat:@"%.2f",orderShipmentCharges]];
                
                
                //CUSTOMER_GSTIN -- customerGstinStr
                
                //upto here on 03/08/2017....
                
                
                NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                
                NSError * err;
                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
                //                NSString * updateBillingJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                
                
                
                if (!isOfflineService) {
                    
                    
                    WebServiceController *webserviceController = [WebServiceController new];
                    webserviceController.updateBillingDelegate = self;
                    [webserviceController updateBillWithData:jsonData];
                    
                    //                    SalesServiceSoapBinding *saleBindng =  [SalesServiceSvc SalesServiceSoapBinding] ;
                    //                    SalesServiceSvc_updateBilling *aParameters =  [[SalesServiceSvc_updateBilling alloc] init];
                    //
                    //                    aParameters.bill_details = updateBillingJsonString;
                    //
                    //                    SalesServiceSoapBindingResponse *response = [saleBindng updateBillingUsingParameters:(SalesServiceSvc_updateBilling *) aParameters];
                    //                    NSArray *responseBodyParts = response.bodyParts;
                    
                    //                    for (id bodyPart in responseBodyParts) {
                    //                        if ([bodyPart isKindOfClass:[SalesServiceSvc_updateBillingResponse class]]) {
                    //                            SalesServiceSvc_updateBillingResponse *body = (SalesServiceSvc_updateBillingResponse *)bodyPart;
                    //                            printf("\nresponse=%s",[body.return_ UTF8String]);
                    //
                    //                            NSError *e;
                    //
                    //                            NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding] options: NSJSONReadingMutableContainers error: &e];
                    //                            if ([[[JSON1 valueForKey:@"responseHeader"] valueForKey:@"responseCode"] intValue] != 0) {
                    //
                    //                                [HUD setHidden:YES];
                    //
                    //                                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:[NSString stringWithFormat:@"%@",[[JSON1 valueForKey:@"responseHeader"] valueForKey:@"responseMessage"]] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    //                                [alert show];
                    //
                    //                                SystemSoundID    soundFileObject1;
                    //                                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
                    //                                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                    //                                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                    //                                AudioServicesPlaySystemSound (soundFileObject1);
                    //
                    //                                [segmentedControl setUserInteractionEnabled:TRUE];
                    //                                [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
                    //                                [cartTable setUserInteractionEnabled:YES];
                    //
                    //                                //[segmentedControl setEnabled:TRUE forSegmentAtIndex:4];
                    //                            }
                    //                            else{
                    //
                    //                                //  NSArray *temp = [body.return_ componentsSeparatedByString:@"#"];
                    //                                NSError *e;
                    //                                NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
                    //                                                                                     options: NSJSONReadingMutableContainers
                    //                                                                                       error: &e];
                    //
                    //                                billIDValue = [[JSON valueForKey:@"billId"] copy];
                    //                                [self createBillingHandler:billDue billId:billIDValue];
                    //                                [savebtn setTitle:@"Update" forState:UIControlStateNormal];
                    //                                savebtn.tag = 2;
                    //
                    //
                    //                            }
                    //                            // removing hud ..
                    //                            [HUD hide:YES afterDelay:0.5];
                    //
                    //
                    //
                    //                        }
                    //                    }
                }
                else {
                    
                    //                    NSArray *keys = [NSArray arrayWithObjects:@"billID",@"DateAndTime", @"cashierID",@"mode_of_payment",@"CounterId",@"card_type",@"card_sub_type",@"card_number",@"Paid_amount",@"status", nil];
                    //
                    //                    NSArray *objects = [NSArray arrayWithObjects:billIDValue, currentdate,billUserName1,MOP,counterName,paymentType1,paymentType1,card_Number1,paid_Amount,pastBillStatus1,nil];
                    //
                    //                    NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                    
                    //added by Srinivasulu on 22/09/2017....
                    //handling serial bill id.....
                    
                    NSString * serialStr = billIDValue;
                    if(isCustomerBillId){
                        
                        serialStr = originalBillId;
                    }
                    
                    //utpo here on 22/09/2017....
                    
                    offline = [[OfflineBillingServices alloc]init];
                    
                    //changed by Srinivasulu on 22/09/2017....
                    
                    //                    NSString *result = [offline updateBilling:billIDValue bill_details:dictionary due:finalBillDue];
                    NSString *result = [offline updateBilling:serialStr bill_details:dictionary due:finalBillDue];
                    
                    //                    if (result== NULL || [result rangeOfString:@"BL"].location == NSNotFound) {
                    
                    if (result== NULL) {
                        
                        //upto here on 22/09/2017.....
                        
                        
                        
                        [HUD setHidden:YES];
                        
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Bill Failed. Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                        [alert show];
                        
                        SystemSoundID    soundFileObject1;
                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                        AudioServicesPlaySystemSound (soundFileObject1);
                        
                        [segmentedControl setUserInteractionEnabled:TRUE];
                        [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
                        [cartTable setUserInteractionEnabled:YES];
                        
                        //[segmentedControl setEnabled:TRUE forSegmentAtIndex:4];
                    }
                    else{
                        
                        // NSArray *temp = [body.return_ componentsSeparatedByString:@"#"];
                        billIDValue = [result copy];
                        [self createBillingHandler:billDue billId:billIDValue];
                        [savebtn setTitle:@"Update" forState:UIControlStateNormal];
                        savebtn.tag = 2;
                    }
                    
                }
                
                
            }
            // Returns NSString*.
            //        [service createBilling:self action:@selector(createBillingHandler:) dateAndTimeOfOrder: currentdate cashierID: user_name modeOfPayment: paymentType totalPrice: totalPrice billDueAmount: billDue transactionID: trasactionId saleItems: getBillData dealnoffer: dealoroffersTxt.text type: giftType.text cardnumber: giftNo.text cash: giftAmt.text tax: taxTxt.text];
            
            
        }
        @catch (NSException *exception) {
            
            payBtn.enabled = true;
            
            NSLog(@"Exception name %@",exception.name);
            if (segment_index == 3) {
                
                totalTxt.text = finalBillDue;
            }
            [HUD setHidden:YES];
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            [segmentedControl setUserInteractionEnabled:TRUE];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
            [cartTable setUserInteractionEnabled:YES];
            
            //[segmentedControl setEnabled:TRUE forSegmentAtIndex:4];
        }
        
    }
}

-(void )ratingView:(double)ratingValue outOf:(NSUInteger)totalValue imageView:(UIImageView *)view

{
    NSUInteger xPos = view.frame.origin.x;
    if (ratingValue >= 5) {
        
        ratingValue = 5;
    }
    double tempRatingValue = ratingValue;
    UIImageView *starImageView ;
    for (NSUInteger currentStar=0; currentStar<totalValue; currentStar++) { // Looping for each star(imageView) in the KDRatingView
        
        starImageView = [[UIImageView alloc] initWithFrame:CGRectMake(xPos, view.frame.origin.y, view.frame.size.width/totalValue, view.frame.size.height)];
        
        if (tempRatingValue-1>=0) {
            tempRatingValue--;
            // place one complete star
            starImageView.image = [UIImage imageNamed:@"1_star"];
            
        } else {
            if ((tempRatingValue>=0)&&(tempRatingValue<0.25)) {
                // place 0 star
                starImageView.image = [UIImage imageNamed:@"grey_star@2x"];
                
            } else if ((tempRatingValue>=0.25)&&(tempRatingValue<0.50)) {
                // place 1/4 star
                starImageView.image = [UIImage imageNamed:@"14_star"];
                
            } else if ((tempRatingValue>=0.50)&&(tempRatingValue<0.75)) {
                // place 1/2 star
                starImageView.image = [UIImage imageNamed:@"12_star"];
                
            } else if ((tempRatingValue>=0.75)&&(tempRatingValue<1.0)) {
                // place 3/4 star
                starImageView.image = [UIImage imageNamed:@"34_star"];
            }
            
            tempRatingValue=0;
        }
        
        // set tag starImageView which will allow to identify and differentiate it individually in calling class.
        // Add starImageView to view as a subView
        starImageView.tag = currentStar;
        [self.view addSubview:starImageView];
        
        // calculate new xPos and yPos
        xPos = xPos + starImageView.frame.size.width;
    }
    
    
}

/**
 * @description  here we are sett the item scan time....
 * @date
 * @method       updateItemScanTime
 * @author
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 23/08/2017....
 * @reason       added comments and exception handling and change the defaults as local varible....
 *
 * @verified By
 * @verified On
 *
 */

- (void)updateItemScanTime {
    
    @try {
        
        //commented by Srinivasulu on 23/08/2017...
        //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
        //    defaults = [NSUserDefaults standardUserDefaults];
        
        NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
        
        //upto here on 23/08/2017....
        
        NSString *currentDate = [WebServiceUtility getCurrentDate];
        if (cartTotalItems.count == 1) {
            [defaults setValue:currentDate forKey:SCAN_START_TIME];
            [defaults setValue:currentDate forKey:SCAN_END_TIME];
        }
        else {
            [defaults setValue:currentDate forKey:SCAN_END_TIME];
        }
        [defaults synchronize];
        
    } @catch (NSException *exception) {
        
    }
    
}

#pragma mark - Create Billing Service Reposnse Delegates

//changed by Srinivasulu on 12/03/2018....

- (void)createBillingSuccessResponse:(NSDictionary *)successDictionary {
    
    @try{
        
        if ([[[successDictionary valueForKey:@"responseHeader"] valueForKey:@"responseCode"] intValue]!=0) {
            
            [HUD setHidden:YES];
            billingErrorStatus = TRUE;
            //        if ([paymentTransactionArray count]>0) {
            //
            //            [paymentTransactionArray removeAllObjects];
            //        }
            
            //added by Srinivasulu on 23/04/2018....
            if(([[[successDictionary valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_CODE] integerValue] == -DUPLICATE_BILL_ID_RESOPNSE_CODE_WITH_AMOUNT_MISS_MATCH)){
                
                
                if(eraseButton.tag == 1)
                    eraseButton.tag = 0;
                
                //incrementing serial bill Id....
                [self updateHeaderValues];
                [self updateBillCountAndTotal];
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"please_try_again_to_complete_the_bill", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
                [alert show];
                [segmentedControl setUserInteractionEnabled:TRUE];
                [segmentedControl setEnabled:TRUE forSegmentAtIndex:segmentedControl.selectedSegmentIndex];
                return;
            }
            
            //upto here on 23/04/2018.....
            
            if (eraseButton.tag == 1) {
                
                billingErrorStatus = FALSE;
                if(paymentTransactionArray.count > 0)
                    [paymentTransactionArray removeAllObjects];
                eraseButton.tag = 0;
                return;
            }
            NSString * displayStr = NSLocalizedString(@"bill_failed_try_again", nil);
            
            if([[[successDictionary valueForKey:RESPONSE_HEADER] allKeys] containsObject:RESPONSE_MESSAGE] && ! [[[successDictionary valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE] isKindOfClass:[NSNull class]])
                displayStr = [[successDictionary valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE];
            
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:displayStr delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
            [alert show];
            
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            
            [segmentedControl setUserInteractionEnabled:TRUE];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
            [cartTable setUserInteractionEnabled:YES];
            
        }
        //changed by Srinivasulu on 12/03/2018....
        
        //            else{
        else if( [successDictionary.allKeys containsObject:BILL_ID] &&  ![[successDictionary valueForKey:BILL_ID]  isKindOfClass: [NSNull class]]){
            
            billingErrorStatus = FALSE;
            
            //isDuplicateBillIdResponse
            
            billIDValue = [successDictionary[@"billId"]copy];
            
            
            // added by roja on 03/12/2019...
            if(isPaidVoucher && paidVoucherItemDetailsDic != nil){
                
                WebServiceController * webServContlr = [[WebServiceController alloc]init];
                webServContlr.giftVoucherSrvcDelegate = self;
                [webServContlr issueGiftVoucherToCustomer:issueVoucherDetailsStr];
            }
            //Upto here added by roja on 03/12/2019..
            
            
            if([[[successDictionary valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE] caseInsensitiveCompare:DUPLICATE_BILL_ID_RESOPNSE_FROM_SERVICES]  == NSOrderedSame){
                isDuplicateBillIdResponse = true;
            }
            //added by Srinivasulu on 20/04/2018....
            
            else {
                
                if(![delStatus.lowercaseString containsString:DRAFT]){
                    
                    if(offline == nil)
                        offline = [[OfflineBillingServices alloc] init];
                    
                    dispatch_async(dispatch_get_main_queue(), ^{
                        if([delStatus isEqualToString:TA_RE_ITEMS])
                            [offline reduceTheBillingItemsStock:itemsFromCartArr stockUpdationType:INCREASE];
                        else
                            [offline reduceTheBillingItemsStock:itemsFromCartArr stockUpdationType:REDUCE];
                    });
                }
            }
            //upto here on 20/04/2018....
            
            [self createBillingHandler:[finalBillDue copy] billId:successDictionary[@"billId"]];
            [savebtn setTitle:@"Update" forState:UIControlStateNormal];
            savebtn.tag = 2;
            
            
        }
        //added by Srinivasulu on 12/03/2018....
        else{
            
            [HUD setHidden:YES];
            billingErrorStatus = TRUE;
            
            if (eraseButton.tag == 1) {
                
                eraseButton.tag = 0;
                billingErrorStatus = FALSE;
                if(paymentTransactionArray.count > 0)
                    [paymentTransactionArray removeAllObjects];
                return;
            }
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Bill Failed. Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            
            [segmentedControl setUserInteractionEnabled:TRUE];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
            [cartTable setUserInteractionEnabled:YES];
        }
        
        //upto here on 12/03/2018.... --**
        
    } @catch (NSException *exception) {
        
    }
}

- (void)createBillingErrorResponse {
    //    if ([paymentTransactionArray count]>0) {
    //
    //        [paymentTransactionArray removeAllObjects];
    //    }
    [HUD setHidden:YES];
    payBtn.enabled = true;
    
    billingErrorStatus = TRUE;
    
    if (eraseButton.tag == 1) {
        
        eraseButton.tag = 0;
        return;
    }
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alert show];
    SystemSoundID    soundFileObject1;
    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
    AudioServicesPlaySystemSound (soundFileObject1);
    [segmentedControl setUserInteractionEnabled:TRUE];
    [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
    [cartTable setUserInteractionEnabled:YES];
}

#pragma mark End of Create Billing Service Reposnse Delegates -

#pragma mark - Update Billing Service Reposnse Delegates
- (void)updateBillingSuccessResponse:(NSDictionary *)successDictionary {
    
    @try {
        
        if ([[[successDictionary valueForKey:@"responseHeader"] valueForKey:@"responseCode"] intValue]!=0) {
            
            [HUD setHidden:YES];
            billingErrorStatus = TRUE;
            //        if ([paymentTransactionArray count]>0) {
            //
            //            [paymentTransactionArray removeAllObjects];
            //        }
            if (eraseButton.tag == 1) {
                billingErrorStatus = FALSE;
                if(paymentTransactionArray.count > 0)
                    [paymentTransactionArray removeAllObjects];
                
                eraseButton.tag = 0;
                return;
            }
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Bill Failed. Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            
            [segmentedControl setUserInteractionEnabled:TRUE];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
            [cartTable setUserInteractionEnabled:YES];
            
        }
        
        //changed by Srinivasulu on 12/03/2018....
        
        //            else{
        else if( [successDictionary.allKeys containsObject:BILL_ID] &&  ![[successDictionary valueForKey:BILL_ID]  isKindOfClass: [NSNull class]]){
            
            billingErrorStatus = FALSE;
            
            billIDValue = [successDictionary[@"billId"]copy];
            
            [self createBillingHandler:[finalBillDue copy] billId:successDictionary[@"billId"]];
            [savebtn setTitle:@"Update" forState:UIControlStateNormal];
            savebtn.tag = 2;
            
            //added by Srinivasulu on 20/04/2018....
            if(![delStatus.lowercaseString containsString:DRAFT]){
                
                if(offline == nil)
                    offline = [[OfflineBillingServices alloc] init];
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    if(!isNewReturnBill)
                        [offline reduceTheBillingItemsStock:itemsFromCartArr stockUpdationType:REDUCE];
                    else
                        [offline reduceTheBillingItemsStock:itemsFromCartArr stockUpdationType:INCREASE];
                });
            }
            //upto here on 20/04/2018....
        }
        //added by Srinivasulu on 12/03/2018....
        else{
            
            [HUD setHidden:YES];
            billingErrorStatus = TRUE;
            
            if (eraseButton.tag == 1) {
                
                eraseButton.tag = 0;
                billingErrorStatus = FALSE;
                if(paymentTransactionArray.count)
                    [paymentTransactionArray removeAllObjects];
                return;
            }
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Bill Failed. Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            
            [segmentedControl setUserInteractionEnabled:TRUE];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
            [cartTable setUserInteractionEnabled:YES];
        }
        
        //upto here on 12/03/2018.... --**
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}
- (void)updateBillingErrorResponse {
    //    if ([paymentTransactionArray count]>0) {
    //
    //        [paymentTransactionArray removeAllObjects];
    //    }
    [HUD setHidden:YES];
    payBtn.enabled = true;
    
    if (eraseButton.tag == 1) {
        
        eraseButton.tag = 0;
        return;
    }
    billingErrorStatus = TRUE;
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alert show];
    SystemSoundID    soundFileObject1;
    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
    AudioServicesPlaySystemSound (soundFileObject1);
    [segmentedControl setUserInteractionEnabled:TRUE];
    [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
    [cartTable setUserInteractionEnabled:YES];
}

#pragma mark End of Update Billing Service Reposnse Delegates -

#pragma mark - Search Products Service Reposnse Delegates

- (void)searchProductsSuccessResponse:(NSDictionary *)successDictionary {
    @try {
        
        isSearchBool = true;
        
        [HUD setHidden:YES];
        [tempSkuArrayList removeAllObjects];
        
        if (![successDictionary[@"productsList"] isKindOfClass:[NSNull class]]) {
            NSArray *list = successDictionary[@"productsList"];
            [tempSkuArrayList addObjectsFromArray:list];
        }
        for (NSDictionary *product in tempSkuArrayList)
        {
            
            
            //commented by Srinivasulu on  12/10/2017....
            //reason is description is same for some the clients....
            
            //            NSComparisonResult result;
            //
            //            if (!([[product objectForKey:@"description"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound)) {
            //                if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
            //                    [filteredSkuArrayList addObject:[product objectForKey:@"description"]];
            //                    if (!isOfflineService) {
            //
            //                        [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
            //
            //                    }
            //                    else {
            //                        [filteredPriceArr addObject:[product objectForKey:@"price"] ];
            //
            //                    }
            //                    [skuArrayList addObject:product];
            //
            //                }
            //
            //            }
            
            //upto here on 12/10/2017....
            
            if (product[@"ean"]!=nil || [product[@"ean"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location != NSNotFound) {
                
                //commented by Srinivasulu on  12/10/2017....
                //reason is description is same for some the clients....
                //need to change above conditions also....
                
                //                if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
                
                [filteredSkuArrayList addObject:product[@"description"]];
                if (!isOfflineService) {
                    
                    [filteredPriceArr addObject:[product[@"price"] stringValue]];
                }
                else {
                    [filteredPriceArr addObject:product[@"price"] ];
                    
                }
                [skuArrayList addObject:product];
                
                //                }
                //upto here on 12/10/2017....
            }
            else  {
                
                //                result = [[product objectForKey:@"skuID"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, [BillField.text length])];
                
                //                if (result == NSOrderedSame)
                //                {
                //commented by Srinivasulu on  12/10/2017....
                //reason is description is same for some the clients....
                
                //                if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
                [filteredSkuArrayList addObject:product[@"description"]];
                [filteredPriceArr addObject:product[@"price"] ];
                [skuArrayList addObject:product];
                //                    }
                //                }
                //upto here on 12/10/2017....
            }
            
        }
        if (filteredSkuArrayList.count > 0) {
            
            
            //changeed By Srinivasulu on 17/08/2016
            
            float cell_height = 45;
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                cell_height = 28;
            }
            
            float table_height = (filteredSkuArrayList.count + 1) * cell_height;
            
            if(table_height > ( segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height))){
                
                table_height = segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height);
            }
            
            skListTable.frame =  CGRectMake(BillField.frame.origin.x, (BillField.frame.origin.y + BillField.frame.size.height), BillField.frame.size.width, table_height);
            
            //            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            //                skListTable.frame = CGRectMake(5, 200, 560,240);
            //            }
            //            else {
            //                if (version >= 8.0) {
            //                    skListTable.frame = CGRectMake(40, 145, 180,180);
            //                }
            //                else{
            //                    skListTable.frame = CGRectMake(20, 75, 213,100);
            //                }
            //            }
            
            //            if ([filteredSkuArrayList count] > 5) {
            //                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            //                    skListTable.frame = CGRectMake(5, 200, 560,450);
            //                }
            //                else {
            //                    if (version >= 8.0) {
            //                        skListTable.frame = CGRectMake(40, 145, 180,180);
            //                    }
            //                    else{
            //                        skListTable.frame = CGRectMake(20, 75, 213,130);
            //                    }
            //                }
            //            }
            
            //upto here....
            
            skListTable.hidden = NO;
            [self.view bringSubviewToFront:skListTable];
            [skListTable reloadData];
            
            if (searchString.length != (BillField.text).length) {
                
                [self textFieldDidChange:BillField];
            }
        }
        else {
            
            skListTable.hidden = YES;
        }
    }
    @catch (NSException *exception) {
        
        isSearchBool = true;
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid product" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
    }
    @finally{
        
        [skListTable reloadData];
        
        //added by Srinivasulu on 28/08/2018....
        if(isHybirdMode)
            isHybirdCallFailed = true;
    }
}
- (void)searchProductsErrorResponse {
    isSearchBool = true;
    
    [HUD setHidden:YES];
    [skListTable setHidden:YES];
    
    //added by Srinivasulu on 28/08/2018....
    if(isHybirdMode)
        isHybirdCallFailed = true;
}

#pragma mark End of Search Products Service Reposnse Delegates -

-(void)callGetSKUDetailOnline:(NSString *)skuIdStr{
    
    @try {
        [HUD setHidden:NO];
        
        NSDictionary * campaigndictionary_;
        
        if(isToCallApplyCampaigns && !isNewReturnBill){
            
            skuIdList = [NSMutableArray new];
            pluCodeList = [NSMutableArray new];
            unitPriceList = [NSMutableArray new];
            qtyList = [NSMutableArray new];
            totalPriceList = [NSMutableArray new];
            itemStatusList = [NSMutableArray new];
            itemDiscountList = [NSMutableArray new];
            
            for (int i = 0; i < cartTotalItems.count; i++) {
                NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                [skuIdList addObject:itemDetails[0]];
                [pluCodeList addObject:itemDetails[8]];
                [unitPriceList addObject:@([itemDetails[4] floatValue])];
                [qtyList addObject:@([itemDetails[5] floatValue])];
                [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
                if ([isVoidedArray[i] boolValue]) {
                    [itemStatusList addObject:@"void"];
                }
                else {
                    [itemStatusList addObject:@""];
                }
                [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
            }
            
            
            
            NSString *empCodeStr = @"";
            if (empCodeTxt != nil && (empCodeTxt.text).length > 0) {
                
                empCodeStr  = empCodeTxt.text;
            }
            
            NSArray *loyaltyKeys = @[STORELOCATION,REQUEST_HEADER,SKU_ID_ARR_LIST,PLU_CODE_ARR_LIST,UNIT_PRICE_ARR_LIST,QTY_ARR_LIST,TOTAL_PRICE_ARR_LIST,ITME_STATUS_ARR_LIST,PRODUCT_OPTIONAL_DISCOUNT_ARR,TOTAL_BILL_AMOUNT,QUANTITY,PHONE_NUMBER,PURCHASE_CHANNEL,EMPLOYEE_CODE,LATEST_CAMPAIGNS];
            
            NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],skuIdList,pluCodeList,unitPriceList,qtyList,totalPriceList,itemStatusList, itemDiscountList,totalTxt.text,@"1",custmerPhNum.text,POS,empCodeStr,@(applyLatestCampaigns)];
            
            campaigndictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
        }
        else{
            
            campaigndictionary_ = [[NSDictionary alloc] init];
        }
        
        //changed by bhargav on 04/10/2017....
        
        //                    NSArray *objects = [NSArray arrayWithObjects:[NSString stringWithFormat:@"%@",[json objectForKey:@"skuID"]],[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],campaigndictionary_,[NSNumber numberWithBool:true], nil];
        Boolean isCampaignsRequired = false;
        
        if (isToCallApplyCampaigns && !isNewReturnBill) {
            isCampaignsRequired = true;
        }
        
        NSArray *keys = @[ITEM_SKU,REQUEST_HEADER,STORELOCATION,kIsApplyCampaigns,CART_DETAILS,kZeroStockBillCheck,IS_CAMPAIGNS_REQUIRED];
        
        NSArray *objects = @[skuIdStr,[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],campaigndictionary_,@true,[NSNumber numberWithBool:isCampaignsRequired]];
        
        //upto here on 04/10/2017....
        
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        //            getSkuid.skuID = salesReportJsonString;
        
        skListTable.frame = CGRectMake(skListTable.frame.origin.x, skListTable.frame.origin.y, skListTable.frame.size.width, 0);
        WebServiceController *webServiceController = [WebServiceController new];
        webServiceController.getSkuDetailsDelegate = self;
        [webServiceController getSkuDetailsWithData:salesReportJsonString];
        [tempSkuArrayList removeAllObjects];
        [filteredSkuArrayList removeAllObjects];
        [skuArrayList removeAllObjects];
        
        
    } @catch (NSException *exception) {
        [HUD setHidden:YES];
        
    } @finally {
        
    }
}
#pragma mark - Get SKU Details Service Reposnse Delegates

- (void)getSkuDetailsSuccessResponse:(NSDictionary *)successDictionary
{
    @try {
        isScanningItem = TRUE;
        isItemScanned = false;
        if (successDictionary != nil) {
            if (![[successDictionary valueForKey:@"skuLists"] isKindOfClass:[NSNull class]]) {
                priceDic = [[NSMutableArray alloc]init];
                NSArray *price_arr = [successDictionary valueForKey:@"skuLists"];
                for (int i=0; i<price_arr.count; i++) {
                    
                    NSDictionary *json = price_arr[i];
                    [priceDic addObject:json];
                }
                if (((NSArray *)[successDictionary valueForKey:@"skuLists"]).count>1) {
                    
                    
                    
                    if (priceDic.count>0) {
                        //[HUD setHidden:YES];
                        transparentView.hidden = NO;
                        [priceTable reloadData];
                        SystemSoundID    soundFileObject1;
                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"popup_tune" withExtension: @"mp3"];
                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                        
                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                        AudioServicesPlaySystemSound (soundFileObject1);
                    }
                }
                else {
                    
                    //                if ([[[priceDic objectAtIndex:0] objectForKey:@"quantity"] floatValue] > 0) {
                    selected_SKID = [NSString stringWithFormat:@"%@",priceDic[0][@"skuId"]];
                    NSArray *temptaxArr = [priceDic[0] valueForKey:@"tax"];
                    NSString *itemString = @"";
                    
                    //changed by Srinivasulu on 30/08/2018....
                    float itemUnitPrice = [[self checkGivenValueIsNullOrNil:[[priceDic objectAtIndex:0] valueForKey:ITEM_UNIT_PRICE] defaultReturn:@"0.00"] floatValue];
                    float packSize = [[self checkGivenValueIsNullOrNil:[[priceDic objectAtIndex:0] valueForKey:Pack_Size] defaultReturn:@"1"] floatValue];
                    
                    if(packSize > 0)
                        itemUnitPrice = itemUnitPrice / packSize;
                    
                    
                    if (temptaxArr.count > 0) {
                        
                        //                        itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",[priceDic[0][@"quantity"] floatValue],@"#",[priceDic[0][@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",[priceDic[0][@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[priceDic[0][@"tax"][0] valueForKey:@"taxRate"] doubleValue]], @"#", [priceDic[0] valueForKey:@"pluCode"], @"#", [[priceDic[0] valueForKey:@"price"] floatValue]];
                        
                        
                        // added by roja on 20/11/2019...
//                            NSString * itemTypeStr = [self checkGivenValueIsNullOrNil:[[priceDic objectAtIndex:0] valueForKey:@"itemType"] defaultReturn:@""];

                        itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",[priceDic[0][@"quantity"] floatValue],@"#",itemUnitPrice, @"#", [NSString stringWithFormat:@"%@",[priceDic[0][@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[priceDic[0][@"tax"][0] valueForKey:@"taxRate"] doubleValue]], @"#", [priceDic[0] valueForKey:@"pluCode"], @"#", itemUnitPrice]; // @"#" , itemTypeStr added by roja on 20/11/2019...
                        
                    }
                    else {
                        //                        itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",[priceDic[0][@"quantity"] floatValue],@"#",[priceDic[0][@"price"] floatValue], @"#",[NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00], @"#", [priceDic[0] valueForKey:@"pluCode"], @"#", [[priceDic[0] valueForKey:@"price"] floatValue]];
                        
                        // added by roja on 20/11/2019...
//                            NSString * itemTypeStr = [self checkGivenValueIsNullOrNil:[[priceDic objectAtIndex:0] valueForKey:@"itemType"] defaultReturn:@""];
                        
                        itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",priceDic[0][@"description"],@"#",priceDic[0][@"description"],@"#",[priceDic[0][@"quantity"] floatValue],@"#",itemUnitPrice, @"#",[NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00], @"#", [priceDic[0] valueForKey:@"pluCode"], @"#", itemUnitPrice];// @"#" , itemTypeStr added by roja on 20/11/2019...
                        
                    }
                    
                    //added by Srinivasulu on 27/06/2017....
                    
                    //                    hsnArr = [self checkGivenValueIsNullOrNil:[priceDic valueForKey:HSN_CODE] defaultReturn:@""];
                    
                    //upto here on 27/06/2017....
                    
                    selected_desc = [[NSString stringWithFormat:@"%@",priceDic[0][@"description"]] copy];
                    selected_price = [[NSString stringWithFormat:@"%.2f",[priceDic[0][@"price"] floatValue]] copy];
                    selectedPluCode = [priceDic[0][@"pluCode"] copy];
                    
                    [self getSkuDetailsHandler:itemString productInfo:priceDic[0]];
                    
                    //added by Srinivasul on 23/10/2017....
                    
                    //                    if([cartTotalItems count])
                    
                    //upto here on 23/10/2017.....
                    
                    //commented by Srinivauslu on 19/12/2017....
                    //reason is it was already calling in skuProductInfo....
                    [self getDealsAndOffersSuccessResponse:[successDictionary valueForKey:@"applyCampaigns"]];
                    
                    [HUD setHidden:YES];
                    //                }
                    //                else{
                    //                    [HUD setHidden:YES];
                    //                    UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    //                    [alert show];
                    //                }
                }
            }
            
            else {
                // [MBProgressHUD hideHUDForView:self.view animated:YES];
                [HUD setHidden:YES];
                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                //                                }
            }
            
            //added by Srinivasulu on 28/08/2018....
            if(isHybirdMode && !isHybirdCallFailed && [priceDic count] > 0){
                
                if(offline == nil)
                    offline = [OfflineBillingServices new];
                
                NSArray * tempArr = [NSArray arrayWithArray:priceDic];
                [offline saveInformationInHybirdMode:tempArr];
                
                isHybirdCallFailed = true;
            }
        }
        else {
            // [MBProgressHUD hideHUDForView:self.view animated:YES];
            [HUD setHidden:YES];
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception.description);
    } @finally {
        //added by Srinivasulu on 24/03/2018 && 28/08/2018....
        if(isHybirdMode)
            isHybirdCallFailed = true;
    }
}

/**
 * @description  here we are handling the service call response received from service end....
 * @date
 * @method       getSkuDetailsErrorResponse:
 * @author
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 27/06/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message....  not completed....
 *
 */

- (void)getSkuDetailsErrorResponse:(NSString *)failureString {
    
    @try {
        
        //added by Srinivasulu on 27/06/2017....
        
        isFreeItemAdded = false;
        
        //upto here on 27/06/2017....
        
        isScanningItem = TRUE;
        isItemScanned = false;
        [HUD setHidden:YES];
        [MBProgressHUD hideHUDForView:self.view animated:YES];
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:failureString message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    } @catch (NSException *exception) {
        
    } @finally {
        //added by Srinivasulu on 24/03/2018 && 28/08/2018....
        if(isHybirdMode)
            isHybirdCallFailed = true;
    }
}

#pragma -mark End of Get SKU Details Service Reposnse Delegates

#pragma -mark Get Deals And Offers Service Reposnse Delegates

- (void)getDealsAndOffersSuccessResponse:(NSDictionary *)successDictionary {
    
    @try {
        
        isScanningItem = TRUE;
        
        isFreeItemAdded = false;
        
        isItemScanned = false;
        
        NSLog(@"%@",successDictionary);
        
        if (successDictionary != nil) {
            onlineDealDiscountPriceArr = [NSMutableArray new];
            onlineOfferDiscountPriceArr = [NSMutableArray new];
            totalDealSkusArr = [NSMutableArray new];
            appliedOfferIdsArr = [NSMutableArray new];
            appliedDealIdsArr = [NSMutableArray new];
            turnOverFreeItemsDesc = [NSMutableArray new];
            
            
            //added by Srinivasulu on 26/07/2017....
            
            turnOverOfferIdsDic  = [NSMutableDictionary new];;
            
            //upto here on 77/07/2017....
            
            if (successDictionary.count>0 && successDictionary!=(NSDictionary *)[NSNull null]) {
                if (![[successDictionary valueForKey:@"dealDiscount"] isKindOfClass:[NSNull class]]) {
                    onlineDealDiscountPriceArr = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"dealDiscount"]];
                }
                if (![[successDictionary valueForKey:@"mProductOfferPrice"] isKindOfClass:[NSNull class]]) {
                    onlineOfferDiscountPriceArr = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"mProductOfferPrice"]];
                }
                if (![[successDictionary valueForKey:@"dealsList"] isKindOfClass:[NSNull class]]) {
                    totalDealsArr = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"dealsList"]];
                }
                if (![[successDictionary valueForKey:@"offerList"] isKindOfClass:[NSNull class]]) {
                    totalOffersArr = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"offerList"]];
                }
                if (![[successDictionary valueForKey:@"dealSkuListAll"] isKindOfClass:[NSNull class]]) {
                    totalDealSkusArr = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"dealSkuListAll"]];
                }
                if (![[successDictionary valueForKey:@"appliedDealIdList"] isKindOfClass:[NSNull class]]) {
                    appliedDealIdsArr = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"appliedDealIdList"]];
                }
                
                if (![[successDictionary valueForKey:@"dealPromoSkusArr"] isKindOfClass:[NSNull class]]) {
                    dealPromItemsList = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"dealPromoSkusArr"]];
                }
                
                // added by sonali
                
                //changed by Srinivasulu on 26/07/2017....
                
                if ((![[successDictionary valueForKey:@"appliedOfferIdsArr"] isKindOfClass:[NSNull class]]) && ([successDictionary.allKeys containsObject:@"appliedOfferIdsArr"])) {
                    appliedOfferIdsArr = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"appliedOfferIdsArr"]];
                }
                
                //added by Srinivasulu on 26/07/2017....
                
                else if ((![[successDictionary valueForKey:@"discountIdArrayList"] isKindOfClass:[NSNull class]]) && ([successDictionary.allKeys containsObject:@"discountIdArrayList"])) {
                    appliedOfferIdsArr = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"discountIdArrayList"]];
                }
                
                //upto here on 26/07/2017....
                
                
                if (![[successDictionary valueForKey:@"dealSkuListAll"] isKindOfClass:[NSNull class]]) {
                    totalDealSkusArr = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"dealSkuListAll"]];
                }
                turnoverofferDiscount = [successDictionary[@"turnOverOfferDsiscount"] floatValue];
                
                //added by Srinivasulu on 26/07/2017....
                
                @try {
                    
                    if ((![[successDictionary valueForKey:@"discountIdArrayList"] isKindOfClass:[NSNull class]]) && ([successDictionary.allKeys containsObject:@"discountIdArrayList"])) {
                        turnOverOfferIdsDic = [successDictionary[@"turnOverOffers"] mutableCopy];
                    }
                    
                    
                } @catch (NSException *exception) {
                    
                }
                
                
                //upto here on 26/07/2017....
                
                
                
                unAppliedDealIndex = [successDictionary[@"unAppliedDealIndex"] intValue];
                if ([[successDictionary valueForKey:@"turnOverFreeItem"] isKindOfClass:[NSNull class]] || [successDictionary valueForKey:@"turnOverFreeItem"] == nil) {
                    turnOverFreeItems = @"";
                }
                else {
                    turnOverFreeItems = [successDictionary valueForKey:@"turnOverFreeItem"];
                    turnOverFreeItemsDesc = [successDictionary valueForKey:@"turnOverFreeItemDesc"];
                }
                if (![[successDictionary valueForKey:@"availableDeals"] isKindOfClass:[NSNull class]]) {
                    if(isOfflineService){
                        itemWiseAvailableDeals = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"availableDeals"]];
                        unAppliedDealItemDic = [NSMutableDictionary new];
                        [unAppliedDealItemDic setValue:[successDictionary valueForKey:@"unAppliedDealSkus"] forKey:@"dealsSkuIds"];
                        [unAppliedDealItemDic setValue:[successDictionary valueForKey:@"unAppliedDealSkusDesc"] forKey:@"dealsSkuIdsDesc"];
                    }
                    else {
                        itemWiseAvailableDeals = [NSMutableArray new];
                        
                        unAppliedDealItemDic = [NSMutableDictionary new];
                        [unAppliedDealItemDic setValue:[successDictionary valueForKey:@"unAppliedDealSkus"] forKey:@"dealsSkuIds"];
                        [unAppliedDealItemDic setValue:[successDictionary valueForKey:@"unappliedSkuDescriptionList"] forKey:@"dealsSkuIdsDesc"];
                        
                        
                        NSMutableArray *dealsArray = [successDictionary valueForKey:@"availableDeals"];
                        
                        // [unAppliedDealItemDic setValue:[arr objectAtIndex:3] forKey:@"dealDescrition"];
                        
                        NSMutableDictionary *tempDealDic = [NSMutableDictionary new];
                        for (NSMutableArray *arr in dealsArray) {
                            NSMutableArray *tempDealsArray = [NSMutableArray new];
                            for (NSMutableDictionary *dealDic in arr) {
                                tempDealDic = [dealDic mutableCopy];
                                DealModel *dealModel = [[DealModel alloc] init];
                                dealModel.allowMultipleDiscounts = @([[dealDic valueForKey:@"allowMultipleDiscounts"] intValue]).boolValue;
                                dealModel.claimCoupons_int = @([[dealDic valueForKey:@"claimCoupons_int"] intValue]).boolValue;
                                dealModel.claimLoyaltypoints_int = @([[dealDic valueForKey:@"claimLoyaltypoints_int"] intValue]).boolValue;
                                dealModel.claimgiftvouchers_int = @([[dealDic valueForKey:@"claimgiftvouchers_int"] intValue]).boolValue;
                                dealModel.combo = @([[dealDic valueForKey:@"combo"] intValue]).boolValue;
                                dealModel.day1 = @([[dealDic valueForKey:@"day1"] intValue]).boolValue;
                                dealModel.day2 = @([[dealDic valueForKey:@"day2"] intValue]).boolValue;
                                dealModel.day3 = @([[dealDic valueForKey:@"day3"] intValue]).boolValue;
                                dealModel.day4 = @([[dealDic valueForKey:@"day4"] intValue]).boolValue;
                                dealModel.day5 = @([[dealDic valueForKey:@"day5"] intValue]).boolValue;
                                dealModel.day6 = @([[dealDic valueForKey:@"day6"] intValue]).boolValue;
                                dealModel.day7 = @([[dealDic valueForKey:@"day7"] intValue]).boolValue;
                                dealModel.dealCategory = [dealDic valueForKey:@"dealCategory"];
                                dealModel.dealDescription = [dealDic valueForKey:@"dealDescription"];
                                dealModel.dealEndTime = [dealDic valueForKey:@"dealEndTime"];
                                dealModel.dealGroupId = [dealDic valueForKey:@"dealGroupId"];
                                dealModel.dealID = [dealDic valueForKey:@"dealID"];
                                dealModel.dealImageColor = [dealDic valueForKey:@"dealImageColor"];
                                dealModel.dealImageSize = [dealDic valueForKey:@"dealImageSize"];
                                dealModel.dealImageText = [dealDic valueForKey:@"dealImageText"];
                                dealModel.dealImageTextFont = [dealDic valueForKey:@"dealImageTextFont"];
                                dealModel.dealName = [dealDic valueForKey:@"dealName"];
                                dealModel.dealPriceColor = [dealDic valueForKey:@"dealPriceColor"];
                                dealModel.dealPriceFont = [dealDic valueForKey:@"dealPriceFont"];
                                dealModel.dealPriceSize = [dealDic valueForKey:@"dealPriceSize"];
                                dealModel.dealPriceText = [dealDic valueForKey:@"dealPriceText"];
                                dealModel.dealStartTime = [dealDic valueForKey:@"dealStartTime"];
                                dealModel.dealStatus_int = @([[dealDic valueForKey:@"dealStatus_int"] intValue]).boolValue;
                                dealModel.dealEndDate = [dealDic valueForKey:@"endDate"];
                                dealModel.isBanner = @([[dealDic valueForKey:@"isBanner"] intValue]).boolValue;
                                dealModel.lowestPriceItem = @([[dealDic valueForKey:@"lowestPriceItem"] intValue]).boolValue;
                                dealModel.priority_int = @([[dealDic valueForKey:@"priority_int"] intValue]).boolValue;
                                dealModel.repeat = @([[dealDic valueForKey:@"repeat"] intValue]).boolValue;
                                dealModel.salePriceColor = [dealDic valueForKey:@"salePriceColor"];
                                dealModel.salePriceFont = [dealDic valueForKey:@"salePriceFont"];
                                dealModel.salePriceSize = [dealDic valueForKey:@"salePriceSize"];
                                dealModel.salePriceText = [dealDic valueForKey:@"salePriceText"];
                                dealModel.sellGroupId = [dealDic valueForKey:@"sellGroupId"];
                                dealModel.skusList = [dealDic valueForKey:@"skusList"];
                                dealModel.dealStartDate = [dealDic valueForKey:@"startDate"];
                                dealModel.storeLocation = [dealDic valueForKey:@"storeLocation"];
                                
                                [tempDealsArray addObject:dealModel];
                                
                            }
                            [itemWiseAvailableDeals addObject:tempDealsArray];
                        }
                    }
                }
                if (![[successDictionary valueForKey:@"availableOffers"] isKindOfClass:[NSNull class]]) {
                    if (isOfflineService) {
                        itemWiseAvailableOffers = [[NSMutableArray alloc] initWithArray:[successDictionary valueForKey:@"availableOffers"]];
                        
                    }
                    else {
                        itemWiseAvailableOffers = [NSMutableArray new];
                        NSMutableArray *offersArray = [successDictionary valueForKey:@"availableOffers"];
                        for (NSMutableArray *arr in offersArray) {
                            NSMutableArray *tempOffersArray = [NSMutableArray new];
                            for (NSDictionary *dealDic in arr) {
                                OfferModel *dealModel = [[OfferModel alloc] init];
                                dealModel.allowMultipleDiscounts = @([[dealDic valueForKey:@"allowMultipleDiscounts"] intValue]).boolValue;
                                dealModel.claimCoupons_int = @([[dealDic valueForKey:@"claimCoupons_int"] intValue]).boolValue;
                                dealModel.claimLoyaltypoints_int = @([[dealDic valueForKey:@"claimLoyaltypoints_int"] intValue]).boolValue;
                                dealModel.claimgiftvouchers_int = @([[dealDic valueForKey:@"claimgiftvouchers_int"] intValue]).boolValue;
                                dealModel.combo = @([[dealDic valueForKey:@"combo"] intValue]).boolValue;
                                dealModel.day1 = @([[dealDic valueForKey:@"day1"] intValue]).boolValue;
                                dealModel.day2 = @([[dealDic valueForKey:@"day2"] intValue]).boolValue;
                                dealModel.day3 = @([[dealDic valueForKey:@"day3"] intValue]).boolValue;
                                dealModel.day4 = @([[dealDic valueForKey:@"day4"] intValue]).boolValue;
                                dealModel.day5 = @([[dealDic valueForKey:@"day5"] intValue]).boolValue;
                                dealModel.day6 = @([[dealDic valueForKey:@"day6"] intValue]).boolValue;
                                dealModel.day7 = @([[dealDic valueForKey:@"day7"] intValue]).boolValue;
                                dealModel.offerCategory = [dealDic valueForKey:@"offerCategory"];
                                dealModel.offerDescription = [dealDic valueForKey:@"offerDescription"];
                                dealModel.offerEndTime = [dealDic valueForKey:@"offerEndTime"];
                                dealModel.offerID = [dealDic valueForKey:@"offerID"];
                                dealModel.offerImageColor = [dealDic valueForKey:@"offerImageColor"];
                                dealModel.offerImageSize = [dealDic valueForKey:@"offerImageSize"];
                                dealModel.offerImageText = [dealDic valueForKey:@"offerImageText"];
                                dealModel.offerImageTextFont = [dealDic valueForKey:@"offerImageTextFont"];
                                dealModel.offerName = [dealDic valueForKey:@"offerName"];
                                dealModel.offerPriceColor = [dealDic valueForKey:@"offerPriceColor"];
                                dealModel.offerPriceFont = [dealDic valueForKey:@"offerPriceFont"];
                                dealModel.offerPriceSize = [dealDic valueForKey:@"offerPriceSize"];
                                dealModel.offerPriceText = [dealDic valueForKey:@"offerPriceText"];
                                dealModel.offerStartTime = [dealDic valueForKey:@"offerStartTime"];
                                dealModel.offerStatus_int = @([[dealDic valueForKey:@"offerStatus_int"] intValue]).boolValue;
                                dealModel.offerEndDate = [dealDic valueForKey:@"endDate"];
                                dealModel.lowestPriceItem = @([[dealDic valueForKey:@"lowestPriceItem"] intValue]).boolValue;
                                dealModel.priority_int = @([[dealDic valueForKey:@"priority_int"] intValue]).boolValue;
                                dealModel.repeat = @([[dealDic valueForKey:@"repeat"] intValue]).boolValue;
                                dealModel.salePriceColor = [dealDic valueForKey:@"salePriceColor"];
                                dealModel.salePriceFont = [dealDic valueForKey:@"salePriceFont"];
                                dealModel.salePriceSize = [dealDic valueForKey:@"salePriceSize"];
                                dealModel.salePriceText = [dealDic valueForKey:@"salePriceText"];
                                dealModel.sellGroupId = [dealDic valueForKey:@"sellGroupId"];
                                dealModel.skusList = [dealDic valueForKey:@"skusList"];
                                dealModel.offerStartDate = [dealDic valueForKey:@"startDate"];
                                dealModel.storeLocation = [dealDic valueForKey:@"storeLocation"];
                                
                                [tempOffersArray addObject:dealModel];
                                //                                dealModel.allowMultipleDiscounts = [[NSNumber numberWithInt:[[dealDic valueForKey:@"allowMultipleDiscounts"] intValue]] boolValue];
                                //                                dealModel.claimCoupons_int = [[NSNumber numberWithInt:[[dealDic valueForKey:@"claimCoupons_int"] intValue]] boolValue];
                                //                                dealModel.claimLoyaltypoints_int = [[NSNumber numberWithInt:[[dealDic valueForKey:@"claimLoyaltypoints_int"] intValue]] boolValue];
                                //                                dealModel.claimgiftvouchers_int = [[NSNumber numberWithInt:[[dealDic valueForKey:@"claimgiftvouchers_int"] intValue]] boolValue];
                                //                                dealModel.combo = [[NSNumber numberWithInt:[[dealDic valueForKey:@"combo"] intValue]] boolValue];
                                //                                dealModel.day1 = [[NSNumber numberWithInt:[[dealDic valueForKey:@"day1"] intValue]] boolValue];
                                //                                dealModel.day2 = [[NSNumber numberWithInt:[[dealDic valueForKey:@"day2"] intValue]] boolValue];
                                //                                dealModel.day3 = [[NSNumber numberWithInt:[[dealDic valueForKey:@"day3"] intValue]] boolValue];
                                //                                dealModel.day4 = [[NSNumber numberWithInt:[[dealDic valueForKey:@"day4"] intValue]] boolValue];
                                //                                dealModel.day5 = [[NSNumber numberWithInt:[[dealDic valueForKey:@"day5"] intValue]] boolValue];
                                //                                dealModel.day6 = [[NSNumber numberWithInt:[[dealDic valueForKey:@"day6"] intValue]] boolValue];
                                //                                dealModel.day7 = [[NSNumber numberWithInt:[[dealDic valueForKey:@"day7"] intValue]] boolValue];
                                //                                dealModel.dealCategory = [dealDic valueForKey:@"dealCategory"];
                                //                                dealModel.dealDescription = [dealDic valueForKey:@"dealDescription"];
                                //                                dealModel.dealEndTime = [dealDic valueForKey:@"dealEndTime"];
                                //                                dealModel.dealGroupId = [dealDic valueForKey:@"dealGroupId"];
                                //                                dealModel.dealID = [dealDic valueForKey:@"dealID"];
                                //                                dealModel.dealImageColor = [dealDic valueForKey:@"dealImageColor"];
                                //                                dealModel.dealImageSize = [dealDic valueForKey:@"dealImageSize"];
                                //                                dealModel.dealImageText = [dealDic valueForKey:@"dealImageText"];
                                //                                dealModel.dealImageTextFont = [dealDic valueForKey:@"dealImageTextFont"];
                                //                                dealModel.dealName = [dealDic valueForKey:@"dealName"];
                                //                                dealModel.dealPriceColor = [dealDic valueForKey:@"dealPriceColor"];
                                //                                dealModel.dealPriceFont = [dealDic valueForKey:@"dealPriceFont"];
                                //                                dealModel.dealPriceSize = [dealDic valueForKey:@"dealPriceSize"];
                                //                                dealModel.dealPriceText = [dealDic valueForKey:@"dealPriceText"];
                                //                                dealModel.dealStartTime = [dealDic valueForKey:@"dealStartTime"];
                                //                                dealModel.dealStatus_int = [[NSNumber numberWithInt:[[dealDic valueForKey:@"dealStatus_int"] intValue]] boolValue];
                                //                                dealModel.dealEndDate = [dealDic valueForKey:@"dealEndDate"];
                                //                                dealModel.dealEndDate = [dealDic valueForKey:@"dealEndDate"];
                            }
                            [itemWiseAvailableOffers addObject:tempOffersArray];
                        }
                    }
                    
                }
                //                if (!([[successDictionary valueForKey:@"dealsList"] isKindOfClass:[NSNull class]]) && !([[successDictionary valueForKey:@"offersList"] isKindOfClass:[NSNull class]])) {
                //                    NSArray *dealDetails = [successDictionary valueForKey:@"dealsList"];
                //                    NSArray *offerList = [successDictionary valueForKey:@"offersList"];
                //                    turnOverDealVal = [[NSMutableArray alloc]init];
                //
                //                    if ([dealDetails count] != 0) {
                //
                //                        for (int i=0 ; i < [dealDetails count]; i++) {
                //
                //                            NSDictionary *tempDic = [dealDetails objectAtIndex:i];
                //
                //                            if (!([[tempDic valueForKey:@"dealCategory"] rangeOfString:@"turn"].location == NSNotFound)) {
                //
                //                                NSArray *arr = [tempDic valueForKey:@"rangeList"];
                //
                //                                NSDictionary *dealItem = [arr objectAtIndex:0];
                //                                [turnOverDealVal addObject:[tempDic valueForKey:@"dealSkus"] ];
                //                                [turnOverDealVal addObject:[[dealItem valueForKey:@"dealQuantity_float"] stringValue]];
                //                                turnOverDealDes = [dealItem valueForKey:@"description"];
                //                            }
                //                            else {
                //                                NSArray *arr = [tempDic valueForKey:@"rangeList"];
                //
                //                                NSDictionary *dealDic = [arr objectAtIndex:0];
                //
                //                                DealsController *_dealsController = [[DealsController alloc] init];
                //
                //                                dealItemsCount = [[NSMutableArray alloc] init];
                //                                dealSkuids = [[NSMutableArray alloc] init];
                //                                dealSkuCount = [[NSMutableArray alloc] init];
                //                                sellSkuIds = [[NSMutableArray alloc] init];
                //                                NSMutableDictionary *dealDesc = [[NSMutableDictionary alloc]init];
                //                                NSMutableArray *temp = [[NSMutableArray alloc]init];
                //
                //                                if ([dealDataItems count]) {
                //                                    for(int j=0;j<[dealDataItems count];j++) {
                //
                //                                        _dealsController = [dealDataItems objectAtIndex:j];
                //                                        NSMutableDictionary *dealDicController = _dealsController.productData;
                //
                //                                        for (int i=0; i<[[dealDicController allKeys] count]; i++) {
                //
                //                                            NSArray *itemArr = [dealDicController valueForKey:dealSkuId];
                //
                //                                            if ([itemArr count]!=0) {
                //                                                if ([itemArr containsObject:dealSkuId]) {
                //                                                    [dealDataItems removeObjectAtIndex:j];
                //                                                }
                //                                            }
                //                                        }
                //                                        [temp addObject:[[dealDic valueForKey:@"minimumPurchaseQuantity_float"]stringValue]];
                //                                        [temp addObject:[[dealDic valueForKey:@"dealQuantity_float"]stringValue]];
                //                                        [temp addObject:[tempDic valueForKey:@"dealSkus"]];
                //                                        [temp addObject:[dealDic valueForKey:@"description"]];
                //
                //                                        dealItemsCount = [temp copy];
                //                                        [dealDesc setValue:dealItemsCount forKey:dealSkuId];
                //                                        [dealSkuids  addObject:[dealDetails valueForKey:@"dealSkus"]];
                //                                        _dealsController.productData = dealDesc;
                //                                        [dealDataItems addObject:_dealsController];
                //                                    }
                //
                //                                }
                //                                else {
                //                                    [temp addObject:[[dealDic valueForKey:@"minimumPurchaseQuantity_float"]stringValue]];
                //                                    [temp addObject:[[dealDic valueForKey:@"dealQuantity_float"]stringValue]];
                //                                    [temp addObject:[tempDic valueForKey:@"dealSkus"]];
                //                                    [temp addObject:[tempDic valueForKey:@"dealDescription"]];
                //
                //                                    dealItemsCount = [temp copy];
                //
                //                                    [dealDesc setValue:dealItemsCount forKey:dealSkuId];
                //
                //
                //                                    [dealSkuids  addObject:[dealDetails valueForKey:@"dealSkus"]];
                //
                //                                    _dealsController.productData = dealDesc;
                //                                    [dealDataItems addObject:_dealsController];
                //
                //                                }
                //                            }
                //                        }
                //                    }
                //                    if ([offerList count]!=0) {
                //
                //                        for (int i=0; i<[offerList count]; i++) {
                //
                //                            NSDictionary *tempDic = [offerList objectAtIndex:i];
                //
                //                            if (!([[tempDic valueForKey:@"offerCategory"] rangeOfString:@"turn"].location == NSNotFound)) {
                //
                //
                //                                NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
                //
                //                                NSDictionary *offerValue = [arr objectAtIndex:0];
                //                                turnOverDis = [[[offerValue valueForKey:@"rewardValue"] stringValue] copy];
                //
                //                                offerDescStr = [offerValue valueForKey:@"description"];
                //                            }
                //                            else {
                //
                //                                NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
                //                                if ([arr count] > 0) {
                //                                    NSDictionary *offerDetails = [arr objectAtIndex:0];
                //                                    NSArray *temp = [NSArray arrayWithObjects:[[offerDetails valueForKey:@"rewardValue"] stringValue],[offerDetails valueForKey:@"description"], nil];
                //                                    [offerDic setObject:temp forKey:[tempDic valueForKey:@"sellSkuids"]];
                //                                }
                //                            }
                //                        }
                //                    }
                //                }
            }
        }
        
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception.name);
    }
    @finally {
        
        [HUD setHidden:YES];
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
        }
        else {
            cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
        }
        [cartTable reloadData];
        
        // before reloading the data reset the subtotal textfield
        scrollView.hidden = NO;
        cartTable.hidden = NO;
        if (!isOfflineService) {
            if (dealDataItems.count!=0) {                   //removing deals....
                
                for (int i = 0; i < dealDataItems.count; i++) {
                    
                    DealsController *_dealsController = dealDataItems[i];
                    _dealsController.isDealApplied = NO;
                }
            }
        }
        [self updateValues];
        [self updateItemScanTime];
        [self goToBottom];
        
        // continous camera to scan ..
        if (barcodeBtn.tag == 1) {
            //[self barcodeScanner:barcodeBtn];
        }
        
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound;
            
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
    
    }
}
- (void)getDealsAndOffersErrorResponse {
    
    isScanningItem = TRUE;
    
    isItemScanned = false;
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
    }
    else {
        cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
    }
    [cartTable reloadData];
    
    // before reloading the data reset the subtotal textfield
    scrollView.hidden = NO;
    cartTable.hidden = NO;
    if (!isOfflineService) {
        if (dealDataItems.count!=0) {                   //removing deals....
            
            for (int i = 0; i < dealDataItems.count; i++) {
                
                DealsController *_dealsController = dealDataItems[i];
                _dealsController.isDealApplied = NO;
            }
        }
        [self updateValues];
        [self updateItemScanTime];
        [self goToBottom];
    }
    [HUD setHidden:YES];
}

#pragma mark End of Get Deals And Offers Service Reposnse Delegates -

// Handle the response from createBilling.


/**
 * @description  Here we saving object into defaults....
 * @date
 * @method       createBillingHandler:-- billId:--
 * @author
 * @param        NSString
 * @param        NSString
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 23/08/2017....
 * @reason       added comments and exception handling and change the defaults as local varible  and also changed the ....
 *
 * @verified By
 * @verified On
 *
 */

// Commented by roja on 17/10/2019.. // reason :- createBillingHandler: method contains SOAP Service call .. so taken new method with same name(createBillingHandler:) method name which contains REST service call....
// At the time of converting SOAP call's to REST

//- (void) createBillingHandler: (NSString *)billDue billId:(NSString *)billID {
//
//    @try {
//
//        // hiding the HUD ..
//        [HUD setHidden:YES];
//
//        //commented by Srinivasulu on 23/08/2017...
//        //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
//        //    defaults = [NSUserDefaults standardUserDefaults];
//
//        NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
//
//        //upto here on 23/08/2017....
//
//        defaults = [NSUserDefaults standardUserDefaults];
//        [defaults removeObjectForKey:@"cartItems"];
//        if ([custID caseInsensitiveCompare:@"CID8995438"] == NSOrderedSame) {
//
//            [defaults setObject:[NSString stringWithFormat:@"%lld",[[defaults valueForKey:kLatestSerialBillId] longLongValue] + 1] forKey:kLatestSerialBillId];
//        }
//        [defaults synchronize];
//
//        [self updateHeaderValues];
//
//        //  if ([billDue floatValue]==0) {
//
//        if (eraseButton.tag == 1) {
//
//            //added by Srinivauslu on 26/04/2017 && 18/07/2017 && 23/04/2018...
//            billIDValue = @"";
//
//            [self updateBillCountAndTotal];
//
//            //upto here on 26/04/2017 && 18/07/2017 && 23/04/2018...
//
//            eraseButton.tag = 0;
//            return;
//        }
//        //
//        //    if ([billID rangeOfString:@"BL"].location == NSNotFound) {
//        //
//        //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//        //        [alert show];
//        //        SystemSoundID    soundFileObject1;
//        //        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
//        //        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//        //        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//        //        AudioServicesPlaySystemSound (soundFileObject1);
//        //
//        //        [segmentedControl setUserInteractionEnabled:TRUE];
//        //        return;
//        //    }
//        //    else
//        if (segment_index == 3) {
//
//
//            //changed by Srinivasulu on 05/02/2018....
//            if(isDuplicateBillIdResponse && !isOfflineService){
//
//                [HUD setHidden:YES];
//                HUD.labelText = NSLocalizedString(@"getting_bill_details_", nil);
//                [HUD setHidden:NO];
//
//                WebServiceController *service = [[WebServiceController alloc] init];
//                service.getBillsDelegate = self;
//                [service getDuplicateBillDetails:billIDValue];
//
//                return;
//            }
//
//            //upto here on 05/02/2018....
//
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Bill Saved" message:[NSString stringWithFormat:@"%@\t%@",@"Bill Id",billID] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//            [alert show];
//
//            SystemSoundID    soundFileObject1;
//            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
//            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//            AudioServicesPlaySystemSound (soundFileObject1);
//
//
//        }
//        else{
//
//            paymentView.backgroundColor = [UIColor blackColor];
//            paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
//            [giftVoucherArr removeAllObjects];
//
//            UILabel *label1 = [[UILabel alloc] init] ;
//
//            label1.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
//            label1.backgroundColor = [UIColor clearColor];
//            label1.textAlignment = NSTextAlignmentCenter;
//            label1.textColor = [UIColor whiteColor];
//
//            UILabel *label2 = [[UILabel alloc] init] ;
//
//            label2.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
//            label2.textAlignment = NSTextAlignmentCenter;
//            label2.backgroundColor = [UIColor whiteColor];
//            label2.alpha = 0.9f;
//            label2.textColor = [UIColor blackColor];
//
//
//            label1.text = @"Payment Successfull ";
//            label2.text = billID;
//            // button to make new fresh bill ..
//            pastBill = [UIButton buttonWithType:UIButtonTypeCustom];
//            [pastBill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
//            [pastBill setTitle:@"Open Bill"    forState:UIControlStateNormal];
//            pastBill.titleLabel.textAlignment = NSTextAlignmentLeft;
//            pastBill.titleLabel.textColor = [UIColor whiteColor];
//            pastBill.backgroundColor = [UIColor grayColor];
//
//            //button for past billing
//            //modified by sonali
//
//            newbill = [UIButton buttonWithType:UIButtonTypeCustom];
//            [newbill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
//            [newbill setTitle:@"New Bill"    forState:UIControlStateNormal];
//            newbill.titleLabel.textAlignment = NSTextAlignmentLeft;
//            newbill.titleLabel.textColor = [UIColor whiteColor];
//            newbill.backgroundColor = [UIColor grayColor];
//
//            paymentView.hidden = NO;
//
//            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                //img1.frame = CGRectMake(0, 0, 468, 400);
//                label1.font = [UIFont systemFontOfSize:25];
//                label1.frame = CGRectMake(0, 40, 468, 80);
//                label2.font = [UIFont systemFontOfSize:25];
//                label2.frame = CGRectMake(0, 160, 468, 80);
//                pastBill.layer.cornerRadius = 25.0f;
//                pastBill.titleLabel.font = [UIFont systemFontOfSize:25];
//                pastBill.frame = CGRectMake(50.0, 320.0, 150.0, 50.0);
//                newbill.layer.cornerRadius = 25.0f;
//                newbill.titleLabel.font = [UIFont systemFontOfSize:25];
//                newbill.frame = CGRectMake(260.0, 320.0, 150.0, 50.0);
//                if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
//
//                    paymentView.frame = CGRectMake(250, 150, 468, 400);
//
//                }
//                else {
//                    paymentView.frame = CGRectMake(150, 250, 468, 400);
//
//                }
//
//            }
//            else {
//
//                //img1.frame = CGRectMake(0, 0, 200, 200);
//                if (version >= 8.0) {
//                    label1.frame = CGRectMake(0, 20, 300, 40);
//                    label2.frame = CGRectMake(0, 80, 300, 40);
//                    pastBill.frame = CGRectMake(180.0, 150.0, 100.0, 30.0);
//                    pastBill.layer.cornerRadius = 15.0f;
//                    pastBill.titleLabel.font = [UIFont systemFontOfSize:15];
//                    newbill.frame = CGRectMake(10.0, 150.0, 100.0, 30.0);
//                    newbill.layer.cornerRadius = 15.0f;
//                    newbill.titleLabel.font = [UIFont systemFontOfSize:15];
//                    paymentView.frame = CGRectMake(10, 150, 300, 200);
//                }
//                else{
//                    label1.frame = CGRectMake(0, 20, 300, 40);
//                    label2.frame = CGRectMake(0, 80, 300, 40);
//                    pastBill.frame = CGRectMake(180.0, 150.0, 100.0, 30.0);
//                    pastBill.layer.cornerRadius = 15.0f;
//                    pastBill.titleLabel.font = [UIFont systemFontOfSize:15];
//                    newbill.frame = CGRectMake(10.0, 150.0, 100.0, 30.0);
//                    newbill.layer.cornerRadius = 15.0f;
//                    newbill.titleLabel.font = [UIFont systemFontOfSize:15];
//                    paymentView.frame = CGRectMake(10, 70, 300, 200);
//                }
//
//
//            }
//
//            //[paymentView addSubview:img1];
//            [paymentView addSubview:label1];
//            [paymentView addSubview:label2];
//            [paymentView addSubview:newbill];
//            [paymentView addSubview:pastBill];
//            [paymentView setUserInteractionEnabled:YES];
//            // [self.view addSubview:paymentView];
//
//            [segmentedControl setUserInteractionEnabled:TRUE];
//            [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
//            //[segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
//
//            // this value is to check whether bill is finished or not ..
//            segmentedControl.tag = 1;
//
//            SystemSoundID    soundFileObject1;
//            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
//            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
//            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
//            AudioServicesPlaySystemSound (soundFileObject1);
//
//            if(savebtn.tag == 1 || savebtn.tag == 2){
//
//
//                SalesServiceSvcSoapBinding *service = [SalesServiceSvc SalesServiceSvcSoapBinding] ;
//                SalesServiceSvc_getBillingDetails *aparams = [[SalesServiceSvc_getBillingDetails alloc] init];
//
//                NSArray *keys = @[@"billId",@"requestHeader"];
//                NSArray *objects = @[billIDValue,[RequestHeader getRequestHeader]];
//
//                NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
//
//                NSError * err;
//                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
//                NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//                aparams.saleID = salesReportJsonString;
//
//                @try {
//
//                    SalesServiceSvcSoapBindingResponse *response = [service getBillingDetailsUsingParameters:(SalesServiceSvc_getBillingDetails *)aparams];
//
//
//                    NSArray *responseBodyParts = response.bodyParts;
//
//                    for (id bodyPart in responseBodyParts) {
//                        if ([bodyPart isKindOfClass:[SalesServiceSvc_getBillingDetailsResponse class]]) {
//                            SalesServiceSvc_getBillingDetailsResponse *body = (SalesServiceSvc_getBillingDetailsResponse *)bodyPart;
//                            printf("\nresponse=%s",(body.return_).UTF8String);
//
//                            //                            [self getBillingDetailsHandler:body.return_];
//                        }
//                    }
//                }
//                @catch (NSException *exception) {
//
//                    [HUD setHidden:YES];
//                    NSLog(@"%@",exception);
//
//                }
//
//
//            }
//            [self newBill:(UIButton *)pastBill];
//        }
//
//        //        }
//
//    } @catch (NSException *exception) {
//
//    }
//    @finally{
//
//        // added by  srinivas...
//        if(salesOrderBookingTypeStr != nil || isOrderedBill)
//            if([salesOrderBookingTypeStr length] || isOrderedBill)
//                [self updateFBOrderDetails:FBOrderDetailsInfoDic];
//
//        //added by roja on 29/07/2019...
//        if(isToCallCreateWalletService){
//
//            [self createOrUpdateCustomerWallet];
//        }
//
//    }
//
//}


//createBillingHandler: method changed by roja on 17/10/2019.. // reason : removed SOAP service call related code and  added REST service call code...
// At the time of converting SOAP call's to REST

- (void) createBillingHandler: (NSString *)billDue billId:(NSString *)billID {
    
    @try {
        
        // hiding the HUD ..
        [HUD setHidden:YES];
        
        //commented by Srinivasulu on 23/08/2017...
        //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
        //    defaults = [NSUserDefaults standardUserDefaults];
        
        NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
        
        //upto here on 23/08/2017....
        
        defaults = [NSUserDefaults standardUserDefaults];
        [defaults removeObjectForKey:@"cartItems"];
        if ([custID caseInsensitiveCompare:@"CID8995438"] == NSOrderedSame) {
            
            [defaults setObject:[NSString stringWithFormat:@"%lld",[[defaults valueForKey:kLatestSerialBillId] longLongValue] + 1] forKey:kLatestSerialBillId];
        }
        [defaults synchronize];
        
        [self updateHeaderValues];
        
        //  if ([billDue floatValue]==0) {
        
        if (eraseButton.tag == 1) {
            
            //added by Srinivauslu on 26/04/2017 && 18/07/2017 && 23/04/2018...
            billIDValue = @"";
            
            [self updateBillCountAndTotal];
            
            //upto here on 26/04/2017 && 18/07/2017 && 23/04/2018...
            
            eraseButton.tag = 0;
            return;
        }
        //
        //    if ([billID rangeOfString:@"BL"].location == NSNotFound) {
        //
        //        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Bill Failed \n Try Again..." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [alert show];
        //        SystemSoundID    soundFileObject1;
        //        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
        //        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
        //        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
        //        AudioServicesPlaySystemSound (soundFileObject1);
        //
        //        [segmentedControl setUserInteractionEnabled:TRUE];
        //        return;
        //    }
        //    else
        if (segment_index == 3) {
            
            
            //changed by Srinivasulu on 05/02/2018....
            if(isDuplicateBillIdResponse && !isOfflineService){
                
                [HUD setHidden:YES];
                HUD.labelText = NSLocalizedString(@"getting_bill_details_", nil);
                [HUD setHidden:NO];
                
                WebServiceController *service = [[WebServiceController alloc] init];
                service.getBillsDelegate = self;
                [service getDuplicateBillDetails:billIDValue];
                
                return;
            }
            
            //upto here on 05/02/2018....
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Bill Saved" message:[NSString stringWithFormat:@"%@\t%@",@"Bill Id",billID] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            
            
        }
        else{
            
            paymentView.backgroundColor = [UIColor blackColor];
            paymentView.layer.borderColor = [UIColor whiteColor].CGColor;
            [giftVoucherArr removeAllObjects];
            
            UILabel *label1 = [[UILabel alloc] init] ;
            
            label1.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
            label1.backgroundColor = [UIColor clearColor];
            label1.textAlignment = NSTextAlignmentCenter;
            label1.textColor = [UIColor whiteColor];
            
            UILabel *label2 = [[UILabel alloc] init] ;
            
            label2.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
            label2.textAlignment = NSTextAlignmentCenter;
            label2.backgroundColor = [UIColor whiteColor];
            label2.alpha = 0.9f;
            label2.textColor = [UIColor blackColor];
            
            
            label1.text = @"Payment Successfull ";
            label2.text = billID;
            // button to make new fresh bill ..
            pastBill = [UIButton buttonWithType:UIButtonTypeCustom];
            [pastBill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
            [pastBill setTitle:@"Open Bill"    forState:UIControlStateNormal];
            pastBill.titleLabel.textAlignment = NSTextAlignmentLeft;
            pastBill.titleLabel.textColor = [UIColor whiteColor];
            pastBill.backgroundColor = [UIColor grayColor];
            
            //button for past billing
            //modified by sonali
            
            newbill = [UIButton buttonWithType:UIButtonTypeCustom];
            [newbill addTarget:self action:@selector(newBill:) forControlEvents:UIControlEventTouchUpInside];
            [newbill setTitle:@"New Bill"    forState:UIControlStateNormal];
            newbill.titleLabel.textAlignment = NSTextAlignmentLeft;
            newbill.titleLabel.textColor = [UIColor whiteColor];
            newbill.backgroundColor = [UIColor grayColor];
            
            paymentView.hidden = NO;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                //img1.frame = CGRectMake(0, 0, 468, 400);
                label1.font = [UIFont systemFontOfSize:25];
                label1.frame = CGRectMake(0, 40, 468, 80);
                label2.font = [UIFont systemFontOfSize:25];
                label2.frame = CGRectMake(0, 160, 468, 80);
                pastBill.layer.cornerRadius = 25.0f;
                pastBill.titleLabel.font = [UIFont systemFontOfSize:25];
                pastBill.frame = CGRectMake(50.0, 320.0, 150.0, 50.0);
                newbill.layer.cornerRadius = 25.0f;
                newbill.titleLabel.font = [UIFont systemFontOfSize:25];
                newbill.frame = CGRectMake(260.0, 320.0, 150.0, 50.0);
                if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                    
                    paymentView.frame = CGRectMake(250, 150, 468, 400);
                    
                }
                else {
                    paymentView.frame = CGRectMake(150, 250, 468, 400);
                    
                }
                
            }
            else {
                
                //img1.frame = CGRectMake(0, 0, 200, 200);
                if (version >= 8.0) {
                    label1.frame = CGRectMake(0, 20, 300, 40);
                    label2.frame = CGRectMake(0, 80, 300, 40);
                    pastBill.frame = CGRectMake(180.0, 150.0, 100.0, 30.0);
                    pastBill.layer.cornerRadius = 15.0f;
                    pastBill.titleLabel.font = [UIFont systemFontOfSize:15];
                    newbill.frame = CGRectMake(10.0, 150.0, 100.0, 30.0);
                    newbill.layer.cornerRadius = 15.0f;
                    newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                    paymentView.frame = CGRectMake(10, 150, 300, 200);
                }
                else{
                    label1.frame = CGRectMake(0, 20, 300, 40);
                    label2.frame = CGRectMake(0, 80, 300, 40);
                    pastBill.frame = CGRectMake(180.0, 150.0, 100.0, 30.0);
                    pastBill.layer.cornerRadius = 15.0f;
                    pastBill.titleLabel.font = [UIFont systemFontOfSize:15];
                    newbill.frame = CGRectMake(10.0, 150.0, 100.0, 30.0);
                    newbill.layer.cornerRadius = 15.0f;
                    newbill.titleLabel.font = [UIFont systemFontOfSize:15];
                    paymentView.frame = CGRectMake(10, 70, 300, 200);
                }
            }
            
            //[paymentView addSubview:img1];
            [paymentView addSubview:label1];
            [paymentView addSubview:label2];
            [paymentView addSubview:newbill];
            [paymentView addSubview:pastBill];
            [paymentView setUserInteractionEnabled:YES];
            // [self.view addSubview:paymentView];
            
            [segmentedControl setUserInteractionEnabled:TRUE];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:0];
            //[segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
            
            // this value is to check whether bill is finished or not ..
            segmentedControl.tag = 1;
            
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            
            if(savebtn.tag == 1 || savebtn.tag == 2){
              
                NSArray *keys = @[@"billId",@"requestHeader"];
                NSArray *objects = @[billIDValue,[RequestHeader getRequestHeader]];
                NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                
                NSError * err;
                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
                NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                
                WebServiceController * services = [[WebServiceController alloc] init];
                services.salesServiceDelegate = self;
                [services getBillingDetails:salesReportJsonString];
                
            }
            
            [self newBill:(UIButton *)pastBill];
            
        }
        
        //        }
        
    } @catch (NSException *exception) {
        
    }
    @finally{
        
        // added by  srinivas...
        if(salesOrderBookingTypeStr != nil || isOrderedBill)
            if([salesOrderBookingTypeStr length] || isOrderedBill)
                [self updateFBOrderDetails:FBOrderDetailsInfoDic];
        
        //added by roja on 29/07/2019...
        if(isToCallCreateWalletService){
            
            [self createOrUpdateCustomerWallet];
        }
    }
}


- (void)getBillingDetailsSuccessResponse:(NSDictionary *)successDictionary{
    
    @try {
        //                            [self getBillingDetailsHandler:body.return_];

    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}



- (void)getBillingDetailsErrorResponse:(NSString *)errorResponse{
    
    @try {
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}







// saving the entire bill in a single string ..


- (NSString *) saveBill {
    
    NSString *str = @"";
    
    for (int i = 0; i < cartTotalItems.count; i++) {
        
        NSArray *temp = [cartTotalItems[i] componentsSeparatedByString:@"#"];
        str  = [NSString stringWithFormat:@"%@%@%@", str, temp[0],@"#"];
        str  = [NSString stringWithFormat:@"%@%@%@", str, temp[2],@"#"];
        if (!billingStatus) {
            
            str  = [NSString stringWithFormat:@"%@%.2f%@", str, [temp[5] floatValue]*[temp[4] floatValue],@"#"];
            str  = [NSString stringWithFormat:@"%@%@%@", str, temp[5],@"#"];
        }
        else {
            
            str  = [NSString stringWithFormat:@"%@%d%@", str, [temp[3] intValue]*[temp[4] intValue],@"#"];
            str  = [NSString stringWithFormat:@"%@%@%@", str, temp[3],@"#"];
            
        }
        str  = [NSString stringWithFormat:@"%@%@%@", str, temp[1],@"#"];
        if ([isVoidedArray[i] boolValue]) {
            str = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@", str, temp[6], @"#", temp[7], @"#", @"void",@"#",temp[8], @"#", editedPriceArr[i],@"#",temp[9],@"#"];
        }
        else {
            str = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@", str, temp[6], @"#", temp[7], @"#", @" ",@"#",temp[8], @"#", editedPriceArr[i],@"#",temp[9],@"#"];
        }
        str = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@", str, temp[6], @"#", temp[7], @"#", @" ",@"#",temp[8], @"#", editedPriceArr[i],@"#",temp[9],@"#",itemPromoFlagArr[i],@"#@"];
    }
    return str;
}


- (NSString *) emailBill:(NSString *)imgId {
    
    // getting present date & time ..
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"yyyy/MM/dd HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    
    // NSString *urlAddress = @"http://upload.wikimedia.org/wikipedia/en/1/11/HeritageFoodslogo.jpg";
    //  NSURL *url = [NSURL URLWithString:urlAddress];
    
    NSString *str = [NSString stringWithFormat:@"<html><body><span style = 'font-family: sans-serif;font-weight:18px'>Hi ,</span></br></br><table style='left-margin:20px;'><tr><td ><img src='cid:%@' width='350' height='100'></td><td style=' font-face :Arial; size :20px;'><b>Chai's Dosa Magic,<br/>#95, 60 feet Road, 6th Block<br/>(opp, Anand sweet) Koramangala<br/>Bangalore-560095.<br/>Ph:080-40973766.</b></td></tr></table>",imgId];
    
    
    str = [NSString stringWithFormat:@"%@%@",str,@"<span style = ' border:1px padding-top: 5px;margin-left:100px'  bgcolor = '#000000' ><b> Billing Details </b></span> <br><br>"];
    
    str = [NSString stringWithFormat:@"%@%@",str,@"<table border='1px' width='400'><tr align='center' bgcolor = '#0A3D7F'><th style = 'color:white;height:15px'>S No</th><th style = 'color:white;height:15px'>Item</th><th style = 'color:white;height:15px'>Price</th><th style = 'color:white;height:15px'>Quantity</th><th style = 'color:white;height:15px'>Amount</th></tr>"];
    
    for (int i = 0; i < cartItem.count; i++) {
        
        NSArray *temp = [cartItem[i] componentsSeparatedByString:@"#"] ;
        if (i%2 == 0) {
            str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
        }
        else{
            str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr height='20px' align='center' bgcolor = 'white' ><td style = 'color:gray'>",i+1,@"</td>"];
        }
        str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[1],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@%@", str,@"<td style = 'color:gray'>",@"Rs.",temp[4],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>", temp[5],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[4],@"</td></tr>"];
    }
    
    
    str = [NSString stringWithFormat:@"%@%@",str,@"</table><br><br>"];
    str = [NSString stringWithFormat:@"%@%@%@%@", str, @"<span style = 'margin-left:240px;color:gray'><b>Total Amount   :&nbsp;&nbsp;Rs.</b> ", totalTxt.text,@"/- </span><br/><br/>"];
    
    str = [NSString stringWithFormat:@"%@%@",str,@"<span style = ' border:1px padding-top: 5px;margin-left:100px' bgcolor = '#000000' ><b> Transaction Details</b></span> <br><br>"];
    
    
    str = [NSString stringWithFormat:@"%@%@",str,@"<table border='1px' width='450px'><tr align='center' bgcolor = '#0A3D7F'><th style = 'color:white; height:15px'>S No</th><th style = 'color:white;height:15px'>Tax Id</th><th style = 'color:white;height:15px'>Date</th><th style = 'color:white;height:15px'>Payment Mode</th><th style = 'color:white;height:15px'>Amount</th></tr>"];
    
    for (int i=0; i<transactionArray.count; i++) {
        
        NSArray *temp = transactionArray[i] ;
        if (i%2 == 0) {
            str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr  height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
        }
        else{
            str  = [NSString stringWithFormat:@"%@%@%d%@", str, @"<tr  height='20px' align='center' bgcolor = 'white'><td style = 'color:gray'>",i+1,@"</td>"];
        }
        str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[0],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>",temp[6],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str,@"<td style = 'color:gray'>", temp[1],@"</td>"];
        str  = [NSString stringWithFormat:@"%@%@%@%@", str, @"<td style = 'color:gray'>",temp[5],@"</td></tr>"];
        
    }
    str = [NSString stringWithFormat:@"%@%@",str,@"</table><br><br>"];
    
    
    str =  [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px; color:gray'> Deal-Offer  &nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right;color:black'> Rs. &nbsp;",dealoroffersTxt.text,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px;color:gray'>Sub-Total &nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right'>  Rs.&nbsp;",subtotalTxt.text,@"/-</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px; color:gray'> Tax(5.5%)  &nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right;color:black'> Rs. &nbsp;" ,tax_Value,@"/-</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px; color:gray'>Total Bill &nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right'>  Rs. &nbsp; ", totalTxt.text,@"/-</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@", str, @" <span style = 'margin-left :230px; color:gray'>BillDue  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right'> Rs.&nbsp; ", finalBillDue,@"/-</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@", str, @"<span style = 'margin-left :230px; color:gray'> Bill Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>",@"<span style = 'align:right'>",currentdate ,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@", str, @"<span style = 'margin-left :230px; color:gray'>Customer Name  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span> ",@"<span style = 'align:right'>", nametext.text,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@", str, @"<span style = 'margin-left :230px; color:gray'>Bill Done by  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>",@"<span style = 'align:right'>",   user_name,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@%@%@",str,@"<span style = 'margin-left :230px; color:gray'>  Bill ID &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span>",@"<span style = 'align:right'>" ,   billIDValue,@"</span><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@",str,@"<span style = 'color:gray'><b> Bill Done!!!",@"</b></span><br><br><br>"];
    
    str = [NSString stringWithFormat:@"%@%@%@", str, @"<span style = 'color:gray'>Thank you.Visit Again..!!",@"</span></body></html>"];
    
    return str;
}



- (void) newBill:(id) sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    //    // removing all views on paymentView ..
    if (paymentView.subviews){
        for (UIView *subview in paymentView.subviews) {
            [subview removeFromSuperview];
        }
    }
    //
    paymentView.hidden = YES;
    
    segmentedControl.tag = 0;
    [segmentedControl setUserInteractionEnabled:TRUE];
    [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
    
    if(!isNewReturnBill)
        [segmentedControl setEnabled:TRUE forSegmentAtIndex:3];
    
    
    mainBackbutton.enabled = TRUE;
    mainBackbutton.userInteractionEnabled = TRUE;
    
    billTypeStatus = TRUE;
    changeReturnStatus = TRUE;
    cartItem = nil;
    filteredSkuArrayList = nil;
    
    self.navigationItem.backBarButtonItem.tintColor = [UIColor blackColor];
    self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Back" style:UIBarButtonItemStyleBordered target:nil action:nil] ;
    
    if ((UIButton *)sender == newbill) {
        
        BillingHome *bh = [[BillingHome alloc] init] ;
        billIDValue = @"";
        billingStatus = FALSE;
        
        [self.navigationController pushViewController:bh animated:YES];
    }
    else {
        //changed by Srinivasulu on 04/02/2018....
        if(isDuplicateBillIdResponse && !isOfflineService){
            
            [HUD setHidden:YES];
            HUD.labelText = NSLocalizedString(@"getting_bill_details_", nil);
            [HUD setHidden:NO];
            
            WebServiceController *service = [[WebServiceController alloc] init];
            service.getBillsDelegate = self;
            [service getDuplicateBillDetails:billIDValue];
            
            return;
        }
        else{
            //upto here on 04/02/2018....
            
            typeBilling = @"past";
            
            if (finalBillDue.floatValue>0) {
                
                typeBilling = @"pending";
                
            }
            PastBilling *pbh = [[PastBilling alloc] initWithBillType:billIDValue] ;
            pbh.billingType = @"past";
            
            //changed by Srinivasulu on 24/04/2017...
            //        pbh.billingType = typeBilling;
            
            
            //changed by Srinivasulu on 24/08/2017...
            
            pbh.billTypeStr = NSLocalizedString(@"past_bill", nil);
            
            if (finalBillDue.floatValue>0)
                pbh.billTypeStr = NSLocalizedString(@"pending_bills", nil);
            
            //upto here on 24/08/2017....
            
            
            //upto here on 24/04/2017....
            
            
            pbh.isBillSummery = false;
            [self.navigationController pushViewController:pbh animated:YES];
            billIDValue = @"";
        }
    }
    
}




//   smtp mail delegate methods ..
// email id validation method  ..

- (BOOL) validateEmail: (NSString *) emailID {
    NSString *regex1 = @"\\A[a-z0-9]+([-._][a-z0-9]+)*@([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,4}\\z";
    NSString *regex2 = @"^(?=.{1,64}@.{4,64}$)(?=.{6,100}$).*";
    NSPredicate *test1 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regex1];
    NSPredicate *test2 = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regex2];
    return [test1 evaluateWithObject:emailID] && [test2 evaluateWithObject:emailID];
}


- (void)messageSent
{
    
    [HUD setHidden:YES];
    
    // [message release];
    
    label_1 = [[UILabel alloc] init];
    label_1.text = @"Mail Sent";
    label_1.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    label_1.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    label_1.backgroundColor = [UIColor clearColor];
    label_1.textAlignment = NSTextAlignmentCenter;
    label_1.textColor = [UIColor blackColor];
    
    mailView.hidden = NO;
    
    //[self setSiblings:mailView enabled:TRUE]; paymentView
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        label_1.font = [UIFont systemFontOfSize:30];
        label_1.frame = CGRectMake(40, 10, 330, 40);
        if(savebtn.tag == 1 || savebtn.tag == 2){
            paymentView.frame = CGRectMake(150, 250, 468, 400);
        }
        else{
            mailView.frame = CGRectMake(220, 300, 330, 200);
        }
    }
    else {
        
        if(savebtn.tag == 1 || savebtn.tag == 2){
            
            label_1.frame = CGRectMake(40, 4, 120, 30);
            label_2.layer.borderColor = [UIColor blackColor].CGColor;
            label_2.layer.borderWidth = 1;
            label_2.layer.cornerRadius = 3;
            paymentView.frame = CGRectMake(60, 110, 200, 200);
        }
        else{
            
            label_1.frame = CGRectMake(5, 10, 120, 30);
            mailView.frame = CGRectMake(100, 150, 120, 60);
        }
    }
    if(savebtn.tag == 1 || savebtn.tag == 2){
        [paymentView addSubview:label_1];
        aTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(runScheduledTask:) userInfo:@"paymentView" repeats:NO];
        mailView.hidden = YES;
        savebtn.tag = 0;
    }
    else{
        [mailView addSubview:label_1];
        aTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(runScheduledTask:) userInfo:@"mailView" repeats:NO];
    }
}

- (void)messageFailed
{
    
    [HUD setHidden:YES];
    
    //[message release];
    
    label_2 = [[UILabel alloc] init] ;
    label_2.text = @"Mail Failed";
    label_2.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:16];
    label_2.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16];
    label_2.backgroundColor = [UIColor clearColor];
    label_2.textAlignment = NSTextAlignmentCenter;
    label_2.textColor = [UIColor blackColor];
    
    mailView.hidden = NO;
    
    //[self setSiblings:mailView enabled:TRUE];
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        label_2.font = [UIFont systemFontOfSize:30];
        label_2.frame = CGRectMake(30, 10, 330, 40);
        if(savebtn.tag == 1 || savebtn.tag == 2){
            paymentView.frame = CGRectMake(150, 250, 468, 400);
        }
        else{
            mailView.frame = CGRectMake(220, 300, 330, 200);
        }
    }
    else {
        
        if(savebtn.tag == 1 || savebtn.tag == 2){
            
            label_2.frame = CGRectMake(40, 4, 120, 30);
            label_2.layer.borderColor = [UIColor blackColor].CGColor;
            label_2.layer.borderWidth = 1;
            label_2.layer.cornerRadius = 3;
            paymentView.frame = CGRectMake(60, 110, 200, 200);
        }
        else{
            
            label_2.frame = CGRectMake(5, 10, 120, 30);
            mailView.frame = CGRectMake(100, 150, 120, 60);
        }
    }
    if(savebtn.tag == 1 || savebtn.tag == 2){
        [paymentView addSubview:label_2];
        aTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(runScheduledTask:) userInfo:@"paymentView" repeats:NO];
        mailView.hidden = YES;
        savebtn.tag = 0;
    }
    else{
        [mailView addSubview:label_2];
        aTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(runScheduledTask:) userInfo:@"mailView" repeats:NO];
    }
    
    //aTimer = [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(runScheduledTask:) userInfo:@"mailView" repeats:NO];
    
}


// sktp delegate methods finished ..




#pragma mark Table view methods
//changed by Srinivasulu on order of tableview methods on 23/11/2017....


- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    if (tableView == productMenuTbl) {
        
        return categoriesArr.count;
        
    }
    else {
        return 1;
    }
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    
    if (tableView == cartTable) {
        isToScrollViewBillItemsAutomatically = true;
        return cartTotalItems.count;
    }
    else if (tableView == priceTable){
        return priceDic.count;
    }
    else if (tableView == giftTypeTableView) {
        return giftTypeArrayList.count;
    }
    else if (tableView == couponDeatails) {
        
        return couponArr.count;
    }
    else if (tableView == couponType){
        
        return cupon_type.count;
    }
    else if (tableView == valueTable){
        
        return value_arr.count;
    }
    else if (tableView == reasonsTable) {
        return discountReasons.count;
    }
    else if(tableView == allDealsOffersTable) {
        return displayingDealsOffersArr.count;
    }
    else if(tableView == freeItemsTbl){
        return unappliedDealsSkuIdArr.count;
        
    }
    
    else if (tableView == deprtmntTbl) {
        return departmentArr.count;
    }
    else if (tableView == subDepartmentTbl) {
        return subDepartmentArr.count;
    }
    
    
    else if (tableView == salesPersonTbl){
        
        return employeeIdsArr.count;
    }
    else if (tableView == deliveryPersonTbl){ // added by sai
        return deliveryPersonIDArr.count;
    }
    else if(tableView == productMenuTbl) {
        if (self.isOpen) {
            if (self.selectIndex.section == section) {
                return 1+1;
            }
        }
        return 1;
    }
    else if (tableView == subCategoryTbl){
        return subCategoriesArr.count;
        
    }
    
    //added by Srinivasulu on 21/08/2017 & 06/09/2017 & 07/09/2017 & 01/06/2018 & 03/09/2018....
    
    else if(tableView == editPriceReasonTbl){
        
        return editPriceReasonArr.count;
    }
    
    else if(tableView == voidItemReasonsTbl){
        
        if(voidItemReasonsTbl.tag == 2){
            
            return isVoidItemArr.count;
        }
        else{
            
            return itemVoidReasonsArr.count;
        }
    }
    
    else if(tableView == itemCancelReasonsTbl){
        
        return itemCancelReasonArr.count;
    }
    else if(tableView == denominstaionsTypeTbl){
        
        return denominationsTypeArr.count;
    }
    else if(tableView == cardTypesTbl){
        
        return cardTypesArr.count;
    }
    
    else if(tableView == otherPaymentsDetailsTbl){
        
        return otherPaymentsDeatilsArr.count;
    }
    
    else if(tableView == otherPaymentsOptionsTbl){
        
        return otherPaymentsOptionsArr.count;
    }
    else if(tableView == listOfCustomerPurchasesTbl){
        
        return listOfCustomerPurchasesArr.count;
    }
    else if (tableView == memberShipTypeTbl) {
        
        return memberShipTypeArr.count;
    }
    //upto here on 21/08/2017 & 06/09/2017 & 07/09/2017 & 01/06/2018 & 03/09/2018....
    
    //added By Bhargav.v on 28/02/2018...
    else if (tableView == orderItemDetailsTable) {
        
        return itemListArray.count;
    }
    else if (tableView == ordersPagenationTable) {
        
        return orderListArr.count;
    }
    //up to here on 28/02/2018...
    
    else {
        return filteredSkuArrayList.count;
    }
    
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        if (tableView == priceTable) {
            
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                
                return 50.0;
                
            }
            else {
                return 66.0;
                
            }
            
        }
        else if (tableView == cartTable) {
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                
                return 40.0;
                
            }
            else {
                return 66.0;
                
            }
        }
        else if(tableView == giftTypeTableView) {
            return 40.0;
        }
        else if (tableView == allDealsOffersTable){
            return 50.0;
        }
        else if(tableView == freeItemsTbl){
            
            return 50;
        }
        else if (tableView == deprtmntTbl) {
            return 50;
        }
        else if (tableView == salesPersonTbl) {
            return 50;
        }
        else if (tableView == deliveryPersonTbl) { // added by sai
            return 50;
        }
        
        else if (tableView == productMenuTbl) {
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (indexPath.row == 0) {
                    return 50;
                }
                
                else{
                    
                    if (!isGridView){
                        if (!isGridView)
                            return  40 * 5 + 10;
                        
                        else
                            return 40 *subCategoriesArr.count  + 10;
                        
                    }
                    else{
                        
                        float count = [categoriesArr[self.selectIndex.section] count]/2.0;
                        
                        
                        if (count == 0) {
                            
                            return 110;
                        }
                        else {
                            return 160*ceil(@(count).doubleValue);
                        }
                        
                        
                    }
                    
                    
                    
                }
            }
            else {
                if (indexPath.row == 0) {
                    return 30;
                }
                else{
                    if (subCategoriesArr.count > 4 ) {
                        return 30 * 4;
                    }
                    
                    return subCategoriesArr.count * 40;
                }
            }
        }
        else if (tableView == subCategoryTbl){
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                return 50;
                
            }
            else return 45.0;
        }
        
        //added by Srinivasulu on 03/08/2017 & 21/08/2017 & 06/09/2017 & 07/09/2017....
        
        else if(tableView == reasonsTable){
            
            return 40;
        }
        
        else if(tableView == editPriceReasonTbl){
            
            return 40;
        }
        
        else if(tableView == voidItemReasonsTbl){
            
            return 40;
        }
        
        else if(tableView == itemCancelReasonsTbl){
            
            return 40;
        }
        else if(tableView == denominstaionsTypeTbl){
            
            return 40;
        }
        else if(tableView == cardTypesTbl){
            
            return 40;
        }
        else if(tableView == otherPaymentsDetailsTbl){
            
            return 40;
        }
        else if(tableView == otherPaymentsOptionsTbl){
            
            return 40;
        }
        else if(tableView == listOfCustomerPurchasesTbl){
            
            return 40;
        }
        else if (tableView == memberShipTypeTbl) {
            
            return 40;
        }
        //upto here on 03/08/2017 & 21/08/2017 & 06/09/2017 & 07/09/2017 & 03/09/2018....
        
        //added By Bhargav.v on 28/02/2018....
        
        else if( tableView == orderItemDetailsTable || tableView == ordersPagenationTable) {
            
            return 28;
        }
        
        //up to here on  28/02/2018....
        
        else {
            return 45.0;
        }
        
    }
    else {
        if (tableView == cartTable) {
            return 28.0;
        }
        else if(tableView == giftTypeTableView) {
            return 28.0;
        }
        else {
            return 28.0;
        }
    }
    
    return false;
}


// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    if (tableView == cartTable) {
        
        tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    }
    
    if (tableView == cartTable) {
        
        @try {
            
            static NSString *hlCellID = @"hlCellID";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
            
            if ((hlcell.contentView).subviews){
                
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            if(hlcell == nil) {
                hlcell =  [[UITableViewCell alloc]
                           initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
                hlcell.accessoryType = UITableViewCellAccessoryNone;
            }
            
            BOOL status = FALSE;
            
            @try {
                
                NSArray *temp = [cartTotalItems[indexPath.row] componentsSeparatedByString:@"#"];
                
                //added by Srinivasulu on 12/09/2017....
                
                UILabel * itemMrpLbl;
                UILabel * offerDiscountLbl;
                UILabel * itemNetCostLbl;
                
                itemMrpLbl = [[UILabel alloc] init] ;
                itemMrpLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                itemMrpLbl.layer.borderWidth = 1.5;
                itemMrpLbl.backgroundColor = [UIColor clearColor];
                itemMrpLbl.textAlignment = NSTextAlignmentCenter;
                itemMrpLbl.numberOfLines = 2;
                itemMrpLbl.textColor = [UIColor whiteColor];
                itemMrpLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:12];
                
                offerDiscountLbl = [[UILabel alloc] init] ;
                offerDiscountLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                offerDiscountLbl.layer.borderWidth = 1.5;
                offerDiscountLbl.backgroundColor = [UIColor clearColor];
                offerDiscountLbl.textAlignment = NSTextAlignmentCenter;
                offerDiscountLbl.numberOfLines = 2;
                offerDiscountLbl.textColor = [UIColor whiteColor];
                offerDiscountLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:12];
                
                itemNetCostLbl = [[UILabel alloc] init] ;
                itemNetCostLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                itemNetCostLbl.layer.borderWidth = 1.5;
                itemNetCostLbl.backgroundColor = [UIColor clearColor];
                itemNetCostLbl.textAlignment = NSTextAlignmentCenter;
                itemNetCostLbl.numberOfLines = 2;
                itemNetCostLbl.textColor = [UIColor whiteColor];
                itemNetCostLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:12];
                
                //upto here on 12/09/2017....
                
                UILabel *skid = [[UILabel alloc] init] ;
                skid.layer.borderWidth = 1.5;
                skid.font = [UIFont systemFontOfSize:13.0];
                skid.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:13];
                skid.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                skid.backgroundColor = [UIColor clearColor];
                skid.textColor = [UIColor whiteColor];
                if (itemWiseAvailableOffers.count && itemWiseAvailableOffers.count > indexPath.row) {
                    if ([itemWiseAvailableOffers[indexPath.row] count] > 0) {
                        status = TRUE;
                    }
                }
                if (itemWiseAvailableDeals.count && itemWiseAvailableDeals.count > indexPath.row) {
                    if ([itemWiseAvailableDeals[indexPath.row] count] > 0) {
                        status = TRUE;
                    }
                }

                //added by Srinivasulu on 21/03/2018.... it has to work for order page....
                if(isNewReturnBill && onlineOfferDiscountPriceArr != nil)
                    if(onlineOfferDiscountPriceArr.count > indexPath.row)
                        status = TRUE;
                
                //upto here on 21/03/2018....
                
                if (status) {
                    skid.textColor = [UIColor greenColor];
                    CABasicAnimation *basic=[CABasicAnimation animationWithKeyPath:@"transform"];
                    basic.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeScale(1.08, 1.08, 1.08)];
                    [basic setAutoreverses:YES];
                    [basic setRepeatCount:MAXFLOAT];
                    basic.duration = 0.35;
                    [skid.layer addAnimation:basic forKey:@"transform"];
                    
                }
                //            for (int i = 0; i < [dealDataItems count]; i++) {
                //
                //                DealsController *_dealsController = [dealDataItems objectAtIndex:i];
                //
                //                NSMutableArray *skuids = _dealsController.dealSkuId;
                //                if ([skuids containsObject:[temp objectAtIndex:0]]) {
                //                    status = TRUE;
                //                }
                //            }
                //            // check for deals,offers on the skuid....
                //
                //            if ([dealDataItems count]!=0) {
                //
                //                for (int i = 0; i < [dealDataItems count]; i++) {
                //
                //                    DealsController *_dealsController = [dealDataItems objectAtIndex:i];
                //
                //                    NSMutableArray *skuids = [[_dealsController.productData allKeys] mutableCopy];
                //
                //                    //  NSArray *arr = [_dealsController.productData valueForKey:[skuids objectAtIndex:i]];
                //
                //                    for (int k=0; k<[skuids count]; k++) {
                //
                //
                //                        if ([[skuids objectAtIndex:k] containsString:[temp objectAtIndex:0]]) {
                //                            skid.textColor = [UIColor orangeColor];
                //                            CABasicAnimation *basic=[CABasicAnimation animationWithKeyPath:@"transform"];
                //                            [basic setToValue:[NSValue valueWithCATransform3D:CATransform3DMakeScale(1.08, 1.08, 1.08)]];
                //                            [basic setAutoreverses:YES];
                //                            [basic setRepeatCount:MAXFLOAT];
                //                            [basic setDuration:0.35];
                //                            [skid.layer addAnimation:basic forKey:@"transform"];
                //                        }
                //
                //                    }
                //                }
                //
                //            }
                //            if ([offerDic count]!=0) {
                //
                //                NSArray *skus = [offerDic allKeys];
                //
                //                for (int i=0; i<[skus count]; i++) {
                //
                //                    if ([[skus objectAtIndex:i] containsString:[temp objectAtIndex:0]]) {
                //
                //                        skid.textColor = [UIColor greenColor];
                //                        CABasicAnimation *basic=[CABasicAnimation animationWithKeyPath:@"transform"];
                //                        [basic setToValue:[NSValue valueWithCATransform3D:CATransform3DMakeScale(1.08, 1.08, 1.08)]];
                //                        [basic setAutoreverses:YES];
                //                        [basic setRepeatCount:MAXFLOAT];
                //                        [basic setDuration:0.35];
                //                        [skid.layer addAnimation:basic forKey:@"transform"];
                //                    }
                //
                //                }
                //
                //            }
                
                skid.text = temp[1];
                skid.textAlignment=NSTextAlignmentCenter;
                
                
                UILabel *name = [[UILabel alloc] init] ;
                name.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                name.layer.borderWidth = 1.5;
                name.backgroundColor = [UIColor clearColor];
                name.text = @"-";
                name.textAlignment = NSTextAlignmentCenter;
                name.numberOfLines = 2;
                name.textColor = [UIColor whiteColor];
                name.font = [UIFont fontWithName:@"Helvetica" size:12];
                name.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
                //name.adjustsFontSizeToFitWidth = YES;
                
                //            UILabel *uom = [[UILabel alloc] init] ;
                //            uom.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                //            uom.layer.borderWidth = 1.5;
                //            uom.backgroundColor = [UIColor clearColor];
                //            //        uom.text = [unitOfMeasurement objectAtIndex:indexPath.row];
                //            uom.text = [NSString stringWithFormat:@"%.02f",[[itemDiscountArr objectAtIndex:indexPath.row] floatValue]];
                //            uom.textAlignment = NSTextAlignmentCenter;
                //            uom.numberOfLines = 2;
                //            uom.textColor = [UIColor whiteColor];
                //            uom.font = [UIFont fontWithName:@"Helvetica" size:12];
                //            uom.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
                
                UIButton *uom = [[UIButton alloc] init] ;
                uom.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                uom.layer.borderWidth = 1.5;
                uom.titleLabel.font = [UIFont systemFontOfSize:13.0];
                uom.frame = CGRectMake(176, 0, 58, 34);
                uom.backgroundColor = [UIColor blackColor];
                
                uom.titleLabel.textColor = [UIColor whiteColor];
                //            if ([[editedPriceArr objectAtIndex:indexPath.row] floatValue] > 0) {
                //                [priceButton setTitle:[NSString stringWithFormat:@"%.02f",[[editedPriceArr objectAtIndex:indexPath.row] floatValue]] forState:UIControlStateNormal] ;
                //            }
                
                
                UILabel *price = [[UILabel alloc] init] ;
                price.layer.borderWidth = 1.5;
                price.font = [UIFont systemFontOfSize:13.0];
                price.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:13];
                price.layer.borderColor =[[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                price.backgroundColor = [UIColor clearColor];
                price.text = [NSString stringWithFormat:@"%.02f",[temp[4] floatValue]];
                price.textColor = [UIColor whiteColor];
                price.textAlignment=NSTextAlignmentCenter;
                price.adjustsFontSizeToFitWidth = YES;
                
                
                priceButton = [[UIButton alloc] init] ;
                priceButton.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                priceButton.layer.borderWidth = 1.5;
                priceButton.titleLabel.font = [UIFont systemFontOfSize:13.0];
                priceButton.frame = CGRectMake(176, 0, 58, 34);
                priceButton.backgroundColor = [UIColor blackColor];
                
                priceButton.titleLabel.textColor = [UIColor whiteColor];
                [priceButton setTitle:[NSString stringWithFormat:@"%.02f",[temp[4] floatValue]] forState:UIControlStateNormal] ;
                if ([editedPriceArr[indexPath.row] floatValue] > 0) {
                    [priceButton setTitle:[NSString stringWithFormat:@"%.02f",[editedPriceArr[indexPath.row] floatValue]] forState:UIControlStateNormal] ;
                }
                
                qty1 = [[UIButton alloc] init] ;
                qty1.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                qty1.layer.borderWidth = 1.5;
                qty1.titleLabel.font = [UIFont systemFontOfSize:13.0];
                qty1.frame = CGRectMake(176, 0, 58, 34);
                qty1.backgroundColor = [UIColor blackColor];
                
                qty1.titleLabel.textColor = [UIColor whiteColor];
                
                //changed by Srinivasulu on 19/01/2017....
                //reason qty has to display in two decimals....
                
                //            if (!billingStatus) {
                //                NSString *str = [NSString stringWithFormat:@"%.2f", [[temp objectAtIndex:5] floatValue] ];
                //
                //                [qty1 setTitle:[temp objectAtIndex:5] forState:UIControlStateNormal] ;
                //            }
                //            else {
                //                NSString *str = [NSString stringWithFormat:@"%.2f", [[temp objectAtIndex:5] floatValue] ];
                //
                //                [qty1 setTitle:[temp objectAtIndex:3] forState:UIControlStateNormal] ;
                //            }
                //  --
                
                if (!billingStatus) {
                    NSString *str = [NSString stringWithFormat:@"%.2f", [temp[5] floatValue] ];
                    
                    [qty1 setTitle:str forState:UIControlStateNormal] ;
                }
                else {
                    NSString *str = [NSString stringWithFormat:@"%.2f", [temp[3] floatValue] ];
                    
                    [qty1 setTitle:str forState:UIControlStateNormal] ;
                }
                
                
                
                //upto here on 19/01/2017.......
                
                
                
                
                UILabel *total = [[UILabel alloc] init] ;
                total.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                total.layer.borderWidth = 1.5;
                total.font = [UIFont systemFontOfSize:13.0];
                total.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:13];
                total.backgroundColor = [UIColor blackColor];
                if (!billingStatus) {
                    //changed by Srinivasulu on 19/01/2017....
                    //reason qty has to display in two decimals....
                    
                    
                    total.text = [NSString stringWithFormat:@"%.02f", [temp[4] floatValue] * [temp[5] floatValue]];
                    
                    
                    //upto here on 19/01/2017.....
                    
                    
                    if ([editedPriceArr[indexPath.row] floatValue] > 0) {
                        [priceButton setTitle:[NSString stringWithFormat:@"%.02f",[editedPriceArr[indexPath.row] floatValue]] forState:UIControlStateNormal] ;
                        
                        //changed by Srinivasulu on 19/01/2017....
                        //reason qty has to display in two decimals....
                        
                        
                        total.text = [NSString stringWithFormat:@"%.02f", [editedPriceArr[indexPath.row] floatValue] * [temp[5] floatValue]];
                        
                        //upto here on 19/01/2017.....
                        
                        
                    }
                    
                }
                else {
                    
                    total.text = [NSString stringWithFormat:@"%.02f", [temp[3] floatValue] * [temp[4] floatValue]];
                    if ([editedPriceArr[indexPath.row] floatValue] > 0) {
                        [priceButton setTitle:[NSString stringWithFormat:@"%.02f",[editedPriceArr[indexPath.row] floatValue]] forState:UIControlStateNormal] ;
                        total.text = [NSString stringWithFormat:@"%.02f", [editedPriceArr[indexPath.row] floatValue] * [temp[4] floatValue]];
                    }
                    
                }
                
                //chagned by Srinivasulu on 19/08/2017....
                
                // //onlineDealDiscountPriceArr -- onlineOfferDiscountPriceArr
                
                
                
                
                //upto here on 19/08/2017....
                
                
                
                float itemDiscount = 0;
                
                //changed by Srinivasulu on  19/01/2017........
                //we are calculating for percentage but it has to calculate for flat....
                
                itemDiscount = [itemDiscountArr[indexPath.row] floatValue];
                
                //
                //            if (!billingStatus) {
                //
                //
                ////                itemDiscount = ([[temp objectAtIndex:5] floatValue] * [[itemDiscountArr objectAtIndex:indexPath.row] floatValue]);
                //
                //                itemDiscount =  [[itemDiscountArr objectAtIndex:indexPath.row] floatValue];
                //
                //               // itemDiscount = [[itemDiscountArr objectAtIndex:indexPath.row] floatValue];
                //
                //
                //            }
                //            else {
                ////                itemDiscount = ([[temp objectAtIndex:3] floatValue] * );
                //
                //              //  itemDiscount = [[itemDiscountArr objectAtIndex:indexPath.row] floatValue];
                //
                //
                //
                //            }
                
                [uom setTitle:[NSString stringWithFormat:@"%.02f",itemDiscount] forState:UIControlStateNormal] ;
                
                //upto here on 19/01/2017.....
                
                
                
                total.textColor = [UIColor whiteColor];
                total.backgroundColor = [UIColor clearColor];
                total.textAlignment=NSTextAlignmentCenter;
                total.adjustsFontSizeToFitWidth = YES;
                
                
                UIButton *delrowbtn = [[UIButton alloc] init] ;
                [delrowbtn setImage:[UIImage imageNamed:@"delete.png"] forState:UIControlStateNormal];
                
                delrowbtn.backgroundColor = [UIColor clearColor];
                
                UIButton   *userBtn = [[UIButton alloc] init] ;
                [userBtn setImage:[UIImage imageNamed:@"sales_person.png"] forState:UIControlStateNormal];
                userBtn.backgroundColor = [UIColor clearColor];
                
                
                //added by Srinivasulu on 03/08/2017....
                //label77 -- label11 --  label22 --  label66 --  label33  --  label44  --  label55
                
                UILabel * skuIdLbl = [[UILabel alloc] init] ;
                skuIdLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
                skuIdLbl.layer.borderWidth = 1.5;
                skuIdLbl.backgroundColor = [UIColor clearColor];
                skuIdLbl.text = temp[0];
                skuIdLbl.textAlignment = NSTextAlignmentCenter;
                skuIdLbl.numberOfLines = 2;
                skuIdLbl.textColor = [UIColor whiteColor];
                skuIdLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
                
                
                
                //upto  here on 03/08/2017....
                
                
                //changed  by Srinivasulu on 12/09/2017....
                
                @try {
                    
                    
                    //total.text = [NSString stringWithFormat:@"%.2f",([total.text floatValue] - itemDiscount)];
                    total.text = [NSString stringWithFormat:@"%.2f",(total.text).floatValue];
                    
                    
                    itemMrpLbl.text = @"0.00";
                    offerDiscountLbl.text = @"0.00";
                    itemNetCostLbl.text = @"0.00";
                    
                    if(onlineOfferDiscountPriceArr.count > indexPath.row)
                        offerDiscountLbl.text = [NSString stringWithFormat:@"%.2f",[onlineOfferDiscountPriceArr[indexPath.row] floatValue]];
                    
                    if(onlineDealDiscountPriceArr.count > indexPath.row)
                        offerDiscountLbl.text = [NSString stringWithFormat:@"%.2f",([onlineDealDiscountPriceArr[indexPath.row] floatValue] + (offerDiscountLbl.text).floatValue )];
                    
                    
                    
                    itemNetCostLbl.text = [NSString stringWithFormat:@"%.2f",((total.text).floatValue - ((offerDiscountLbl.text).floatValue + itemDiscount) )];
                    
                    
                    
                    @try {
                        
                        // float turnOverDisc = 0.0;
                        float fraction = 0;
                        if (turnoverofferDiscount > 0) {
                            
                            fraction = (((itemNetCostLbl.text).floatValue / totalBeforeTurnOver) * 100);
                            
                            //turnOverDisc =
                            itemNetCostLbl.text = [NSString stringWithFormat:@"%.2f",((itemNetCostLbl.text).floatValue - ((turnoverofferDiscount * fraction) / 100) )];
                            
                            offerDiscountLbl.text = [NSString stringWithFormat:@"%.2f",(((turnoverofferDiscount * fraction) / 100) + (offerDiscountLbl.text).floatValue )];
                        }
                        
                        //need to be added written by Srinivasulu on  27/09/2017....
                        
                        if(otherDiscountValue.floatValue > 0){
                            
                            itemNetCostLbl.text = [NSString stringWithFormat:@"%.2f",((itemNetCostLbl.text).floatValue - ((itemNetCostLbl.text).floatValue * (otherDiscountValue.floatValue/100.0)) )];
                            
                            uom.titleLabel.text  = [NSString stringWithFormat:@"%.2f",((uom.titleLabel.text).floatValue + ((itemNetCostLbl.text).floatValue * (otherDiscountValue.floatValue/100.0)) )];
                        }
                        
                        //upto  here on 27/09/2017....
                        
                        
                        itemMrpLbl.text = [NSString stringWithFormat:@"%.2f",((itemNetCostLbl.text).floatValue / (qty1.titleLabel.text).floatValue)];
                        
                    } @catch (NSException *exception) {
                        
                    }
                    
                    //added by Srinivasulu on 05/10/2017....
                    //reason offer amount is coming negative....
                    
                    if((itemMrpLbl.text).floatValue < 0){
                        
                        itemMrpLbl.text = @"0.00";
                    }
                    
                    if((itemNetCostLbl.text).floatValue < 0){
                        
                        itemNetCostLbl.text = @"0.00";
                    }
                    
                    //upto here on 05/10/2017
                    
                } @catch (NSException *exception) {
                    
                }
                
                //upto here on 12/09/2017....
                
                
                hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
                
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    
                    
                    if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                        
                        //                    skid.font = [UIFont systemFontOfSize:18];
                        //                    skid.frame = CGRectMake(0, 0, 100, 40);
                        //                    name.font = [UIFont systemFontOfSize:18];
                        //                    name.frame = CGRectMake(100, 0, 100, 40);
                        //                    uom.titleLabel.font = [UIFont systemFontOfSize:18];
                        //                    uom.frame = CGRectMake(380, 0, 100, 40);
                        //                    priceButton.titleLabel.font = [UIFont systemFontOfSize:18];
                        //                    priceButton.frame = CGRectMake(200, 0, 100, 40);
                        //                    qty1.titleLabel.font = [UIFont systemFontOfSize:18];
                        //                    qty1.frame = CGRectMake(300, 0, 80, 40);
                        //                    total.font = [UIFont systemFontOfSize:18];
                        //                    total.frame = CGRectMake(480, 0, 90, 40);
                        //                    delrowbtn.frame = CGRectMake(570, 5 , 40, 40);
                        //                    userBtn.frame =  CGRectMake(delrowbtn.frame.origin.x+delrowbtn.frame.size.width+2,delrowbtn.frame.origin.y+4,35,35 );
                        
                        
                        //added by Srinivasulu on 03/08/2017....
                        //label77 -- label11 --  label22 --  label66 --  label33  --  label44  --  label55
                        
                        //                    skuIdLbl.frame = CGRectMake( label77.frame.origin.x, 0 , label77.frame.size.width + 2, 40);
                        //                    skid.frame = CGRectMake( label11.frame.origin.x, 0 , label11.frame.size.width + 2, 40);
                        //                    name.frame = CGRectMake( label22.frame.origin.x, 0 , label22.frame.size.width + 2, 40);
                        //                    priceButton.frame = CGRectMake( label66.frame.origin.x, 0 , label66.frame.size.width + 2, 40);
                        //                    qty1.frame = CGRectMake( label33.frame.origin.x, 0 , label33.frame.size.width + 2, 40);
                        //                    uom.frame = CGRectMake( label44.frame.origin.x, 0 , label44.frame.size.width + 2, 40);
                        //                    total.frame = CGRectMake( label55.frame.origin.x, 0 , label55.frame.size.width + 2, 40);
                        
                        
                        
                        //changed  by Srinivasulu on 12/09/2017....
                        
                        
                        skuIdLbl.lineBreakMode = NSLineBreakByTruncatingTail;
                        skid.lineBreakMode = NSLineBreakByTruncatingTail;
                        name.lineBreakMode = NSLineBreakByTruncatingTail;
                        priceButton.titleLabel.lineBreakMode = NSLineBreakByTruncatingTail;
                        qty1.titleLabel.lineBreakMode = NSLineBreakByTruncatingTail;
                        uom.titleLabel.lineBreakMode = NSLineBreakByTruncatingTail;
                        
                        total.lineBreakMode = NSLineBreakByTruncatingTail;
                        offerDiscountLbl.lineBreakMode = NSLineBreakByTruncatingTail;
                        itemMrpLbl.lineBreakMode = NSLineBreakByTruncatingTail;
                        itemNetCostLbl.lineBreakMode = NSLineBreakByTruncatingTail;
                        
                        
                        //commented by Srinivasulu on  15/09/2017....
                        
                        skuIdLbl.frame = CGRectMake( label11.frame.origin.x, 0 , label11.frame.size.width + 2, 40);
                        skid.frame = CGRectMake( label22.frame.origin.x, 0 , label22.frame.size.width + 2, 40);
                        name.frame = CGRectMake( label33.frame.origin.x, 0 , label33.frame.size.width + 2, 40);
                        
                        priceButton.frame = CGRectMake( label44.frame.origin.x, 0 , label44.frame.size.width + 2, 40);
                        
                        offerDiscountLbl.frame= CGRectMake( label55.frame.origin.x, 0 , label55.frame.size.width + 2, 40);
                        
                        //it is used for manual discount....
                        uom.frame = CGRectMake( label66.frame.origin.x, 0 , label66.frame.size.width + 2, 40);
                        
                        itemMrpLbl.frame = CGRectMake( label77.frame.origin.x, 0 , label77.frame.size.width + 2, 40);
                        
                        qty1.frame = CGRectMake( label88.frame.origin.x, 0 , label88.frame.size.width + 2, 40);
                        total.frame = CGRectMake( label99.frame.origin.x, 0 , label99.frame.size.width + 2, 40);
                        itemNetCostLbl.frame = CGRectMake( label10.frame.origin.x, 0 , label10.frame.size.width + 2, 40);
                        //upto here on 12/09/2017....
                        
                        skuIdLbl.font = [UIFont systemFontOfSize:18];
                        skid.font = [UIFont systemFontOfSize:18];
                        name.font = [UIFont systemFontOfSize:18];
                        uom.titleLabel.font = [UIFont systemFontOfSize:18];
                        priceButton.titleLabel.font = [UIFont systemFontOfSize:18];
                        qty1.titleLabel.font = [UIFont systemFontOfSize:18];
                        total.font = [UIFont systemFontOfSize:18];
                        
                        //changed  by Srinivasulu on 12/09/2017....
                        
                        itemMrpLbl.font = [UIFont systemFontOfSize:18];
                        offerDiscountLbl.font = [UIFont systemFontOfSize:18];
                        itemNetCostLbl.font = [UIFont systemFontOfSize:18];
                        
                        //upto here on 12/09/2017....
                        
                        
                        //                    delrowbtn.frame = CGRectMake( itemNetCostLbl.frame.origin.x + itemNetCostLbl.frame.size.width + 1,  0 , 40, 40);
                        //                    userBtn.frame =  CGRectMake( delrowbtn.frame.origin.x+delrowbtn.frame.size.width + 1, delrowbtn.frame.origin.y + 4,35,35 );
                        
                        userBtn .frame = CGRectMake( 5,  0 , 40, 40);
                        
                        
                        float userOrigin = 5;
                        
                        //commented by Srinivasulu on 26/10/2017....
                        //reason -- this value has to use for the salePerson mandatory field....
                        //                    if(isEmployeeSaleId)
                        userOrigin = userBtn.frame.origin.x + userBtn.frame.size.width + 1;
                        
                        
                        delrowbtn.frame =  CGRectMake( userOrigin, userBtn.frame.origin.y + 4, 35, 35);
                        
                        //upto here on 03/08/2017.....
                        
                    }
                    else {
                        //skid.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:22];
                        skid.font = [UIFont fontWithName:@"Helvetica" size:22];
                        skid.frame = CGRectMake(5, 0, 125, 56);
                        name.font = [UIFont fontWithName:@"Helvetica" size:18];
                        name.frame = CGRectMake(130, 0, 125, 56);
                        uom.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:21];
                        uom.frame = CGRectMake(255, 0, 125, 56);
                        priceButton.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:22];
                        priceButton.frame = CGRectMake(380, 0, 125, 56);
                        qty1.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:22];
                        qty1.frame = CGRectMake(505, 0, 125, 56);
                        total.font = [UIFont fontWithName:@"Helvetica" size:22];
                        total.frame = CGRectMake(630, 0, 125, 56);
                        delrowbtn.frame = CGRectMake(765, 10 , 40, 40);
                    }
                    
                    
                    
                    
                }
                else {
                    
                    skid.frame = CGRectMake(5, 0, 58, 34);
                    name.frame = CGRectMake(62, 0, 58, 34);
                    priceButton.frame = CGRectMake(119, 0, 58, 34);
                    qty1.frame = CGRectMake(176, 0, 58, 34);
                    total.frame = CGRectMake(233, 0, 58, 34);
                    delrowbtn.frame = CGRectMake(293, 3 , 25, 25);
                    
                }
                
                //            [self updateValues];
                
                hlcell.backgroundColor = [UIColor clearColor];
                [hlcell.contentView addSubview:skid];
                [hlcell.contentView addSubview:name];
                [hlcell.contentView addSubview:uom];
                [hlcell.contentView addSubview:priceButton];
                [hlcell.contentView addSubview:qty1];
                [hlcell.contentView addSubview:total];
                
                
                //added by Srinivasulu on 12/09/2017....
                
                [hlcell.contentView addSubview:itemMrpLbl];
                [hlcell.contentView addSubview:offerDiscountLbl];
                [hlcell.contentView addSubview:itemNetCostLbl];
                
                //upto here on 12/09/2017....
                
                //added by Srinivasulu on 03/08/2017....
                
                [hlcell.contentView addSubview:skuIdLbl];
                
                //upto here on 03/08/2017.....
                
                
                //commented by Srinivasulu on 26/10/2017....
                //reason -- this value has to use for the salePerson mandatory field....
                //            if (isEmployeeSaleId) {
                [hlcell.contentView addSubview:userBtn];
                //            }
                
                
                Boolean showSinglePopUp = true;
                
                
                userBtn.tag = indexPath.row;
                delrowbtn.tag = indexPath.row;
                uom.tag = indexPath.row;
                priceButton.tag = indexPath.row;
                qty1.tag = indexPath.row;
                
                if(showSinglePopUp){
                    
                    [userBtn addTarget:self action:@selector(populateEditItemDetailsFullView:) forControlEvents:UIControlEventTouchUpInside];
                    [delrowbtn addTarget:self action:@selector(populateEditItemDetailsFullView:) forControlEvents:UIControlEventTouchUpInside];
                    [uom addTarget:self action:@selector(populateEditItemDetailsFullView:) forControlEvents:UIControlEventTouchUpInside];
                    [priceButton addTarget:self action:@selector(populateEditItemDetailsFullView:) forControlEvents:UIControlEventTouchUpInside];
                    [qty1 addTarget:self action:@selector(populateEditItemDetailsFullView:) forControlEvents:UIControlEventTouchUpInside];
                }
                else{
                    
                    [userBtn addTarget:self action:@selector(populateCustomerSpecific:) forControlEvents:UIControlEventTouchUpInside];
                    [delrowbtn addTarget:self action:@selector(delRow:) forControlEvents:UIControlEventTouchUpInside];
                    [uom addTarget:self action:@selector(populateItemDiscountView:) forControlEvents:UIControlEventTouchUpInside];
                    [priceButton addTarget:self action:@selector(populatePriceEditView:) forControlEvents:UIControlEventTouchUpInside];
                    [qty1 addTarget:self action:@selector(populateQtyView:) forControlEvents:UIControlEventTouchUpInside];
                }
                
                if ([isVoidedArray[indexPath.row] boolValue]) {
                    [delrowbtn setImage:[UIImage imageNamed:@"enable.png"] forState:UIControlStateNormal];
                    skid.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                    name.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                    [uom setTitleColor:[[UIColor whiteColor] colorWithAlphaComponent:0.4f] forState:UIControlStateNormal];
                    price.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                    [qty1 setTitleColor:[[UIColor whiteColor] colorWithAlphaComponent:0.4f] forState:UIControlStateNormal];
                    [priceButton setTitleColor:[[UIColor whiteColor] colorWithAlphaComponent:0.4f] forState:UIControlStateNormal];
                    total.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                    [qty1 setUserInteractionEnabled:NO];
                    [priceButton setUserInteractionEnabled:NO];
                    
                    
                    //added by Srinivasulu on 03/08/2017....
                    [uom setUserInteractionEnabled:NO];
                    
                    skuIdLbl.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                    
                    itemMrpLbl.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                    offerDiscountLbl.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                    itemNetCostLbl.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.4f];
                    
                    //upto here on 03/08/2017.....
                }
                if ([isVegetable containsObject:temp[0]]) {
                    [qty1 setUserInteractionEnabled:NO];
                    [priceButton setUserInteractionEnabled:NO];
                }
                // if ([WebServiceUtility checkEditPriceEnabled]) {
                if (isPriceEditableArr.count > 0 && ![isPriceEditableArr[indexPath.row] boolValue]) {
                    [priceButton setUserInteractionEnabled:NO];
                }
                
                else {
                    [priceButton setUserInteractionEnabled:YES];
                }
                
                //added by Srinivasulu on  06/10/2017....
                if(isOfflineService){
                    
                    [priceButton setUserInteractionEnabled:YES];
                }
                
                //upto here on 06/10/2017....
                
                // }
                
                
                if (!billingStatus) {
                    
                    [hlcell.contentView addSubview:delrowbtn];
                }
                
                
                //changed by Srnivasulu on 13/11/2017....
                //            if (!([[isVoidedArray objectAtIndex:indexPath.row] boolValue])) {
                if ((!([isVoidedArray[indexPath.row] boolValue])) && status) {
                    
                    //upto her on 13/11/2017....
                    
                    UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(singleTapWebView:)];
                    singleTap.numberOfTapsRequired = 1;
                    singleTap.delegate = self;
                    [hlcell addGestureRecognizer:singleTap];
                    
                    name.userInteractionEnabled = NO;
                    itemMrpLbl.userInteractionEnabled = NO;
                    offerDiscountLbl.userInteractionEnabled = NO;
                    total.userInteractionEnabled = NO;
                    itemNetCostLbl.userInteractionEnabled = NO;
                    
                    if (isPriceEditableArr.count > 0 && ![isPriceEditableArr[indexPath.row] boolValue]) {
                        [priceButton setUserInteractionEnabled:NO];
                    }
                }
                
            }
            @catch (NSException *exception) {
                
                NSLog(@"%@",exception.description);
            }
            
            //added by Srinivausulu on 02/07/2018....
            if([businessCategoryStr caseInsensitiveCompare:FMCG] == NSOrderedSame  && !isNewReturnBill){
                
                qtyFeild = [[UITextField alloc] init];
                qtyFeild.borderStyle = UITextBorderStyleRoundedRect;
                qtyFeild.textColor = [UIColor blackColor];
                qtyFeild.placeholder = NSLocalizedString(@"enter_qty", nil);
                qtyFeild.keyboardType = UIKeyboardTypeNumberPad;
                qtyFeild.text = qty1.titleLabel.text;
                qtyFeild.font = [UIFont systemFontOfSize:18.0];
                qtyFeild.backgroundColor = [UIColor whiteColor];
                qtyFeild.autocorrectionType = UITextAutocorrectionTypeNo;
                //qtyFeild.keyboardType = UIKeyboardTypeDefault;
                qtyFeild.clearButtonMode = UITextFieldViewModeWhileEditing;
                qtyFeild.returnKeyType = UIReturnKeyDone;
                qtyFeild.delegate = self;
                qtyFeild.tag = qty1.tag;
                qtyFeild.frame = CGRectMake( qty1.frame.origin.x + 2, qty1.frame.origin.y + 2, qty1.frame.size.width - 4, qty1.frame.size.height - 4);
                qtyFeild.userInteractionEnabled = YES;
                qtyFeild.textAlignment = NSTextAlignmentCenter;
                [hlcell.contentView addSubview:qtyFeild];
            }
            //upto here on 02/07/2018....
            return hlcell;
            
        } @catch (NSException *exception) {
            
        } @finally {
            
            if(indexPath.row == (cartTotalItems.count - 1) && isToScrollViewBillItemsAutomatically){
                
                if(cartTable.contentSize.height > cartTable.frame.size.height){
                    
                    CGPoint bottomOffset = CGPointMake(0, cartTable.contentSize.height - cartTable.bounds.size.height);
                    [cartTable setContentOffset:bottomOffset animated:NO];
                    isToScrollViewBillItemsAutomatically = false;
                }
            }
        }
    }
    else if (tableView == allDealsOffersTable){
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        @try {
            
            //changed by Srinivasulu on 17/08/2016
            
            UILabel *snoLbl = [[UILabel alloc] init] ;
            snoLbl.layer.borderColor = [[UIColor grayColor] colorWithAlphaComponent:0.5].CGColor;
            snoLbl.layer.borderWidth = 1.5;
            snoLbl.backgroundColor = [UIColor clearColor];
            snoLbl.text = @"-";
            snoLbl.textAlignment = NSTextAlignmentCenter;
            snoLbl.numberOfLines = 2;
            snoLbl.textColor = [UIColor blackColor];
            snoLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
            snoLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            UILabel *dealOfferDesc = [[UILabel alloc] init] ;
            dealOfferDesc.layer.borderColor = [[UIColor grayColor] colorWithAlphaComponent:0.4].CGColor;
            dealOfferDesc.layer.borderWidth = 1.5;
            dealOfferDesc.backgroundColor = [UIColor clearColor];
            dealOfferDesc.text = @"-";
            dealOfferDesc.textAlignment = NSTextAlignmentLeft;
            dealOfferDesc.numberOfLines = 3;
            dealOfferDesc.textColor = [UIColor blackColor];
            dealOfferDesc.font = [UIFont fontWithName:@"Helvetica" size:12];
            dealOfferDesc.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            UILabel *offerIDLbl = [[UILabel alloc] init] ;
            offerIDLbl.layer.borderColor = [[UIColor grayColor] colorWithAlphaComponent:0.4].CGColor;
            offerIDLbl.layer.borderWidth = 1.5;
            offerIDLbl.backgroundColor = [UIColor clearColor];
            offerIDLbl.text = @"-";
            offerIDLbl.textAlignment = NSTextAlignmentCenter;
            offerIDLbl.numberOfLines = 2;
            offerIDLbl.textColor = [UIColor blackColor];
            offerIDLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
            offerIDLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            UILabel *startDateLbl = [[UILabel alloc] init] ;
            startDateLbl.layer.borderColor = [[UIColor grayColor] colorWithAlphaComponent:0.4].CGColor;
            startDateLbl.layer.borderWidth = 1.5;
            startDateLbl.backgroundColor = [UIColor clearColor];
            startDateLbl.text = @"-";
            startDateLbl.textAlignment = NSTextAlignmentCenter;
            startDateLbl.numberOfLines = 2;
            startDateLbl.textColor = [UIColor blackColor];
            startDateLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
            startDateLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            UILabel *endDateLbl = [[UILabel alloc] init] ;
            endDateLbl.layer.borderColor = [[UIColor grayColor] colorWithAlphaComponent:0.4].CGColor;
            endDateLbl.layer.borderWidth = 1.5;
            endDateLbl.backgroundColor = [UIColor clearColor];
            endDateLbl.text = @"-";
            endDateLbl.textAlignment = NSTextAlignmentCenter;
            endDateLbl.numberOfLines = 2;
            endDateLbl.textColor = [UIColor blackColor];
            endDateLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
            endDateLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            //            UILabel *startTimeLbl = [[UILabel alloc] init] ;
            //            startTimeLbl.layer.borderColor = [[UIColor grayColor] colorWithAlphaComponent:0.4].CGColor;
            //            startTimeLbl.layer.borderWidth = 1.5;
            //            startTimeLbl.backgroundColor = [UIColor clearColor];
            //            startTimeLbl.text = @"-";
            //            startTimeLbl.textAlignment = NSTextAlignmentCenter;
            //            startTimeLbl.numberOfLines = 2;
            //            startTimeLbl.textColor = [UIColor blackColor];
            //            startTimeLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
            //            startTimeLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            //
            //            UILabel *endTimeLbl = [[UILabel alloc] init] ;
            //            endTimeLbl.layer.borderColor = [[UIColor grayColor] colorWithAlphaComponent:0.4].CGColor;
            //            endTimeLbl.layer.borderWidth = 1.5;
            //            endTimeLbl.backgroundColor = [UIColor clearColor];
            //            endTimeLbl.text = @"-";
            //            endTimeLbl.textAlignment = NSTextAlignmentCenter;
            //            endTimeLbl.numberOfLines = 2;
            //            endTimeLbl.textColor = [UIColor blackColor];
            //            endTimeLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
            //            endTimeLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            if ([displayingDealsOffersArr[indexPath.row] isKindOfClass:[DealModel class]]) {
                DealModel *dealModel = displayingDealsOffersArr[indexPath.row];
                snoLbl.text = [NSString stringWithFormat:@"%d",indexPath.row + 1];
                dealOfferDesc.text = [NSString stringWithFormat:@"%@",dealModel.dealDescription];
                offerIDLbl.text = [NSString stringWithFormat:@"%@",dealModel.dealID];
                
                @try {
                    startDateLbl.text = [NSString stringWithFormat:@"%@",[dealModel.dealStartDate componentsSeparatedByString:@"."][0]];
                    endDateLbl.text = [NSString stringWithFormat:@"%@",[dealModel.dealEndDate componentsSeparatedByString:@"."][0]];
                    [dealModel.dealEndDate componentsSeparatedByString:@"."][0];
                    NSString *loc = @"";
                    [loc componentsSeparatedByString:@"."];
                    
                }
                @catch (NSException *exception) {
                    startDateLbl.text = dealModel.dealStartDate;
                    endDateLbl.text = dealModel.dealEndDate;
                }
                @finally {
                    
                }
                
                
                
                
                //                startTimeLbl.text = [NSString stringWithFormat:@"%@",dealModel.dealStartTime];
                //                endTimeLbl.text = [NSString stringWithFormat:@"%@",dealModel.dealEndTime];
            }
            else if ([displayingDealsOffersArr[indexPath.row] isKindOfClass:[OfferModel class]]){
                OfferModel *dealModel = displayingDealsOffersArr[indexPath.row];
                snoLbl.text = [NSString stringWithFormat:@"%d",indexPath.row + 1];
                dealOfferDesc.text = [NSString stringWithFormat:@"%@",dealModel.offerDescription];
                offerIDLbl.text = [NSString stringWithFormat:@"%@",dealModel.offerID];
                startDateLbl.text = [NSString stringWithFormat:@"%@",dealModel.offerStartDate];
                endDateLbl.text = [NSString stringWithFormat:@"%@",dealModel.offerEndDate];
                
                @try {
                    startDateLbl.text = [NSString stringWithFormat:@"%@",[dealModel.offerStartDate componentsSeparatedByString:@"."][0]];
                    endDateLbl.text = [NSString stringWithFormat:@"%@",[dealModel.offerEndDate componentsSeparatedByString:@"."][0]];
                }
                @catch (NSException *exception) {
                    startDateLbl.text = [NSString stringWithFormat:@"%@",dealModel.offerStartDate];
                    endDateLbl.text = [NSString stringWithFormat:@"%@",dealModel.offerEndDate];
                }
                @finally {
                    
                }
                //                startTimeLbl.text = [NSString stringWithFormat:@"%@",dealModel.offerStartTime];
                //                endTimeLbl.text = [NSString stringWithFormat:@"%@",dealModel.offerEndTime];
                
            }
            snoLbl.font = [UIFont systemFontOfSize:18];
            snoLbl.frame = CGRectMake(0, 0,40, 50);
            dealOfferDesc.font = [UIFont systemFontOfSize:16];
            dealOfferDesc.frame = CGRectMake(snoLbl.frame.origin.x + snoLbl.frame.size.width, 0, 550, 50);
            offerIDLbl.font = [UIFont systemFontOfSize:18];
            offerIDLbl.frame = CGRectMake(dealOfferDesc.frame.origin.x + dealOfferDesc.frame.size.width, 0, 150, 50);
            startDateLbl.font = [UIFont systemFontOfSize:18];
            startDateLbl.frame = CGRectMake(offerIDLbl.frame.origin.x + offerIDLbl.frame.size.width, 0, 125, 50);
            endDateLbl.font = [UIFont systemFontOfSize:18];
            endDateLbl.frame = CGRectMake(startDateLbl.frame.origin.x + startDateLbl.frame.size.width, 0, 125, 50);
            //            startTimeLbl.font = [UIFont systemFontOfSize:18];
            //            startTimeLbl.frame = CGRectMake(545, 0, 100, 56);
            //            endTimeLbl.font = [UIFont systemFontOfSize:18];
            //            endTimeLbl.frame = CGRectMake(645, 0, 100, 56);
            
            hlcell.backgroundColor = [UIColor clearColor];
            [hlcell.contentView addSubview:snoLbl];
            [hlcell.contentView addSubview:dealOfferDesc];
            [hlcell.contentView addSubview:offerIDLbl];
            //            [hlcell.contentView addSubview:startDateLbl];
            //            [hlcell.contentView addSubview:endDateLbl];
            //            [hlcell.contentView addSubview:startTimeLbl];
            //            [hlcell.contentView addSubview:endTimeLbl];
            
            //upto here....
        }
        @catch (NSException *exception) {
            
        }
        @finally {
            
        }
        return hlcell;
        
    }
    
    //added by Srinivasulu on 18/06/2016
    
    else if(tableView == freeItemsTbl){
        static NSString *hlCellID = @"freeItemsCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        @try {
            
            UILabel *itemSkuIdLbl = [[UILabel alloc] init] ;
            itemSkuIdLbl.layer.borderColor = [[UIColor grayColor] colorWithAlphaComponent:0.4].CGColor;
            itemSkuIdLbl.layer.borderWidth = 1.5;
            itemSkuIdLbl.backgroundColor = [UIColor clearColor];
            itemSkuIdLbl.text = @"-";
            itemSkuIdLbl.textAlignment = NSTextAlignmentCenter;
            itemSkuIdLbl.numberOfLines = 2;
            itemSkuIdLbl.textColor = [UIColor blackColor];
            itemSkuIdLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
            itemSkuIdLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            UILabel *descriptionLbl = [[UILabel alloc] init] ;
            descriptionLbl.layer.borderColor = [[UIColor grayColor] colorWithAlphaComponent:0.4].CGColor;
            descriptionLbl.layer.borderWidth = 1.5;
            descriptionLbl.backgroundColor = [UIColor clearColor];
            descriptionLbl.text = @"-";
            descriptionLbl.textAlignment = NSTextAlignmentCenter;
            descriptionLbl.numberOfLines = 2;
            descriptionLbl.textColor = [UIColor blackColor];
            descriptionLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
            descriptionLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            
            
            itemSkuIdLbl.text = unappliedDealsSkuIdArr[indexPath.row];
            descriptionLbl.text = unappliedDealsSkuDescArr[indexPath.row];
            
            
            
            itemSkuIdLbl.font = [UIFont systemFontOfSize:18];
            itemSkuIdLbl.frame = CGRectMake(0, 0, 200, 50);
            descriptionLbl.font = [UIFont systemFontOfSize:18];
            descriptionLbl.frame = CGRectMake(itemSkuIdLbl.frame.origin.x + itemSkuIdLbl.frame.size.width, 0, freeItemsTbl.frame.size.width - itemSkuIdLbl.frame.size.width, 50);
            
            
            
            hlcell.backgroundColor = [UIColor clearColor];
            [hlcell.contentView addSubview:itemSkuIdLbl];
            [hlcell.contentView addSubview:descriptionLbl];
            
            //upto here....
        }
        @catch (NSException *exception) {
            
        }
        @finally {
            return hlcell;
            
        }
        
    }
    
    else if (tableView == priceTable) {
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        @try {
            [HUD setHidden:YES];
            NSDictionary *dic = priceDic[indexPath.row];
            
            UILabel *skid = [[UILabel alloc] init] ;
            skid.layer.borderWidth = 1.5;
            skid.font = [UIFont systemFontOfSize:13.0];
            skid.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:13];
            skid.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            skid.backgroundColor = [UIColor blackColor];
            skid.textColor = [UIColor whiteColor];
            skid.text = [dic valueForKey:@"description"];
            skid.textAlignment=NSTextAlignmentCenter;
            //            skid.adjustsFontSizeToFitWidth = YES;
            
            UILabel *mrpPrice = [[UILabel alloc] init] ;
            mrpPrice.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            mrpPrice.layer.borderWidth = 1.5;
            mrpPrice.backgroundColor = [UIColor blackColor];
            mrpPrice.text = [NSString stringWithFormat:@"%.2f",[[dic valueForKey:@"salePrice"] floatValue]];
            mrpPrice.textAlignment = NSTextAlignmentCenter;
            mrpPrice.numberOfLines = 2;
            mrpPrice.textColor = [UIColor whiteColor];
            
            UILabel *price = [[UILabel alloc] init] ;
            price.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            price.layer.borderWidth = 1.5;
            price.backgroundColor = [UIColor blackColor];
            price.text = [NSString stringWithFormat:@"%.2f",[[dic valueForKey:@"price"] floatValue]];
            price.textAlignment = NSTextAlignmentCenter;
            price.numberOfLines = 2;
            price.textColor = [UIColor whiteColor];
            // name.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:12];
            
            UILabel *color_Lbl = [[UILabel alloc] init] ;
            color_Lbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            color_Lbl.layer.borderWidth = 1.5;
            color_Lbl.backgroundColor = [UIColor blackColor];
            color_Lbl.text = [dic valueForKey:@"color"];
            color_Lbl.textAlignment = NSTextAlignmentCenter;
            color_Lbl.numberOfLines = 2;
            color_Lbl.textColor = [UIColor whiteColor];
            
            UILabel *size_Lbl = [[UILabel alloc] init] ;
            size_Lbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            size_Lbl.layer.borderWidth = 1.5;
            size_Lbl.backgroundColor = [UIColor blackColor];
            size_Lbl.text = [dic valueForKey:@"size"];
            size_Lbl.textAlignment = NSTextAlignmentCenter;
            size_Lbl.numberOfLines = 2;
            size_Lbl.textColor = [UIColor whiteColor];
            
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                    
                    skid.font = [UIFont systemFontOfSize:22];
                    skid.frame = CGRectMake(0, 0, descLabl.frame.size.width + 1, hlcell.frame.size.height);
                    
                    mrpPrice.font = [UIFont systemFontOfSize:22];
                    mrpPrice.frame = CGRectMake(skid.frame.origin.x+skid.frame.size.width, 0, mrpLbl.frame.size.width+2, hlcell.frame.size.height);
                    
                    price.font = [UIFont systemFontOfSize:22];
                    price.frame = CGRectMake(mrpPrice.frame.origin.x+mrpPrice.frame.size.width, 0, priceLbl.frame.size.width+2, hlcell.frame.size.height);
                    
                    
                    color_Lbl.font = [UIFont systemFontOfSize:22];
                    color_Lbl.frame = CGRectMake(price.frame.origin.x+price.frame.size.width, 0, colorLbl.frame.size.width+2, hlcell.frame.size.height);
                    
                    
                    size_Lbl.font = [UIFont systemFontOfSize:22];
                    size_Lbl.frame = CGRectMake(color_Lbl.frame.origin.x+color_Lbl.frame.size.width, 0, sizeLbl.frame.size.width+2, hlcell.frame.size.height);
                }
                
                else {
                    //skid.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:22];
                    skid.font = [UIFont fontWithName:@"Helvetica" size:22];
                    skid.frame = CGRectMake(5, 0, 125, 56);
                    price.font = [UIFont fontWithName:@"Helvetica" size:18];
                    price.frame = CGRectMake(130, 0, 125, 56);
                    
                }
            }
            else {
                
                skid.frame = CGRectMake(10, 0, 100, 34);
                price.frame = CGRectMake(120, 0, 90, 34);
            }
            
            hlcell.backgroundColor = [UIColor clearColor];
            [hlcell.contentView addSubview:skid];
            [hlcell.contentView addSubview:price];
            [hlcell.contentView addSubview:mrpPrice];
            [hlcell.contentView addSubview:size_Lbl];
            [hlcell.contentView addSubview:color_Lbl];
            
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        }
        @finally {
            
            
        }
        return hlcell;
    }
    else if (tableView == reasonsTable) {
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        
        //added by Srinivasulu on 03/08/2017....
        
        @try {
            
            hlcell.textLabel.text = discountReasons[indexPath.row];
            hlcell.textLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            
        } @catch (NSException *exception) {
            
        }
        //upto here on 03/08/2017....
        
        
        return hlcell;
    }
    else if (tableView == salesPersonTbl) {
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        
        NSDictionary *dic = employeeIdsArr[indexPath.row];
        
        hlcell.textLabel.text =  [NSString stringWithFormat:@"%@(%@)",[dic valueForKey:@"firstName"],[dic valueForKey:@"employeeCode"]];
        return hlcell;
    }
    
    else if(tableView == deliveryPersonTbl){ // added by sai
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        
        //        NSDictionary *dic = employeeIdsArr[indexPath.row];
        NSDictionary *dic = deliveryPersonIDArr[indexPath.row];
        
        
        hlcell.textLabel.text =  [NSString stringWithFormat:@"%@(%@)",[dic valueForKey:@"firstName"],[dic valueForKey:@"employeeCode"]];
        return hlcell;
    }
    
    else if (tableView == giftTypeTableView) {
        
        tableView.separatorColor = [UIColor blackColor];
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            hlcell.textLabel.font = [UIFont boldSystemFontOfSize:25];
        }
        else{
            hlcell.textLabel.font = [UIFont systemFontOfSize:17];
        }
        hlcell.backgroundColor = [UIColor whiteColor];
        @try {
            
            hlcell.textLabel.text = giftTypeArrayList[indexPath.row];
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        }
        
        
        return hlcell;
        
    }
    else if (tableView == couponType){
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID];
            hlcell.accessoryType = UITableViewCellAccessoryNone;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                hlcell.textLabel.font = [UIFont boldSystemFontOfSize:25];
            }
        }
        
        hlcell.textLabel.text = cupon_type[indexPath.row];
        hlcell.textLabel.textColor = [UIColor blackColor];
        return hlcell;
    }
    else if (tableView == couponDeatails) {
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID];
            hlcell.accessoryType = UITableViewCellAccessoryNone;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                hlcell.textLabel.font = [UIFont boldSystemFontOfSize:25];
            }
        }
        
        //name.adjustsFontSizeToFitWidth = YES;
        
        UILabel *lbltype = [[UILabel alloc] init];
        lbltype.layer.borderWidth = 1.5;
        lbltype.font = [UIFont systemFontOfSize:13.0];
        lbltype.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        lbltype.backgroundColor = [UIColor blackColor];
        lbltype.text = [couponArr[indexPath.row] componentsSeparatedByString:@"#"][0];
        lbltype.textColor = [UIColor whiteColor];
        lbltype.textAlignment=NSTextAlignmentCenter;
        lbltype.adjustsFontSizeToFitWidth = YES;
        
        UILabel *cidLbl = [[UILabel alloc] init];
        cidLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        cidLbl.layer.borderWidth = 1.5;
        cidLbl.backgroundColor = [UIColor blackColor];
        cidLbl.text = [couponArr[indexPath.row] componentsSeparatedByString:@"#"][1];
        cidLbl.textAlignment = NSTextAlignmentCenter;
        cidLbl.numberOfLines = 2;
        cidLbl.textColor = [UIColor whiteColor];
        cidLbl.font = [UIFont fontWithName:@"Helvetica" size:12];
        
        [couponIdArr addObject:cidLbl.text];
        //name.adjustsFontSizeToFitWidth = YES;
        
        UILabel *cvalLbl = [[UILabel alloc] init];
        cvalLbl.layer.borderWidth = 1.5;
        cvalLbl.font = [UIFont systemFontOfSize:13.0];
        cvalLbl.layer.borderColor =[[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        cvalLbl.backgroundColor = [UIColor blackColor];
        cvalLbl.text = [couponArr[indexPath.row] componentsSeparatedByString:@"#"][2];
        cvalLbl.textColor = [UIColor whiteColor];
        cvalLbl.textAlignment=NSTextAlignmentCenter;
        cvalLbl.adjustsFontSizeToFitWidth = YES;
        
        UILabel *qty = [[UILabel alloc] init];
        qty.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        qty.layer.borderWidth = 1.5;
        qty.backgroundColor = [UIColor blackColor];
        qty.text = [couponArr[indexPath.row] componentsSeparatedByString:@"#"][3];
        qty.textAlignment = NSTextAlignmentCenter;
        qty.numberOfLines = 2;
        qty.textColor = [UIColor whiteColor];
        qty.font = [UIFont fontWithName:@"Helvetica" size:12];
        
        UILabel *total = [[UILabel alloc] init];
        total.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        total.layer.borderWidth = 1.5;
        total.backgroundColor = [UIColor blackColor];
        total.text = [NSString stringWithFormat:@"%.2f",[couponArr[indexPath.row] componentsSeparatedByString:@"#"][3].intValue*[couponArr[indexPath.row] componentsSeparatedByString:@"#"][2].floatValue];
        total.textAlignment = NSTextAlignmentCenter;
        total.numberOfLines = 2;
        total.textColor = [UIColor whiteColor];
        total.font = [UIFont fontWithName:@"Helvetica" size:12];
        
        UIButton *delrowbtn = [[UIButton alloc] init];
        [delrowbtn setImage:[UIImage imageNamed:@"delete.png"] forState:UIControlStateNormal];
        [delrowbtn addTarget:self action:@selector(delCoupon:) forControlEvents:UIControlEventTouchUpInside];
        delrowbtn.tag = indexPath.row;
        delrowbtn.backgroundColor = [UIColor clearColor];
        
        hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            //skid.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:22];
            lbltype.font = [UIFont fontWithName:@"Helvetica" size:22];
            lbltype.frame = CGRectMake(0, 0, 130, 45);
            cidLbl.font = [UIFont fontWithName:@"Helvetica" size:21];
            cidLbl.frame = CGRectMake(130, 0, 220, 45);
            cvalLbl.font = [UIFont fontWithName:@"Helvetica" size:22];
            cvalLbl.frame = CGRectMake(340, 0, 120, 45);
            qty.font = [UIFont fontWithName:@"Helvetica" size:22];
            qty.frame = CGRectMake(450, 0, 120, 45);
            total.font = [UIFont fontWithName:@"Helvetica" size:22];
            total.frame = CGRectMake(560, 0, 120, 45);
            delrowbtn.frame = CGRectMake(680, 10 , 40, 40);
            
        }
        else {
            
            // sno.frame = CGRectMake(5, 0, 58, 34);
            lbltype.frame = CGRectMake(5, 0, 50, 34);
            cidLbl.frame = CGRectMake(55, 0, 60, 34);
            cvalLbl.frame = CGRectMake(120, 0, 40, 34);
            qty.frame = CGRectMake(165, 0, 40,34);
            total.frame = CGRectMake(210, 0, 60, 34);
            delrowbtn.frame = CGRectMake(275, 3 , 25, 25);
            
        }
        
        [hlcell addSubview:qty];
        [hlcell addSubview:lbltype];
        [hlcell addSubview:cidLbl];
        [hlcell addSubview:cvalLbl];
        [hlcell addSubview:total];
        [hlcell addSubview:delrowbtn];
        hlcell.backgroundColor = [UIColor clearColor];
        
        [couponValArr addObject:cvalLbl.text];
        [couponTotalArr addObject:total.text];
        
        return hlcell;
    }
    else if (tableView == valueTable) {
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID];
            hlcell.accessoryType = UITableViewCellAccessoryNone;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                hlcell.textLabel.font = [UIFont boldSystemFontOfSize:25];
            }
        }
        
        hlcell.textLabel.text = value_arr[indexPath.row];
        hlcell.textLabel.textColor = [UIColor blackColor];
        return hlcell;
    }
    
    else if (tableView == deprtmntTbl) {
        @try {
            static NSString *CellIdentifier = @"Cell";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            hlcell.textLabel.text = departmentArr[indexPath.row];
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
        }
        @catch (NSException *exception) {
            
        }
        @finally {
            
        }
    }
    
    //added by Srinivasulu on 21/08/2017 & 06/09/2017 & 07/09/2017 & 01/06/2018....
    
    else if(tableView == editPriceReasonTbl) {
        
        UITableViewCell * hlcell;
        
        @try {
            static NSString *CellIdentifier = @"EditReasonCell";
            
            hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            hlcell.textLabel.text = editPriceReasonArr[indexPath.row];
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
        }
        @catch (NSException *exception) {
            
        }
        @finally{
            return hlcell;
        }
    }
    
    else if(tableView == listOfCustomerPurchasesTbl){
        
        static NSString * hlCellID = @"listOfCstoemrPurchaseCell";
        
        UITableViewCell * hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        hlcell.backgroundColor = [UIColor clearColor];
        
        UILabel * customerPurchasedItemSkuIdLbl;
        UILabel * customerPurchasedItemSkuNameLbl;
        UILabel * customerPurchasedItemSkuQtyLbl;
        UILabel * customerPurchasedItemSkuValueLbl;
        
        customerPurchasedItemSkuIdLbl = [[UILabel alloc] init];
        customerPurchasedItemSkuIdLbl.backgroundColor = [UIColor clearColor];
        customerPurchasedItemSkuIdLbl.textAlignment = NSTextAlignmentCenter;
        customerPurchasedItemSkuIdLbl.numberOfLines = 1;
        customerPurchasedItemSkuIdLbl.layer.borderWidth = 1.5;
        customerPurchasedItemSkuIdLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        customerPurchasedItemSkuIdLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        customerPurchasedItemSkuIdLbl.textColor = [UIColor whiteColor];
        
        customerPurchasedItemSkuNameLbl = [[UILabel alloc] init];
        customerPurchasedItemSkuNameLbl.backgroundColor = [UIColor clearColor];
        customerPurchasedItemSkuNameLbl.textAlignment = NSTextAlignmentCenter;
        customerPurchasedItemSkuNameLbl.numberOfLines = 1;
        customerPurchasedItemSkuNameLbl.layer.borderWidth = 1.5;
        customerPurchasedItemSkuNameLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        customerPurchasedItemSkuNameLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        customerPurchasedItemSkuNameLbl.textColor = [UIColor whiteColor];
        
        customerPurchasedItemSkuQtyLbl = [[UILabel alloc] init];
        customerPurchasedItemSkuQtyLbl.backgroundColor = [UIColor clearColor];
        customerPurchasedItemSkuQtyLbl.textAlignment = NSTextAlignmentCenter;
        customerPurchasedItemSkuQtyLbl.numberOfLines = 1;
        customerPurchasedItemSkuQtyLbl.layer.borderWidth = 1.5;
        customerPurchasedItemSkuQtyLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        customerPurchasedItemSkuQtyLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        customerPurchasedItemSkuQtyLbl.textColor = [UIColor whiteColor];
        
        customerPurchasedItemSkuValueLbl = [[UILabel alloc] init];
        customerPurchasedItemSkuValueLbl.backgroundColor = [UIColor clearColor];
        customerPurchasedItemSkuValueLbl.textAlignment = NSTextAlignmentCenter;
        customerPurchasedItemSkuValueLbl.numberOfLines = 1;
        customerPurchasedItemSkuValueLbl.layer.borderWidth = 1.5;
        customerPurchasedItemSkuValueLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        customerPurchasedItemSkuValueLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        customerPurchasedItemSkuValueLbl.textColor = [UIColor whiteColor];
        
        [hlcell.contentView addSubview:customerPurchasedItemSkuIdLbl];
        [hlcell.contentView addSubview:customerPurchasedItemSkuNameLbl];
        [hlcell.contentView addSubview:customerPurchasedItemSkuQtyLbl];
        [hlcell.contentView addSubview:customerPurchasedItemSkuValueLbl];
        
        @try {
            
            if(listOfCustomerPurchasesArr.count > indexPath.row){
                
                NSDictionary * dic = listOfCustomerPurchasesArr[indexPath.row];
                
                customerPurchasedItemSkuIdLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:SKU_ID] defaultReturn:@"--"];
                customerPurchasedItemSkuNameLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:ITEM_NAME] defaultReturn:@"--"];
                customerPurchasedItemSkuQtyLbl.text  = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[dic valueForKey:QUANTITY] defaultReturn:@"0.00"] floatValue]];
                customerPurchasedItemSkuValueLbl.text  = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[dic valueForKey:ITEM_TOTAL_PRICE] defaultReturn:@"0.00"] floatValue]];
            }
            else{
                
                customerPurchasedItemSkuIdLbl.text  = @"--";
                customerPurchasedItemSkuNameLbl.text  = @"--";
                customerPurchasedItemSkuQtyLbl.text  = @"--";
                customerPurchasedItemSkuValueLbl.text  = @"--";
            }
        } @catch (NSException *exception) {
            
        }
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:hlcell andSubViews:YES fontSize:14.0f cornerRadius:0.0];
            
            customerPurchasedItemSkuIdLbl.frame = CGRectMake( customerPurchasedSkuIdLbl.frame.origin.x, 0, customerPurchasedSkuIdLbl.frame.size.width + 2, 40);
            
            customerPurchasedItemSkuNameLbl.frame = CGRectMake( customerPurchasedSkuNameLbl.frame.origin.x, 0, customerPurchasedSkuNameLbl.frame.size.width + 2,40);
            
            customerPurchasedItemSkuQtyLbl.frame = CGRectMake( customerPurchasedSkuQtyLbl.frame.origin.x, 0, customerPurchasedSkuQtyLbl.frame.size.width + 2,40);
            
            customerPurchasedItemSkuValueLbl.frame = CGRectMake( customerPurchasedSkuValueLbl.frame.origin.x, 0, customerPurchasedSkuValueLbl.frame.size.width + 2,40);
        }
        else{
            
        }
        
        return  hlcell;
    }
    
    else if(tableView == voidItemReasonsTbl){
        
        @try {
            static NSString *CellIdentifier = @"voidReasonCell";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            if(voidItemReasonsTbl.tag == 2){
                
                hlcell.textLabel.text = isVoidItemArr[indexPath.row];
            }
            else{
                
                hlcell.textLabel.text = itemVoidReasonsArr[indexPath.row];
            }
            
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
        }
        @catch (NSException *exception) {
            
        }
        
    }
    
    else if(tableView == itemCancelReasonsTbl){
        
        @try {
            static NSString *CellIdentifier = @"cancelReasonCell";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            hlcell.textLabel.text = itemCancelReasonArr[indexPath.row];
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
            
        }
        @catch (NSException *exception) {
            
        }
    }
    
    else if(tableView == denominstaionsTypeTbl){
        
        @try {
            static NSString * CellIdentifier = @"denominstaionsTypeCell";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            
            hlcell.textLabel.text = @"";
            
            if([denominationsTypeArr[indexPath.row] isKindOfClass:[NSDictionary class]])
                hlcell.textLabel.text = [self checkGivenValueIsNullOrNil:[denominationsTypeArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
            
        }
        @catch (NSException *exception) {
            
        }
    }
    else if(tableView == cardTypesTbl){
        
        @try {
            static NSString * CellIdentifier = @"denominstaionsTypeCell";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            
            hlcell.textLabel.text = @"";
            
            if([cardTypesArr[indexPath.row] isKindOfClass:[NSDictionary class]])
                hlcell.textLabel.text = [self checkGivenValueIsNullOrNil:[cardTypesArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
            
        }
        @catch (NSException *exception) {
            
        }
    }
    else if(tableView == otherPaymentsOptionsTbl){
        
        @try {
            static NSString * CellIdentifier = @"otherPaymentsOptionsCell";
            
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            hlcell.textLabel.numberOfLines = 2;
            
            
            hlcell.textLabel.text = @"";
            
            if([otherPaymentsOptionsArr[indexPath.row] isKindOfClass:[NSDictionary class]])
                hlcell.textLabel.text = [self checkGivenValueIsNullOrNil:[otherPaymentsOptionsArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
        }
        @catch (NSException *exception) {
            
        }
    }
    
    //upto here on 21/08/2017 & 06/09/2017 & 07/09/2017 & 01/06/2018........
    
    else if (tableView == subDepartmentTbl) {
        @try {
            
            static NSString *CellIdentifier = @"Cell";
            UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
            if (hlcell == nil) {
                hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
                hlcell.frame = CGRectZero;
            }
            if ((hlcell.contentView).subviews){
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            
            hlcell.textLabel.numberOfLines = 1;
            
            hlcell.textLabel.text = subDepartmentArr[indexPath.row];
            hlcell.textLabel.font =  [UIFont fontWithName:kLabelFont size:18];
            hlcell.textLabel.textColor = [UIColor blackColor];
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            return hlcell;
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
        }
        @finally {
            
        }
        
    }
    
    else if(tableView == subCategoryTbl) {
        
        static NSString *hlCellID = @"hlCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        @try {
            [HUD setHidden:YES];
            
            UIButton *sNoLbl = [[UIButton alloc] init] ;
            [sNoLbl setBackgroundImage:[UIImage imageNamed:@"Button1.png"] forState:UIControlStateNormal] ;
            sNoLbl.backgroundColor = [UIColor clearColor];
            sNoLbl.titleLabel.font = [UIFont boldSystemFontOfSize:20.0];
            [sNoLbl setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            sNoLbl.layer.cornerRadius = sNoLbl.frame.size.height/2.0;
            sNoLbl.tag = indexPath.row;
            
            
            
            UILabel *subCategoryLbl = [[UILabel alloc] init] ;
            subCategoryLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:13];
            subCategoryLbl.backgroundColor = [UIColor clearColor];
            subCategoryLbl.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.6 ];
            subCategoryLbl.textAlignment=NSTextAlignmentLeft;
            
            @try {
                
                [sNoLbl setTitle:[NSString stringWithFormat:@"%ld", indexPath.row + 1] forState:UIControlStateNormal];
                
                
                if(subCategoriesArr.count > indexPath.row){
                    NSDictionary * dic = subCategoriesArr[indexPath.row];
                    subCategoryLbl.text = [dic valueForKey:@"skuDescription"];
                }
                else{
                    
                    subCategoryLbl.text = @"--";
                }
                
            }
            @catch (NSException *exception) {
                
            }
            @finally {
                
            }
            
            
            UILabel *line_1 = [[UILabel alloc] init];
            line_1.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7 ];
            line_1.text = @"-----------------------------------------------------------------------------------------------------------------------";
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                    
                    sNoLbl.frame = CGRectMake(10, 0, 40, 40);
                    
                    subCategoryLbl.frame = CGRectMake(sNoLbl.frame.origin.x+sNoLbl.frame.size.width+30, 0, 280, 45);
                    line_1.frame = CGRectMake(0,hlcell.frame.size.height-3,subCategoryTbl.frame.size.width, 1);
                    
                }
                else {
                    //skid.titleLabel.font = [UIFont fontWithName:@"Helvetica" size:22];
                    subCategoryLbl.font = [UIFont fontWithName:@"Helvetica" size:22];
                    subCategoryLbl.frame = CGRectMake(5, 0, 125, 56);
                }
            }
            else {
                
                subCategoryLbl.frame = CGRectMake(10, 0, 100, 34);
            }
            
            hlcell.backgroundColor = [UIColor clearColor];
            [hlcell.contentView addSubview:sNoLbl];
            [hlcell.contentView addSubview:subCategoryLbl];
            [hlcell.contentView addSubview:line_1];
            
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        }
        @finally {
            
        }
        return hlcell;
    }
    
#pragma mark product menu
    else if (tableView == productMenuTbl){
        
        @try {
            
            if (self.isOpen&&self.selectIndex.section == indexPath.section&&indexPath.row!=0) {
                
                if (!isGridView) {
                    static NSString *cellIdentifier = @"hlCellID";
                    
                    UITableViewCell  *hlcell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
                    
                    if ((hlcell.contentView).subviews){
                        for (UIView *subview in (hlcell.contentView).subviews) {
                            [subview removeFromSuperview];
                        }
                    }
                    
                    if(hlcell == nil) {
                        hlcell =  [[UITableViewCell alloc]
                                   initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];
                        hlcell.accessoryType = UITableViewCellAccessoryNone;
                        
                    }
                    
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        hlcell.textLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
                        
                    }
                    else {
                        hlcell.textLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:10];
                    }
                    hlcell.textLabel.textColor = [[UIColor blackColor] colorWithAlphaComponent:0.7];
                    
                    
                    subCategoryTbl = [[UITableView alloc] init];
                    subCategoryTbl.dataSource = self;
                    subCategoryTbl.delegate = self;
                    subCategoryTbl.backgroundColor = [UIColor clearColor];
                    subCategoryTbl.separatorColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.2f];
                    subCategoryTbl.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
                    
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        //
                        if (subCategoriesArr.count > 4) {
                            
                            
                            hlcell.frame = CGRectMake(productMenuTbl.frame.origin.x, 0,productMenuTbl.frame.size.width,  45 * 5);
                            
                            NSLog(@"%f-----@f",hlcell.frame.size.height);
                            
                            
                            subCategoryTbl.frame = CGRectMake(0, hlcell.frame.origin.y + 2,(productMenuTbl.frame.size.width - 20), hlcell.frame.size.height);
                        }
                        else {
                            
                            hlcell.frame = CGRectMake( productMenuTbl.frame.origin.x, 0,productMenuTbl.frame.size.width,  50  * subCategoriesArr.count);
                            subCategoryTbl.frame = CGRectMake(0, hlcell.frame.origin.y + 2,(productMenuTbl.frame.size.width - 20), hlcell.frame.size.height);
                        }
                    }
                    else {
                        
                        if (subCategoriesArr.count >4) {
                            hlcell.frame = CGRectMake( 15, 0,productMenuTbl.frame.size.width - 15,  30*4);
                            subCategoryTbl.frame = CGRectMake(hlcell.frame.origin.x + 10, hlcell.frame.origin.y,hlcell.frame.size.width - 10, hlcell.frame.size.height);
                            
                        }
                        else{
                            hlcell.frame = CGRectMake(25, 0,productMenuTbl.frame.size.width - 25,120);
                            subCategoryTbl.frame = CGRectMake(hlcell.frame.origin.x + 10, hlcell.frame.origin.y,hlcell.frame.size.width - 10, subCategoriesArr.count*30);
                        }
                        
                    }
                    
                    hlcell.backgroundColor = [UIColor clearColor];
                    [hlcell.contentView addSubview:subCategoryTbl];
                    hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
                    
                    return hlcell;
                    
                }
                else {
                    
                    static  NSString * hlCellID = @"hlCellID";
                    
                    UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
                    
                    if ((hlcell.contentView).subviews){
                        for (UIView *subview in (hlcell.contentView).subviews) {
                            [subview removeFromSuperview];
                        }
                    }
                    
                    if(hlcell == nil) {
                        hlcell = [[UITableViewCell alloc]
                                  initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID];
                        hlcell.accessoryType = UITableViewCellAccessoryNone;
                        hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
                    }
                    
                    UICollectionViewFlowLayout *layout = [[UICollectionViewFlowLayout alloc] init];
                    layout.sectionInset = UIEdgeInsetsMake(10, 10, 9, 10);
                    layout.itemSize = CGSizeMake(50, 50);
                    layout.minimumInteritemSpacing = 10.0;
                    layout.minimumLineSpacing = 20.0;
                    
                    gridView = [[UICollectionView alloc] initWithFrame:CGRectMake(0, 0, productMenuTbl.frame.size.width, 120) collectionViewLayout:layout];
                    gridView.dataSource = self;
                    gridView.delegate = self;
                    [gridView registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:@"Collection_cell"];
                    gridView.backgroundColor = [UIColor blackColor];
                    
                    float count = 0;
                    
                    
                    if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                        
                        
                        if(categoriesArr.count > self.selectIndex.section)
                            count = [categoriesArr[self.selectIndex.section] count]/2.0;
                        
                    }
                    else {
                        
                        if(categoriesArr.count > self.selectIndex.section)
                            count = [categoriesArr[self.selectIndex.section] count]/10.0;
                        
                    }
                    
                    if (count == 0) {
                        
                        gridView.frame = CGRectMake(0, 0,  productMenuTbl.frame.size.width-10, 110);
                    }
                    else {
                        gridView.frame = CGRectMake(0, 0,  productMenuTbl.frame.size.width, 160*ceil(@(count).doubleValue));
                    }
                    
                    
                    [hlcell.contentView addSubview:gridView];
                    hlcell.backgroundColor = [UIColor clearColor];
                    
                    return hlcell;
                }
                
            }
            else {
                
                static NSString *hlCellID = @"hlCellID";
                
                UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
                
                if ((hlcell.contentView).subviews){
                    
                    for (UIView *subview in (hlcell.contentView).subviews) {
                        [subview removeFromSuperview];
                    }
                }
                
                if(hlcell == nil) {
                    hlcell =  [[UITableViewCell alloc]
                               initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
                    hlcell.accessoryType = UITableViewCellAccessoryNone;
                }
                tableView.separatorColor = [UIColor clearColor];
                
                UIImageView * imageView = [[UIImageView alloc] initWithFrame:CGRectMake(10, 15, 40, 40)];
                imageView.image = [UIImage imageNamed:@"lunch.png"];
                imageView.backgroundColor = [UIColor clearColor];
                
                
                UILabel *categoryLbl = [[UILabel alloc] init];
                categoryLbl.backgroundColor = [UIColor clearColor];
                categoryLbl.textAlignment = NSTextAlignmentCenter;
                categoryLbl.numberOfLines = 1;
                categoryLbl.lineBreakMode = NSLineBreakByWordWrapping;
                
                UILabel *sizeLbl= [[UILabel alloc] init];
                sizeLbl.backgroundColor = [UIColor clearColor];
                sizeLbl.textAlignment = NSTextAlignmentCenter;
                sizeLbl.numberOfLines = 1;
                sizeLbl.lineBreakMode = NSLineBreakByWordWrapping;
                
                viewListOfItemsBtn = [UIButton buttonWithType:UIButtonTypeCustom];
                UIImage * availiableItemsListImage;
                
                if(self.isOpen&&self.selectIndex.section == indexPath.section){
                    availiableItemsListImage = [UIImage imageNamed:@"brown_down_arrow.png"];
                }
                else{
                    availiableItemsListImage = [UIImage imageNamed:@"brown_right_arrow.png"];
                }
                
                [viewListOfItemsBtn setBackgroundImage:availiableItemsListImage forState:UIControlStateNormal];
                viewListOfItemsBtn.userInteractionEnabled = YES;
                viewListOfItemsBtn.tag = indexPath.section;
                
                [viewListOfItemsBtn addTarget:self action:@selector(showListOfItems:) forControlEvents:UIControlEventTouchUpInside];
                
                categoryLbl.textColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0];
                sizeLbl.textColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0];
                
                //setting frame and font........
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    
                    categoryLbl.font =  [UIFont fontWithName:TEXT_FONT_NAME size:18];
                    categoryLbl.frame = CGRectMake(imageView.frame.origin.x+imageView.frame.size.width+30, imageView.frame.origin.y, 280, 40);
                    
                    sizeLbl.font =  [UIFont fontWithName:TEXT_FONT_NAME size:18];
                    sizeLbl.frame = CGRectMake(categoryLbl.frame.origin.x+categoryLbl.frame.size.width+40, imageView.frame.origin.y, 100, 40);
                    
                    viewListOfItemsBtn.frame  = CGRectMake(sizeLbl.frame.origin.x+sizeLbl.frame.size.width+50, sizeLbl.frame.origin.y, 40, 40);
                }
                else{
                    
                }
                
                categoryLbl.textAlignment = NSTextAlignmentLeft;
                categoryLbl.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.8];
                sizeLbl.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.8];
                
                
                
                //setting frame and font..........
                [hlcell.contentView addSubview:imageView];
                [hlcell.contentView addSubview:categoryLbl];
                [hlcell.contentView addSubview:sizeLbl];
                [hlcell.contentView addSubview:viewListOfItemsBtn];
                
                @try {
                    
                    if( categoriesArr.count > indexPath.section){
                        NSDictionary * dic = categoriesArr[indexPath.section];
                        
                        categoryLbl.text  = [NSString stringWithFormat:@"%@",[dic valueForKey:@"category"] ];
                        sizeLbl.text = [NSString stringWithFormat:@"%lu",[[dic valueForKey:@"skuIdList"] count]];
                    }
                    
                } @catch (NSException *exception) {
                    
                } @finally {
                    
                }
                
                hlcell.backgroundColor = [UIColor clearColor];
                hlcell.tag = indexPath.row;
                hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
                return hlcell;
                
            }
        } @catch (NSException *exception) {
            
        } @finally {
            
        }
        
    }
    
    //added Srinivasulu on 23/11/2017....
    //otherPaymentsDetailsTbl --  otherPaymentsDeatilsArr
    
    else if(tableView == otherPaymentsDetailsTbl){
        
        static NSString *hlCellID = @"otherPaymentCellID";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        hlcell.backgroundColor = [UIColor clearColor];
        
        
        UILabel * billPaymentRefNoLbl;
        UILabel * billPaymentModeLbl;
        UILabel * billPaymentValueLbl;
        UILabel * billPaymentCountLbl;
        UILabel * billPaymentTotalLbl;
        
        UIButton * delrowbtn;
        
        
        billPaymentRefNoLbl = [[UILabel alloc] init];
        billPaymentRefNoLbl.backgroundColor = [UIColor clearColor];
        billPaymentRefNoLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentRefNoLbl.numberOfLines = 1;
        billPaymentRefNoLbl.layer.borderWidth = 1.5;
        billPaymentRefNoLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentRefNoLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentRefNoLbl.textColor = [UIColor whiteColor];
        
        billPaymentModeLbl = [[UILabel alloc] init];
        billPaymentModeLbl.backgroundColor = [UIColor clearColor];
        billPaymentModeLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentModeLbl.numberOfLines = 1;
        billPaymentModeLbl.layer.borderWidth = 1.5;
        billPaymentModeLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentModeLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentModeLbl.textColor = [UIColor whiteColor];
        
        billPaymentValueLbl = [[UILabel alloc] init];
        billPaymentValueLbl.backgroundColor = [UIColor clearColor];
        billPaymentValueLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentValueLbl.numberOfLines = 1;
        billPaymentValueLbl.layer.borderWidth = 1.5;
        billPaymentValueLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentValueLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentValueLbl.textColor = [UIColor whiteColor];
        
        billPaymentCountLbl = [[UILabel alloc] init];
        billPaymentCountLbl.backgroundColor = [UIColor clearColor];
        billPaymentCountLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentCountLbl.numberOfLines = 1;
        billPaymentCountLbl.layer.borderWidth = 1.5;
        billPaymentCountLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentCountLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentCountLbl.textColor = [UIColor whiteColor];
        
        billPaymentTotalLbl = [[UILabel alloc] init];
        billPaymentTotalLbl.backgroundColor = [UIColor clearColor];
        billPaymentTotalLbl.textAlignment = NSTextAlignmentCenter;
        billPaymentTotalLbl.numberOfLines = 1;
        billPaymentTotalLbl.layer.borderWidth = 1.5;
        billPaymentTotalLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        billPaymentTotalLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        billPaymentTotalLbl.textColor = [UIColor whiteColor];
        
        delrowbtn = [[UIButton alloc] init];
        [delrowbtn setImage:[UIImage imageNamed:@"delete.png"] forState:UIControlStateNormal];
        [delrowbtn addTarget:self action:@selector(delTransactionFromOtherPaymentList:) forControlEvents:UIControlEventTouchUpInside];
        delrowbtn.tag = indexPath.row;
        delrowbtn.backgroundColor = [UIColor clearColor];
        
        //---
        
        [hlcell.contentView addSubview:billPaymentRefNoLbl];
        [hlcell.contentView addSubview:billPaymentModeLbl];
        [hlcell.contentView addSubview:billPaymentValueLbl];
        [hlcell.contentView addSubview:billPaymentCountLbl];
        [hlcell.contentView addSubview:billPaymentTotalLbl];
        [hlcell.contentView addSubview:delrowbtn];
        
        @try {
            
            
            if(otherPaymentsDeatilsArr.count > indexPath.row){
                
                NSDictionary * dic = otherPaymentsDeatilsArr[indexPath.row];
                
                billPaymentRefNoLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentType"] defaultReturn:@"--"];
                billPaymentModeLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentMode"] defaultReturn:@"--"];
                billPaymentValueLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentValue"] defaultReturn:@"--"];
                billPaymentCountLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentCount"] defaultReturn:@"--"];
                billPaymentTotalLbl.text  = [self checkGivenValueIsNullOrNil:[dic valueForKey:@"paymentTotal"] defaultReturn:@"--"];
            }
            
            
            
            
            
        } @catch (NSException *exception) {
            
        }
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:hlcell andSubViews:YES fontSize:14.0f cornerRadius:0.0];
            
            billPaymentRefNoLbl.frame = CGRectMake( paymentRefNoLbl.frame.origin.x, 0, paymentRefNoLbl.frame.size.width + 2, 40);
            
            billPaymentModeLbl.frame = CGRectMake( paymentModeLbl.frame.origin.x, 0, paymentModeLbl.frame.size.width + 2,40);
            
            billPaymentValueLbl.frame = CGRectMake( paymentValueLbl.frame.origin.x, 0, paymentValueLbl.frame.size.width + 2,40);
            
            billPaymentCountLbl.frame = CGRectMake( paymentCountLbl.frame.origin.x, 0, paymentCountLbl.frame.size.width + 2,40);
            
            billPaymentTotalLbl.frame = CGRectMake( paymentTotalLbl.frame.origin.x, 0, paymentTotalLbl.frame.size.width + 2,40);
            delrowbtn.frame = CGRectMake( billPaymentTotalLbl.frame.origin.x + billPaymentTotalLbl.frame.size.width + 4, 0, 40,40);
            
        }
        else{
            
            
        }
        
        return  hlcell;
        
    }
    
    //upto here on 23/11/2017....
    
    
    //Added By Bhargav.v on 03/03/2018....
    
    else if (tableView == orderItemDetailsTable ) {
        
        static NSString * hlCellID = @"orderItemListCellID";
        
        UITableViewCell * hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
        
        if ((hlcell.contentView).subviews){
            
            for (UIView * subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        
        if(hlcell == nil) {
            hlcell =  [[UITableViewCell alloc]
                       initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
            hlcell.accessoryType = UITableViewCellAccessoryNone;
        }
        tableView.separatorColor = [UIColor clearColor];
        hlcell.backgroundColor = [UIColor clearColor];
        
        UILabel * ItemListSnoLabel;
        UILabel * itemListSkuidLabel;
        UILabel * itemListDescriptionLabel;
        UILabel * itemListUomLabel;
        UILabel * itemListQuantityLabel;
        UILabel * itemListMrpLabel;
        UILabel * itemListDiscountLabel;
        UILabel * itemListSalePriceLabel;
        UILabel * itemListCostLabel;
        
        ItemListSnoLabel = [[UILabel alloc] init];
        ItemListSnoLabel.backgroundColor = [UIColor clearColor];
        ItemListSnoLabel.textAlignment = NSTextAlignmentCenter;
        ItemListSnoLabel.numberOfLines = 1;
        ItemListSnoLabel.lineBreakMode = NSLineBreakByWordWrapping;
        
        itemListSkuidLabel = [[UILabel alloc] init];
        itemListSkuidLabel.backgroundColor = [UIColor clearColor];
        itemListSkuidLabel.textAlignment = NSTextAlignmentCenter;
        itemListSkuidLabel.numberOfLines = 1;
        itemListSkuidLabel.lineBreakMode = NSLineBreakByWordWrapping;
        
        itemListDescriptionLabel = [[UILabel alloc] init];
        itemListDescriptionLabel.backgroundColor = [UIColor clearColor];
        itemListDescriptionLabel.textAlignment = NSTextAlignmentCenter;
        itemListDescriptionLabel.numberOfLines = 1;
        itemListDescriptionLabel.lineBreakMode = NSLineBreakByWordWrapping;
        
        itemListUomLabel = [[UILabel alloc] init];
        itemListUomLabel.backgroundColor = [UIColor clearColor];
        itemListUomLabel.textAlignment = NSTextAlignmentCenter;
        itemListUomLabel.numberOfLines = 1;
        itemListUomLabel.lineBreakMode = NSLineBreakByWordWrapping;
        
        
        itemListQuantityLabel = [[UILabel alloc] init];
        itemListQuantityLabel.backgroundColor = [UIColor clearColor];
        itemListQuantityLabel.textAlignment = NSTextAlignmentCenter;
        itemListQuantityLabel.numberOfLines = 1;
        itemListQuantityLabel.lineBreakMode = NSLineBreakByWordWrapping;
        
        itemListMrpLabel = [[UILabel alloc] init];
        itemListMrpLabel.backgroundColor = [UIColor clearColor];
        itemListMrpLabel.textAlignment = NSTextAlignmentCenter;
        itemListMrpLabel.numberOfLines = 1;
        itemListMrpLabel.lineBreakMode = NSLineBreakByWordWrapping;
        
        itemListDiscountLabel = [[UILabel alloc] init];
        itemListDiscountLabel.backgroundColor = [UIColor clearColor];
        itemListDiscountLabel.textAlignment = NSTextAlignmentCenter;
        itemListDiscountLabel.numberOfLines = 1;
        itemListDiscountLabel.lineBreakMode = NSLineBreakByWordWrapping;
        
        itemListSalePriceLabel = [[UILabel alloc] init];
        itemListSalePriceLabel.backgroundColor = [UIColor clearColor];
        itemListSalePriceLabel.textAlignment = NSTextAlignmentCenter;
        itemListSalePriceLabel.numberOfLines = 1;
        itemListSalePriceLabel.lineBreakMode = NSLineBreakByWordWrapping;
        
        itemListCostLabel = [[UILabel alloc] init];
        itemListCostLabel.backgroundColor = [UIColor clearColor];
        itemListCostLabel.textAlignment = NSTextAlignmentCenter;
        itemListCostLabel.numberOfLines = 1;
        itemListCostLabel.lineBreakMode = NSLineBreakByWordWrapping;
        
        
        ItemListSnoLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.7];
        itemListSkuidLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.7];
        itemListDescriptionLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.7];
        itemListUomLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.7];
        itemListQuantityLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.7];
        itemListMrpLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.7];
        itemListDiscountLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.7];
        itemListSalePriceLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.7];
        itemListCostLabel.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.7];
        
        
        [hlcell.contentView addSubview:ItemListSnoLabel];
        [hlcell.contentView addSubview:itemListSkuidLabel];
        [hlcell.contentView addSubview:itemListDescriptionLabel];
        [hlcell.contentView addSubview:itemListUomLabel];
        [hlcell.contentView addSubview:itemListQuantityLabel];
        [hlcell.contentView addSubview:itemListMrpLabel];
        [hlcell.contentView addSubview:itemListDiscountLabel];
        [hlcell.contentView addSubview:itemListSalePriceLabel];
        [hlcell.contentView addSubview:itemListCostLabel];
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:hlcell andSubViews:YES fontSize:14.0f cornerRadius:0.0];
            
            ItemListSnoLabel.frame = CGRectMake(0, 0, snoLabel.frame.size.width, hlcell.frame.size.height);
            itemListSkuidLabel.frame = CGRectMake(skuidLabel.frame.origin.x - 5, 0, skuidLabel.frame.size.width, hlcell.frame.size.height);
            itemListDescriptionLabel.frame = CGRectMake(descriptionLabel.frame.origin.x  - 5, 0, descriptionLabel.frame.size.width, hlcell.frame.size.height);
            itemListUomLabel.frame = CGRectMake(uomLabel.frame.origin.x   - 5, 0, uomLabel.frame.size.width, hlcell.frame.size.height);
            itemListQuantityLabel.frame = CGRectMake(quantityLabel.frame.origin.x - 5, 0, quantityLabel.frame.size.width, hlcell.frame.size.height);
            itemListMrpLabel.frame = CGRectMake(mrpLabel.frame.origin.x, 0, mrpLabel.frame.size.width, hlcell.frame.size.height);
            itemListDiscountLabel.frame = CGRectMake(discountLabel.frame.origin.x   - 5, 0, discountLabel.frame.size.width, hlcell.frame.size.height);
            itemListSalePriceLabel.frame = CGRectMake(salePriceLabel.frame.origin.x  - 5, 0, salePriceLabel.frame.size.width, hlcell.frame.size.height);
            itemListCostLabel.frame = CGRectMake(costLabel.frame.origin.x - 5, 0, costLabel.frame.size.width, hlcell.frame.size.height);
            
        }
        else {
            
        }
        
        
        @try {
            
            if (itemListArray.count >= indexPath.row && itemListArray.count ) {
                
                
                NSMutableDictionary * locDic = [itemListArray[indexPath.row] mutableCopy] ;
                
                ItemListSnoLabel.text = [NSString stringWithFormat:@"%ld", (indexPath.row + 1)];
                itemListSkuidLabel.text = [self checkGivenValueIsNullOrNil:[locDic valueForKey:ITEM_SKU] defaultReturn:@"--"];//ITEM_SKU
                itemListDescriptionLabel.text =  [self checkGivenValueIsNullOrNil:[locDic valueForKey:ITEM_NAME] defaultReturn:@"--"];
                
                if ([[locDic valueForKey:UOM]isKindOfClass:[NSNull class]]|| (![[locDic valueForKey:UOM]isEqualToString:@""])) {
                    
                    itemListUomLabel.text = [self checkGivenValueIsNullOrNil:[locDic valueForKey:UOM] defaultReturn:@"--"];
                }
                else
                    itemListUomLabel.text = @"--";
                
                itemListQuantityLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[locDic valueForKey:ORDERED_QUANTITY] defaultReturn:@"0.00"] floatValue]];
                
                itemListMrpLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[locDic valueForKey:MAX_RETAIL_PRICE] defaultReturn:@"0.00"] floatValue]];
                
                if((itemListMrpLabel.text).floatValue <= 0)
                    itemListMrpLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[locDic valueForKey:@"item_price"] defaultReturn:@"0.00"] floatValue]];
                
                itemListDiscountLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[locDic valueForKey:DISCOUNT] defaultReturn:@"0.00"] floatValue]];
                
                itemListSalePriceLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[locDic valueForKey:SALE_PRICE] defaultReturn:@"0.00"] floatValue]];
                
                if((itemListSalePriceLabel.text).floatValue <= 0)
                    itemListSalePriceLabel.text = itemListMrpLabel.text;
                
                itemListCostLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[locDic valueForKey:total_cost] defaultReturn:@"0.00"] floatValue]];
                
                if((itemListCostLabel.text).floatValue <= 0)
                    itemListCostLabel.text = [NSString stringWithFormat:@"%.2f", ((itemListSalePriceLabel.text).floatValue * (itemListQuantityLabel.text).floatValue)];
                
                
            }
            
            else {
                
                ItemListSnoLabel.text   = @"--";
                itemListSkuidLabel.text = @"--";
                itemListDescriptionLabel.text = @"--";
                itemListUomLabel.text   = @"--";
                itemListQuantityLabel.text = @"--";
                itemListMrpLabel.text = @"--";
                itemListDiscountLabel.text = @"--";
                itemListSalePriceLabel.text = @"--";
                itemListCostLabel.text = @"--";
            }
        } @catch (NSException *exception) {
            
        }
        
        hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
        
        return  hlcell;
    }
    
    else if (tableView == ordersPagenationTable) {
        
        static NSString * CellIdentifier = @"Cell";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (hlcell == nil) {
            hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
            hlcell.frame = CGRectZero;
        }
        if ((hlcell.contentView).subviews){
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        @try {
            
            hlcell.textLabel.text = orderListArr[indexPath.row];
            hlcell.textLabel.font =  [UIFont fontWithName:TEXT_FONT_NAME size:16.0f];
        } @catch (NSException *exception) {
            
        }
        
        hlcell.textLabel.textColor = [UIColor blackColor];
        hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
        
        return hlcell;
        
    }
    else if (tableView == memberShipTypeTbl) {
        
        static NSString * CellIdentifier = @"memeberShipTypeCell";
        
        UITableViewCell *hlcell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (hlcell == nil) {
            hlcell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
            hlcell.frame = CGRectZero;
        }
        if ((hlcell.contentView).subviews){
            for (UIView *subview in (hlcell.contentView).subviews) {
                [subview removeFromSuperview];
            }
        }
        @try {
            
            hlcell.textLabel.text = memberShipTypeArr[indexPath.row];
            hlcell.textLabel.font =  [UIFont fontWithName:TEXT_FONT_NAME size:16.0f];
        } @catch (NSException *exception) {
            
        }
        
        hlcell.textLabel.textColor = [UIColor blackColor];
        hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
        
        return hlcell;
        
    }
    
    //upto here on 03/03/2018
    
    else{
        //changed by Srinivasulu on 12/10/2017....
        UITableViewCell * hlcell;
        
        @try {
            
            static NSString *hlCellID = @"hlCellID";
            
            hlcell = [tableView dequeueReusableCellWithIdentifier:hlCellID];
            
            if ((hlcell.contentView).subviews){
                
                for (UIView *subview in (hlcell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            if(hlcell == nil) {
                hlcell =  [[UITableViewCell alloc]
                           initWithStyle:UITableViewCellStyleDefault reuseIdentifier:hlCellID] ;
                hlcell.accessoryType = UITableViewCellAccessoryNone;
            }
            tableView.separatorColor = [UIColor clearColor];
            
            //  NSDictionary *dic = [priceDic objectAtIndex:indexPath.row];
            
            UILabel * itemDescLbl;
            UILabel * itemPriceLbl;
            UILabel * itemQtyInHandLbl;
            UILabel * itemColorLbl;
            UILabel * itemSizeLbl;
            UILabel * itemMeasurementLbl;
            
            itemDescLbl = [[UILabel alloc] init] ;
            itemDescLbl.layer.borderWidth = 1.5;
            itemDescLbl.font = [UIFont systemFontOfSize:13.0];
            itemDescLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            itemDescLbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            itemDescLbl.textColor = [UIColor blackColor];
            itemDescLbl.textAlignment=NSTextAlignmentLeft;
            
            itemPriceLbl = [[UILabel alloc] init] ;
            itemPriceLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            itemPriceLbl.layer.borderWidth = 1.5;
            itemPriceLbl.backgroundColor =[UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            itemPriceLbl.textAlignment = NSTextAlignmentCenter;
            itemPriceLbl.numberOfLines = 2;
            itemPriceLbl.textColor = [UIColor blackColor];
            
            itemQtyInHandLbl = [[UILabel alloc] init] ;
            itemQtyInHandLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            itemQtyInHandLbl.layer.borderWidth = 1.5;
            itemQtyInHandLbl.backgroundColor =[UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            itemQtyInHandLbl.textAlignment = NSTextAlignmentCenter;
            itemQtyInHandLbl.numberOfLines = 2;
            itemQtyInHandLbl.textColor = [UIColor blackColor];
            
            itemColorLbl = [[UILabel alloc] init] ;
            itemColorLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            itemColorLbl.layer.borderWidth = 1.5;
            itemColorLbl.backgroundColor =[UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            itemColorLbl.textAlignment = NSTextAlignmentCenter;
            itemColorLbl.numberOfLines = 2;
            itemColorLbl.textColor = [UIColor blackColor];
            
            itemSizeLbl = [[UILabel alloc] init] ;
            itemSizeLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            itemSizeLbl.layer.borderWidth = 1.5;
            itemSizeLbl.backgroundColor =[UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            itemSizeLbl.textAlignment = NSTextAlignmentCenter;
            itemSizeLbl.numberOfLines = 2;
            itemSizeLbl.textColor = [UIColor blackColor];
            
            itemMeasurementLbl = [[UILabel alloc] init] ;
            itemMeasurementLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
            itemMeasurementLbl.layer.borderWidth = 1.5;
            itemMeasurementLbl.backgroundColor =[UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            itemMeasurementLbl.textAlignment = NSTextAlignmentCenter;
            itemMeasurementLbl.numberOfLines = 2;
            itemMeasurementLbl.textColor = [UIColor blackColor];
            
            hlcell.selectionStyle = UITableViewCellSelectionStyleNone;
            
            
            
            if (filteredSkuArrayList.count > indexPath.row) {
                
                itemDescLbl.text = filteredSkuArrayList[indexPath.row];
                itemPriceLbl.text = [NSString stringWithFormat:@"%.2f",[filteredPriceArr[indexPath.row] floatValue]];
                
                if (skuArrayList.count > indexPath.row){
                    NSDictionary * dic = skuArrayList[indexPath.row];
                    
                    
                    if([dic isKindOfClass:[NSDictionary class]]){
                        
                        itemQtyInHandLbl.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[dic valueForKey:QUANTITY_IN_HAND] defaultReturn:@"0.00"] floatValue]];
                        itemColorLbl.text = [self checkGivenValueIsNullOrNil:[dic valueForKey:COLOR] defaultReturn:@"--"];
                        itemSizeLbl.text = [self checkGivenValueIsNullOrNil:[dic valueForKey:SIZE] defaultReturn:@""];
                        itemMeasurementLbl.text = [self checkGivenValueIsNullOrNil:[dic valueForKey:MEASUREMENT_RANGE] defaultReturn:@""];
                    }
                }
                
            }
            else {
                
                itemDescLbl.text = @"";
                itemPriceLbl.text = @"";
                itemQtyInHandLbl.text = @"";
                itemColorLbl.text = @"";
                itemSizeLbl.text = @"";
                itemMeasurementLbl.text = @"";
            }
            
            if(!(itemQtyInHandLbl.text).length)
                itemQtyInHandLbl.text = @"--";
            if(!(itemColorLbl.text).length)
                itemColorLbl.text = @"--";
            if(!(itemSizeLbl.text).length)
                itemSizeLbl.text = @"--";
            if(!(itemMeasurementLbl.text).length)
                itemMeasurementLbl.text = @"--";
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                itemDescLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
                itemPriceLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
                itemQtyInHandLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:13];
                itemColorLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:13];
                itemSizeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:13];
                itemMeasurementLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:13];
                
                if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                    
                }
                else {
                    
                }
                
                itemDescLbl.frame = CGRectMake(0, 0, 170, 50);
                itemPriceLbl.frame = CGRectMake( itemDescLbl.frame.origin.x + itemDescLbl.frame.size.width, 0, 100, itemDescLbl.frame.size.height);
                itemQtyInHandLbl.frame = CGRectMake( itemPriceLbl.frame.origin.x + itemPriceLbl.frame.size.width, 0, 80, itemDescLbl.frame.size.height);
                itemColorLbl.frame = CGRectMake( itemQtyInHandLbl.frame.origin.x + itemQtyInHandLbl.frame.size.width, 0, 70, itemDescLbl.frame.size.height);
                itemSizeLbl.frame = CGRectMake( itemColorLbl.frame.origin.x + itemColorLbl.frame.size.width, 0, 70, itemDescLbl.frame.size.height);
                itemMeasurementLbl.frame = CGRectMake( itemSizeLbl.frame.origin.x + itemSizeLbl.frame.size.width, 0, BillField.frame.size.width - (itemSizeLbl.frame.origin.x + itemSizeLbl.frame.size.width), itemDescLbl.frame.size.height);
            }
            else {
                
                itemDescLbl.frame = CGRectMake(5, 0, 130, 34);
                itemPriceLbl.frame = CGRectMake(135, 0, 70, 34);
            }
            
            
            
            //            [hlcell setBackgroundColor:[UIColor clearColor]];
            [hlcell.contentView addSubview:itemDescLbl];
            [hlcell.contentView addSubview:itemPriceLbl];
            [hlcell.contentView addSubview:itemQtyInHandLbl];
            [hlcell.contentView addSubview:itemColorLbl];
            [hlcell.contentView addSubview:itemSizeLbl];
            [hlcell.contentView addSubview:itemMeasurementLbl];
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
        }
        @finally{
            
            return hlcell;
        }
    }
}


- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    // cell background color...
    UITableViewCell* theCell = [tableView cellForRowAtIndexPath:indexPath];
    //theCell.contentView.backgroundColor=[UIColor colorWithRed:255.0/255.0 green:232.0/255.0 blue:124.0/255.0 alpha:1.0];
    theCell.contentView.backgroundColor=[UIColor clearColor];
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    
    if (tableView == cartTable) {
        
        
        
    }
    
    else if (tableView == deprtmntTbl) {
        
        [popOver dismissPopoverAnimated:YES];
        
        @try {
            
            
            
            //changed by Srinivasulu on 22/06/2017....
            
            subDepartmentFld.text = @"";
            
            if(subDepartmentArr.count)
                [subDepartmentArr removeAllObjects];
            
            
            if( ((transperentView.isHidden) || (transperentView == nil))){
                
                departmentFld.text = departmentArr[indexPath.row];
                
                if(([dept_SubDept_Dic.allKeys containsObject:departmentFld.text]) && (![[dept_SubDept_Dic valueForKey:departmentFld.text] isKindOfClass:[NSNull class]]) ){
                    
                    subDepartmentArr =  [dept_SubDept_Dic valueForKey:departmentFld.text];
                }
            }
            else{
                itemsSalePersonSubDeptTxt.text = @"";
                itemsSalePersonDeptTxt.text = departmentArr[indexPath.row];
                
                if(([dept_SubDept_Dic.allKeys containsObject:itemsSalePersonDeptTxt.text]) && (![[dept_SubDept_Dic valueForKey:itemsSalePersonDeptTxt.text] isKindOfClass:[NSNull class]]) ){
                    
                    subDepartmentArr =  [dept_SubDept_Dic valueForKey:itemsSalePersonDeptTxt.text];
                }
                
            }
            
            
            //upto here on 22/06/2017.....
        }
        @catch (NSException *exception) {
            
        }
        
    }
    
    //added by Srinivasulu on 21/08/2017....
    
    else if(tableView == editPriceReasonTbl){
        
        @try {
            [popOver dismissPopoverAnimated:YES];
            
            editPriceReasonTxt.text = editPriceReasonArr[indexPath.row];
            
            //added by Srinivasulu on 06/09/2017....
            
            if(itemEditPriceReasonTxt  != nil)
                itemEditPriceReasonTxt.text = editPriceReasonArr[indexPath.row];
            
            //upto here on 06/09/2017....
            
        } @catch (NSException *exception) {
            
        }
    }
    else if (tableView == memberShipTypeTbl) {
        
        @try {
            [popOver dismissPopoverAnimated:YES];
            
            memberShipText.text = memberShipTypeArr[indexPath.row];
        } @catch (NSException *exception) {
            
        }
    }
    //added by Srinivasulu on 06/09/2017....
    
    else if(tableView == voidItemReasonsTbl){
        
        @try {
            
            [popOver dismissPopoverAnimated:YES];
            
            if(voidItemReasonsTbl.tag == 2){
                
                isItemVoidTxt.text = isVoidItemArr[indexPath.row];
                itemVoidReasonTxt.text = @"";
                
            }
            else{
                
                itemVoidReasonTxt.text = itemVoidReasonsArr[indexPath.row];
            }
        }
        @catch(NSException * exception){
            
        }
        
    }
    
    
    //upto here on 21/08/2017....
    
    //added by Srinivasulu on 07/09/2017....
    
    else if(tableView == itemCancelReasonsTbl){
        
        @try {
            
            [popOver dismissPopoverAnimated:YES];
            
            itemCancelReasonTxt.text = itemCancelReasonArr[indexPath.row];
            
        }
        @catch(NSException * exception){
            
        }
    }
    
    else if(tableView == denominstaionsTypeTbl){
        
        @try {
            
            [popOver dismissPopoverAnimated:YES];
            
            denominationTypeTxt.text = [self checkGivenValueIsNullOrNil:[denominationsTypeArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            currencyCodeStr = denominationTypeTxt.text;
            
            //added by srinivasulu on 24/11/2017....
            
            if(denominstaionsTypeTbl.tag == 2){
                if(billPaymentTendeInfoDic.allKeys.count)
                    [billPaymentTendeInfoDic removeAllObjects];
                
                billPaymentTendeInfoDic = [denominationsTypeArr[indexPath.row] mutableCopy];
            }
            
            //upto here on 24/11/2017....
            
            if(denominstaionsTypeTbl.tag == 2){
                if ([denominationView isDescendantOfView:self.view])
                    [denominationView removeFromSuperview];
                
                [self populateDenominations];
                
            }
            else{
                if ([returnDenominationView isDescendantOfView:self.view])
                    [returnDenominationView removeFromSuperview];
                
                [self populateReturnDenominationViewDynamically];
            }
            
        }
        @catch(NSException * exception){
            
        }
    }
    
    //otherPaymentsOptionsTbl -- otherPaymentsOptionsArr
    
    else if(tableView == otherPaymentsOptionsTbl){
        
        @try {
            
            [popOver dismissPopoverAnimated:YES];
            
            otherPaymentTypeTxt.text = [self checkGivenValueIsNullOrNil:[otherPaymentsOptionsArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            //added by srinivasulu on 24/11/2017....
            
            if(billPaymentTendeInfoDic.allKeys.count)
                [billPaymentTendeInfoDic removeAllObjects];
            
            billPaymentTendeInfoDic = [otherPaymentsOptionsArr[indexPath.row] mutableCopy];
            
            //upto here on 24/11/2017....
            
        }
        @catch(NSException * exception){
            
        }
    }
    
    //cardTypesArr --  cardTypeTxt -- cardTypesTbl
    
    else if(tableView == cardTypesTbl){
        
        @try {
            
            [popOver dismissPopoverAnimated:YES];
            
            cardTypeTxt.text = [self checkGivenValueIsNullOrNil:[cardTypesArr[indexPath.row] valueForKey:TENDER_NAME] defaultReturn:@""];
            
            //added by srinivasulu on 24/11/2017....
            
            if(billPaymentTendeInfoDic.allKeys.count)
                [billPaymentTendeInfoDic removeAllObjects];
            
            billPaymentTendeInfoDic = [cardTypesArr[indexPath.row] mutableCopy];
            
            //upto here on 24/11/2017....
        }
        @catch(NSException * exception){
            
        }
    }
    
    //upto here on 07/09/2017...
    
    else if (tableView == subDepartmentTbl) {
        
        [popOver dismissPopoverAnimated:YES];
        
        //changed by Srinivasulu on 22/06/2017....
        
        @try {
            
            if( ((transperentView.isHidden) || (transperentView == nil))){
                
                subDepartmentFld.text = subDepartmentArr[indexPath.row];
            }
            else{
                
                itemsSalePersonSubDeptTxt.text = subDepartmentArr[indexPath.row];
            }
            
        } @catch (NSException *exception) {
            
        }
        
        //upto here on 22/06/2017.....
        
    }
    
    
    else if(tableView == salesPersonTbl) {
        
        @try {
            
            [popOver dismissPopoverAnimated:YES];
            
            NSDictionary *dic = employeeIdsArr[indexPath.row];
            
            
            
            
            salesPersonId.text = [NSString stringWithFormat:@"%@(%@)",[dic valueForKey:@"firstName"],[dic valueForKey:@"employeeCode"]];
            
            salesPersonIdStr  = [[dic valueForKey:@"employeeCode"] copy];
            
            
            
            
            if(segment_index == 5) {
                
                empCodeTxt.text = [dic valueForKey:@"employeeCode"];
                empNameTxt.text = [NSString stringWithFormat:@"%@ %@ %@",[dic valueForKey:@"firstName"],[dic valueForKey:@"middleName"],[dic valueForKey:@"lastName"]];
                empLocTxt.text = [dic valueForKey:@"location"];
                
            }
            else if(isItemEmpl) {
                
                salesPersonIdFld.text = [employeeIdsArr[indexPath.row] valueForKey:@"employeeCode"];
                salesPersonNameFld.text = [NSString stringWithFormat:@"%@ %@ %@",[dic valueForKey:@"firstName"],[dic valueForKey:@"middleName"],[dic valueForKey:@"lastName"]];
                
            }//--
            
            
            //added by Srinivasulu on 03/11/2017....
            
            if( (!(transperentView.isHidden) || (transperentView != nil)) && (itemsSalePersonIdTxt != nil && itemsSalePersonTxt != nil)){
                
                
                itemsSalePersonIdTxt.text = [employeeIdsArr[indexPath.row] valueForKey:@"employeeCode"];
                itemsSalePersonTxt.text = [NSString stringWithFormat:@"%@ %@ %@",[dic valueForKey:@"firstName"],[dic valueForKey:@"middleName"],[dic valueForKey:@"lastName"]];
                
            }
            
            //upto here on 03/11/2017....
            
        } @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        } @finally {
            
        }
    }
    
    else if(tableView == deliveryPersonTbl){ // added by sai
        
        @try {
            
            [popOver dismissPopoverAnimated:YES];
            
            //            NSDictionary *dic = employeeIdsArr[indexPath.row];
            NSDictionary *dic = deliveryPersonIDArr[indexPath.row];
            
            
            
            
            deliveryPersonId.text = [NSString stringWithFormat:@"%@(%@)",[dic valueForKey:@"firstName"],[dic valueForKey:@"employeeCode"]];
            
            //            salesPersonIdStr  = [[dic valueForKey:@"employeeCode"] copy];
            
            
            
            
            //            if(segment_index == 5) {
            //
            //                empCodeTxt.text = [dic valueForKey:@"employeeCode"];
            //                empNameTxt.text = [NSString stringWithFormat:@"%@ %@ %@",[dic valueForKey:@"firstName"],[dic valueForKey:@"middleName"],[dic valueForKey:@"lastName"]];
            //                empLocTxt.text = [dic valueForKey:@"location"];
            //
            //            }
            //            else if(isItemEmpl) {
            //
            //                salesPersonIdFld.text = [employeeIdsArr[indexPath.row] valueForKey:@"employeeCode"];
            //                salesPersonNameFld.text = [NSString stringWithFormat:@"%@ %@ %@",[dic valueForKey:@"firstName"],[dic valueForKey:@"middleName"],[dic valueForKey:@"lastName"]];
            //
            //            }//--
            
            
            //added by Srinivasulu on 03/11/2017....
            
            if( (!(transperentView.isHidden) || (transperentView != nil)) && (itemsSalePersonIdTxt != nil && itemsSalePersonTxt != nil)){
                
                
                //                //                itemsSalePersonIdTxt.text = [employeeIdsArr[indexPath.row] valueForKey:@"employeeCode"];
                //                itemsSalePersonIdTxt.text = [salesPersonIDArr[indexPath.row] valueForKey:@"employeeCode"];
                //
                //                itemsSalePersonTxt.text = [NSString stringWithFormat:@"%@ %@ %@",[dic valueForKey:@"firstName"],[dic valueForKey:@"middleName"],[dic valueForKey:@"lastName"]];
                
                if ( (!(paymentScrollView.isHidden) || (paymentScrollView != nil)) && (salesPersonId != nil  && salesPersonId != nil)){
                    deliveryPersonId.text = [NSString stringWithFormat:@"%@ %@ %@",[dic valueForKey:@"firstName"],[dic valueForKey:@"middleName"],[dic valueForKey:@"lastName"]];
                }
            }
            //upto here on 03/11/2017....
            
        } @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
            
        } @finally {
            
        }
    }
    
    else if(tableView == freeItemsTbl) {
        
        [customerInfoPopOver dismissPopoverAnimated:true];
        
        @try {
            
            selected_SKID = [unappliedDealsSkuIdArr[indexPath.row] copy];
            barcodeBtn.tag = 0;
            
            if (!isFreeItemAdded) {
                
                isFreeItemAdded = true;
                
                //                HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
                //                [self.navigationController.view addSubview:HUD];
                //                // Regiser for HUD callbacks so we can remove it from the window at the right time
                //                HUD.delegate = self;
                //                HUD.dimBackground = TRUE;
                //                HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
                //                HUD.mode = MBProgressHUDModeCustomView;
                //                // Show the HUD
                //                [HUD show:YES];
                //                [HUD setLabelText:@"Please Wait.."];
                
                [HUD setHidden:NO];
                
                if (!isOfflineService) {
                    
                    NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns", @"cartDetails"];
                    
                    skuIdList = [NSMutableArray new];
                    pluCodeList = [NSMutableArray new];
                    unitPriceList = [NSMutableArray new];
                    qtyList = [NSMutableArray new];
                    totalPriceList = [NSMutableArray new];
                    itemStatusList = [NSMutableArray new];
                    itemDiscountList = [NSMutableArray new];
                    
                    for (int i = 0; i < cartTotalItems.count; i++) {
                        NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                        [skuIdList addObject:itemDetails[0]];
                        [pluCodeList addObject:itemDetails[8]];
                        [unitPriceList addObject:@([itemDetails[4] floatValue])];
                        [qtyList addObject:@([itemDetails[5] floatValue])];
                        [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
                        if ([isVoidedArray[i] boolValue]) {
                            [itemStatusList addObject:@"void"];
                        }
                        else {
                            [itemStatusList addObject:@""];
                        }
                        [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
                        
                    }
                    
                    NSArray *loyaltyKeys = @[@"storeLocation",@"requestHeader",@"skuIdArrList",@"pluCodeArrList",@"unitPriceArrList",@"qtyArrList",@"totalPriceArrList",@"itemStatusArrList",@"productOptionalDiscountArr",@"totalBillAmount",@"quantity",@"phonenumber",@"purchaseChannel"];
                    
                    NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],skuIdList,pluCodeList,unitPriceList,qtyList,totalPriceList,itemStatusList, itemDiscountList, totalTxt.text,@"1",custmerPhNum.text,@"POS"];
                    NSDictionary *campaigndictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                    
                    
                    NSArray *objects = @[[NSString stringWithFormat:@"%@",selected_SKID],[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],campaigndictionary_];
                    
                    NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                    
                    NSError * err;
                    NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
                    NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                    
                    //            getSkuid.skuID = salesReportJsonString;
                    @try {
                        skListTable.frame = CGRectMake(skListTable.frame.origin.x, skListTable.frame.origin.y, skListTable.frame.size.width, 0);
                        WebServiceController *webServiceController = [WebServiceController new];
                        webServiceController.getSkuDetailsDelegate = self;
                        [webServiceController getSkuDetailsWithData:salesReportJsonString];
                        [tempSkuArrayList removeAllObjects];
                        [filteredSkuArrayList removeAllObjects];
                        [skuArrayList removeAllObjects];
                    }
                    @catch (NSException *exception) {
                        [HUD setHidden:YES];
                    }
                }
                else {
                    // [self performSelectorInBackground:@selector(getOfflineProductWithSearchSkuId:) withObject:selected_SKID];
                    
                    //changed by Srinivasulu on 04/10/2017....
                    //reason is -- In thread call's we should not right UIrelated code.... other wise in some case.... It will crashes....
                    
                    //                    [HUD showWhileExecuting:@selector(getOfflineProductWithSearchSkuId:) onTarget:self withObject:selected_SKID animated:true];
                    [self getOfflineProductWithSearchSkuId:selected_SKID withPlucode:@""];
                    
                    //upto here on 04/10/2017....
                }
            }
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@",exception);
        }
        @finally {
            
            //            [HUD setHidden:YES];
        }
    }
    else if (tableView == reasonsTable) {
        @try {
            [popOver dismissPopoverAnimated:YES];
            
            reasontextField.text = discountReasons[indexPath.row];
            [reasonPopOver dismissPopoverAnimated:YES];
            
        } @catch (NSException *exception) {
            
        }
    }
    else if (tableView == priceTable) {
        
        @try {
            
            if (priceDic.count > indexPath.row) {
                
                NSDictionary * JSON = priceDic[indexPath.row];
                
                if (!isOfflineService) {
                    //            if ([[JSON objectForKey:@"quantity"] floatValue] > 0) {
                    @try {
                        
                        NSArray *tempTaxArr = [JSON valueForKey:@"tax"];
                        NSString *itemString = @"";
                        
                        //changed by Srinivasulu on 30/08/2018....
                        float itemUnitPrice = [[self checkGivenValueIsNullOrNil:[JSON valueForKey:ITEM_UNIT_PRICE] defaultReturn:@"0.00"] floatValue];
                        float packSize = [[self checkGivenValueIsNullOrNil:[JSON valueForKey:Pack_Size] defaultReturn:@"1"] floatValue];
                        
                        if(packSize > 0)
                            itemUnitPrice = itemUnitPrice / packSize;
                        
                        if (tempTaxArr.count > 0) {
                            //                            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",JSON[@"description"],@"#",JSON[@"description"],@"#",[JSON[@"quantity"] floatValue],@"#",[JSON[@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",[JSON[@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[JSON[@"tax"][0] valueForKey:@"taxRate"] doubleValue]],@"#",[JSON valueForKey:PLU_CODE],@"#",[[JSON valueForKey:@"price"] floatValue]];
                            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",JSON[@"description"],@"#",JSON[@"description"],@"#",[JSON[@"quantity"] floatValue],@"#",itemUnitPrice, @"#", [NSString stringWithFormat:@"%@",[JSON[@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[JSON[@"tax"][0] valueForKey:@"taxRate"] doubleValue]],@"#",[JSON valueForKey:PLU_CODE],@"#",itemUnitPrice];
                            
                        }
                        else {
                            //                            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",JSON[@"description"],@"#",JSON[@"description"],@"#",[JSON[@"quantity"] floatValue],@"#",[JSON[@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00],@"#",[JSON valueForKey:PLU_CODE],@"#",[[JSON valueForKey:@"price"] floatValue]];
                            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",JSON[@"description"],@"#",JSON[@"description"],@"#",[JSON[@"quantity"] floatValue],@"#",itemUnitPrice, @"#", [NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00],@"#",[JSON valueForKey:PLU_CODE],@"#",itemUnitPrice];
                        }
                        
                        selected_SKID = [NSString stringWithFormat:@"%@",JSON[@"skuId"]];
                        selected_desc = [[NSString stringWithFormat:@"%@",JSON[@"description"]] copy];
                        //                        selected_price = [[NSString stringWithFormat:@"%.2f",[JSON[@"price"] floatValue]] copy];
                        selected_price = [[NSString stringWithFormat:@"%.2f",itemUnitPrice] copy];
                        selectedPluCode = [[JSON valueForKey:PLU_CODE] copy];
                        
                        //added by Srinivasulu on 27/06/2017....
                        
                        //                        hsnArr = [self checkGivenValueIsNullOrNil:[priceDic valueForKey:HSN_CODE] defaultReturn:@""];
                        
                        //upto here on 27/06/2017....
                        
                        [self getSkuDetailsHandler:itemString productInfo:priceDic[indexPath.row]];
                        
                        
                        //changed by Srinivasulu on 13/02/2018....
                        
                        if (isToCallApplyCampaigns && !isNewReturnBill){
                            [HUD setHidden:NO];
                            
                            //upto here on 13/02/2018....
                            [self callOffersForScanning:selected_SKID qty:@"1" total:[NSString stringWithFormat:@"%.2f",(totalTxt.text).floatValue] itemPrice:amount];
                        }
                        
                        transparentView.hidden = YES;
                        // [HUD setHidden:YES];
                    }
                    @catch (NSException *exception) {
                        
                        [HUD setHidden:YES];
                        
                        NSLog(@"%@",exception);
                        
                    }
                    //            }
                    //            else {
                    //                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Stock not available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    //                [alert show];
                    //            }
                    
                }
                else {
                    @try {
                        
                        NSArray *tempTaxArr = [JSON valueForKey:@"tax"];
                        NSString *itemString = @"";
                        if (tempTaxArr.count > 0) {
                            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",JSON[@"description"],@"#",JSON[@"description"],@"#",[JSON[@"quantity"] floatValue],@"#",[JSON[@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",[JSON[@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[JSON[@"tax"][0] valueForKey:@"taxRate"] doubleValue]],@"#",[JSON valueForKey:PLU_CODE],@"#",[[JSON valueForKey:@"price"] floatValue]];
                            
                        }
                        else {
                            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",JSON[@"description"],@"#",JSON[@"description"],@"#",[JSON[@"quantity"] floatValue],@"#",[JSON[@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00],@"#",[JSON valueForKey:PLU_CODE],@"#",[[JSON valueForKey:@"price"] floatValue]];
                            
                        }
                        selected_SKID = [NSString stringWithFormat:@"%@",JSON[@"skuId"]];
                        selected_desc = [[NSString stringWithFormat:@"%@",JSON[@"description"]] copy];
                        selected_price = [[NSString stringWithFormat:@"%.2f",[JSON[@"price"] floatValue]] copy];
                        selectedPluCode = [[JSON valueForKey:PLU_CODE] copy];
                        
                        //added by Srinivasulu on 27/06/2017....
                        
                        //                        hsnArr = [self checkGivenValueIsNullOrNil:[priceDic valueForKey:HSN_CODE] defaultReturn:@""];
                        
                        //upto here on 27/06/2017....
                        
                        if (!isOfflineService) {
                            
                            [taxArr addObject:[JSON valueForKey:@"tax"]];
                            [isPriceEditableArr addObject:@([[priceDic[0] valueForKey:@"editable"] intValue])];
                        }
                        //                [itemDiscountArr addObject:@"0.00"];
                        //                [itemDiscountDescArr addObject:@""];
                        //                [itemScanCode addObject:selected_SKID];
                        //                [manufacturedItemsArr addObject:[NSNumber numberWithBool:[[[priceDic objectAtIndex:0] objectForKey:kIsManuFacturedItem] boolValue]]];
                        //                [isPackagedItem addObject:[NSNumber numberWithBool:[[[priceDic objectAtIndex:0] objectForKey:kPackagedType] boolValue]]];
                        isScanningItem = TRUE;
                        isItemScanned = false;
                        
                        [self getSkuDetailsHandler:itemString productInfo:priceDic[0]];
                        transparentView.hidden = YES;
                        [HUD setHidden:YES];
                    }
                    @catch (NSException *exception) {
                        
                        NSLog(@"%@",exception);
                        
                    }
                }
            }
            else {
                
                [HUD setHidden:YES];
                transparentView.hidden = YES;
                
            }
        } @catch (NSException *exception) {
            
        } @finally {
            
        }
        
    }
    
    else if (tableView == giftTypeTableView) {
        
        if([giftTypeArrayList[indexPath.row] isEqualToString:@"Loyalty Card"]){
            giftTypeString = @"loyaltycard";
            giftScannerBtn.tag = 2;
        }
        else if([giftTypeArrayList[indexPath.row] isEqualToString:@"Coupon"]){
            giftTypeString = @"coupon";
            giftScannerBtn.tag = 1;
            
        }
        else if([giftTypeArrayList[indexPath.row] isEqualToString:@"Gift Voucher"]){
            giftTypeString = @"giftvoucher";
            giftScannerBtn.tag = 3;
        }
        else{// added by roja on 29/07/2019...
            giftTypeString = @"Wallet";
        }
        
        giftType.text = giftTypeArrayList[indexPath.row];
        giftType.backgroundColor = [UIColor whiteColor];
        giftView.tag = indexPath.row;
        [giftTypeTableView setHidden:YES];
        [editPricePopOver dismissPopoverAnimated:YES];
        giftTypeBtn.tag = 0;
        [self showgiftView];
    }
    else if (tableView == couponType) {
        
        selectCouponType.text = cupon_type[indexPath.row];
        giftView.tag = indexPath.row;
        if ([cupon_type[indexPath.row] isEqualToString:@"Sodexo Coupons"]) {
            
            foodCouponTypeStr = @"Sodexo";
        }
        else {
            foodCouponTypeStr = @"Ticket";
        }
        [couponType setHidden:YES];
        
    }
    
    else if (tableView == valueTable) {
        
        couponValue.text = value_arr[indexPath.row];
        couponView.tag = indexPath.row;
        
        [valueTable setHidden:YES];
        valueBtn.tag = 0;
        couponQty.text = @"1";
        
    }
    else if (tableView == couponDeatails){
        
    }
    else if (tableView == allDealsOffersTable) {
        
    }
    else if(tableView == productMenuTbl){
        
        
        @try {
            
            
            //Play Audio for button touch....
            AudioServicesPlaySystemSound (soundFileObject);
            
            if ([[categoriesArr[indexPath.section]valueForKey:kskuIdList] count]==0) {
                return;
            }
            
            subCategoriesArr = [NSMutableArray new];
            subCategoriesArr = [categoriesArr[indexPath.section]  valueForKey:kskuIdList];
            
            NSIndexPath * path =[NSIndexPath indexPathForRow: 0 inSection:indexPath.section];
            
            if (path.row == 0) {
                
                UITableViewCell * cell2 = [productMenuTbl cellForRowAtIndexPath:path];
                
                if ([path isEqual:self.selectIndex]) {
                    self.isOpen = NO;
                    
                    for (UIButton *button in cell2.contentView.subviews) {
                        
                        if(button.frame.origin.x == viewListOfItemsBtn.frame.origin.x){
                            
                            UIImage * availiableItemsListImage = [UIImage imageNamed:@"brown_right_arrow.png"];
                            
                            [button setBackgroundImage:availiableItemsListImage forState:UIControlStateNormal];
                            
                        }
                    }
                    
                    [self didSelectCellRowFirstDo:NO nextDo:NO];
                    self.selectIndex = nil;
                    
                }else
                {
                    if (!self.selectIndex) {
                        self.selectIndex = path;
                        
                        for (UIButton *button in cell2.contentView.subviews) {
                            
                            if(button.frame.origin.x == viewListOfItemsBtn.frame.origin.x){
                                
                                UIImage * availiableItemsListImage = [UIImage imageNamed:@"brown_down_arrow.png"];
                                
                                [button setBackgroundImage:availiableItemsListImage forState:UIControlStateNormal];
                                
                            }
                        }
                        
                        [self didSelectCellRowFirstDo:YES nextDo:NO];
                        
                    }else
                    {
                        selectSectionIndex = path;
                        
                        for (UIButton * button in cell2.contentView.subviews) {
                            
                            if(button.frame.origin.x == viewListOfItemsBtn.frame.origin.x){
                                
                                UIImage * availiableItemsListImage = [UIImage imageNamed:@"brown_right_arrow.png"];
                                
                                [button setBackgroundImage:availiableItemsListImage forState:UIControlStateNormal];
                            }
                            
                        }
                        
                        [self didSelectCellRowFirstDo:NO nextDo:YES];
                    }
                    
                }
                
            }
            
            
            
        } @catch (NSException *exception) {
            
        } @finally {
            
        }
        
    }
    
    else if (tableView == subCategoryTbl) {
        
        @try {
            if (!isOfflineService) {
                NSDictionary *detailsDic = subCategoriesArr[indexPath.row];
                
                NSString * skuIdString = [NSString stringWithFormat:@"%@",detailsDic[@"skuId"]];
                
                selected_SKID = [skuIdString copy];
                
                NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns",@"cartDetails",kZeroStockBillCheck];
                
                skuIdList = [NSMutableArray new];
                pluCodeList = [NSMutableArray new];
                unitPriceList = [NSMutableArray new];
                qtyList = [NSMutableArray new];
                totalPriceList = [NSMutableArray new];
                itemStatusList = [NSMutableArray new];
                itemDiscountList = [NSMutableArray new];
                
                for (int i = 0; i < cartTotalItems.count; i++) {
                    NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                    [skuIdList addObject:itemDetails[0]];
                    [pluCodeList addObject:itemDetails[8]];
                    [unitPriceList addObject:@([itemDetails[4] floatValue])];
                    [qtyList addObject:@([itemDetails[5] floatValue])];
                    [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
                    if ([isVoidedArray[i] boolValue]) {
                        [itemStatusList addObject:@"void"];
                    }
                    else {
                        [itemStatusList addObject:@""];
                    }
                    [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
                    
                }
                
                NSArray *loyaltyKeys = @[@"storeLocation",@"requestHeader",@"skuIdArrList",@"pluCodeArrList",@"unitPriceArrList",@"qtyArrList",@"totalPriceArrList",@"itemStatusArrList",@"productOptionalDiscountArr",@"totalBillAmount",@"quantity",@"phonenumber",@"purchaseChannel"];
                
                NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],skuIdList,pluCodeList,unitPriceList,qtyList,totalPriceList,itemStatusList, itemDiscountList, totalTxt.text,@"1",custmerPhNum.text,@"POS"];
                NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                
                
                NSArray *objects = @[skuIdString,[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],dictionary_,@true];
                
                NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                
                NSError * err;
                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
                NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                
                @try {
                    
                    //                    HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
                    //                    [productmenuView addSubview:HUD];
                    //                    // Regiser for HUD callbacks so we can remove it from the window at the right time
                    //                    HUD.delegate = self;
                    //                    HUD.dimBackground = YES;
                    //                    HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
                    //                    HUD.mode = MBProgressHUDModeCustomView;
                    //                    // Show the HUD
                    //                    [HUD show:YES];
                    HUD.labelText = @"Loading Sku Details..";
                    [HUD setHidden:NO];
                    
                    WebServiceController *serviceController = [WebServiceController new];
                    serviceController.getSkuDetailsDelegate = self;
                    [serviceController getSkuDetailsWithData:salesReportJsonString];
                    
                    
                }
                @catch (NSException * exception) {
                    
                }
                @finally {
                    
                    
                }
                
            }
            else {
                
                HUD.labelText = @"Loading Sku Details..";
                [HUD setHidden:NO];
                
                NSDictionary * dic = subCategoriesArr[indexPath.row];
                
                selected_SKID = [dic valueForKey:@"sku_ID"];
                
                
                //changed by Srinivasulu on 04/10/2017....
                //reason is -- In thread call's we should not right UIrelated code.... other wise in some case.... It will crashes....
                
                //                [self performSelectorInBackground:@selector(getOfflineProductWithSearchSkuId:) withObject:selected_SKID];
                [self getOfflineProductWithSearchSkuId:selected_SKID withPlucode:@""];
                
                //upto here on 04/10/2017....
                
            }
        }
        @catch (NSException *exception) {
            
            NSLog(@"%@---exception while getting skuDetails",exception);
        }
        @finally {
            
        }
    }
    
    //added by srinivasulu on 06/12/2017....
    
    else if(tableView == otherPaymentsDetailsTbl){
        
    }
    
    //upto here on  06/12/2017.....
    
    
    //Added By Bhargav.v on 18/03/2018....
    else if ( tableView == ordersPagenationTable) {
        //Play Audio for button touch....
        AudioServicesPlaySystemSound (soundFileObject);
        
        // Dismissing the popover after the selection....
        [popOver dismissPopoverAnimated:YES];
        
        @try {
            pagenationTxt.text = orderListArr[indexPath.row];
            
        } @catch (NSException *exception) {
            
        }
    }
    
    //upto here on  18/03/2018....
    
    else {
        
        BillField.text = @"";
        //        [BillField resignFirstResponder];
        skListTable.hidden = YES;
        @try {
            
            if (skuArrayList.count > indexPath.row) {
                
                NSDictionary *json = skuArrayList[indexPath.row];
                
                
                
                //added By Bhargav.v on 04/09/2017...
                
                NSString * inputServiceStr = [NSString stringWithFormat:@"%@",json[@"skuID"]];
                
                if (([json.allKeys containsObject:PLU_CODE]) && (![[json valueForKey:PLU_CODE] isKindOfClass:[NSNull class]])) {
                    
                    inputServiceStr = [NSString stringWithFormat:@"%@",json[PLU_CODE]];
                }
                
                //up to here  on  04/09/2017...
                
                selected_SKID = [[NSString stringWithFormat:@"%@",json[@"skuID"]] copy];
                barcodeBtn.tag = 0;
                
                offerLabel.text = [NSString stringWithFormat:@"%@",json[@"skuID"]];
                
                //            HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
                //            [self.navigationController.view addSubview:HUD];
                //            // Regiser for HUD callbacks so we can remove it from the window at the right time
                //            HUD.delegate = self;
                //            HUD.dimBackground = TRUE;
                //            HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
                //            HUD.mode = MBProgressHUDModeCustomView;
                //            // Show the HUD
                //            [HUD show:YES];
                //            [HUD setLabelText:@"Please Wait.."];
                
                //added by Srinivasulu on 28/08/2018....// here if we are online and hybridMode is false then we call online service's
                if (!isOfflineService && (!isHybirdCallFailed || !isHybirdMode)) {
                    
                    [HUD setHidden:NO];
                    
                    @try {
                        
                        NSDictionary * campaigndictionary_;
                        
                        
                        if(isToCallApplyCampaigns && !isNewReturnBill){

                        
                            skuIdList = [NSMutableArray new];
                            pluCodeList = [NSMutableArray new];
                            unitPriceList = [NSMutableArray new];
                            qtyList = [NSMutableArray new];
                            totalPriceList = [NSMutableArray new];
                            itemStatusList = [NSMutableArray new];
                            itemDiscountList = [NSMutableArray new];
                            
                            for (int i = 0; i < cartTotalItems.count; i++) {
                                NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                                [skuIdList addObject:itemDetails[0]];
                                [pluCodeList addObject:itemDetails[8]];
                                [unitPriceList addObject:@([itemDetails[4] floatValue])];
                                [qtyList addObject:@([itemDetails[5] floatValue])];
                                [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
                                if ([isVoidedArray[i] boolValue]) {
                                    [itemStatusList addObject:@"void"];
                                }
                                else {
                                    [itemStatusList addObject:@""];
                                }
                                [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
                            }
                            
                            
                            
                            
                            NSString *empCodeStr = @"";
                            if (empCodeTxt != nil && (empCodeTxt.text).length > 0) {
                                
                                empCodeStr  = empCodeTxt.text;
                            }
                            //[NSNull null]
                            
                            
                            
                            
                            NSArray *loyaltyKeys = @[@"storeLocation",@"requestHeader",@"skuIdArrList",@"pluCodeArrList",@"unitPriceArrList",@"qtyArrList",@"totalPriceArrList",@"itemStatusArrList",@"productOptionalDiscountArr",@"totalBillAmount",@"quantity",@"phonenumber",@"purchaseChannel",@"employeeCode",LATEST_CAMPAIGNS];
                            
                            NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],skuIdList,pluCodeList,unitPriceList,qtyList,totalPriceList,itemStatusList, itemDiscountList, totalTxt.text,@"1",custmerPhNum.text,@"POS",empCodeStr,@(applyLatestCampaigns)];
                            
                            campaigndictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                        }
                        else{
                            
                            campaigndictionary_ = [[NSDictionary alloc] init];
                        }
                        
                        //changed by bhargav on 04/10/2017....
                        
                        //                    NSArray *objects = [NSArray arrayWithObjects:[NSString stringWithFormat:@"%@",[json objectForKey:@"skuID"]],[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],campaigndictionary_,[NSNumber numberWithBool:true], nil];
                        Boolean isCampaignsRequired = false;
                        
                        if (isToCallApplyCampaigns && !isNewReturnBill) {
                            isCampaignsRequired = true;
                        }
                        
                        NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns",@"cartDetails",kZeroStockBillCheck,IS_CAMPAIGNS_REQUIRED];
                        
                        NSArray *objects = @[inputServiceStr,[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],campaigndictionary_,@true,[NSNumber numberWithBool:isCampaignsRequired]];
                        
                        //upto here on 04/10/2017....
                        
                        
                        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                        
                        NSError * err;
                        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
                        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                        
                        //            getSkuid.skuID = salesReportJsonString;
                        
                        skListTable.frame = CGRectMake(skListTable.frame.origin.x, skListTable.frame.origin.y, skListTable.frame.size.width, 0);
                        WebServiceController *webServiceController = [WebServiceController new];
                        webServiceController.getSkuDetailsDelegate = self;
                        [webServiceController getSkuDetailsWithData:salesReportJsonString];
                        [tempSkuArrayList removeAllObjects];
                        [filteredSkuArrayList removeAllObjects];
                        [skuArrayList removeAllObjects];
                        
                    }
                    @catch (NSException *exception) {
                        [HUD setHidden:YES];
                        
                    }
                }
                else { // If HybridMMode is true then we get the product details from Offline Db,Means we are saving time by utilizing hybrid mode...
                    [HUD setHidden:NO];
                    //[self performSelectorInBackground:@selector(getOfflineProductWithSearchSkuId:) withObject:[json valueForKey:@"skuID"]];
                    
                    //changed by Srinivasulu on 24/10/2017....
                    //                    if(!inputServiceStr.length)
                    //                        inputServiceStr = selected_SKID;
                    //
                    //                    [self getOfflineProductWithSearchSkuId:inputServiceStr];
                    [self getOfflineProductWithSearchSkuId:selected_SKID withPlucode:inputServiceStr];
                    //upto here on 24/10/2017....
                }
            }
        }
        @catch (NSException *exception) {
            [HUD setHidden:YES];
            
            NSLog(@"%@",exception.description);
        }
        @finally {
            
            //            [HUD setHidden:YES];
        }
    }
}



#pragma -mark end of tableview methods

-(void)singleTapWebView:(UITapGestureRecognizer *)gestureRecognizer{
    AudioServicesPlaySystemSound (soundFileObject);
    
    CGPoint p = [gestureRecognizer locationInView:cartTable];
    NSIndexPath *indexPath = [cartTable indexPathForRowAtPoint:p];
    gestureRecognizer.view.tag = indexPath.row;
    
    cartTable.userInteractionEnabled = FALSE;
    
    //Selected record details view creation....
    detailsView = [[UIView alloc]init];
    detailsView.layer.borderWidth = 1.0;
    detailsView.layer.cornerRadius = 10.0;
    detailsView.layer.masksToBounds = YES;
    detailsView.layer.borderColor = [UIColor blackColor].CGColor;
    detailsView.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
    
    UIImageView *img  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
    UIImageView *img1  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
    
    UILabel *title = [[UILabel alloc] init];
    title.text = @"Barcode Configuration";
    title.backgroundColor = [UIColor clearColor];
    title.textColor = [UIColor whiteColor];
    //headerimg.frame = CGRectMake(0, 0, 280, 40);
    title.frame = CGRectMake(50, 3, 200, 30);
    title.font = [UIFont boldSystemFontOfSize:15];
    title.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
    
    
    UILabel *titlelbl = [[UILabel alloc] init];
    titlelbl.text = @" Selected Record Information";
    titlelbl.backgroundColor = [UIColor clearColor];
    titlelbl.textColor = [UIColor whiteColor];
    
    
    // login button on top of the view...
    UIButton *backbutton1 = [[UIButton alloc] init];
    [backbutton1 addTarget:self action:@selector(closeDetailsView:) forControlEvents:UIControlEventTouchUpInside];
    UIImage *image = [UIImage imageNamed:@"go-back-icon.png"];
    [backbutton1 setBackgroundImage:image    forState:UIControlStateNormal];
    
    
    UILabel *skuid = [[UILabel alloc] init];
    skuid.text = @"SKU ID";
    skuid.backgroundColor = [UIColor clearColor];
    
    
    UILabel *skuidData = [[UILabel alloc] init];
    skuidData.backgroundColor = [UIColor clearColor];
    
    
    UILabel *itemName = [[UILabel alloc] init];
    itemName.text = @"Item Name";
    itemName.backgroundColor = [UIColor clearColor];
    
    
    UILabel *itemNameData = [[UILabel alloc] init];
    
    itemNameData.backgroundColor = [UIColor clearColor];
    
    
    UILabel *availQty = [[UILabel alloc] init];
    availQty.text = @"Avail Qty";
    availQty.backgroundColor = [UIColor clearColor];
    
    
    UILabel *availQtyData = [[UILabel alloc] init];
    
    availQtyData.backgroundColor = [UIColor clearColor];
    
    
    UILabel *price = [[UILabel alloc] init];
    price.text = @"Price";
    price.backgroundColor = [UIColor clearColor];
    
    
    UILabel *priceData = [[UILabel alloc] init];
    
    priceData.backgroundColor = [UIColor clearColor];
    
    
    UILabel *taxLbl = [[UILabel alloc] init];
    taxLbl.text = @"Tax";
    taxLbl.backgroundColor = [UIColor clearColor];
    
    UILabel *taxLblValue = [[UILabel alloc] init];
    taxLblValue.backgroundColor = [UIColor clearColor];
    
    UILabel *dealOrOfferLabel = [[UILabel alloc] init];
    dealOrOfferLabel.text = @"Deal/Offer Details";
    dealOrOfferLabel.backgroundColor = [UIColor clearColor];
    dealOrOfferLabel.textColor = [UIColor whiteColor];
    
    UILabel *noDealorOfferLbl = [[UILabel alloc] init];
    noDealorOfferLbl.text = @"NO DEAL OR OFFER";
    noDealorOfferLbl.textAlignment = NSTextAlignmentCenter;
    noDealorOfferLbl.backgroundColor = [UIColor clearColor];
    
    UILabel *dealOrOfferDescValue = [[UILabel alloc] init];
    dealOrOfferDescValue.backgroundColor = [UIColor clearColor];
    dealOrOfferDescValue.textColor = [UIColor blackColor];
    [dealOrOfferDescValue sizeToFit];
    
    
    UILabel *offerPrice = [[UILabel alloc] init];
    offerPrice.text = @"Offer Price";
    offerPrice.backgroundColor = [UIColor clearColor];
    offerPrice.textColor = [UIColor blackColor];
    
    UILabel *offerPriceValue = [[UILabel alloc] init];
    offerPriceValue.backgroundColor = [UIColor clearColor];
    offerPriceValue.textColor = [UIColor blackColor];
    
    UILabel *freeItemLbl = [[UILabel alloc] init];
    freeItemLbl.backgroundColor = [UIColor clearColor];
    freeItemLbl.text = @"Free Item Code";
    freeItemLbl.textColor = [UIColor blackColor];
    
    UILabel *freeItemLblValue = [[UILabel alloc] init];
    freeItemLblValue.backgroundColor = [UIColor clearColor];
    freeItemLblValue.textColor = [UIColor blackColor];
    
    UIImageView *offerImageView = [[UIImageView alloc] init];
    offerImageView.image = [UIImage imageNamed:@"Offer_Deal.png"];
    offerImageView.backgroundColor = [UIColor clearColor];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        detailsView.frame = CGRectMake(120, 200, 750.0, 450);
        
        img.frame = CGRectMake(0, 0, detailsView.frame.size.width, 60);
        titlelbl.frame = CGRectMake(0,0,450,50);
        backbutton1.frame = CGRectMake(700.0, 5, 50, 50);
        skuid.frame = CGRectMake(15,60,200,40);
        skuidData.frame = CGRectMake(130,55,250,50);
        itemName.frame = CGRectMake(15,90,200,40);
        itemNameData.frame = CGRectMake(130,90,450,40);
        availQty.frame = CGRectMake(15,120,200,40);
        availQtyData.frame = CGRectMake(130,120,250,40);
        price.frame = CGRectMake(15,150,200,40);
        priceData.frame = CGRectMake(130,150,250,40);
        taxLbl.frame = CGRectMake(15,180,200,40);
        taxLblValue.frame = CGRectMake(130,180,300,40);
        offerImageView.frame = CGRectMake(340, 120, 100, 100);
        img1.frame = CGRectMake(0, 220, detailsView.frame.size.width, 40);
        dealOrOfferLabel.frame = CGRectMake(0,215,300,50);
        
        titlelbl.font = [UIFont boldSystemFontOfSize:25];
        skuid.font = [UIFont boldSystemFontOfSize:18];
        skuidData.font = [UIFont systemFontOfSize:18];
        itemName.font = [UIFont boldSystemFontOfSize:18];
        itemNameData.font = [UIFont systemFontOfSize:18];
        availQty.font = [UIFont boldSystemFontOfSize:18];
        availQtyData.font = [UIFont systemFontOfSize:18];
        price.font = [UIFont boldSystemFontOfSize:18];
        priceData.font = [UIFont systemFontOfSize:18];
        taxLbl.font = [UIFont boldSystemFontOfSize:18];
        taxLblValue.font = [UIFont systemFontOfSize:18];
        dealOrOfferLabel.font = [UIFont boldSystemFontOfSize:25];
        noDealorOfferLbl.frame = CGRectMake(0.0, 300.0, detailsView.frame.size.width, 60);
        noDealorOfferLbl.font = [UIFont boldSystemFontOfSize:30];
        dealOrOfferDescValue.textAlignment = NSTextAlignmentCenter;
        dealOrOfferDescValue.frame = CGRectMake(10, 270.0, detailsView.frame.size.width - 10, 40);
        dealOrOfferDescValue.font = [UIFont boldSystemFontOfSize:20];
        offerPrice.frame = CGRectMake(120, 320.0, 200, 40);
        offerPrice.font = [UIFont boldSystemFontOfSize:20];
        offerPriceValue.frame = CGRectMake(240, 320.0, 300, 40);
        offerPriceValue.font = [UIFont boldSystemFontOfSize:20];
        freeItemLbl.frame = CGRectMake(150.0, 330.0, 200, 40);
        freeItemLbl.font = [UIFont boldSystemFontOfSize:20];
        freeItemLblValue.frame = CGRectMake(100.0, 370.0, 300, 40);
        freeItemLblValue.font = [UIFont boldSystemFontOfSize:20];
        
    }
    else{
        
        if (version >= 8.0) {
            detailsView.frame = CGRectMake(25, 70, 270, 300);
            img.frame = CGRectMake(0, 0, 270, 35);
            titlelbl.frame = CGRectMake(0,0,270,35);
            backbutton1.frame = CGRectMake(240.0, 2.0, 27.0, 27.0);
            
            skuid.frame = CGRectMake(5,40,100,30);
            skuidData.frame = CGRectMake(100,40,200,30);
            
            itemName.frame = CGRectMake(5,70,100,30);
            itemNameData.frame = CGRectMake(100,70,200,30);
            
            availQty.frame = CGRectMake(5,100,100,30);
            availQtyData.frame = CGRectMake(100,100,200,30);
            price.frame = CGRectMake(5,130,100,30);
            priceData.frame = CGRectMake(100,130,200,30);
            
            titlelbl.font = [UIFont boldSystemFontOfSize:17];
            skuid.font = [UIFont boldSystemFontOfSize:14];
            skuidData.font = [UIFont systemFontOfSize:13];
            itemName.font = [UIFont boldSystemFontOfSize:14];
            itemNameData.font = [UIFont systemFontOfSize:13];
            availQty.font = [UIFont boldSystemFontOfSize:14];
            availQtyData.font = [UIFont systemFontOfSize:13];
            price.font = [UIFont boldSystemFontOfSize:14];
            priceData.font = [UIFont systemFontOfSize:13];
            
        }
        else{
            detailsView.frame = CGRectMake(25, 40, 270, 300);
            img.frame = CGRectMake(0, 0, 270, 35);
            titlelbl.frame = CGRectMake(0,0,270,35);
            backbutton1.frame = CGRectMake(240.0, 2.0, 27.0, 27.0);
            
            skuid.frame = CGRectMake(5,40,100,30);
            skuidData.frame = CGRectMake(100,40,200,30);
            
            itemName.frame = CGRectMake(5,70,100,30);
            itemNameData.frame = CGRectMake(100,70,200,30);
            
            availQty.frame = CGRectMake(5,100,100,30);
            availQtyData.frame = CGRectMake(100,100,200,30);
            price.frame = CGRectMake(5,130,100,30);
            priceData.frame = CGRectMake(100,130,200,30);
            
            titlelbl.font = [UIFont boldSystemFontOfSize:17];
            skuid.font = [UIFont boldSystemFontOfSize:14];
            skuidData.font = [UIFont systemFontOfSize:13];
            itemName.font = [UIFont boldSystemFontOfSize:14];
            itemNameData.font = [UIFont systemFontOfSize:13];
            availQty.font = [UIFont boldSystemFontOfSize:14];
            availQtyData.font = [UIFont systemFontOfSize:13];
            price.font = [UIFont boldSystemFontOfSize:14];
            priceData.font = [UIFont systemFontOfSize:13];
            
        }
        
    }
    
    [detailsView addSubview:img];
    
    CATransition *transition = [CATransition new];
    transition.type = kCATransitionPush;
    transition.subtype = kCATransitionFromLeft;
    transition.duration = 0.3f;
    [detailsView.layer addAnimation:transition forKey:@"transition"];
    
    [self.view addSubview:detailsView];
    [detailsView addSubview:titlelbl];
    [detailsView addSubview:backbutton1];
    [detailsView addSubview:skuid];
    [detailsView addSubview:skuidData];
    [detailsView addSubview:itemName];
    [detailsView addSubview:itemNameData];
    [detailsView addSubview:availQty];
    [detailsView addSubview:availQtyData];
    [detailsView addSubview:price];
    [detailsView addSubview:priceData];
    [detailsView addSubview:taxLbl];
    [detailsView addSubview:taxLblValue];
    [detailsView addSubview:img1];
    [detailsView addSubview:dealOrOfferLabel];
    
    @try {
        //        NSUInteger position = [cartItem indexOfObject:[cartTotalItems objectAtIndex:indexPath.row]];
        
        NSUInteger position = indexPath.row;
        
        
        //        if ([dealDataItems count]!=0) {
        //            NSArray *temp = [[cartTotalItems objectAtIndex:indexPath.row] componentsSeparatedByString:@"#"];
        //            for (int i = 0; i < [dealDataItems count]; i++) {
        //                DealsController *_dealsController = [dealDataItems objectAtIndex:i];
        //                NSMutableArray *skuids = [[_dealsController.productData allKeys] mutableCopy];
        //                if ([skuids containsObject:[temp objectAtIndex:0]]) {
        //                    NSDictionary *JSON = _dealsController.productData ;
        //                    NSArray *array = [JSON valueForKey:[temp objectAtIndex:0]];
        //
        //                    if ([[array objectAtIndex:3] isKindOfClass:[NSNull class]]) {
        //                        dealOrOfferDescValue.text = @"--";
        //                        freeItemLblValue.text = [NSString stringWithFormat:@"%@",[array objectAtIndex:2]];
        //                        [detailsView addSubview:freeItemLbl];
        //                        [detailsView addSubview:dealOrOfferDescValue];
        //                        [detailsView addSubview:freeItemLblValue];
        //                    }
        //                    else {
        //                        if ([[array objectAtIndex:3] length] == 0) {
        //                            dealOrOfferDescValue.text = @"--";
        //                            freeItemLblValue.text = [NSString stringWithFormat:@"%@",[array objectAtIndex:2]];
        //                            [detailsView addSubview:freeItemLbl];
        //                            [detailsView addSubview:dealOrOfferDescValue];
        //                            [detailsView addSubview:freeItemLblValue];
        //                        }
        //                        else {
        //                            dealOrOfferDescValue.text = [NSString stringWithFormat:@"%@",[array objectAtIndex:3]];
        //                            freeItemLblValue.text = [NSString stringWithFormat:@"%@",[array objectAtIndex:2]];
        //                            [detailsView addSubview:freeItemLbl];
        //                            [detailsView addSubview:dealOrOfferDescValue];
        //                            [detailsView addSubview:freeItemLblValue];
        //                        }
        //                    }
        //                    [self applyAnimationToLabel:dealOrOfferDescValue];
        //                    [self applyAnimationToLabel:freeItemLblValue];
        //                    [detailsView addSubview:offerImageView];
        //                }
        //            }
        //        }
        
        //        if ([offerDic count]!=0) {
        //
        //
        //            for (int i=0; i<[[offerDic allKeys] count]; i++) {
        //
        //                //            if (indexPath.row == 0) {
        //
        //
        //                NSString *sku_id = [[[cartTotalItems objectAtIndex:indexPath.row] componentsSeparatedByString:@"#"] objectAtIndex:0] ;
        //
        //                if ([[[offerDic allKeys] objectAtIndex:i] containsString:sku_id]) {
        //
        //                    NSString *desc = @"";
        //                    if ([[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] isKindOfClass:[NSArray class]]) {
        //                        if([[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:1] isKindOfClass:[NSNull class]]) {
        //                            desc = @"--";
        //                            dealOrOfferDescValue.text = desc;
        //                            if ([[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:2] isEqualToString:@"fixed_rate"]) {
        //                                offerPriceValue.text = [NSString stringWithFormat:@"%.2f",[[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:0]floatValue]];
        //                            }
        //                            else {
        //                                offerPriceValue.text = [NSString stringWithFormat:@"%.2f",[[[[cartItem objectAtIndex:position] componentsSeparatedByString:@"#"] objectAtIndex:4] floatValue]-[[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:0]floatValue]];
        //
        //                            }
        //
        //                            [detailsView addSubview:offerPrice];
        //                            [detailsView addSubview:dealOrOfferDescValue];
        //                            [detailsView addSubview:offerPriceValue];
        //                        }
        //                        else {
        //                            if ([[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:1] length] == 0) {
        //                                desc = @"--";
        //                                dealOrOfferDescValue.text = desc;
        //                                if ([[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:2] isEqualToString:@"fixed_rate"]) {
        //                                    offerPriceValue.text = [NSString stringWithFormat:@"%.2f",[[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:0]floatValue]];
        //                                }
        //                                else {
        //                                    offerPriceValue.text = [NSString stringWithFormat:@"%.2f",[[[[cartItem objectAtIndex:position] componentsSeparatedByString:@"#"] objectAtIndex:4] floatValue]-[[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:0]floatValue]];
        //
        //                                }
        //
        //                                [detailsView addSubview:offerPrice];
        //                                [detailsView addSubview:dealOrOfferDescValue];
        //                                [detailsView addSubview:offerPriceValue];
        //                            }
        //                            else {
        //                                desc = [[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:1];
        //                                dealOrOfferDescValue.text = desc;
        //                                if ([[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:2] isEqualToString:@"fixed_rate"]) {
        //                                    offerPriceValue.text = [NSString stringWithFormat:@"%.2f",[[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:0]floatValue]];
        //
        //                                }
        //                                else {
        //                                    offerPriceValue.text = [NSString stringWithFormat:@"%.2f",([[[[cartItem objectAtIndex:position] componentsSeparatedByString:@"#"] objectAtIndex:4] floatValue] * [[[[cartItem objectAtIndex:position] componentsSeparatedByString:@"#"] objectAtIndex:5] intValue])-[[[offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]] objectAtIndex:0]floatValue]];
        //
        //                                }
        //                                [detailsView addSubview:offerPrice];
        //                                [detailsView addSubview:dealOrOfferDescValue];
        //                                [detailsView addSubview:offerPriceValue];
        //                            }
        //                        }
        //
        //                    }
        //                    else {
        //                        NSDictionary *offerDetailsDic = [offerDic valueForKey:[[offerDic allKeys] objectAtIndex:i]];
        //                        NSArray *offerRanges = [offerDetailsDic valueForKey:@"offerRangesList"];
        //                        if ([offerRanges count]) {
        //                            NSDictionary *offerRangesDic = [offerRanges objectAtIndex:[offerRanges count] - 1];
        //                            if([[offerRangesDic valueForKey:@"description"] isKindOfClass:[NSNull class]]) {
        //                                desc = @"--";
        //                                dealOrOfferDescValue.text = desc;
        //                                offerPriceValue.text = [NSString stringWithFormat:@"%.2f",[[offerRangesDic valueForKey:@"rewardValue"] floatValue]];
        //
        //                                [detailsView addSubview:offerPrice];
        //                                [detailsView addSubview:dealOrOfferDescValue];
        //                                [detailsView addSubview:offerPriceValue];
        //                            }
        //                            else {
        //                                if ([[offerRangesDic valueForKey:@"description"] length] == 0) {
        //                                    desc = @"--";
        //                                    dealOrOfferDescValue.text = desc;
        //                                    offerPriceValue.text = [NSString stringWithFormat:@"%.2f",[[offerRangesDic valueForKey:@"rewardValue"] floatValue]];
        //
        //                                    [detailsView addSubview:offerPrice];
        //                                    [detailsView addSubview:dealOrOfferDescValue];
        //                                    [detailsView addSubview:offerPriceValue];
        //                                }
        //                                else {
        //                                    desc = [offerRangesDic valueForKey:@"description"];
        //                                    dealOrOfferDescValue.text = desc;
        //                                    offerPriceValue.text = [NSString stringWithFormat:@"%.2f",[[offerRangesDic valueForKey:@"rewardValue"] floatValue]];
        //                                    [detailsView addSubview:offerPrice];
        //                                    [detailsView addSubview:dealOrOfferDescValue];
        //                                    [detailsView addSubview:offerPriceValue];
        //                                }
        //                            }
        //                        }
        //
        //                    }
        //                    [self applyAnimationToLabel:dealOrOfferDescValue];
        //                    [self applyAnimationToLabel:offerPriceValue];
        //                    [detailsView addSubview:offerImageView];
        //                }
        //            }
        //        }
        displayingDealsOffersArr = [NSMutableArray new];
        NSMutableArray *dealsArray = itemWiseAvailableDeals[position];
        NSMutableArray *offersArray = itemWiseAvailableOffers[position];
        if(dealsArray.count == 0 && offersArray.count == 0) {
            [detailsView addSubview:noDealorOfferLbl];
        }
        else {
            if (dealsArray.count > 0) {
                [displayingDealsOffersArr addObjectsFromArray:dealsArray];
            }
            if (offersArray.count > 0) {
                [displayingDealsOffersArr   addObjectsFromArray:offersArray];
            }
            allDealsOffersTable = [[UITableView alloc] init];
            allDealsOffersTable.dataSource = self;
            allDealsOffersTable.delegate = self;
            allDealsOffersTable.bounces = TRUE;
            allDealsOffersTable.backgroundColor = [UIColor clearColor];
            allDealsOffersTable.layer.cornerRadius = 3.0f;
            (allDealsOffersTable.layer).borderWidth = 1.0f;
            allDealsOffersTable.hidden = NO;
            allDealsOffersTable.frame = CGRectMake(detailsView.frame.origin.x, 460.0, detailsView.frame.size.width, 180.0);
            [self.view addSubview:allDealsOffersTable];
            [allDealsOffersTable reloadData];
            
        }
        skuidData.text = [cartTotalItems[indexPath.row] componentsSeparatedByString:@"#"][0];
        itemNameData.text = [cartTotalItems[indexPath.row] componentsSeparatedByString:@"#"][1];
        availQtyData.text = [cartTotalItems[indexPath.row] componentsSeparatedByString:@"#"][3];
        priceData.text = [cartTotalItems[indexPath.row] componentsSeparatedByString:@"#"][4];
        NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[indexPath.row]];
        NSArray *taxDicArr = taxArr[positionCount];
        float taxValue = 0.0f;
        //        for (NSDictionary *taxDic in taxDicArr) {
        //            if ([[[taxDic valueForKey:@"taxType"] lowercaseString] isEqualToString:@"percentage"]) {
        //                taxValue += (([priceData.text floatValue] -([priceData.text floatValue]/(100+[[taxDic valueForKey:@"taxRate"] floatValue])*100))*[[[[cartTotalItems objectAtIndex:indexPath.row] componentsSeparatedByString:@"#"] objectAtIndex:5] intValue]);
        //            }
        //            else {
        //                taxValue += ([[taxDic valueForKey:@"taxRate"] floatValue]*[[[[cartTotalItems objectAtIndex:indexPath.row] componentsSeparatedByString:@"#"] objectAtIndex:5] intValue]);
        //            }
        //
        //        }
        
        float unit_price = [self getUnitPriceForItemAt:(int)indexPath.row];
        taxValue = [self calculateTaxForItemPopUp:taxDicArr itemPosition:(int)indexPath.row unitPrice:unit_price  qty:[cartTotalItems[indexPath.row] componentsSeparatedByString:@"#"][5].floatValue];
        
        if (taxValue<=0) {
            
            taxLblValue.text = @"0.00";
        }
        else {
            NSString *taxLblStr = @"";
            for (NSDictionary *taxDic in taxDicArr) {
                if (taxLblStr.length == 0) {
                    taxLblStr = [NSString stringWithFormat:@"%.2f %@%@",taxValue,@"(",[taxDic valueForKey:@"taxRate"]];
                }
                else {
                    taxLblStr = [NSString stringWithFormat:@"%@%@%@",taxLblStr,@",",[taxDic valueForKey:@"taxRate"]];
                }
            }
            taxLblStr = [NSString stringWithFormat:@"%@%@",taxLblStr,@")"];
            taxLblValue.text = taxLblStr;
        }
        
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        
    }
    
    
    
}

-(void)doubleTapWebView:(UILongPressGestureRecognizer *)gestureRecognizer
{
    // If deals&offer are avilable go to further....
    
    CGPoint p = [gestureRecognizer locationInView:cartTable];
    NSIndexPath *indexPath = [cartTable indexPathForRowAtPoint:p];
    gestureRecognizer.view.tag = indexPath.row;
    NSArray *temp = [cartTotalItems[indexPath.row] componentsSeparatedByString:@"#"];
    //Condition for checking, if no deals&offer simple we return back to controoler...
    
    //    for (int i = 0; i < [dealDataItems count]; i++) {
    //        DealsController *_dealsController = [dealDataItems objectAtIndex:i];
    //        NSString *message = @"";
    //        NSMutableArray *skuids = _dealsController.dealSkuId;
    //        if ([skuids containsObject:[temp objectAtIndex:0]]) {
    //            NSDictionary *JSON = _dealsController.productData;
    //            NSArray *desc = [[JSON objectForKey:@"DealDesc"] componentsSeparatedByString:@"#"];
    //            if ([[JSON objectForKey:@"DealDesc"] containsString:@"#"]) {
    //
    //                [desc removeObjectAtIndex:0];
    //            }
    //
    //            for (int i = 0; i < [desc count]; i++) {
    //                message = [NSString stringWithFormat:@"%@%@%@",message,[desc objectAtIndex:i],@"\n"];
    //            }
    //            message = [NSString stringWithFormat:@"%@%@%@%@%@",message,@"\n Valid From :   ",[JSON objectForKey:@"startDateOfDeal"],@"\n Valid To :   ",[JSON objectForKey:@"endDateOfDeal"]];
    //
    //            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Deal" message:message delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    //            [alert show];
    //            [alert release];
    //
    //            return;
    //        }
    //    }
    
    
    //    if ([[offierPrice objectAtIndex:gestureRecognizer.view.tag] isEqualToString:@""]) {
    //        return;
    //    }
    //
    //    if (indexPath == nil){
    //        NSLog(@"%d",gestureRecognizer.view.tag);
    //    }
    //    else{
    //
    //        NSString *messge = [NSString stringWithFormat:@"%@%@%@%@%@%@",@"Offer Price(USD) : ",[offierPrice objectAtIndex:gestureRecognizer.view.tag],@"\n Valid From :   ",[validFrom objectAtIndex:gestureRecognizer.view.tag],@"\n Valid To :   ",[validTo objectAtIndex:gestureRecognizer.view.tag]];
    //
    //        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Offer" message:messge delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    //        [alert show];
    //        [alert release];
    //    }
    
    if (dealDataItems.count!=0) {
        
        for (int i = 0; i < dealDataItems.count; i++) {
            DealsController *_dealsController = dealDataItems[i];
            NSString *message = @"";
            NSMutableArray *skuids = [(_dealsController.productData).allKeys mutableCopy];
            if ([skuids containsObject:temp[0]]) {
                NSDictionary *JSON = _dealsController.productData ;
                NSArray *array = [JSON valueForKey:temp[0]];
                message = [NSString stringWithFormat:@"%@%@ \n %@",message,array[3],array[2]];
                
                
                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Deal" message:message delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
                return;
            }
        }
    }
    
    if (offerDic.count!=0) {
        
        
        for (int i=0; i<offerDic.allKeys.count; i++) {
            
            //            if (indexPath.row == 0) {
            
            
            NSString *sku_id = [cartTotalItems[indexPath.row] componentsSeparatedByString:@"#"][0] ;
            
            if ([offerDic.allKeys[i] containsString:sku_id]) {
                
                NSString *desc = @"";
                NSString *messge = @"";
                if ([[offerDic valueForKey:offerDic.allKeys[i]][1] length] == 0) {
                    messge = [NSString stringWithFormat:@"%@%@\n%@%@",@"Original Price : ",[NSString stringWithFormat:@"%.2f",[cartItem[indexPath.row] componentsSeparatedByString:@"#"][4].floatValue],@"Offer Price(USD) : ",[NSString stringWithFormat:@"%.2f",[cartItem[indexPath.row] componentsSeparatedByString:@"#"][4].floatValue-[[offerDic valueForKey:offerDic.allKeys[i]][0]floatValue]]];
                    
                }
                else {
                    desc = [offerDic valueForKey:offerDic.allKeys[i]][1];
                    messge = [NSString stringWithFormat:@"%@\n%@%@\n%@%@",desc,@"Original Price : ",[NSString stringWithFormat:@"%.2f",[cartItem[indexPath.row] componentsSeparatedByString:@"#"][4].floatValue],@"Offer Price(USD) : ",[NSString stringWithFormat:@"%.2f",[cartItem[indexPath.row] componentsSeparatedByString:@"#"][4].floatValue-[[offerDic valueForKey:offerDic.allKeys[i]][0]floatValue]]];
                }
                
                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Offer" message:messge delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            
        }
        
    }
}
#pragma -mark deals,offers service call

-(void) callOffersForScanning:(NSString *)skuid qty:(NSString *)quantity total:(NSString *)total itemPrice:(NSString *)item_price{
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    dealSkuId = [skuid copy];
    
    
    //    NSArray *loyaltyKeys = [NSArray arrayWithObjects:@"storeLocation",@"requestHeader",@"quantity",@"totalBillAmount",@"sku_id",@"item_total_price",@"phonenumber",@"purchaseChannel", nil];
    //
    //    NSArray *loyaltyObjects = [NSArray arrayWithObjects:presentLocation,[RequestHeader getRequestHeader],quantity,total,skuid,item_price,custmerPhNum.text,@"POS", nil];
    //    NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
    //
    //    NSError * err_;
    //    NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
    //    NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
    skuIdList = [NSMutableArray new];
    pluCodeList = [NSMutableArray new];
    unitPriceList = [NSMutableArray new];
    qtyList = [NSMutableArray new];
    totalPriceList = [NSMutableArray new];
    itemStatusList = [NSMutableArray new];
    itemDiscountList = [NSMutableArray new];
    
    //below code added by Srinivasulu on 13/09/2017....
    
    float totalBillCost = total.floatValue;
    
    totalBillCost = 0;
    
    //upto here on 13/09/2017....
    
    
    for (int i = 0; i < cartTotalItems.count; i++) {
        NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
        [skuIdList addObject:itemDetails[0]];
        [pluCodeList addObject:itemDetails[8]];
        [unitPriceList addObject:@([itemDetails[4] floatValue])];
        [qtyList addObject:@([itemDetails[5] floatValue])];
        [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
        
        //below code added by Srinivasulu on 13/09/2017....
        
        if(![isVoidedArray[i] boolValue]){
            totalBillCost = totalBillCost + ([itemDetails[4] floatValue] * [itemDetails[5] floatValue]);
            
            
            //        if([onlineDealDiscountPriceArr count] > i){
            //
            //            totalBillCost -= [[onlineDealDiscountPriceArr objectAtIndex:i] floatValue];
            //        }
            //
            //        if([onlineOfferDiscountPriceArr count] > i){
            //
            //            totalBillCost -= [[onlineOfferDiscountPriceArr objectAtIndex:i] floatValue];
            //        }
            
            
            if(itemDiscountArr.count > i){
                
                totalBillCost -= [itemDiscountArr[i] floatValue];
            }
        }
        
        total = [NSString stringWithFormat:@"%.2f", totalBillCost];
        //upto here on 13/09/2017....
        
        
        if ([isVoidedArray[i] boolValue]) {
            [itemStatusList addObject:@"void"];
        }
        else {
            [itemStatusList addObject:@""];
        }
        [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
        
    }
    
    if (!isOfflineService) {
        @try {
            
            //added by Srinivasulu on 18/09/2017....
            //added new key----(i.e.,LATEST_CAMPAIGNS) -- reason not updated in iOS....
            
            
            NSArray *loyaltyKeys = @[@"storeLocation",@"requestHeader",@"skuIdArrList",@"pluCodeArrList",@"unitPriceArrList",@"qtyArrList",@"totalPriceArrList",@"itemStatusArrList",@"productOptionalDiscountArr",@"totalBillAmount",@"quantity",@"phonenumber",@"purchaseChannel",@"employeeCode",LATEST_CAMPAIGNS];
            
            NSString *empCodeStr = @"";
            if (empCodeTxt != nil && (empCodeTxt.text).length > 0) {
                
                empCodeStr  = empCodeTxt.text;
            }
            
            NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],skuIdList,pluCodeList,unitPriceList,qtyList,totalPriceList,itemStatusList, itemDiscountList, total,quantity,custmerPhNum.text,@"POS",empCodeStr,@(applyLatestCampaigns)];
            
            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
            
            NSError * err_;
            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
            
            
            
            WebServiceController *serviceController = [WebServiceController new];
            serviceController.getDealsAndOffersDelegate = self;
            [serviceController getDealsAndOffersWithData:loyaltyString];
            
        }
        @catch (NSException *exception) {
            
            [HUD setHidden:YES];
        }
    }
    else{
        
        @try {
            offline = [OfflineBillingServices new];
            CampaignRequestModel * campaignRequestModel = [CampaignRequestModel new];
            campaignRequestModel.skuIdArrList = skuIdList;
            campaignRequestModel.pluCodeArrList = pluCodeList;
            campaignRequestModel.unitPriceArrList = unitPriceList;
            campaignRequestModel.qtyArrList = qtyList;
            campaignRequestModel.totalPriceArrList = totalPriceList;
            campaignRequestModel.itemStatusArrList = itemStatusList;
            campaignRequestModel.productOptionalDiscountArr = itemDiscountList;
            campaignRequestModel.totalBillAmount = total;
            campaignRequestModel.quantity = quantity;
            campaignRequestModel.phonenumber = custmerPhNum.text;
            campaignRequestModel.purchaseChannel = @"POS";
            
            if (empCodeTxt != nil && (empCodeTxt.text).length > 0) {
                
                //campaignRequestModel.emp = @"POS";
            }
            
            
            NSMutableDictionary* applyDealsOffersResponse = [offline applyCampaignsOffline:campaignRequestModel];
            
            [self getDealsAndOffersSuccessResponse:applyDealsOffersResponse];
            
        } @catch (NSException *exception) {
            [HUD setHidden:YES];
            NSLog(@"%@",exception);
        } @finally {
            
        }
    }
    
}

//-(NSMutableArray*) sortArray:(NSMutableArray *)toBeSorted
//{
//    NSArray *sortedArray;
//    sortedArray = [toBeSorted sortedArrayUsingComparator:^NSComparisonResult(id a, id b)
//                   {
//                       return [a compare:b];
//                   }];
//    return [sortedArray mutableCopy];
//}
- (IBAction)closeDetailsView:(id)sender {
    
    detailsView.hidden = YES;
    allDealsOffersTable.hidden = YES;
    //scrollView.scrollEnabled = YES;
    cartTable.userInteractionEnabled = TRUE;
}


// Handle the response from getSkuDetails.
- (void)getSkuDetailsHandler:(NSString *) value productInfo:(NSDictionary*)productInfo {
    
    isScanningItem = TRUE;
    isItemScanned = false;
    
    NSMutableDictionary * productInfoDic = [NSMutableDictionary new];
    
    
    if (cartItem == nil || cartTotalItems == nil) {
        
        cartItem = [[NSMutableArray alloc]init];
        cartItemDetails = [[NSMutableArray alloc]init];
        cartTotalItems = [[NSMutableArray alloc]init];
    }
    
    // Handle errors
    if([value isKindOfClass:[NSError class]]) {
        
        return;
    }
    
    //  isFreeItemAdded = false;
    
    
    // Do something with the NSString* result
    NSString* result = value;
    
    float totalAmt = 0.00;
    
    BOOL shouldCallOffers = YES;
    
    //  NSArray *arr = [result componentsSeparatedByString:@"#"];
    
    @try {
        
        if (result.length > 0) {
            
            float qty = 0;
            
            //  need to do this.....
            
            //            float price = 0.0 ;
            //float unitPrice = 0.0;
            
            NSMutableArray *pluCodesArr = [NSMutableArray new];
            
            for (NSString *str in cartItem) {
                
                NSArray *arr = [str componentsSeparatedByString:@"#"];
                
                if (arr.count > 8) {
                    
                    [pluCodesArr addObject:arr[8]];
                }
            }
            
            BOOL state = FALSE;
            for (int i = 0; i < cartTotalItems.count; i++) {
                
                
                //change by Srinivasulu on 06/03/2017....
                
                if (([[cartTotalItems[i] componentsSeparatedByString:@"#"][1] isEqualToString:selected_desc] && [[cartTotalItems[i] componentsSeparatedByString:@"#"][8] isEqualToString:selectedPluCode]) && (![isItemTrackingRequiredArr[i] boolValue])) {
                    
                    qty = [cartTotalItems[i] componentsSeparatedByString:@"#"][5].floatValue;
                    
                    //changed by Srinivasulu on 21/04/2018....
                    //                    if (!isOfflineService) {
                    if(!isOfflineService || isMasterCounter){
                        //upto here on 21/04/2018....
                        if(![zeroStockAvailInfoArr[i] boolValue] && ((qty+1) > [cartTotalItems[i] componentsSeparatedByString:@"#"][3].floatValue)){
                            
                            [HUD setHidden:YES];
                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"out_of_stock", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
                            [alert show];
                            
                            return;
                            
                        }
                        else {
                            
                            state = TRUE;
                            NSArray *arr = [result componentsSeparatedByString:@"#"];
                            //                            NSString *result_ = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@",selected_SKID,@"#",[arr objectAtIndex:0],@"#",[arr objectAtIndex:1],@"#",[arr objectAtIndex:2],@"#",[arr objectAtIndex:3],@"#",qty, @"#", [arr objectAtIndex:4], @"#", [arr objectAtIndex:5], @"#", [arr objectAtIndex:6],@"#",[arr objectAtIndex:7]];
                            
                            if (![pluCodesArr containsObject:arr[6]]) {
                                
                                isFreeItemAdded = false;
                                isScanningItem = TRUE;
                                isItemScanned = false;
                                
                                [HUD setHidden:YES];
                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                                [alert show];
                                return;
                            }
                            
                            int positionOfResult = (int)[pluCodesArr indexOfObject:arr[6]];
                            
                            
                            float price = [arr[3] floatValue];
                            
                            //changed by Srinivasulu on 13/07/2017.....
                            if (([editedPriceArr[positionOfResult] floatValue] > 0) && ([editedPriceArr[positionOfResult] floatValue] != 0)) {
                                
                                price = [editedPriceArr[positionOfResult] floatValue];
                            }
                            
                            result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",arr[1],@"#",arr[2],@"#",arr[3],@"#",++qty, @"#", arr[4], @"#", arr[5], @"#", arr[6],@"#",arr[7]];
                            //int positionOfResult = [cartItem indexOfObject:result_];
                            
                            //  changed by sonali for void items...
                            
                            
                            if ([pluCodesArr containsObject:arr[6]]) {
                                cartItem[positionOfResult] = result;
                                cartItemDetails[positionOfResult] = [NSString stringWithFormat:@"%.2f",qty];
                                
                                //added by Srinivasulu on 22/07/2017....
                                
                                if(itemDiscountArr.count > i)
                                    itemDiscountArr[i] = @0;
                                
                                if(itemDiscountDescArr.count > i)
                                    itemDiscountDescArr[positionOfResult] = @"";
                                
                                //upto here on 22/07/2017....
                            }
                            else {
                                [cartItem addObject:result];
                                [cartItemDetails addObject:[NSString stringWithFormat:@"%.2f",qty]];
                            }
                            
                            //added by Srinivasulu on 05/07/2017....
                            
                            if (([editedPriceArr[positionOfResult] floatValue] > 0) && ([editedPriceArr[positionOfResult] floatValue] != 0)) {
                                
                                
                                result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",arr[1],@"#",arr[2],@"#",[NSString stringWithFormat:@"%.2f",price],@"#",qty, @"#", arr[4], @"#", arr[5], @"#", arr[6],@"#",arr[7]];
                                
                                if ([pluCodesArr containsObject:arr[6]]) {
                                    cartItem[positionOfResult] = result;
                                }
                                else {
                                    if(cartItem.count > (positionOfResult + 1))
                                        cartItem[(positionOfResult + 1)] = result;
                                }
                                
                            }
                            
                            //upto here on 05/07/2017....
                            
                            cartTotalItems[i] = result;
                            isVoidedArray[i] = @NO;
                            itemPromoFlagArr[i] = @"N";
                            
                        }
                        
                    }
                    else {
                        //--
                        state = TRUE;
                        NSArray *arr = [result componentsSeparatedByString:@"#"];
                        //                        NSString *result_ = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@",selected_SKID,@"#",[arr objectAtIndex:0],@"#",[arr objectAtIndex:1],@"#",[arr objectAtIndex:2],@"#",[arr objectAtIndex:3],@"#",qty, @"#", [arr objectAtIndex:4], @"#", [arr objectAtIndex:5], @"#", [arr objectAtIndex:6],@"#",[arr objectAtIndex:7]];
                        
                        if (![pluCodesArr containsObject:arr[6]]) {
                            [HUD setHidden:YES];
                            
                            isFreeItemAdded = false;
                            isScanningItem = TRUE;
                            isItemScanned = false;
                            
                            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Product Already Voided" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            [alert show];
                            return;
                        }
                        
                        int positionOfResult = (int)[pluCodesArr indexOfObject:arr[6]];
                        
                        
                        
                        //changed by Srinivasulu on 25/11/2017....
                        //reason is TAX_CODE is missing....
                        
                        float price = [arr[3] floatValue];
                        if ([editedPriceArr[positionOfResult] floatValue] > 0) {
                            
                            price = [editedPriceArr[positionOfResult] floatValue];
                            result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",arr[1],@"#",arr[2],@"#",[NSString stringWithFormat:@"%.2f",price],@"#",++qty, @"#", arr[4], @"#", arr[5], @"#", arr[6],@"#",arr[7]];
                            
                        }
                        else{
                            
                            result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%.2f%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",arr[1],@"#",arr[2],@"#",[NSString stringWithFormat:@"%.2f",price],@"#",++qty, @"#", arr[4], @"#", arr[5], @"#", arr[6],@"#",arr[7]];
                        }
                        
                        //upto here on 25/11/2017....
                        
                        // int positionOfResult = [cartItem indexOfObject:result_];
                        
                        
                        if ([pluCodesArr containsObject:arr[6]]) {
                            cartItem[positionOfResult] = result;
                            cartItemDetails[positionOfResult] = [NSString stringWithFormat:@"%.2f",qty];
                            
                            
                            //added by Srinivasulu on 22/07/2017....
                            
                            if(itemDiscountArr.count > i)
                                itemDiscountArr[i] = @0;
                            
                            if(itemDiscountDescArr.count > i)
                                itemDiscountDescArr[positionOfResult] = @"";
                            
                            //upto here on 22/07/2017....
                        }
                        else {
                            [cartItem addObject:result];
                            [cartItemDetails addObject:[NSString stringWithFormat:@"%.2f",qty]];
                        }
                        cartTotalItems[i] = result;
                        isVoidedArray[i] = @NO;
                        itemPromoFlagArr[i] = @"N";
                        
                    }
                }
                
                
                if (turnOverDealVal.count!=0) {              //checking turn-over deal
                    
                    if ([selected_SKID isEqualToString:turnOverDealVal[0]]) {
                        
                        shouldCallOffers = NO;
                        
                    }
                }
            }
            
            for (int j = 0; j < cartItem.count; j++) {
                DealsController *_dealsController = [[DealsController alloc] init];
                NSDictionary *dealSkuids_ = _dealsController.productData;
                
                for (int d=0 ; d<dealSkuids_.allKeys.count; d++) {
                    
                    if ([[cartItem[j] componentsSeparatedByString:@"#"][0] isEqualToString:dealSkuids_.allKeys[d]] && (qty == [[dealSkuids_ valueForKey:[cartItem[j] componentsSeparatedByString:@"#"][0]][1] intValue])) {
                        
                        shouldCallOffers = NO;
                        
                    }
                    
                }
                totalAmt = totalAmt + ([cartItem[j] componentsSeparatedByString:@"#"][5].intValue*[cartItem[j] componentsSeparatedByString:@"#"][4].floatValue);
            }
            
            NSArray *arr = [result componentsSeparatedByString:@"#"];
            
            
            if (qty == 0) {
                
                BOOL isPacked = false;
                
                @try {
                    
                    int minimumQty = 0;
                    
                    if ([productInfo.allKeys containsObject:kPackagedType] && ![productInfo[kPackagedType] isKindOfClass:[NSNull class]]) {
                        
                        if([productInfo[kPackagedType] boolValue]){
                            minimumQty = 1;
                            isPacked = true;
                        }
                    }
                    
                    //added by Srinivauslu on 23/10/2017....
                    //commented -- it result in crash..  due applyCampaigns response handling....
                    
                    @try {
                        
                        if(!isItemUnVoided){
                            Boolean  showAlert = false;
                            //changed by Srinivasulu on 13/03/2018 && 21/04/2018 && 18/09/2018....
                            
                            if(!(zeroStockCheckAtOutletLevel && [[productInfo valueForKey:kZeroStock] boolValue]) && (!isOfflineService || isMasterCounter) && !isNewReturnBill){
                                
                                if( (minimumQty > [arr[2] floatValue]) || (minimumQty == [arr[2] floatValue] && minimumQty != 1) ){
                                    
                                    showAlert = true;
                                }
                            }
                            //upto here on 13/03/2018 && 21/04/2018 && 18/09/2018....
                            
                            if(showAlert){
                                
                                SystemSoundID    soundFileObject1;
                                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
                                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                                
                                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                                AudioServicesPlaySystemSound (soundFileObject1);
                                
                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"out_of_stock", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
                                [alert show];
                                return;
                            }
                            
                        }
                    } @catch (NSException *exception) {
                        
                    }
                    
                    //upto here on 23/10/2017....
                    
                    
                    
                    if (!isItemUnVoided) {
                        
                        //chagned srinivasulu on 06/02/2018 && 13/03/2018 && 03/09/2018....
                        //                        [isPriceEditableArr addObject:[NSNumber numberWithInt:[[productInfo valueForKey:@"editable"] intValue]]];
                        
                        
                        if(allowItemPriceEdit){
                            
                            [isPriceEditableArr addObject:@([[productInfo valueForKey:EDITABLE] intValue])];
                        }
                        else{
                            
                            [isPriceEditableArr addObject:@0];
                        }
                        
                        
                        if ([productInfo.allKeys containsObject:TRACKING_REQUIRED] && ![[productInfo valueForKey:TRACKING_REQUIRED] isKindOfClass:[NSNull class]]) {
                            
                            [isItemTrackingRequiredArr addObject:@([[productInfo valueForKey:TRACKING_REQUIRED] intValue])];
                        }
                        else {
                            
                            [isItemTrackingRequiredArr addObject:@0];
                        }
                        
                        if ([productInfo.allKeys containsObject:ITEM_TYPE_] && ![[productInfo valueForKey:ITEM_TYPE_] isKindOfClass:[NSNull class]]) {
                            
                            productInfoDic[ITEM_TYPE_] = [productInfo valueForKey:ITEM_TYPE_];
                            if([[productInfo valueForKey:ITEM_TYPE_] caseInsensitiveCompare:MEMBER_SHIP] == NSOrderedSame) {
                                isMemberShipItemAdded = true;
                            }
                            if([[productInfo valueForKey:ITEM_TYPE_] caseInsensitiveCompare:WALLET] == NSOrderedSame) { // added by roja on 29/07/2019...
                                
                                isWalletItemAdded = true;
                            }
                            
                        }
                        //upto here on 06/02/2018 && 06/03/2018 && 03/09/3028....
                        
                        if ([productInfo.allKeys containsObject:@"itemDiscount"] && ![[productInfo valueForKey:@"itemDiscount"] isKindOfClass:[NSNull class]]) {
                            
                            [itemDiscountArr addObject:@([[productInfo valueForKey:@"itemDiscount"] floatValue])];
                        }
                        else {
                            
                            [itemDiscountArr addObject:@"0.00"];
                            [itemDiscountDescArr addObject:@""];
                            
                        }
                        
                        //added by Srinivasulu on 28/09/2017....
                        
                        [isItemFlatDiscountedArr addObject:@YES];
                        
                        //upto here on 28/09/2017....
                        
                        
                        [itemScanCode addObject:selected_SKID];
                        selected_desc = [[NSString stringWithFormat:@"%@",productInfo[@"description"]] copy];
                        selected_price = [[NSString stringWithFormat:@"%.2f",[productInfo[@"price"] floatValue]] copy];
                        
                        //if (draftBillID == nil && [draftBillID length] == 0) {
                        [taxArr addObject:productInfo[@"tax"]];
                        // }
                        [manufacturedItemsArr addObject:@([productInfo[kIsManuFacturedItem] boolValue])];
                        if ([productInfo.allKeys containsObject:kPackagedType] && ![productInfo[kPackagedType] isKindOfClass:[NSNull class]]) {
                            
                            [isPackagedItem addObject:@([productInfo[kPackagedType] boolValue])];
                        }
                        else {
                            [isPackagedItem addObject:@NO];
                            
                        }
                        if (([productInfo.allKeys containsObject:kProductCategory] && ![productInfo[kProductCategory] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kProductCategory] = productInfo[kProductCategory];
                        }
                        
                        if (([productInfo.allKeys containsObject:kProductSubCategory] && ![productInfo[kProductSubCategory] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kProductSubCategory] = productInfo[kProductSubCategory];
                        }
                        if (([productInfo.allKeys containsObject:kProductRange] && ![productInfo[kProductRange] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kProductRange] = productInfo[kProductRange];
                        }
                        if (([productInfo.allKeys containsObject:kMeasureRange] && ![productInfo[kMeasureRange] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kMeasureRange] = productInfo[kMeasureRange];
                        }
                        
                        
                        
                        if (([productInfo.allKeys containsObject:kProductModel] && ![productInfo[kProductModel] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kProductModel] = productInfo[kProductModel];
                        }
                        
                        //added by Srinivasulu on 11/05/2017...
                        
                        if (([productInfo.allKeys containsObject:kProductBrand] && ![productInfo[kProductBrand] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kProductBrand] = productInfo[kProductBrand];
                        }
                        
                        else if (([productInfo.allKeys containsObject:kBrand] && ![productInfo[kBrand] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kProductBrand] = productInfo[kBrand];
                        }
                        
                        
                        if (([productInfo.allKeys containsObject:kPrimaryDepartment] && ![productInfo[kPrimaryDepartment] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kItemDept] = productInfo[kPrimaryDepartment];
                        }
                        else if (([productInfo.allKeys containsObject:kItemDept] && ![productInfo[kItemDept] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kItemDept] = productInfo[kItemDept];
                        }
                        
                        if (([productInfo.allKeys containsObject:SECONDARY_DEPARTMENT] && ![productInfo[SECONDARY_DEPARTMENT] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kItemSubDept] = productInfo[SECONDARY_DEPARTMENT];
                        }
                        else if (([productInfo.allKeys containsObject:kItemSubDept] && ![productInfo[kItemSubDept] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[kItemSubDept] = productInfo[kItemSubDept];
                        }
                        //added by Srinivasulu on 09/10/2017
                        else{
                            
                            productInfoDic[kItemSubDept] = @"";
                        }
                        //upto here on 09/10/2017
                        
                        
                        if (([productInfo.allKeys containsObject:SECTION] && ![productInfo[SECTION] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[SECTION] = productInfo[SECTION];
                        }
                        
                        //added by Srinivasulu on 27/06/2017 && 29/08/2018....
                        
                        if (([productInfo.allKeys containsObject:HSN_CODE] && ![productInfo[HSN_CODE] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[HSN_CODE] = productInfo[HSN_CODE];
                        }
                        
                        if (([productInfo.allKeys containsObject:Pack_Size] && ![productInfo[Pack_Size] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[Pack_Size] = [NSString stringWithFormat:@"%li", [[productInfo valueForKey:Pack_Size] integerValue]];
                        }
                        
                        if (([productInfo.allKeys containsObject:EXPIRY_DATE] && ![productInfo[EXPIRY_DATE] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[EXPIRY_DATE] = productInfo[EXPIRY_DATE];
                        }
                        
                        //upto here on 27/06/2017 && 29/08/2018....
                        
                        //newly added keys....
                        //added by Srinivasulu on 05/07/2017 && 07/07/2017 && 12/08/2017 && 08/09/2017 && 07/03/2018....
                        
                        if (([productInfo.allKeys containsObject:COLOR] && ![productInfo[COLOR] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[COLOR] = productInfo[COLOR];
                        }
                        
                        if (([productInfo.allKeys containsObject:SIZE] && ![productInfo[SIZE] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[SIZE] = productInfo[SIZE];
                        }
                        
                        if (([productInfo.allKeys containsObject:PRODUCT_RANGE] && ![productInfo[PRODUCT_RANGE] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[PRODUCT_RANGE] = productInfo[PRODUCT_RANGE];
                        }
                        
                        if (([productInfo.allKeys containsObject:kMeasureRange] && ![productInfo[kMeasureRange] isKindOfClass:[NSNull class]])) {//MEASUREMENT_RANGE
                            
                            productInfoDic[kMeasureRange] = productInfo[kMeasureRange];
                        }
                        
                        if (([productInfo.allKeys containsObject:ITEM_CATEGORY] && ![productInfo[ITEM_CATEGORY] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[ITEM_CATEGORY] = productInfo[ITEM_CATEGORY];
                        }
                        
                        if (([productInfo.allKeys containsObject:kProductBrand] && ![productInfo[kProductBrand] isKindOfClass:[NSNull class]])) {//kBrand
                            
                            productInfoDic[kProductBrand] = productInfo[kProductBrand];
                        }
                        
                        if (([productInfo.allKeys containsObject:MODEL] && ![productInfo[MODEL] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[MODEL] = productInfo[MODEL];
                        }
                        
                        if (([productInfo.allKeys containsObject:SELL_UOM] && ![productInfo[SELL_UOM] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[SELL_UOM] = productInfo[SELL_UOM];
                        }
                        
                        if (([productInfo.allKeys containsObject:STYLE] && ![productInfo[STYLE] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[STYLE] = productInfo[STYLE];
                        }
                        
                        if (([productInfo.allKeys containsObject:PATTERN] && ![productInfo[PATTERN] isKindOfClass:[NSNull class]])) {//kBrand
                            
                            productInfoDic[PATTERN] = productInfo[PATTERN];
                        }
                        
                        if (([productInfo.allKeys containsObject:BATCH] && ![productInfo[BATCH] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[BATCH] = productInfo[BATCH];
                        }
                        
                        if (([productInfo.allKeys containsObject:UTILITY] && ![productInfo[UTILITY] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[UTILITY] = productInfo[UTILITY];
                        }
                        
                        if (([productInfo.allKeys containsObject:PRODUCT_CLASS] && ![productInfo[PRODUCT_CLASS] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[PRODUCT_CLASS] = productInfo[PRODUCT_CLASS];
                        }
                        
                        if (([productInfo.allKeys containsObject:PRODUCT_SUB_CLASS] && ![productInfo[PRODUCT_SUB_CLASS] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[PRODUCT_SUB_CLASS] = productInfo[PRODUCT_SUB_CLASS];
                        }
                        
                        if (([productInfo.allKeys containsObject:STYLE_RANGE] && ![productInfo[STYLE_RANGE] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[STYLE_RANGE] = productInfo[STYLE_RANGE];
                        }
                        
                        productInfoDic[EDIT_PRICE_REASON] = EMPTY_STRING;
                        
                        productInfoDic[VOID_ITEM_REASON] = EMPTY_STRING;
                        
                        if (([productInfo.allKeys containsObject:TAXATION_ON_DISCOUNT_PRICE] && ![productInfo[TAXATION_ON_DISCOUNT_PRICE] isKindOfClass:[NSNull class]])) {
                            
                            productInfoDic[TAXATION_ON_DISCOUNT_PRICE] = @([productInfo[TAXATION_ON_DISCOUNT_PRICE] boolValue]);
                        }
                        else{
                            
                            productInfoDic[TAXATION_ON_DISCOUNT_PRICE] = @YES;
                        }
                        
                        //upot here on 11/05/2017 && 12/08/2017 && 08/09/2017 && 07/03/2018....
                        
                        
                        [productInfoArr addObject:productInfoDic];
                        
                        //zero stock info..
                        //changed by Srinivasulu on 13/03/2017 && 21/04/2018.... reason in return stock
                        //                        if (!isOfflineService && ![[productInfo valueForKey:kZeroStock] isKindOfClass:[NSNull class]]){
                        //                        if (!isOfflineService && ![[productInfo valueForKey:kZeroStock] isKindOfClass:[NSNull class]] && !isNewReturnBill) {
                        if ((!isOfflineService || isMasterCounter) && ![[productInfo valueForKey:kZeroStock] isKindOfClass:[NSNull class]] && !isNewReturnBill) {
                            
                            
                            //changed by Srinivasulu on 07/06/2017....
                            //commented
                            
                            //                            [zeroStockAvailInfoArr addObject:[NSNumber numberWithBool:[[productInfo valueForKey:kZeroStock] boolValue]]];
                            
                            
                            //changed by Srinivasulu on 23/10/2017....
                            //reason scope changed by Sir....
                            
                            if(!zeroStockCheckAtOutletLevel){
                                
                                [zeroStockAvailInfoArr addObject:@NO];
                            }
                            else{
                                
                                [zeroStockAvailInfoArr addObject:@([[productInfo valueForKey:kZeroStock] boolValue])];
                            }
                            
                            //upto here on 07/06/2017....
                        }
                        else {
                            
                            [zeroStockAvailInfoArr addObject:@YES];
                        }
                        
                        //tax type...
                        
                        
                        if ([productInfo.allKeys containsObject:kItemTaxExclusive] && ![productInfo[kItemTaxExclusive] isKindOfClass:[NSNull class]]) {
                            
                            [taxTypeArr addObject:@([productInfo[kItemTaxExclusive] boolValue])];
                        }
                        else {
                            
                            [taxTypeArr addObject:@NO];
                        }
                    }
                    
                    
                    if (selected_SKID != nil) {
                        
                        amount = arr[3];
                    }
                    else {
                        
                        amount = [NSString stringWithFormat:@"%.2f",[arr[4] floatValue] * [arr[5] floatValue]];
                    }
                    
                }
                @catch (NSException *exception) {
                    
                    NSLog(@"exception occured %@",exception.name);
                }
                if (selected_SKID != nil) {
                    
                    if (draftBillID != nil && draftBillID.length > 0) {
                        
                        [cartItemDetails addObject:arr.lastObject];
                        
                    }
                    else {
                        
                        NSString * addQtyForNewItem = @"1.00";
                        
                        
                        
                        
                        //added by Sriniasulu on 09/03/2018....
                        
                        if ([productInfo.allKeys containsObject:BILLED_QUANTITY] && ![productInfo[BILLED_QUANTITY] isKindOfClass:[NSNull class]])
                        {
                            
                            addQtyForNewItem = [NSString stringWithFormat:@"%.02f", [productInfo[BILLED_QUANTITY] floatValue]];
                        }
                        else if ([productInfo.allKeys containsObject:ORDERED_QUANTITY] && ![productInfo[ORDERED_QUANTITY] isKindOfClass:[NSNull class]])
                        {
                            
                            addQtyForNewItem = [NSString stringWithFormat:@"%.02f", [productInfo[ORDERED_QUANTITY] floatValue]];
                        }
                        
                        //upto here on 09/03/2018....
                        
                        //                        if(![[zeroStockAvailInfoArr lastObject] boolValue])
                        //                            if(((1 > [[arr objectAtIndex:2] floatValue]) && ([[arr objectAtIndex:2] floatValue] > 0))  &&  !isPacked)
                        if( (1 > [arr[2] floatValue]) && ([arr[2] floatValue] > 0) &&  (!isPacked) && (![zeroStockAvailInfoArr.lastObject boolValue]) ){
                            
                            if([arr[2] floatValue] > 0)
                                addQtyForNewItem = [NSString stringWithFormat:@"%.02f", [arr[2] floatValue]];
                            
                            [cartItemDetails addObject:addQtyForNewItem];
                        }
                        else
                            [cartItemDetails addObject:addQtyForNewItem];
                    }
                }
                else {
                    [cartItemDetails addObject:arr[5]];
                }
                if (selected_SKID != nil) {
                    
                    if (draftBillID != nil && draftBillID.length > 0) {
                        
                        
                        //changed by Srinivasulu on 19/01/2016....
                        //reason object at 8 doesnot exist....
                        
                        //                            result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",[arr objectAtIndex:0],@"#",[arr objectAtIndex:1],@"#",[arr objectAtIndex:2],@"#",[arr objectAtIndex:3],@"#",[arr objectAtIndex:8], @"#", [arr objectAtIndex:4], @"#", [arr objectAtIndex:5], @"#" ,[arr objectAtIndex:6],@"#",[arr objectAtIndex:7]];
                        
                        
                        NSString *str = [NSString stringWithFormat:@"%.2f",[arr[2] floatValue] ];
                        //                            NSString *str = [arr objectAtIndex:2];
                        
                        if(arr.count > 8)
                            
                            str = [NSString stringWithFormat:@"%.2f",[arr[8] floatValue] ];
                        //                                str = [arr objectAtIndex:8];
                        
                        result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",arr[1],@"#",arr[2],@"#",arr[3],@"#",str, @"#", arr[4], @"#", arr[5], @"#" ,arr[6],@"#",arr[7]];
                        
                        
                        
                        //---
                        ///upto here on 19/01/2016.........
                        
                        
                    }
                    else {
                        
                        NSString * addQtyForNewItem = @"#1.00";
                        
                        
                        
                        if ([productInfo.allKeys containsObject:BILLED_QUANTITY] && ![productInfo[BILLED_QUANTITY] isKindOfClass:[NSNull class]])
                        {
                            
                            addQtyForNewItem = [NSString stringWithFormat:@"%@%.02f",@"#", [productInfo[BILLED_QUANTITY] floatValue]];
                        }
                        else if ([productInfo.allKeys containsObject:ORDERED_QUANTITY] && ![productInfo[ORDERED_QUANTITY] isKindOfClass:[NSNull class]])
                        {
                            
                            addQtyForNewItem = [NSString stringWithFormat:@"%@%.02f",@"#", [productInfo[ORDERED_QUANTITY] floatValue]];
                        }
                        
                        result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",arr[1],@"#",arr[2],@"#",arr[3],addQtyForNewItem, @"#", arr[4], @"#", arr[5], @"#" ,arr[6],@"#",arr[7]]; // commented by roja on 20/11/2019..
                        
                        
//                        result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",arr[1],@"#",arr[2],@"#",arr[3],addQtyForNewItem, @"#", arr[4], @"#", arr[5], @"#" ,arr[6],@"#",arr[7], @"#", arr[8]]; // added by roja on 20/11/2019 (Reason added ItemType(i.e.,wallet/Membership) as arr[8] )  // WALLET_RELATED

                        
                        
                        //added by Srinivauslu on 06/11/2017....
                        //reason -- inorderto add quantity between 0 - 1....
                        
                        //added by Srinivauslu on 06/11/2017....
                        //reason -- inorderto add quantity between 0 - 1....
                        
                        
                        if(![zeroStockAvailInfoArr.lastObject boolValue])
                            if(((1 > [arr[2] floatValue]) && ([arr[2] floatValue] > 0))  &&  !isPacked)  {
                                addQtyForNewItem = [NSString stringWithFormat:@"%@%.2f",@"#", [arr[2] floatValue]];
                                
                                
                                //                        if([addQtyForNewItem floatValue]){
                                
                                result = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@",selected_SKID,@"#",arr[0],@"#",arr[1],@"#",arr[2],@"#",arr[3],addQtyForNewItem, @"#", arr[4], @"#", arr[5], @"#" ,arr[6],@"#",arr[7]];
                            }
                        //upto here on 06/11/2017....
                    }
                }
                [cartItem addObject:result];
                
                //changed by Srinivasulu on 07/03/2018.... isItemTrackingRequiredArr
                //reason tracing_required flag is handled...
                //                if (![cartTotalItems containsObject:result]) {
                
                if ( (![cartTotalItems containsObject:result])  || ([isItemTrackingRequiredArr.lastObject integerValue])) {
                    
                    //upto here on 07/03/2018....
                    
                    [isVoidedArray addObject:@NO];
                    [itemPromoFlagArr addObject:@"N"];
                    [cartTotalItems addObject:result];
                    if ([productInfo.allKeys containsObject:EDITED_PRICE] && ![[productInfo valueForKey:EDITED_PRICE] isKindOfClass:[NSNull class]]) {
                        
                        [editedPriceArr addObject:[productInfo valueForKey:EDITED_PRICE]];
                    }
                    else {
                        
                        [editedPriceArr addObject:@"0.0"];
                    }
                    
                }
                
                
                DealsController *_dealsController = [[DealsController alloc] init];
                NSDictionary *dealSkuids_ = _dealsController.productData;
                
                for (int d=0 ; d<dealSkuids_.allKeys.count; d++) {
                    
                    if ([[result componentsSeparatedByString:@"#"][0] isEqualToString:dealSkuids_.allKeys[d]]) {
                        
                        shouldCallOffers = NO;
                    }
                }
                
                
                
                //changed by Srinivasulu on 13/02/2018....
                //                if(shouldCallOffers){
                
                if (shouldCallOffers && isToCallApplyCampaigns && !isNewReturnBill) {
                    
                    //upto here on 13/02/2018....
                    
                    //  dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
                    if (selected_SKID != nil) {
                        
                        //commented on 14/08/2018.. again campaign service call is truned in to single call....
                        
                        //                        if (self.draftBillID == nil && (self.draftBillID).length == 0) {
                        //                            if (isOfflineService) {
                        //                                [self callOffersForScanning:selected_SKID qty:@"1" total:[NSString stringWithFormat:@"%.2f",totalAmt+amount.floatValue] itemPrice:amount];
                        //
                        //                            }
                        //                            //added by Srinivasulu on 04/08/2017....
                        //                            else{
                        //
                        //                                [self callOffersForScanning:selected_SKID qty:@"1" total:[NSString stringWithFormat:@"%.2f",totalAmt+amount.floatValue] itemPrice:amount];
                        //
                        //                            }
                        //
                        //                            //upto here on 04/08/2017....
                        //                        }
                        
                        //upto here on 14/08/2018.....
                    }
                    else {
                        selected_SKID = [NSString stringWithFormat:@"%@",arr[0]];
                        
                        //commented on 14/08/2018.. again campaign service call is truned in to single call....
                        
                        //                        if (self.draftBillID == nil && (self.draftBillID).length == 0) {
                        //                            if (isOfflineService) {
                        //                                [self callOffersForScanning:selected_SKID qty:arr[5] total:[NSString stringWithFormat:@"%.2f",totalAmt+amount.floatValue] itemPrice:[NSString stringWithFormat:@"%.2f",[arr[5] intValue] * amount.floatValue]];
                        //
                        //                            }
                        //                            //added by Srinivasulu on 04/08/2017....
                        //                            else{
                        //
                        //                                [self callOffersForScanning:selected_SKID qty:arr[5] total:[NSString stringWithFormat:@"%.2f",totalAmt+amount.floatValue] itemPrice:[NSString stringWithFormat:@"%.2f",[arr[5] intValue] * amount.floatValue]];
                        //
                        //                            }
                        //
                        //                            //upto here on 04/08/2017....
                        //                        }
                        
                        //upto here on 14/08/2018.....
                        
                    }
                    //                            });
                    
                    if(isOfflineService) {
                        
                        //                            offline = [[OfflineBillingServices alloc] init];
                        //                            NSDictionary *json;
                        //                            if (selected_SKID != nil) {
                        //                                 json = [offline applyDealsAndOffers:selected_SKID qty:@"1" total:[[NSString stringWithFormat:@"%.2f",totalAmt+[amount floatValue]] copy] itemPrice:amount];
                        //                            }
                        //                            else {
                        //                                selected_SKID = [NSString stringWithFormat:@"%@",[arr objectAtIndex:0]];
                        //                                json = [offline applyDealsAndOffers:selected_SKID qty:[arr objectAtIndex:5] total:[[NSString stringWithFormat:@"%.2f",totalAmt+[amount floatValue]] copy] itemPrice:[NSString stringWithFormat:@"%.2f",[[arr objectAtIndex:5] intValue] * [amount floatValue]]];
                        //                            }
                        //                            [self applyDealsOffline:json sku_id:selected_SKID];
                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                            cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
                        }
                        else {
                            cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
                        }
                        
                        //                            [cartTable setDataSource:self];
                        //                            [cartTable setDelegate:self];
                        
                        [cartTable reloadData];
                        
                        // before reloading the data reset the subtotal textfield
                        scrollView.hidden = NO;
                        cartTable.hidden = NO;
                        
                        // continous camera to scan ..
                        if (barcodeBtn.tag == 1) {
                            //[self barcodeScanner:barcodeBtn];
                        }
                        //                        SystemSoundID    soundFileObject1;
                        //                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                        //                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                        //
                        //                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                        //                        AudioServicesPlaySystemSound (soundFileObject1);
                        
                    }
                    
                }
                else {
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
                    }
                    else {
                        cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
                    }
                    
                    //                        [cartTable setDataSource:self];
                    //                        [cartTable setDelegate:self];
                    
                    [cartTable reloadData];
                    
                    // before reloading the data reset the subtotal textfield
                    scrollView.hidden = NO;
                    cartTable.hidden = NO;
                    
                    // continous camera to scan ..
                    if (barcodeBtn.tag == 1) {
                        //[self barcodeScanner:barcodeBtn];
                    }
                    //                    SystemSoundID    soundFileObject1;
                    //                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                    //                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                    //
                    //                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                    //                    AudioServicesPlaySystemSound (soundFileObject1);
                    [HUD setHidden:YES];
                    
                }
                
                //added by Srinivasulu on  26/12/2017....
                
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
                
                //upto here on 26/12/2017...
            }
            else {
                
                //changed by Srinivasulu on 13/02/2018....
                //                if(shouldCallOffers){
                
                if (shouldCallOffers && isToCallApplyCampaigns && !isNewReturnBill) {
                    
                    //upto here on 13/02/2018....
                    
                    if (isOfflineService) {
                        //                            dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
                        
                        [self callOffersForScanning:selected_SKID qty:[NSString stringWithFormat:@"%.2f",qty] total:[NSString stringWithFormat:@"%.2f",totalAmt] itemPrice:[NSString stringWithFormat:@"%.02f", [arr[4] floatValue] * qty]];
                        //                            });
                    }
                    //added by Srinivasulu on 04/08/2017....
                    else{
                        
                        //commented on 14/08/2018.. again campaign service call is truned in to single call....
                        
                        //                        [self callOffersForScanning:selected_SKID qty:[NSString stringWithFormat:@"%.2f",qty] total:[NSString stringWithFormat:@"%.2f",totalAmt] itemPrice:[NSString stringWithFormat:@"%.02f", [arr[4] floatValue] * qty]];
                        
                        //upto here on 14/08/2018.....
                        
                        //added by Srinivasulu on  26/12/2017....
                        
                        SystemSoundID    soundFileObject1;
                        NSURL * tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                        
                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                        AudioServicesPlaySystemSound (soundFileObject1);
                        
                        //upto here on 26/12/2017....
                    }
                    
                    //upto here on 04/08/2017....
                    
                    
                    if(isOfflineService) {
                        //                            offline = [[OfflineBillingServices alloc]init];
                        //                            NSDictionary *json =  [offline applyDealsAndOffers:selected_SKID qty:[NSString stringWithFormat:@"%d",qty] total:[NSString stringWithFormat:@"%.2f",totalAmt] itemPrice:[[NSString stringWithFormat:@"%.02f", [[arr objectAtIndex:4] floatValue] * qty] copy]];
                        //                            [self applyDealsOffline:json sku_id:selected_SKID];
                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                            cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
                        }
                        else {
                            cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
                        }
                        //                            [cartTable setDataSource:self];
                        //                            [cartTable setDelegate:self];
                        
                        [cartTable reloadData];
                        
                        //  [self passInSearchResults:nil];
                        
                        // before reloading the data reset the subtotal textfield
                        scrollView.hidden = NO;
                        cartTable.hidden = NO;
                        
                        // continous camera to scan ..
                        if (barcodeBtn.tag == 1) {
                            //[self barcodeScanner:barcodeBtn];
                        }
                        SystemSoundID    soundFileObject1;
                        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                        
                        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                        AudioServicesPlaySystemSound (soundFileObject1);
                        
                    }
                    
                }
                else {
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
                    }
                    else {
                        cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
                    }
                    
                    [cartTable reloadData];
                    
                    // before reloading the data reset the subtotal textfield
                    scrollView.hidden = NO;
                    cartTable.hidden = NO;
                    
                    // continous camera to scan ..
                    if (barcodeBtn.tag == 1) {
                        //[self barcodeScanner:barcodeBtn];
                    }
                    SystemSoundID    soundFileObject1;
                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                    
                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                    AudioServicesPlaySystemSound (soundFileObject1);
                    [HUD setHidden:YES];
                    
                    
                }
            }
            //saving the items locally....
            
            [self saveCartItems:cartTotalItems];
            
            if (shouldCallOffers && isToCallApplyCampaigns && !isNewReturnBill && isOfflineService) {
                
                [self callOffersForScanning:selected_SKID qty:[NSString stringWithFormat:@"%.2f",qty] total:[NSString stringWithFormat:@"%.2f",totalAmt] itemPrice:[NSString stringWithFormat:@"%.02f", [arr[4] floatValue] * qty]];
            }
        }
        else {
            
            SystemSoundID    soundFileObject1;
            NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
            self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
            
            AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
            AudioServicesPlaySystemSound (soundFileObject1);
            
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Invalid" message:@"No Product or Failed to scan" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        
        if (isOfflineService) {
            if (dealDataItems.count!=0) {                   //removing deals....
                
                for (int i = 0; i < dealDataItems.count; i++) {
                    
                    DealsController *_dealsController = dealDataItems[i];
                    _dealsController.isDealApplied = NO;
                }
            }
            //            [self updateValues];
            // [self goToBottom];
        }
        
        //        dispatch_async(dispatch_get_main_queue(),^ {
        //
        //            [cartTable reloadData];
        //        });
        
        // [self passInSearchResults:nil];
        
        [self updateValues];
        [self updateItemScanTime];
        [self goToBottom];
        // [self updateItemScanTime];
        
        // [self performSelectorOnMainThread:@selector(passInSearchResults:) waitUntilDone:YES];
        
        //added by Srinivasulu on 01/12/2017 && 03/07/2018....
        @try {
            
            if(pluCodeList == nil)
                pluCodeList = [NSMutableArray new];
            
            if(cartTotalItems.count != pluCodeList.count)
                for (int i = 0; i < cartTotalItems.count; i++) {
                    
                    NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                    if(itemDetails.count > 9)
                        [pluCodeList addObject:itemDetails[8]];
                }
            
            if(pluCodeList.count && employeeDic.allKeys.count)
                if(![employeeDic.allKeys containsObject:pluCodeList.lastObject]){
                    
                    [employeeDic setValue:[employeeDic valueForKey:employeeDic.allKeys[0]] forKey:pluCodeList.lastObject];
                }
            
            if(startIndexint_ != 0)
                [BillField becomeFirstResponder];
        } @catch (NSException *exception) {
            
        }
        //upto here on 01/12/2017 && 03/07/2018....
        
    }
    @catch (NSException *exception) {
        
        isFreeItemAdded = false;
        
        NSLog(@"%@",exception);
        SystemSoundID    soundFileObject1;
        NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
        self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
        
        AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
        AudioServicesPlaySystemSound (soundFileObject1);
        
        [cartItem removeLastObject];
        [isVoidedArray removeLastObject];
        [cartTotalItems removeLastObject];
        [cartItemDetails removeLastObject];
        [isPriceEditableArr removeLastObject];
        
        //added by Srinivausulu on 06/03/2018....
        
        [isItemTrackingRequiredArr removeLastObject];
        [itemDiscountArr removeLastObject];
        [itemDiscountDescArr removeLastObject];
        //upto here on 06/03/2018....
        
        [editedPriceArr removeLastObject];
        [itemPromoFlagArr removeLastObject];
        
        UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Invalid" message:@"No Product or Failed to scan" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    @finally {
        //        [HUD setHidden:YES];
        // [cartTable reloadData];
        if(productmenuInfoPopUp != nil){
            if(productmenuInfoPopUp.popoverVisible)
                [productmenuInfoPopUp dismissPopoverAnimated:YES];
        }
    }
}
-(void)updateValues {
    
    //    HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
    // [MBProgressHUD hideHUDForView:self.view animated:YES];
    
    //commneted and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
    
    [otherDiscountTxt setEnabled:TRUE];
    [otherDiscountValueTxt setEnabled:TRUE];
    cartTable.userInteractionEnabled = YES;
    
    dealSkus = [NSMutableArray new];
    
    totalTxt.text = @"0.00";
    taxTxt.text = @"0.00";
    subtotalTxt.text = @"0.00";
    netPayLblVal.text = @"0.00";
    
    //added by Srnivasulu on 14/11/2017....
    
    completeBillDiscountValueLbl.text = @"0.00";
    
    //upto her on 14/11/2017....
    
    subtotalTxt.text = @"0.00";
    dealoroffersTxt.text = @"0.00";
    //    giftVoucherTxt.text = @"0.00";
    //    totalVal.text = @"0.00";
    NSString *deal_skuid;
    NSString *unit_price;
    NSString *qty;
    
    @try {
        
        if (cartItem.count != 0 ) {
            
            float dealOfferAmount = 0.0f;
            
            //changed by Srinivasulu on 19/01/2017....
            //            int totalQty = 0;
            
            float totalQty = 0;
            
            //added by Srinivasulu on  30/06/2017....
            
            if(taxDispalyArr == nil)
                taxDispalyArr  = [NSMutableArray new];
            else if(taxDispalyArr.count)
                [taxDispalyArr removeAllObjects];
            //upto here on 30/06/2017....
            
            //upto here on 19/01/2017....
            
            for (int j = 0; j < cartItemDetails.count; j++) {
                dealOfferAmount = 0.0f;
                NSArray *temp = [cartItem[j] componentsSeparatedByString:@"#"];
                deal_skuid = temp[0];
                qty = temp[5];
                unit_price = temp[4];
                NSUInteger cartTotalItemPosition = [cartTotalItems indexOfObject:cartItem[j]];
                if ([editedPriceArr[cartTotalItemPosition] floatValue] == 0) {
                    
                    totalTxt.text = [NSString stringWithFormat:@"%.2f",((totalTxt.text).floatValue + ([cartItemDetails[j] floatValue] * [temp[4] floatValue]))];
                    
                    
                    //changed by Srinivasulu on 20/01/2019....
                    
                    //                    if (![[isVoidedArray objectAtIndex:j] boolValue]) {
                    //                        netPayLblVal.text = [NSString stringWithFormat:@"%.2f",([netPayLblVal.text floatValue] + (([[cartItemDetails objectAtIndex:j] floatValue] * [[temp objectAtIndex:4] floatValue]) - [[itemDiscountArr objectAtIndex:j] floatValue]))];
                    //                    }
                    //                    else {
                    //                        netPayLblVal.text = [NSString stringWithFormat:@"%.2f",([netPayLblVal.text floatValue] + (([[cartItemDetails objectAtIndex:j] floatValue] * [[temp objectAtIndex:4] floatValue]) ))];
                    //
                    //                    }
                    
                    
                    if (![isVoidedArray[cartTotalItemPosition] boolValue]) {
                        
                        
                        netPayLblVal.text = [NSString stringWithFormat:@"%.2f",((netPayLblVal.text).floatValue + (([cartItemDetails[j] floatValue] * [temp[4] floatValue])))];
                    }
                    else {
                        
                        netPayLblVal.text = [NSString stringWithFormat:@"%.2f",((netPayLblVal.text).floatValue + (([cartItemDetails[j] floatValue] * [temp[4] floatValue]) ))];
                    }
                    
                    
                    //upto here on20/01/2016......
                }
                else {
                    totalTxt.text = [NSString stringWithFormat:@"%.2f",((totalTxt.text).floatValue + ([cartItemDetails[j] floatValue] * [editedPriceArr[cartTotalItemPosition] floatValue]))];
                    
                    
                    //changed by Srinivasulu on 18/01/2017.... reason net price is not comming correctly....
                    
                    //                    netPayLblVal.text = [NSString stringWithFormat:@"%.2f",([netPayLblVal.text floatValue] + (([[cartItemDetails objectAtIndex:j] floatValue] * [[temp objectAtIndex:4] floatValue]) - [[itemDiscountArr objectAtIndex:j] floatValue]))];
                    
                    
                    //changed by Srinivasulu on 20/01/2019....
                    
                    
                    //                    if (![[isVoidedArray objectAtIndex:j] boolValue]) {
                    //
                    //                    netPayLblVal.text = [NSString stringWithFormat:@"%.2f",([netPayLblVal.text floatValue] + (([[cartItemDetails objectAtIndex:j] floatValue] * [[editedPriceArr objectAtIndex:cartTotalItemPosition] floatValue]) - [[itemDiscountArr objectAtIndex:j] floatValue]))];
                    //           z         }
                    //                    else {
                    //                        netPayLblVal.text = [NSString stringWithFormat:@"%.2f",([netPayLblVal.text floatValue] + (([[cartItemDetails objectAtIndex:j] floatValue] * [[editedPriceArr objectAtIndex:cartTotalItemPosition] floatValue])))];
                    //
                    //                    }
                    
                    if (![isVoidedArray[cartTotalItemPosition] boolValue]) {
                        
                        // float itemDisc = [[itemDiscountArr objectAtIndex:cartTotalItemPosition] floatValue];
                        
                        netPayLblVal.text = [NSString stringWithFormat:@"%.2f",((netPayLblVal.text).floatValue + (([cartItemDetails[j] floatValue] * [editedPriceArr[cartTotalItemPosition] floatValue])))];
                    }
                    else {
                        netPayLblVal.text = [NSString stringWithFormat:@"%.2f",((netPayLblVal.text).floatValue + (([cartItemDetails[j] floatValue] * [editedPriceArr[cartTotalItemPosition] floatValue])))];
                        
                    }
                    
                    
                    
                    //upto here on 18/01/2017......
                }
                
                
                
                
                
                //changed by srinivasulu on 19/01/2017....
                //reason to comment is around off the  qty....
                
                
                
                //                if ([[cartItemDetails objectAtIndex:j] intValue]==0) {
                //                    totalQty += ceilf([[cartItemDetails objectAtIndex:j] floatValue]) ;
                //
                //                }
                //                else {
                //                    totalQty += floorf([[cartItemDetails objectAtIndex:j] floatValue]);
                //
                //                }
                
                
                
                if ([cartItemDetails[j] floatValue]==0) {
                    // totalQty += ceilf([[cartItemDetails objectAtIndex:j] floatValue]) ;
                    totalQty += [cartItemDetails[j] floatValue];// floorf();
                    
                }
                else {
                    totalQty += [cartItemDetails[j] floatValue];// floorf();
                    
                }
                
                
                
                //upto here on 19/01/2017....
                
                
                
                
                //                if (isOfflineService) {
                //                    if ([offerDic count]>0) {                          //applying offers
                //
                //                        NSArray *skus = [offerDic allKeys];
                //
                //                        for (int i=0; i<[skus count]; i++) {
                //                            if (!([[offerDic valueForKey:[skus objectAtIndex:i]] isKindOfClass:[NSDictionary class]])) {
                //                                NSArray *offerSkus = [[skus objectAtIndex:i] componentsSeparatedByString:@","];
                //                                if ([offerSkus containsObject:deal_skuid]) {
                //
                //                                    if ([[[offerDic valueForKey:[skus objectAtIndex:i]] objectAtIndex:2] isEqualToString:@"fixed_rate"]) {
                //                                        dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",[dealoroffersTxt.text floatValue]+([unit_price floatValue]*[[[offerDic valueForKey:[skus objectAtIndex:i]] objectAtIndex:3] intValue] - [[[offerDic valueForKey:[skus objectAtIndex:i]] objectAtIndex:0] floatValue])];
                //                                        dealOfferAmount = [[[offerDic valueForKey:[skus objectAtIndex:i]] objectAtIndex:0] floatValue];
                //
                //
                //                                    }
                //                                    else {
                //                                        dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",[dealoroffersTxt.text floatValue]+[[[offerDic valueForKey:[skus objectAtIndex:i]] objectAtIndex:0] floatValue]];
                //                                        dealOfferAmount = [[[offerDic valueForKey:[skus objectAtIndex:i]] objectAtIndex:0] floatValue];
                //
                //                                    }
                //                                    NSLog(@"%@",dealoroffersTxt.text);
                //                                }
                //
                //                            }
                //                        }
                //                    }
                //
                //                }
                //                else {
                
                if (onlineOfferDiscountPriceArr.count && onlineOfferDiscountPriceArr.count > cartTotalItemPosition) {
                    dealOfferAmount += [onlineOfferDiscountPriceArr[cartTotalItemPosition] floatValue];
                }
                if (onlineDealDiscountPriceArr.count && onlineDealDiscountPriceArr.count > cartTotalItemPosition) {
                    dealOfferAmount += [onlineDealDiscountPriceArr[cartTotalItemPosition] floatValue];
                    
                }
                //                }
                if (turnOverDealVal.count!=0) {              //checking turn-over deal
                    
                    if ([turnOverDealVal[0] containsString:deal_skuid]) {
                        
                        dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",(dealoroffersTxt.text).floatValue+[turnOverDealVal[1] integerValue] * unit_price.floatValue];
                        
                        NSLog(@" deals val is %@",dealoroffersTxt.text);
                        
                    }
                }
                dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",((dealoroffersTxt.text).floatValue + dealOfferAmount)];
                
                // unit_price = [NSString stringWithFormat:@"%.2f",([unit_price floatValue] * [qty intValue]) - dealOfferAmount];
                
                unit_price = [NSString stringWithFormat:@"%.2f",[self getUnitPriceForItemAt:(int)cartTotalItemPosition]];
                
                
                float taxValue = 0.0f;
                NSArray *taxDicArr = taxArr[j];
                //                for (NSDictionary *taxDic in taxDicArr) {
                //                    if ([[[taxDic valueForKey:@"taxType"] lowercaseString] isEqualToString:@"percentage"]) {
                //                        taxValue += (([unit_price floatValue] -([unit_price floatValue]/(100+[[taxDic valueForKey:@"taxRate"] floatValue])*100)));
                //                    }
                //                    else{
                //                        taxValue += ([[taxDic valueForKey:@"taxRate"] floatValue]*[qty intValue]);
                //
                //                    }
                //
                //                }
                
                //changed by Srinivasulu on 27/09/2017....
                //reason is calculation is changed based on the flags....
                
                float itemUnitPrice = [temp[4] floatValue];
                
                
                //cartTotalItemPosition -- j
                Boolean isMrpRangeChecking = false;
                
                if(productInfoArr.count > cartTotalItemPosition){
                    NSDictionary * productInfoDic = productInfoArr[cartTotalItemPosition];
                    
                    if (([productInfoDic.allKeys containsObject:TAXATION_ON_DISCOUNT_PRICE] && ![productInfoDic[TAXATION_ON_DISCOUNT_PRICE] isKindOfClass:[NSNull class]]))
                        isMrpRangeChecking = [[productInfoDic valueForKey:TAXATION_ON_DISCOUNT_PRICE] boolValue];
                }
                
                
                if ((! (discCalcOn.length > 0 && [discCalcOn caseInsensitiveCompare:@"Original Price"] == NSOrderedSame)) || isMrpRangeChecking){
                    
                    itemUnitPrice = unit_price.floatValue / qty.floatValue;
                }
                
                taxValue = [self calculateTax:taxDicArr itemPosition:(int)cartTotalItemPosition unitPrice:itemUnitPrice  qty:qty.floatValue itemTotalPrice:unit_price.floatValue];
                
                //                taxValue = [self calculateTax:taxDicArr itemPosition:(int)cartTotalItemPosition unitPrice:[[temp objectAtIndex:4] floatValue]  qty:[qty floatValue] itemTotalPrice:[unit_price floatValue]];
                
                //upto here on 27/09/2017 && 12/03/2018....
                
                
                
                if (taxValue<0) {
                    
                    taxTxt.text = @"0.00";
                }
                else {
                    
                    taxTxt.text = [NSString stringWithFormat:@"%.2f",(taxTxt.text).floatValue+taxValue];
                }
                
                float itemDisc = [itemDiscountArr[cartTotalItemPosition] floatValue];
                
                netPayLblVal.text = [NSString stringWithFormat:@"%.2f",((netPayLblVal.text).floatValue - itemDisc)];
                
                //added by Srinivasulu on 12/06/2017....
                //reason to solve bug no 2622.... related to subTotal && total....
                
                totalTxt.text = [NSString stringWithFormat:@"%.2f",((totalTxt.text).floatValue - itemDisc)];
                
                
                //upto here o 12/06/2017....
                
            }
            
            //added by Srinivasulu on 30.06/2017....
            
            if(taxDispalyArr.count){
                
                
                [self addLabelsToScrollView:taxDispalyArr];
                
            }
            
            //added by Srinivasulu on 31/07/2017....
            
            else{
                
                [self addLabelsToScrollView:nil];
                
            }
            
            //added by Srinivasulu on 31/07/2017....
            //upot here on 30/06/2017....
            
            
            if (isOfflineService) {
                if (dealDataItems.count!=0) {                   //applying deals....
                    for (int j = 0; j < cartItemDetails.count; j++) {
                        NSArray *temp = [cartItem[j] componentsSeparatedByString:@"#"];
                        deal_skuid = temp[0];
                        for (int i = 0; i < dealDataItems.count; i++) {
                            
                            DealsController *_dealsController = dealDataItems[i];
                            
                            NSMutableArray *skuids = [(_dealsController.productData).allKeys mutableCopy];
                            
                            for (int i=0; i < skuids.count; i++) {
                                
                                
                                NSArray *arr = [_dealsController.productData valueForKey:skuids[i]];
                                
                                NSArray *dealSkuArr = [arr[2] componentsSeparatedByString:@","];
                                NSArray *sellSkuArr = [arr[4] componentsSeparatedByString:@","];
                                NSMutableArray *dealSkuIds = [NSMutableArray arrayWithArray:dealSkuArr];
                                [dealSkuIds removeLastObject];
                                NSMutableArray *sellSkuIds_ = [NSMutableArray arrayWithArray:sellSkuArr];
                                [sellSkuIds_ removeLastObject];
                                //changed
                                NSMutableArray *cartItemSkus = [self getCartItemsSkuIds:cartItem];
                                
                                NSMutableArray *finalRetainedArr = [NSMutableArray new];
                                
                                for (int i = 0; i < dealSkuIds.count; i++) {
                                    if([cartItemSkus containsObject:dealSkuIds[i]]){
                                        [finalRetainedArr addObject:dealSkuIds[i]];
                                    }
                                }
                                int dealQty = 0;
                                NSMutableArray *priceArray = [NSMutableArray new];
                                for (NSString *str in finalRetainedArr) {
                                    for (int c=0; c<cartItem.count; c++) {
                                        if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:str]) {
                                            dealQty += [cartItem[c] componentsSeparatedByString:@"#"][5].intValue;
                                            [priceArray addObject:[NSString stringWithFormat:@"%.2f",[cartItem[c] componentsSeparatedByString:@"#"][4].floatValue]];
                                        }
                                    }
                                }
                                NSArray *sorted = [priceArray sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) {
                                    if ([obj1 intValue] < [obj2 intValue]) return NSOrderedAscending;
                                    else return NSOrderedDescending;
                                }];
                                
                                if ([arr[2] containsString:deal_skuid]) {
                                    //                            if ([[skuids objectAtIndex:i] containsString:deal_skuid]) {
                                    
                                    if (dealQty >= ([arr[1] intValue] + [arr[0] intValue])) {
                                        
                                        
                                        //                                    if (dealQty%([[arr objectAtIndex:1] intValue]) == 0) {
                                        
                                        if (dealQty == ([arr[1] intValue] + [arr[0] intValue])) {
                                            if (!(_dealsController.isDealApplied)) {
                                                dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",(dealoroffersTxt.text).floatValue+[arr[1] integerValue] * [sorted[0] floatValue]];
                                                dealOfferAmount = ([arr[1] integerValue] * [sorted[0] floatValue]);
                                                dealTempVal = (dealoroffersTxt.text).floatValue;
                                                _dealsController.isDealApplied = YES;
                                                
                                            }
                                        }
                                        else {
                                            if (!(_dealsController.isDealApplied)) {
                                                dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",(dealoroffersTxt.text).floatValue+([arr[1] integerValue]*(dealQty/([arr[0] intValue]+[arr[1] intValue]))) * [sorted[0] floatValue]];
                                                dealOfferAmount = ([arr[1] integerValue]*(dealQty/([arr[0] intValue]+[arr[1] intValue]))) * [sorted[0] floatValue];
                                                dealTempVal = (dealoroffersTxt.text).floatValue;
                                                _dealsController.isDealApplied = YES;
                                            }
                                            
                                        }
                                        
                                        //                                    }
                                        //                                    else {
                                        //
                                        //                                        dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",[dealoroffersTxt.text floatValue]+dealTempVal];
                                        //
                                        //                                    }
                                        
                                    }
                                    else {
                                        for (int i = 0; i < sellSkuIds_.count; i++) {
                                            if([cartItemSkus containsObject:sellSkuIds_[i]]){
                                                if (![finalRetainedArr containsObject:sellSkuIds_[i]]) {
                                                    [finalRetainedArr addObject:sellSkuIds_[i]];
                                                }
                                            }
                                        }
                                        NSMutableArray *priceArray = [NSMutableArray new];
                                        int dealQty = 0;
                                        for (NSString *str in finalRetainedArr) {
                                            for (int c=0; c<cartItem.count; c++) {
                                                if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:str]) {
                                                    dealQty += [cartItem[c] componentsSeparatedByString:@"#"][5].intValue;
                                                    [priceArray addObject:[NSString stringWithFormat:@"%.2f",[cartItem[c] componentsSeparatedByString:@"#"][4].floatValue]];
                                                }
                                            }
                                        }
                                        NSArray *sorted = [priceArray sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) {
                                            if ([obj1 intValue] < [obj2 intValue]) return NSOrderedAscending;
                                            else return NSOrderedDescending;
                                        }];
                                        
                                        if ([arr[2] containsString:deal_skuid]) {
                                            //                            if ([[skuids objectAtIndex:i] containsString:deal_skuid]) {
                                            
                                            if (dealQty >= ([arr[1] intValue] + [arr[0] intValue])) {
                                                
                                                
                                                //                                    if (dealQty%([[arr objectAtIndex:1] intValue]) == 0) {
                                                
                                                if (dealQty == ([arr[1] intValue] + [arr[0] intValue])) {
                                                    if (!(_dealsController.isDealApplied)) {
                                                        dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",(dealoroffersTxt.text).floatValue+[arr[1] integerValue] * [sorted[0] floatValue]];
                                                        dealOfferAmount = ([arr[1] integerValue] * [sorted[0] floatValue]);
                                                        dealTempVal = (dealoroffersTxt.text).floatValue;
                                                        _dealsController.isDealApplied = YES;
                                                        
                                                    }
                                                }
                                                else {
                                                    if (!(_dealsController.isDealApplied)) {
                                                        dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",(dealoroffersTxt.text).floatValue+([arr[1] integerValue]*(dealQty/([arr[0] intValue]+[arr[1] intValue]))) * [sorted[0] floatValue]];
                                                        dealOfferAmount = ([arr[1] integerValue]*(dealQty/([arr[0] intValue]+[arr[1] intValue]))) * [sorted[0] floatValue];
                                                        dealTempVal = (dealoroffersTxt.text).floatValue;
                                                        _dealsController.isDealApplied = YES;
                                                    }
                                                    
                                                }
                                                
                                                //                                    }
                                                //                                    else {
                                                //
                                                //                                        dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",[dealoroffersTxt.text floatValue]+dealTempVal];
                                                //
                                                //                                    }
                                                
                                            }
                                        }
                                    }
                                    //                                else {
                                    //                                    if (dealQty == ([[arr objectAtIndex:1] intValue])) {
                                    //                                        if (!(_dealsController.isDealApplied)) {
                                    //                                            dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",[dealoroffersTxt.text floatValue]+[[arr objectAtIndex:1] integerValue] * [[sorted objectAtIndex:0] floatValue]];
                                    //                                            dealOfferAmount = ([[arr objectAtIndex:1] integerValue] * [[sorted objectAtIndex:0] floatValue]);
                                    //                                            dealTempVal = [dealoroffersTxt.text floatValue];
                                    //                                            _dealsController.isDealApplied = YES;
                                    //
                                    //                                        }
                                    //                                    }
                                    //
                                    //                                }
                                    //                            }
                                    //                            else {
                                    //                                if ([[arr objectAtIndex:1] integerValue]==[qty integerValue]) {
                                    //
                                    //                                    dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",[dealoroffersTxt.text floatValue]+[[arr objectAtIndex:1] integerValue] * [unit_price floatValue]];
                                    //                                    dealOfferAmount = ([[arr objectAtIndex:1] integerValue] * [unit_price floatValue]);
                                    //                                }
                                    //                                else {
                                    //                                    dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",[dealoroffersTxt.text floatValue]+[qty integerValue] * [unit_price floatValue]];
                                    //                                    dealOfferAmount = ([qty integerValue] * [unit_price floatValue]);
                                    //                                }
                                    //
                                    //                            }
                                    
                                }
                                
                                
                            }
                            
                        }
                    }
                }
                if (offerDic.count>0) {                          //applying offers
                    
                    NSArray *skus = offerDic.allKeys;
                    float comboOfferPrice = 0.0f;
                    for (int i=0; i<skus.count; i++) {
                        if ([[offerDic valueForKey:skus[i]] isKindOfClass:[NSDictionary class]]) {
                            NSDictionary *offerComboDic = [offerDic valueForKey:skus[i]];
                            if ([offerComboDic valueForKey:@"isOfferCombo"] != nil) {
                                if ([[offerComboDic valueForKey:@"isOfferCombo"] boolValue]) {
                                    NSArray *dealSkuArr = [[offerComboDic valueForKey:@"sellSkuids"] componentsSeparatedByString:@","];
                                    NSMutableArray *offerSkuIds = [NSMutableArray arrayWithArray:dealSkuArr];
                                    [offerSkuIds removeLastObject];
                                    //changed
                                    NSMutableArray *cartItemSkus = [self getCartItemsSkuIds:cartItem];
                                    BOOL offerComboStatus = FALSE;
                                    NSMutableArray *tempArr = [NSMutableArray new];
                                    for (int i = 0; i < offerSkuIds.count; i++) {
                                        if([cartItemSkus containsObject:offerSkuIds[i]]){
                                            [tempArr addObject:offerSkuIds[i]];
                                        }
                                    }
                                    NSArray *offerRanges = [offerComboDic valueForKey:@"offerRangesList"];
                                    int minimumQty_ = 0;
                                    for (NSDictionary *rangeDic in offerRanges) {
                                        minimumQty_ += [[rangeDic valueForKey:@"minimumPurchaseQuantity_float"] intValue];
                                    }
                                    
                                    if (tempArr.count == offerSkuIds.count || minimumQty_ >= tempArr.count) {
                                        offerComboStatus = TRUE;
                                    }
                                    if (offerComboStatus) {
                                        int offerQty = 0;
                                        float offerItemPrice = 0.0f;
                                        for (NSString *str in offerSkuIds) {
                                            for (int c=0; c<cartItem.count; c++) {
                                                if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:str]) {
                                                    offerQty += [cartItem[c] componentsSeparatedByString:@"#"][5].intValue;
                                                    offerItemPrice += ([cartItem[c] componentsSeparatedByString:@"#"][4].floatValue * [cartItem[c] componentsSeparatedByString:@"#"][5].intValue);
                                                }
                                            }
                                        }
                                        if (offerQty >= minimumQty_) {
                                            for (NSDictionary *rangeDic in offerRanges) {
                                                if ([[[rangeDic valueForKey:@"rangeMode"] lowercaseString] isEqualToString:@"promotion"]) {
                                                    if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"fixed_rate"] || [[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"flat_rate"]) {
                                                        if ([[rangeDic valueForKey:@"rewardValue"] floatValue] < offerItemPrice) {
                                                            comboOfferPrice += offerItemPrice - [[rangeDic valueForKey:@"rewardValue"] floatValue];
                                                        }
                                                    }
                                                    else if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"percentage"]){
                                                        comboOfferPrice += (offerItemPrice/100)*[[rangeDic valueForKey:@"rewardValue"] floatValue];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                            }
                            else if ([offerComboDic valueForKey:@"isLowerItemPrice"] != nil) {
                                if ([[offerComboDic valueForKey:@"isLowerItemPrice"] boolValue]) {
                                    NSArray *dealSkuArr = [[offerComboDic valueForKey:@"sellSkuids"] componentsSeparatedByString:@","];
                                    NSMutableArray *offerSkuIds = [NSMutableArray arrayWithArray:dealSkuArr];
                                    [offerSkuIds removeLastObject];
                                    //changed
                                    NSMutableArray *cartItemSkus = [self getCartItemsSkuIds:cartItem];
                                    NSMutableArray *finalRetainedArr = [NSMutableArray new];
                                    for (int i = 0; i < offerSkuIds.count; i++) {
                                        if([cartItemSkus containsObject:offerSkuIds[i]]){
                                            [finalRetainedArr addObject:offerSkuIds[i]];
                                        }
                                    }
                                    int dealQty = 0;
                                    NSMutableArray *priceArray = [NSMutableArray new];
                                    for (NSString *str in finalRetainedArr) {
                                        for (int c=0; c<cartItem.count; c++) {
                                            if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:str]) {
                                                dealQty += [cartItem[c] componentsSeparatedByString:@"#"][5].intValue;
                                                [priceArray addObject:[NSString stringWithFormat:@"%.2f",[cartItem[c] componentsSeparatedByString:@"#"][4].floatValue]];
                                            }
                                        }
                                    }
                                    NSArray *sorted = [priceArray sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) {
                                        if ([obj1 floatValue] < [obj2 floatValue]) return NSOrderedAscending;
                                        else return NSOrderedDescending;
                                    }];
                                    NSArray *offerRanges = [offerComboDic valueForKey:@"offerRangesList"];
                                    int minimumprurchaseQty = 0;
                                    NSString *rewardType = @"";
                                    float rewardValue = 0.0f;
                                    int rewardQty = 0;
                                    for (NSDictionary *offerDic in offerRanges) {
                                        minimumprurchaseQty += [[offerDic valueForKey:@"minimumPurchaseQuantity_float"] intValue];
                                        rewardType = [offerDic valueForKey:@"rewardType"];
                                        rewardValue = [[offerDic valueForKey:@"rewardValue"] floatValue];
                                        rewardQty += [[offerDic valueForKey:@"rewardQty"] intValue];
                                    }
                                    if (dealQty >= minimumprurchaseQty) {
                                        int totalOfferApplicableQty = ((dealQty/minimumprurchaseQty) * rewardQty);
                                        
                                        if (sorted.count == 1) {
                                            for (int i = 0; i < totalOfferApplicableQty; i++) {
                                                comboOfferPrice += ([sorted[0] floatValue]/100)*rewardValue;
                                            }
                                        }
                                        else {
                                            NSMutableArray *applicablePriceArr = [NSMutableArray new];
                                            for (int c = 0; c < (sorted.count/minimumprurchaseQty);c++) {
                                                [applicablePriceArr addObject:sorted[c]];
                                            }
                                            if (totalOfferApplicableQty == applicablePriceArr.count) {
                                                for(int j = 0;j < applicablePriceArr.count;j++){
                                                    comboOfferPrice += ([applicablePriceArr[j] floatValue]/100)*rewardValue;
                                                    
                                                }
                                                
                                            }
                                            else {
                                                for(int i = 0;i < totalOfferApplicableQty;i++){
                                                    for(int j = 0;j < applicablePriceArr.count;j++){
                                                        comboOfferPrice += ([applicablePriceArr[j] floatValue]/100)*rewardValue;
                                                        
                                                    }
                                                    
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",((dealoroffersTxt.text).floatValue + comboOfferPrice)];
                }
                
            }
            
            //changed by Srinivasulu on 19/01/2017.....
            //            totalItemsLabelValue.text = [NSString stringWithFormat:@"%d",totalQty];
            totalItemsLabelValue.text = [NSString stringWithFormat:@"%.2f",totalQty];
            
            //upto here on 19/01/2017......
            
            
            totalBeforeTurnOver = ((netPayLblVal.text).floatValue - (dealoroffersTxt.text).floatValue);
            
            if (turnoverofferDiscount !=0) {         //applying turn-over discount if any ....
                dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",(dealoroffersTxt.text).floatValue + turnoverofferDiscount];
                NSLog(@" deals val is %@",dealoroffersTxt.text);
                
            }
            
            if ([dealoroffersTxt.text caseInsensitiveCompare:@"nan"] == NSOrderedSame) {
                dealoroffersTxt.text = @"0.00";
            }
            
            NSString *dealValue = dealoroffersTxt.text;
            if (dealValue.length > 0 && dealValue != NULL) {
                netPayLblVal.text = [NSString stringWithFormat:@"%.02f",((netPayLblVal.text).floatValue - dealValue.floatValue)];
            }
            
            
            
            //commneted and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
            
            
            if (otherDiscountValue.floatValue > 0) {
                float otherDiscountAmt = (otherDiscountValue.floatValue/100.0) * (netPayLblVal.text).floatValue;
                netPayLblVal.text = [NSString stringWithFormat:@"%.2f",((netPayLblVal.text).floatValue - otherDiscountAmt)];
                //                otherDiscountTxt.text = [NSString stringWithFormat:@"%.2f",otherDiscountAmt];
                otherDiscountValueTxt.text = [NSString stringWithFormat:@"%.2f",otherDiscountAmt];
                
            }
            else{
                otherDiscountTxt.text = @"0.00";
                otherDiscountValueTxt.text = @"0.00";
            }
            
            //added by  Srinivasulu on 16/10/2018..
            amountToBePaidValLbl.text = netPayLblVal.text;
            //upto here on 16/10/2018..
            
            
            //added by Srinivasulu on 17/10/2018....
            float tempFloatValue =  [giftVoucherTxt.text floatValue];
            @try {
                
                giftVoucherTxt.text = @"0.00";
                
                for(int transInt = 0; transInt < [paymentTransactionArray count]; transInt++){
                    NSMutableDictionary * tempTransDic =  [[paymentTransactionArray objectAtIndex:transInt] mutableCopy];
                    
                    if([[tempTransDic valueForKey:MODE_OF_PAY]  caseInsensitiveCompare:COUPON] == NSOrderedSame){
                        if([[tempTransDic valueForKey:DISCOUNT_TYPE]  caseInsensitiveCompare:Percentage] == NSOrderedSame){
                            
                            if(([netPayLblVal.text floatValue] * ([[tempTransDic valueForKey:UNIT_CASH_VALUE] floatValue] / 100)) <= [[tempTransDic valueForKey:MAX_DISCOUNT_AMOUNT] floatValue]){
                                
                                giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",(([netPayLblVal.text floatValue] * ([[tempTransDic valueForKey:UNIT_CASH_VALUE] floatValue] / 100)) + [giftVoucherTxt.text floatValue])];
                                [tempTransDic setValue:[NSString stringWithFormat:@"%.2f",([netPayLblVal.text floatValue] * ([[tempTransDic valueForKey:UNIT_CASH_VALUE] floatValue] / 100))] forKey:PAID_AMT];
                                [tempTransDic setValue:[NSString stringWithFormat:@"%.2f",([netPayLblVal.text floatValue] * ([[tempTransDic valueForKey:UNIT_CASH_VALUE] floatValue] / 100))] forKey:RECEIVED_AMOUNT];
                            }
                            else{
                                
                                giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",([[tempTransDic valueForKey:MAX_DISCOUNT_AMOUNT] floatValue] + [giftVoucherTxt.text floatValue])];
                                [tempTransDic setValue:[tempTransDic valueForKey:MAX_DISCOUNT_AMOUNT] forKey:PAID_AMT];
                                [tempTransDic setValue:[tempTransDic valueForKey:MAX_DISCOUNT_AMOUNT] forKey:RECEIVED_AMOUNT];
                            }
                        }
                        else{
                            
                            giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",([[tempTransDic valueForKey:PAID_AMT] floatValue] + [giftVoucherTxt.text floatValue])];
                        }
                    }
                    else if(([[tempTransDic valueForKey:MODE_OF_PAY]  caseInsensitiveCompare:GIFT_VOUCHER] == NSOrderedSame) || ([[tempTransDic valueForKey:MODE_OF_PAY]  caseInsensitiveCompare:LOYALTY_POINTS] == NSOrderedSame)){
                        
                        giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",([[tempTransDic valueForKey:PAID_AMT] floatValue] + [giftVoucherTxt.text floatValue])];
                    }
                    
                    [paymentTransactionArray replaceObjectAtIndex:transInt withObject:tempTransDic];
                }
            } @catch (NSException *exception) {
                giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",tempFloatValue];
            } @finally {
                
            }
            //upto here on 17/10/2018....
            
            
            
            
            
            
            
            //changed by Srinivasulu on 16/10/2018....
            if ((giftVoucherTxt.text).floatValue>0) {
                
                if ((giftVoucherTxt.text).floatValue<(netPayLblVal.text).floatValue) {
                    
                    netPayLblVal.text = [NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue-(giftVoucherTxt.text).floatValue];
                }
                else {
                    netPayLblVal.text = @"0.00";
                }
            }
            
            //upto here on 16/10/2018....
            
//            amountToBePaidValLbl.text = netPayLblVal.text; //added by roja on 20/11/2019....

            
            
            // totalTxt.text = [NSString stringWithFormat:@"%.2f",[totalTxt.text floatValue]+[taxTxt.text floatValue]];
            subtotalTxt.text = [NSString stringWithFormat:@"%.02f",((totalTxt.text).floatValue - (taxTxt.text).floatValue)];
            
            
            
            if ((subtotalTxt.text).floatValue<0) {
                
                subtotalTxt.text = @"0.00";
            }
            
            
            totalItemsLabelValue.text = [NSString stringWithFormat:@"%.2f",totalQty];
            
            totalItemsLblVal.text = [NSString stringWithFormat:@"%lu",(unsigned long)cartItem.count];
            
            //added by Srinivasulu on 02/08/2017 && 16/10/2018....
            
            totalBillAmountStr = [netPayLblVal.text copy];
            
            if([netPayLblVal.text floatValue] < [amountToBePaidValLbl.text floatValue])
                totalBillAmountStr = amountToBePaidValLbl.text;
            //upto here on 02/08/2017 && 16/10/2018....
            
            //added by Srnivasulu on 14/11/2017....
            //commneted and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
            
            completeBillDiscountValueLbl.text = [NSString stringWithFormat:@"%.2f", ((dealoroffersTxt.text).floatValue + (giftVoucherTxt.text).floatValue + (otherDiscountValueTxt.text).floatValue)];
            
            //upto her on 14/11/2017....
            
            
            
            if (isRoundingRequired) {
                netPayLblVal.text =  [NSString stringWithFormat:@"%.2f", roundf((netPayLblVal.text).floatValue)];
                //added by  Srinivasulu on 16/10/2018..
                amountToBePaidValLbl.text =  [NSString stringWithFormat:@"%.2f", roundf((amountToBePaidValLbl.text).floatValue)];
                //upto here on 16/10/2018..
            }
            
            
            //            netPayLblVal.text = [NSString stringWithFormat:@"%.2f",ceilf([netPayLblVal.text floatValue])];
            //            dealoroffersTxt.text = [NSString stringWithFormat:@"%.2f",ceilf([dealoroffersTxt.text floatValue])];
            
            if ((netPayLblVal.text).floatValue < 0) {
                
                netPayLblVal.text = @"0.00";
                //added by  Srinivasulu on 16/10/2018..
                amountToBePaidValLbl.text =  @"0.00";
                //upto here on 16/10/2018..
            }
        }
        
        else{
            totalTxt.text = @"0.0";
            taxTxt.text = @"0.0";
            subtotalTxt.text = @"0.0";
            netPayLblVal.text = @"0.0";
            completeBillDiscountValueLbl.text = @"0.0";
            totalItemsLabelValue.text = @"0";
            totalItemsLblVal.text = @"0";
        }
        
        [cartTable reloadData];
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception.description);
    }
    // [HUD setHidden:YES];
}


// deleting the row .. and change the values of required fields ..

- (void) delRow:(id) sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    @try {
        
        //        MBProgressHUD *HUD_ = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
        //        [self.navigationController.view addSubview:HUD_];
        //        // Regiser for HUD callbacks so we can remove it from the window at the right time
        //        HUD_.delegate = self;
        //        HUD_.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
        //        HUD_.dimBackground = YES;
        //        HUD_.mode = MBProgressHUDModeCustomView;
        //        // Show the HUD
        //        [HUD_ show:YES];
        //        //
        //        [HUD_ setLabelText:@"Updating.."];
        
        [HUD setHidden:NO];
        HUD.labelText = @"Please wait...";
        
        NSString *skuid =  [cartTotalItems[[sender tag]] componentsSeparatedByString:@"#"][0];
        dealoroffersTxt.text = @"0.00";
        
        if (![isVoidedArray[[sender tag]] boolValue]) {
            
            //added by Srinivasulu on 08/09/2017....
            
            if (![transperentView isDescendantOfView:self.view]){
                
                [HUD setHidden:YES];
                
                UIButton * btn = [[UIButton alloc] init];
                
                btn.tag = [sender tag];
                
                [self showVoidItemReasonView:btn];
                
                return;
                
            }
            else{
                
                if ([transperentView isDescendantOfView:self.view])
                    [transperentView removeFromSuperview];
                
                
                @try {
                    
                    NSMutableDictionary * productInfoDic = [productInfoArr[[sender tag]] mutableCopy];
                    
                    productInfoDic[VOID_ITEM_REASON] = itemVoidReasonTxt.text;
                    
                    productInfoArr[[sender tag]] = productInfoDic;
                } @catch (NSException *exception) {
                    
                }
                
            }
            //upto here on 08/09/2017....
            
            
            NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[[sender tag]]];
            
            [cartItem removeObjectAtIndex:positionCount];
            isVoidedArray[[sender tag]] = @YES;
            // [itemPromoFlagArr removeObjectAtIndex:positionCount];
            [cartItemDetails removeObjectAtIndex:positionCount];
            [deletedTaxDic setValue:taxArr[positionCount] forKey:skuid];
            [taxArr removeObjectAtIndex:positionCount];
            float totalAmount1 = 0.00;
            
            for (int i=0; i < cartItem.count; i++) {
                if (!([turnOverDealVal containsObject:[cartItem[i] componentsSeparatedByString:@"#"][5]])) {
                    totalAmount1 = totalAmount1 + ([cartItem[i] componentsSeparatedByString:@"#"][5].intValue*[cartItem[i] componentsSeparatedByString:@"#"][4].floatValue);
                }
            }
            
            if (dealDataItems.count!=0) {                   //removing deals....
                
                for (int i = 0; i < dealDataItems.count; i++) {
                    
                    DealsController *_dealsController = dealDataItems[i];
                    NSDictionary *dealDicController = _dealsController.productData;
                    _dealsController.isDealApplied = NO;
                    for (int j=0; j<dealDicController.allKeys.count; j++) {
                        
                        NSArray *itemArr = [dealDicController valueForKey:skuid];
                        
                        if (itemArr.count!=0) {
                            if ([itemArr containsObject:skuid]) {
                                [dealDataItems removeObjectAtIndex:i];
                            }
                        }
                    }
                }
            }
            [turnOverDealVal removeAllObjects];
            turnOverDis = @"";
            // [self callOffersForScanning:skuid qty:@"0" total:[NSString stringWithFormat:@"%.2f",totalAmount1] itemPrice:@"0"];
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
            }
            else {
                cartTable.frame = CGRectMake(cartTable.frame.origin.x, cartTable.frame.origin.y, cartTable.frame.size.width, cartTable.frame.size.height);
            }
            
            totalTxt.text = @"";
            scrollView.hidden = NO;
            cartTable.hidden = NO;
            [cartTable reloadData];
            
            NSMutableDictionary *inputDic = [NSMutableDictionary new];
            [inputDic setValue:skuid forKey:@"skuID"];
            [inputDic setValue:@"1" forKey:@"qty"];
            [inputDic setValue:[NSString stringWithFormat:@"%.2f",totalAmount1] forKey:@"totalPrice"];
            [inputDic setValue:@"100.0" forKey:@"price"];
            
            // [self performSelectorInBackground:@selector(calculateDealsAndOffers:) withObject:inputDic];
            
            //modified by sonali on 5/8/16
            
            // [HUD showWhileExecuting:@selector(calculateDealsAndOffers:) onTarget:self withObject:inputDic animated:true];
            
            [self calculateDealsAndOffers:inputDic];
            
            //commneted and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
            
            if (cartItem.count == 0) {
                giftVoucherTxt.text = @"0.00";
                otherDiscountTxt.text = @"0.00";
                otherDiscountValueTxt.text = @"0.00";
                [offerItems removeAllObjects];
            }
            [self updateValues];
            [self updateItemScanTime];
            [self saveCartItems:cartTotalItems];
            
            //  [HUD setHidden:YES];
            
        }
        else {
            
            //added by Srinivasulu on 08/09/2017....
            NSMutableDictionary * productInfoDic;
            
            @try {
                
                productInfoDic = [productInfoArr[[sender tag]] mutableCopy];
                
                productInfoDic[VOID_ITEM_REASON] = @"";
                
                //added by Srinivasulu on 03/11/2017....
                
                productInfoDic[ZERO_STOCK] = zeroStockAvailInfoArr[[sender tag]];
                
                
                //upto here on 03/11/2017....
                
                productInfoArr[[sender tag]] = productInfoDic;
            } @catch (NSException *exception) {
                
            }
            
            //upto here on 08/09/2017....
            
            isItemUnVoided = true;
            
            selected_SKID = nil;
            selected_desc = nil;
            isVoidedArray[[sender tag]] = @NO;
            
            if (dealDataItems.count!=0) {                   //removing deals....
                
                for (int i = 0; i < dealDataItems.count; i++) {
                    
                    DealsController *_dealsController = dealDataItems[i];
                    _dealsController.isDealApplied = NO;
                }
            }
            NSArray *prodArr = [cartTotalItems[[sender tag]] componentsSeparatedByString:@"#"] ;
            
            [taxArr addObject:[deletedTaxDic valueForKey:prodArr[0]]];
            
            //added by Srinivasulu on 03/11/2017....
            //reason we should handle the quantity also....
            
            //            [self getSkuDetailsHandler:[cartTotalItems objectAtIndex:[sender tag]] productInfo:nil];
            [self getSkuDetailsHandler:cartTotalItems[[sender tag]] productInfo:productInfoDic];
            
            //upto here on 03/11/2017....
            
            if (!isOfflineService) {
                
                float totalAmount1 = 0.00;
                
                for (int i=0; i < cartItem.count; i++) {
                    if (!([turnOverDealVal containsObject:[cartItem[i] componentsSeparatedByString:@"#"][5]])) {
                        totalAmount1 = totalAmount1 + ([cartItem[i] componentsSeparatedByString:@"#"][5].intValue*[cartItem[i] componentsSeparatedByString:@"#"][4].floatValue);
                    }
                }
                
                
                NSMutableDictionary *inputDic = [NSMutableDictionary new];
                [inputDic setValue:skuid forKey:@"skuID"];
                [inputDic setValue:@"1" forKey:@"qty"];
                [inputDic setValue:[NSString stringWithFormat:@"%.2f",totalAmount1] forKey:@"totalPrice"];
                [inputDic setValue:@"100.0" forKey:@"price"];
                
                // [self performSelectorInBackground:@selector(calculateDealsAndOffers:) withObject:inputDic];
                
                //modified by sonali on 5/8/16
                
                //[HUD showWhileExecuting:@selector(calculateDealsAndOffers:) onTarget:self withObject:inputDic animated:true];
                
                [self calculateDealsAndOffers:inputDic];
                
            }
            
        }
        
        // [HUD_ setHidden:YES];
        
        
    }
    @catch (NSException *exception) {
        [HUD setHidden:YES];
        NSLog(@"%@",exception);
    }
    @finally {
        
        //added by Srinivasulu on 02/06/2017....
        
        if(!taxArr.count){
            
            [self addLabelsToScrollView:taxArr];
            
        }
        
        //upto here on 02/06/2017....
        
        isItemUnVoided = false;
        
    }
}


- (void)viewDidUnload
{
    // [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
    //    [self setBillField:nil];
    
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
    
}



-(void)viewWillDisappear:(BOOL)animated {
    
    //  [super viewWillDisappear:YES];
    
    
    tagid = 0;
    
    dealoroffersTxt.text = @"";
    giftVoucherTxt.text = @"";
    subtotalTxt.text = @"";
    totalTxt.text = @"";
    netPayLblVal.text = @"";
    BillField.userInteractionEnabled = YES;
    
    [skuArrayList removeAllObjects];
    [filteredSkuArrayList removeAllObjects];
    [skListTable setHidden:YES];
    for (int h = 0; h < textFieldData.count; h++) {
        UITextField *text = textFieldData[h];
        text.text = @"0.00";
        text.text = @"0.00";
    }
    [cartTable reloadData];
    segmentedControl.enabled  = YES;
    BillField.enabled = YES;
    barcodeBtn.enabled = YES;
    billIDValue = @"";
    finalBillDue = @"";
    cartTable.userInteractionEnabled = YES;
    skListTable.userInteractionEnabled = YES;
    @try {
        
        //modified by sonali...
        
        CheckWifi *wifi = [[CheckWifi alloc] init];
        
        
        if ([wifi checkWifi]) {
            
            isOfflineService = false;
        }
        
        [scanner removeObserver:self];
        
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@ scanner-%@ printer - %@ powa peripheral- %@",exception,scanner,printer,powaPOS);
    }
    @finally {
        
    }
    
    
}



-(void)backAction{
    @try {
        
        //        if (![billIDValue isKindOfClass:[NSNull class]] && [billIDValue length]==0) {
        if ( (cartItem.count > 0)  && (!isNewReturnBill)) {
            
            backAction = YES;
            
            //changed by Srinivasulu on 09/08/2017....
            
            saveAlert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"do_you_want_to_save_the_bill_?", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"yes", nil) otherButtonTitles:NSLocalizedString(@"no", nil), nil];
            [saveAlert show];
            
            
            //upto here on 09/08/2017....
            
            
        }
        else {
            billIDValue = @"";
            
            //commented by Srinivasulu on 23/08/2017...
            //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
            //    defaults = [NSUserDefaults standardUserDefaults];
            
            if(!isNewReturnBill){
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                
                //upto here on 23/08/2017....
                
                defaults = [NSUserDefaults standardUserDefaults];
                [defaults removeObjectForKey:@"cartItems"];
                [defaults synchronize];
                // [self.navigationController popViewControllerAnimated:YES];
                
            }
            
            OmniHomePage * home = [[OmniHomePage alloc]init];
            
            //changed by Srinivasulu on 27/09/2017....
            //reason backButton and logout button GUI is distributed....
            
            [self.navigationController pushViewController:home animated:NO];
            //            [self.navigationController pushViewController:home animated:YES];
            
            //upto here on 27/09/2017....
            
        }
        //        }
        //        else {
        //            billIDValue = @"";
        //
        //            OmniHomePage *home = [[OmniHomePage alloc]init];
        //            [self.navigationController pushViewController:home animated:NO];
        //
        //        }
        
    }
    @catch (NSException *exception) {
        
        OmniHomePage *home = [[OmniHomePage alloc]init];
        [self.navigationController pushViewController:home animated:NO];
    }
    @finally {
        
    }
}
-(void)doneWithNumberPad{
    
    [payTxt2 resignFirstResponder];
    
    if (presentTextField != nil) {
        [presentTextField resignFirstResponder];
    }
    
}
-(void)applyDealsOffline:(NSDictionary *)result sku_id:(NSString *)sku_id {
    
    
    if (result != nil && result!=(NSDictionary *)[NSNull null]) {
        
        NSArray *dealDetails = [result valueForKey:@"dealsList"];
        NSMutableArray *offerList = [result valueForKey:@"offersList"];
        
        if (dealDetails.count != 0) {
            
            for (int i=0 ; i < dealDetails.count; i++) {
                
                NSDictionary *tempDic = dealDetails[i];
                
                if (!([[tempDic valueForKey:@"dealCategory"] rangeOfString:@"turn"].location == NSNotFound)) {
                    
                    turnOverDealVal = [[NSMutableArray alloc]init];
                    
                    NSArray *arr = [tempDic valueForKey:@"rangeList"];
                    
                    if (arr.count > 0) {
                        NSDictionary *dealItem = arr[0];
                        [turnOverDealVal addObject:[tempDic valueForKey:@"dealSkus"] ];
                        [turnOverDealVal addObject:[dealItem valueForKey:@"dealQuantity"] ];
                        turnOverDealDes = [dealItem valueForKey:@"description"];
                    }
                }
                else {
                    NSArray *arr = [tempDic valueForKey:@"rangeList"];
                    // for (int i=0; i<[arr count]; i++) {
                    
                    NSDictionary *dealDic = arr[0];
                    
                    DealsController *_dealsController = [[DealsController alloc] init];
                    
                    dealItemsCount = [[NSMutableArray alloc] init];
                    dealSkuids = [[NSMutableArray alloc] init];
                    dealSkuCount = [[NSMutableArray alloc] init];
                    sellSkuIds = [[NSMutableArray alloc] init];
                    NSMutableDictionary *dealDesc = [[NSMutableDictionary alloc]init];
                    NSMutableArray *temp = [[NSMutableArray alloc]init];
                    
                    
                    
                    if (dealDataItems.count) {
                        for(int j=0;j<dealDataItems.count;j++) {
                            
                            _dealsController = dealDataItems[j];
                            NSMutableDictionary *dealDicController = _dealsController.productData;
                            NSArray *dealArr = dealDicController.allKeys;
                            
                            for (int i=0; i<dealArr.count; i++) {
                                NSArray *itemArr = [dealDicController valueForKey:dealArr[i]];
                                
                                if (itemArr.count!=0) {
                                    if (([itemArr[2] containsString:sku_id] || [itemArr[4] containsString:sku_id]) || [dealArr containsObject:sku_id]) {
                                        [dealDataItems removeObjectAtIndex:j];
                                    }
                                }
                            }
                        }
                        _dealsController = [[DealsController alloc] init];
                        [temp addObject:[dealDic valueForKey:@"minimumPurchaseQuantity_float"]];
                        [temp addObject:[dealDic valueForKey:@"dealQuantity"]];
                        [temp addObject:[tempDic valueForKey:@"dealSkus"]];
                        [temp addObject:[tempDic valueForKey:@"description"]];
                        [temp addObject:[tempDic valueForKey:@"sellSkus"]];
                        
                        dealItemsCount = [temp copy];
                        [dealDesc setValue:dealItemsCount forKey:sku_id];
                        [dealSkuids  addObject:[dealDetails valueForKey:@"dealSkus"]];
                        _dealsController.productData = dealDesc;
                        _dealsController.isDealApplied = NO;
                        [dealDataItems addObject:_dealsController];
                        
                    }
                    else {
                        [temp addObject:[dealDic valueForKey:@"minimumPurchaseQuantity_float"]];
                        [temp addObject:[dealDic valueForKey:@"dealQuantity"]];
                        [temp addObject:[tempDic valueForKey:@"dealSkus"]];
                        [temp addObject:[tempDic valueForKey:@"description"]];
                        [temp addObject:[tempDic valueForKey:@"sellSkus"]];
                        
                        dealItemsCount = [temp copy];
                        
                        [dealDesc setValue:dealItemsCount forKey:sku_id];
                        
                        
                        [dealSkuids  addObject:[dealDetails valueForKey:@"dealSkus"]];
                        
                        _dealsController.productData = dealDesc;
                        _dealsController.isDealApplied = NO;
                        [dealDataItems addObject:_dealsController];
                        
                    }
                }
            }
        }
        if (offerList.count!=0) {
            if (offerList.count > 1) {
                
                NSMutableArray *priceArr_ = [NSMutableArray new];
                for (int c= 0; c < offerList.count; c++) {
                    NSMutableDictionary *tempDic = offerList[c];
                    NSArray *offerRanges = [tempDic valueForKey:@"offerRangesList"];
                    for (NSDictionary *offerDic in offerRanges) {
                        [priceArr_ addObject:[offerDic valueForKey:@"rewardValue"]];
                    }
                }
                NSArray *sorted = [priceArr_ sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) {
                    if ([obj1 floatValue] < [obj2 floatValue]) return NSOrderedAscending;
                    else return NSOrderedDescending;
                }];
                NSMutableArray *finalOfferArr = [NSMutableArray new];
                for (int c= 0; c < offerList.count; c++) {
                    NSMutableDictionary *tempDic = offerList[c];
                    NSArray *offerRanges = [tempDic valueForKey:@"offerRangesList"];
                    for (NSDictionary *offerDic in offerRanges) {
                        if ([[offerDic valueForKey:@"rewardValue"] floatValue] == [sorted[(sorted.count - 1)] floatValue]) {
                            [finalOfferArr addObject:tempDic];
                            break;
                        }
                    }
                }
                offerList = [[NSMutableArray alloc] initWithArray:finalOfferArr];
            }
            
            for (int i=0; i<offerList.count; i++) {
                
                NSMutableDictionary *tempDic = offerList[i];
                if ([tempDic valueForKey:@"isOfferCombo"] != nil) {
                    NSArray *dealSkuArr = [[tempDic valueForKey:@"sellSkuids"] componentsSeparatedByString:@","];
                    NSMutableArray *offerSkuIds = [NSMutableArray arrayWithArray:dealSkuArr];
                    [offerSkuIds removeLastObject];
                    //changed
                    NSMutableArray *cartItemSkus = [self getCartItemsSkuIds:cartItem];
                    BOOL offerComboStatus = FALSE;
                    NSMutableArray *tempArr = [NSMutableArray new];
                    for (int i = 0; i < offerSkuIds.count; i++) {
                        if([cartItemSkus containsObject:offerSkuIds[i]]){
                            [tempArr addObject:offerSkuIds[i]];
                        }
                    }
                    if (tempArr.count == offerSkuIds.count) {
                        offerComboStatus = TRUE;
                    }
                    if (offerComboStatus) {
                        int offerQty = 0;
                        float offerItemPrice = 0.0f;
                        float comboOfferPrice = 0.0f;
                        for (NSString *str in offerSkuIds) {
                            for (int c=0; c<cartItem.count; c++) {
                                if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:str]) {
                                    offerQty += [cartItem[c] componentsSeparatedByString:@"#"][5].intValue;
                                    offerItemPrice += ([cartItem[c] componentsSeparatedByString:@"#"][4].floatValue * [cartItem[c] componentsSeparatedByString:@"#"][5].intValue);
                                }
                            }
                        }
                        NSArray *offerRanges = [tempDic valueForKey:@"offerRangesList"];
                        for (NSDictionary *rangeDic in offerRanges) {
                            if ([[[rangeDic valueForKey:@"rangeMode"] lowercaseString] isEqualToString:@"promotion"]) {
                                if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"fixed_rate"] || [[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"flat_rate"]) {
                                    if ([[rangeDic valueForKey:@"rewardValue"] floatValue] < offerItemPrice) {
                                        comboOfferPrice = offerItemPrice - [[rangeDic valueForKey:@"rewardValue"] floatValue];
                                    }
                                }
                                else if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"percentage"]){
                                    comboOfferPrice = (offerItemPrice/100)*[[rangeDic valueForKey:@"rewardValue"] floatValue];
                                }
                            }
                        }
                        
                        NSArray *allOfferKeys = offerDic.allKeys;
                        for (NSString *skuStr in allOfferKeys) {
                            NSArray*eachOfferSkuArr = [skuStr componentsSeparatedByString:@","];
                            NSMutableArray *eachOfferSkuIds = [NSMutableArray arrayWithArray:eachOfferSkuArr];
                            [eachOfferSkuIds removeLastObject];
                            for (NSString *eachStr in eachOfferSkuIds) {
                                if ([[tempDic valueForKey:@"sellSkuids"] containsString:eachStr]) {
                                    if ([[offerDic valueForKey:skuStr] isKindOfClass:[NSArray class]]) {
                                        NSArray *offerDetails = [offerDic valueForKey:skuStr];
                                        float previousRewardVal = 0.0f;
                                        if ([offerDetails[2] isEqualToString:@"fixed_rate"]) {
                                            for (int c=0; c<cartItem.count; c++) {
                                                if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:eachStr]) {
                                                    previousRewardVal = (([cartItem[c] componentsSeparatedByString:@"#"][4].floatValue * [offerDetails[3] intValue]) - [offerDetails[0] floatValue]);
                                                    
                                                }
                                            }
                                        }
                                        else {
                                            previousRewardVal = [offerDetails[0] floatValue];
                                        }
                                        if (previousRewardVal < comboOfferPrice) {
                                            [offerDic removeObjectForKey:skuStr];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if (offerDic.count) {
                        NSArray *allOfferKeys = offerDic.allKeys;
                        for (NSString *skuStr in allOfferKeys) {
                            if ([[offerDic valueForKey:skuStr] isKindOfClass:[NSDictionary class]]) {
                                NSDictionary *offerDetailDic = [offerDic valueForKey:skuStr];
                                if ([offerDetailDic valueForKey:@"isOfferCombo"] != nil) {
                                    NSArray *dealSkuArr = [[offerDetailDic valueForKey:@"sellSkuids"] componentsSeparatedByString:@","];
                                    NSMutableArray *offerSkuIds = [NSMutableArray arrayWithArray:dealSkuArr];
                                    [offerSkuIds removeLastObject];
                                    //changed
                                    NSMutableArray *cartItemSkus = [self getCartItemsSkuIds:cartItem];
                                    BOOL offerComboStatus = FALSE;
                                    NSMutableArray *tempArr = [NSMutableArray new];
                                    for (int i = 0; i < offerSkuIds.count; i++) {
                                        if([cartItemSkus containsObject:offerSkuIds[i]]){
                                            [tempArr addObject:offerSkuIds[i]];
                                        }
                                    }
                                    if (tempArr.count == offerSkuIds.count) {
                                        offerComboStatus = TRUE;
                                    }
                                    if (offerComboStatus) {
                                        int offerQty = 0;
                                        float offerItemPrice = 0.0f;
                                        float comboOfferPrice = 0.0f;
                                        for (NSString *str in offerSkuIds) {
                                            for (int c=0; c<cartItem.count; c++) {
                                                if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:str]) {
                                                    offerQty += [cartItem[c] componentsSeparatedByString:@"#"][5].intValue;
                                                    offerItemPrice += ([cartItem[c] componentsSeparatedByString:@"#"][4].floatValue * [cartItem[c] componentsSeparatedByString:@"#"][5].intValue);
                                                }
                                            }
                                        }
                                        NSArray *offerRanges = [offerDetailDic valueForKey:@"offerRangesList"];
                                        for (NSDictionary *rangeDic in offerRanges) {
                                            if ([[[rangeDic valueForKey:@"rangeMode"] lowercaseString] isEqualToString:@"promotion"]) {
                                                if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"fixed_rate"] || [[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"flat_rate"]) {
                                                    if ([[rangeDic valueForKey:@"rewardValue"] floatValue] < offerItemPrice) {
                                                        comboOfferPrice = offerItemPrice - [[rangeDic valueForKey:@"rewardValue"] floatValue];
                                                    }
                                                }
                                                else if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"percentage"]){
                                                    comboOfferPrice = (offerItemPrice/100)*[[rangeDic valueForKey:@"rewardValue"] floatValue];
                                                }
                                            }
                                        }
                                        if ([tempDic valueForKey:@"isOfferCombo"] == nil && [tempDic valueForKey:@"isLowerItemPrice"] == nil) {
                                            NSArray *sellSkus = [[tempDic valueForKey:@"sellSkuids"] componentsSeparatedByString:@","];
                                            NSMutableArray *eachOfferSkuIds = [NSMutableArray arrayWithArray:sellSkus];
                                            [eachOfferSkuIds removeLastObject];
                                            BOOL offerAppliedStatus = FALSE;
                                            for (NSString *skuStr in eachOfferSkuIds) {
                                                if ([offerSkuIds containsObject:skuStr]) {
                                                    offerAppliedStatus = TRUE;
                                                }
                                            }
                                            if (offerAppliedStatus) {
                                                NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
                                                NSDictionary *offerDetails = arr[0];
                                                if ([[tempDic valueForKey:@"rewardType"] isEqualToString:@"fixed_rate"]) {
                                                    float skuPrice = 0.0f;
                                                    for (NSString *str in eachOfferSkuIds) {
                                                        for (int c=0; c<cartItem.count; c++) {
                                                            if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:str]) {
                                                                skuPrice += ([cartItem[c] componentsSeparatedByString:@"#"][4].floatValue * [cartItem[c] componentsSeparatedByString:@"#"][5].intValue);
                                                            }
                                                        }
                                                    }
                                                    if ((skuPrice - [[offerDetails valueForKey:@"rewardValue"] floatValue]) > comboOfferPrice) {
                                                        [offerDic removeObjectForKey:skuStr];
                                                        
                                                    }
                                                    else {
                                                        return;
                                                    }
                                                }
                                                else {
                                                    if ([[offerDetails valueForKey:@"rewardValue"] floatValue] > comboOfferPrice) {
                                                        [offerDic removeObjectForKey:skuStr];
                                                    }
                                                    else {
                                                        return;
                                                    }
                                                }
                                                
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (!([[tempDic valueForKey:@"offerCategory"] rangeOfString:@"turn"].location == NSNotFound)) {
                    
                    
                    NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
                    
                    NSDictionary *offerValue = arr[0];
                    turnOverDis = [[offerValue valueForKey:@"rewardValue"] copy] ;
                    
                    offerDescStr = [offerValue valueForKey:@"description"];
                }
                else {
                    
                    // turnOverDis = @"";
                    if ([tempDic valueForKey:@"isOfferCombo"] == nil && [tempDic valueForKey:@"isLowerItemPrice"] == nil) {
                        NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
                        
                        NSDictionary *offerDetails = arr[0];
                        NSArray *temp = @[[offerDetails valueForKey:@"rewardValue"] ,[offerDetails valueForKey:@"description"],[tempDic valueForKey:@"rewardType"],[offerDetails valueForKey:@"minimumPurchaseQuantity_float"]];
                        offerDic[[tempDic valueForKey:@"sellSkuids"]] = temp;
                        
                    }
                    else {
                        
                        [offerDic setObject:tempDic forKeyedSubscript:[tempDic valueForKey:@"sellSkuids"]];
                    }
                }
                
            }
            
            
            //            for (int i=0; i<[offerList count]; i++) {
            //
            //                NSMutableDictionary *tempDic = [offerList objectAtIndex:i];
            //
            //                if (!([[tempDic valueForKey:@"offerCategory"] rangeOfString:@"turn"].location == NSNotFound)) {
            //
            //
            //                    NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
            //
            //                    NSDictionary *offerValue = [arr objectAtIndex:0];
            //                    turnOverDis = [[offerValue valueForKey:@"rewardValue"] copy] ;
            //
            //                    offerDescStr = [offerValue valueForKey:@"description"];
            //                }
            //                else {
            //
            //                    // turnOverDis = @"";
            //                    if ([tempDic valueForKey:@"isOfferCombo"] == nil && [tempDic valueForKey:@"isLowerItemPrice"] == nil) {
            //                        NSArray *arr = [tempDic valueForKey:@"offerRangesList"];
            //
            //                        NSDictionary *offerDetails = [arr objectAtIndex:0];
            //                        NSArray *temp = [NSArray arrayWithObjects:[offerDetails valueForKey:@"rewardValue"] ,[offerDetails valueForKey:@"description"], nil];
            //                        [offerDic setObject:temp forKey:[tempDic valueForKey:@"sellSkuids"]];
            //
            //                    }
            //                    else {
            //                        [offerDic setObject:tempDic forKeyedSubscript:[tempDic valueForKey:@"sellSkuids"]];
            //                    }
            //                }
            //
            //            }
        }
        else {
            if (offerDic.count) {
                NSMutableDictionary *tempOfferDic = [offerDic mutableCopy];
                NSArray *allOfferKeys = tempOfferDic.allKeys;
                for (NSString *skuStr in allOfferKeys) {
                    if ([[tempOfferDic valueForKey:skuStr] isKindOfClass:[NSArray class]]) {
                        NSArray *offerDetailDic = [tempOfferDic valueForKey:skuStr];
                        NSArray *offerSkus_ = [skuStr componentsSeparatedByString:@","];
                        float skuPrice = 0.0f;
                        float offerPrice = 0.0f;
                        for (int c=0; c<cartItem.count; c++) {
                            if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:offerSkus_[0]]) {
                                skuPrice += ([cartItem[c] componentsSeparatedByString:@"#"][4].floatValue * [cartItem[c] componentsSeparatedByString:@"#"][5].intValue);
                            }
                        }
                        if (skuPrice > 0) {
                            if ([offerDetailDic[2] isEqualToString:@"fixed_rate"]) {
                                offerPrice = skuPrice - [offerDetailDic[0] floatValue];
                            }
                            else {
                                offerPrice = [offerDetailDic[0] floatValue];
                            }
                        }
                        for (NSString *skuStr_ in allOfferKeys) {
                            if ([[tempOfferDic valueForKey:skuStr_] isKindOfClass:[NSDictionary class]]) {
                                NSDictionary *offerDetailDic = [tempOfferDic valueForKey:skuStr_];
                                if ([offerDetailDic valueForKey:@"isOfferCombo"] != nil) {
                                    NSArray *offerSkuArr = [[offerDetailDic valueForKey:@"sellSkuids"] componentsSeparatedByString:@","];
                                    NSMutableArray *offerSkuIds = [NSMutableArray arrayWithArray:offerSkuArr];
                                    [offerSkuIds removeLastObject];
                                    if ([[offerDetailDic valueForKey:@"sellSkuids"] containsString:skuStr]) {
                                        
                                        int offerQty = 0;
                                        float offerItemPrice = 0.0f;
                                        float comboOfferPrice = 0.0f;
                                        for (NSString *str in offerSkuIds) {
                                            for (int c=0; c<cartItem.count; c++) {
                                                if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:str]) {
                                                    offerQty += [cartItem[c] componentsSeparatedByString:@"#"][5].intValue;
                                                    offerItemPrice += ([cartItem[c] componentsSeparatedByString:@"#"][4].floatValue * [cartItem[c] componentsSeparatedByString:@"#"][5].intValue);
                                                }
                                            }
                                        }
                                        
                                        
                                        NSArray *offerRanges = [offerDetailDic valueForKey:@"offerRangesList"];
                                        for (NSDictionary *rangeDic in offerRanges) {
                                            if ([[[rangeDic valueForKey:@"rangeMode"] lowercaseString] isEqualToString:@"promotion"]) {
                                                if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"fixed_rate"] || [[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"flat_rate"]) {
                                                    if ([[rangeDic valueForKey:@"rewardValue"] floatValue] < offerItemPrice) {
                                                        comboOfferPrice = offerItemPrice - [[rangeDic valueForKey:@"rewardValue"] floatValue];
                                                    }
                                                }
                                                else if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"percentage"]){
                                                    comboOfferPrice = (offerItemPrice/100)*[[rangeDic valueForKey:@"rewardValue"] floatValue];
                                                }
                                            }
                                        }
                                        if (offerPrice < comboOfferPrice) {
                                            [offerDic removeObjectForKey:skuStr];
                                        }
                                    }
                                }
                            }
                        }
                        //                        if ([offerDetailDic valueForKey:@"isOfferCombo"] != nil) {
                        //                            NSArray *dealSkuArr = [[offerDetailDic valueForKey:@"sellSkuids"] componentsSeparatedByString:@","];
                        //                            NSMutableArray *offerSkuIds = [NSMutableArray arrayWithArray:dealSkuArr];
                        //                            [offerSkuIds removeLastObject];
                        //                            //changed
                        //                            NSMutableArray *cartItemSkus = [self getCartItemsSkuIds:cartItem];
                        //                            BOOL offerComboStatus = FALSE;
                        //                            NSMutableArray *tempArr = [NSMutableArray new];
                        //                            for (int i = 0; i < [offerSkuIds count]; i++) {
                        //                                if([cartItemSkus containsObject:[offerSkuIds objectAtIndex:i]]){
                        //                                    [tempArr addObject:[offerSkuIds objectAtIndex:i]];
                        //                                }
                        //                            }
                        //                            if ([tempArr count] == [offerSkuIds count]) {
                        //                                offerComboStatus = TRUE;
                        //                            }
                        //                            if (offerComboStatus) {
                        //                                int offerQty = 0;
                        //                                float offerItemPrice = 0.0f;
                        //                                float comboOfferPrice = 0.0f;
                        //                                for (NSString *str in offerSkuIds) {
                        //                                    for (int c=0; c<[cartItem count]; c++) {
                        //                                        if ([[[[cartItem objectAtIndex:c] componentsSeparatedByString:@"#"] objectAtIndex:0] isEqualToString:str]) {
                        //                                            offerQty += [[[[cartItem objectAtIndex:c] componentsSeparatedByString:@"#"] objectAtIndex:5] intValue];
                        //                                            offerItemPrice += ([[[[cartItem objectAtIndex:c] componentsSeparatedByString:@"#"] objectAtIndex:4] floatValue] * [[[[cartItem objectAtIndex:c] componentsSeparatedByString:@"#"] objectAtIndex:5] intValue]);
                        //                                        }
                        //                                    }
                        //                                }
                        //                                NSArray *offerRanges = [offerDetailDic valueForKey:@"offerRangesList"];
                        //                                for (NSDictionary *rangeDic in offerRanges) {
                        //                                    if ([[[rangeDic valueForKey:@"rangeMode"] lowercaseString] isEqualToString:@"promotion"]) {
                        //                                        if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"fixed_rate"] || [[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"flat_rate"]) {
                        //                                            if ([[rangeDic valueForKey:@"rewardValue"] floatValue] < offerItemPrice) {
                        //                                                comboOfferPrice = offerItemPrice - [[rangeDic valueForKey:@"rewardValue"] floatValue];
                        //                                            }
                        //                                        }
                        //                                        else if ([[[rangeDic valueForKey:@"rewardType"] lowercaseString] isEqualToString:@"percentage"]){
                        //                                            comboOfferPrice = (offerItemPrice/100)*[[rangeDic valueForKey:@"rewardValue"] floatValue];
                        //                                        }
                        //                                    }
                        //                                }
                        //                                if ([offerDetailDic valueForKey:@"isOfferCombo"] == nil && [offerDetailDic valueForKey:@"isLowerItemPrice"] == nil) {
                        //                                    NSArray *sellSkus = [[offerDetailDic valueForKey:@"sellSkuids"] componentsSeparatedByString:@","];
                        //                                    NSMutableArray *eachOfferSkuIds = [NSMutableArray arrayWithArray:sellSkus];
                        //                                    [eachOfferSkuIds removeLastObject];
                        //                                    BOOL offerAppliedStatus = FALSE;
                        //                                    for (NSString *skuStr in eachOfferSkuIds) {
                        //                                        if ([offerSkuIds containsObject:skuStr]) {
                        //                                            offerAppliedStatus = TRUE;
                        //                                        }
                        //                                    }
                        //                                    if (offerAppliedStatus) {
                        //                                        NSArray *arr = [offerDetailDic valueForKey:@"offerRangesList"];
                        //                                        NSDictionary *offerDetails = [arr objectAtIndex:0];
                        //                                        if ([[offerDetailDic valueForKey:@"rewardType"] isEqualToString:@"fixed_rate"]) {
                        //                                            float skuPrice = 0.0f;
                        //                                            for (NSString *str in eachOfferSkuIds) {
                        //                                                for (int c=0; c<[cartItem count]; c++) {
                        //                                                    if ([[[[cartItem objectAtIndex:c] componentsSeparatedByString:@"#"] objectAtIndex:0] isEqualToString:str]) {
                        //                                                        skuPrice += ([[[[cartItem objectAtIndex:c] componentsSeparatedByString:@"#"] objectAtIndex:4] floatValue] * [[[[cartItem objectAtIndex:c] componentsSeparatedByString:@"#"] objectAtIndex:5] intValue]);
                        //                                                    }
                        //                                                }
                        //                                            }
                        //                                            if ((skuPrice - [[offerDetails valueForKey:@"rewardValue"] floatValue]) > comboOfferPrice) {
                        //                                                [offerDic removeObjectForKey:skuStr];
                        //
                        //                                            }
                        //                                            else {
                        //                                                return;
                        //                                            }
                        //                                        }
                        //                                        else {
                        //                                            if ([[offerDetails valueForKey:@"rewardValue"] floatValue] > comboOfferPrice) {
                        //                                                [offerDic removeObjectForKey:skuStr];
                        //                                            }
                        //                                            else {
                        //                                                return;
                        //                                            }
                        //                                        }
                        //
                        //                                    }
                        //                                }
                        //                            }
                        //                        }
                    }
                }
            }
            
        }
    }
    
}

#pragma -mark alertview delegates

/**
 * @description  it wi....
 * @date
 * @method       alertView:--  clickedButtonAtIndex:--
 * @author
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 23/08/2017....
 * @reason       added comments and exception handling and change the defaults as local varible  && some more change are done before itself....
 *
 * @verified By
 * @verified On
 *
 */

-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    
    
    
    if ([alertView.message isEqualToString:@"No Product or Failed to scan"]) {
        if (barcodeBtn.tag == 1) {
            // [self barcodeScanner:barcodeBtn];
        }
    }
    if ([alertView.title isEqualToString:@"Confirm"] && alertView!=saveAlert) {
        if (buttonIndex == 0) {
            // [self barcodeScanner:barcodeBtn];
        }
        else{
            alertView.hidden = YES;
        }
    }
    
    if (alertView == signature) {
        
        if (buttonIndex == 0) {
            
            [HUD setHidden:YES];
            
            
            [cardPayment setHidden:YES];
            
            [self continuePay1];
            
        }
    }
    
    
    else if (alertView == saveAlert) {
        
        if (buttonIndex == 0) {
            
            
            emailtext = [[UITextField alloc] init];
            phnotext = [[UITextField alloc]init];
            nametext = [[UITextField alloc]init];
            
            NSString *paidAmt = @"0.00";
            finalBillDue = [netPayLblVal.text copy];
            // totalTxt.text = [NSString stringWithFormat:@"%@",paidAmt];
            payTxt2 = [[UITextField alloc] init];
            payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
            
            segment_index = 3;
            [self continuePay1];
            // }
        }
        else {
            
            //commented by Srinivasulu on 23/08/2017...
            //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
            //    defaults = [NSUserDefaults standardUserDefaults];
            
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            
            //upto here on 23/08/2017....
            
            defaults = [NSUserDefaults standardUserDefaults];
            [defaults removeObjectForKey:@"cartItems"];
            [defaults synchronize];
            
            [alertView dismissWithClickedButtonIndex:0 animated:YES];
            [self.navigationController popViewControllerAnimated:NO];
        }
        
    }
    else if (alertView == cofirmAlert) {
        
        
        
        if (buttonIndex == 0) {
            
            //changed by Srinivasulu on 21/04/2017....
            
            if(([deliveryType caseInsensitiveCompare:@"DD"] == NSOrderedSame) || ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"])){
                
                if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"])){
                    finalBillDue = [NSString stringWithFormat:@"%@",[netPayLblVal.text copy]];
                    
                    payTxt2.text = @"0.00";
                    
                }
                
                //                [self quickPayCall];
                [self addPaymentViewFor:@"CASH"];
            }
            else{
                
                
                //added by Srinivasulu  on 24/08/2017....
                
                NSString * paidAmt = [netPayLblVal.text copy];
                
                payTxt2 = [[UITextField alloc] init];
                payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
                
                if(paidVal != nil)
                    paidVal.text = payTxt2.text;
                
                //upto here on 24/08/2017.....
                
                
                //added by  Srinivasulu on 10/08/2017....
                
                [self addPaymentViewFor:@"CASH"];
                
                //commented by Srinivasulu on 10/08/2017....
                
                //                [UIView transitionFromView:denomination
                //                                    toView:paymentView
                //                                  duration:0.6
                //                                   options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
                //                                completion:nil];
                //
                //
                //                if ([denomination subviews]){
                //                    for (UIView *subview in [denomination subviews]) {
                //                        [subview removeFromSuperview];
                //                    }
                //                }
                //
                //                // Enable the backgroud views ..
                //                [self setSiblings:denominationView enabled:TRUE];
                //                [segmentedControl setUserInteractionEnabled:YES];
                //
                //                denominationView.hidden = YES;
                //
                //
                //                emailtext = [[UITextField alloc] init];
                //                phnotext = [[UITextField alloc]init];
                //                nametext = [[UITextField alloc]init];
                //
                //                NSString *paidAmt = [netPayLblVal.text copy];
                //                finalBillDue = @"0.00";
                //                // totalTxt.text = [NSString stringWithFormat:@"%@",paidAmt];
                //                payTxt2 = [[UITextField alloc] init];
                //                payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
                //
                //                [self continuePay1];
                
                //upto here on 10/08/2017....
                
                // }
                
            }
            
            
            
            //commented by Srinivasulu on 21/04/2017....
            
            
            //            if ([denomination subviews]){
            //                for (UIView *subview in [denomination subviews]) {
            //                    [subview removeFromSuperview];
            //                }
            //            }
            //
            //            // Enable the backgroud views ..
            //            [self setSiblings:denominationView enabled:TRUE];
            //            [segmentedControl setUserInteractionEnabled:YES];
            //
            //            denominationView.hidden = YES;
            //
            //
            //            emailtext = [[UITextField alloc] init];
            //            phnotext = [[UITextField alloc]init];
            //            nametext = [[UITextField alloc]init];
            //
            //            NSString *paidAmt = [netPayLblVal.text copy];
            //            finalBillDue = @"0.00";
            //            // totalTxt.text = [NSString stringWithFormat:@"%@",paidAmt];
            //            payTxt2 = [[UITextField alloc] init];
            //            payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
            //            [self continuePay1];
            //            // }
            
            
            //upto here on 21/04/2017....
        }
        else {
            [alertView dismissWithClickedButtonIndex:0 animated:YES];
        }
        
    }
    else if (alertView == returnCofirmAlert){
        if (buttonIndex == 0) {
            
            //Changes done by Srinivasulu on 17/05/2018....
            //reaons -- Sir side remove animations. Commented and written the code....
            
            //            [UIView transitionFromView:returnDenominationView
            //                                toView:paymentView
            //                              duration:0.6
            //                               options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
            //                            completion:nil];
            
            returnDenominationView.hidden = YES;
            paymentView.hidden = NO;
            //upto here on 17/05/2018....
            
            
            [self addPaymentViewFor:@"CASH"];
        }
        else {
            [alertView dismissWithClickedButtonIndex:0 animated:YES];
        }
    }
    
}
-(void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex {
    if (alertView == offlineMode) {
        
        if (buttonIndex == 0) {
            
            isOfflineService = YES;
            [HUD setHidden:NO];
            
            NSUserDefaults   *defaults_ = [[NSUserDefaults alloc]init];
            finalLicencesDetails = [defaults_ valueForKey:@"licence"];
            presentLocation = [[defaults_ valueForKey:@"location"] copy];
            counterName = [defaults_ valueForKey:@"counterName"];
            firstName = [defaults_ valueForKey:@"firstName"];
            
            BOOL status = FALSE;
            OmniRetailerViewController *view = [[OmniRetailerViewController alloc]init];
            status =  [view checkDatabaseStatus];
            [HUD setHidden:YES];
            
            if (status) {
                
                isOfflineService = TRUE;
                //                self.titleLabel.text = @"New Billing-Offline";
                self.titleLabel.text = @"New Billing";
                
            }
            else {
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"You need to first login with the internet connectivity" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            
        }
        else {
            //exit(0);
            [alertView dismissWithClickedButtonIndex:0 animated:YES];
        }
    }
    
    else if ([alertView.title isEqualToString:@"Bill Saved"]){
        
        if (buttonIndex == 0) {
            
            //            [self eraseEntireDetails];
            
            //            if (backAction) {
            billIDValue = @"";
            OmniHomePage *home = [[OmniHomePage alloc]init];
            [self.navigationController pushViewController:home animated:NO];
            // [self.navigationController popViewControllerAnimated:NO];
            
            //            }
        }
        
    }
    
    //added  by Srinivasulu on 20/04/2017....
    else if(alertView == offlineModeAlert){
        
        [alertView dismissWithClickedButtonIndex:buttonIndex animated:YES];
        
        [self changeOperationMode:buttonIndex];
        //[super alertView:alertView didDismissWithButtonIndex:buttonIndex_];
    }
    
    else if (alertView == uploadConfirmationAlert)
    {
        
        
        [alertView dismissWithClickedButtonIndex:0 animated:YES];
        
        [self syncOfflinebillsToOnline:buttonIndex];
        
    }
    
    //added by Srinivasulu on 18/07/2017....
    
    else if (alertView == cancelBillAlertView){
        
        [alertView dismissWithClickedButtonIndex:buttonIndex animated:YES];
        
        if (buttonIndex == 0) {
            
            [self eraseEntireDetails];
        }
    }
    
    //upto here on 18/07/2017....
    
    //upto here on 28/04/2017...
    
}
-(void)willPresentAlertView:(UIAlertView *)alertView {
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        alertView.frame = CGRectMake(0, 0, 250, 400);
        
    }
    
}
-(void)goToHome {
    
    [self backAction];
    //    OmniHomePage *home = [[OmniHomePage alloc]init];
    //    [self.navigationController pushViewController:home animated:YES];
    
}
-(BOOL)shouldAutorotate {
    if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
        
        return FALSE;
    }
    return FALSE;
}
-(NSUInteger)supportedInterfaceOrientations {
    
    return UIInterfaceOrientationMaskLandscape;
}
-(void)closePriceView:(UIButton *)sender {
    transparentView.hidden = YES;
}



-(void)selectValue:(UIButton *)sender {
    
    [couponValue resignFirstResponder];
    [couponId resignFirstResponder];
    [couponQty resignFirstResponder];
    AudioServicesPlaySystemSound (soundFileObject);
    if (sender.tag == 0) {
        
        [couponView addSubview:valueTable];
        [couponView bringSubviewToFront:valueTable];
        [valueTable setHidden:FALSE];
        [valueTable reloadData];
        sender.tag = 1;
    }
    else {
        [valueTable setHidden:YES];
        sender.tag = 0;
    }
    
    
}
-(void)delCoupon:(UIButton *)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    @try {
        
        [couponArr removeObjectAtIndex:sender.tag];
        [paymentTransactionArray removeObjectAtIndex:sender.tag];
        [couponValArr removeAllObjects];
        [couponTotalArr removeAllObjects];
        [couponIdArr removeAllObjects];
        [couponDeatails reloadData];
        
        if (couponArr.count == 0) {
            totalCoupValue.text = @"0.00";
            billDueLbl.text = netPayLblVal.text;
        }
        else {
            float total_val = 0.00f;
            for (int i=0; i<couponArr.count; i++) {
                
                total_val = total_val + ([couponArr[i] componentsSeparatedByString:@"#"][3].intValue*[couponArr[i]componentsSeparatedByString:@"#"][2].floatValue);
            }
            totalCoupValue.text = [NSString stringWithFormat:@"%.2f",total_val];
            // totalBillLbl.text = [NSString stringWithFormat:@"%.2f",[totalBillValue.text floatValue]];
            billDueLbl.text = [NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue-(totalCoupValue.text).floatValue];
            
            if ((billDueLbl.text).intValue < 0) {
                
                billDueLbl.text = @"0.00";
            }
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
    }
    
}
-(BOOL)checkCouponId:(NSString *)coupon_Id {
    BOOL couponStatus = false;
    
    for (int i=0; i<couponIdArr.count; i++) {
        
        if ([couponIdArr[i] isEqualToString:coupon_Id]) {
            
            //            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Coupon already used" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            //            [alert show];
            //            break;
            couponStatus = TRUE;
            break;
        }
        else{
            //couponStatus = FALSE;
        }
        
    }
    
    return couponStatus;
}

-(void)networkSwitch {
    CheckWifi *wifi = [[CheckWifi alloc]init];
    BOOL status = [wifi checkWifi];
    if (status) {
        
        isOfflineService = FALSE;
        //        self.titleLabel.text = @"New Billing-Online";
        self.titleLabel.text = @"New Billing";
        
    }
    else {
        
        if (!isOfflineService) {
            
            offlineMode = [[UIAlertView alloc] initWithTitle:@"Do you want to continue with the offline mode" message:nil delegate:self cancelButtonTitle:@"Yes" otherButtonTitles:@"No",nil];
            [offlineMode show];
        }
        
        
    }
}


-(BOOL)validateApprovalCode:(NSString*)approvalCode {
    
    if (approvalCode.length==0) {
        
        return NO;
    }
    else {
        return YES;
    }
    
}

-(void)populateHeaderView {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    
    [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(updateTime) userInfo:nil repeats:YES];
    
    headerView = [[UIView alloc] init];
    
    UIImageView * user = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"admin.png"]];
    UILabel * userIdLbl;
    UILabel * userLbl;
    UILabel * userLocationLbl;
    UILabel * counterLbl;
    UILabel * counterLblVal;
    UILabel * date;
    UILabel * billCountLbl;
    UILabel * lastBillTotalLbl;
    UILabel * powaStatusLbl;
    UILabel * totalItemsLbl;
    
    userIdLbl = [[UILabel alloc] init];
    userIdLbl.textColor = [UIColor blackColor];
    
    userLbl = [[UILabel alloc] init];
    userLbl.textColor = [UIColor blackColor];
    
    userLocationLbl = [[UILabel alloc] init];
    userLocationLbl.textColor = [UIColor blackColor];
    
    counterLbl = [[UILabel alloc] init];
    counterLbl.textColor = [UIColor blackColor];
    
    counterLblVal = [[UILabel alloc] init];
    counterLblVal.textColor = [UIColor blackColor];
    
    date = [[UILabel alloc] init];
    date.textColor = [UIColor blackColor];
    
    dateVal = [[UILabel alloc] init];
    dateVal.textColor = [UIColor blackColor];
    
    billCountLbl = [[UILabel alloc] init];
    billCountLbl.textColor = [UIColor blackColor];
    
    billCountLblVal = [[UILabel alloc] init];
    billCountLblVal.textColor = [UIColor blackColor];
    
    lastBillTotalLbl = [[UILabel alloc] init];
    lastBillTotalLbl.textColor = [UIColor blackColor];
    
    lastBillTotalLblVal = [[UILabel alloc] init];
    lastBillTotalLblVal.textColor = [UIColor blackColor];
    
    powaStatusLbl = [[UILabel alloc] init];
    powaStatusLbl.textColor = [UIColor blackColor];
    powaStatusLbl.lineBreakMode = NSLineBreakByWordWrapping;
    powaStatusLbl.numberOfLines = 2;
    
    powaStatusLblVal = [[UILabel alloc] init];
    powaStatusLblVal.textColor = [UIColor blackColor];
    
    totalItemsLbl = [[UILabel alloc] init];
    totalItemsLbl.textColor = [UIColor blackColor];
    totalItemsLbl.lineBreakMode = NSLineBreakByWordWrapping;
    totalItemsLbl.numberOfLines = 2;
    
    totalItemsLblVal = [[UILabel alloc] init];
    totalItemsLblVal.textColor = [UIColor blackColor];
    
    @try{
        counterLbl.text = NSLocalizedString(@"counter_id", nil);
        date.text = NSLocalizedString(@"date", nil);
        billCountLbl.text = NSLocalizedString(@"bill_count", nil);
        lastBillTotalLbl.text = NSLocalizedString(@"last_bill_total", nil);
        powaStatusLbl.text = NSLocalizedString(@"scanner_status", nil);
        totalItemsLbl.text = NSLocalizedString(@"total_Items_bill", nil);
        
        userIdLbl.text = cashierId;
        userLbl.text = firstName;
        userLocationLbl.text = presentLocation;
        counterLblVal.text = counterName;
        dateVal.text = currentdate;
        
        totalItemsLblVal.text = @"0";
        
        if (scanner) {
            powaStatusLblVal.textColor = [UIColor colorWithRed:0.0/255.0 green:102.0/255.0 blue:0.0/255.0 alpha:1.0];
            powaStatusLblVal.text = [NSString stringWithFormat:@"Connected"];
            
        }
        else {
            powaStatusLblVal.textColor = [UIColor redColor];
            powaStatusLblVal.text = [NSString stringWithFormat:@"Disconnected"];
        }
        
        
        
        //commented by Srinivasulu on 06/07/2017....
        
        //commented by Srinivasulu on 23/08/2017...
        //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
        //    defaults = [NSUserDefaults standardUserDefaults];
        
        NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
        
        //upto here on 23/08/2017....
        
        if ([defaults valueForKey:LAST_BILL_COUNT] != nil)
            billCountLblVal.text = [defaults valueForKey:LAST_BILL_COUNT];
        else
            billCountLblVal.text = @"0000";
        
        //upto here on 06/07/2017....
        
        if ([defaults valueForKey:LAST_BILL_TOTAL] == nil) {
            
            lastBillTotalLblVal.text = @"0.00";
        }
        else {
            lastBillTotalLblVal.text = [NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_BILL_TOTAL]];
        }
    }
    @catch(NSException * exp){
        
    }
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            
            headerView.frame = CGRectMake(650, 210, 370, 200);
            user.frame = CGRectMake(10, 10, 100, 100);
            userIdLbl.frame = CGRectMake( user.frame.origin.x, user.frame.origin.y +  user.frame.size.height, user.frame.size.width, 30);
            userLbl.frame = CGRectMake( userIdLbl.frame.origin.x, userIdLbl.frame.origin.y +  userIdLbl.frame.size.height, userIdLbl.frame.size.width, userIdLbl.frame.size.height);
            userLocationLbl.frame = CGRectMake( userIdLbl.frame.origin.x, userLbl.frame.origin.y +  userLbl.frame.size.height, userIdLbl.frame.size.width, userIdLbl.frame.size.height);
            
            userIdLbl.font = [UIFont systemFontOfSize:14.0];
            userIdLbl.textAlignment = NSTextAlignmentLeft;
            userLbl.font = [UIFont systemFontOfSize:14.0];
            userLbl.textAlignment = NSTextAlignmentLeft;
            userLocationLbl.font = [UIFont systemFontOfSize:14.0];
            userLocationLbl.textAlignment = NSTextAlignmentLeft;
            
            counterLbl.frame = CGRectMake(110, 10, 150, 30);
            counterLbl.font = [UIFont systemFontOfSize:18.0];
            counterLblVal.frame = CGRectMake(240, 10, 150, 30);
            counterLblVal.font = [UIFont systemFontOfSize:18.0];
            
            date.frame = CGRectMake(110, 40, 200, 30);
            date.font = [UIFont systemFontOfSize:18.0];
            dateVal.frame = CGRectMake(240, 40, 200, 30);
            dateVal.font = [UIFont systemFontOfSize:15.0];
            billCountLbl.frame = CGRectMake(110, 70, 200, 30);
            billCountLbl.font = [UIFont systemFontOfSize:18.0];
            billCountLblVal.frame = CGRectMake(240, 70, 200, 30);
            billCountLblVal.font = [UIFont systemFontOfSize:18.0];
            
            lastBillTotalLbl.frame = CGRectMake(110, 100, 200, 30);
            lastBillTotalLbl.font = [UIFont systemFontOfSize:18.0];
            lastBillTotalLblVal.frame = CGRectMake(240, 100, 200, 30);
            lastBillTotalLblVal.font = [UIFont systemFontOfSize:18.0];
            
            powaStatusLbl.frame = CGRectMake(110, 130, 200, 30);
            powaStatusLbl.font = [UIFont systemFontOfSize:18.0];
            powaStatusLblVal.frame = CGRectMake(240, 130, 200, 30);
            powaStatusLblVal.font = [UIFont systemFontOfSize:18.0];
            
            totalItemsLbl.frame = CGRectMake(110, 160, 200, 30);
            totalItemsLbl.font = [UIFont systemFontOfSize:18.0];
            totalItemsLblVal.frame = CGRectMake(240, 160, 200, 30);
            totalItemsLblVal.font = [UIFont systemFontOfSize:18.0];
            
        }
        else {
            
            headerView.frame = CGRectMake(550, 100, 350, 300);
            user.frame = CGRectMake(0, 0, 30, 30);
            userLbl.frame = CGRectMake(35, 0, 200, 30);
            userLbl.font = [UIFont systemFontOfSize:20.0];
            counterLbl.frame = CGRectMake(0, 30, 200, 30);
            counterLbl.font = [UIFont systemFontOfSize:20.0];
            counterLblVal.frame = CGRectMake(150, 30, 200, 30);
            counterLblVal.font = [UIFont systemFontOfSize:20.0];
            
            date.frame = CGRectMake(0, 60, 200, 30);
            date.font = [UIFont systemFontOfSize:20.0];
            dateVal.frame = CGRectMake(150, 60, 200, 30);
            dateVal.font = [UIFont systemFontOfSize:20.0];
            billCountLbl.frame = CGRectMake(0, 90, 200, 30);
            billCountLbl.font = [UIFont systemFontOfSize:20.0];
            billCountLblVal.frame = CGRectMake(150, 90, 200, 30);
            billCountLblVal.font = [UIFont systemFontOfSize:20.0];
            
            lastBillTotalLbl.frame = CGRectMake(0, 120, 200, 30);
            lastBillTotalLbl.font = [UIFont systemFontOfSize:20.0];
            lastBillTotalLblVal.frame = CGRectMake(150, 120, 200, 30);
            lastBillTotalLblVal.font = [UIFont systemFontOfSize:20.0];
            
            powaStatusLbl.frame = CGRectMake(0, 120, 200, 30);
            powaStatusLbl.font = [UIFont systemFontOfSize:20.0];
            powaStatusLblVal.frame = CGRectMake(150, 120, 200, 30);
            powaStatusLblVal.font = [UIFont systemFontOfSize:20.0];
            
            totalItemsLbl.frame = CGRectMake(0, 120, 200, 30);
            totalItemsLbl.font = [UIFont systemFontOfSize:20.0];
            totalItemsLblVal.frame = CGRectMake(150, 120, 200, 30);
            totalItemsLblVal.font = [UIFont systemFontOfSize:20.0];
        }
    }
    else {
        
        headerView.frame = CGRectMake(550, 100, 350, 300);
        user.frame = CGRectMake(0, 0, 30, 30);
        userLbl.frame = CGRectMake(35, 0, 200, 30);
        userLbl.font = [UIFont systemFontOfSize:20.0];
        counterLbl.frame = CGRectMake(0, 30, 200, 30);
        counterLbl.font = [UIFont systemFontOfSize:20.0];
        counterLblVal.frame = CGRectMake(150, 30, 200, 30);
        counterLblVal.font = [UIFont systemFontOfSize:20.0];
        
        date.frame = CGRectMake(0, 60, 200, 30);
        date.font = [UIFont systemFontOfSize:20.0];
        dateVal.frame = CGRectMake(150, 60, 200, 30);
        dateVal.font = [UIFont systemFontOfSize:20.0];
        billCountLbl.frame = CGRectMake(0, 90, 200, 30);
        billCountLbl.font = [UIFont systemFontOfSize:20.0];
        billCountLblVal.frame = CGRectMake(150, 90, 200, 30);
        billCountLblVal.font = [UIFont systemFontOfSize:20.0];
        
        lastBillTotalLbl.frame = CGRectMake(0, 120, 200, 30);
        lastBillTotalLbl.font = [UIFont systemFontOfSize:20.0];
        lastBillTotalLblVal.frame = CGRectMake(150, 120, 200, 30);
        lastBillTotalLblVal.font = [UIFont systemFontOfSize:20.0];
        
        powaStatusLbl.frame = CGRectMake(0, 120, 200, 30);
        powaStatusLbl.font = [UIFont systemFontOfSize:20.0];
        powaStatusLblVal.frame = CGRectMake(150, 120, 200, 30);
        powaStatusLblVal.font = [UIFont systemFontOfSize:20.0];
    }
    [headerView addSubview:user];
    [headerView addSubview:userIdLbl];
    [headerView addSubview:userLbl];
    [headerView addSubview:userLocationLbl];
    [headerView addSubview:counterLbl];
    [headerView addSubview:counterLblVal];
    [headerView addSubview:date];
    [headerView addSubview:dateVal];
    [headerView addSubview:billCountLbl];
    [headerView addSubview:billCountLblVal];
    [headerView addSubview:lastBillTotalLbl];
    [headerView addSubview:lastBillTotalLblVal];
    [headerView addSubview:powaStatusLbl];
    [headerView addSubview:powaStatusLblVal];
    [headerView addSubview:totalItemsLbl];
    [headerView addSubview:totalItemsLblVal];
    [self.view addSubview:headerView];
    
    
    UIGraphicsBeginImageContext(headerView.frame.size);
    [[UIImage imageNamed:@"Button.png"] drawInRect:headerView.bounds];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    headerView.backgroundColor = [UIColor colorWithPatternImage:image];
    
    [self updateBillCountAndTotal];
}

-(void)updateTime {
    
    NSDate *today = [NSDate date];
    NSDateFormatter *f = [[NSDateFormatter alloc] init];
    f.dateFormat = @"dd/MM/yy HH:mm:ss";
    NSString* currentdate = [f stringFromDate:today];
    
    dateVal.text = currentdate;
}

-(void)updateHeaderValues {
    
    //commented by Srinivasulu on 23/08/2017...
    //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
    //    defaults = [NSUserDefaults standardUserDefaults];
    
    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
    
    //upto here on 23/08/2017....
    
    @try {
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy";
        NSString* currentdate = [f stringFromDate:today];
        
        if (![[defaults valueForKey:@"currentDate"] isEqualToString:currentdate]) {
            
            //commented by Srinivasulu on 06/07/2017....
            
            //        [defaults setValue:@"1" forKey:LAST_BILL_COUNT];
            
            //upto here on 06/07/2017....
            
            [defaults setValue:currentdate forKey:@"currentDate"];
            
            
        }
        else {
            
            if ([defaults integerForKey:LAST_BILL_COUNT] == 0) {
                
                //commented by Srinivasulu on 06/07/2017....
                
                //            [defaults setValue:@"1" forKey:LAST_BILL_COUNT];
                
                //upto here on 06/07/2017....
                
                [defaults setValue:currentdate forKey:@"currentDate"];
                
            }
            else {
                
                //commented by Srinivasulu on 06/07/2017....
                
                //            int count = [[defaults valueForKey:LAST_BILL_COUNT] intValue];
                //            [defaults setValue:[NSString stringWithFormat:@"%d",count+1] forKey:LAST_BILL_COUNT];
                
                //upto here on 06/07/2017....
                
                
                
                [defaults setValue:currentdate forKey:@"currentDate"];
            }
        }
        
        //added by Srinivasulu on 06/07/2017.....
        
        if(originalBillId == nil){
            
            NSString * billCountStr = @"0000";
            if ([defaults valueForKey:LAST_BILL_COUNT] != nil) {
                billCountStr = [NSString stringWithFormat:@"%i", ([[defaults valueForKey:LAST_BILL_COUNT] intValue] + 1)];
                
                
                if( [[defaults valueForKey:LAST_BILL_COUNT] integerValue] < 9)
                    billCountStr = [NSString stringWithFormat:@"%@%i", @"000", ([[defaults valueForKey:LAST_BILL_COUNT] intValue] + 1)];
                
                else if([[defaults valueForKey:LAST_BILL_COUNT] integerValue] < 99)
                    billCountStr = [NSString stringWithFormat:@"%@%i", @"00", ([[defaults valueForKey:LAST_BILL_COUNT] intValue] + 1)];
                
                else if([[defaults valueForKey:LAST_BILL_COUNT] integerValue] < 999)
                    billCountStr = [NSString stringWithFormat:@"%@%i", @"0", ([[defaults valueForKey:LAST_BILL_COUNT] intValue] + 1)];
                
                
            }
            
            //added by Srinivasulu on 22/09/2017....
            //reason in defaults it is not saving....
            
            else{
                
                
                if((billCountLblVal.text).length <= 4){
                    
                    if( (billCountLblVal.text).integerValue < 9)
                        billCountStr = [NSString stringWithFormat:@"%@%i", @"000", ((billCountLblVal.text).intValue + 1)];
                    
                    else if((billCountLblVal.text).integerValue < 99)
                        billCountStr = [NSString stringWithFormat:@"%@%i", @"00", ((billCountLblVal.text).intValue + 1)];
                    
                    else if((billCountLblVal.text).integerValue < 999)
                        billCountStr = [NSString stringWithFormat:@"%@%i", @"0", ((billCountLblVal.text).intValue + 1)];
                    
                }
                
            }
            
            //upto here on 22/09/2017....
            
            
            if(defaults != nil)
                [defaults setValue:billCountStr forKey:LAST_BILL_COUNT];
            
        }
        
        
        //upot here on 06/07/2017....
        
        
        if (eraseButton.tag == 0)
            [defaults setValue:totalTxt.text forKey:LAST_BILL_TOTAL];
        
        //added by Srinivasulu on 27/04/2018.... condition..
        if (eraseButton.tag == 1){
            [defaults setValue:@"" forKey:SCAN_START_TIME];
            [defaults setValue:@"" forKey:SCAN_END_TIME];
            [defaults synchronize];
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}


/**
 * @description  here we are populating the bill no's and cost of previous bill no....
 * @date
 * @method       updateBillCountAndTotal
 * @author
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 07/07/2017....
 * @reason      added the comments.... this method needs to be removed reason text can be append ""at the time of the calling itself"".....
 *
 */
-(void)updateBillCountAndTotal {
    
    //commented by Srinivasulu on 23/08/2017...
    //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
    //    defaults = [NSUserDefaults standardUserDefaults];
    
    NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
    
    //upto here on 23/08/2017....
    
    @try {
        NSDate *today = [NSDate date];
        NSDateFormatter *f = [[NSDateFormatter alloc] init];
        f.dateFormat = @"dd/MM/yyyy";
        NSString* currentdate = [f stringFromDate:today];
        
        if (![[defaults valueForKey:@"currentDate"] isEqualToString:currentdate]) {
            
            //commented by Srinivasulu on 07/07/2017....
            //            billCountLblVal.text = @"0";
            
            //upto here on07/07/2017....
            
            
            lastBillTotalLblVal.text = @"0.00";
            
        }
        //added by Srinivasulu on 06/07/2017....
        
        //commented by Srinivasulu on 18/07/2017....
        
        if ([defaults valueForKey:LAST_BILL_COUNT] != nil)
            billCountLblVal.text = [defaults valueForKey:LAST_BILL_COUNT];
        else
            billCountLblVal.text = @"0000";
        
        //upto here on 18/07/2017....
        
        if (([defaults valueForKey:LAST_BILL_TOTAL] == nil ) || (!(billCountLblVal.text).integerValue) ) {
            
            lastBillTotalLblVal.text = @"0.00";
            
        }
        else {
            lastBillTotalLblVal.text = [NSString stringWithFormat:@"%@",[defaults valueForKey:LAST_BILL_TOTAL]];
        }
        
        //upto here on 06/07/2017....
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}


-(void)changeSwitchAction:(id)sender {
    
    if (isSearch.on) {
        
        searchBarcodeBtn.hidden = YES;
        suggestion.text = @"Suggestion ON";
        
    }
    else {
        searchBarcodeBtn.hidden = NO;
        suggestion.text = @"Suggestion OFF";
        
    }
}
-(void)searchBarcode:(UIButton*)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    //[filteredSkuArrayList removeAllObjects];   // First clear the filtered array.
    filteredSkuArrayList = [[NSMutableArray alloc]init];
    filteredPriceArr = [[NSMutableArray alloc]init];
    skuArrayList = [[NSMutableArray alloc]init];
    
    // [skuArrayList removeAllObjects];
    startIndexint_ = -1;
    [BillField resignFirstResponder];
    
    
    
    @try {
        
        if ((BillField.text).length>0) {
            
            
            if (!isOfflineService) {
                searchString = [BillField.text copy];
                [self callSkuIdService:BillField.text startIndex:[NSString stringWithFormat:@"%d",startIndexint_]];
                
            }
            else {
                searchString = [BillField.text copy];
                BOOL status = FALSE;
                
                HUD.labelText = @"Please wait...";
                [HUD setHidden:NO];
                //            OmniRetailerViewController *omni = [[OmniRetailerViewController alloc] init];
                //            status =  [omni checkDatabaseStatus];
                status = true;
                if (status) {
                    
                    
                    //changed by Srinivasulu on 04/10/2017....
                    //reason is -- In thread call's we should not right UIrelated code.... other wise in some case.... It will crashes....
                    
                    //                    [HUD showWhileExecuting:@selector(searchProducts) onTarget:self withObject:nil animated:NO];
                    [self searchProducts];
                    
                    //upto here on 04/10/2017....
                    
                    
                    
                    // [self performSelectorInBackground:@selector(searchProducts) withObject:nil];
                    
                    //                NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
                    //
                    //                filteredSkuArrayList = [[NSMutableArray alloc]init];
                    //                skuArrayList = [[NSMutableArray alloc]init];
                    //                filteredPriceArr = [[NSMutableArray alloc]init];
                    //                if ([tempSkuArrayList count]!=0) {
                    //                    [tempSkuArrayList removeAllObjects];
                    //                }
                    //
                    //                if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
                    //
                    //
                    //                    NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%%%@%%' or item_name LIKE '%%%@%%' or description LIKE '%%%@%%' or ean LIKE '%%%@%%' LIMIT 30",BillField.text,BillField.text,BillField.text,BillField.text];
                    //                    const char *sqlStatement = [query UTF8String];
                    //
                    //
                    //                    if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        //                        int count = sqlite3_column_count(selectStmt);
                    //                        while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    //
                    //                            NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                    //                            NSString  *name = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 12)];
                    //                            NSString  *description = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 10)];
                    //                            NSString  *price = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 8)];
                    //                            NSString  *ean = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 1)];
                    //
                    //                            NSMutableDictionary *searchResult = [[NSMutableDictionary alloc]init];
                    //
                    //                            [searchResult setObject:skuId forKey:@"skuID"];
                    //                            [searchResult setObject:description forKey:@"description"];
                    //                            [searchResult setObject:name forKey:@"name"];
                    //                            [searchResult setObject:price forKey:@"price"];
                    //                            [searchResult setObject:ean forKey:@"ean"];
                    //
                    //
                    //                            [tempSkuArrayList addObject:searchResult];
                    //
                    //
                    //                        }
                    //                        sqlite3_finalize(selectStmt);
                    //                    }
                    //                    else {
                    //                        NSLog(@"%s",sqlite3_errmsg(database)) ;
                    //                    }
                    //
                    //                    NSLog(@"%@",tempSkuArrayList);
                    //                }
                    //                sqlite3_close(database);
                    //                if ([tempSkuArrayList count]==0) {
                    //
                    //                    if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
                    //
                    //
                    //                        NSString *query = [NSString stringWithFormat:@"select * from sku_price_list where plu_code LIKE '%%%@%%' LIMIT 30",BillField.text];
                    //                        const char *sqlStatement = [query UTF8String];
                    //
                    //
                    //                        if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                            //                        int count = sqlite3_column_count(selectStmt);
                    //                            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    //
                    //                                NSString  *skuId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt,0)];
                    //                                NSString  *name = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 2)];
                    //                                NSString  *description = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 2)];
                    //                                NSString  *price = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt,4)];
                    //                                NSString  *ean = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 3)];
                    //
                    //                                NSMutableDictionary *searchResult = [[NSMutableDictionary alloc]init];
                    //
                    //                                [searchResult setObject:skuId forKey:@"skuID"];
                    //                                [searchResult setObject:description forKey:@"description"];
                    //                                [searchResult setObject:name forKey:@"name"];
                    //                                [searchResult setObject:price forKey:@"price"];
                    //                                [searchResult setObject:ean forKey:@"ean"];
                    //
                    //
                    //                                [tempSkuArrayList addObject:searchResult];
                    //
                    //
                    //                            }
                    //                            sqlite3_finalize(selectStmt);
                    //                        }
                    //                        else {
                    //                            NSLog(@"%s",sqlite3_errmsg(database)) ;
                    //                        }
                    //
                    //                        NSLog(@"%@",tempSkuArrayList);
                    //                    }
                    //                    sqlite3_close(database);
                    //
                    //                }
                    //                for (NSDictionary *product in tempSkuArrayList)
                    //                {
                    //                    NSComparisonResult result;
                    ////                    if ([[product objectForKey:@"productId"] length]!=0) {
                    ////
                    ////                        if (!([[product objectForKey:@"productId"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound))
                    ////                        {
                    ////                            result = [[product objectForKey:@"productId"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, [BillField.text length])];
                    ////                            if (result == NSOrderedSame)
                    ////                            {
                    ////                                if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
                    ////                                    [filteredSkuArrayList addObject:[product objectForKey:@"description"]];
                    ////                                    if (!isOfflineService) {
                    ////
                    ////                                        [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
                    ////
                    ////                                    }
                    ////                                    else {
                    ////                                        [filteredPriceArr addObject:[product objectForKey:@"price"] ];
                    ////
                    ////                                    }                                [skuArrayList addObject:product];
                    ////
                    ////                                }
                    ////                            }
                    ////                        }
                    ////                    }
                    //
                    ////                    if (!([[product objectForKey:@"description"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound)) {
                    ////                        if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
                    ////                            [filteredSkuArrayList addObject:[product objectForKey:@"description"]];
                    ////                            if (!isOfflineService) {
                    ////
                    ////                                [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
                    ////
                    ////                            }
                    ////                            else {
                    ////                                [filteredPriceArr addObject:[product objectForKey:@"price"] ];
                    ////
                    ////                            }
                    ////                            [skuArrayList addObject:product];
                    ////
                    ////                        }
                    ////
                    ////                    }
                    ////                    if (!([[product objectForKey:@"ean"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound)) {
                    ////                        if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
                    ////                            [filteredSkuArrayList addObject:[product objectForKey:@"description"]];
                    ////                            if (!isOfflineService) {
                    ////
                    ////                                [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
                    ////
                    ////                            }
                    ////                            else {
                    ////                                [filteredPriceArr addObject:[product objectForKey:@"price"] ];
                    ////
                    ////                            }
                    ////                            [skuArrayList addObject:product];
                    ////
                    ////                        }
                    ////
                    ////                    }
                    ////                    else {
                    //
                    //                        // [filteredSkuArrayList addObject:[product objectForKey:@"skuID"]];
                    //
                    //
                    //                        result = [[product objectForKey:@"skuID"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, [BillField.text length])];
                    //
                    ////                        if (result == NSOrderedSame)
                    ////                        {
                    //                            if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
                    //                                [filteredSkuArrayList addObject:[product objectForKey:@"description"]];
                    //                                [filteredPriceArr addObject:[product objectForKey:@"price"] ];
                    //                                [skuArrayList addObject:product];
                    //                            }
                    ////                        }
                    ////                    }
                    //
                    //
                    //                }
                    //                if ([filteredSkuArrayList count] > 0) {
                    //
                    //                    //changeed By Srinivasulu on 17/08/2016
                    //
                    //                    float cell_height = 45;
                    //                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                    //                        cell_height = 28;
                    //                    }
                    //
                    //                    float table_height = ([filteredSkuArrayList count] + 1) * cell_height;
                    //
                    //                    if(table_height > ( segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height))){
                    //                        table_height = segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height);
                    //
                    //                    }
                    //                    skListTable.frame =  CGRectMake(BillField.frame.origin.x, (BillField.frame.origin.y + BillField.frame.size.height), BillField.frame.size.width, table_height);
                    //
                    //
                    //                    //                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    //                    //                        skListTable.frame = CGRectMake(5, 200, 810,240);
                    //                    //                    }
                    //                    //                    else {
                    //                    //                        if (version >= 8.0) {
                    //                    //                            skListTable.frame = CGRectMake(40, 145, 350,180);
                    //                    //                        }
                    //                    //                        else{
                    //                    //                            skListTable.frame = CGRectMake(20, 75, 350,100);
                    //                    //                        }
                    //                    //                    }
                    //                    //
                    //                    //                    if ([filteredSkuArrayList count] > 5) {
                    //                    //                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    //                    //                            skListTable.frame = CGRectMake(15, 200, 560,450);
                    //                    //                        }
                    //                    //                        else {
                    //                    //                            if (version >= 8.0) {
                    //                    //                                skListTable.frame = CGRectMake(40, 145, 350,180);
                    //                    //                            }
                    //                    //                            else{
                    //                    //                                skListTable.frame = CGRectMake(20, 75, 350,130);
                    //                    //                            }
                    //                    //                        }
                    //                    //                    }
                    //
                    //
                    //                    //upto here
                    //
                    //                    skListTable.hidden = NO;
                    //                    [self.view bringSubviewToFront:skListTable];
                    //                    [skListTable reloadData];
                    //                }
                    //
                    //                else {
                    //
                    //                    skListTable.hidden = YES;
                    //                }
                    //
                    
                }
                else {
                    
                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"You need to first login with the internet connectivity" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                }
                
                // [HUD setHidden:YES];
            }
        }
        else {
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Enter your search string" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
        }
    }
    @catch (NSException *exception) {
        [HUD setHidden:YES];
        
        NSLog(@"%@",exception);
    }
    @finally{
        
        [HUD setHidden:YES];
    }
}



-(void)goToBottom
{
    @try {
        
        //added by Srinivasul on 23/10/2017....
        
        if(cartTotalItems.count)
        {
            //upto here on 23/10/2017.....
            cartTable.hidden = NO;
            NSIndexPath *scrollIndexPath = [NSIndexPath indexPathForRow:([cartTable numberOfRowsInSection:0] - 1) inSection:0];
            [cartTable scrollToRowAtIndexPath:scrollIndexPath atScrollPosition:UITableViewScrollPositionBottom animated:NO];
            
            //added by Srinivasul on 23/10/2017....
            
        }
        
        //upto here on 23/10/2017.....
        
    } @catch (NSException *exception) {
        
        [cartTable reloadData];
        
    } @finally {
        
    }
}

- (void)populateUnAppliedDealItemInfo {
    PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
    
    UIView *customerView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, cartTable.frame.size.width, 250)];
    customerView.opaque = NO;
    customerView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
    customerView.layer.borderColor = [UIColor lightGrayColor].CGColor;
    customerView.layer.borderWidth = 2.0f;
    [customerView setHidden:NO];
    
    UILabel *unAppliedDealMsg = [[UILabel alloc] init];
    unAppliedDealMsg.textColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    unAppliedDealMsg.font = [UIFont boldSystemFontOfSize:20.0];
    unAppliedDealMsg.text  = @"PLEASE ADD FREE ITEMS TO CART";
    unAppliedDealMsg.textAlignment = NSTextAlignmentCenter;
    
    UILabel *dealDescrition = [[UILabel alloc] init];
    dealDescrition.textColor = [UIColor blackColor];
    dealDescrition.font = [UIFont boldSystemFontOfSize:18.0];
    dealDescrition.textAlignment = NSTextAlignmentCenter;
    
    UILabel *unAppliedDealSkus = [[UILabel alloc] init];
    unAppliedDealSkus.textColor = [UIColor orangeColor];
    unAppliedDealSkus.font = [UIFont boldSystemFontOfSize:18.0];
    unAppliedDealSkus.textAlignment = NSTextAlignmentCenter;
    [unAppliedDealSkus sizeToFit];
    
    //    if (![[custInfo objectForKey:@"category"] isKindOfClass:[NSNull class]]&& [[custInfo objectForKey:@"category"] length] > 0) {
    //        custTypeVal.text  = [custInfo objectForKey:@"category"];
    //    }
    //    else {.
    //        custTypeVal.text  = @"--";
    //
    //    }
    
    
    //added by Srinivasulu on 18/08/2016
    
    freeItemsTbl = [[UITableView alloc] init];
    freeItemsTbl.dataSource = self;
    freeItemsTbl.delegate = self;
    freeItemsTbl.bounces = TRUE;
    freeItemsTbl.backgroundColor = [UIColor clearColor];
    freeItemsTbl.layer.cornerRadius = 3.0f;
    //            [freeItemsTbl setBorderWidth:1.0f];
    freeItemsTbl.hidden = NO;
    
    unappliedDealsSkuIdArr = [NSMutableArray new];
    unappliedDealsSkuDescArr = [NSMutableArray new];
    
    
    
    @try {
        if (unAppliedDealItemDic.count > 0) {
            //            if ([[unAppliedDealItemDic valueForKey:@"dealDescrition"] length] == 0) {
            //                dealDescrition.text = @"--";
            //            }
            //            else {
            //                dealDescrition.text = [unAppliedDealItemDic valueForKey:@"dealDescrition"];
            //
            //            }
            //            unAppliedDealSkus.text = [unAppliedDealItemDic valueForKey:@"dealsSkuIds"];
            
            //            unappliedDealsSkuIdArr = [[[unAppliedDealItemDic valueForKey:@"dealsSkuIds"] componentsSeparatedByString:@","] mutableCopy];
            unappliedDealsSkuIdArr = [NSMutableArray new];
            unappliedDealsSkuDescArr = [NSMutableArray new];
            for(NSString *skuId in [[unAppliedDealItemDic valueForKey:@"dealsSkuIds"] componentsSeparatedByString:@","])
            {
                if (skuId.length > 0)
                    [unappliedDealsSkuIdArr addObject:skuId];
                
            }
            
            
            for(NSString *skuDesc in [unAppliedDealItemDic valueForKey:@"dealsSkuIdsDesc"])
            {
                if (skuDesc.length > 0)
                    [unappliedDealsSkuDescArr addObject:skuDesc];
                
            }
            
            
            
        }
        if (turnOverFreeItemsDesc.count > 0) {
            
            
            for(NSString *skuId in [turnOverFreeItems componentsSeparatedByString:@","])
            {
                if (skuId.length > 0)
                    [unappliedDealsSkuIdArr addObject:skuId];
                
            }
            for(NSString *skuDesc in turnOverFreeItemsDesc)
            {
                if (skuDesc.length > 0)
                    [unappliedDealsSkuDescArr addObject:skuDesc];
                
            }
        }
        
        if (!unappliedDealsSkuIdArr.count && !unappliedDealsSkuDescArr.count) {
            
            return;
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
    
    
    //upto here
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            
            unAppliedDealMsg.frame =  CGRectMake(10, 10, customerView.frame.size.width, 30);
            dealDescrition.frame =  CGRectMake(10, 50, customerView.frame.size.width, 30);
            unAppliedDealSkus.frame = CGRectMake(10, 90, customerView.frame.size.width, 30);
            freeItemsTbl.frame = CGRectMake(10, unAppliedDealMsg.frame.origin.y + unAppliedDealMsg.frame.size.height, customerView.frame.size.width - 20 , customerView.frame.size.height - (unAppliedDealMsg.frame.origin.y + unAppliedDealMsg.frame.size.height));
            
        }
    }
    
    [customerView addSubview:unAppliedDealMsg];
    [customerView addSubview:freeItemsTbl];
    [freeItemsTbl reloadData];
    // [customerView addSubview:dealDescrition];
    //    [customerView addSubview:unAppliedDealSkus];
    customerInfoPopUp.view = customerView;
    
    
    if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
        customerInfoPopUp.preferredContentSize =  CGSizeMake(customerView.frame.size.width, customerView.frame.size.height);
        
        UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        
        //                [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        [popover presentPopoverFromRect:[self segmentFrameForIndex:segment_index inSegmentedControl:segmentedControl] inView:segmentedControl permittedArrowDirections:UIPopoverArrowDirectionAny animated:YES];
        
        
        customerInfoPopOver= popover;
        
    }
    
    else {
        
        customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
        
        UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        // popover.contentViewController.view.alpha = 0.0;
        popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
        [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        customerInfoPopOver = popover;
        
    }
    
}

- (void)applyAnimationToLabel:(UILabel *)animatelabl {
    CABasicAnimation *basic=[CABasicAnimation animationWithKeyPath:@"transform"];
    basic.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeScale(1.08, 1.08, 1.08)];
    [basic setAutoreverses:YES];
    [basic setRepeatCount:MAXFLOAT];
    basic.duration = 0.35;
    [animatelabl.layer addAnimation:basic forKey:@"transform"];
}

/**
 * @description  save the cart items
 * @date         26/10/15
 * @method       saveCartItems
 * @author       Sonali
 * @param        cartItems of type NSArray
 * @param        quantity array of type NSArray
 * @return
 * @verified By
 * @verified On
 */

-(void)saveCartItems:(NSArray*)cartItems  {
    @try {
        
        //commented by Srinivasulu on 23/08/2017...
        //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
        //    defaults = [NSUserDefaults standardUserDefaults];
        
        
        if(!isNewReturnBill){
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            
            //upto here on 23/08/2017....
            
            defaults = [NSUserDefaults standardUserDefaults];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:cartItems] forKey:@"cartItems"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:isVoidedArray] forKey:@"voidItems"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:itemPromoFlagArr] forKey:@"itemPromoFlag"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:isPriceEditableArr] forKey:@"priceEditArr"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:editedPriceArr] forKey:@"editedPriceArr"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:taxArr] forKey:@"taxArr"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:deletedTaxDic] forKey:@"deletedTaxDic"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:itemDiscountArr] forKey:@"itemDiscountArr"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:itemDiscountDescArr] forKey:@"itemDiscountDescArr"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:itemScanCode] forKey:@"itemScanCode"];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:manufacturedItemsArr] forKey:kIsManuFacturedItem];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:isPackagedItem] forKey:kPackagedType];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:productInfoArr] forKey:@"productInfo"];
            
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:zeroStockAvailInfoArr] forKey:kZeroStockArr];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:taxTypeArr] forKey:kItemTaxExclusive];
            
            
            //added by Srinivasulu on 28/09/2017 && 06/03/2018....
            
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:isItemFlatDiscountedArr] forKey:IS_ITEM_FLAT_DISCOUNTED];
            [defaults setObject:[NSKeyedArchiver archivedDataWithRootObject:isItemTrackingRequiredArr] forKey:TRACKING_REQUIRED];
            
            //upto here on 28/09/2017 && 06/03/1992....
            
            [defaults synchronize];
            
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
    }
    
}

- (NSMutableArray *)getCartItemsSkuIds:(NSMutableArray *)cartArr {
    NSMutableArray *cartItemSkus = [NSMutableArray new];
    for (NSString *cartItemStr in cartArr) {
        NSArray *itemArr = [cartItemStr componentsSeparatedByString:@"#"];
        [cartItemSkus addObject:itemArr[0]];
    }
    return cartItemSkus;
}

- (BOOL)checkAllDealItemsAddedOrNot {
    
    BOOL allDealItems = FALSE;
    
    @try {
        for (int i = 0; i < dealDataItems.count; i++) {
            
            DealsController *_dealsController = dealDataItems[i];
            
            NSMutableArray *skuids = [(_dealsController.productData).allKeys mutableCopy];
            
            for (int i=0; i < skuids.count; i++) {
                
                
                NSArray *arr = [_dealsController.productData valueForKey:skuids[i]];
                
                NSArray *dealSkuArr = [arr[2] componentsSeparatedByString:@","];
                NSArray *sellSkuArr = [arr[4] componentsSeparatedByString:@","];
                NSMutableArray *dealSkuIds = [NSMutableArray arrayWithArray:dealSkuArr];
                [dealSkuIds removeLastObject];
                NSMutableArray *sellSkuIds_ = [NSMutableArray arrayWithArray:sellSkuArr];
                [sellSkuIds_ removeLastObject];
                //changed
                NSMutableArray *cartItemSkus = [self getCartItemsSkuIds:cartItem];
                
                NSMutableArray *finalRetainedArr = [NSMutableArray new];
                
                for (int i = 0; i < dealSkuIds.count; i++) {
                    if([cartItemSkus containsObject:dealSkuIds[i]]){
                        [finalRetainedArr addObject:dealSkuIds[i]];
                    }
                }
                int dealQty = 0;
                for (NSString *str in finalRetainedArr) {
                    for (int c=0; c<cartItem.count; c++) {
                        if ([[cartItem[c] componentsSeparatedByString:@"#"][0] isEqualToString:str]) {
                            dealQty += [cartItem[c] componentsSeparatedByString:@"#"][5].intValue;
                        }
                    }
                }
                if (dealQty != ([arr[1] intValue] + [arr[0] intValue])) {
                    allDealItems = TRUE;
                    unAppliedDealItemDic = [NSMutableDictionary new];
                    [unAppliedDealItemDic setValue:arr[2] forKey:@"dealsSkuIds"];
                    [unAppliedDealItemDic setValue:arr[3] forKey:@"dealDescrition"];
                    return allDealItems;
                }
            }
        }
        
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception.name);
    }
    @finally {
        
    }
    
    return allDealItems;
}

- (CGRect)segmentFrameForIndex:(NSInteger)index inSegmentedControl:(UISegmentedControl *)control
{
    // WARNING: This function gets frame from UISegment objects, undocumented subviews of UISegmentedControl.
    // May break in iOS updates.
    
    NSMutableArray *segments = [NSMutableArray arrayWithCapacity:7];
    for (UIView *view in control.subviews) {
        if ([NSStringFromClass([view class]) isEqualToString:@"UISegment"]) {
            [segments addObject:view];
        }
    }
    
    NSArray *sorted = [segments sortedArrayUsingComparator:^NSComparisonResult(UIView *a, UIView *b) {
        if (a.frame.origin.x < b.frame.origin.x) {
            return NSOrderedAscending;
        } else if (a.frame.origin.x > b.frame.origin.x) {
            return NSOrderedDescending;
        }
        return NSOrderedSame;
    }];
    
    return [sorted[index] frame];
}

- (BOOL)allowItemSpecificDiscountToUser:(NSMutableArray *)roleNames {
    
    BOOL allowItemSpecificDiscount = FALSE;
    
    allowItemSpecificDiscount = [self isSegmentAcessible:@"Item Discount" appDocument:@"NewBill"];
    
    
    //    for (NSString *roleName in roleNames) {
    //        if ([[roleName lowercaseString] containsString:@"store manager"]) {
    //            allowItemSpecificDiscount = TRUE;
    //            break;
    //        }
    //        else {
    //            allowItemSpecificDiscount = FALSE;
    //        }
    //    }
    
    return allowItemSpecificDiscount;
}

// login screen ..
- (void) logging {
    
    
    segmentedControl.userInteractionEnabled = FALSE;
    
    loginTransperentView = [[UIView alloc] initWithFrame:self.view.frame];
    loginTransperentView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.8f];
    loginTransperentView.hidden = NO;
    
    loginView = [[UIView alloc] init];
    loginView.layer.borderColor = [UIColor whiteColor].CGColor;
    loginView.layer.borderWidth = 1.0f;
    loginView.layer.cornerRadius = 10;
    //    loginView.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"MessageBox.png"]];
    loginView.clipsToBounds = YES;
    loginView.hidden = NO;
    
    
    
    
    UIImageView *headerimg  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"PopUp_header.png"]];
    UIImageView *headerlogo = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"User_Gray.png"]];
    
    UILabel *headerlabel = [[UILabel alloc] init];
    headerlabel.text = @"Login";
    headerlabel.textColor = [UIColor whiteColor];
    headerlabel.backgroundColor = [UIColor clearColor];
    
    
    UIButton *backBut = [[UIButton alloc] init];
    [backBut setImage:[UIImage imageNamed:@"go-back-icon.png"] forState:UIControlStateNormal];
    [backBut addTarget:self action:@selector(gobackView) forControlEvents:UIControlEventTouchDown];
    
    UILabel *user      = [[UILabel alloc] init];
    
    password  = [[UILabel alloc] init];
    UILabel *emailId_  = [[UILabel alloc] init];
    
    user.backgroundColor      = [UIColor clearColor];
    password.backgroundColor  = [UIColor clearColor];
    emailId_.backgroundColor = [UIColor clearColor];
    
    user.text      = @"Customer ID";
    password.text  = @"Password";
    emailId_.text = @"User ID";
    
    user.textColor = [UIColor whiteColor];
    password.textColor = [UIColor whiteColor];
    emailId_.textColor = [UIColor whiteColor];
    
    userIDtxt          = [[UITextField alloc] init];
    emailIDtxt        = [[UITextField alloc] init];
    passwordtxt        = [[UITextField alloc] init];
    userIDtxt.text = custID;
    
    userIDtxt.layer.masksToBounds=YES;
    userIDtxt.layer.borderColor=[UIColor grayColor].CGColor;
    userIDtxt.layer.borderWidth= 1.0f;
    
    
    passwordtxt.layer.masksToBounds=YES;
    passwordtxt.layer.borderColor=[UIColor grayColor].CGColor;
    passwordtxt.layer.borderWidth= 1.0f;
    
    emailIDtxt.layer.masksToBounds=YES;
    emailIDtxt.layer.borderColor=[UIColor grayColor].CGColor;
    emailIDtxt.layer.borderWidth= 1.0f;
    
    userIDtxt.delegate          = self;
    passwordtxt.delegate        = self;
    emailIDtxt.delegate = self;
    
    userIDtxt.font = [UIFont fontWithName:@"Arial" size:18.0];
    passwordtxt.font = [UIFont fontWithName:@"Arial" size:18.0];
    emailIDtxt.font = [UIFont fontWithName:@"Arial" size:18.0];
    
    userIDtxt.backgroundColor   = [UIColor whiteColor];
    passwordtxt.backgroundColor = [UIColor whiteColor];
    emailIDtxt.backgroundColor = [UIColor whiteColor];
    
    userIDtxt.layer.cornerRadius    = 4.0f;
    userIDtxt.layer.masksToBounds   = YES;
    passwordtxt.layer.cornerRadius  = 4.0f;
    passwordtxt.layer.masksToBounds = YES;
    emailIDtxt.layer.cornerRadius  = 4.0f;
    emailIDtxt.layer.masksToBounds = YES;
    
    [userIDtxt addTarget:self action:@selector(textfieldTouched:) forControlEvents:UIControlEventTouchDown];
    [passwordtxt addTarget:self action:@selector(textfieldTouched:) forControlEvents:UIControlEventTouchDown];
    //[emailIDtxt addTarget:self action:@selector(textfieldTouched:) forControlEvents:UIControlEventTouchDown];
    
    userIDtxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    userIDtxt.autocorrectionType     = UITextAutocorrectionTypeNo;
    passwordtxt.secureTextEntry = TRUE;
    
    emailIDtxt.autocapitalizationType = UITextAutocapitalizationTypeNone;
    emailIDtxt.autocorrectionType     = UITextAutocorrectionTypeNo;
    
    loginbut1 = [[UIButton alloc] init];
    [loginbut1 setTitle:@"Login" forState:UIControlStateNormal];
    [loginbut1 setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [loginbut1 setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];
    loginbut1.backgroundColor = [UIColor clearColor];
    [loginbut1 addTarget:self action:@selector(loginClicked:)forControlEvents:UIControlEventTouchDown];
    loginbut1.layer.borderColor = [UIColor grayColor].CGColor;
    loginbut1.clipsToBounds = YES;
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            
            loginView.frame = CGRectMake(180, 80, 668, 550);
            
            headerimg.frame = CGRectMake(0, 0, 668, 100);
            
            headerlogo.frame = CGRectMake(80, 25, 60, 60);
            
            headerlabel.font = [UIFont boldSystemFontOfSize:30];
            headerlabel.frame = CGRectMake(300, 30, 250, 60);
            
            
            backBut.frame = CGRectMake(590, 15, 70, 70);
            
            user.font = [UIFont systemFontOfSize:30];
            password.font = [UIFont systemFontOfSize:30];
            emailId_.font = [UIFont systemFontOfSize:30];
            user.frame = CGRectMake(40, 130, 200, 60);
            emailId_.frame = CGRectMake(40, 230, 200, 60);
            password.frame = CGRectMake(40, 330, 200, 60);
            
            userIDtxt.font = [UIFont systemFontOfSize:30];
            passwordtxt.font = [UIFont systemFontOfSize:30];
            emailIDtxt.font = [UIFont systemFontOfSize:30];
            userIDtxt.frame = CGRectMake(250, 130, 350, 60);
            emailIDtxt.frame = CGRectMake(250, 230, 350, 60);
            passwordtxt.frame = CGRectMake(250, 330, 350, 60);
            
            loginbut1.frame = CGRectMake(30, 420, 600, 60);
            loginbut1.titleLabel.font = [UIFont boldSystemFontOfSize:30.0];
            //            loginbut1.layer.cornerRadius = 25.0f;
            
        }
        else {
            loginView.frame = CGRectMake(50, 200, 668, 550);
            
            headerimg.frame = CGRectMake(0, 0, 668, 100);
            
            headerlogo.frame = CGRectMake(80, 25, 60, 60);
            
            headerlabel.font = [UIFont boldSystemFontOfSize:30];
            headerlabel.frame = CGRectMake(300, 30, 250, 60);
            
            
            backBut.frame = CGRectMake(590, 15, 70, 70);
            
            user.font = [UIFont systemFontOfSize:30];
            password.font = [UIFont systemFontOfSize:30];
            emailId_.font = [UIFont systemFontOfSize:30];
            user.frame = CGRectMake(40, 130, 200, 60);
            emailId_.frame = CGRectMake(40, 230, 200, 60);
            password.frame = CGRectMake(40, 330, 200, 60);
            
            userIDtxt.font = [UIFont systemFontOfSize:30];
            passwordtxt.font = [UIFont systemFontOfSize:30];
            emailIDtxt.font = [UIFont systemFontOfSize:30];
            userIDtxt.frame = CGRectMake(250, 130, 350, 60);
            emailIDtxt.frame = CGRectMake(250, 230, 350, 60);
            passwordtxt.frame = CGRectMake(250, 330, 350, 60);
            
            loginbut1.frame = CGRectMake(30, 420, 600, 60);
            loginbut1.titleLabel.font = [UIFont boldSystemFontOfSize:30.0];
            loginbut1.layer.cornerRadius = 25.0f;
            
        }
        
    }
    else {
        if (version>=8.0) {
            
            loginView.frame = CGRectMake(10, 90, 300, 300);
            
            headerimg.frame = CGRectMake(0, 0, 300, 50);
            
            headerlogo.frame = CGRectMake(20, 7, 40, 40);
            
            headerlabel.frame = CGRectMake(130, 10, 100, 30);
            
            backBut.frame = CGRectMake(260, 10, 30, 30);
            
            user.frame = CGRectMake(10, 70, 100, 30);
            user.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            password.frame = CGRectMake(10, 170, 100, 30);
            password.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            emailId_.frame = CGRectMake(10, 120, 100, 30);
            emailId_.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            
            userIDtxt.frame = CGRectMake(100, 70, 180, 30);
            userIDtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            passwordtxt.frame = CGRectMake(100, 170, 180, 30);
            passwordtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            emailIDtxt.frame = CGRectMake(100, 120, 180, 30);
            emailIDtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            
            loginbut1.frame = CGRectMake(20, 218, 260, 35);
            loginbut1.layer.cornerRadius = 15.0f;
        }
        else {
            loginView.frame = CGRectMake(10, 90, 300, 300);
            
            headerimg.frame = CGRectMake(0, 0, 300, 50);
            
            headerlogo.frame = CGRectMake(20, 7, 40, 40);
            
            headerlabel.frame = CGRectMake(130, 10, 100, 30);
            
            backBut.frame = CGRectMake(260, 10, 30, 30);
            
            user.frame = CGRectMake(10, 70, 100, 30);
            user.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            password.frame = CGRectMake(10, 170, 100, 30);
            password.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            emailId_.frame = CGRectMake(10, 120, 100, 30);
            emailId_.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0];
            
            userIDtxt.frame = CGRectMake(100, 70, 180, 30);
            userIDtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            passwordtxt.frame = CGRectMake(100, 170, 180, 30);
            passwordtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            emailIDtxt.frame = CGRectMake(100, 120, 180, 30);
            emailIDtxt.font = [UIFont fontWithName:@"ArialRoundedMT" size:15.0];
            
            loginbut1.frame = CGRectMake(20, 218, 260, 35);
            loginbut1.layer.cornerRadius = 15.0f;
            
        }
        
        
    }
    UIGraphicsBeginImageContext(loginView.frame.size);
    [[UIImage imageNamed:@"MessageBox.png"] drawInRect:loginView.bounds];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    loginView.backgroundColor = [UIColor colorWithPatternImage:image];
    
    
    
    [loginView addSubview:headerimg];
    [loginView addSubview:headerlogo];
    [loginView addSubview:headerlabel];
    [loginView addSubview:backBut];
    [loginView addSubview:user];
    [loginView addSubview:password];
    [loginView addSubview:userIDtxt];
    [loginView addSubview:passwordtxt];
    [loginView addSubview: loginbut1];
    [loginView addSubview:emailIDtxt];
    [loginView addSubview:emailId_];
    
    [loginTransperentView addSubview:loginView];
    [self.view addSubview:loginTransperentView];
    
}

- (void)loginClicked:(id)sender {
    if ((userIDtxt.text).length == 0 ||  (passwordtxt.text).length == 0)
    {
        
        UIAlertView *validation_alert = [[UIAlertView alloc] initWithTitle:@"Validation" message:@"Please enter the \nmandatory fields" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [validation_alert show];
    }
    else
    {
        
        HUD.dimBackground = YES;
        HUD.labelText = @"Authenticating..";
        
        // Show the HUD
        [HUD show:YES];
        [HUD setHidden:NO];
        
        //user_name = [userIDtxt.text copy];
        userPassword = [passwordtxt.text copy];
        
        NSMutableArray *roleNameList = [self callLoginServices];
        if ([self allowItemSpecificDiscountToUser:roleNameList]) {
            [loginView setHidden:YES];
            [loginTransperentView setHidden:YES];
            [self segmentAction:segmentedControl];
        }
        else {
            UIAlertView *validation_alert = [[UIAlertView alloc] initWithTitle:@"This account has no permission to allow Item Specific Discount" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [validation_alert show];
        }
    }
}

-(NSMutableArray *)callLoginServices {
    
    CheckWifi *wifi = [[CheckWifi alloc]init];
    BOOL status = [wifi checkWifi];
    NSMutableArray *roleNameList = [[NSMutableArray alloc] init];
    
    if (status) {
        @try {
            
            BOOL status = FALSE;
            
            //commented by Srinivasulu on 20/07/2017....
            
            //            UIDevice *myDevice = [UIDevice currentDevice];
            //            NSString *deviceUDID = @"";
            //            NSString *deviceTechnoId = @"";
            //            KeychainItemWrapper *keyChainItem = [[KeychainItemWrapper alloc] initWithIdentifier:@"Technolabs" accessGroup:nil];
            //            if ([[keyChainItem objectForKey:(__bridge id)(kSecAttrAccount)] length] == 0) {
            //                deviceUDID = [[myDevice identifierForVendor] UUIDString];
            //                //            deviceUDID = DEVICE_ID;
            //                [keyChainItem setObject:deviceUDID forKey:(__bridge id)(kSecAttrAccount)];
            //                deviceTechnoId = deviceUDID;
            //            }
            //            else {
            //                deviceTechnoId = [keyChainItem objectForKey:(__bridge id)(kSecAttrAccount)];
            //            }
            
            //upto here on 20/07/2017...
            
            
            MemberServiceSoapBinding *memberParam =  [MemberServiceSvc MemberServiceSoapBinding];
            memberParam.logXMLInOut = YES;
            
            
            //commented by Srinivasulu on 20/07/2017....
            
            //            NSString *time = [NSDateFormatter localizedStringFromDate:[NSDate date] dateStyle:NSDateFormatterShortStyle timeStyle:NSDateFormatterFullStyle];
            //            NSArray *str = [time componentsSeparatedByString:@" "];
            //            NSString *date = [[[str objectAtIndex:0] componentsSeparatedByString:@","] objectAtIndex:0];
            
            //            NSArray *headerKeys = [NSArray arrayWithObjects:@"accessKey", @"customerId",@"applicationName",@"userName",@"correlationId",@"dateTime", nil];
            //
            //            NSArray *headerObjects = [NSArray arrayWithObjects:userIDtxt.text,userIDtxt.text,@"Omni Retailer-outlet",emailIDtxt.text,@"-",date, nil];
            //            NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:headerObjects forKeys:headerKeys];
            
            //upto here on 20/07/2017...
            
            
            NSArray *loyaltyKeys = @[@"userId", @"emailId",@"password",@"deviceId",@"requestHeader"];
            
            
            //changed by Srinivasulu on  20/07/2017....
            
            //            NSArray * loyaltyObjects = [NSArray arrayWithObjects:userIDtxt.text,emailIDtxt.text,passwordtxt.text,deviceTechnoId,[RequestHeader getRequestHeader], nil];
            NSArray * loyaltyObjects = @[userIDtxt.text,emailIDtxt.text,passwordtxt.text,deviceId,[RequestHeader getRequestHeader]];
            
            
            //upto here on 20/07/2017....
            
            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
            
            NSError * err_;
            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
            
            NSLog(@"login req string %@",loyaltyString);
            
            MemberServiceSvc_authenticateUser *authenticate = [[MemberServiceSvc_authenticateUser alloc] init];
            authenticate.loginDetails = loyaltyString;
            
            
            
            MemberServiceSoapBindingResponse *response_ = [memberParam authenticateUserUsingParameters:(MemberServiceSvc_authenticateUser *)authenticate];
            if (![response_.error isKindOfClass:[NSError class]]) {
                
                NSArray *responseBodyParts1_ = response_.bodyParts;
                NSDictionary *JSON1;
                for (id bodyPart in responseBodyParts1_) {
                    
                    if ([bodyPart isKindOfClass:[MemberServiceSvc_authenticateUserResponse class]]) {
                        status = TRUE;
                        MemberServiceSvc_authenticateUserResponse *body = (MemberServiceSvc_authenticateUserResponse *)bodyPart;
                        printf("\nresponse=%s",(body.return_).UTF8String);
                        
                        //status = body.return_;
                        NSError *e;
                        JSON1 = [[NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
                                                                 options: NSJSONReadingMutableContainers
                                                                   error: &e] copy];
                        
                        if (status) {
                            // NSError *e_;
                            NSDictionary *responseJSON ;
                            responseJSON = [JSON1 valueForKey:@"responseHeader"];
                            
                            
                            if ([[responseJSON valueForKey:@"responseCode"] integerValue]==0) {
                                
                                NSMutableArray *roles = [JSON1 valueForKey:@"roles"];
                                
                                NSLog(@"Roles for the login persons -------%@",roles);
                                for (NSDictionary *rolesDic in roles) {
                                    [roleNameList addObject:[rolesDic valueForKey:@"roleName"]];
                                }
                                
                                
                            }
                            return roleNameList;
                            
                        }
                        else {
                            
                            [HUD setHidden:YES];
                            return roleNameList;
                        }
                    }
                    else {
                        
                        return roleNameList;
                    }
                    
                }
                
            }
            else {
                
                return roleNameList;
            }
        }
        @catch (NSException *exception) {
            
            return roleNameList;
        }
        @finally {
            [HUD setHidden:YES];
        }
    }
    else {
        isOfflineService = YES;
        
        return roleNameList;
        
    }
}

- (void) gobackView {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    loginView.hidden        = YES;
    loginTransperentView.hidden = YES;
    loginbut.enabled = TRUE;
    segmentedControl.userInteractionEnabled = TRUE;
    
}
- (void) textfieldTouched:(id)sender {
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            loginView.frame = CGRectMake(180, -20, 668, 550);
        }
        else {
            loginView.frame = CGRectMake(50, 200, 668, 550);
        }
    }
    else {
        loginView.frame = CGRectMake(10, 10, 300, 260);
    }
    
}

/*
 
 @name : setPromoItemFlags
 @description : the method to set the item promo status for each items in the cart
 @crated_date : 17/08/16
 @author : sonali
 
 */

-(void)setItemPromoFlags {
    
    @try {
        //        for (int i = 0; i < [onlineDealDiscountPriceArr count]; i++) {
        //            if ([[onlineDealDiscountPriceArr objectAtIndex:i] floatValue] > 0) {
        //
        //                [itemPromoFlagArr replaceObjectAtIndex:i withObject:@"F"];
        //            }
        //
        //        }
        
        
        for (int i =0 ; i< cartTotalItems.count; i++) {
            
            if ([onlineDealDiscountPriceArr[i] floatValue] > 0) {
                
                itemPromoFlagArr[i] = @"F";
            }
            
            NSArray *temp = [cartTotalItems[i] componentsSeparatedByString:@"#"];
            
            NSArray *sellSkus = [NSArray new];
            
            for(ApplyDealModel *deals in itemWiseAvailableDeals[i]) {
                
                for (NSString *str in appliedDealIdsArr) {
                    
                    if ([deals.dealID isEqualToString:str]) {
                        
                        sellSkus = [[deals.sellSkuids componentsSeparatedByString:@","] copy];
                        
                        
                    }
                    
                }
            }
            
            
            //            if ([dealPromItemsList containsObject:[temp objectAtIndex:0]] && [[onlineDealDiscountPriceArr objectAtIndex:i] floatValue] == 0) {
            //
            //                [itemPromoFlagArr replaceObjectAtIndex:i withObject:@"P"];
            //
            //            }
            //            else if ([dealPromItemsList count] == 1) {
            //                [itemPromoFlagArr replaceObjectAtIndex:i withObject:@"P"];
            //            }
            
            
            for (NSString *skuId in sellSkus) {
                
                if ([temp[0] isEqualToString:skuId] && [onlineDealDiscountPriceArr[i] floatValue] == 0) {
                    
                    itemPromoFlagArr[[skuIdList indexOfObject:skuId]] = @"P";
                }
                else if ([temp[0] isEqualToString:skuId] && [onlineDealDiscountPriceArr[i] floatValue] != 0) {
                    
                    itemPromoFlagArr[[skuIdList indexOfObject:skuId]] = @"P";
                }
            }
            
            //            if ([sellSkus count] > 0 && [sellSkus containsObject:[temp objectAtIndex:0]]) {
            //
            //                [itemPromoFlagArr replaceObjectAtIndex:i withObject:@"P"];
            //
            //
            //            }
            if (onlineOfferDiscountPriceArr != nil && [onlineOfferDiscountPriceArr[i] floatValue] > 0) {
                
                itemPromoFlagArr[i] = @"P";
                
            }
            
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

-(BOOL)checkForTurnOverItem {
    
    @try {
        BOOL status = false;
        
        NSArray *freeItems = [turnOverFreeItems componentsSeparatedByString:@","];
        
        NSMutableArray *cartItems = [NSMutableArray  new];
        
        for (NSString *item in cartItem) {
            
            [cartItems addObject:[item componentsSeparatedByString:@"#"][0]];
        }
        
        
        int count = 0;
        
        for(NSString *skuId in freeItems)
        {
            if (skuId.length > 0 && [cartItems containsObject:skuId]){
                
                count ++;
            }
            
        }
        
        if ( count!=0 && freeItems.count == count) {
            
            status = true;
            
            
        }
        
        return status;
    }
    @catch (NSException *e) {
        
    }
    
}



-(void)populateEmployeePopUp {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    transparentViewEmp = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
    transparentViewEmp.backgroundColor = [[UIColor blackColor]colorWithAlphaComponent:0.6f];
    
    employeeView = [[UIView alloc]init];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            
            employeeView.frame = CGRectMake(250,200, 550, 350);
            
        }
        else {
            employeeView.frame = CGRectMake(200, 300, 375, 300);
            
        }
    }
    else{
        employeeView.frame = CGRectMake(75, 68, 175, 200);
    }
    employeeView.layer.borderWidth = 5.0;
    employeeView.layer.cornerRadius = 10.0;
    employeeView.layer.masksToBounds = YES;
    employeeView.backgroundColor = [UIColor blackColor];
    employeeView.layer.borderColor = [UIColor whiteColor].CGColor;
    [self.view addSubview:employeeView];
    
    UIImageView *img  = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header.PNG"]];
    
    // a label on top of the view ..
    UILabel *topbar = [[UILabel alloc] init];
    topbar.backgroundColor = [UIColor grayColor];
    //topbar.text = @"    Enter Quantity";
    topbar.backgroundColor = [UIColor grayColor];
    topbar.textAlignment = NSTextAlignmentCenter;
    topbar.font = [UIFont boldSystemFontOfSize:17];
    topbar.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:17.0f];
    topbar.textColor = [UIColor whiteColor];
    topbar.textAlignment = NSTextAlignmentLeft;
    
    UIButton  *closeBtn = [[UIButton alloc] init] ;
    [closeBtn addTarget:self action:@selector(closeEmployeePopUp) forControlEvents:UIControlEventTouchUpInside];
    closeBtn.tag = 11;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [closeBtn setBackgroundImage:image    forState:UIControlStateNormal];
    
    
    UILabel *emplCodeLbl = [[UILabel alloc] init];
    emplCodeLbl.text = @"Employee Code";
    emplCodeLbl.font = [UIFont boldSystemFontOfSize:14];
    emplCodeLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    emplCodeLbl.backgroundColor = [UIColor clearColor];
    emplCodeLbl.textColor = [UIColor whiteColor];
    [employeeView addSubview:emplCodeLbl];
    
    UILabel *empNameLbl = [[UILabel alloc] init];
    empNameLbl.text = @"Employee Name";
    empNameLbl.font = [UIFont boldSystemFontOfSize:14];
    empNameLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    empNameLbl.backgroundColor = [UIColor clearColor];
    empNameLbl.textColor = [UIColor whiteColor];
    [employeeView addSubview:empNameLbl];
    
    
    UILabel *empLocationLbl = [[UILabel alloc] init];
    empLocationLbl.text = @"Employee Location";
    empLocationLbl.font = [UIFont boldSystemFontOfSize:14];
    empLocationLbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:14.0f];
    empLocationLbl.backgroundColor = [UIColor clearColor];
    empLocationLbl.textColor = [UIColor whiteColor];
    [employeeView addSubview:empLocationLbl];
    
    
    
    UIButton *selectSalesPerson  = [UIButton buttonWithType:UIButtonTypeCustom];
    UIImage *buttonImageDD1 = [UIImage imageNamed:@"arrow.png"];
    [selectSalesPerson setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
    [selectSalesPerson addTarget:self
                          action:@selector(selectSalesPersonIds:) forControlEvents:UIControlEventTouchDown];
    
    
    
    /** ok Button for qtyChangeDisplyView....*/
    UIButton *okBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [okBtn setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];
    [okBtn addTarget:self
              action:@selector(submitEmployeeDetails) forControlEvents:UIControlEventTouchDown];
    [okBtn setTitle:@"Submit" forState:UIControlStateNormal];
    okBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    [okBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    
    /** CancelButton for qtyChangeDisplyView....*/
    UIButton *cancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [cancelBtn setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];
    [cancelBtn addTarget:self
                  action:@selector(closeEmployeePopUp) forControlEvents:UIControlEventTouchDown];
    [cancelBtn setTitle:@"Cancel" forState:UIControlStateNormal];
    cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
    [cancelBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        
        img.frame = CGRectMake(0, 0, employeeView.frame.size.width, 50);
        topbar.frame = CGRectMake(0, 5, employeeView.frame.size.width, 40);
        topbar.font = [UIFont boldSystemFontOfSize:25];
        closeBtn.frame = CGRectMake(img.frame.size.width - 50, 5, 45, 45);
        
        
        emplCodeLbl.frame = CGRectMake(10,70,200,40);
        emplCodeLbl.font = [UIFont fontWithName:kLabelFont size:20];
        
        
        empNameLbl.frame = CGRectMake(10,130,200,40);
        empNameLbl.font = [UIFont fontWithName:kLabelFont size:20];
        
        
        empLocationLbl.frame = CGRectMake(10,190,200,40);
        empLocationLbl.font = [UIFont fontWithName:kLabelFont size:20];
        
        
        empCodeTxt.frame = CGRectMake(220,70,250,40);
        empCodeTxt.font = [UIFont fontWithName:kLabelFont size:18];
        
        selectSalesPerson.frame = CGRectMake(425, 65, 60, 60);
        
        
        empNameTxt.frame = CGRectMake(220, 130, 250, 40);
        empNameTxt.font = [UIFont fontWithName:kLabelFont size:18];
        
        empLocTxt.frame = CGRectMake(220, 190, 250, 40);
        empLocTxt.font = [UIFont fontWithName:kLabelFont size:18];
        
        
        okBtn.frame = CGRectMake(60, 260, 165, 45);
        okBtn.titleLabel.font = [UIFont boldSystemFontOfSize:22.0];
        okBtn.layer.cornerRadius = 20.0f;
        
        cancelBtn.frame = CGRectMake(280, 260, 165, 45);
        cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:22.0];
        cancelBtn.layer.cornerRadius = 20.0f;
        
        
    }
    else{
        
    }
    
    //    [employeeView addSubview:img];
    [employeeView addSubview:topbar];
    [employeeView addSubview:closeBtn];
    [employeeView addSubview:empCodeTxt];
    [employeeView addSubview:empNameTxt];
    [employeeView addSubview:empLocTxt];
    [employeeView addSubview:okBtn];
    [employeeView addSubview:cancelBtn];
    [employeeView addSubview:selectSalesPerson];
    [transparentViewEmp addSubview:employeeView];
    [self.view addSubview:transparentViewEmp];
    // [HUD setHidden:YES];
    
}

-(void)closeEmployeePopUp {
    
    [transparentViewEmp removeFromSuperview];
}

-(void)submitEmployeeDetails {
    
    @try {
        
        if((empCodeTxt.text).length == 0) {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Please select the employee code" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            return;
        }
        if (cartItem.count) {
            
            //changed by Srinivasulu on 13/02/2018....
            
            if (isToCallApplyCampaigns && !isNewReturnBill) {
                [HUD setHidden:NO];
                
                //upto here on 13/02/2018....
                [self callOffersForScanning:@"" qty:@"1" total:[NSString stringWithFormat:@"%.2f",(totalTxt.text).floatValue] itemPrice:@"100.0"];
            }
        }
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
    } @finally {
        
        [transparentViewEmp removeFromSuperview];
        
    }
    
}

#pragma  -mark  methods related to salePersons popUp....

/**
 * @description  In this method we are populate the salePerson information view....
 * @date
 * @method       populateCustomerSpecific:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 09/10/2017....
 * @reason       reason --  item level existing department and subDepartment related informations has to be prepopulated....
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateCustomerSpecific:(UIButton*)sender {
    
    @try {
        AudioServicesPlaySystemSound (soundFileObject);
        
        isItemEmpl = true;
        
        PopOverViewController  *customerSpecific = [[PopOverViewController alloc] init];
        
        customerSpecificView = [[UIView alloc] initWithFrame:CGRectMake(BillField.frame.origin.x,BillField.frame.origin.y,BillField.frame.size.width+40,300)];
        customerSpecificView.opaque = NO;
        customerSpecificView.backgroundColor = [UIColor blackColor];
        customerSpecificView.layer.borderColor = [UIColor whiteColor].CGColor;
        customerSpecificView.layer.borderWidth = 1.0f;
        [customerSpecificView setHidden:NO];
        
        
        UIButton *topBarCancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [topBarCancelBtn addTarget:self action:@selector(topBarCancelButton) forControlEvents:UIControlEventTouchDown];
        [topBarCancelBtn setImage:[UIImage imageNamed:@"delete.png"] forState:UIControlStateNormal];
        topBarCancelBtn.layer.cornerRadius = 3.0f;
        
        UILabel *topBarView = [[UILabel alloc] init];
        topBarView.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        topBarView.textAlignment = NSTextAlignmentCenter;
        topBarView.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0f];
        topBarView.textColor = [UIColor blackColor];
        topBarView.textAlignment = NSTextAlignmentLeft;
        
        
        departmentFld = [[UITextField alloc] init];
        departmentFld.borderStyle = UITextBorderStyleRoundedRect;
        departmentFld.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.6 ];
        departmentFld.font = [UIFont systemFontOfSize:18.0];
        departmentFld.layer.borderColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0].CGColor;
        departmentFld.backgroundColor = [UIColor clearColor];
        departmentFld.delegate = self;
        departmentFld.userInteractionEnabled = false;
        departmentFld.placeholder = @" Department";
        departmentFld.layer.borderWidth  = 1.0f;
        departmentFld.attributedPlaceholder = [[NSAttributedString alloc]initWithString:departmentFld.placeholder attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        
        
        UIImage *departmentImg  = [UIImage imageNamed:@"arrow.png"];
        
        UIButton * departmentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        
        [departmentBtn setBackgroundImage:departmentImg forState:UIControlStateNormal];
        [departmentBtn addTarget:self
                          action:@selector(populateCstmrDprtmnt:) forControlEvents:UIControlEventTouchDown];
        
        departmentBtn.tag = 2;
        
        
        subDepartmentFld = [[UITextField alloc] init];
        subDepartmentFld.borderStyle = UITextBorderStyleRoundedRect;
        subDepartmentFld.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.6 ];
        subDepartmentFld.font = [UIFont systemFontOfSize:18.0];
        subDepartmentFld.layer.borderColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0].CGColor;
        subDepartmentFld.backgroundColor = [UIColor clearColor];
        subDepartmentFld.delegate = self;
        subDepartmentFld.userInteractionEnabled = false;
        subDepartmentFld.placeholder = @" Sub Department";
        subDepartmentFld.layer.borderWidth  = 1.0f;
        subDepartmentFld.attributedPlaceholder = [[NSAttributedString alloc]initWithString:subDepartmentFld.placeholder attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        
        UIImage *subDepartmentImg  = [UIImage imageNamed:@"arrow.png"];
        
        UIButton * subDepartmentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        
        [subDepartmentBtn setBackgroundImage:subDepartmentImg forState:UIControlStateNormal];
        [subDepartmentBtn addTarget:self
                             action:@selector(populateSubDepartment:) forControlEvents:UIControlEventTouchDown];
        
        subDepartmentBtn.tag = 4;
        
        
        salesPersonIdFld = [[UITextField alloc] init];
        salesPersonIdFld.borderStyle = UITextBorderStyleRoundedRect;
        salesPersonIdFld.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.6];
        salesPersonIdFld.font = [UIFont systemFontOfSize:18.0];
        salesPersonIdFld.layer.borderColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0].CGColor;
        salesPersonIdFld.backgroundColor = [UIColor clearColor];
        salesPersonIdFld.delegate = self;
        salesPersonIdFld.userInteractionEnabled = YES;
        salesPersonIdFld.placeholder = @" SalesPerson ID";
        salesPersonIdFld.layer.borderWidth  = 1.0f;
        salesPersonIdFld.attributedPlaceholder = [[NSAttributedString alloc]initWithString:salesPersonIdFld.placeholder attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        
        UIImage *salesPersonIdImg  = [UIImage imageNamed:@"arrow.png"];
        
        UIButton * salesPersonBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        
        [salesPersonBtn setBackgroundImage:salesPersonIdImg forState:UIControlStateNormal];
        [salesPersonBtn addTarget:self
                           action:@selector(selectSalesPersonIds:) forControlEvents:UIControlEventTouchDown];
        
        
        
        salesPersonNameFld = [[UITextField alloc] init];
        salesPersonNameFld.borderStyle = UITextBorderStyleRoundedRect;
        salesPersonNameFld.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.6];
        salesPersonNameFld.font = [UIFont systemFontOfSize:18.0];
        salesPersonNameFld.layer.borderColor = [UIColor colorWithRed:72.0/255.0 green:72.0/255.0 blue:72.0/255.0 alpha:1.0].CGColor;
        salesPersonNameFld.backgroundColor = [UIColor clearColor] ;
        salesPersonNameFld.delegate = self;
        salesPersonNameFld.userInteractionEnabled = YES;
        salesPersonNameFld.placeholder = @" SalesPerson Name";
        salesPersonNameFld.layer.borderWidth  = 1.0f;
        salesPersonNameFld.attributedPlaceholder = [[NSAttributedString alloc]initWithString:salesPersonNameFld.placeholder attributes:@{NSForegroundColorAttributeName:[[UIColor lightGrayColor]colorWithAlphaComponent:0.4]}];
        salesPersonNameFld.userInteractionEnabled = false;
        
        
        UIButton  *specificSubmitButton = [[UIButton alloc] init];
        [specificSubmitButton setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];//        [status setBackgroundColor:[UIColor grayColor]];
        [specificSubmitButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [specificSubmitButton setTitle:@"Submit" forState:UIControlStateNormal];
        //        status.titleLabel.textColor = [UIColor blackColor];
        specificSubmitButton.titleLabel.font = [UIFont boldSystemFontOfSize:22.0];
        specificSubmitButton.titleLabel.textAlignment = NSTextAlignmentLeft;
        specificSubmitButton.layer.cornerRadius = 10.0f;
        specificSubmitButton.tag = sender.tag;
        [specificSubmitButton addTarget:self action:@selector(submitButtonPressed:) forControlEvents:UIControlEventTouchUpInside];
        
        
        UIButton   *specificCancelButton = [[UIButton alloc] init];
        [specificCancelButton setBackgroundImage:[UIImage imageNamed:@"Button.png"] forState:UIControlStateNormal];//        [status setBackgroundColor:[UIColor grayColor]];
        [specificCancelButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [specificCancelButton setTitle:@"Cancel" forState:UIControlStateNormal];
        //        status.titleLabel.textColor = [UIColor blackColor];
        specificCancelButton.titleLabel.font = [UIFont boldSystemFontOfSize:22.0];
        specificCancelButton.titleLabel.textAlignment = NSTextAlignmentLeft;
        specificCancelButton.layer.cornerRadius = 10.0f;
        [specificCancelButton addTarget:self action:@selector(cancelButtonPressed) forControlEvents:UIControlEventTouchUpInside];
        
        
        
        [customerSpecificView addSubview:topBarView];
        [customerSpecificView addSubview: topBarCancelBtn];
        [customerSpecificView addSubview:departmentFld];
        [customerSpecificView addSubview:departmentBtn];
        [customerSpecificView addSubview:subDepartmentFld];
        [customerSpecificView addSubview:subDepartmentBtn];
        [customerSpecificView addSubview:salesPersonIdFld];
        [customerSpecificView addSubview:salesPersonBtn];
        
        [customerSpecificView addSubview:salesPersonNameFld];
        [customerSpecificView addSubview: specificSubmitButton];
        [customerSpecificView addSubview:specificCancelButton];
        
        
        //adjusting the frame for the fields:
        
        topBarView.frame = CGRectMake(0, 0, customerSpecificView.frame.size.width, 45);
        topBarCancelBtn.frame = CGRectMake(topBarView.frame.size.width-50, 0, 45, 45);
        
        departmentFld.frame = CGRectMake(20, topBarView.frame.origin.y+topBarView.frame.size.height+20, 220, 40);
        
        departmentBtn.frame = CGRectMake((departmentFld.frame.origin.x+departmentFld.frame.size.width-45), departmentFld.frame.origin.y-8,  55, 60);
        
        subDepartmentFld.frame = CGRectMake(departmentFld.frame.origin.x, departmentFld.frame.origin.y+departmentFld.frame.size.height+20, 220, 40);
        
        subDepartmentBtn.frame = CGRectMake((subDepartmentFld.frame.origin.x+subDepartmentFld.frame.size.width-45), subDepartmentFld.frame.origin.y-8,  55, 60);
        
        salesPersonIdFld.frame = CGRectMake(subDepartmentFld.frame.origin.x, subDepartmentFld.frame.origin.y+subDepartmentFld.frame.size.height+20, 220, 40);
        
        salesPersonBtn.frame = CGRectMake((salesPersonIdFld.frame.origin.x+salesPersonIdFld.frame.size.width-45), salesPersonIdFld.frame.origin.y-8,  55, 60);
        
        
        specificSubmitButton.frame = CGRectMake(subDepartmentFld.frame.origin.x+subDepartmentFld.frame.size.width+80, subDepartmentFld.frame.origin.y, 160, 45);
        
        specificCancelButton.frame = CGRectMake(salesPersonIdFld.frame.origin.x+salesPersonIdFld.frame.size.width+80, salesPersonIdFld.frame.origin.y, 160, 45);
        
        salesPersonNameFld.frame = CGRectMake(departmentFld.frame.origin.x, salesPersonIdFld.frame.origin.y+subDepartmentFld.frame.size.height+20, specificCancelButton.frame.origin.x - departmentFld.frame.origin.x, 40);
        
        //        adding subView:
        
        
        
        customerSpecific.view = customerSpecificView;
        
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            customerSpecific.preferredContentSize =  CGSizeMake(customerSpecificView.frame.size.width, customerSpecificView.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerSpecific];
            
            [popover presentPopoverFromRect:customerSpecificView.frame inView:self.view permittedArrowDirections:0 animated:YES];
            
            salesInfoPopUp = popover;
            
        }
        
        else {
            //commented by Srinivauslu on 09/10/2017....
            //reason this methods is depericated in iOS - 7.0....
            
            //            customerSpecific.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            //upto here non 09/10/2017....
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerSpecific];
            // popover.contentViewController.view.alpha = 0.0;
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            
            salesInfoPopUp = popover;
            
        }
        
        if([employeeDic.allKeys containsObject:pluCodeList[sender.tag]] && [employeeDic[pluCodeList[sender.tag]] count]) {
            
            NSDictionary *tempDic = [employeeDic valueForKey:pluCodeList[sender.tag]];
            
            departmentFld.text = [tempDic valueForKey:kItemDept];
            subDepartmentFld.text = [tempDic valueForKey:kItemSubDept];
            salesPersonIdFld.text = [tempDic valueForKey:kItemSpecificEmplId];
            salesPersonNameFld.text = [tempDic valueForKey:kItemSpecificEmplName];
        }
        
        //added by Srinivasulu on 09/10/2017....
        
        else{
            
            if(productInfoArr.count > sender.tag) {
                
                NSDictionary *tempDic = productInfoArr[sender.tag];
                
                
                departmentFld.text = [self checkGivenValueIsNullOrNil:[tempDic valueForKey:kItemDept] defaultReturn:@""];
                subDepartmentFld.text = [self checkGivenValueIsNullOrNil:[tempDic valueForKey:kItemSubDept] defaultReturn:@""];
                
            }
            
        }
        
        if(!((departmentFld.text).length && (subDepartmentFld.text).length)){
            
            departmentBtn.userInteractionEnabled = TRUE;
            subDepartmentBtn.userInteractionEnabled = TRUE;
        }
        else{
            
            departmentBtn.userInteractionEnabled = FALSE;
            subDepartmentBtn.userInteractionEnabled = FALSE;
            departmentBtn.hidden = YES;
            subDepartmentBtn.hidden = YES;
            
            departmentBtn.userInteractionEnabled = TRUE;
            subDepartmentBtn.userInteractionEnabled = TRUE;
            
            departmentBtn.hidden = NO;
            subDepartmentBtn.hidden = NO;
        }
        
        //upto here on 09/10/2017....
        
        //added by Srinivasulu on 17/06/2017....
        
        //        [HUD bringSubviewToFront:self.view];
        //        [self.view bringSubviewToFront:HUD];
        //        [[UIApplication sharedApplication].keyWindow addSubview:HUD];
        
        //upto here on 17/06/2017....
        
        
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    @finally {
        
    }
}







/**
 * @description  here we are ....
 * @date
 * @method       submitButtonPressed:--
 * @author
 * @param        UIButton
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 26/10/2017....
 * @reason       added the new parameter withPlucode:--
 *
 * @verified By
 * @verified On
 *
 */

-(void)submitButtonPressed:(UIButton *)sender {
    @try {
        AudioServicesPlaySystemSound(soundFileObject);
        
        //added by Srinivasulu on 26/10/2017....
        
        if(!(((departmentFld.text).length || (subDepartmentFld.text).length)  && (salesPersonIdFld.text).length)){
            
            
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"select_the_all_necessary_fields", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
            [alert show];
            return;
        }
        
        //upto here on 26/10/2017....
        
        
        [salesInfoPopUp dismissPopoverAnimated: NO];
        
        isItemEmpl = false;
        
        NSMutableDictionary *temp = [NSMutableDictionary new];
        [temp setValue:departmentFld.text forKey:kItemDept];
        [temp setValue:subDepartmentFld.text forKey:kItemSubDept];
        [temp setValue:salesPersonIdFld.text forKey:kItemSpecificEmplId];
        [temp setValue:salesPersonNameFld.text forKey:kItemSpecificEmplName];
        
        employeeDic[pluCodeList[sender.tag]] = temp;
        
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
}

-(void)cancelButtonPressed {
    @try {
        AudioServicesPlaySystemSound(soundFileObject);
        isItemEmpl = false;
        
        [salesInfoPopUp dismissPopoverAnimated: YES];
        
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
}




-(void)topBarCancelButton {
    @try {
        AudioServicesPlaySystemSound(soundFileObject);
        
        isItemEmpl = false;
        
        [salesInfoPopUp dismissPopoverAnimated: YES];
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
}


-(void)populateMenuView {
    
    @try {
        
        
        AudioServicesPlaySystemSound(soundFileObject);
        
        
        int count = 5;
        
        
        PopOverViewController  * customerInfoPopUp = [[PopOverViewController alloc] init];
        
        UIView *customView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 200,count*40)];
        customView.opaque = NO;
        customView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:1.0f];
        customView.layer.borderColor = [UIColor lightGrayColor].CGColor;
        customView.layer.borderWidth = 2.0f;
        [customView setHidden:NO];
        
        menuTable = [[UITableView alloc] init];
        menuTable.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        menuTable.dataSource = self;
        menuTable.delegate = self;
        (menuTable.layer).borderWidth = 1.0f;
        menuTable.layer.cornerRadius = 3;
        menuTable.layer.borderColor = [UIColor grayColor].CGColor;
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            menuTable.frame = CGRectMake(0, 0,450,450);
            
        }
        
        
        [customView addSubview:menuTable];
        
        customerInfoPopUp.view = customView;
        
        
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            customerInfoPopUp.preferredContentSize =  CGSizeMake(customView.frame.size.width, customView.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            [popover presentPopoverFromBarButtonItem:self.navigationItem.leftBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            popOver= popover;
        }
        
        else {
            
            customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            // popover.contentViewController.view.alpha = 0.0;
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            popOver = popover;
        }
        
        //        UIGraphicsBeginImageContext(customView.frame.size);
        //        [[UIImage imageNamed:@"CustomerView.png"] drawInRect:customView.bounds];
        //        UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
        //        UIGraphicsEndImageContext();
        //        customView.backgroundColor = [UIColor colorWithPatternImage:image];
        //
        
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
    
}

-(BOOL)isSegmentAcessible:(NSString*)segmentActivity appDocument:(NSString*)appDocument {
    
    BOOL isAcessible = FALSE;
    
    @try {
        
        int permission = [WebServiceUtility checkAccessibilityFor:segmentActivity appDocument:appDocument];
        
        if (permission == kWriteVal || permission == kReadWrite) {
            
            isAcessible = TRUE;
        }
        else {
            isAcessible = FALSE;
        }
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    @finally {
        
    }
    
    return isAcessible;
}
#pragma mark Get products by category:

-(void)getProductsByCategory {
    @try {
        [HUD show:YES];
        [HUD setHidden:NO];
        
        categoriesArr  = [NSMutableArray new];
        
        NSMutableDictionary * productDic = [[NSMutableDictionary alloc] init];
        
        [productDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [productDic setValue:@0 forKey:@"startIndexStr"];
        [productDic setValue:presentLocation forKey:@"storeLocation"];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:productDic options:0 error:&err];
        NSString * getProductsJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        NSLog(@"%@--json product Categories String--",getProductsJsonString);
        
        WebServiceController * webServiceController = [WebServiceController new];
        webServiceController.getCategoriesDelegate = self;
        [webServiceController getProductsByCategory:getProductsJsonString];
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
}


-(void)getProductsByCategorySuccessResponse:(NSDictionary *)successDictionary {
    @try {
        
        for (NSDictionary * categoryDic in [successDictionary valueForKey:kcategoriesList]) {
            
            NSMutableDictionary * itemDic  = [[NSMutableDictionary alloc]init];
            
            [itemDic setValue:[categoryDic valueForKey:kcategory ] forKey:kcategory];
            
            NSMutableArray * locArr = [NSMutableArray new];
            
            NSMutableArray *skuListArr = [NSMutableArray new];
            
            for (NSDictionary *dic in [categoryDic valueForKey:ksubCategoriesList]) {
                if ([dic.allKeys containsObject:kskuIdList] && ![[dic valueForKey:kskuIdList] isKindOfClass:[NSNull class]]) {
                    [skuListArr addObject:[dic valueForKey:kskuIdList]];
                }
            }
            
            //checking whether object exist
            
            // NSArray *skuList = [[categoryDic valueForKey:ksubCategoriesList] valueForKey:kskuIdList];
            
            if(skuListArr.count){
                
                for(NSArray * tempArr in skuListArr){
                    for (NSDictionary *locDic in tempArr) {
                        
                        NSMutableDictionary * skuDic  = [[NSMutableDictionary alloc]init];
                        
                        [skuDic setValue:[locDic valueForKey:kskuDescription ]forKey:kskuDescription];
                        
                        [skuDic setValue:[locDic valueForKey:ITEM_SKU ]forKey:ITEM_SKU];
                        
                        
                        [locArr addObject:skuDic];
                    }
                    
                    
                }
            }
            
            [itemDic setValue:locArr forKey:kskuIdList];
            
            
            [categoriesArr addObject:itemDic];
            
            
        }
        
        [self displayProductMenu:nil];
        
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@-----exception in handling the response",exception);
        
    }
    @finally {
        // [productMenuTbl reloadData];
        [HUD setHidden:YES];
    }
}

-(void)getProductsByCategoryErrorResponse:(NSString *)errorResponse{
    @try {
        [HUD setHidden:YES];
        
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
    
}


-(void)displayProductMenu:(UIButton *)sender{
    
    AudioServicesPlaySystemSound(soundFileObject);
    
    
    @try {
        
        if (((categoriesArr== nil) ||  (categoriesArr.count == 0)  )){
            
            if (!isOfflineService) {
                [self getProductsByCategory];
                return;
            }
            else {
                
                [self getOfflineMenuProducts];
                
            }
            
        }
        isGridView = NO;
        
        PopOverViewController  * productMenu = [[PopOverViewController alloc] init];
        
        productmenuView = [[UIView alloc] initWithFrame:CGRectMake(productMenuBtn.frame.origin.x,BillField.frame.origin.y,BillField.frame.size.width+30,650)];
        productmenuView.opaque = NO;
        productmenuView.backgroundColor = [UIColor blackColor];
        productmenuView.layer.borderColor = [UIColor whiteColor].CGColor;
        productmenuView.layer.borderWidth = 1.0f;
        [productmenuView setHidden:NO];
        
        
        //creation of UIButtons.......
        UIImage *selctedListImage = [UIImage imageNamed:@"list_select.png"];
        UIImage *selectedGirdImage = [UIImage imageNamed:@"grid_brown.png"];
        
        listViewBtn = [[UIButton alloc] init];
        [listViewBtn setImage:selctedListImage forState:UIControlStateNormal];
        [listViewBtn addTarget:self
                        action:@selector(showRespectiveView:) forControlEvents:UIControlEventTouchDown];
        listViewBtn.tag = 2;
        
        gridViewBtn = [[UIButton alloc] init];
        [gridViewBtn setImage:selectedGirdImage forState:UIControlStateNormal];
        [gridViewBtn addTarget:self
                        action:@selector(showRespectiveView:) forControlEvents:UIControlEventTouchDown];
        gridViewBtn.tag = 4;
        
        
        menuHeaderView = [[UILabel alloc] init];
        menuHeaderView.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"Gradient.png"]];
        menuHeaderView.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:24.0f];
        menuHeaderView.text = @"Product Menu";
        menuHeaderView.textColor = [UIColor colorWithRed:0.00 green:0.68 blue:0.94 alpha:1.0];
        menuHeaderView.textAlignment = NSTextAlignmentCenter;
        
        CALayer *bottomBorder = [CALayer layer];
        
        bottomBorder.frame = CGRectMake(0.0f, 60.0f, menuHeaderView.frame.size.width, 1.0f);
        bottomBorder.backgroundColor = [UIColor grayColor].CGColor;
        bottomBorder.opacity = 5.0f;
        [menuHeaderView.layer addSublayer:bottomBorder];
        
        //creation of Product menu  table...
        productMenuTbl = [[UITableView alloc] init];
        productMenuTbl.backgroundColor  = [UIColor clearColor];
        productMenuTbl.layer.cornerRadius = 4.0;
        productMenuTbl.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
        
        productMenuTbl.dataSource = self;
        productMenuTbl.delegate = self;
        
        [productmenuView addSubview:HUD];
        HUD.labelText = @"Loading Categories..";
        
        [productmenuView addSubview:menuHeaderView];
        [productmenuView addSubview:listViewBtn];
        [productmenuView addSubview:gridViewBtn];
        [productmenuView addSubview:productMenuTbl];
        
        // sub view frames:
        
        menuHeaderView.frame = CGRectMake(0, 0, productmenuView.frame.size.width, 50);
        
        listViewBtn.frame =  CGRectMake(menuHeaderView.frame.origin.x + menuHeaderView.frame.size.width - 80, menuHeaderView.frame.origin.y + 10, (menuHeaderView.frame.size.height/2) + 10,(menuHeaderView.frame.size.height/2) + 10);
        
        gridViewBtn.frame =  CGRectMake(listViewBtn.frame.origin.x +  listViewBtn.frame.size.width + 10, listViewBtn.frame.origin.y,  listViewBtn.frame.size.width, listViewBtn.frame.size.height);
        
        productMenuTbl.frame = CGRectMake(0, menuHeaderView.frame.origin.y+menuHeaderView.frame.size.height, productmenuView.frame.size.width, productmenuView.frame.size.height);
        
        productMenu.view = productmenuView;
        
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            productMenu.preferredContentSize =  CGSizeMake(productmenuView.frame.size.width, productmenuView.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:productMenu];
            
            [popover presentPopoverFromRect:productMenuBtn.frame inView:self.view permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            
            productmenuInfoPopUp = popover;
            
        }
        
        else {
            
            //            productMenu.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:productMenu];
            
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            
            productmenuInfoPopUp = popover;
            
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
        
    }
    
}


-(void)showRespectiveView:(UIButton *)sender{
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if((sender.tag == 2 && sender == listViewBtn) || (sender.tag == 4 && sender == gridViewBtn)){
            
            isGridView = YES;
            UIImage *deselecedListImage = [UIImage imageNamed:@"list_brown.png"];
            UIImage *selectedGirdImage = [UIImage imageNamed:@"grid_select.png"];
            
            [listViewBtn setImage:deselecedListImage forState:UIControlStateNormal];
            [gridViewBtn setImage:selectedGirdImage forState:UIControlStateNormal];
            
            listViewBtn.tag  = 4;
            gridViewBtn.tag = 2;
            [productMenuTbl reloadData];
        }
        else if((sender.tag == 4 && sender == listViewBtn) || (sender.tag == 2 && sender == gridViewBtn)){
            
            isGridView = NO;
            
            UIImage *selctedListImage = [UIImage imageNamed:@"list_select.png"];
            UIImage *deselectedGirdImage = [UIImage imageNamed:@"grid_brown.png"];
            
            [listViewBtn setImage:selctedListImage forState:UIControlStateNormal];
            [gridViewBtn setImage:deselectedGirdImage forState:UIControlStateNormal];
            
            listViewBtn.tag  = 2;
            gridViewBtn.tag = 4;
            
            [productMenuTbl reloadData];
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

- (void)showListOfItems:(UIButton *) sender {
    @try {
        //Play Audio for button touch....
        AudioServicesPlaySystemSound (soundFileObject);
        
        if ([[categoriesArr[sender.tag]valueForKey:kskuIdList] count]==0) {
            return;
        }
        
        subCategoriesArr = [NSMutableArray new];
        subCategoriesArr = [categoriesArr[sender.tag]valueForKey:kskuIdList];
        
        NSIndexPath * path =[NSIndexPath indexPathForRow: 0 inSection:sender.tag];
        
        if (path.row == 0) {
            
            UITableViewCell * cell2 = [productMenuTbl cellForRowAtIndexPath:path];
            
            if ([path isEqual:self.selectIndex]) {
                self.isOpen = NO;
                
                for (UIButton *button in cell2.contentView.subviews) {
                    
                    if(button.frame.origin.x == viewListOfItemsBtn.frame.origin.x){
                        
                        UIImage * availiableItemsListImage = [UIImage imageNamed:@"brown_right_arrow.png"];
                        
                        [button setBackgroundImage:availiableItemsListImage forState:UIControlStateNormal];
                        
                    }
                }
                
                [self didSelectCellRowFirstDo:NO nextDo:NO];
                self.selectIndex = nil;
                
            }else
            {
                if (!self.selectIndex) {
                    self.selectIndex = path;
                    
                    for (UIButton *button in cell2.contentView.subviews) {
                        
                        if(button.frame.origin.x == viewListOfItemsBtn.frame.origin.x){
                            
                            UIImage * availiableItemsListImage = [UIImage imageNamed:@"brown_down_arrow.png"];
                            
                            [button setBackgroundImage:availiableItemsListImage forState:UIControlStateNormal];
                            
                        }
                    }
                    
                    [self didSelectCellRowFirstDo:YES nextDo:NO];
                    
                }else
                {
                    selectSectionIndex = path;
                    
                    for (UIButton * button in cell2.contentView.subviews) {
                        
                        if(button.frame.origin.x == viewListOfItemsBtn.frame.origin.x){
                            
                            UIImage * availiableItemsListImage = [UIImage imageNamed:@"brown_right_arrow.png"];
                            
                            [button setBackgroundImage:availiableItemsListImage forState:UIControlStateNormal];
                        }
                        
                    }
                    
                    [self didSelectCellRowFirstDo:NO nextDo:YES];
                }
                
            }
            
        }
        
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}


/**
 * @description  it is an delegate method. it will be called for every cell.
 * @date         04/05/2016
 * @method       tableView: willDisplayCell: forRowAtIndexPath:
 * @author       Bhargav
 * @param        UITableViewCell
 * @param        NSIndexPath
 * @return
 * @verified By
 * @verified On
 *
 */

- (void)didSelectCellRowFirstDo:(BOOL)firstDoInsert nextDo:(BOOL)nextDoInsert{
    @try {
        
        self.isOpen = firstDoInsert;
        
        [productMenuTbl beginUpdates];
        
        NSInteger section = self.selectIndex.section;
        int contentCount;
        
        contentCount =1;
        
        NSMutableArray* rowToInsert = [[NSMutableArray alloc] init];
        for (NSUInteger i = 1; i < contentCount+1 ; i++) {
            NSIndexPath* indexPathToInsert = [NSIndexPath indexPathForRow:i inSection:section];
            [rowToInsert addObject:indexPathToInsert];
        }
        
        if (firstDoInsert)
        {
            
            [productMenuTbl  insertRowsAtIndexPaths:rowToInsert withRowAnimation:UITableViewRowAnimationTop];
        }
        else
        {
            [productMenuTbl deleteRowsAtIndexPaths:rowToInsert withRowAnimation:UITableViewRowAnimationTop];
        }
        
        [productMenuTbl endUpdates];
        
        if (nextDoInsert) {
            self.isOpen = YES;
            self.selectIndex = selectSectionIndex;
            
            UITableViewCell *cell2 = [productMenuTbl cellForRowAtIndexPath:selectIndex];
            
            for (UIButton *button in cell2.contentView.subviews) {
                
                if(button.frame.origin.x == viewListOfItemsBtn.frame.origin.x){
                    
                    UIImage * availiableSuppliersListImage = [UIImage imageNamed:@"brown_down_arrow.png"];
                    
                    [button setBackgroundImage:availiableSuppliersListImage forState:UIControlStateNormal];
                    
                }
                
            }
            [self didSelectCellRowFirstDo:YES nextDo:NO];
        }
        if (self.isOpen)
            [productMenuTbl scrollToRowAtIndexPath:selectIndex atScrollPosition:UITableViewScrollPositionTop animated:YES];
        
    }    @catch (NSException *exception) {
        NSLog(@"%@---",exception);
    }
    @finally {
        
    }
}


/**
 * @description  here we are checking whether the object is null or not
 * @date         17/01/2016
 * @method       checkGivenValueIsNullOrNil
 * @author       Bhargav
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

- (id)checkGivenValueIsNullOrNil:(id)inputValue defaultReturn:(NSString *)returnStirng {
    
    @try {
        
        if ([inputValue isKindOfClass:[NSNull class]] || inputValue == nil) {
            return returnStirng;
        }
        else {
            return inputValue;
        }
    } @catch (NSException *exception) {
        return @"--";
    }
    
}



#pragma -mark collection view delegate methods

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{
    
    if(collectionView == menuCategoriesView){
        
        return [[menuCategoriesDic valueForKey:CATEGORY_NAMES] count];
    }
    else if(collectionView == menuCategoriesItemsCollectionView){
        
        if(menuCategoriesView.tag == 0){
            
            int  totalCount = 0;
            
            @try {
                for (NSString * categoryStr in [menuCategoriesDic valueForKey:CATEGORY_NAMES]){
                    if(![categoryStr.uppercaseString isEqualToString:ALL]){
                        totalCount = totalCount + (int)[[menuCategoriesDic valueForKey:categoryStr] count];
                    }
                }
            } @catch (NSException *exception) {
                
            }
            return totalCount;
        }
        else{
            return [[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][menuCategoriesView.tag]] count];
        }
    }
    else
        return subCategoriesArr.count;
    
}


- (UICollectionViewCell*)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    
    if(collectionView == menuCategoriesView){
        UICollectionViewCell * menuCategoriesCell;
        
        @try {
            static NSString *identifier = @"menu_categories_cell";
            
            menuCategoriesCell = [collectionView dequeueReusableCellWithReuseIdentifier:identifier forIndexPath:indexPath];
            
            if ((menuCategoriesCell.contentView).subviews){
                for (UIView *subview in (menuCategoriesCell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            if (!menuCategoriesCell) {
                
                menuCategoriesCell = [[UICollectionViewCell alloc] init];
            }
            
            UILabel * categoryNameLbl = [[UILabel alloc] init];
            categoryNameLbl.frame = CGRectMake(0, 0, menuCategoriesCell.frame.size.width, menuCategoriesCell.frame.size.height);
            categoryNameLbl.textColor = [UIColor blackColor];
            categoryNameLbl.numberOfLines = 1;
            categoryNameLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20.0];
            categoryNameLbl.textAlignment = NSTextAlignmentCenter;
            categoryNameLbl.lineBreakMode = NSLineBreakByTruncatingTail;
            
            @try{
                NSString * str = [self checkGivenValueIsNullOrNil:[menuCategoriesDic valueForKey:CATEGORY_NAMES][indexPath.row] defaultReturn:@""];
                categoryNameLbl.text = str.uppercaseString;
            }
            @catch(NSException * e){
                
            }
            
            if(menuCategoriesView.tag == indexPath.row){
                
                categoryNameLbl.backgroundColor = [UIColor whiteColor];
            }
            else{
                
                categoryNameLbl.backgroundColor = [UIColor clearColor];
                menuCategoriesCell.contentView.layer.borderWidth = 1;
                menuCategoriesCell.contentView.layer.borderColor = [[UIColor blackColor] colorWithAlphaComponent:0.4].CGColor;
            }
            
            [menuCategoriesCell.contentView addSubview:categoryNameLbl];
        } @catch (NSException *exception) {
            
        } @finally {
            
            return menuCategoriesCell;
        }
    }
    else if (collectionView == menuCategoriesItemsCollectionView){
        UICollectionViewCell * cell;
        
        @try {
            static NSString *identifier = @"menu_categories_item_cell";
            
            cell = [collectionView dequeueReusableCellWithReuseIdentifier:identifier forIndexPath:indexPath];
            
            UIButton * recipeImageView = [[UIButton alloc] init];
            
            if ((cell.contentView).subviews){
                for (UIView *subview in (cell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            if (!cell) {
                
                cell = [[UICollectionViewCell alloc] init];
            }
            
            [recipeImageView setBackgroundImage:[UIImage imageNamed:@"Button1.png"] forState:UIControlStateNormal] ;
            recipeImageView.backgroundColor = [UIColor clearColor];
            recipeImageView.titleLabel.font = [UIFont boldSystemFontOfSize:20.0];
            [recipeImageView setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            recipeImageView.layer.cornerRadius = recipeImageView.frame.size.height/2.0;
            recipeImageView.tag = indexPath.row;
            //        [recipeImageView addTarget:self action:@selector(addItemToCart:) forControlEvents:UIControlEventTouchUpInside];
            //
            UILabel *name = [[UILabel alloc] init];
            name.textColor = [[UIColor whiteColor] colorWithAlphaComponent:0.6 ];
            name.numberOfLines = 2;
            name.font = [UIFont fontWithName:TEXT_FONT_NAME size:16.0];
            name.textAlignment = NSTextAlignmentCenter;
            
            [cell.contentView addSubview:recipeImageView];
            [cell.contentView addSubview:name];
            
            cell.layer.borderColor = [UIColor whiteColor].CGColor;
            cell.layer.borderWidth = 2;
            cell.layer.cornerRadius= 0.5;
            
            name.backgroundColor = [UIColor colorWithRed:37.0/255.0 green:37.0/255.0 blue:37.0/255.0 alpha:1.0];
            name.textColor = [UIColor colorWithRed:128.0/255.0 green:128.0/255.0 blue:120.0/255.0 alpha:1.0];
            
            name.frame = CGRectMake( 0, cell.frame.size.height - 50, cell.frame.size.width, 50);
            recipeImageView.frame = CGRectMake( (cell.frame.size.width - 50)/2, (cell.frame.size.height - 90)/2, 50, 50);
            
            
            @try {
                [recipeImageView setTitle:[NSString stringWithFormat:@"%ld", indexPath.row+1] forState:UIControlStateNormal];
                cell.tag = indexPath.row;
                
                NSString * itemNameStr = @"";
                
                if(menuCategoriesView.tag == 0){
                    
                    int findIndexPath = 0;
                    
                    for(int i = 1; i < menuCategoriesDic.allKeys.count; i++){
                        
                        findIndexPath = findIndexPath + (int)[[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][i]] count];
                        if(findIndexPath > indexPath.row){
                            menuCategoriesItemsCollectionView.tag = i;
                            break;
                        }
                    }
                    
                    int objectIndex = (int)indexPath.row;
                    
                    for (int j = (int)menuCategoriesItemsCollectionView.tag - 1;j > 0; j--){
                        objectIndex = objectIndex - ((int) [[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][j]] count]);
                    }
                    
                    itemNameStr = [[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][menuCategoriesItemsCollectionView.tag]][objectIndex] valueForKey:ITEM__DESC];
                    
                    
                    
                    //                    for(int i = 1; i < [[menuCategoriesDic allKeys] count]; i++){
                    //
                    //                        if(i == 1 && [[menuCategoriesDic valueForKey:[[menuCategoriesDic valueForKey:CATEGORY_NAMES] objectAtIndex:i]] count] > indexPath.row){
                    //                            itemNameStr = [[[menuCategoriesDic valueForKey:[[menuCategoriesDic valueForKey:CATEGORY_NAMES] objectAtIndex:i]] objectAtIndex:indexPath.row] valueForKey:ITEM__DESC];
                    //                            break;
                    //                        }
                    //                        else if(i > 1){
                    ////                        if([[menuCategoriesDic valueForKey:[[menuCategoriesDic valueForKey:CATEGORY_NAMES] objectAtIndex:i]] count] > indexPath.row){
                    //                            int objectIndex = (int)indexPath.row;
                    //
                    //                            int j = 0;
                    //                            for (j = i-1;j > 0; j--)
                    //                                objectIndex = objectIndex - ((int) [[menuCategoriesDic valueForKey:[[menuCategoriesDic valueForKey:CATEGORY_NAMES] objectAtIndex:j]] count]);
                    //
                    //                            itemNameStr = [[[menuCategoriesDic valueForKey:[[menuCategoriesDic valueForKey:CATEGORY_NAMES] objectAtIndex:i]] objectAtIndex:objectIndex] valueForKey:ITEM__DESC];
                    //                            break;
                    ////                        }
                    //                        }
                    //                    }
                }
                else{
                    
                    itemNameStr = [[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][menuCategoriesView.tag]][indexPath.row] valueForKey:ITEM__DESC];
                }
                name.text = itemNameStr;
                
                //                if([subCategoriesArr count] > indexPath.row){
                //                    NSDictionary *dic = [subCategoriesArr objectAtIndex:indexPath.row];
                //                    name.text =[dic valueForKey:kskuDescription];
                //                }
                //                else{
                //                    name.text = @"--";
                //                }
            }
            @catch (NSException *exception) {
                
            }
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                
                if (version>=8.0) {
                    recipeImageView.frame = CGRectMake(5, 0, 30, 30);
                    name.frame = CGRectMake(5, 30, 40, 20);
                    recipeImageView.layer.cornerRadius = recipeImageView.frame.size.height/2.0;
                    name.font = [UIFont fontWithName:TEXT_FONT_NAME size:8];
                    recipeImageView.titleLabel.font = [UIFont boldSystemFontOfSize:12];
                }
                else {
                    
                    recipeImageView.frame = CGRectMake(5, 0, 5, 5);
                    name.frame = CGRectMake(10, 10, 40, 30);
                }
            }
        }
        @catch (NSException *exception) {
            
        }
        @finally {
            
            return cell;
        }
    }
    else{
        UICollectionViewCell * cell;
        
        @try {
            static NSString *identifier = @"Collection_cell";
            
            cell = [collectionView dequeueReusableCellWithReuseIdentifier:identifier forIndexPath:indexPath];
            
            UIButton * recipeImageView = [[UIButton alloc] init];
            
            if ((cell.contentView).subviews){
                for (UIView *subview in (cell.contentView).subviews) {
                    [subview removeFromSuperview];
                }
            }
            
            if (!cell) {
                
                cell = [[UICollectionViewCell alloc] init];
            }
            
            [recipeImageView setBackgroundImage:[UIImage imageNamed:@"Button1.png"] forState:UIControlStateNormal] ;
            recipeImageView.frame = CGRectMake(35, 0, 46, 46);
            recipeImageView.backgroundColor = [UIColor clearColor];
            recipeImageView.titleLabel.font = [UIFont boldSystemFontOfSize:20.0];
            [recipeImageView setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            recipeImageView.layer.cornerRadius = recipeImageView.frame.size.height/2.0;
            [cell.contentView addSubview:recipeImageView];
            recipeImageView.tag = indexPath.row;
            //        [recipeImageView addTarget:self action:@selector(addItemToCart:) forControlEvents:UIControlEventTouchUpInside];
            //
            UILabel *name = [[UILabel alloc] init];
            name.frame = CGRectMake(15, 45, 100,35);
            name.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.6 ];
            name.numberOfLines = 2;
            name.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:16.0];
            [cell.contentView addSubview:name];
            
            
            @try {
                [recipeImageView setTitle:[NSString stringWithFormat:@"%ld", indexPath.row+1] forState:UIControlStateNormal];
                
                if(subCategoriesArr.count > indexPath.row){
                    NSDictionary *dic = subCategoriesArr[indexPath.row];
                    name.text =[dic valueForKey:kskuDescription];
                }
                else{
                    name.text = @"--";
                    
                    
                    
                }
            }
            @catch (NSException *exception) {
                
            }
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                
                if (version>=8.0) {
                    recipeImageView.frame = CGRectMake(5, 0, 30, 30);
                    name.frame = CGRectMake(5, 30, 40, 20);
                    recipeImageView.layer.cornerRadius = recipeImageView.frame.size.height/2.0;
                    name.font = [UIFont fontWithName:@"ArialRoundedMT" size:8];
                    recipeImageView.titleLabel.font = [UIFont boldSystemFontOfSize:12];
                    
                }
                else {
                    
                    recipeImageView.frame = CGRectMake(5, 0, 5, 5);
                    name.frame = CGRectMake(10, 10, 40, 30);
                }
            }
            
        }
        @catch (NSException *exception) {
            
        }
        @finally {
            
            return cell;
        }
    }
    
    
}
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath {
    CGSize s;
    @try {
        if(collectionView == menuCategoriesView){
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                    
                    CGRect sizeDynamic;
                    
                    @try{
                        
                        NSString * description = [menuCategoriesDic valueForKey:CATEGORY_NAMES][indexPath.row];
                        sizeDynamic = [description boundingRectWithSize:CGSizeMake(menuCategoriesView.frame.size.width, 0)
                                                                options:(NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingUsesFontLeading)
                                                             attributes:@{NSFontAttributeName : [UIFont fontWithName:TEXT_FONT_NAME size:20]}
                                                                context:nil];
                        //                        sizeDynamic = [[[menuCategoriesDic valueForKey:CATEGORY_NAMES] objectAtIndex:indexPath.row] sizeWithFont:[UIFont fontWithName:TEXT_FONT_NAME size:20] constrainedToSize:CGSizeMake(CGFLOAT_MAX,CGFLOAT_MAX) lineBreakMode:NSLineBreakByWordWrapping];
                    }
                    @catch(NSException * exception){
                        
                    }
                    float calculatedWidth = menuCategoriesView.frame.size.width/5;
                    if(calculatedWidth <  sizeDynamic.size.width)
                        calculatedWidth = sizeDynamic.size.width + 10;
                    
                    s = CGSizeMake( calculatedWidth, menuCategoriesView.frame.size.height);
                }
                else {
                    s = CGSizeMake(menuCategoriesView.frame.size.width/5, menuCategoriesView.frame.size.height - 10);
                }
                
            }
            else {
                if (version >=8.0) {
                    s = CGSizeMake(menuCategoriesView.frame.size.width/5, menuCategoriesView.frame.size.height - 10);
                    
                    
                }
                else {
                    s = CGSizeMake(menuCategoriesView.frame.size.width/5, menuCategoriesView.frame.size.height - 10);
                }
            }
        }
        else if (collectionView == menuCategoriesItemsCollectionView){
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                    
                    s = CGSizeMake( (menuCategoriesItemsCollectionView.frame.size.width - 10)/5, menuCategoriesItemsCollectionView.frame.size.height/4);
                }
                else {
                    s = CGSizeMake( menuCategoriesItemsCollectionView.frame.size.width/5, menuCategoriesItemsCollectionView.frame.size.height/5);
                }
                
            }
            else {
                if (version >=8.0) {
                    s = CGSizeMake( menuCategoriesItemsCollectionView.frame.size.width/5, menuCategoriesItemsCollectionView.frame.size.height/5);
                    
                    
                }
                else {
                    s = CGSizeMake( menuCategoriesItemsCollectionView.frame.size.width/5, menuCategoriesItemsCollectionView.frame.size.height/5);
                }
            }
        }
        else{
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                    
                    s = CGSizeMake([UIScreen mainScreen].bounds.size.width/4 - 180, [UIScreen mainScreen].bounds.size.height/4-135);
                    NSLog(@"%f-----%f",s.height,s.width);
                }
                else {
                    s = CGSizeMake([UIScreen mainScreen].bounds.size.width/4 - 130, [UIScreen mainScreen].bounds.size.height/4-150);
                }
                
            }
            else {
                if (version >=8.0) {
                    
                    s = CGSizeMake([UIScreen mainScreen].bounds.size.width/5 - 50, [UIScreen mainScreen].bounds.size.height/4-100);
                }
                else {
                    s = CGSizeMake([UIScreen mainScreen].bounds.size.width/4 - 130, [UIScreen mainScreen].bounds.size.height/4-150);
                }
            }
        }
    } @catch (NSException *exception) {
        
    }
    return s;
}

// 3
//- (UIEdgeInsets)collectionView:
//(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout insetForSectionAtIndex:(NSInteger)section {
//    return UIEdgeInsetsMake(5, 0, 5, 5);
//}

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    
    @try {
        if(collectionView == menuCategoriesView){
            
            @try {
                
                //                if(menuCategoriesView.tag != indexPath.row){
                //
                //                NSIndexPath * tempPath  = [NSIndexPath indexPathForItem:menuCategoriesView.tag inSection:0];
                //
                //                UICollectionViewCell * tempCell = [menuCategoriesView cellForItemAtIndexPath:tempPath];
                //                for (id subView in tempCell.contentView.subviews) {
                //                    if([subView isKindOfClass:[UILabel class]]){
                //                        UILabel * tempLbl = (UILabel *)subView;
                //                        tempLbl.backgroundColor = [UIColor clearColor];
                //                    }
                //                }
                //
                //                tempCell = [menuCategoriesView cellForItemAtIndexPath:indexPath];
                //
                //                for (id subView in tempCell.contentView.subviews) {
                //                    if([subView isKindOfClass:[UILabel class]]){
                //                        UILabel * tempLbl = (UILabel *)subView;
                //                        tempLbl.backgroundColor = [UIColor whiteColor];
                //                    }
                //                }
                //
                //                menuCategoriesView.tag  = indexPath.row;
                //                }
                
                
                menuCategoriesView.tag  = indexPath.row;
                
                [menuCategoriesView reloadData];
                [menuCategoriesView scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:menuCategoriesView.tag  inSection:0] atScrollPosition:UICollectionViewScrollPositionNone   animated:YES];
                
            } @catch (NSException *exception) {
                
            } @finally {
                [menuCategoriesItemsCollectionView reloadData];
            }
        }
        else if (collectionView == menuCategoriesItemsCollectionView){
            
            @try {
                
                NSString * itemIdStr = @"";
                if(menuCategoriesView.tag == 0){
                    
                    int findIndexPath = 0;
                    
                    for(int i = 1; i < menuCategoriesDic.allKeys.count; i++){
                        
                        findIndexPath = findIndexPath + (int)[[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][i]] count];
                        if(findIndexPath > indexPath.row){
                            menuCategoriesItemsCollectionView.tag = i;
                            break;
                        }
                    }
                    
                    int objectIndex = (int)indexPath.row;
                    
                    for (int j = (int)menuCategoriesItemsCollectionView.tag - 1;j > 0; j--){
                        objectIndex = objectIndex - ((int) [[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][j]] count]);
                    }
                    
                    itemIdStr = [[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][menuCategoriesItemsCollectionView.tag]][objectIndex] valueForKey:PLU_CODE];
                    selected_SKID = [[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][menuCategoriesItemsCollectionView.tag]][objectIndex] valueForKey:ITEM_NAME];
                }
                else{
                    itemIdStr = [[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][menuCategoriesView.tag]][indexPath.row] valueForKey:PLU_CODE];
                    selected_SKID = [[menuCategoriesDic valueForKey:[menuCategoriesDic valueForKey:CATEGORY_NAMES][menuCategoriesItemsCollectionView.tag]][indexPath.row] valueForKey:ITEM_NAME];
                }
                
                if (!isOfflineService) {
                    
                    [HUD setHidden:NO];
                    
                    @try {
                        
                        NSDictionary * campaigndictionary_;
                        
                        if(isToCallApplyCampaigns && !isNewReturnBill){
                            
                            skuIdList = [NSMutableArray new];
                            pluCodeList = [NSMutableArray new];
                            unitPriceList = [NSMutableArray new];
                            qtyList = [NSMutableArray new];
                            totalPriceList = [NSMutableArray new];
                            itemStatusList = [NSMutableArray new];
                            itemDiscountList = [NSMutableArray new];
                            
                            for (int i = 0; i < cartTotalItems.count; i++) {
                                NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                                [skuIdList addObject:itemDetails[0]];
                                [pluCodeList addObject:itemDetails[8]];
                                [unitPriceList addObject:@([itemDetails[4] floatValue])];
                                [qtyList addObject:@([itemDetails[5] floatValue])];
                                [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
                                if ([isVoidedArray[i] boolValue]) {
                                    [itemStatusList addObject:@"void"];
                                }
                                else {
                                    [itemStatusList addObject:@""];
                                }
                                [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
                                
                            }
                            
                            
                            
                            NSArray *loyaltyKeys = @[@"storeLocation",@"requestHeader",@"skuIdArrList",@"pluCodeArrList",@"unitPriceArrList",@"qtyArrList",@"totalPriceArrList",@"itemStatusArrList",@"productOptionalDiscountArr",@"totalBillAmount",@"quantity",@"phonenumber",@"purchaseChannel"];
                            
                            NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],skuIdList,pluCodeList,unitPriceList,qtyList,totalPriceList,itemStatusList, itemDiscountList, totalTxt.text,@"1",custmerPhNum.text,@"POS"];
                            
                            campaigndictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                        }
                        else{
                            
                            campaigndictionary_ = [[NSDictionary alloc] init];
                        }
                        
                        //changed by bhargav on 04/10/2017....
                        
                        //                    NSArray *objects = [NSArray arrayWithObjects:[NSString stringWithFormat:@"%@",[json objectForKey:@"skuID"]],[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],campaigndictionary_,[NSNumber numberWithBool:true], nil];
                        
                        Boolean isCampaignsRequired = false;
                        
                        if (isToCallApplyCampaigns) {
                            isCampaignsRequired = true;
                        }
                        
                        NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns",@"cartDetails",kZeroStockBillCheck,IS_CAMPAIGNS_REQUIRED];
                        
                        NSArray *objects = @[itemIdStr,[RequestHeader getRequestHeader],presentLocation,@YES,campaigndictionary_,@true,[NSNumber numberWithBool:isCampaignsRequired]];
                        
                        //upto here on 04/10/2017....
                        
                        
                        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                        
                        NSError * err;
                        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
                        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                        
                        //            getSkuid.skuID = salesReportJsonString;
                        
                        skListTable.frame = CGRectMake(skListTable.frame.origin.x, skListTable.frame.origin.y, skListTable.frame.size.width, 0);
                        WebServiceController *webServiceController = [WebServiceController new];
                        webServiceController.getSkuDetailsDelegate = self;
                        [webServiceController getSkuDetailsWithData:salesReportJsonString];
                        [tempSkuArrayList removeAllObjects];
                        [filteredSkuArrayList removeAllObjects];
                        [skuArrayList removeAllObjects];
                        
                    }
                    @catch (NSException *exception) {
                        [HUD setHidden:YES];
                        
                    }
                }
                else {
                    [HUD setHidden:NO];
                    [self getOfflineProductWithSearchSkuId:selected_SKID withPlucode:itemIdStr];
                }
                
                
                
            } @catch (NSException *exception) {
                [HUD setHidden:YES];
                
            } @finally {
                
            }
        }
        else if (collectionView == gridView) {
            
            if (!isOfflineService) {
                
                NSDictionary *detailsDic = subCategoriesArr[indexPath.row];
                
                NSString * skuIdString = [NSString stringWithFormat:@"%@",detailsDic[@"skuId"]];
                
                selected_SKID = [skuIdString copy];
                
                NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns",@"cartDetails"];
                
                skuIdList = [NSMutableArray new];
                pluCodeList = [NSMutableArray new];
                unitPriceList = [NSMutableArray new];
                qtyList = [NSMutableArray new];
                totalPriceList = [NSMutableArray new];
                itemStatusList = [NSMutableArray new];
                itemDiscountList = [NSMutableArray new];
                
                for (int i = 0; i < cartTotalItems.count; i++) {
                    NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                    [skuIdList addObject:itemDetails[0]];
                    [pluCodeList addObject:itemDetails[8]];
                    [unitPriceList addObject:@([itemDetails[4] floatValue])];
                    [qtyList addObject:@([itemDetails[5] floatValue])];
                    [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
                    if ([isVoidedArray[i] boolValue]) {
                        [itemStatusList addObject:@"void"];
                    }
                    else {
                        [itemStatusList addObject:@""];
                    }
                    [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
                }
                
                NSArray *loyaltyKeys = @[@"storeLocation",@"requestHeader",@"skuIdArrList",@"pluCodeArrList",@"unitPriceArrList",@"qtyArrList",@"totalPriceArrList",@"itemStatusArrList",@"productOptionalDiscountArr",@"totalBillAmount",@"quantity",@"phonenumber",@"purchaseChannel"];
                
                NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],skuIdList,pluCodeList,unitPriceList,qtyList,totalPriceList,itemStatusList, itemDiscountList, totalTxt.text,@"1",custmerPhNum.text,@"POS"];
                NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                
                NSArray *objects = @[skuIdString,[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],dictionary_];
                
                NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
                
                NSError * err;
                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
                NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                
                @try {
                    
                    HUD.labelText = @"Loading Sku Details..";
                    [HUD setHidden:NO];
                    
                    WebServiceController *serviceController = [WebServiceController new];
                    serviceController.getSkuDetailsDelegate = self;
                    [serviceController getSkuDetailsWithData:salesReportJsonString];
                }
                @catch (NSException *exception) {
                    
                }
                @finally {
                    
                }
            }
            else {
                
                HUD.labelText = @"Loading Sku Details..";
                [HUD setHidden:NO];
                
                NSDictionary * dic = subCategoriesArr[indexPath.row];
                
                selected_SKID = [dic valueForKey:@"sku_ID"];
                
                
                //changed by Srinivasulu on 04/10/2017....
                //reason is -- In thread call's we should not right UIrelated code.... other wise in some case.... It will crashes....
                
                //                [self performSelectorInBackground:@selector(getOfflineProductWithSearchSkuId:) withObject:selected_SKID];
                [self getOfflineProductWithSearchSkuId:selected_SKID withPlucode:@""];
                
                //upto here on 04/10/2017....
            }
            
            
        }
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
    
}


#pragma mark Offline Menu Product:

-(void)getOfflineMenuProducts {
    
    @try {
        
        if(categoriesArr == nil){
            
            categoriesArr = [NSMutableArray new];
        }
        else if(categoriesArr.count){
            [categoriesArr removeAllObjects];
        }
        
        offline = [[OfflineBillingServices alloc]init];
        
        /*
         Formation of Array.............[offline getCategoriesList]
         in Offline
         
         */
        
        for (NSDictionary *dic in [offline getCategoriesList] ) {
            
            NSMutableDictionary *locDic = [NSMutableDictionary new];
            
            locDic[kcategory] = [self checkGivenValueIsNullOrNil:[dic  valueForKey:kCategoryName]  defaultReturn:@"--"];
            
            NSMutableArray *skuInfoListArr = [NSMutableArray new];
            
            /*
             .....[offline getSubCategories]
             Based on category Name
             
             */
            
            for (NSDictionary * subCatDic in [offline getSubCategories:[dic valueForKey:kCategoryName]]) {
                
                NSMutableArray * skuListArr;
                
                /*
                 .........[offline getProducts]
                 Based on Category Name and SubCategory Name
                 
                 */
                
                for (NSDictionary *proDic  in [offline getProducts:[dic valueForKey:kCategoryName] subCat:[subCatDic valueForKey:kSubCategoryName]]) {
                    
                    skuListArr = [NSMutableArray new];
                    
                    /*
                     .........[offline getSKuDetails]
                     Based on Product ID
                     To Fetch Skuid  and Description..
                     
                     
                     */
                    
                    for (NSDictionary * skuDIc in [offline getSKuDetails:[proDic valueForKey:kProductId]]) {
                        
                        NSMutableDictionary * skuInfoDic = [[NSMutableDictionary alloc ]init];
                        
                        skuInfoDic[kSku_ID] = [self checkGivenValueIsNullOrNil:[skuDIc  valueForKey:kSku_ID]  defaultReturn:@"--"];
                        
                        skuInfoDic[kskuDescription] = [self checkGivenValueIsNullOrNil:[skuDIc  valueForKey:kDescription]  defaultReturn:@"--"];
                        
                        [skuListArr addObject:skuInfoDic];
                        [skuInfoListArr addObject:skuInfoDic];
                        
                    }
                    
                }//end of productID Arr.....
                
            }//end of Category Arr.....
            
            
            locDic[kskuIdList] = skuInfoListArr;
            
            [categoriesArr addObject:locDic];
            
            
        }//end of CategoryArr.....
        
        [self displayProductMenu:nil];
    }
    @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
    @finally {
        
        [HUD setHidden:YES];
        
        
    }
}

-(float)getUnitPriceForItemAt:(int)itemPosition {
    
    float unitPrice = 0;
    
    @try {
        
        NSArray *temp = [cartTotalItems[itemPosition] componentsSeparatedByString:@"#"];
        
        if ([self isDiscountedItemAt:itemPosition]) {
            
            
            if (discCalcOn.length > 0 && [discCalcOn caseInsensitiveCompare:@"Original Price"] == NSOrderedSame) {
                
                unitPrice = [temp[4] floatValue] * [temp[5] floatValue];
                
                //commented by Srinivasulu on 27/09/2017....
                
                //                //added by Srinivasulu on 03/07/2017....
                //                //reason becuase of but reported by pujith....
                //
                //                unitPrice = ([[temp objectAtIndex:4] floatValue] * [[temp objectAtIndex:5] floatValue]) - [[itemDiscountArr objectAtIndex:itemPosition] floatValue];
                //
                //                if (([onlineOfferDiscountPriceArr count] && [[onlineOfferDiscountPriceArr objectAtIndex:itemPosition] floatValue] > 0)) {
                //
                //                    unitPrice = unitPrice - [[onlineOfferDiscountPriceArr objectAtIndex:itemPosition] floatValue];
                //                }
                //                if (([onlineDealDiscountPriceArr count] && [[onlineDealDiscountPriceArr objectAtIndex:itemPosition] floatValue] > 0)) {
                //
                //                    unitPrice = unitPrice - [[onlineDealDiscountPriceArr objectAtIndex:itemPosition] floatValue];
                //
                //                }
                //
                //                //upto here on 03/07/2017....
                
                //upto here on 27/09/2017....
                
            }
            else {
                unitPrice = ([temp[4] floatValue] * [temp[5] floatValue]) - [itemDiscountArr[itemPosition] floatValue];
                
                if ((onlineOfferDiscountPriceArr.count && [onlineOfferDiscountPriceArr[itemPosition] floatValue] > 0)) {
                    
                    unitPrice = unitPrice - [onlineOfferDiscountPriceArr[itemPosition] floatValue];
                }
                if ((onlineDealDiscountPriceArr.count && [onlineDealDiscountPriceArr[itemPosition] floatValue] > 0)) {
                    
                    unitPrice = unitPrice - [onlineDealDiscountPriceArr[itemPosition] floatValue];
                    
                }
                
                //added by Srinivasulu on 27/09/2017....
                
                if(turnoverofferDiscount){
                    
                    float fraction = 0;
                    float turnOverDisc = 0;
                    
                    fraction = (unitPrice / totalBeforeTurnOver) * 100;
                    turnOverDisc = (turnoverofferDiscount * fraction) / 100;
                    
                    unitPrice = unitPrice - turnOverDisc;
                    
                }
                
                if(otherDiscountValue.floatValue > 0){
                    
                    float otherDiscountAmt = (otherDiscountValue.floatValue/100.0) * unitPrice;
                    unitPrice = unitPrice - otherDiscountAmt;
                    
                }
                
                //upto here on 27/09/2017....
                
            }
            
        }
        else {
            
            unitPrice = [temp[4] floatValue] * [temp[5] floatValue];
        }
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception.description);
        
    } @finally {
        
    }
    return unitPrice;
}

-(BOOL)isDiscountedItemAt:(int)itemPosition {
    
    BOOL flag = false;
    
    @try {
        
        if ([itemDiscountArr[itemPosition] floatValue] > 0) {
            
            flag = true;
        }
        
        //added by Srinivasulu on 27/09/2017....
        
        else if(turnoverofferDiscount){
            
            flag = true;
        }
        
        else if(otherDiscountValue.floatValue > 0){
            
            flag = true;
        }
        
        //upto here on 27/09/2017....
        
        else if (( onlineOfferDiscountPriceArr.count > itemPosition && [onlineOfferDiscountPriceArr[itemPosition] floatValue] > 0) || (onlineDealDiscountPriceArr.count > itemPosition && [onlineDealDiscountPriceArr[itemPosition] floatValue] > 0)) {
            
            flag = true;
        }
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception.description);
        
    } @finally {
        
    }
    return flag;
}

/**
 * @description  adding the  alertMessage's based on input
 * @date
 * @method       calculateTax:-- itemPosition:-- unitPrice:-- qty:--
 * @author
 * @param        NSArray
 * @param        int
 * @param        float
 * @param        float
 * @param
 * @return
 *
 * @modified By Srinivasulu on 28/06/2017....
 * @reason      added the comments and changes are done for CGST && SGST  && ********** code need to be optimized writteen srinivasulu because duplication of code which was written on 30/06/2017....
 *
 * @verified By
 * @verified On
 *
 */

-(float)calculateTax:(NSArray*)taxDicArr itemPosition:(int)itemPosition unitPrice:(float)unitPrice qty:(float)qty itemTotalPrice:(float)itemReduceCost {
    
    float taxValue = 0;
    
    NSString *taxTypeKey = @"taxType";
    NSString *taxRateKey = @"taxRate";
    
    //added by Srinivasulu on 30/06/2017....
    
    NSString * taxCodeStr = @"";
    
    //upto here on 30/06/2017....
    
    
    //    if  (billIDValue != nil && [billIDValue length] > 0) {
    //
    //        taxTypeKey = @"tax_type";
    //        taxRateKey = @"tax_rate";
    //    }
    @try {
        //        float itemReduceCost = unitPrice * qty;
        //        float itemReduceCost = unitPrice_;
        
        
        //changed by Srinivasulu on 27/09/2017....
        
        // if ([self isDiscountedItemAt:itemPosition]) {
        
        if( ([self isDiscountedItemAt:itemPosition] && (discTaxation.length > 0)) && (! (discCalcOn.length > 0 && [discCalcOn caseInsensitiveCompare:@"Original Price"] == NSOrderedSame))){
            
            //upto here on 27/09/2017.....
            
            
            //            if([onlineOfferDiscountPriceArr count] > itemPosition)
            //                itemReduceCost -= [[onlineOfferDiscountPriceArr objectAtIndex:itemPosition] floatValue];
            
            //            if([onlineDealDiscountPriceArr count] > itemPosition)
            //                itemReduceCost -= [[onlineDealDiscountPriceArr objectAtIndex:itemPosition] floatValue];
            
            //            if([itemDiscountArr count] > itemPosition)
            //                itemReduceCost -= [[itemDiscountArr objectAtIndex:itemPosition] floatValue];
            
            //
            if (discTaxation.length > 0 && [discTaxation caseInsensitiveCompare:@"Inclusive"] == NSOrderedSame) {
                
                
                for (NSDictionary * taxDic in taxDicArr) {
                    
                    float specifiedTaxValue = 0;
                    
                    //added by Srinivasulu on 28/06/2017....
                    
                    float taxRateValue = [[taxDic valueForKey:taxRateKey] floatValue];
                    //added by Srinivasulu on 30/06/2017....
                    
                    taxCodeStr = [taxDic valueForKey:@"taxCode"];
                    //upto here on 30/06/2017....
                    
                    for(NSDictionary * saleRangeListDic in [taxDic valueForKey:SALE_RANGES_LIST]) {
                        
                        if( ([[saleRangeListDic valueForKey:SALE_VALUE_FROM] floatValue] <= unitPrice) && (unitPrice <= [[saleRangeListDic valueForKey:SALE_VALUE_TO] floatValue])){
                            
                            taxRateValue = [[saleRangeListDic valueForKey:taxRateKey] floatValue];
                            break;
                        }
                        
                    }
                    
                    //upto here on 28/06/2017....
                    
                    
                    if ([taxDic.allKeys containsObject:taxTypeKey] && ![[taxDic valueForKey:taxTypeKey] isKindOfClass:[NSNull class]] && [[[taxDic valueForKey:taxTypeKey] lowercaseString] isEqualToString:@"percentage"]) {
                        
                        //need to be changed written on 23/11/2017....
                        //                        specifiedTaxValue = (itemReduceCost  - ( itemReduceCost /(100 + taxRateValue * 2 ) * 100))/2;
                        specifiedTaxValue = (itemReduceCost  - ((itemReduceCost /(100 + taxRateValue * 2)) * 100))/2;
                        
                        //upto here on 23/11/2017....
                        
                        taxValue += specifiedTaxValue;
                    }
                    else{
                        specifiedTaxValue = (taxRateValue * qty);
                        
                        taxValue += specifiedTaxValue;
                    }
                    
                    
                    //added by Srinivasulu on 30/06/2017....
                    
                    BOOL isNewTax = true;
                    int i;
                    NSMutableDictionary * dic;
                    
                    for( i = 0; i < taxDispalyArr.count; i++){
                        
                        dic =  taxDispalyArr[i];
                        
                        if([taxCodeStr isEqualToString:[dic valueForKey:@"taxCode"]]){
                            
                            dic[@"taxValue"] = [NSString stringWithFormat:@"%.2f",( specifiedTaxValue +  [[dic valueForKey:@"taxValue"] floatValue])];
                            
                            isNewTax = false;
                            break;
                        }
                        
                    }
                    
                    if(isNewTax){
                        
                        NSMutableDictionary * taxDisplayDic = [NSMutableDictionary new];
                        taxDisplayDic[@"taxCode"] = taxCodeStr;
                        taxDisplayDic[@"taxValue"] = [NSString stringWithFormat:@"%.2f",specifiedTaxValue];
                        
                        [taxDispalyArr addObject:taxDisplayDic];
                    }
                    else{
                        
                        taxDispalyArr[i] = dic;
                    }
                    
                    //upto here on 30/06/2017....
                    
                }
                
                subtotalTxt.text = [NSString stringWithFormat:@"%.02f",((totalTxt.text).floatValue - taxValue)];
            }
            else if (discTaxation.length > 0 && [discTaxation caseInsensitiveCompare:@"Exclusive"] == NSOrderedSame) {
                
                for (NSDictionary *taxDic in taxDicArr) {
                    
                    //added by Srinivasulu on 28/06/2017....
                    
                    //added by Srinivasulu on 30/06/2017....
                    
                    taxCodeStr = [taxDic valueForKey:@"taxCode"];
                    float specifiedTaxValue = 0;
                    
                    //upto here on 30/06/2017....
                    
                    float taxRateValue = [[taxDic valueForKey:taxRateKey] floatValue];
                    
                    
                    for(NSDictionary * saleRangeListDic in [taxDic valueForKey:SALE_RANGES_LIST]) {
                        
                        if( ([[saleRangeListDic valueForKey:SALE_VALUE_FROM] floatValue] <= unitPrice) && ( unitPrice <= [[saleRangeListDic valueForKey:SALE_VALUE_TO] floatValue])){
                            
                            taxRateValue = [[saleRangeListDic valueForKey:taxRateKey] floatValue];
                            break;
                        }
                        
                    }
                    
                    //upto here on 28/06/2017....
                    
                    if ([taxDic.allKeys containsObject:taxTypeKey] && ![[taxDic valueForKey:taxTypeKey] isKindOfClass:[NSNull class]] && [[[taxDic valueForKey:taxTypeKey] lowercaseString] isEqualToString:@"percentage"]) {
                        
                        specifiedTaxValue = ((itemReduceCost * taxRateValue)/100);
                        
                        taxValue +=   specifiedTaxValue;
                        
                        //taxValue += ((unitPrice  -(unitPrice /(100+[[taxDic valueForKey:@"taxRate"] floatValue])*100)));
                    }
                    else{
                        specifiedTaxValue = (taxRateValue * qty);
                        
                        taxValue += specifiedTaxValue;
                        
                    }
                    
                    
                    //added by Srinivasulu on 30/06/2017....
                    
                    BOOL isNewTax = true;
                    int i;
                    NSMutableDictionary * dic;
                    
                    for( i = 0; i < taxDispalyArr.count; i++){
                        
                        dic =  taxDispalyArr[i];
                        
                        if([taxCodeStr isEqualToString:[dic valueForKey:@"taxCode"]]){
                            
                            dic[@"taxValue"] = [NSString stringWithFormat:@"%.2f",(specifiedTaxValue +  [[dic valueForKey:@"taxValue"] floatValue])];
                            
                            isNewTax = false;
                            break;
                            
                        }
                        
                        
                    }
                    
                    if(isNewTax){
                        
                        NSMutableDictionary * taxDisplayDic = [NSMutableDictionary new];
                        taxDisplayDic[@"taxCode"] = taxCodeStr;
                        taxDisplayDic[@"taxValue"] = [NSString stringWithFormat:@"%.2f",specifiedTaxValue];
                        
                        [taxDispalyArr addObject:taxDisplayDic];
                    }
                    else{
                        
                        taxDispalyArr[i] = dic;
                    }
                    
                    //upto here on 30/06/2017....
                    
                }
                
                subtotalTxt.text = totalTxt.text;
                totalTxt.text = [NSString stringWithFormat:@"%.02f",((subtotalTxt.text).floatValue + taxValue)];
                netPayLblVal.text = totalTxt.text;
                // subtotalTxt.text = [NSString stringWithFormat:@"%.02f",([subtotalTxt.text floatValue] - [taxTxt.text floatValue])];
                
            }
        }
        else {
            if(![taxTypeArr[itemPosition] boolValue]) {
                
                
                for (NSDictionary *taxDic in taxDicArr) {
                    
                    //added by Srinivasulu on 28/06/2017....
                    
                    //added by Srinivasulu on 30/06/2017....
                    
                    taxCodeStr = [taxDic valueForKey:@"taxCode"];
                    
                    float specifiedTaxValue = 0;
                    
                    //upto here on 30/06/2017....
                    
                    float taxRateValue = [[taxDic valueForKey:taxRateKey] floatValue];
                    
                    for(NSDictionary * saleRangeListDic in [taxDic valueForKey:SALE_RANGES_LIST]) {
                        
                        if( ([[saleRangeListDic valueForKey:SALE_VALUE_FROM] floatValue] <= unitPrice) && ( unitPrice <= [[saleRangeListDic valueForKey:SALE_VALUE_TO] floatValue])){
                            taxRateValue = [[saleRangeListDic valueForKey:taxRateKey] floatValue];
                            break;
                        }
                        
                    }
                    
                    //upto here on 28/06/2017....
                    
                    
                    if ([taxDic.allKeys containsObject:taxTypeKey] && ![[taxDic valueForKey:taxTypeKey] isKindOfClass:[NSNull class]] && [[[taxDic valueForKey:taxTypeKey] lowercaseString] isEqualToString:@"percentage"]) {
                        
                        //need to be changed written on 23/11/2017....
                        //                        specifiedTaxValue = (itemReduceCost  - ( itemReduceCost /(100 + taxRateValue * 2 ) * 100))/2;
                        specifiedTaxValue = (itemReduceCost  - ((itemReduceCost /(100 + taxRateValue * 2)) * 100))/2;
                        
                        //upto here on 23/11/2017....
                        
                        taxValue += specifiedTaxValue;
                    }
                    else{
                        
                        specifiedTaxValue = (taxRateValue * qty);
                        taxValue += specifiedTaxValue;
                        
                    }
                    
                    
                    //added by Srinivasulu on 30/06/2017....
                    
                    BOOL isNewTax = true;
                    int i;
                    NSMutableDictionary * dic;
                    
                    for( i = 0; i < taxDispalyArr.count; i++){
                        
                        dic =  taxDispalyArr[i];
                        
                        if([taxCodeStr isEqualToString:[dic valueForKey:@"taxCode"]]){
                            
                            dic[@"taxValue"] = [NSString stringWithFormat:@"%.2f",(specifiedTaxValue +  [[dic valueForKey:@"taxValue"] floatValue])];
                            
                            isNewTax = false;
                            break;
                            
                        }
                        
                        
                    }
                    
                    if(isNewTax){
                        
                        NSMutableDictionary * taxDisplayDic = [NSMutableDictionary new];
                        taxDisplayDic[@"taxCode"] = taxCodeStr;
                        taxDisplayDic[@"taxValue"] = [NSString stringWithFormat:@"%.2f",specifiedTaxValue];
                        
                        [taxDispalyArr addObject:taxDisplayDic];
                    }
                    else{
                        
                        taxDispalyArr[i] = dic;
                    }
                    
                    //upto here on 30/06/2017....
                    
                }
                subtotalTxt.text = [NSString stringWithFormat:@"%.02f",((totalTxt.text).floatValue - taxValue)];
            }
            else {
                
                for (NSDictionary *taxDic in taxDicArr) {
                    
                    //added by Srinivasulu on 28/06/2017....
                    
                    //added by Srinivasulu on 30/06/2017....
                    
                    taxCodeStr = [taxDic valueForKey:@"taxCode"];
                    float specifiedTaxValue = 0;
                    
                    //upto here on 30/06/2017....
                    
                    float taxRateValue = [[taxDic valueForKey:taxRateKey] floatValue];
                    
                    for(NSDictionary * saleRangeListDic in [taxDic valueForKey:SALE_RANGES_LIST]) {
                        
                        if( ([[saleRangeListDic valueForKey:SALE_VALUE_FROM] floatValue] <= unitPrice) && ( unitPrice <= [[saleRangeListDic valueForKey:SALE_VALUE_TO] floatValue])){
                            taxRateValue = [[saleRangeListDic valueForKey:taxRateKey] floatValue];
                            break;
                        }
                        
                    }
                    
                    //upto here on 28/06/2017....
                    
                    if (([taxDic.allKeys containsObject:taxTypeKey] && ![[taxDic valueForKey:taxTypeKey] isKindOfClass:[NSNull class]] && [[[taxDic valueForKey:taxTypeKey] lowercaseString] isEqualToString:@"percentage"])) {
                        
                        
                        specifiedTaxValue = ((itemReduceCost * taxRateValue)/100);
                        taxValue +=   specifiedTaxValue;
                    }
                    else{
                        specifiedTaxValue = (taxRateValue * qty);
                        taxValue += (taxRateValue * qty);
                        
                    }
                    
                    //added by Srinivasulu on 30/06/2017....
                    
                    BOOL isNewTax = true;
                    int i;
                    NSMutableDictionary * dic;
                    
                    for( i = 0; i < taxDispalyArr.count; i++){
                        
                        dic =  taxDispalyArr[i];
                        
                        if([taxCodeStr isEqualToString:[dic valueForKey:@"taxCode"]]){
                            
                            dic[@"taxValue"] = [NSString stringWithFormat:@"%.2f",(specifiedTaxValue +  [[dic valueForKey:@"taxValue"] floatValue])];
                            
                            isNewTax = false;
                            break;
                        }
                        
                        
                    }
                    
                    if(isNewTax){
                        
                        NSMutableDictionary * taxDisplayDic = [NSMutableDictionary new];
                        taxDisplayDic[@"taxCode"] = taxCodeStr;
                        taxDisplayDic[@"taxValue"] = [NSString stringWithFormat:@"%.2f",specifiedTaxValue];
                        
                        [taxDispalyArr addObject:taxDisplayDic];
                    }
                    else{
                        
                        taxDispalyArr[i] = dic;
                        
                    }
                    
                    //upto here on 30/06/2017....
                    
                    
                }
                
                subtotalTxt.text = totalTxt.text;
                totalTxt.text = [NSString stringWithFormat:@"%.02f",((subtotalTxt.text).floatValue + taxValue)];
                //subtotalTxt.text = [NSString stringWithFormat:@"%.02f",([subtotalTxt.text floatValue] - [taxTxt.text floatValue])];
                
                netPayLblVal.text = totalTxt.text;
                
            }
        }
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception.description);
        
    } @finally {
        
        
        
    }
    
    return taxValue;
}

-(float)calculateTaxForItemPopUp:(NSArray*)taxDicArr itemPosition:(int)itemPosition unitPrice:(float)unitPrice qty:(float)qty {
    
    float taxValue = 0;
    
    NSString *taxTypeKey = @"taxType";
    NSString *taxRateKey = @"taxRate";
    
    //    if  (billIDValue != nil && [billIDValue length] > 0) {
    //
    //        taxTypeKey = @"tax_type";
    //        taxRateKey = @"tax_rate";
    //    }
    @try {
        
        if ([self isDiscountedItemAt:itemPosition]) {
            
            if (discTaxation.length > 0 && [discTaxation caseInsensitiveCompare:@"Inclusive"] == NSOrderedSame) {
                
                for (NSDictionary *taxDic in taxDicArr) {
                    if ([[[taxDic valueForKey:taxTypeKey] lowercaseString] isEqualToString:@"percentage"]) {
                        taxValue += ((unitPrice  -(unitPrice /(100+[[taxDic valueForKey:taxRateKey] floatValue])*100)));
                    }
                    else{
                        taxValue += ([[taxDic valueForKey:taxRateKey] floatValue]*qty);
                        
                    }
                    
                }
                
                // subtotalTxt.text = [NSString stringWithFormat:@"%.02f",([totalTxt.text floatValue] - taxValue)];
            }
            else if (discTaxation.length > 0 && [discTaxation caseInsensitiveCompare:@"Exclusive"] == NSOrderedSame) {
                
                for (NSDictionary *taxDic in taxDicArr) {
                    if ([[[taxDic valueForKey:taxTypeKey] lowercaseString] isEqualToString:@"percentage"]) {
                        
                        taxValue +=   ((unitPrice * [taxDic[taxRateKey] floatValue])/100);
                        
                        //taxValue += ((unitPrice  -(unitPrice /(100+[[taxDic valueForKey:@"taxRate"] floatValue])*100)));
                    }
                    else{
                        taxValue += ([[taxDic valueForKey:taxRateKey] floatValue]*qty);
                        
                    }
                    
                }
                
                //                subtotalTxt.text = totalTxt.text;
                //                totalTxt.text = [NSString stringWithFormat:@"%.02f",([subtotalTxt.text floatValue] + taxValue)];
                //                netPayLblVal.text = totalTxt.text;
                // subtotalTxt.text = [NSString stringWithFormat:@"%.02f",([subtotalTxt.text floatValue] - [taxTxt.text floatValue])];
                
            }
        }
        else {
            if(![taxTypeArr[itemPosition] boolValue]) {
                
                
                for (NSDictionary *taxDic in taxDicArr) {
                    if ([[[taxDic valueForKey:taxTypeKey] lowercaseString] isEqualToString:@"percentage"]) {
                        taxValue += ((unitPrice  -(unitPrice /(100+[[taxDic valueForKey:taxRateKey] floatValue])*100)));
                    }
                    else{
                        taxValue += ([[taxDic valueForKey:taxRateKey] floatValue]*qty);
                        
                    }
                    
                }
                // subtotalTxt.text = [NSString stringWithFormat:@"%.02f",([totalTxt.text floatValue] - taxValue)];
            }
            else {
                
                for (NSDictionary *taxDic in taxDicArr) {
                    if ([[[taxDic valueForKey:taxTypeKey] lowercaseString] isEqualToString:@"percentage"]) {
                        
                        taxValue +=   ((unitPrice * [taxDic[taxRateKey] floatValue])/100);
                        
                        //taxValue += ((unitPrice  -(unitPrice /(100+[[taxDic valueForKey:@"taxRate"] floatValue])*100)));
                    }
                    else{
                        taxValue += ([[taxDic valueForKey:taxRateKey] floatValue]*qty);
                        
                    }
                    
                }
                
                //                subtotalTxt.text = totalTxt.text;
                //                totalTxt.text = [NSString stringWithFormat:@"%.02f",([subtotalTxt.text floatValue] + taxValue)];
                //                //subtotalTxt.text = [NSString stringWithFormat:@"%.02f",([subtotalTxt.text floatValue] - [taxTxt.text floatValue])];
                //
                //                netPayLblVal.text = totalTxt.text;
                
            }
        }
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception.description);
        
    } @finally {
        
    }
    
    return taxValue;
}

-(void)coinsTextFieldChanged:(UITextField*)textField {
    @try {
        if (isReturnDenom) {
            if([self checkMaxReturnAmountWith:(textField.text).intValue * textField.tag isTextField:YES]){
                if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                    oneReturnCount = 0;
                    oneReturnCount = (textField.text).intValue;
                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                    if (oneReturnCount > 0) {
                        [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                        for (UITextField *text in returnDenomValCoinsTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in returnDenomCountCoinsArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                
                            }
                        }
                    }
                }
                else {
                    oneReturnCount = 0;
                    
                    oneReturnCount = (textField.text).intValue;
                    
                    int actualValue = 0;
                    
                    if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                        
                        NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                        actualValue = str.integerValue;
                    }
                    if (oneReturnCount < actualValue) {
                        fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                        if (oneReturnCount > 0) {
                            [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                        else {
                            if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                        }
                    }
                    
                    for (UITextField *text in returnDenomValCoinsTxtArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in returnDenomCountCoinsArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                            
                        }
                    }
                }
            }
            else {
                
                oneReturnCount = (textField.text).intValue;
                
                for (UITextField *text in returnDenomValCoinsTxtArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                        
                        
                    }
                }
                
                for (UILabel *text in returnDenomCountCoinsArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                        
                    }
                }
            }
            
            
            //                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
            //                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
        }
        
        
        else {
            if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
                oneCount = 0;
                oneCount = (textField.text).intValue;
                tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                if (oneCount > 0) {
                    [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                    
                }
                else{
                    tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                    if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                        [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                    }
                }
                
                for (UITextField *text in denomValCoinsTxtArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                        
                        
                    }
                }
                
                for (UILabel *text in denomCountCoinsArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                        
                    }
                }
                
            }
            else {
                oneCount = 0;
                
                oneCount = (textField.text).intValue;
                
                int actualValue = 0;
                
                if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                    
                    NSString *str = [denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                    
                    actualValue = str.integerValue;
                }
                
                //                int actualValue = [[denominationDic valueForKey:@"10"] intValue];
                if (oneCount < actualValue) {
                    tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                    if (oneCount > 0) {
                        [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                    }
                    else{
                        if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                    }
                    
                }
                //                else {
                //                    tensQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"10"] intValue]];
                //                    tenValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"10"] intValue] * 10.00)];
                //
                //                }
                
                for (UITextField *text in denomValCoinsTxtArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                        
                        
                    }
                }
                
                for (UILabel *text in denomCountCoinsArr) {
                    
                    if (text.tag == textField.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                        
                    }
                }
                
            }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            
            paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
        }
    }
    else {
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                if (!isReturnDenom && (textField.tag == 5 || textField.tag == 2 || textField.tag == 1)) {
                    denominationView.frame = CGRectMake(denominationView.frame.origin.x, 60.0, denominationView.frame.size.width, denominationView.frame.size.height);
                }
                else if (textField.tag == 5 || textField.tag == 2 || textField.tag == 1) {
                    returnDenominationView.frame = CGRectMake(returnDenominationView.frame.origin.x, 60.0, returnDenominationView.frame.size.width, returnDenominationView.frame.size.height);
                }
                
            }
            
        }
        else {
            paymentView.frame = CGRectMake(20, 140, 730, 820.0);
        }
    }
    
    
    [self updatePaidAmount];
    [self updateReturnAmount];
    
    
}




#pragma -mark method called with cancel/erase button cilcked....

/**
 * @description  here we are showing the alertView....
 * @date         18/07/2017
 * @method       eraseEntireDetails:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return       void
 * @verified By
 * @verified On
 *
 */

-(void)eraseEntireDetails:(UIButton *)sender{
    
    @try {
        
        if (cartTotalItems.count > 0){
            
            //changed by Srinivasulu on 09/08/2017....
            //commented by Srinivasulu on 07/09/2017....
            
            //            cancelBillAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"do_you_want_to_cancel_this_bill_?", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"yes", nil) otherButtonTitles:NSLocalizedString(@"no", nil), nil];
            //
            //            [cancelBillAlertView show];
            
            
            //upto here on 09/08/2017....
            
            
            //added by Srinivasulu on 07/09/2017....
            
            
            transperentView = [[UIView alloc] init];
            transperentView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.7];
            //        PopOverViewController  * customerInfoPopUp = [[PopOverViewController alloc] init];
            
            
            
            
            //UILabel used for displaying header information...
            UILabel * headerlabel;
            UIButton * closeBtn;
            
            UILabel * itemCancelReasonLbl;
            UILabel * selectItemCancelReasonLbl;
            
            UIImage * image;
            
            
            UIButton * selectItemCancelReasonBtn;
            UIImage * buttonImageDD;
            
            
            UIButton * yesBtn;
            UIButton * cancelBtn;
            
            
            cancelBillView = [[UIView alloc] init];
            cancelBillView.opaque = NO;
            cancelBillView.backgroundColor = [UIColor blackColor];
            cancelBillView.layer.borderColor = [UIColor lightGrayColor].CGColor;
            cancelBillView.layer.borderWidth = 2.0f;
            
            
            headerlabel = [[UILabel alloc] init];
            headerlabel.textColor = [UIColor whiteColor];
            headerlabel.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
            headerlabel.textAlignment = NSTextAlignmentCenter;
            
            
            // close button to close the view ..
            image = [UIImage imageNamed:@"delete.png"];
            
            closeBtn = [[UIButton alloc] init] ;
            [closeBtn addTarget:self action:@selector(closeEditItemDetailsView:) forControlEvents:UIControlEventTouchUpInside];
            
            
            [closeBtn setBackgroundImage:image    forState:UIControlStateNormal];
            
            
            
            //creation of UILabel used in page....
            itemCancelReasonLbl = [[UILabel alloc] init];
            itemCancelReasonLbl.textColor = [UIColor whiteColor];
            itemCancelReasonLbl.font = [UIFont boldSystemFontOfSize:18.0];
            itemCancelReasonLbl.textAlignment = NSTextAlignmentLeft;
            
            selectItemCancelReasonLbl = [[UILabel alloc] init];
            selectItemCancelReasonLbl.textColor = [UIColor whiteColor];
            selectItemCancelReasonLbl.font = [UIFont boldSystemFontOfSize:18.0];
            selectItemCancelReasonLbl.textAlignment = NSTextAlignmentLeft;
            
            
            itemCancelReasonTxt = [[UITextField alloc] init];
            itemCancelReasonTxt.borderStyle = UITextBorderStyleNone;
            itemCancelReasonTxt.borderStyle = UITextBorderStyleRoundedRect;
            itemCancelReasonTxt.textColor = [UIColor blackColor];
            itemCancelReasonTxt.backgroundColor = [UIColor whiteColor];
            
            
            buttonImageDD = [UIImage imageNamed:@"combo.png"];
            
            selectItemCancelReasonBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [selectItemCancelReasonBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
            [selectItemCancelReasonBtn addTarget:self
                                          action:@selector(showListOfItemCancelReasons:) forControlEvents:UIControlEventTouchDown];
            
            
            
            yesBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [yesBtn addTarget:self action:@selector(cancelTheBillWithReason:) forControlEvents:UIControlEventTouchDown];
            yesBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
            yesBtn.backgroundColor = [UIColor grayColor];
            
            cancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [cancelBtn addTarget:self  action:@selector(closeEditItemDetailsView:) forControlEvents:UIControlEventTouchDown];
            cancelBtn.backgroundColor = [UIColor grayColor];
            
            yesBtn.tag = sender.tag;
            cancelBtn.tag = sender.tag;
            
            
            //here we are populating text into UILabels and UITextFields....
            @try {
                
                headerlabel.text = NSLocalizedString(@"bill_cancel_reason", nil);
                
                itemCancelReasonLbl.text  = NSLocalizedString(@"do_you_want_to_cancel_the_bill_?", nil);
                selectItemCancelReasonLbl.text  = NSLocalizedString(@"select_reason_:", nil);
                
                itemCancelReasonTxt.userInteractionEnabled = NO;
                itemCancelReasonTxt.placeholder = NSLocalizedString(@"reason", nil);
                
                [yesBtn setTitle:NSLocalizedString(@"yes", nil) forState:UIControlStateNormal];
                [cancelBtn setTitle:NSLocalizedString(@"no", nil) forState:UIControlStateNormal];
                
            } @catch (NSException *exception) {
                
            }
            
            
            
            [cancelBillView addSubview:headerlabel];
            [cancelBillView addSubview:closeBtn];
            
            [cancelBillView addSubview:itemCancelReasonLbl];
            [cancelBillView addSubview:selectItemCancelReasonLbl];
            
            [cancelBillView addSubview:itemCancelReasonTxt];
            [cancelBillView addSubview:selectItemCancelReasonBtn];
            
            [cancelBillView addSubview:yesBtn];
            [cancelBillView addSubview:cancelBtn];
            
            [transperentView addSubview:cancelBillView];
            
            [self.view addSubview:transperentView];
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                    
                }
                else{
                }
                
                transperentView.frame = self.view.frame;
                
                headerlabel.frame = CGRectMake(0, 0, 500, 50);
                
                
                closeBtn.frame =  CGRectMake( headerlabel.frame.size.width - 60, 0, 50, 50);
                
                //first row frames....
                itemCancelReasonLbl.frame =  CGRectMake( 20, headerlabel.frame.origin.y + headerlabel.frame.size.height + 10, headerlabel.frame.size.width, 40);
                
                selectItemCancelReasonLbl.frame = CGRectMake( 20, itemCancelReasonLbl.frame.origin.y + itemCancelReasonLbl.frame.size.height + 10, 200, 40);
                
                itemCancelReasonTxt.frame = CGRectMake( selectItemCancelReasonLbl.frame.origin.x + selectItemCancelReasonLbl.frame.size.width + 10, selectItemCancelReasonLbl.frame.origin.y, 240, selectItemCancelReasonLbl.frame.size.height);
                
                
                selectItemCancelReasonBtn.frame =  CGRectMake( itemCancelReasonTxt.frame.origin.x + itemCancelReasonTxt.frame.size.width - (itemCancelReasonTxt.frame.size.height), itemCancelReasonTxt.frame.origin.y - 6, itemCancelReasonTxt.frame.size.height + 16, itemCancelReasonTxt.frame.size.height + 16);
                
                yesBtn.frame = CGRectMake( (headerlabel.frame.size.width - 300) / 3, itemCancelReasonTxt.frame.origin.y + itemCancelReasonTxt.frame.size.height + 20, 150, 40);
                
                cancelBtn.frame = CGRectMake( 2 * yesBtn.frame.origin.x + yesBtn.frame.size.width, yesBtn.frame.origin.y, yesBtn.frame.size.width, yesBtn.frame.size.height);
                
                
                cancelBillView.frame = CGRectMake( (transperentView.frame.size.width - headerlabel.frame.size.width) / 2, (transperentView.frame.size.height - (yesBtn.frame.origin.y +  yesBtn.frame.size.height + 12)) / 2, headerlabel.frame.size.width, yesBtn.frame.origin.y +  yesBtn.frame.size.height + 12);
                
                
                [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:cancelBillView andSubViews:YES fontSize:22 cornerRadius:0];
                
                headerlabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
                
                yesBtn.titleLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
                cancelBtn.titleLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
                
                
            }
            else{
                
                
                
                
            }
            
            
            //added by Srinivasulu on 07/09/2017....
            //upto here on 07/09/2017....
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  in this method we are clear the data by creating it as cancelled bill....
 * @date
 * @method       eraseEntireDetails
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/07/2017....
 * @reason       changed it directly from the action to
 *
 * @verified By
 * @verified On
 *
 */

-(void)eraseEntireDetails{
    
    @try {
        
        if (cartTotalItems.count > 0) {
            
            @try {
                eraseButton.tag = 1;
                finalBillDue = [netPayLblVal.text copy];
                segment_index = 3;
                if (cartItem.count > 0) {
                    [self continuePay1];
                }
                
                
                //added by Srinivasulu on 18/07/2017....
                //commented by Srinivasulu on 23/08/2017...
                //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
                //    defaults = [NSUserDefaults standardUserDefaults];
                
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                
                //upto here on 23/08/2017....
                
                
                [defaults setValue:totalTxt.text forKey:LAST_BILL_TOTAL];
                
                //upto here on 18/07/2017....
                
                [cartItem removeAllObjects];
                [cartTotalItems removeAllObjects];
                [isVoidedArray removeAllObjects];
                [itemPromoFlagArr removeAllObjects];
                [offerItems removeAllObjects];
                [cartItemDetails removeAllObjects];
                [taxArr removeAllObjects];
                [offierPrice removeAllObjects];
                [validFrom removeAllObjects];
                [validTo removeAllObjects];
                [dealofferArry removeAllObjects];
                [isPriceEditableArr removeAllObjects];
                
                
                //added by Srinivausulu on 16/10/2018....
                
                [itemDiscountArr removeAllObjects];
                [itemDiscountDescArr removeAllObjects];
                [zeroStockAvailInfoArr removeAllObjects];
                
                if([paymentTransactionArray count] && paymentTransactionArray != nil)
                    [paymentTransactionArray removeAllObjects];
                
                if([addCardPaymentDetailsArr count] && addCardPaymentDetailsArr != nil)
                    [addCardPaymentDetailsArr removeAllObjects];
                //upto here on 16/10/2018....
                
                
                //added by Srinivausulu on 06/03/2018....
                
                [isItemTrackingRequiredArr removeAllObjects];
                [productInfoArr removeAllObjects];
                //commneted and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
                otherDiscountValueTxt.text = @"0.00";
                
                //upto here on 06/03/2018....
                
                [editedPriceArr removeAllObjects];
                [cartTable reloadData];
                dealoroffersTxt.text = @"0.00";
                giftVoucherTxt.text = @"0.00";
                subtotalTxt.text = @"0.0";
                taxTxt.text = @"0.00";
                totalTxt.text = @"0.00";
                netPayLblVal.text = @"0.00";
                dealoroffersTxt.text = @"0.00";
                [dealDataItems removeAllObjects];
                otherDiscountTxt.text = @"0.00";
                totalItemsLabelValue.text = @"0";
                finalBillDue = @"0.00";
                billIDValue = @"";
                
                //added by Srnivasulu on 14/11/2017....
                
                completeBillDiscountValueLbl.text = @"0.00";
                
                //upto her on 14/11/2017....
                
                //added by Srinivasulu on 14/06/2017....
                //reason to remove otherdiscount calculation.... bug no 3332....
                
                otherDiscountValue = @"0.00";
                
                
                
                
                //upto here on14/06/2017.....
                
                // isOfflineService = YES;
                
                
                //added by Srinivasulu on 14/07/2017....
                
                if(taxDispalyArr.count)
                    [taxDispalyArr removeAllObjects];
                
                [self addLabelsToScrollView:taxDispalyArr];
                
                //upto here on 14/07/2017....
            }
            @catch (NSException *exception) {
                
                
            }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
        if ([transperentView isDescendantOfView:self.view]){
            [transperentView removeFromSuperview];
            
            //this condition no need to check.... written by Srinivasulu on 07/09/2017....
            //reason itemCancelReasonTxt will be created...
            
            if(itemCancelReasonTxt != nil)
                itemCancelReasonTxt.text = @"";
        }
    }
}

#pragma -mark methods added by Srinivasulu ....

#pragma -mark method used to display alert/warning messages....

/**
 * @description  adding the  alertMessage's based on input
 * @date         15/03/2017
 * @method       displayAlertMessage
 * @author       Srinivasulu
 * @param        NSString
 * @param        float
 * @param        float
 * @param        NSString
 * @param        float
 *
 * @return
 *
 * @modified By  Srinivasulu on 11/12/2017....
 * @reason       Changed the colors of labels and text....
 *
 * @verified By
 * @verified On
 *
 */

-(void)displayAlertMessage:(NSString *)message    horizontialAxis:(float)xPostion  verticalAxis:(float)yPosition msgType:(NSString *)messageType   conentWidth:(float )labelWidth contentHeight:(float)labelHeight   isSoundRequired:(BOOL)soundStatus  timming:(float)noOfSecondsToDisplay    noOfLines:(int)noOfLines{
    
    
    @try {
        AudioServicesPlayAlertSound(soundFileObject);
        
        if ([userAlertMessageLbl isDescendantOfView:self.view] ) {
            [userAlertMessageLbl removeFromSuperview];
            
        }
        
        userAlertMessageLbl = [[UILabel alloc] init];
        userAlertMessageLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
        userAlertMessageLbl.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.7];
        userAlertMessageLbl.layer.cornerRadius = 0.0f;
        userAlertMessageLbl.layer.borderWidth = 2.70f;
        userAlertMessageLbl.layer.borderColor = [UIColor lightGrayColor].CGColor;
        
        userAlertMessageLbl.text =  message;
        userAlertMessageLbl.textAlignment = NSTextAlignmentCenter;
        userAlertMessageLbl.numberOfLines = noOfLines;
        
        
        
        userAlertMessageLbl.tag = 2;
        
        if ([messageType caseInsensitiveCompare:@"SUCCESS"] == NSOrderedSame) {
            userAlertMessageLbl.tag = 4;
            
            userAlertMessageLbl.textColor = [UIColor colorWithRed:114.0/255.0 green:203.0/255.0 blue:158.0/255.0 alpha:1.0];
            
            
            
            
            if(soundStatus){
                
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound;
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
            }
            
            
        }
        else{
            userAlertMessageLbl.textColor = [UIColor redColor];
            
            if(soundStatus){
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound;
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
            }
            
            
        }
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            //            if(searchItemsTxt.isEditing)
            //                yPosition = searchItemsTxt.frame.origin.y + searchItemsTxt.frame.size.height;
            
            
            userAlertMessageLbl.frame = CGRectMake(xPostion, yPosition, labelWidth, labelHeight);
            
        }
        else{
            if (version > 8.0) {
                userAlertMessageLbl.frame = CGRectMake(xPostion + 75, yPosition-35, 200, 30);
                userAlertMessageLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
                
            }
            else{
                userAlertMessageLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
                userAlertMessageLbl.frame = CGRectMake(xPostion + 75, yPosition-35, 200, 30);
                
            }
            
        }
        
        //added by Srinivasulu on 11/12/2017....
        
        userAlertMessageLbl.backgroundColor = [UIColor whiteColor];
        userAlertMessageLbl.textColor = [UIColor blackColor];
        
        //upto here on 11/12/2017....
        
        [self.view addSubview:userAlertMessageLbl];
        fadeOutTime = [NSTimer scheduledTimerWithTimeInterval:noOfSecondsToDisplay target:self selector:@selector(removeAlertMessages) userInfo:nil repeats:NO];
        
    }
    @catch (NSException *exception) {
        [HUD setHidden:YES];
        
        NSLog(@"--------exception in the stockReceiptView in displayAlertMessage---------%@",exception);
        NSLog(@"----exception while creating the useralertMesssageLbl------------%@",exception);
        
    }
}

/**
 * @description  here we are removing the existing label....
 * @date         18//04/2017....
 * @method       remoeAlertMessage
 * @author       Srinivasulu
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */


-(void)removeAlertMessages{
    @try {
        
        if(userAlertMessageLbl.tag == 4){
            
            
            [self backAction];
        }
        
        else if ([userAlertMessageLbl isDescendantOfView:self.view])
            [userAlertMessageLbl removeFromSuperview];
        
        
        
        
    }
    @catch (NSException *exception) {
        [HUD setHidden:YES];
        NSLog(@"----exception in removing userAlertMessageLbl label------------%@",exception);
        
    }
    
}


#pragma  -mark method added by Srinivasulu on 21/04/2017....

/**
 * @description  adding the  alertMessage's based on input
 * @date         21/04/2017
 * @method       selectedCreditBillPayment
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)selectedCreditBillPayment:(UIButton *)sender {
    @try {
        
        //generating sound on click....
        AudioServicesPlaySystemSound (soundFileObject);
        
        if( radioBtn3.tag == 4 ){
            
            radioBtn3.tag = 2;
            [radioBtn3 setImage:[UIImage imageNamed:@"Credit_Deselect.png"] forState:UIControlStateNormal];
            
            if(([deliveryType isEqualToString:@"TA-CB"])){
                deliveryType = @"TA";
                
            }
            else{
                deliveryType = @"DD";
                
            }
            
        }
        else{
            
            radioBtn3.tag = 4;
            [radioBtn3 setImage:[UIImage imageNamed:@"Credit_Select.png"] forState:UIControlStateNormal];
            
            if(([deliveryType isEqualToString:@"TA"]) || ([deliveryType isEqualToString:@"DD-CB"])){
                deliveryType = @"TA-CB";
                
            }
            else{
                deliveryType = @"DD-CB";
                
            }
            
        }
        
        /*
         //added by Srinivasulu on 21/04/2017....
         //reason credit pay was added on this day....
         @try {
         if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 1)){
         
         if(payTxt1 != nil && payTxt2 != nil)
         finalBillDue = [[NSString stringWithFormat:@"%.2f",[payTxt1.text floatValue]-[payTxt2.text floatValue]] copy];
         
         }
         } @catch (NSException *exception) {
         
         }
         
         
         //upto here on 21/04/2017....*/
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
    
}

#pragma -mark methods added by Srinivasulu on 17/06/2017....

#pragma -mark reuseable methods used in this page....

/**
 * @description  Displaying th PopUp's and reloading table if popUp is vissiable.....
 * @date         10/05/2017
 * @method       showPopUpForTables:-- popUpWidth:-- popUpHeight:-- presentPopUpAt:-- showViewIn:-- permittedArrowDirections:--
 * @author       Srinivasulu
 * @param        UITableView
 * @param        float
 * @param        float
 * @param        id
 * @param        id
 * @param        permittedArrowDirections
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)showPopUpForTables:(UITableView *)tableName   popUpWidth:(float)width popUpHeight:(float)height  presentPopUpAt:(id)displayFrame  showViewIn:(id)view   permittedArrowDirections:(UIPopoverArrowDirection)arrowDirections{
    
    @try {
        
        //        if ( [catPopOver isPopoverVisible] && (tableName.frame.size.height > height) ){
        //            catPopOver.popoverContentSize =  CGSizeMake(width, height);
        
        if ( popOver.popoverVisible && (tableName.frame.size.height > height) ){
            
            popOver.popoverContentSize =  CGSizeMake(width, height);
            
            [tableName reloadData];
            return;
            
        }
        
        //        if([catPopOver isPopoverVisible])
        //            [catPopOver dismissPopoverAnimated:YES];
        
        if(popOver.popoverVisible)
            [popOver dismissPopoverAnimated:YES];
        
        
        
        UITextView *textView = displayFrame;
        
        PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
        
        UIView *customView = [[UIView alloc] initWithFrame:CGRectMake( 0.0, 0.0, width, height)];
        customView.opaque = NO;
        customView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
        customView.layer.borderColor = [UIColor lightGrayColor].CGColor;
        customView.layer.borderWidth = 2.0f;
        [customView setHidden:NO];
        
        
        //        tableName = [[UITableView alloc]init];
        tableName.layer.borderWidth = 1.0;
        tableName.layer.cornerRadius = 10.0;
        tableName.bounces = FALSE;
        tableName.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        tableName.layer.borderColor = [UIColor blackColor].CGColor;
        tableName.dataSource = self;
        tableName.delegate = self;
        tableName.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
        
        tableName.hidden = NO;
        tableName.frame = CGRectMake(0.0, 0.0, customView.frame.size.width, customView.frame.size.height);
        [customView addSubview:tableName];
        [tableName reloadData];
        
        customerInfoPopUp.view = customView;
        
        
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            
            customerInfoPopUp.preferredContentSize =  CGSizeMake(customView.frame.size.width, customView.frame.size.height);
            
            UIPopoverController * popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            
            popover.backgroundColor = [UIColor whiteColor];
            
            [popover presentPopoverFromRect:textView.frame inView:view permittedArrowDirections:arrowDirections animated:YES];
            
            //            catPopOver = popover;
            
            popOver = popover;
        }
        
        else {
            
            //            customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            // popover.contentViewController.view.alpha = 0.0;
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            //            catPopOver = popover;
            popOver = popover;
            
        }
        
        UIGraphicsBeginImageContext(customView.frame.size);
        [[UIImage imageNamed:@"CustomerView.png"] drawInRect:customView.bounds];
        UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        customView.backgroundColor = [UIColor colorWithPatternImage:image];
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        [tableName reloadData];
    }
}

#pragma -mark method changed by Srinivasulu on 17/062017.....


#pragma -mark actions used for the dropdown...

/**
 * @description  here we are displaying list of departments in drop down....
 * @date
 * @method       populateCstmrDprtmnt:
 * @author
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 17/06/2017....
 * @reason      added the comments and exception handling.... changed popUp display logic....  used common method to display popUp....  not completed....
 *
 */

-(void)populateCstmrDprtmnt:(UIButton *)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        if(departmentArr.count == 0 || departmentArr == nil){
            [self callingDepartmentList];
            
            if(departmentArr.count == 0 )
                return;
        }
        
        float tableHeight = departmentArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = departmentArr.count * 33;
        
        if(departmentArr.count > 5)
            tableHeight = (tableHeight/departmentArr.count) * 5;
        
        
        if( ((transperentView.isHidden) || (transperentView == nil)))
            
            [self showPopUpForTables:deprtmntTbl  popUpWidth:departmentFld.frame.size.width  popUpHeight:tableHeight presentPopUpAt:departmentFld  showViewIn:customerSpecificView permittedArrowDirections:UIPopoverArrowDirectionUp];
        
        else
            
            [self showPopUpForTables:deprtmntTbl  popUpWidth:itemsSalePersonDeptTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:itemsSalePersonDeptTxt  showViewIn:editItemDetailsView permittedArrowDirections:UIPopoverArrowDirectionUp];
        
        
        //        int count = 5;
        
        
        //        if([departmentArr count] > 0 ){
        //
        //            if ([departmentArr count] < count) {
        //                count = [departmentArr count];
        //            }
        //
        //            PopOverViewController  * customerInfoPopUp = [[PopOverViewController alloc] init];
        //
        //            UIView *customView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 200,count*40)];
        //            customView.opaque = NO;
        //            customView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
        //            customView.layer.borderColor = [UIColor lightGrayColor].CGColor;
        //            customView.layer.borderWidth = 2.0f;
        //            [customView setHidden:NO];
        //
        //            deprtmntTbl = [[UITableView alloc] init];
        //            deprtmntTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        //            [deprtmntTbl setDataSource:self];
        //            [deprtmntTbl setDelegate:self];
        //            [deprtmntTbl.layer setBorderWidth:1.0f];
        //            deprtmntTbl.layer.cornerRadius = 3;
        //            deprtmntTbl.layer.borderColor = [UIColor grayColor].CGColor;
        //
        //
        //            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //
        //                deprtmntTbl.frame = CGRectMake(0, 0, departmentFld.frame.size.width+40, departmentFld.frame.size.height+100);
        //
        //            }
        //
        //
        //            [customView addSubview:deprtmntTbl];
        //
        //            customerInfoPopUp.view = customView;
        //
        //
        //            if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
        //                customerInfoPopUp.preferredContentSize =  CGSizeMake(customView.frame.size.width, customView.frame.size.height);
        //
        //                UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        //                [popover presentPopoverFromRect:departmentFld.frame inView:customerSpecificView permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        //
        //                popOver= popover;
        //            }
        //
        //            else {
        //
        //                customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
        //
        //                UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        //                // popover.contentViewController.view.alpha = 0.0;
        //                [[[popover contentViewController]  view] setBackgroundColor:[[UIColor whiteColor] colorWithAlphaComponent:1.0f]];
        //                [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        //                popOver = popover;
        //            }
        //
        //            UIGraphicsBeginImageContext(customView.frame.size);
        //            [[UIImage imageNamed:@"CustomerView.png"] drawInRect:customView.bounds];
        //            UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
        //            UIGraphicsEndImageContext();
        //            customView.backgroundColor = [UIColor colorWithPatternImage:image];
        //        }
        
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        
    }
    
}

/**
 * @description  here we are displaying list of departments in drop down....
 * @date
 * @method       populateSubDepartment:
 * @author
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 22/06/2017....
 * @reason      added the comments and exception handling.... changed popUp display logic....  used common method to display popUp....  not completed....
 *
 */

-(void)populateSubDepartment:(UIButton *)sender{
    
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        
        float y_position = self.view.frame.size.height/2;
        
        if((!(departmentFld.text).length && (transperentView.isHidden  && transperentView != nil) ) || (!(itemsSalePersonDeptTxt.text).length && !transperentView.isHidden)){
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_select_the_department_first", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
            return;
        }
        if(subDepartmentArr.count == 0 || subDepartmentArr == nil){
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"no_data_found", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
            return;
        }
        
        
        float tableHeight = subDepartmentArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = subDepartmentArr.count * 33;
        
        if(subDepartmentArr.count > 5)
            tableHeight = (tableHeight/subDepartmentArr.count) * 5;
        
        
        if((transperentView.isHidden) || (transperentView == nil)){
            
            [self showPopUpForTables:subDepartmentTbl  popUpWidth:subDepartmentFld.frame.size.width  popUpHeight:tableHeight presentPopUpAt:subDepartmentFld  showViewIn:customerSpecificView permittedArrowDirections:UIPopoverArrowDirectionUp];
        }
        else{
            
            [self showPopUpForTables:subDepartmentTbl  popUpWidth:itemsSalePersonSubDeptTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:itemsSalePersonSubDeptTxt  showViewIn:editItemDetailsView permittedArrowDirections:UIPopoverArrowDirectionUp];
        }
        
        //        if([subDepartmentArr count] == 0 || subDepartmentArr == nil)
        //            [self callingSubDepartment];
        //
        //
        //        int count = 5;
        //        if([subDepartmentArr count] > 0 ) {
        //
        //
        //            if ([subDepartmentArr count] < count) {
        //                count = [subDepartmentArr count];
        //            }
        //
        //            PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
        //
        //            UIView *customView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, subDepartmentFld.frame.size.width,count *40)];
        //            customView.opaque = NO;
        //            customView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
        //            customView.layer.borderColor = [UIColor lightGrayColor].CGColor;
        //            customView.layer.borderWidth = 2.0f;
        //            [customView setHidden:NO];
        //
        //            subDepartmentTbl = [[UITableView alloc] init];
        //            subDepartmentTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        //            [subDepartmentTbl setDataSource:self];
        //            [subDepartmentTbl setDelegate:self];
        //            [subDepartmentTbl.layer setBorderWidth:1.0f];
        //            subDepartmentTbl.layer.cornerRadius = 3;
        //            subDepartmentTbl.layer.borderColor = [UIColor grayColor].CGColor;
        //
        //
        //            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //
        //                subDepartmentTbl.frame = CGRectMake(0, 0, customView.frame.size.width, customView.frame.size.height);
        //
        //            }
        //
        //
        //            [customView addSubview:subDepartmentTbl];
        //
        //            customerInfoPopUp.view = customView;
        //
        //
        //            if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
        //                customerInfoPopUp.preferredContentSize =  CGSizeMake(customView.frame.size.width, customView.frame.size.height);
        //
        //                UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        //
        //                [popover presentPopoverFromRect:subDepartmentFld.frame inView:customerSpecificView permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        //
        //                popOver= popover;
        //
        //            }
        //
        //            else {
        //
        //                customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
        //
        //                UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        //                // popover.contentViewController.view.alpha = 0.0;
        //                [[[popover contentViewController]  view] setBackgroundColor:[[UIColor whiteColor] colorWithAlphaComponent:1.0f]];
        //                [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        //                popOver = popover;
        //
        //            }
        //
        //            UIGraphicsBeginImageContext(customView.frame.size);
        //            [[UIImage imageNamed:@"CustomerView.png"] drawInRect:customView.bounds];
        //            UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
        //            UIGraphicsEndImageContext();
        //            customView.backgroundColor = [UIColor colorWithPatternImage:image];
        //
        //
        //        }
        
    } @catch (NSException *exception) {
        
        
    } @finally {
        
    }
    
}

/**
 * @description  here we are showing sales persons in drop down....
 * @date
 * @method       selectSalesPersonIds:
 * @author
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 22/06/2017....
 * @reason      added the comments and exception handling.... changed popUp display logic....  used common method to display popUp....  not completed....
 *
 */

-(void)selectSalesPersonIds:(UIButton*)sender {
    
    int tagToSend = 0;

    @try {
        // added by sai on 28/07/2019
        if (sender.tag == 150){
            tagToSend = 150;
        }else if (sender.tag == 151){
            tagToSend = 150;
        }
        // added by sai
        
        //changed by Srinivasulu on 22/06/2017....
        if(isOfflineService){
            
            offline = [[OfflineBillingServices alloc] init];
            
            employeeIdsArr = [offline getOfflineEmplooyeDetails];
            return;
        }
        
        
        //checking the array status and doing service call....
        if( (employeeIdsArr == nil) && (!employeeIdsArr.count)){
            
            // showing the HUD ..
            [HUD setHidden:NO];
            
            employeeIdsArr = [NSMutableArray new];
            //checking for deals & offers...
            
            // By Sai as converting following soap into rest on 26/07/2019
            
            //            EmployeesSoapBinding *custBindng =  [EmployeesSvc EmployeesSoapBinding] ;
            //            EmployeesSvc_getEmployees *aParameters = [[EmployeesSvc_getEmployees alloc] init];
            
            
            //            NSError * err;
            //            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err];
            //            NSString * requestHeaderString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            
            
            NSArray *loyaltyKeys = @[START_INDEX,LOCATION,REQUEST_HEADER, @"designation", @"role"];
            
            NSArray *loyaltyObjects = @[@"-1",presentLocation,[RequestHeader getRequestHeader], @"DeliveryPerson", @"DeliveryPerson"];
            NSDictionary *dictionary_req = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
            
            NSError * err_;
            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_req options:0 error:&err_];
            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
            WebServiceController * controller = [WebServiceController new];
            
            [controller setEmployeeServiceDelegate: self];
            [controller getEmployeeDetails:loyaltyString];
            
            
            
            // By Sai as converting following soap into rest on 26/07/2019
            //aParameters.employeeDetails = loyaltyString;
            //            EmployeesSoapBindingResponse *response = [custBindng getEmployeesUsingParameters:(EmployeesSvc_getEmployees *)aParameters];
            //            NSArray *responseBodyParts = response.bodyParts;
            //            for (id bodyPart in responseBodyParts) {
            //                if ([bodyPart isKindOfClass:[EmployeesSvc_getEmployeesResponse class]]) {
            //                    EmployeesSvc_getEmployeesResponse *body = (EmployeesSvc_getEmployeesResponse *)bodyPart;
            //                    //                    printf("\nresponse=%s",[body.return_ UTF8String]);
            //                    NSError *e;
            //
            //                    NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
            //                                                                          options: NSJSONReadingMutableContainers
            //                                                                            error: &e];
            //                    NSLog (@" Delivery %@",JSON1);
            //                    NSDictionary *dictionary = [JSON1 valueForKey:RESPONSE_HEADER];
            //                    if ([[dictionary valueForKey:RESPONSE_CODE] intValue] == 0) {
            //
            //                        employeeIdsArr = [[JSON1 valueForKey:kEmplyeesList] mutableCopy];
            //
            //                    }
            //
            //
            //                    [HUD setHidden:YES];
            //                }
            //            }
            //upto here By Sai as converting above soap into rest on 26/07/2019
            
        }
        
    } @catch (NSException *exception) {
        
        [HUD setHidden:YES];
        
        
    }
    @finally{
        //        [HUD setHidden:YES];
        
        if(employeeIdsArr.count)
            [self populateEmployeesData:tagToSend];
        
    }
    
    //upto here on 22/06/2017....
    
}


// added by sai on 26/07/2019
/**
 * @description
 * @date         26/07/2019
 * @method       getEmployeeDetailsSucess:
 * @author       sai
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */
- (void)getEmployeeDetailsSucess:(NSDictionary *)successResponse{
    
    NSLog (@" Delivery %@",successResponse);
    @try{
        
        //        hlcell.textLabel.text =  [NSString stringWithFormat:@"%@(%@)",[dic valueForKey:@"firstName"],[dic valueForKey:@"employeeCode"]];
        
        employeeIdsArr = [[successResponse valueForKey:@"employeeDetailsList"] mutableCopy];
        
        for(int i = 0; i<  employeeIdsArr.count; i++){
            NSLog(@"%i",i);
            NSMutableDictionary *New = employeeIdsArr[i];
            NSLog(@"%@", [New valueForKey:@"designation"]);
            if([[New valueForKey:@"designation"]  isEqual: @"Billing Executive"]){
                NSLog(@"This is Sales Person");
                [salesPersonIDArr addObject: employeeIdsArr[i]];
            }
            else if([[New valueForKey:@"designation"]  isEqual: @"Delivery Person"]) {
                NSLog(@"This is Delivery Person");
                [deliveryPersonIDArr addObject: employeeIdsArr[i]];
                
            }
        }
        
        NSLog(@"Sales Persons Are %@",salesPersonIDArr);
        
    }@catch (NSException *exception){
        UIAlertView *alert1 = [[UIAlertView alloc] initWithTitle:@"Employee Details" message:@"Cant get Details of employees"    delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
        [alert1 show];
        
        NSLog(@"%@",exception);
    }
    @finally{
        [HUD setHidden :YES];
    }
    
}

/**
 * @description
 * @date         26/07/2019
 * @method       getEmployeeDetailsFailure:
 * @author       sai
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */
- (void)getEmployeeDetailsFailure:(NSString *)successFailure{
    
    @try {
        
        NSLog (@" Fail %@",successFailure);
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden :YES];
        
    }
    
}


/**
 * @description  here we are showing sales persons in drop down....
 * @date
 * @method       populateEmployeesData:
 * @author
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 23/06/2017....
 * @reason      added the comments and exception handling.... changed popUp display logic....  used common method to display popUp....  not completed....
 *
 */

-(void)populateEmployeesData:(int)tag{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound(soundFileObject);
    
    
    @try {
        
        //        float tableHeight = employeeIdsArr.count * 40;
        float tableHeight = salesPersonIDArr.count * 40;
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            //            tableHeight = employeeIdsArr.count * 33;
            tableHeight = salesPersonIDArr.count * 33;
        
        
        if(employeeIdsArr.count > 5)
            //            tableHeight = (tableHeight/employeeIdsArr.count) * 5;
            tableHeight = (tableHeight/salesPersonIDArr.count) * 5;
        
        
        
        if (segment_index == 5) {
            
            [self showPopUpForTables:salesPersonTbl  popUpWidth:empCodeTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:empCodeTxt  showViewIn:employeeView permittedArrowDirections:UIPopoverArrowDirectionUp];
            
        }
        else if (isItemEmpl) {
            
            [self showPopUpForTables:salesPersonTbl  popUpWidth:salesPersonIdFld.frame.size.width  popUpHeight:tableHeight presentPopUpAt:salesPersonIdFld  showViewIn:customerSpecificView permittedArrowDirections:UIPopoverArrowDirectionUp];
            
        }
        
        //added by Srinivasulu on 03/11/2017....
        //03/11/2017
        
        //added BY sai on 30/07/2019
        else if(!transperentView.isHidden && transperentView != nil){
            if (!editItemDetailsView.isHidden && editItemDetailsView != nil){
                [self showPopUpForTables:salesPersonTbl  popUpWidth:itemsSalePersonTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:itemsSalePersonTxt  showViewIn:editItemDetailsView permittedArrowDirections:UIPopoverArrowDirectionAny];
            }
            else if (!paymentScrollView.isHidden && paymentScrollView != nil){
                if (tag == 150){
                    [self showPopUpForTables:deliveryPersonTbl  popUpWidth:deliveryPersonId.frame.size.width  popUpHeight:tableHeight presentPopUpAt:deliveryPersonId  showViewIn:paymentScrollView permittedArrowDirections:UIPopoverArrowDirectionUp];
                }
            }
        }
        
        //        else if(!transperentView.isHidden && transperentView != nil){
        //
        //
        //            [self showPopUpForTables:salesPersonTbl  popUpWidth:itemsSalePersonTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:itemsSalePersonTxt  showViewIn:editItemDetailsView permittedArrowDirections:UIPopoverArrowDirectionAny];
        //        }
        
        //upto here on 03/11/2017....
        //        else if (!paymentScrollView.isHidden && paymentScrollView != nil){
        //
        //            [self showPopUpForTables:salesPersonTbl  popUpWidth:salesPersonId.frame.size.width  popUpHeight:tableHeight presentPopUpAt:salesPersonId  showViewIn:paymentScrollView permittedArrowDirections:UIPopoverArrowDirectionUp];
        //        }
        
        
        
        //        PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
        //
        //        UIView *customView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, salesPersonId.frame.size.width,200)];
        //        customView.opaque = NO;
        //        customView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
        //        customView.layer.borderColor = [UIColor lightGrayColor].CGColor;
        //        customView.layer.borderWidth = 2.0f;
        //        [customView setHidden:NO];
        //
        //        if (segment_index == 5) {
        //
        //            customView.frame = CGRectMake(0, 0, empCodeTxt.frame.size.width, 200);
        //        }
        //        else if (isItemEmpl) {
        //
        //            customView.frame = CGRectMake(0, 0, salesPersonIdFld.frame.size.width, 200);
        //
        //        }
        //
        //        salesPersonTbl = [[UITableView alloc] init];
        //        salesPersonTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        //        [salesPersonTbl setDataSource:self];
        //        [salesPersonTbl setDelegate:self];
        //        [salesPersonTbl.layer setBorderWidth:1.0f];
        //        salesPersonTbl.layer.cornerRadius = 3;
        //        salesPersonTbl.layer.borderColor = [UIColor grayColor].CGColor;
        //
        //
        //        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //
        //            salesPersonTbl.frame = CGRectMake(0, 0, customView.frame.size.width, customView.frame.size.height);
        //
        //        }
        //
        //
        //        [customView addSubview:salesPersonTbl];
        //
        //        customerInfoPopUp.view = customView;
        //
        //
        //        if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
        //            customerInfoPopUp.preferredContentSize =  CGSizeMake(customView.frame.size.width, customView.frame.size.height);
        //
        //            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        //
        //            if (segment_index == 5) {
        //
        //                [popover presentPopoverFromRect:empCodeTxt.frame inView:employeeView permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        //
        //            }
        //            else if (isItemEmpl) {
        //
        //                [popover presentPopoverFromRect:salesPersonIdFld.frame inView:customerSpecificView permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        //
        //            }
        //            else {
        //                [popover presentPopoverFromRect:salesPersonId.frame inView:paymentScrollView permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        //            }
        //
        //            popOver= popover;
        //
        //        }
        //
        //        else {
        //
        //            customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
        //
        //            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        //            // popover.contentViewController.view.alpha = 0.0;
        //            [[[popover contentViewController]  view] setBackgroundColor:[[UIColor whiteColor] colorWithAlphaComponent:1.0f]];
        //            [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        //            popOver = popover;
        //
        //        }
        //
        //        UIGraphicsBeginImageContext(customView.frame.size);
        //        [[UIImage imageNamed:@"CustomerView.png"] drawInRect:customView.bounds];
        //        UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
        //        UIGraphicsEndImageContext();
        //        customView.backgroundColor = [UIColor colorWithPatternImage:image];
        //
        //        [salesPersonTbl reloadData];
        
        
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
    } @finally {
        
        
    }
    
}

#pragma - mark change in service calls....

#pragma mark getDepartmentList :

/**
 * @description  here we are calling the get Departments seavices method....
 * @date
 * @method       callingDepartmentList
 * @author
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 17/06/2017....
 * @reason      added the comments.... hidding HUD in catch block....  not completed....
 *
 */

-(void)callingDepartmentList  {
    
    @try {
        
        [HUD setHidden:NO];
        
        departmentArr = [NSMutableArray new];
        subDepartmentArr = [NSMutableArray new];
        dept_SubDept_Dic = [NSMutableDictionary new];
        
        
        NSArray *keys = @[REQUEST_HEADER,START_INDEX,kNumberOfSubDepartments,@"slNo"];
        NSArray *objects = @[[RequestHeader getRequestHeader],@"-1",@true,@true];
        
        NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
        NSString * departmentJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController *webServiceController = [WebServiceController new];
        webServiceController.outletMasterDelegate = self;
        [webServiceController getDepartmentList:departmentJsonString];
        
    }
    @catch (NSException *exception) {
        
        [HUD setHidden:YES];
        
        float y_axis = self.view.frame.size.height - 350;
        
        NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"unable_to_process_your_request", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
    }
    
}

#pragma mark calling Sub - Department:.... This method has to be remov.. because not in use

/**
 * @description  here we are calling the get SubDepartments seavices method....
 * @date
 * @method       callingSubDepartment
 * @author
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 17/06/2017....
 * @reason      added the comments.... hidding HUD in catch block....  not completed....
 *
 */

-(void)callingSubDepartment {
    
    @try {
        
        [HUD show:YES];
        [HUD setHidden: NO];
        
        subDepartmentArr = [NSMutableArray new];
        
        
        NSArray *keys = @[REQUEST_HEADER,START_INDEX,kPrimaryDepartment,@"subDepartment"];
        NSArray *objects = @[[RequestHeader getRequestHeader],@"-1",departmentFld.text,@""];
        
        NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err];
        NSString * departmentJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController *webServiceController = [WebServiceController new];
        webServiceController.outletMasterDelegate = self;
        [webServiceController getDepartmentList:departmentJsonString];
        
    }
    @catch (NSException *exception) {
        
        [HUD setHidden:YES];
        
    }
    @finally {
        
    }
    
}


#pragma -mark handling of the service call response....

/**
 * @description  here we are handling the service call response received from service end....
 * @date
 * @method       getDepartmentSuccessResponse:
 * @author
 * @param        NSDictionary
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 17/06/2017....
 * @reason      added the comments.... hidding HUD in catch block....  not completed....
 *
 */

-(void)getDepartmentSuccessResponse:(NSDictionary*)sucessDictionary{
    
    @try {
        
        for (NSDictionary * department in  [sucessDictionary valueForKey:@"departments"]){
            [departmentArr addObject:[self checkGivenValueIsNullOrNil:[department valueForKey:@"primaryDepartment"]  defaultReturn:@""]];
            
            NSMutableArray *locArr = [NSMutableArray new];
            
            @try {
                
                for (NSDictionary * subDepartment in [department valueForKey:@"secondaryDepartments"]){
                    
                    [locArr addObject:[self checkGivenValueIsNullOrNil:[subDepartment valueForKey:@"secondaryDepartment"]  defaultReturn:@""]];
                }
                
            } @catch (NSException *exception) {
                
            }
            
            dept_SubDept_Dic[[self checkGivenValueIsNullOrNil:[department valueForKey:@"primaryDepartment"]  defaultReturn:@""]] = locArr;
            
        }
        
    }
    @catch (NSException *exception) {
        
    }
    @finally {
        [HUD setHidden: YES];
    }
    
}

/**
 * @description  here we are handling the service call response received from service end....
 * @date
 * @method       getDepartmentErrorResponse:
 * @author
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 17/06/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message....  not completed....
 *
 */

-(void)getDepartmentErrorResponse:(NSString *)error {
    
    NSString * mesg;
    float y_axis;
    
    @try {
        
        [HUD setHidden:YES];
        
        y_axis = self.view.frame.size.height - 350;
        
        
        mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",error];
        
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
        
    } @catch (NSException *exception) {
        
        
        mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"no_data_found", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
    }
    
    
}


#pragma  -mark labels added

/**
 * @description  this is method we are creating the label and adding them as subviews....
 * @date         30/06/2017..
 * @method       addLabelsToScrollView:--
 * @author       Srinivasulu
 * @param        NSArray
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)addLabelsToScrollView:(NSArray *)labelsArr{
    
    @try {
        
        if( (!labelsArr.count)  || (labelsArr == nil)){
            //            NSMutableDictionary * dic = [NSMutableDictionary new];
            //            [dic  setObject:@"0.00" forKey:@"taxValue"];
            //            [dic  setObject:@"Tax" forKey:@"taxCode"];
            //
            //            labelsArr =  [NSArray arrayWithObjects:dic,nil];
            
            NSMutableDictionary * dic = [NSMutableDictionary new];
            NSMutableDictionary * dic2 = [NSMutableDictionary new];
            
            dic[@"taxValue"] = @"0.00";
            dic[@"taxCode"] = @"CGST";
            
            dic2[@"taxValue"] = @"0.00";
            dic2[@"taxCode"] = @"SGST";
            
            labelsArr =  @[dic,dic2];
        }
        
        
        
        
        if(labelsArr.count){
            
            if(taxDetailsScrollView == nil){
                
                taxDetailsScrollView = [[UIScrollView alloc] init];
                
                taxDetailsScrollView.delegate = self;
                //            taxDetailsScrollView.scrollEnabled = YES;
                //            taxDetailsScrollView.pagingEnabled = YES;
                //            taxDetailsScrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite;
                //            taxDetailsScrollView.showsHorizontalScrollIndicator = NO;
                taxDetailsScrollView.showsVerticalScrollIndicator = YES;
                //            taxDetailsScrollView.scrollEnabled = YES;
                //            taxDetailsScrollView.scrollIndicatorInsets = UIEdgeInsetsMake(30, 0, 0, 10);
                //            taxDetailsScrollView.showsVerticalScrollIndicator = YES;
                //            taxDetailsScrollView.alwaysBounceVertical = NO;
                //            taxDetailsScrollView.alwaysBounceHorizontal = NO;
                //            taxDetailsScrollView.bounces = NO;
                //            taxDetailsScrollView.hidden = NO;
                //            [taxDetailsScrollView flashScrollIndicators];
                
                
                //                [detailsFooterScrollView addSubview:taxDetailsScrollView];
                
                
                
                scrollViewBarImgView = [[UIImageView alloc] init];
                UIImage *imgBar = [UIImage imageNamed:@"Gradient_2.png"];
                scrollViewBarImgView.image = imgBar;
                CGRect frame = scrollViewBarImgView.frame;
                frame.size.width = 8;
                frame.size.height = 60;
                frame.origin.x = 312;
                frame.origin.y = 0;
                scrollViewBarImgView.frame = frame;
                
                
                
                
            }
            else{
                
                
                for(id view in taxDetailsScrollView.subviews){
                    
                    [view removeFromSuperview];
                    
                }
                
            }
            
            
            float origin_y = 0;
            
            
            for(NSDictionary * dic in labelsArr){
                
                UILabel *statusNameLbl = [[UILabel alloc] init];
                statusNameLbl.layer.masksToBounds = YES;
                statusNameLbl.numberOfLines = 2;
                statusNameLbl.textAlignment = NSTextAlignmentLeft;
                statusNameLbl.textColor = [UIColor whiteColor];
                
                
                UILabel *statusValueLbl = [[UILabel alloc] init];
                statusValueLbl.layer.masksToBounds = YES;
                statusValueLbl.numberOfLines = 2;
                statusValueLbl.textAlignment = NSTextAlignmentRight;
                statusValueLbl.textColor = [UIColor whiteColor];
                
                
                statusNameLbl.frame =  CGRectMake( 0, origin_y, taxTitle.frame.size.width, 30);
                statusValueLbl.frame =  CGRectMake( statusNameLbl.frame.size.width, origin_y, taxTxt.frame.size.width, 30);
                
                
                
                [taxDetailsScrollView addSubview:statusNameLbl];
                [taxDetailsScrollView addSubview:statusValueLbl];
                
                @try {
                    
                    statusNameLbl.text = [NSString stringWithFormat:@"%@", [self checkGivenValueIsNullOrNil:[dic valueForKey:@"taxCode"] defaultReturn:@"--"]];
                    
                    statusValueLbl.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[dic valueForKey:@"taxValue"] defaultReturn:@"0.00"] floatValue]];
                    
                } @catch (NSException *exception) {
                    
                }
                
                origin_y = origin_y + statusNameLbl.frame.size.height;
                
                
                
            }
            
            
            [taxDetailsScrollView addSubview:scrollViewBarImgView];
            
            
            scrollViewBarImgView.frame = CGRectMake( taxDetailsScrollView.frame.size.width - 10, 0, 10, 40);
            
            
            
            taxDetailsScrollView.contentSize = CGSizeMake( taxDetailsScrollView.frame.size.width, origin_y);
            
            
            //        taxDetailsScrollView.scrollEnabled = YES;
            //        taxDetailsScrollView.pagingEnabled = YES;
            //        taxDetailsScrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite;
            taxDetailsScrollView.indicatorStyle = UIScrollViewIndicatorStyleBlack;
            
            //        taxDetailsScrollView.showsHorizontalScrollIndicator = NO;
            taxDetailsScrollView.showsVerticalScrollIndicator = YES;
            //        taxDetailsScrollView.scrollEnabled = YES;
            ////        taxDetailsScrollView.scrollIndicatorInsets = UIEdgeInsetsMake(30, 0, 0, 10);
            //        taxDetailsScrollView.showsVerticalScrollIndicator = YES;
            //        taxDetailsScrollView.alwaysBounceVertical = NO;
            //        taxDetailsScrollView.alwaysBounceHorizontal = NO;
            //        taxDetailsScrollView.bounces = NO;
            //        taxDetailsScrollView.hidden = NO;
            //        [taxDetailsScrollView flashScrollIndicators];
            //
            //        taxDetailsScrollView.bounces = YES;
            //
            //        taxDetailsScrollView.backgroundColor = [UIColor redColor];
            //
            //        taxDetailsScrollView.showsVerticalScrollIndicator = YES;
            //        [taxDetailsScrollView flashScrollIndicators];
            
            if( labelsArr.count <= 2)
                scrollViewBarImgView.hidden = YES;
            else
                scrollViewBarImgView.hidden = NO;
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:taxDetailsScrollView andSubViews:YES fontSize:18.0 cornerRadius:10.0f];
            
            
            taxDetailsScrollView.hidden = NO;
            
            //            scrollViewBarImgView.hidden = NO;
            
        }
        else{
            
            //            if((taxDetailsScrollView != nil) && (scrollViewBarImgView != nil)){
            
            taxDetailsScrollView.hidden = YES;
            //                detailsFooterScrollView.hidden = YES;
            scrollViewBarImgView.hidden = YES;
            
            //            }
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

#pragma -mark UIScrollView delegate methods....

/**
 * @description  this is method will be executed when scrollView in
 * @date         30/06/2017..
 * @method       scrollViewDidScroll:
 * @author       Srinivasulu
 * @param        UIScrollView
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)scrollViewDidScroll:(UIScrollView *)taxScrollView
{
    
    @try {
        
        if(taxScrollView == taxDetailsScrollView){
            
            //reading the scrollView frame && scrollView offSet....
            CGPoint offset = scrollView.contentOffset;
            CGRect frame = scrollViewBarImgView.frame;
            
            float fact = (scrollView.contentSize.height + 50) / scrollView.contentSize.height;
            
            frame.origin.y = offset.y + (offset.y/fact);
            
            [UIView beginAnimations:nil context:nil];
            [UIView setAnimationDuration:0.1];
            scrollViewBarImgView.frame = frame;
            [UIView commitAnimations];
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

#pragma -mark methods used to display customer popUp....

/**
 * @description  here we are accessing the creating/updating(i.e., if existing) in offline as well as the online....
 * @date
 * @method       customerInfoClicked:
 * @author
 * @param
 * @param
 *
 * @return
 *
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 11/08/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message.... changed handling code.... not completed....
 *
 */

-(void)customerInfoClicked:(id)sender {
    
    //genrating the soundfile object....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        
        //        //below line has to be removed written by Srinivasulu on 06/09/2017....
        //        //reason this of only testing;
        //
        //        [self showOtherPaymentsView];
        //        return;
        //        //upto here on 06/09/2017....
        
        BOOL callServices = false;
        
        if((custmerPhNum.text).length < 10){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_valide_phone_no", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            return;
        }
        else if(customerInfoDic == nil  ||  (!customerInfoDic.allKeys.count)) {
            
            callServices = true;
        }
        else if([[customerInfoDic valueForKey:@"phone"] isEqualToString:custmerPhNum.text]){
            
            callServices = false;
        }
        
        if(callServices)
            [self getCustomerDetailsForOffers];
        else
            [self populateCustomerInfoPopUp1:customerInfoDic];
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}
// Present below method is not using in this page..
// Please don't remove, it may be useful future..
-(void)populateCustomerInfoPopUp:(NSDictionary*)custInfo {
    
    PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
    
    UIView *customerView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 420, 300)];
    customerView.opaque = NO;
    customerView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
    customerView.layer.borderColor = [UIColor lightGrayColor].CGColor;
    customerView.layer.borderWidth = 2.0f;
    [customerView setHidden:NO];
    
    UILabel *custType = [[UILabel alloc] init];
    custType.textColor = [UIColor blackColor];
    custType.font = [UIFont boldSystemFontOfSize:18.0];
    custType.text  = @"Category";
    
    UILabel *custTypeVal = [[UILabel alloc] init];
    custTypeVal.textColor = [UIColor blackColor];
    custTypeVal.font = [UIFont boldSystemFontOfSize:18.0];
    if (![custInfo[@"category"] isKindOfClass:[NSNull class]]&& [custInfo[@"category"] length] > 0) {
        custTypeVal.text  = custInfo[@"category"];
    }
    else {
        custTypeVal.text  = @"--";
        
    }
    
    
    UILabel *custName = [[UILabel alloc] init];
    custName.textColor = [UIColor blackColor];
    custName.font = [UIFont boldSystemFontOfSize:18.0];
    custName.text  = @"Name";
    
    UILabel *custNameVal = [[UILabel alloc] init];
    custNameVal.textColor = [UIColor blackColor];
    custNameVal.font = [UIFont boldSystemFontOfSize:18.0];
    if (![custInfo[@"name"] isKindOfClass:[NSNull class]] && [custInfo[@"name"] length] > 0) {
        custNameVal.text  = custInfo[@"name"];
    }
    else {
        custNameVal.text  = @"--";
        
    }
    
    
    UILabel *custPhone = [[UILabel alloc] init];
    custPhone.textColor = [UIColor blackColor];
    custPhone.font = [UIFont boldSystemFontOfSize:18.0];
    custPhone.text  = @"Phone";
    
    UILabel *custPhoneVal = [[UILabel alloc] init];
    custPhoneVal.textColor = [UIColor blackColor];
    custPhoneVal.font = [UIFont boldSystemFontOfSize:18.0];
    if (![custInfo[@"phone"] isKindOfClass:[NSNull class]] && [custInfo[@"phone"] length] > 0) {
        custPhoneVal.text  = custInfo[@"phone"];
    }
    else {
        custPhoneVal.text  = @"--";
        
    }
    
    UILabel *custEmail = [[UILabel alloc] init];
    custEmail.textColor = [UIColor blackColor];
    custEmail.font = [UIFont boldSystemFontOfSize:18.0];
    custEmail.text  = @"Email";
    
    UILabel *custEmailVal = [[UILabel alloc] init];
    custEmailVal.textColor = [UIColor blackColor];
    custEmailVal.font = [UIFont boldSystemFontOfSize:18.0];
    if (![custInfo[@"email"] isKindOfClass:[NSNull class]]&&[custInfo[@"email"] length] > 0) {
        custEmailVal.text  = custInfo[@"email"];
    }
    else {
        custEmailVal.text   = @"--";
        
    }
    
    
    UILabel *street = [[UILabel alloc] init];
    street.textColor = [UIColor blackColor];
    street.font = [UIFont boldSystemFontOfSize:18.0];
    street.text  = @"Street";
    
    UILabel *streetVal = [[UILabel alloc] init];
    streetVal.textColor = [UIColor blackColor];
    streetVal.font = [UIFont boldSystemFontOfSize:18.0];
    if (![custInfo[@"street"] isKindOfClass:[NSNull class]] && [custInfo[@"street"] length] > 0) {
        streetVal.text  = custInfo[@"street"];
    }
    else {
        streetVal.text    = @"--";
        
    }
    
    UILabel *locality = [[UILabel alloc] init];
    locality.textColor = [UIColor blackColor];
    locality.font = [UIFont boldSystemFontOfSize:18.0];
    locality.text  = @"Locality";
    
    UILabel *localityVal = [[UILabel alloc] init];
    localityVal.textColor = [UIColor blackColor];
    localityVal.font = [UIFont boldSystemFontOfSize:18.0];
    if (![custInfo[@"locality"] isKindOfClass:[NSNull class]]&&[custInfo[@"locality"] length] > 0) {
        localityVal.text  = custInfo[@"locality"];
    }
    else {
        localityVal.text    = @"--";
        
    }
    
    UILabel *city = [[UILabel alloc] init];
    city.textColor = [UIColor blackColor];
    city.font = [UIFont boldSystemFontOfSize:18.0];
    city.text  = @"City";
    
    UILabel *cityVal = [[UILabel alloc] init];
    cityVal.textColor = [UIColor blackColor];
    cityVal.font = [UIFont boldSystemFontOfSize:18.0];
    if (![custInfo[@"city"] isKindOfClass:[NSNull class]]&&[custInfo[@"city"] length] > 0) {
        cityVal.text  = custInfo[@"city"];
    }
    else {
        cityVal.text    = @"--";
        
    }
    
    UILabel *pin = [[UILabel alloc] init];
    pin.textColor = [UIColor blackColor];
    pin.font = [UIFont boldSystemFontOfSize:18.0];
    pin.text  = @"Pin No";
    
    UILabel *pinVal = [[UILabel alloc] init];
    pinVal.textColor = [UIColor blackColor];
    pinVal.font = [UIFont boldSystemFontOfSize:18.0];
    if (![custInfo[@"pin_no"] isKindOfClass:[NSNull class]]&&[custInfo[@"pin_no"] length] > 0) {
        pinVal.text  = custInfo[@"pin_no"];
    }
    else {
        pinVal.text   =  @"--";
        
    }
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            
            custType.frame =  CGRectMake(10, 110, 150, 30);
            custTypeVal.frame =  CGRectMake(120, 110, 200, 30);
            
            custName.frame =  CGRectMake(10, 5, 150, 30);
            custNameVal.frame =  CGRectMake(120, 5, 200, 30);
            custPhone.frame =  CGRectMake(10, 40, 150, 30);
            custPhoneVal.frame =  CGRectMake(120, 40, 200, 30);
            custEmail.frame =  CGRectMake(10, 75, 150, 30);
            custEmailVal.frame =  CGRectMake(120, 75, 400, 30);
            
            street.frame =  CGRectMake(10, 145, 150, 30);
            streetVal.frame =  CGRectMake(120, 145, 200, 30);
            locality.frame =  CGRectMake(10, 180, 150, 30);
            localityVal.frame =  CGRectMake(120, 180, 200, 30);
            city.frame =  CGRectMake(10, 215, 150, 30);
            cityVal.frame =  CGRectMake(120, 215, 400, 30);
            
            pin.frame =  CGRectMake(10, 250, 170, 30);
            pinVal.frame =  CGRectMake(120, 250, 400, 30);
        }
    }
    
    [customerView addSubview:custType];
    [customerView addSubview:custTypeVal];
    [customerView addSubview:custName];
    [customerView addSubview:custNameVal];
    [customerView addSubview:custPhone];
    [customerView addSubview:custPhoneVal];
    [customerView addSubview:custEmail];
    [customerView addSubview:custEmailVal];
    [customerView addSubview:street];
    [customerView addSubview:streetVal];
    [customerView addSubview:locality];
    [customerView addSubview:localityVal];
    [customerView addSubview:city];
    [customerView addSubview:cityVal];
    [customerView addSubview:pin];
    [customerView addSubview:pinVal];
    
    customerInfoPopUp.view = customerView;
    
    
    if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
        customerInfoPopUp.preferredContentSize =  CGSizeMake(customerView.frame.size.width, customerView.frame.size.height);
        
        UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        
        //                [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        [popover presentPopoverFromRect:customerInfoEnable.frame inView:self.view permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        
        
        customerInfoPopOver= popover;
        
    }
    
    else {
        
        customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
        
        UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
        // popover.contentViewController.view.alpha = 0.0;
        popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
        [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
        customerInfoPopOver = popover;
        
    }
    
    UIGraphicsBeginImageContext(customerView.frame.size);
    [[UIImage imageNamed:@"CustomerView.png"] drawInRect:customerView.bounds];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    customerView.backgroundColor = [UIColor colorWithPatternImage:image];
    
}


/**
 * @description  it is one of populateCustomerInfoPopUp1 Method which will be executed on selection of CustomerDeatailsButton.......
 * @date         31/07/2017
 * @method       populateCustomerInfoPopUp1
 * @author       Saikrishna Kumbhoji
 * @param        UIButton
 * @param
 * @return
 *
 * @modified By Srinivasulu on 17/06/2017 && 21/05/2018 && 04/09/2018....
 * @reason      added the comments. hidding HUD in catch block. showing the error message. not completed..  changed addresss input field & added customer purchases
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateCustomerInfoPopUp1:(NSDictionary *)custInfo {
    
    @try{
        
        PopOverViewController * customerInfoPopUp = [[PopOverViewController alloc] init];
        
        customerView1 = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 420, 480)];
        customerView1.opaque = NO;
        customerView1.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:1.0f];
        customerView1.layer.borderColor = [UIColor lightGrayColor].CGColor;
        customerView1.layer.borderWidth = 2.0f;
        [customerView1 setHidden:NO];
        
        UIButton * closeBtn;
        
        UILabel * custDetailLbl;
        UILabel * custName;
        UILabel * gtin;
        UILabel * emailAddress;
        UILabel * address;
        
        //added by Srinivausulu on 21/05/2018....
        UIImage  * buttonImage_ = [UIImage imageNamed:@"right_gray_arrow.png"];
        
        customerPurchasesLbl = [[UILabel alloc] init];
        customerPurchasesLbl.text = NSLocalizedString(@"customer_purchases",nil);
        customerPurchasesLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        customerPurchasesLbl.textAlignment = NSTextAlignmentLeft;
        customerPurchasesLbl.textColor = [UIColor whiteColor];
        //        customerPurchasesLbl.layer.borderColor = [UIColor redColor].CGColor;
        customerPurchasesLbl.layer.borderWidth = 2;
        
        showCustomerPurchasesBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showCustomerPurchasesBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
        [showCustomerPurchasesBtn addTarget:self action:@selector(showCustomerPurchasesList:) forControlEvents:UIControlEventTouchDown];
        
        customerPurchasedSkuIdLbl = [[CustomLabel alloc] init];
        [customerPurchasedSkuIdLbl awakeFromNib];
        
        customerPurchasedSkuNameLbl = [[CustomLabel alloc] init];
        [customerPurchasedSkuNameLbl awakeFromNib];
        
        customerPurchasedSkuQtyLbl = [[CustomLabel alloc] init];
        [customerPurchasedSkuQtyLbl awakeFromNib];
        
        customerPurchasedSkuValueLbl = [[CustomLabel alloc] init];
        [customerPurchasedSkuValueLbl awakeFromNib];
        
        //deprtmntTbl table creation....
        listOfCustomerPurchasesTbl = [[UITableView alloc] init];
        listOfCustomerPurchasesTbl.backgroundColor = [UIColor clearColor];
        listOfCustomerPurchasesTbl.dataSource = self;
        listOfCustomerPurchasesTbl.delegate = self;
        (listOfCustomerPurchasesTbl.layer).borderWidth = 1.0f;
        listOfCustomerPurchasesTbl.layer.cornerRadius = 3;
        listOfCustomerPurchasesTbl.layer.borderColor = [UIColor grayColor].CGColor;
        
        //upto here on 21/05/2018....
        
        verticalScrollView = [[UIScrollView alloc] init];
        verticalScrollView.backgroundColor = [UIColor blackColor];
        
        custDetailLbl = [[UILabel alloc] init];
        custDetailLbl.text = NSLocalizedString(@"customer_details",nil);
        custDetailLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:25];
        custDetailLbl.alpha = 0.8f;
        custDetailLbl.textAlignment = NSTextAlignmentLeft;
        custDetailLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        custDetailLbl.textColor = [UIColor whiteColor];
        
        closeBtn = [[UIButton alloc] init];
        closeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        UIImage  * buttonImageDD2 = [UIImage imageNamed:@"delete.png"];
        [closeBtn setBackgroundImage:buttonImageDD2 forState:UIControlStateNormal];
        [closeBtn addTarget:self action:@selector(closeCustomerView:) forControlEvents:UIControlEventTouchDown];
        closeBtn.tag = 4;
        
        //added By Bhargav.v & Srinivasulu on 23/08/2018 & 03/08/2018....
        
        UILabel * mobileNumberLabel;
        UILabel * memberShipLabel;
        UILabel * houseLabel;
        UILabel * flatLabel;
        
        
        mobileNumberLabel = [[UILabel alloc] init];
        mobileNumberLabel.textColor = [UIColor whiteColor];
        mobileNumberLabel.font = [UIFont boldSystemFontOfSize:16.0];
        mobileNumberLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:16.0];
        mobileNumberLabel.text  = NSLocalizedString(@"mobile_number", nil);
        
        mobileNumberText = [[UITextField alloc] init];
        mobileNumberText.borderStyle = UITextBorderStyleRoundedRect;
        mobileNumberText.textColor = [UIColor blackColor];
        mobileNumberText.font = [UIFont systemFontOfSize:16];
        mobileNumberText.backgroundColor = [UIColor whiteColor];
        mobileNumberText.text = @"";
        mobileNumberText.delegate = self;
        mobileNumberText.placeholder = NSLocalizedString(@"mobile_number", nil);
        
        houseLabel = [[UILabel alloc] init];
        houseLabel.textColor = [UIColor whiteColor];
        houseLabel.font = [UIFont boldSystemFontOfSize:18.0];
        houseLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
        houseLabel.text  = NSLocalizedString(@"house", nil);
        
        flatLabel = [[UILabel alloc] init];
        flatLabel.textColor = [UIColor whiteColor];
        flatLabel.font = [UIFont boldSystemFontOfSize:18.0];
        flatLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0];
        flatLabel.text  = NSLocalizedString(@"flat", nil);
        
        memberShipCheckBoxBtn = [[UIButton alloc] init];
        UIImage * tempCheckBoxImg = [UIImage imageNamed:@"checkbox_off_background.png"];
        
        memberShipCheckBoxBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [memberShipCheckBoxBtn setBackgroundImage:tempCheckBoxImg forState:UIControlStateNormal];
        [memberShipCheckBoxBtn addTarget:self action:@selector(allowMemberShip:) forControlEvents:UIControlEventTouchDown];
        
        houseCheckBtn = [[UIButton alloc] init] ;
        [houseCheckBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        houseCheckBtn.backgroundColor = [UIColor clearColor];
        houseCheckBtn.layer.masksToBounds = YES;
        houseCheckBtn.layer.cornerRadius = 5.0f;
        [houseCheckBtn addTarget:self action:@selector(changeCustomerHouseType:) forControlEvents:UIControlEventTouchUpInside];
        
        flatCheckBtn = [[UIButton alloc] init] ;
        [flatCheckBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        flatCheckBtn.backgroundColor = [UIColor clearColor];
        flatCheckBtn.layer.masksToBounds = YES;
        flatCheckBtn.layer.cornerRadius = 5.0f;
        [flatCheckBtn addTarget:self action:@selector(changeCustomerHouseType:) forControlEvents:UIControlEventTouchUpInside];
        
        memberShipLabel = [[UILabel alloc] init];
        memberShipLabel.textColor = [UIColor whiteColor];
        memberShipLabel.font = [UIFont boldSystemFontOfSize:16.0];
        memberShipLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:16.0];
        memberShipLabel.text  = NSLocalizedString(@"membership", nil);
        
//        memberShipText = [[UITextField alloc] init];
        memberShipText.borderStyle = UITextBorderStyleRoundedRect;
        memberShipText.textColor = [UIColor blackColor];
        memberShipText.font = [UIFont systemFontOfSize:16];
        memberShipText.backgroundColor = [UIColor whiteColor];
        memberShipText.text = @"";
        memberShipText.delegate = self;
        memberShipText.placeholder = NSLocalizedString(@"membership", nil);
        
        UIImage * tempMemberShipOptionsImg = [UIImage imageNamed:@"down_gray_arrow.png"];
        
        showmemberShipOptionsBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showmemberShipOptionsBtn setBackgroundImage:tempMemberShipOptionsImg forState:UIControlStateNormal];
        [showmemberShipOptionsBtn addTarget:self action:@selector(showListMemberShipOptions:) forControlEvents:UIControlEventTouchDown];
        
        //upto here on 23/08/2018 & 03/08/2018....
        
        custName = [[UILabel alloc] init];
        custName.textColor = [UIColor whiteColor];
        custName.font = [UIFont boldSystemFontOfSize:18.0];
        custName.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        custName.text  = NSLocalizedString(@"customer_name", nil);
        
        firstNameTxt = [[UITextField alloc] init];
        firstNameTxt.borderStyle = UITextBorderStyleRoundedRect;
        firstNameTxt.textColor = [UIColor blackColor];
        firstNameTxt.font = [UIFont systemFontOfSize:18.0];
        firstNameTxt.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        firstNameTxt.text = @"";
        firstNameTxt.delegate = self;
        firstNameTxt.placeholder = NSLocalizedString(@"first_name", nil);
        
        lastNameTxt1 = [[UITextField alloc] init];
        lastNameTxt1.borderStyle = UITextBorderStyleRoundedRect;
        lastNameTxt1.textColor = [UIColor blackColor];
        lastNameTxt1.font = [UIFont systemFontOfSize:18.0];
        lastNameTxt1.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        lastNameTxt1.text = @"";
        lastNameTxt1.delegate = self;
        lastNameTxt1.placeholder = NSLocalizedString(@"last_name", nil);
        
        gtin = [[UILabel alloc] init];
        gtin.textColor = [UIColor whiteColor];
        gtin.font = [UIFont boldSystemFontOfSize:18.0];
        gtin.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        gtin.text  = NSLocalizedString(@"gtin", nil);
        
        gtinTxt = [[UITextField alloc] init];
        gtinTxt.borderStyle = UITextBorderStyleRoundedRect;
        gtinTxt.textColor = [UIColor blackColor];
        gtinTxt.font = [UIFont systemFontOfSize:18.0];
        gtinTxt.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        gtinTxt.text = @"";
        gtinTxt.delegate = self;
        gtinTxt.placeholder = NSLocalizedString(@"gtin", nil);
        
        emailAddress = [[UILabel alloc] init];
        emailAddress.textColor = [UIColor whiteColor];
        emailAddress.font = [UIFont boldSystemFontOfSize:18.0];
        emailAddress.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        emailAddress.text = NSLocalizedString(@"email_address", nil);
        
        emailAddressTxt = [[UITextField alloc] init];
        emailAddressTxt.borderStyle = UITextBorderStyleRoundedRect;
        emailAddressTxt.textColor = [UIColor blackColor];
        emailAddressTxt.font = [UIFont systemFontOfSize:18.0];
        emailAddressTxt.backgroundColor = [UIColor whiteColor];
        emailAddressTxt.text = @"";
        emailAddressTxt.delegate = self;
        emailAddressTxt.placeholder = NSLocalizedString(@"email_address", nil);
        
        address = [[UILabel alloc] init];
        address.textColor = [UIColor whiteColor];
        address.font = [UIFont boldSystemFontOfSize:18.0];
        address.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        address.text  = NSLocalizedString(@"address", nil);
        
        addressTxt1 = [[UITextField alloc] init];
        addressTxt1.borderStyle = UITextBorderStyleRoundedRect;
        addressTxt1.textColor = [UIColor blackColor];
        addressTxt1.font = [UIFont systemFontOfSize:18.0];
        addressTxt1.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        addressTxt1.text = @"";
        addressTxt1.delegate = self;
        addressTxt1.placeholder = NSLocalizedString(@"door_no", nil);
        
        
        addressTxt2 = [[UITextField alloc] init];
        addressTxt2.borderStyle = UITextBorderStyleRoundedRect;
        addressTxt2.textColor = [UIColor blackColor];
        addressTxt2.font = [UIFont systemFontOfSize:18.0];
        addressTxt2.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        addressTxt2.text = @"";
        addressTxt2.delegate = self;
        addressTxt2.placeholder = NSLocalizedString(@"street", nil);
        
        
        addressTxt3 = [[UITextField alloc] init];
        addressTxt3.borderStyle = UITextBorderStyleRoundedRect;
        addressTxt3.textColor = [UIColor blackColor];
        addressTxt3.font = [UIFont systemFontOfSize:18.0];
        addressTxt3.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        addressTxt3.text = @"";
        addressTxt3.delegate = self;
        addressTxt3.placeholder = NSLocalizedString(@"location", nil);
        
        addressTxt4 = [[UITextField alloc] init];
        addressTxt4.borderStyle = UITextBorderStyleRoundedRect;
        addressTxt4.textColor = [UIColor blackColor];
        addressTxt4.font = [UIFont systemFontOfSize:18.0];
        addressTxt4.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        addressTxt4.text = @"";
        addressTxt4.delegate = self;
        addressTxt4.placeholder = NSLocalizedString(@"city", nil);
        
        addressTxt5 = [[UITextField alloc] init];
        addressTxt5.borderStyle = UITextBorderStyleRoundedRect;
        addressTxt5.textColor = [UIColor blackColor];
        addressTxt5.font = [UIFont systemFontOfSize:18.0];
        addressTxt5.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        addressTxt5.text = @"";
        addressTxt5.delegate = self;
        addressTxt5.placeholder = NSLocalizedString(@"landmark", nil);
        
        addressTxt6 = [[UITextField alloc] init];
        addressTxt6.borderStyle = UITextBorderStyleRoundedRect;
        addressTxt6.textColor = [UIColor blackColor];
        addressTxt6.font = [UIFont systemFontOfSize:18.0];
        addressTxt6.backgroundColor = [UIColor whiteColor];
        //payTxt1.clearButtonMode = UITextFieldViewModeWhileEditing;
        addressTxt6.text = @"";
        addressTxt6.delegate = self;
        addressTxt6.placeholder =  NSLocalizedString(@"pin_code", nil);
        
        UILabel * previousLbl = [[UILabel alloc] init];
        previousLbl.textColor = [UIColor whiteColor];
        previousLbl.font = [UIFont boldSystemFontOfSize:18.0];
        previousLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        previousLbl.text  = NSLocalizedString(@"previous_purchases", nil);
        
        UITextView * previousView = [[UITextView alloc] init];
        previousView.textColor = [UIColor blackColor];
        previousView.font = [UIFont systemFontOfSize:18.0];
        previousView.backgroundColor = [UIColor whiteColor];
        previousView.layer.cornerRadius = 10.0f;
        previousView.delegate = self;
        
        submitBtn = [[UIButton alloc] init] ;
        submitBtn.tag = 44;
        [submitBtn addTarget:self action:@selector(submitButtonFunctionality:) forControlEvents:UIControlEventTouchUpInside];
        [submitBtn setTitle:NSLocalizedString(@"submit",nil) forState:UIControlStateNormal];
        submitBtn.backgroundColor = [UIColor grayColor];
        
        cancelBtn1 = [[UIButton alloc] init] ;
        cancelBtn1.tag = 66;
        [cancelBtn1 addTarget:self action:@selector(cancelButton:) forControlEvents:UIControlEventTouchUpInside];
        [cancelBtn1 setTitle:NSLocalizedString(@"cancel", nil) forState:UIControlStateNormal];
        cancelBtn1.backgroundColor = [UIColor grayColor];
        
        @try {
            
            customerPurchasedSkuIdLbl.text = NSLocalizedString(@"sku_id",nil);
            customerPurchasedSkuNameLbl.text = NSLocalizedString(@"sku_name",nil);
            customerPurchasedSkuQtyLbl.text = NSLocalizedString(@"qty",nil);
            customerPurchasedSkuValueLbl.text = NSLocalizedString(@"price",nil);
            
            customerPurchasedSkuIdLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
            customerPurchasedSkuNameLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
            customerPurchasedSkuQtyLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
            customerPurchasedSkuValueLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
        } @catch (NSException *exception) {
            
        }
        
        [customerView1 addSubview:custDetailLbl];
        [customerView1 addSubview:closeBtn];
        
        [verticalScrollView addSubview:custName];
        [verticalScrollView addSubview:firstNameTxt];
        [verticalScrollView addSubview:lastNameTxt1];
        [verticalScrollView addSubview:gtin];
        [verticalScrollView addSubview:gtinTxt];
        [verticalScrollView addSubview:submitBtn];
        [verticalScrollView addSubview:emailAddress];
        [verticalScrollView addSubview:emailAddressTxt];
        [verticalScrollView addSubview:cancelBtn1];
        [verticalScrollView addSubview:address];
        [verticalScrollView addSubview:addressTxt1];
        [verticalScrollView addSubview:addressTxt2];
        [verticalScrollView addSubview:addressTxt3];
        [verticalScrollView addSubview:addressTxt4];
        [verticalScrollView addSubview:addressTxt5];
        [verticalScrollView addSubview:addressTxt6];
        [verticalScrollView addSubview:previousLbl];
        [verticalScrollView addSubview:previousView];
        
        //added by Srinivausulu on 21/05/2018....
        
        [verticalScrollView addSubview:customerPurchasesLbl];
        [verticalScrollView addSubview:showCustomerPurchasesBtn];
        
        //upto here on 21/05/2018....
        
        //added By Bhargav.v & Srinivasulu on 23/08/2018 & 03/08/2018....
        
        [verticalScrollView addSubview:mobileNumberLabel];
        [verticalScrollView addSubview:memberShipLabel];
        [verticalScrollView addSubview:houseLabel];
        [verticalScrollView addSubview:flatLabel];
        [verticalScrollView addSubview:memberShipCheckBoxBtn];
        [verticalScrollView addSubview:houseCheckBtn];
        [verticalScrollView addSubview:flatCheckBtn];
        [verticalScrollView addSubview:mobileNumberText];
        [verticalScrollView addSubview:memberShipText];
        [verticalScrollView addSubview:showmemberShipOptionsBtn];
        memberShipText.userInteractionEnabled = NO;
        //upto here on 23/08/2018 & 03/08/2018....
        
        [customerView1 addSubview:verticalScrollView];
        
        //added by Srinivasulu on 11/08/2017....
        
        mobileNumberText.text = custmerPhNum.text;
        
        houseCheckBtn.tag = 2;
        flatCheckBtn.tag = 4;
        memberShipCheckBoxBtn.tag = 2;
        memberShipCheckBoxBtn.userInteractionEnabled = NO;
        showmemberShipOptionsBtn.userInteractionEnabled = NO;
        
        if((customerInfoDic == nil)  || (!customerInfoDic.allKeys.count)){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"New_customer_message", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            if(isMemberShipItemAdded){
                
                memberShipCheckBoxBtn.tag = 2;
                [memberShipCheckBoxBtn setImage:[UIImage imageNamed:@"Credit_Deselect.png"] forState:UIControlStateNormal];
                isFirstTimeMemberShip = true;
                memberShipText.text = @"";
                memberShipCheckBoxBtn.userInteractionEnabled = YES;
                showmemberShipOptionsBtn.userInteractionEnabled = YES;
            }
            
        }
        else{
            
            firstNameTxt.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:kFirstName]defaultReturn:@""];
            
            lastNameTxt1.text =  [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:CUSTOMER_LAST_NAME] defaultReturn:@""];
            
            gtinTxt.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:CUSTOMER_GSTIN] defaultReturn:@""];
            
            emailAddressTxt.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:CUSTOMER_MAIL]defaultReturn:@""];
            
            addressTxt1.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:HOUSE_NO]defaultReturn:@""];
            
            addressTxt2.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:CUSTOMER_STREET] defaultReturn:@""];
            
            addressTxt3.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:CUSTOMER_LOCALITY] defaultReturn:@""];
            
            addressTxt4.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:CUSTOMER_CITY] defaultReturn:@""];
            
            addressTxt5.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:LAND_MARK] defaultReturn:@""];
            
            addressTxt6.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:CUSTOMER_PIN_NO] defaultReturn:@""];
            
            //added by Srinivasulu on 12/08/2017....
            
            customerGstinStr = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:CUSTOMER_GSTIN] defaultReturn:@""];
            
            customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
            
//            if(isMemberShipItemAdded){
//
//                if(customerMemberShipStatus){
//                    isToCreateNewMemberShip = true;
//
//                    memberShipCheckBoxBtn.tag = 4;
//                    [memberShipCheckBoxBtn setImage:[UIImage imageNamed:@"Credit_Select.png"] forState:UIControlStateNormal];
//                    memberShipText.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:ITEM_CATEGORY] defaultReturn:@""];
//                }
//                else{
//                    memberShipCheckBoxBtn.tag = 2;
//                    [memberShipCheckBoxBtn setImage:[UIImage imageNamed:@"Credit_Deselect.png"] forState:UIControlStateNormal];
//                    isFirstTimeMemberShip = true;
//                }
//                memberShipCheckBoxBtn.userInteractionEnabled = YES;
//                showmemberShipOptionsBtn.userInteractionEnabled = YES;
//            }
//            else{
//
//                memberShipCheckBoxBtn.tag = 2;
//                memberShipCheckBoxBtn.userInteractionEnabled = NO;
//                showmemberShipOptionsBtn.userInteractionEnabled = NO;
//            }
            
            // Changed by roja on 29/07/2019.....
            if(customerMemberShipStatus){
                
                isToCreateNewMemberShip = true;
                memberShipCheckBoxBtn.tag = 4;
                [memberShipCheckBoxBtn setImage:[UIImage imageNamed:@"Credit_Select.png"] forState:UIControlStateNormal];
                memberShipText.text = [self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:ITEM_CATEGORY] defaultReturn:@""];
            }
            else if(isMemberShipItemAdded){
                
                memberShipCheckBoxBtn.tag = 2;
                [memberShipCheckBoxBtn setImage:[UIImage imageNamed:@"Credit_Deselect.png"] forState:UIControlStateNormal];
                isFirstTimeMemberShip = true;
                
                memberShipCheckBoxBtn.userInteractionEnabled = YES;
                showmemberShipOptionsBtn.userInteractionEnabled = YES;
            }
            else{
                
                memberShipCheckBoxBtn.tag = 2;
                memberShipCheckBoxBtn.userInteractionEnabled = NO;
                showmemberShipOptionsBtn.userInteractionEnabled = NO;
            }
            //Upto Here Changed by roja on 29/07/2019.....

            
            //upto here on 12/08/2017....
        }
        
        //added by Srinivasulu on 04/12/2017....
        
        if(!(addressTxt1.text).length  && !(addressTxt2.text).length &&  !(addressTxt3.text).length && !(addressTxt4.text).length){
            NSUserDefaults * custDefaults = [[NSUserDefaults alloc] init];
            
            addressTxt2.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_AREA] defaultReturn:@""];
            addressTxt3.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_LANDMARK] defaultReturn:@""];
            addressTxt4.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_CITY] defaultReturn:@""];
            addressTxt5.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_LANDMARK] defaultReturn:@""];
            addressTxt6.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_PIN] defaultReturn:@""];
        }
        
        
        //upto here on 04/12/2017....
        
        
        //upto here on 11/08/2017....
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            //            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            //
            //
            //            }
            //            else{
            //
            //            }
            custDetailLbl.frame = CGRectMake( customerView1.frame.origin.x,customerView1.frame.origin.y - verticalScrollView.frame.origin.y,customerView1.frame.size.width, 60);
            
            verticalScrollView.frame = CGRectMake( customerView1.frame.origin.x, custDetailLbl.frame.origin.y + custDetailLbl.frame.size.height,  customerView1.frame.size.width, customerView1.frame.size.height - (custDetailLbl.frame.origin.y + custDetailLbl.frame.size.height));
            
            closeBtn.frame = CGRectMake( 380, 15, 30, 30);
            
            
            //added By Bhargav.v & Srinivasulu on 23/08/2018 & 03/08/2018....
            
            mobileNumberLabel.frame =  CGRectMake( 10, 10, 150, 30);
            mobileNumberText.frame = CGRectMake( mobileNumberLabel.frame.origin.x + mobileNumberLabel.frame.size.width + 10, mobileNumberLabel.frame.origin.y, mobileNumberLabel.frame.size.width + 40, 30);
            
            memberShipLabel.frame = CGRectMake( mobileNumberLabel.frame.origin.x, mobileNumberLabel.frame.origin.y + mobileNumberLabel.frame.size.height + 10, mobileNumberLabel.frame.size.width - 30, 30);
            memberShipCheckBoxBtn.frame = CGRectMake( memberShipLabel.frame.origin.x + memberShipLabel.frame.size.width, memberShipLabel.frame.origin.y, 30, 30);
            memberShipText.frame = CGRectMake( mobileNumberText.frame.origin.x, memberShipLabel.frame.origin.y, mobileNumberText.frame.size.width + 40, mobileNumberText.frame.size.height);
            showmemberShipOptionsBtn.frame = CGRectMake( memberShipText.frame.origin.x + memberShipText.frame.size.width - 30, memberShipText.frame.origin.y + 7, 24, 18);
            //upto here on 23/08/2018 & 03/08/2018....
            
            custName.frame =  CGRectMake( 10, memberShipLabel.frame.origin.y + memberShipLabel.frame.size.height + 10, 150, 30);
            firstNameTxt.frame = CGRectMake( 10, custName.frame.origin.y + custName.frame.size.height + 5, 150, 30);
            lastNameTxt1.frame = CGRectMake( firstNameTxt.frame.origin.x + firstNameTxt.frame.size.width + 10, firstNameTxt.frame.origin.y, firstNameTxt.frame.size.width, 30);
            
            gtin.frame = CGRectMake( 10, firstNameTxt.frame.origin.y + firstNameTxt.frame.size.height + 10, 150, 30);
            gtinTxt.frame = CGRectMake( 10,gtin.frame.origin.y + gtin.frame.size.height + 10,250,30);
            
            emailAddress.frame = CGRectMake( 10, gtinTxt.frame.origin.y + gtinTxt.frame.size.height + 10, 150, 30);
            emailAddressTxt.frame = CGRectMake( 10, emailAddress.frame.origin.y + emailAddress.frame.size.height + 10, 250, 30);
            
            address.frame = CGRectMake( 10, emailAddressTxt.frame.origin.y + emailAddressTxt.frame.size.height+10, 150, 30);
            
            //added By Bhargav.v & Srinivasulu on 23/08/2018 & 03/08/2018....
            
            houseCheckBtn.frame =  CGRectMake( firstNameTxt.frame.origin.x, address.frame.origin.y + address.frame.size.height + 10, 30, 30);
            houseLabel.frame = CGRectMake( houseCheckBtn.frame.origin.x + houseCheckBtn.frame.size.width, houseCheckBtn.frame.origin.y, 120, 30);
            
            flatCheckBtn.frame =  CGRectMake( houseLabel.frame.origin.x + houseLabel.frame.size.width + 10, houseCheckBtn.frame.origin.y, 30, 30);
            flatLabel.frame = CGRectMake( flatCheckBtn.frame.origin.x + flatCheckBtn.frame.size.width, houseCheckBtn.frame.origin.y, 120, 30);
            
            //            [verticalScrollView addSubview:mobileNumberLabel];
            //            [verticalScrollView addSubview:mobileNumberText];
            //
            //            [verticalScrollView addSubview:memberShipLabel];
            //            [verticalScrollView addSubview:houseLabel];
            //            [verticalScrollView addSubview:flatLabel];
            //            [verticalScrollView addSubview:memberShipCheckBoxBtn];
            //            [verticalScrollView addSubview:houseCheckBtn];
            //            [verticalScrollView addSubview:flatCheckBtn];
            //            [verticalScrollView addSubview:showmemberShipOptionsBtn];
            //            [verticalScrollView addSubview:memberShipText];
            
            //upto here on 23/08/2018 & 03/08/2018....
            
            addressTxt1.frame = CGRectMake( 10, flatLabel.frame.origin.y + flatLabel.frame.size.height + 10, 150, 30);
            addressTxt2.frame = CGRectMake( addressTxt1.frame.origin.x + addressTxt1.frame.size.width + 10, addressTxt1.frame.origin.y, addressTxt1.frame.size.width+90, 30);
            addressTxt3.frame = CGRectMake( 10, addressTxt1.frame.origin.y + addressTxt1.frame.size.height + 10, 200, 30);
            
            addressTxt4.frame = CGRectMake( addressTxt3.frame.origin.x + addressTxt3.frame.size.width + 10, addressTxt3.frame.origin.y, addressTxt3.frame.size.width - 10, 30);
            addressTxt5.frame = CGRectMake( 10, addressTxt3.frame.origin.y + addressTxt3.frame.size.height + 10, 200, 30);
            
            addressTxt6.frame = CGRectMake( addressTxt5.frame.origin.x + addressTxt5.frame.size.width + 10, addressTxt5.frame.origin.y, addressTxt5.frame.size.width - 10, 30);
            
            submitBtn.frame = CGRectMake( gtinTxt.frame.origin.x + gtinTxt.frame.size.width + 10,gtinTxt.frame.origin.y ,100,30);
            
            cancelBtn1.frame = CGRectMake( emailAddressTxt.frame.origin.x + emailAddressTxt.frame.size.width + 10,emailAddressTxt.frame.origin.y ,100,30);
            
            
            //changed by Srinivasulu on 12/08/2017....
            
            //            previousLbl.frame = CGRectMake( 10, addressTxt5.frame.origin.y + addressTxt5.frame.size.height+10, 200, 30);
            //
            //            previousView.frame = CGRectMake( 10, previousLbl.frame.origin.y + previousLbl.frame.size.height + 10,300, 100);
            
            //added by Srinivausulu on 21/05/2018....
            
            customerPurchasesLbl.frame = CGRectMake( addressTxt1.frame.origin.x, addressTxt5.frame.origin.y + addressTxt5.frame.size.height + 10, addressTxt3.frame.size.width, 30);
            
            showCustomerPurchasesBtn.frame = CGRectMake( customerPurchasesLbl.frame.origin.x + customerPurchasesLbl.frame.size.width, customerPurchasesLbl.frame.origin.y + 2, customerPurchasesLbl.frame.size.height/2, customerPurchasesLbl.frame.size.height);
            
            // commented by roja on 29/07/2019..
            verticalScrollView.contentSize = CGSizeMake( verticalScrollView.frame.size.width,  customerPurchasesLbl.frame.origin.y + 80);
            
            //upto here on 21/05/2018....
            
            
            //added by Srinivausulu on 01/06/2018....
            
            customerPurchasedSkuIdLbl.frame = CGRectMake( addressTxt1.frame.origin.x, customerPurchasesLbl.frame.origin.y + customerPurchasesLbl.frame.size.height + 10, 110, 30);
            customerPurchasedSkuNameLbl.frame = CGRectMake( customerPurchasedSkuIdLbl.frame.origin.x + customerPurchasedSkuIdLbl.frame.size.width + 2, customerPurchasedSkuIdLbl.frame.origin.y,110, customerPurchasedSkuIdLbl.frame.size.height);
            customerPurchasedSkuQtyLbl.frame = CGRectMake( customerPurchasedSkuNameLbl.frame.origin.x + customerPurchasedSkuNameLbl.frame.size.width + 2, customerPurchasedSkuIdLbl.frame.origin.y, 50, customerPurchasedSkuIdLbl.frame.size.height);
            customerPurchasedSkuValueLbl.frame = CGRectMake( customerPurchasedSkuQtyLbl.frame.origin.x + customerPurchasedSkuQtyLbl.frame.size.width + 2, customerPurchasedSkuIdLbl.frame.origin.y, (addressTxt6.frame.origin.x + addressTxt6.frame.size.width) - (customerPurchasedSkuQtyLbl.frame.origin.x + customerPurchasedSkuQtyLbl.frame.size.width + 2), customerPurchasedSkuIdLbl.frame.size.height);
            
            
            
            [verticalScrollView addSubview:customerPurchasedSkuIdLbl];
            [verticalScrollView addSubview:customerPurchasedSkuNameLbl];
            [verticalScrollView addSubview:customerPurchasedSkuQtyLbl];
            [verticalScrollView addSubview:customerPurchasedSkuValueLbl];
            
            [verticalScrollView addSubview:listOfCustomerPurchasesTbl];
            
            //            listOfCustomerPurchasesTbl.frame = CGRectMake( customerPurchasedSkuIdLbl.frame.origin.x, customerPurchasedSkuIdLbl.frame.origin.y + customerPurchasedSkuIdLbl.frame.size.height + 2, (customerPurchasedSkuValueLbl.frame.origin.x + customerPurchasedSkuValueLbl.frame.size.width) - customerPurchasedSkuIdLbl.frame.origin.x, 40 * 5);
            //
//            verticalScrollView.contentSize = CGSizeMake( verticalScrollView.frame.size.width,  listOfCustomerPurchasesTbl.frame.origin.y + listOfCustomerPurchasesTbl.frame.size.height + 10);
            
            //upto here on 01/06/2018....
            
            //            verticalScrollView.contentSize = CGSizeMake( verticalScrollView.frame.size.width,  addressTxt5.frame.origin.y + addressTxt5.frame.size.height + 10);
        }
        else{
            
        }
        customerInfoPopUp.view = customerView1;
        
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            customerInfoPopUp.preferredContentSize =  CGSizeMake( customerView1.frame.size.width, customerView1.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            
            [popover presentPopoverFromRect:customerInfoEnable.frame inView:self.view permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            
            customerInfoPopOver= popover;
        }
        else {
            
            //            customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
            
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            customerInfoPopOver = popover;
        }
    }
    @catch(NSException *exception){
        NSLog(@"%@-----exception in displaying the PopUp",exception);
    }
    @finally{
        
        // added by roja on 29/07/2019...
//        if (isToCallApplyCampaigns && !isNewReturnBill) {
//
//            [HUD setHidden:NO];
//            //                    [self callOffersForScanning:@"" qty:@"1" total:[NSString stringWithFormat:@"%.2f",(totalTxt.text).floatValue] itemPrice:@"100.0"];
//
//            [self callOffersForScanning:@"" qty:@"0" total:@"0" itemPrice:@"0"];
//        }
        
        
        if (cartItem.count) {
            
            //changed by Srinivasulu on 13/02/2018....
            
            if (isToCallApplyCampaigns && !isNewReturnBill) {
                [HUD setHidden:NO];
                
                //upto here on 13/02/2018....
                [self callOffersForScanning:@"" qty:@"1" total:[NSString stringWithFormat:@"%.2f",(totalTxt.text).floatValue] itemPrice:@"100.0"];
            }
        }
      
        // upto here added by roja on 29/07/2019...
    }
}

/**
 * @description  here we are changing type....
 * @date         03/08/2018....
 * @method       changeCustomerHouseType:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)changeCustomerHouseType:(UIButton *)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    if(sender.tag == 2){
        [houseCheckBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        [flatCheckBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
    }
    else
    {
        [houseCheckBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        [flatCheckBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
    }
}

/**
 * @description  here we are froming and dispalying the display membershipments types....
 * @date         03/08/2018....
 * @method       allowMemberShip:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 *
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)allowMemberShip:(UIButton *)sender{
    
    @try {
        
        {
            if(sender.tag == 2){
                //                if(isMemberShipItemAdded){
                //                    isToCreateNewMemberShip = true;
                //                    customerMemberShipStatus = true;
                //                }
                
                [memberShipCheckBoxBtn setImage:[UIImage imageNamed:@"Credit_Select.png"] forState:UIControlStateNormal];
                sender.tag = 4;
            }
            else{
                [memberShipCheckBoxBtn setImage:[UIImage imageNamed:@"Credit_Deselect.png"] forState:UIControlStateNormal];
                sender.tag = 2;
            }
        }
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are froming and dispalying the display membershipments types....
 * @date         03/08/2018....
 * @method       showListMemberShipOptions:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 *
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showListMemberShipOptions:(UIButton *)sender{
    
    @try {
        
        
        if(memberShipTypeArr == nil ||  memberShipTypeTbl == nil){
            
            memberShipTypeArr = [NSMutableArray arrayWithObjects:NSLocalizedString(@"membership_silver", nil),NSLocalizedString(@"membership_gold", nil),NSLocalizedString(@"membership_platinum", nil), nil];
            
            //editPriceReasonTbl table creation....
            memberShipTypeTbl = [[UITableView alloc] init];
            memberShipTypeTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            memberShipTypeTbl.dataSource = self;
            memberShipTypeTbl.delegate = self;
            (memberShipTypeTbl.layer).borderWidth = 1.0f;
            memberShipTypeTbl.layer.cornerRadius = 3;
            memberShipTypeTbl.layer.borderColor = [UIColor grayColor].CGColor;
        }
        
        
        float tableHeight = memberShipTypeArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = memberShipTypeArr.count * 33;
        
        if(memberShipTypeArr.count > 5)
            tableHeight = (tableHeight/memberShipTypeArr.count) * 5;
        
        [self showPopUpForTables:memberShipTypeTbl  popUpWidth:memberShipText.frame.size.width+30  popUpHeight:tableHeight presentPopUpAt:memberShipText  showViewIn:verticalScrollView permittedArrowDirections:UIPopoverArrowDirectionUp];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  it is one of submitButtonFunctionality Method which will be executed after execution of SubmitBtn.......
 * @date         31/07/2017
 * @method       submitButtonFunctionality
 * @author       Saikrishna Kumbhoji
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 11/08/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message.... changed handling code.... not completed....
 *
 */

-(void)submitButtonFunctionality:(UIButton *)sender{
    
    @try {
        
        BOOL callServices = true;
        
        submitBtn.tag = 44;
        
        if((custmerPhNum.text).length < 10){
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_valide_phone_no", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            return;
        }
        else if(firstNameTxt.text.length == 0){
            
            UIAlertView *validation_alert = [[UIAlertView alloc] initWithTitle:@"Alert" message:@"Please enter the FirstName" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [validation_alert show];
            
            callServices = false;
        }
        else if ((emailAddressTxt.text).length!=0 && ([self validateEmail:emailAddressTxt.text] == FALSE)) {
            //
//            if([self validateEmail:emailAddressTxt.text] == FALSE){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"INVALID Email - ID" message:@"Enter a valid Email ID" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
                callServices = false;
           // }
        }
       
        else if((memberShipCheckBoxBtn.tag == 4 && ![memberShipText.text length]) || (memberShipCheckBoxBtn.tag != 4 &&  [memberShipText.text length]) ){
            
            UIAlertView *validation_alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"please_select_membership_details", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
            [validation_alert show];
            
            callServices = false;
        }
        
        else if(memberShipCheckBoxBtn.tag == 4 && [memberShipText.text length]){//customerMemberShipStatus
            isToCreateNewMemberShip = true;
            customerMemberShipStatus = true;
        }
        
        if(callServices)
            [self addCustomerDetails:sender];
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  it is one of cancelButton Method which will be executed after execution of  Cancel Button.......
 * @date         31/07/2017
 * @method       cancelButton
 * @author       Saikrishna Kumbhoji
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 11/08/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message.... changed handling code.... not completed....
 *
 */


-(void)cancelButton:(UIButton *)sender{
    
    @try {
        
        //customerInfoEnable.tag = 55;
        // if(customerInfoEnable.tag == 55){
        emailAddressTxt.text = @"";
        gtinTxt.text = @"";
        lastNameTxt1.text = @"";
        firstNameTxt.text = @"";
        addressTxt1.text = @"";
        addressTxt2.text = @"";
        addressTxt3.text = @"";
        addressTxt4.text = @"";
        addressTxt5.text = @"";
        addressTxt6.text = @"";
        // }
        // else{
        
        
        // }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  here we are closing the customerInfoPopOver....
 * @date
 * @method       closeCustomerView:
 * @author
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 11/08/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message.... changed handling code.... not completed....
 *
 */

-(void)closeCustomerView:(UIButton *)sender{
    
    @try {
        
        [customerInfoPopOver dismissPopoverAnimated:YES];
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

#pragma -mark method used to update and create the customer.....

/**
 * @description  here we are accessing the creating/updating(i.e., if existing) in offline as well as the online....
 * @date
 * @method       addCustomerDetails
 * @author
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 11/08/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message....  not completed....
 *
 *
 * @Commented By  K.Roja on 29/07/2019...
 * @Reason        Below method is following SOAP service, so changed addCustomerDetails method to RESTFUL, changed addCustomerDetails method is avaible in this class only....
 */

//-(void) addCustomerDetails:(UIButton *)sender{
//
//    @try {
//
//        // added by roja on 27/09/2019 //Here senderBtn is required in updatCustomerDetailsSuccess or errorResponse...(to know wheather button is 'nil' or a UIButton with value)
//        senderBtn = [[UIButton alloc] init];
//        senderBtn = sender
//
//        BOOL status = FALSE;
//
//        CheckWifi * wifi = [[CheckWifi alloc]init];
//
//        status = [wifi checkWifi];
//
//        if (status) {
//
//            [HUD setHidden:YES];
//
//            //added by Srinivasulu on 24/04/2017....
//
//            [HUD setHidden:NO];
//            HUD.labelText = @"Please Wait..";
//
//            //upto here on 24/04/2017....
//
//
//            CustomerServiceSoapBinding *custBindng =  [CustomerServiceSvc CustomerServiceSoapBinding] ;
//            CustomerServiceSvc_updateCustomer *aParameters = [[CustomerServiceSvc_updateCustomer alloc] init];
//
//
//            //changed by Srinivasulu on 03/05/2017....
//
//            //        NSArray *loyaltyKeys = [NSArray arrayWithObjects:@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city",@"requestHeader", nil];
//            //
//            //        NSArray *loyaltyObjects = [NSArray arrayWithObjects:phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text,[RequestHeader getRequestHeader], nil];
//            //
//            //
//            //        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//
//            NSMutableDictionary * dictionary = [NSMutableDictionary new];
//            dictionary[REQUEST_HEADER] = [RequestHeader getRequestHeader];
//
//            if(sender == nil){
//                //added by Srinivasulu on 21/11/2017....
//
//                //                if ((eraseButton.tag != 1) || ((segment_index !=3) && (eraseButton.tag != 1))  ) {
//                //
//                //                    if(payBtn != nil)
//                //                        payBtn.enabled = false;
//                //                }
//
//                //upto here on 21/11/2017....
//
//                dictionary[CUSTOMER_PHONE] = phnotext.text;
//                dictionary[@"pin_no"] = pintext.text;
//                dictionary[@"status"] = @"false";
//                dictionary[@"email"] = emailtext.text;
//                dictionary[@"pin_no"] = pintext.text;
//                dictionary[@"name"] = nametext.text;
//
//                dictionary[@"street"] = streettext.text;
//                dictionary[@"locality"] = locltytext.text;
//                dictionary[@"loyaltyCustomer"] = @"";
//                dictionary[@"phoneIds"] = @"";
//                dictionary[@"city"] = citytext.text;
//
//                if(doorNoTxt != nil)
//                    dictionary[@"houseNo"] = doorNoTxt.text;
//                if(landMarkTxt != nil)
//                    dictionary[@"landMark"] = landMarkTxt.text;
//                if(lastNameTxt != nil)
//                    dictionary[@"lastName"] = lastNameTxt.text;
//                if((customerGstinStr != nil) && (customerGstinStr.length))
//                    dictionary[CUSTOMER_GSTIN] = customerGstinStr;
//
//                //added by Srinivasulu on 03/09/2018....
//                if(finalBillDue.floatValue > 0){
//
//                    if(isFirstTimeMemberShip && isToCreateNewMemberShip){//customerMemberShipStatus
//                        customerMemberShipStatus = false;
//                    }
//                    isToCreateNewMemberShip = false;
//                }
//
//                dictionary[IS_MEMBERSHIP_CUSTOMER] = [NSNumber numberWithBool:customerMemberShipStatus];
//
//                if(memberShipText != nil)
//                    dictionary[ITEM_CATEGORY] = memberShipText.text;
//
//            }
//            else{
//
//                //changed by Srinivasulu on 08/09/2017 && 21/05/2018....
//                //[dictionary setObject:addressTxt6.text  forKey:CUSTOMER_PHONE]; -- changed phone_no to locality..
//
//                dictionary[CUSTOMER_PHONE] = custmerPhNum.text;
//
//                dictionary[CUSTOMER_MAIL] = emailAddressTxt.text;
//                dictionary[LAST_NAME] = lastNameTxt1.text;
//                dictionary[kFirstName] = firstNameTxt.text;
//
//
//                dictionary[HOUSE_NO] = addressTxt1.text;
//                dictionary[CUSTOMER_STREET] = addressTxt2.text;
//
//                dictionary[CUSTOMER_LOCALITY] = addressTxt3.text;
//                dictionary[CUSTOMER_CITY] = addressTxt4.text;
//
//                dictionary[LAND_MARK] = addressTxt5.text;
//                dictionary[CUSTOMER_PIN_NO] = addressTxt6.text;
//
//                dictionary[CUSTOMER_GSTIN] = gtinTxt.text;
//
//                //added by Srinivasulu on 03/09/2018....
//                dictionary[IS_MEMBERSHIP_CUSTOMER] = [NSNumber numberWithBool:customerMemberShipStatus];
//                dictionary[ITEM_CATEGORY] = memberShipText.text;
//            }
//
//            NSError * err_;
//            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary options:0 error:&err_];
//            //upto here on 03/05/2017....
//            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//            aParameters.customerDetails = loyaltyString;
//
//            CustomerServiceSoapBindingResponse *response = [custBindng updateCustomerUsingParameters:(CustomerServiceSvc_updateCustomer *)aParameters];
//
//            if (![response.error isKindOfClass:[NSError class]]) {
//
//                NSArray *responseBodyParts = response.bodyParts;
//                for (id bodyPart in responseBodyParts) {
//                    if ([bodyPart isKindOfClass:[CustomerServiceSvc_updateCustomerResponse class]]) {
//                        CustomerServiceSvc_updateCustomerResponse *body = (CustomerServiceSvc_updateCustomerResponse *)bodyPart;
//                        // printf("\nresponse=%d",[body.createCustomerReturn UTF8String]);
//                        NSError *e;
//
//                        NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
//                                                                              options: NSJSONReadingMutableContainers
//                                                                                error: &e];
//                        BOOL result = [JSON1[@"status"] boolValue];
//
//                        //added by Srinivasulu on 24/04/2017....
//
//                        [HUD setHidden:YES];
//
//                        //upto here on 24/04/2017....
//
//                        //added by Srinivasulu on 11/08/2017....
//
//                        if(sender != nil){
//
//
//                            [self  getCustomerDetailsForOffers];
//                            return;
//                        }
//
//                        //upto here on 11/08/2017....
//
//
//
//                        if (segment_index ==2) {
//                            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                                //changed by Roja on 07/09/2018....
//                                //                                [self populateCardDetailsView];
//                                [self populateCardPaymentDetailsView];
//                            }
//                            else {
//
//                                //added by Srinivasulu on 21/04/2017....
//                                //reason credit pay was added on this day....
//                                @try {
//                                    if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
//
//                                        if(payTxt1 != nil && payTxt2 != nil)
//                                            finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
//
//                                    }
//                                } @catch (NSException *exception) {
//
//                                }
//
//                                //upto here on 21/04/2017....
//
//                                [self continuePay1];
//                            }
//
//                        }
//                        else {
//
//                            //added by Srinivasulu on 21/04/2017....
//                            //reason credit pay was added on this day....
//                            @try {
//                                if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
//
//                                    if(payTxt1 != nil && payTxt2 != nil)
//                                        finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
//
//                                }
//                            } @catch (NSException *exception) {
//
//                            }
//
//                            //upto here on 21/04/2017....
//
//                            [self continuePay1];
//
//                        }
//
//                        //                    if (result) {
//                        //                        //Sending mail......
//                        //                        // [self continueFurther:skipbtn];
//                        //                    }
//                        //                    else {
//                        //                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[JSON1 valueForKey:[RESPONSE_HEADER valueForKey:RESPONSE_MESSAGE]] message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                        //                        [alert show];
//                        //
//                        //                    }
//                        //                    [HUD setHidden:YES];
//                    }
//                }
//            }
//            else {
//
//                //added by Srinivasulu on 24/04/2017....
//
//                [HUD setHidden:YES];
//
//                //upto here on 24/04/2017....
//
//                if(sender == nil){
//                    if (segment_index ==2) {
//                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                            //changed by Roja on 07/09/2018....
//                            //                                [self populateCardDetailsView];
//                            [self populateCardPaymentDetailsView];
//                        }
//                        else {
//
//                            //added by Srinivasulu on 21/04/2017....
//                            //reason credit pay was added on this day....
//                            @try {
//                                if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
//
//                                    if(payTxt1 != nil && payTxt2 != nil)
//                                        finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
//
//                                }
//                            } @catch (NSException *exception) {
//
//                            }
//
//                            //upto here on 21/04/2017....
//
//                            [self continuePay1];
//                        }
//
//                    }
//                    else {
//
//                        //added by Srinivasulu on 21/04/2017....
//                        //reason credit pay was added on this day....
//                        @try {
//                            if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
//
//                                if(payTxt1 != nil && payTxt2 != nil)
//                                    finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
//
//                            }
//                        } @catch (NSException *exception) {
//
//                        }
//
//                        //upto here on 21/04/2017....
//
//                        [self continuePay1];
//
//                    }
//                }
//                else{
//                    [segmentedControl setUserInteractionEnabled:TRUE];
//                    [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
//
//                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"%@",(response.error).localizedDescription] message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
//                    [alert show];
//                }
//            }
//
//        }
//        else {
//
//            //changed by Srinivasulu on 03/05/2017....
//
//
//            //        NSArray *loyaltyKeys = [NSArray arrayWithObjects:@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city", nil];
//            //
//            //        NSArray *loyaltyObjects = [NSArray arrayWithObjects:phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text, nil];
//            //        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//
//            NSMutableDictionary * dictionary = [NSMutableDictionary new];
//
//
//            if(sender == nil){
//
//                dictionary[@"phone"] = phnotext.text;
//                dictionary[@"pin_no"] = pintext.text;
//                dictionary[@"status"] = @"false";
//                dictionary[@"email"] = emailtext.text;
//                dictionary[@"pin_no"] = pintext.text;
//                dictionary[@"name"] = nametext.text;
//
//                dictionary[@"street"] = streettext.text;
//                dictionary[@"locality"] = locltytext.text;
//                dictionary[@"loyaltyCustomer"] = @"";
//                dictionary[@"phoneIds"] = @"";
//                dictionary[@"city"] = citytext.text;
//
//
//                if(doorNoTxt != nil)
//                    dictionary[@"houseNo"] = doorNoTxt.text;
//
//
//                if(landMarkTxt != nil)
//                    dictionary[@"landMark"] = landMarkTxt.text;
//
//                if(lastNameTxt != nil)
//                    dictionary[@"lastName"] = lastNameTxt.text;
//
//                if((customerGstinStr != nil) && (customerGstinStr.length))
//                    dictionary[CUSTOMER_GSTIN] = customerGstinStr;
//
//                //added by Srinivasulu on 03/09/2018....
//                if(finalBillDue.floatValue > 0){
//
//                    if(isFirstTimeMemberShip && isToCreateNewMemberShip){
//                        customerMemberShipStatus = false;
//                    }
//                    isToCreateNewMemberShip = false;
//                }
//
//                dictionary[IS_MEMBERSHIP_CUSTOMER] = [NSNumber numberWithBool:customerMemberShipStatus];
//                if(memberShipText != nil)
//                    dictionary[ITEM_CATEGORY] = memberShipText.text;
//            }
//            else{
//
//
//                dictionary[CUSTOMER_PHONE] = custmerPhNum.text;
//                dictionary[CUSTOMER_MAIL] = emailAddressTxt.text;
//                dictionary[LAST_NAME] = lastNameTxt1.text;
//                dictionary[kFirstName] = firstNameTxt.text;
//
//                dictionary[HOUSE_NO] = addressTxt1.text;
//                dictionary[CUSTOMER_STREET] = addressTxt2.text;
//
//                dictionary[CUSTOMER_LOCALITY] = addressTxt3.text;
//                dictionary[CUSTOMER_CITY] = addressTxt4.text;
//
//                dictionary[LAND_MARK] = addressTxt5.text;
//                dictionary[CUSTOMER_PIN_NO] = addressTxt6.text;
//
//
//                dictionary[CUSTOMER_GSTIN] = gtinTxt.text;
//
//                dictionary[@"status"] = @"false";
//                dictionary[@"loyaltyCustomer"] = @"";
//                dictionary[@"phoneIds"] = @"";
//
//                //added by Srinivasulu on 03/09/2018....
//                dictionary[IS_MEMBERSHIP_CUSTOMER] = [NSNumber numberWithBool:customerMemberShipStatus];
//                dictionary[ITEM_CATEGORY] = memberShipText.text;
//            }
//
//
//
//            //commented and changed by Srinivauslu on 06/09/2018..
//            offline = [[OfflineBillingServices alloc] init];
//            //            [offline saveCustomerDetails:dictionary];
//            [offline saveCustomerDetailsBasedOnPhone:dictionary];
//
//            //houseNo -- landMark -- lastName
//            //upto here on 03/04/2017....
//
//
//            //added by Srinivasulu on 11/08/2017....
//
//            if(sender != nil){
//
//                [self  getCustomerDetailsForOffers];
//                return;
//            }
//
//            //upto here on 11/08/2017....
//
//
//
//            if (segment_index ==2) {
//                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                    //changed by Roja on 07/09/2018....
//                    //                                [self populateCardDetailsView];
//                    [self populateCardPaymentDetailsView];                }
//                else {
//
//                    //added by Srinivasulu on 21/04/2017....
//                    //reason credit pay was added on this day....
//                    @try {
//
//                        if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
//
//                            if(payTxt1 != nil && payTxt2 != nil)
//                                finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
//
//                        }
//                    } @catch (NSException *exception) {
//
//                    }
//
//
//                    //upto here on 21/04/2017....
//
//
//                    [self continuePay1];
//                }
//
//            }
//            else {
//
//                //added by Srinivasulu on 21/04/2017....
//                //reason credit pay was added on this day....
//                @try {
//                    if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
//
//                        if(payTxt1 != nil && payTxt2 != nil)
//                            finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
//
//                    }
//                } @catch (NSException *exception) {
//
//                }
//
//
//                //upto here on 21/04/2017....
//
//
//                [self continuePay1];
//
//            }
//        }
//
//
//    } @catch (NSException *exception) {
//
//        //added by Srinivasulu on 21/11/2017....
//
//        //        if ((eraseButton.tag != 1) || ((segment_index !=3) && (eraseButton.tag != 1))  ) {
//        //
//        //            if(payBtn != nil)
//        //            payBtn.enabled = true;
//        //        }
//
//        //upto here on 21/11/2017....
//
//
//    } @finally {
//
//    }
//
//}

/**
 * @description  here we are accessing the creating/updating(i.e., if existing) in offline as well as the online....
 * @date
 * @method       addCustomerDetails
 * @author
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By
 * @reason       *
 *
 * @Commented By  K.Roja on 29/07/2019...
 * @Reason        Below method is following SOAP service, so changed addCustomerDetails method to RESTFUL, changed addCustomerDetails method is avaible in this class only....
 */

// changes done by roja on 29/07/2019...
// Reason converting SOAP service call to REST full service call...
-(void) addCustomerDetails:(UIButton *)sender{
    
    @try {
        
        // added by roja on 27/09/2019 //Here senderBtn is required in updatCustomerDetailsSuccess or errorResponse...(to know wheather button is 'nil' or a UIButton with value)
        senderBtn = [[UIButton alloc] init];
        senderBtn = sender;
        
        BOOL status = FALSE;
        
        CheckWifi * wifi = [[CheckWifi alloc]init];
        status = [wifi checkWifi];
        
        if (status) {
            
          //  [HUD setHidden:YES];
            
            [HUD setHidden:NO];
            HUD.labelText = @"Please Wait..";
            
            NSMutableDictionary * dictionary = [NSMutableDictionary new];
            dictionary[REQUEST_HEADER] = [RequestHeader getRequestHeader];
            
            if(sender == nil){
                
                //added by Srinivasulu on 21/11/2017....
                
                //                if ((eraseButton.tag != 1) || ((segment_index !=3) && (eraseButton.tag != 1))  ) {
                //
                //                    if(payBtn != nil)
                //                        payBtn.enabled = false;
                //                }
                
                //upto here on 21/11/2017....
                
                dictionary[CUSTOMER_PHONE] = phnotext.text;
                dictionary[@"pin_no"] = pintext.text;
                dictionary[@"status"] = @"false";
                dictionary[@"email"] = emailtext.text;
                dictionary[@"pin_no"] = pintext.text;
                dictionary[@"name"] = nametext.text;
                
                dictionary[@"street"] = streettext.text;
                dictionary[@"locality"] = locltytext.text;
                dictionary[@"loyaltyCustomer"] = @"";
                dictionary[@"phoneIds"] = @"";
                dictionary[@"city"] = citytext.text;
                
                if(doorNoTxt != nil)
                    dictionary[@"houseNo"] = doorNoTxt.text;
                if(landMarkTxt != nil)
                    dictionary[@"landMark"] = landMarkTxt.text;
                if(lastNameTxt != nil)
                    dictionary[@"lastName"] = lastNameTxt.text;
                if((customerGstinStr != nil) && (customerGstinStr.length))
                    dictionary[CUSTOMER_GSTIN] = customerGstinStr;
                
                //added by Srinivasulu on 03/09/2018....
                if(finalBillDue.floatValue > 0){
                    
                    if(isFirstTimeMemberShip && isToCreateNewMemberShip){//customerMemberShipStatus
                        customerMemberShipStatus = false;
                    }
                    isToCreateNewMemberShip = false;
                }
                
                dictionary[IS_MEMBERSHIP_CUSTOMER] = [NSNumber numberWithBool:customerMemberShipStatus];
//                dictionary[ITEM_CATEGORY] = @""; // commented by roja
                
                if(customerMemberShipStatus){

                if(memberShipText != nil && [memberShipText.text length])
                    dictionary[ITEM_CATEGORY] = memberShipText.text;
                }
            }
            else{
                
                //changed by Srinivasulu on 08/09/2017 && 21/05/2018....
                //[dictionary setObject:addressTxt6.text  forKey:CUSTOMER_PHONE]; -- changed phone_no to locality..
                
                dictionary[CUSTOMER_PHONE] = custmerPhNum.text;
                
                dictionary[CUSTOMER_MAIL] = emailAddressTxt.text;
                dictionary[LAST_NAME] = lastNameTxt1.text;
                dictionary[kFirstName] = firstNameTxt.text;
                
                
                dictionary[HOUSE_NO] = addressTxt1.text;
                dictionary[CUSTOMER_STREET] = addressTxt2.text;
                
                dictionary[CUSTOMER_LOCALITY] = addressTxt3.text;
                dictionary[CUSTOMER_CITY] = addressTxt4.text;
                
                dictionary[LAND_MARK] = addressTxt5.text;
                dictionary[CUSTOMER_PIN_NO] = addressTxt6.text;
                
                dictionary[CUSTOMER_GSTIN] = gtinTxt.text;
                
                //added by Srinivasulu on 03/09/2018....
                dictionary[IS_MEMBERSHIP_CUSTOMER] = [NSNumber numberWithBool:customerMemberShipStatus];
                dictionary[ITEM_CATEGORY] = memberShipText.text;
            }
            
            
            //updateCustomerDetails:  added by roja on 29/07/2019.. //reason calling restfull services to update customer...
            [self updateCustomerDetails:dictionary];
          
        }
        else { // if Offline
            
            //changed by Srinivasulu on 03/05/2017....
            
            
            //        NSArray *loyaltyKeys = [NSArray arrayWithObjects:@"phone", @"pin_no",@"status",@"email",@"name",@"street",@"locality",@"loyaltyCustomer",@"phoneIds",@"city", nil];
            //
            //        NSArray *loyaltyObjects = [NSArray arrayWithObjects:phnotext.text,pintext.text,@"false",emailtext.text,nametext.text,streettext.text,locltytext.text,@"",@"",citytext.text, nil];
            //        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
            
            
            NSMutableDictionary * dictionary = [NSMutableDictionary new];
            
            
            if(sender == nil){
                
                dictionary[@"phone"] = phnotext.text;
                dictionary[@"pin_no"] = pintext.text;
                dictionary[@"status"] = @"false";
                dictionary[@"email"] = emailtext.text;
                dictionary[@"pin_no"] = pintext.text;
                dictionary[@"name"] = nametext.text;
                
                dictionary[@"street"] = streettext.text;
                dictionary[@"locality"] = locltytext.text;
                dictionary[@"loyaltyCustomer"] = @"";
                dictionary[@"phoneIds"] = @"";
                dictionary[@"city"] = citytext.text;
                
                
                if(doorNoTxt != nil)
                    dictionary[@"houseNo"] = doorNoTxt.text;
                
                
                if(landMarkTxt != nil)
                    dictionary[@"landMark"] = landMarkTxt.text;
                
                if(lastNameTxt != nil)
                    dictionary[@"lastName"] = lastNameTxt.text;
                
                if((customerGstinStr != nil) && (customerGstinStr.length))
                    dictionary[CUSTOMER_GSTIN] = customerGstinStr;
                
                //added by Srinivasulu on 03/09/2018....
                if(finalBillDue.floatValue > 0){
                    
                    if(isFirstTimeMemberShip && isToCreateNewMemberShip){
                        customerMemberShipStatus = false;
                    }
                    isToCreateNewMemberShip = false;
                }
                
                // added by roja on 29/07/2019...
                dictionary[IS_MEMBERSHIP_CUSTOMER] = [NSNumber numberWithBool:customerMemberShipStatus];
                //                dictionary[ITEM_CATEGORY] = @""; // commented by roja

                if(customerMemberShipStatus){
                    if(memberShipText != nil)
                        dictionary[ITEM_CATEGORY] = memberShipText.text;
                }
                //upto here added by roja on 29/07/2019...
            }
            else{
                
                dictionary[CUSTOMER_PHONE] = custmerPhNum.text;
                dictionary[CUSTOMER_MAIL] = emailAddressTxt.text;
                dictionary[LAST_NAME] = lastNameTxt1.text;
                dictionary[kFirstName] = firstNameTxt.text;
                
                dictionary[HOUSE_NO] = addressTxt1.text;
                dictionary[CUSTOMER_STREET] = addressTxt2.text;
                
                dictionary[CUSTOMER_LOCALITY] = addressTxt3.text;
                dictionary[CUSTOMER_CITY] = addressTxt4.text;
                
                dictionary[LAND_MARK] = addressTxt5.text;
                dictionary[CUSTOMER_PIN_NO] = addressTxt6.text;
                
                
                dictionary[CUSTOMER_GSTIN] = gtinTxt.text;
                
                dictionary[@"status"] = @"false";
                dictionary[@"loyaltyCustomer"] = @"";
                dictionary[@"phoneIds"] = @"";
                
                //added by Srinivasulu on 03/09/2018....
                dictionary[IS_MEMBERSHIP_CUSTOMER] = [NSNumber numberWithBool:customerMemberShipStatus];
                dictionary[ITEM_CATEGORY] = memberShipText.text;
            }
            
            //commented and changed by Srinivauslu on 06/09/2018..
            offline = [[OfflineBillingServices alloc] init];
            //            [offline saveCustomerDetails:dictionary];
            [offline saveCustomerDetailsBasedOnPhone:dictionary];
            
            //houseNo -- landMark -- lastName
            //upto here on 03/04/2017....
            
            
            //added by Srinivasulu on 11/08/2017....
            
            if(sender != nil){
                
                [self  getCustomerDetailsForOffers];
                return;
            }
            
            //upto here on 11/08/2017....
            
            if (segment_index ==2) {
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    //changed by Roja on 07/09/2018....
                    //                                [self populateCardDetailsView];
                    [self populateCardPaymentDetailsView];                }
                else {
                    
                    //added by Srinivasulu on 21/04/2017....
                    //reason credit pay was added on this day....
                    @try {
                        
                        if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
                            
                            if(payTxt1 != nil && payTxt2 != nil)
                                finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
                            
                        }
                    } @catch (NSException *exception) {
                        
                    }
                    
                    
                    //upto here on 21/04/2017....
                    
                    
                    [self continuePay1];
                }
                
            }
            else {
                
                //added by Srinivasulu on 21/04/2017....
                //reason credit pay was added on this day....
                @try {
                    if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
                        
                        if(payTxt1 != nil && payTxt2 != nil)
                            finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
                        
                    }
                } @catch (NSException *exception) {
                    
                }
                
                
                //upto here on 21/04/2017....
                
                
                [self continuePay1];
                
            }
        }
        
        
    } @catch (NSException *exception) {
        
        //added by Srinivasulu on 21/11/2017....
        
        //        if ((eraseButton.tag != 1) || ((segment_index !=3) && (eraseButton.tag != 1))  ) {
        //
        //            if(payBtn != nil)
        //            payBtn.enabled = true;
        //        }
        
        //upto here on 21/11/2017....
        
        
    } @finally {
        
    }
    
}


/**
 * @description
 * @date         29/07/2019
 * @method       updateCustomerDetails:--
 * @author       K.Roja
 * @param        NSMutableDictionary
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By
 * @reason
 *
 */
-(void) updateCustomerDetails:(NSMutableDictionary *)senderDeatilsDic{
    
    @try {
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:senderDeatilsDic options:0 error:&err_];
        NSString * updateCustomerString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        WebServiceController * controllerObj = [[WebServiceController alloc] init];
        controllerObj.customerServiceDelegate = self;
        [controllerObj updateCustomerDetailsAsynchronousRequest:updateCustomerString];
        
    } @catch (NSException *exception) {
        [HUD setHidden:YES];
        NSLog(@"Exception near updateCustomerDetails method in BillingHome: %@ ",exception);
    }
   
}



/**
 * @description
 * @date         29/07/2019
 * @method       updateCustomerDetails:--
 * @author       K.Roja
 * @param        NSMutableDictionary
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By
 * @reason
 *
 */
- (void)updateCustomerDetailsSuccessResponse:(NSDictionary *)sucessDictionary{
    
    @try {
        
        if(senderBtn != nil){
            
            [self  getCustomerDetailsForOffers];
            return;
        }
        
        if (segment_index ==2) {
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                //changed by Roja on 07/09/2018....
                //    [self populateCardDetailsView];
                [self populateCardPaymentDetailsView];
            }
            else {
                //added by Srinivasulu on 21/04/2017....
                //reason credit pay was added on this day....
                @try {
                    if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
                        
                        if(payTxt1 != nil && payTxt2 != nil)
                            finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
                        
                    }
                } @catch (NSException *exception) {
                    
                }
                
                //upto here on 21/04/2017....
                [self continuePay1];
            }
        }
        else {
            //added by Srinivasulu on 21/04/2017....
            //reason credit pay was added on this day....
            @try {
                if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
                    
                    if(payTxt1 != nil && payTxt2 != nil)
                        finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
                    
                }
            } @catch (NSException *exception) {
                
            }
            
            //upto here on 21/04/2017....
            [self continuePay1];
        }
        
        //                    if (result) {
        //                        //Sending mail......
        //                        // [self continueFurther:skipbtn];
        //                    }
        //                    else {
        //                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[JSON1 valueForKey:[RESPONSE_HEADER valueForKey:RESPONSE_MESSAGE]] message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //                        [alert show];
        //
        //                    }
        //                    [HUD setHidden:YES];
        
    } @catch (NSException *exception) {
        
        NSLog(@"Exception near updateCustomerDetailsSuccessResponse %@",exception);
        
    } @finally {
        
        [HUD setHidden:YES];
    }
}


/**
 * @description
 * @date         29/07/2019
 * @method       updateCustomerDetails:--
 * @author       K.Roja
 * @param        NSMutableDictionary
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By
 * @reason
 *
 */
- (void)updateCustomerDetailsErrorResponse:(NSString *)errorResponse {
    
    @try {
        //added by Srinivasulu on 24/04/2017....
        
        if(senderBtn == nil){
            if (segment_index ==2) {
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                    
                    //changed by Roja on 07/09/2018....
                    //                                [self populateCardDetailsView];
                    [self populateCardPaymentDetailsView];
                }
                else {
                    
                    //added by Srinivasulu on 21/04/2017....
                    //reason credit pay was added on this day....
                    @try {
                        if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
                            
                            if(payTxt1 != nil && payTxt2 != nil)
                                finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
                            
                        }
                    } @catch (NSException *exception) {
                        
                    }
                    //upto here on 21/04/2017....
                    [self continuePay1];
                }
            }
            else {
                //added by Srinivasulu on 21/04/2017....
                //reason credit pay was added on this day....
                @try {
                    if( ([deliveryType isEqualToString:@"TA-CB"] || [deliveryType isEqualToString:@"DD-CB"]) && (segment_index == 0)){
                        
                        if(payTxt1 != nil && payTxt2 != nil)
                            finalBillDue = [[NSString stringWithFormat:@"%.2f",(payTxt1.text).floatValue-(payTxt2.text).floatValue] copy];
                        
                    }
                } @catch (NSException *exception) {
                    
                }
                //upto here on 21/04/2017....
                [self continuePay1];
                
            }
        }
        else{
            [segmentedControl setUserInteractionEnabled:TRUE];
            [segmentedControl setEnabled:TRUE forSegmentAtIndex:0];
            //added by roja on 29/07/2019...
            if(isFirstTimeMemberShip && isToCreateNewMemberShip){//customerMemberShipStatus
                customerMemberShipStatus = false;
            }
            //upto here added by roja on 29/07/2019...

            UIAlertView *alert = [[UIAlertView alloc] initWithTitle: errorResponse message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            
            [alert show];
        }

    } @catch (NSException *exception) {
        
        NSLog(@"Exception near updateCustomerDetailsErrorResponse: %@",exception);

    } @finally {
        [HUD setHidden:YES];

    }
}


#pragma -mark method used for gettting getting customer deatils....

/**
 * @description  here we are accessing service and getting the customer information if existing.....
 * @date
 * @method       getCustomerDetailsForOffers
 * @author
 * @param
 * @param
 *
 * @return
 *
 * @modified By Srinivasulu on 11/08/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message....  not completed....
 *
 * @verified By
 * @verified On
 *
 */

//-(void)getCustomerDetailsForOffers {
//
//    @try {
//
//        BOOL status = FALSE;
//
//        CheckWifi *wifi = [[CheckWifi alloc]init];
//
//        status = [wifi checkWifi];
//
//        //added by roja on 27/09/2019
//        customerInfoDic = [[NSDictionary alloc] init];
//
//        if (status) { // Online
//
//            //        HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
//            //        [self.navigationController.view addSubview:HUD];
//            //        // Regiser for HUD callbacks so we can remove it from the window at the right time
//            //        HUD.delegate = self;
//            //        HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
//            //        HUD.mode = MBProgressHUDModeCustomView;
//            //        // Show the HUD
//            //        [HUD show:YES];
//
//            // showing the HUD ..
//
//            [HUD setHidden:NO];
//
//            //checking for deals & offers...
//            CustomerServiceSoapBinding *custBindng =  [CustomerServiceSvc CustomerServiceSoapBinding] ;
//            CustomerServiceSvc_getCustomerDetails *aParameters = [[CustomerServiceSvc_getCustomerDetails alloc] init];
//
//            @try {
//
//                NSError * err;
//                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err];
//                NSString * requestHeaderString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//
//                NSArray *loyaltyKeys = @[@"email", @"mobileNumber",@"requestHeader"];
//
//                NSArray *loyaltyObjects = @[@"",custmerPhNum.text,requestHeaderString];
//                NSDictionary *dictionary_req = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                NSError * err_;
//                NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_req options:0 error:&err_];
//                NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//                aParameters.phone = loyaltyString;
//
//
//                CustomerServiceSoapBindingResponse *response = [custBindng getCustomerDetailsUsingParameters:(CustomerServiceSvc_getCustomerDetails *)aParameters];
//                NSArray *responseBodyParts = response.bodyParts;
//                for (id bodyPart in responseBodyParts) {
//                    if ([bodyPart isKindOfClass:[CustomerServiceSvc_getCustomerDetailsResponse class]]) {
//                        CustomerServiceSvc_getCustomerDetailsResponse *body = (CustomerServiceSvc_getCustomerDetailsResponse *)bodyPart;
//                        printf("\nresponse=%s",(body.return_).UTF8String);
//                        NSError *e;
//
//                        NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
//                                                                              options: NSJSONReadingMutableContainers
//                                                                                error: &e];
//
//                        NSDictionary *dictionary = [JSON1 valueForKey:RESPONSE_HEADER];
//                        if ([[dictionary valueForKey:RESPONSE_CODE] intValue] == -1) {
//
//                            if ((custmerPhNum.text).length >= 10) {
//                                [self provideCustomerRatingfor:NEW_CUSTOMER];
//
//                                //added by Srinivasulu on 11/08/2017....
//
//                                if((customerInfoPopOver == nil) || (!customerInfoPopOver.popoverVisible))
//                                    [self populateCustomerInfoPopUp1:customerInfoDic];
//
//                                //upto here on 11/08/2017....
//
//                                return;
//                            }
//                        }
//                        else{
//                            if ((custmerPhNum.text).length >= 10) {
//                                customerInfoDic = [JSON1 copy];
//
//                                //changed by Srinivasulu on 11/08/2017....
//                                customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
//
//                                if((customerInfoPopOver == nil) || (!customerInfoPopOver.popoverVisible))
//                                    [self populateCustomerInfoPopUp1:customerInfoDic];
//                                //                                [self populateCustomerInfoPopUp:customerInfoDic];
//
//                                //upto here on 11/08/2017....
//
//                                if (!([[NSString stringWithFormat:@"%@",JSON1[@"category"]] isEqualToString:@"<null>"])) {
//                                    [self provideCustomerRatingfor:[NSString stringWithFormat:@"%@",JSON1[@"category"]]];
//                                    return;
//                                }
//                                else {
//                                    [self provideCustomerRatingfor:EXISTING_CUSTOMER];
//                                    return;
//                                }
//                            }
//
//                        }
//
//
//                        [HUD setHidden:YES];
//                    }
//                }
//            }
//            @catch (NSException *exception) {
//
//                NSLog(@"%@",exception);
//            }
//            @finally {
//                [HUD setHidden:YES];
//
//            }
//        }
//        else { // Offline
//            //added by Srinivasulu on 15/03/2018....
//
//            NSString * customerMobileNumberStr = @"";
//
//            if((custmerPhNum.text).length >= 10)
//                customerMobileNumberStr = custmerPhNum.text;
//
//            if((phnotext.text).length >= 10)
//                customerMobileNumberStr = phnotext.text;
//
//            //upto here on 15/03/2018....
//
//
//            offline = [[OfflineBillingServices alloc] init];
//            //commented & changed by Srinivauslu on 06/09/2018....
//            //                NSDictionary *JSON1 = [offline getCustomerDetails:phnotext.text];
//            NSDictionary * JSON1 = [offline getCustomerDetailsBasedOnPhoneNo:customerMobileNumberStr];
//
//            if ([[NSString stringWithFormat:@"%@",JSON1[@"phone"]] isEqualToString:@"<null>"] || [[NSString stringWithFormat:@"%@",JSON1[@"email"]] isEqualToString:@"<null>"] || JSON1.count==0) {
//
//                if ((custmerPhNum.text).length >= 10) {
//                    [self provideCustomerRatingfor:NEW_CUSTOMER];
//
//                    //changed by Srinivasulu on 11/08/2017....
//
//                    if((customerInfoPopOver == nil) || (!customerInfoPopOver.popoverVisible))
//                        [self populateCustomerInfoPopUp1:customerInfoDic];
//                    customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
//
//                    //upto here on 11/08/2017....
//
//                    return;
//                }
//            }
//            else{
//
//                //changed by Srinivasulu on 11/08/2017....
//                customerInfoDic = [JSON1 copy];
//
//                if((customerInfoPopOver == nil) || (!customerInfoPopOver.popoverVisible))
//                    [self populateCustomerInfoPopUp1:customerInfoDic];
//                //                                [self populateCustomerInfoPopUp:customerInfoDic];
//                customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
//
//                //upto here on 11/08/2017....
//
//                if (!([[NSString stringWithFormat:@"%@",JSON1[@"category"]] isEqualToString:@"<null>"])) {
//                    [self provideCustomerRatingfor:[NSString stringWithFormat:@"%@",JSON1[@"category"]]];
//                    return;
//                }
//                else {
//                    [self provideCustomerRatingfor:EXISTING_CUSTOMER];
//                    return;
//                }
//            }
//        }
//    } @catch (NSException *exception) {
//
//    } @finally {
//
//    }
//
//}




//getCustomerDetailsForOffers method changed by roja on 17/10/2019.. // reason removed SOAP service call related code and  added REST service call code...
// At the time of converting SOAP call's to REST
-(void)getCustomerDetailsForOffers {
    
    @try {
        
        BOOL status = FALSE;
        
        CheckWifi *wifi = [[CheckWifi alloc]init];
        
        status = [wifi checkWifi];
        
        //added by roja on 27/09/2019
        customerInfoDic = [[NSDictionary alloc] init];
        
        if (status) { // Online
            
            //        HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
            //        [self.navigationController.view addSubview:HUD];
            //        // Regiser for HUD callbacks so we can remove it from the window at the right time
            //        HUD.delegate = self;
            //        HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
            //        HUD.mode = MBProgressHUDModeCustomView;
            //        // Show the HUD
            //        [HUD show:YES];
            
            // showing the HUD ..
            
            [HUD setHidden:NO];
            
            //checking for deals & offers...
            
            @try {
                // added by roja on 07/11/2019
                isCustomerDetailsCall = false;
                
                NSError * err;
                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err];
                NSString * requestHeaderString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                
                NSArray *loyaltyKeys = @[@"email", @"mobileNumber",@"requestHeader"];
                NSArray *loyaltyObjects = @[@"",custmerPhNum.text,requestHeaderString];
                // phoneNumberText is while using wallet...
                if(([custmerPhNum.text length] < 10 || [custmerPhNum.text length] == 0 )&& [phoneNumberText.text length] >= 10){
                    loyaltyObjects = @[@"",phoneNumberText.text,requestHeaderString];
                }
                
                
                NSDictionary *dictionary_req = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                
                NSError * err_;
                NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_req options:0 error:&err_];
                NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                
                WebServiceController * services = [[WebServiceController alloc] init];
                services.customerServiceDelegate = self;
                [services getCustomerDetails:loyaltyString];
                
            }
            @catch (NSException *exception) {
                
                NSLog(@"%@",exception);
                [HUD setHidden:YES];

            }
            @finally {
                
            }
        }
        else { // Offline
            //added by Srinivasulu on 15/03/2018....
            
            NSString * customerMobileNumberStr = @"";
            
            if((custmerPhNum.text).length >= 10)
                customerMobileNumberStr = custmerPhNum.text;
            
            if((phnotext.text).length >= 10)
                customerMobileNumberStr = phnotext.text;
            
            //upto here on 15/03/2018....
            
            
            offline = [[OfflineBillingServices alloc] init];
            //commented & changed by Srinivauslu on 06/09/2018....
            //                NSDictionary *JSON1 = [offline getCustomerDetails:phnotext.text];
            NSDictionary * JSON1 = [offline getCustomerDetailsBasedOnPhoneNo:customerMobileNumberStr];
            
            if ([[NSString stringWithFormat:@"%@",JSON1[@"phone"]] isEqualToString:@"<null>"] || [[NSString stringWithFormat:@"%@",JSON1[@"email"]] isEqualToString:@"<null>"] || JSON1.count==0) {
                
                if ((custmerPhNum.text).length >= 10) {
                    [self provideCustomerRatingfor:NEW_CUSTOMER];
                    
                    //changed by Srinivasulu on 11/08/2017....
                    
                    if((customerInfoPopOver == nil) || (!customerInfoPopOver.popoverVisible))
                        [self populateCustomerInfoPopUp1:customerInfoDic];
                    customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
                    
                    //upto here on 11/08/2017....
                    
                    return;
                }
            }
            else{
                
                //changed by Srinivasulu on 11/08/2017....
                customerInfoDic = [JSON1 copy];
                
                if((customerInfoPopOver == nil) || (!customerInfoPopOver.popoverVisible))
                    [self populateCustomerInfoPopUp1:customerInfoDic];
                //                                [self populateCustomerInfoPopUp:customerInfoDic];
                customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
                
                //upto here on 11/08/2017....
                
                if (!([[NSString stringWithFormat:@"%@",JSON1[@"category"]] isEqualToString:@"<null>"])) {
                    [self provideCustomerRatingfor:[NSString stringWithFormat:@"%@",JSON1[@"category"]]];
                    return;
                }
                else {
                    [self provideCustomerRatingfor:EXISTING_CUSTOMER];
                    return;
                }
            }
        }
    } @catch (NSException *exception) {
        [HUD setHidden:YES];
    } @finally {
        
    }
    
}

// added by Roja on 17/10/2019…. // old code placed here
- (void)getCustomerDetailsSuccessResponse:(NSDictionary *)sucessDictionary{
    
    @try {
        
        if(isCustomerDetailsCall){ //this handling is for getCustomerDetails (method) // isCustomerDetailsCall added by roja
            
            //NSArray *temp = [body.return_ componentsSeparatedByString:@"#"];
            if (![sucessDictionary[@"phone"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"phone"] length] > 0) {
                phnotext.text = [NSString stringWithFormat:@"%@", sucessDictionary[@"phone"]];
            }
            else{
                phnotext.text = @"";
            }
            if (![sucessDictionary[@"email"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"email"] length] > 0) {
                emailtext.text = [NSString stringWithFormat:@"%@", sucessDictionary[@"email"]];
                
            }
            else {
                emailtext.text = @"";
                
            }
            if (![sucessDictionary[@"name"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"name"] length] > 0) {
                nametext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"name"]];
                
            }
            else {
                nametext.text = @"";
            }
            if (![sucessDictionary[@"street"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"street"] length] > 0) {
                streettext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"street"]];
                
            }
            else{
                streettext.text = @"";
            }
            if (![sucessDictionary[@"locality"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"locality"] length] > 0) {
                locltytext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"locality"]];
                
            }
            else {
                locltytext.text = @"";
                
            }
            if (![sucessDictionary[@"city"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"city"] length] > 0) {
                citytext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"city"]];
                
            }
            else {
                
                citytext.text = @"";
            }
            if (![sucessDictionary[@"pin_no"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"pin_no"] length] > 0) {
                pintext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"pin_no"]];
                
            }
            else {
                
                pintext.text = @"";
            }
            
            //added by Srinivasulu on 03/05/2017....
            
            
            
            if((doorNoTxt != nil) && (![sucessDictionary[@"houseNo"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"houseNo"] length] > 0))
                doorNoTxt.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"houseNo"]];
            else if(doorNoTxt != nil)
                doorNoTxt.text = @"";
            
            
            if((landMarkTxt != nil) && (![sucessDictionary[@"landMark"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"landMark"] length] > 0))
                landMarkTxt.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"landMark"]];
            else if(landMarkTxt != nil)
                landMarkTxt.text = @"";
            
            if((lastNameTxt != nil) && (![sucessDictionary[@"lastName"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"lastName"] length] > 0))
                lastNameTxt.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"lastName"]];
            else if(lastNameTxt != nil)
                lastNameTxt.text = @"";
            
            
            //added by Srinivasulu on 12/08/2017....
            
            customerGstinStr = [self checkGivenValueIsNullOrNil:[sucessDictionary valueForKey:CUSTOMER_GSTIN] defaultReturn:@""];
            customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[sucessDictionary valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
            
            //upto here on 12/08/2017....
            
            //upto here on 03/05/2017....
            
            //NSString *temp1 = [temp objectAtIndex:1];
            if (![sucessDictionary[@"name"] isKindOfClass:[NSNull class]]&& [sucessDictionary[@"name"] length] > 0) {
                billCustomerName = [sucessDictionary[@"name"] copy];
            }
            else {
                billCustomerName = @"";
            }
            [savebtn setTitle:@"Update" forState:UIControlStateNormal];
            savebtn.tag = 2;
        }
        
        
        else { // this handling is for getCustomerDetailsForOffers (method)
            
            
            
            if(!isWalletBtnSelected){ // condition added by roja on 20/11/2019... (Reason for wallet btn action need to get customer details)
                
                if ((custmerPhNum.text).length >= 10) {
                    customerInfoDic = [sucessDictionary copy];
                    
                    //changed by Srinivasulu on 11/08/2017....
                    customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[customerInfoDic valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
                    
                    if((customerInfoPopOver == nil) || (!customerInfoPopOver.popoverVisible))
                        [self populateCustomerInfoPopUp1:customerInfoDic];
                    //                                [self populateCustomerInfoPopUp:customerInfoDic];
                    
                    //upto here on 11/08/2017....
                    
                    if (!([[NSString stringWithFormat:@"%@",sucessDictionary[@"category"]] isEqualToString:@"<null>"])) {
                        [self provideCustomerRatingfor:[NSString stringWithFormat:@"%@",sucessDictionary[@"category"]]];
                        return;
                    }
                    else {
                        [self provideCustomerRatingfor:EXISTING_CUSTOMER];
                        return;
                    }
                    
                    
                    isWalletBtnSelected =  false; // added by roja on 20/11/2019...
                }
            }
            // added by roja on 20/11/2019...
            else if(isWalletBtnSelected && ([phoneNumberText.text length] >= 10) ){
                
                    isWalletBtnSelected = false;
 
                    walletUserFirstNameTF.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"name"]];
                    walletUserLastNameTF.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"name"]];
                    walletUserHouseNoTF.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"street"]];
                    walletUserLocalityTF.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"locality"]];
                    walletUserCityTF.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"city"]];
                    walletUserEmailIdTF.text = [NSString stringWithFormat:@"%@", sucessDictionary[@"email"]];
                    
                    pintext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"pin_no"]];
                    locltytext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"locality"]];
                    streettext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"street"]];
                    nametext.text = [NSString stringWithFormat:@"%@",sucessDictionary[@"name"]];
                    emailtext.text = [NSString stringWithFormat:@"%@", sucessDictionary[@"email"]];
                    phnotext.text = [NSString stringWithFormat:@"%@", sucessDictionary[@"phone"]];

            }
            //Upto here added by roja on 17/10/2019...
            
        }

        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}

// added by Roja on 17/10/2019…. // old code placed here
- (void)getCustomerDetailsErrorResponse:(NSString *)errorResponse{
    
    @try {
        
        if(isCustomerDetailsCall){ //this handling is for getCustomerDetails (method)
            
            emailtext.text = @"";
            nametext.text = @"";
            streettext.text = @"";
            locltytext.text = @"";
            citytext.text = @"";
            pintext.text = @"";
            
            //added by Srinivauslu on 03/05/2017....
            
            if(doorNoTxt != nil)
                doorNoTxt.text = @"";
            
            
            if(landMarkTxt != nil)
                landMarkTxt.text = @"";
            
            if(lastNameTxt != nil)
                lastNameTxt.text = @"";
            
            //upto here on 03/05/2017....
            
            
            if ([(self.view).subviews containsObject:newCust]) {
                
                [newCust removeFromSuperview];
            }
            
            newCust = [[UILabel alloc] init];
            newCust.text =  NSLocalizedString(@"New_customer_message", nil);
            newCust.font = [UIFont systemFontOfSize:20];
            newCust.backgroundColor = [UIColor clearColor];
            newCust.textColor = [UIColor redColor];
            newCust.hidden = NO;
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                newCust.frame = CGRectMake(500, 350, 500, 50);
                
                if ([WebServiceUtility checkIsCardPayment:paymentView]) {
                    newCust.frame = CGRectMake(500, 280, 500, 50);
                }
            }
            else {
                
                newCust.frame = CGRectMake(70, 320, 300, 30);
                newCust.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
            }
            [self applyAnimationToLabel:newCust];
            
            [paymentScrollView addSubview:newCust];
            [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(labelEffect) userInfo:nil repeats:NO];
            
        }
        
        else { // this handling is for getCustomerDetailsForOffers (method)
            
            if ((custmerPhNum.text).length >= 10) {
                [self provideCustomerRatingfor:NEW_CUSTOMER];
                
                //added by Srinivasulu on 11/08/2017....
                if((customerInfoPopOver == nil) || (!customerInfoPopOver.popoverVisible))
                    [self populateCustomerInfoPopUp1:customerInfoDic];
                //upto here on 11/08/2017....
                
                return;
            }
        }

    } @catch (NSException *exception) {
        
    } @finally {
        isWalletBtnSelected = false;// added by roja on 20/11/2019...
        [HUD setHidden:YES];
    }
}


/**
 * @description  here we are giving the rating based on service.....
 * @date
 * @method       provideCustomerRatingfor
 * @author
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 11/08/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message....  not completed....
 *
 */

-(void)provideCustomerRatingfor:(NSString *)category{
    
    @try {
        
        [starRat removeFromSuperview];
        starRat = [[UIImageView alloc] init];
        starRat.backgroundColor = [UIColor clearColor];
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                starRat.frame = CGRectMake(890, 165.0, 120, 30);
            }
        }
        [self.view addSubview:starRat];
        if ([category isEqualToString:PREMIUM])
        {
            [self ratingView:5.0 outOf:5.0 imageView:starRat];
        }
        else if ([category isEqualToString:GENERIC])
        {
            [self ratingView:4.0 outOf:5.0 imageView:starRat];
        }
        else if ([category isEqualToString:PLUS])
        {
            [self ratingView:3.0 outOf:5.0 imageView:starRat];
        }
        else if ([category isEqualToString:BASIC])
        {
            
            [self ratingView:2.5 outOf:5.0 imageView:starRat];
        }
        else if ([category isEqualToString:NORMAL])
        {
            [self ratingView:2.0 outOf:5.0 imageView:starRat];
        }
        else
        {
            [self ratingView:0.0 outOf:5.0 imageView:starRat];
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are accessing service and getting the customer information if existing.....
 * @date
 * @method       getCustomerDetails
 * @author
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By Srinivasulu on 11/08/2017....
 * @reason      added the comments.... hidding HUD in catch block.... showing the error message....  not completed....
 *
 */


// Commented by roja on 17/10/2019.. // reason getCustomerDetails method contains SOAP Service call .. so taken new method with same(getCustomerDetails) method name which contains REST service call....
// At the time of converting SOAP call's to REST


//-(void) getCustomerDetails {
//
//    @try {
//
//        [self.view endEditing: YES];
//
//        // NSString *value = [smsField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
//        // PhoNumber validation...
//        NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
//        NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
//        BOOL isNumber = [decimalTest evaluateWithObject:phnotext.text];
//        //int qty = [value intValue];
//
//
//        if ((phnotext.text).length == 0) {
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//            [alert show];
//        }
//        else if((phnotext.text).length <= 9 || (phnotext.text).length >= 12 || !isNumber) {
//
//            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//            [alert show];
//
//        }
//        else{
//
//            customerStatus = true;
//
//            BOOL status = FALSE;
//
//            CheckWifi *wifi = [[CheckWifi alloc]init];
//
//            status = [wifi checkWifi];
//
//
//            if (status) {
//
//
//                // showing the HUD ..
//                [HUD setHidden:NO];
//                HUD.labelText = @"Please wait...";
//
//                //checking for deals & offers...
//                CustomerServiceSoapBinding *custBindng =  [CustomerServiceSvc CustomerServiceSoapBinding] ;
//                CustomerServiceSvc_getCustomerDetails *aParameters = [[CustomerServiceSvc_getCustomerDetails alloc] init];
//
//
//                NSError * err;
//                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err];
//                NSString * requestHeaderString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
//
//
//                NSArray *loyaltyKeys = @[@"email", @"mobileNumber",@"requestHeader"];
//
//                NSArray *loyaltyObjects = @[@"",phnotext.text,requestHeaderString];
//                NSDictionary *dictionary_req = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
//
//                NSError * err_;
//                NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_req options:0 error:&err_];
//                NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
//                aParameters.phone = loyaltyString;
//
//                @try {
//
//                    CustomerServiceSoapBindingResponse *response = [custBindng getCustomerDetailsUsingParameters:(CustomerServiceSvc_getCustomerDetails *)aParameters];
//                    NSArray *responseBodyParts = response.bodyParts;
//                    for (id bodyPart in responseBodyParts) {
//                        if ([bodyPart isKindOfClass:[CustomerServiceSvc_getCustomerDetailsResponse class]]) {
//                            CustomerServiceSvc_getCustomerDetailsResponse *body = (CustomerServiceSvc_getCustomerDetailsResponse *)bodyPart;
//                            printf("\nresponse=%s",(body.return_).UTF8String);
//                            NSError *e;
//
//                            NSDictionary *JSON1 = [NSJSONSerialization JSONObjectWithData: [body.return_ dataUsingEncoding:NSUTF8StringEncoding]
//                                                                                  options: NSJSONReadingMutableContainers
//                                                                                    error: &e];
//
//                            NSDictionary *dictionary = [JSON1 valueForKey:RESPONSE_HEADER];
//                            if ([[dictionary valueForKey:RESPONSE_CODE] intValue] == -1) {
//
//                                emailtext.text = @"";
//                                nametext.text = @"";
//                                streettext.text = @"";
//                                locltytext.text = @"";
//                                citytext.text = @"";
//                                pintext.text = @"";
//
//                                //added by Srinivauslu on 03/05/2017....
//
//                                if(doorNoTxt != nil)
//                                    doorNoTxt.text = @"";
//
//
//                                if(landMarkTxt != nil)
//                                    landMarkTxt.text = @"";
//
//                                if(lastNameTxt != nil)
//                                    lastNameTxt.text = @"";
//
//                                //upto here on 03/05/2017....
//
//
//                                if ([(self.view).subviews containsObject:newCust]) {
//
//                                    [newCust removeFromSuperview];
//                                }
//
//                                newCust = [[UILabel alloc] init];
//                                newCust.text =  NSLocalizedString(@"New_customer_message", nil);
//                                newCust.font = [UIFont systemFontOfSize:20];
//                                newCust.backgroundColor = [UIColor clearColor];
//                                newCust.textColor = [UIColor redColor];
//                                newCust.hidden = NO;
//
//                                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                                    newCust.frame = CGRectMake(500, 350, 500, 50);
//
//                                    if ([WebServiceUtility checkIsCardPayment:paymentView]) {
//                                        newCust.frame = CGRectMake(500, 280, 500, 50);
//                                    }
//                                }
//                                else {
//
//                                    newCust.frame = CGRectMake(70, 320, 300, 30);
//                                    newCust.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
//                                }
//                                [self applyAnimationToLabel:newCust];
//
//                                [paymentScrollView addSubview:newCust];
//                                [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(labelEffect) userInfo:nil repeats:NO];
//
//                            }
//                            else{
//
//                                //NSArray *temp = [body.return_ componentsSeparatedByString:@"#"];
//                                if (![JSON1[@"phone"] isKindOfClass:[NSNull class]]&& [JSON1[@"phone"] length] > 0) {
//                                    phnotext.text = [NSString stringWithFormat:@"%@",JSON1[@"phone"]];
//                                }
//                                else{
//                                    phnotext.text = @"";
//                                }
//                                if (![JSON1[@"email"] isKindOfClass:[NSNull class]]&& [JSON1[@"email"] length] > 0) {
//                                    emailtext.text = [NSString stringWithFormat:@"%@",JSON1[@"email"]];
//
//                                }
//                                else {
//                                    emailtext.text = @"";
//
//                                }
//                                if (![JSON1[@"name"] isKindOfClass:[NSNull class]]&& [JSON1[@"name"] length] > 0) {
//                                    nametext.text = [NSString stringWithFormat:@"%@",JSON1[@"name"]];
//                                }
//                                else {
//                                    nametext.text = @"";
//                                }
//                                if (![JSON1[@"street"] isKindOfClass:[NSNull class]]&& [JSON1[@"street"] length] > 0) {
//                                    streettext.text = [NSString stringWithFormat:@"%@",JSON1[@"street"]];
//                                }
//                                else{
//                                    streettext.text = @"";
//                                }
//                                if (![JSON1[@"locality"] isKindOfClass:[NSNull class]]&& [JSON1[@"locality"] length] > 0) {
//                                    locltytext.text = [NSString stringWithFormat:@"%@",JSON1[@"locality"]];
//                                }
//                                else {
//                                    locltytext.text = @"";
//
//                                }
//                                if (![JSON1[@"city"] isKindOfClass:[NSNull class]]&& [JSON1[@"city"] length] > 0) {
//                                    citytext.text = [NSString stringWithFormat:@"%@",JSON1[@"city"]];
//                                }
//                                else {
//
//                                    citytext.text = @"";
//                                }
//                                if (![JSON1[@"pin_no"] isKindOfClass:[NSNull class]]&& [JSON1[@"pin_no"] length] > 0) {
//                                    pintext.text = [NSString stringWithFormat:@"%@",JSON1[@"pin_no"]];
//                                }
//                                else {
//
//                                    pintext.text = @"";
//                                }
//
//                                //added by Srinivasulu on 03/05/2017....
//
//
//
//                                if((doorNoTxt != nil) && (![JSON1[@"houseNo"] isKindOfClass:[NSNull class]]&& [JSON1[@"houseNo"] length] > 0))
//                                    doorNoTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"houseNo"]];
//                                else if(doorNoTxt != nil)
//                                    doorNoTxt.text = @"";
//
//
//                                if((landMarkTxt != nil) && (![JSON1[@"landMark"] isKindOfClass:[NSNull class]]&& [JSON1[@"landMark"] length] > 0))
//                                    landMarkTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"landMark"]];
//                                else if(landMarkTxt != nil)
//                                    landMarkTxt.text = @"";
//
//                                if((lastNameTxt != nil) && (![JSON1[@"lastName"] isKindOfClass:[NSNull class]]&& [JSON1[@"lastName"] length] > 0))
//                                    lastNameTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"lastName"]];
//                                else if(lastNameTxt != nil)
//                                    lastNameTxt.text = @"";
//
//
//                                //added by Srinivasulu on 12/08/2017....
//
//                                customerGstinStr = [self checkGivenValueIsNullOrNil:[JSON1 valueForKey:CUSTOMER_GSTIN] defaultReturn:@""];
//                                customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[JSON1 valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
//
//                                //upto here on 12/08/2017....
//
//                                //upto here on 03/05/2017....
//
//                                //NSString *temp1 = [temp objectAtIndex:1];
//                                if (![JSON1[@"name"] isKindOfClass:[NSNull class]]&& [JSON1[@"name"] length] > 0) {
//                                    billCustomerName = [JSON1[@"name"] copy];
//                                }
//                                else {
//                                    billCustomerName = @"";
//                                }
//                                [savebtn setTitle:@"Update" forState:UIControlStateNormal];
//                                savebtn.tag = 2;
//                            }
//
//                            [HUD setHidden:YES];
//                        }
//                    }
//                }
//                @catch (NSException *exception) {
//
//                    NSLog(@"%@",exception);
//                }
//                @finally {
//                    [HUD setHidden:YES];
//
//                }
//
//            }
//            else {
//                //added by Srinivasulu on 15/03/2018....
//
//                NSString * customerMobileNumberStr = @"";
//
//                if((custmerPhNum.text).length >= 10)
//                    customerMobileNumberStr = custmerPhNum.text;
//
//                if((phnotext.text).length >= 10)
//                    customerMobileNumberStr = phnotext.text;
//
//                //upto here on 15/03/2018....
//
//
//                offline = [[OfflineBillingServices alloc] init];
//                //commented & changed by Srinivauslu on 06/09/2018....
//                //                NSDictionary *JSON1 = [offline getCustomerDetails:phnotext.text];
//                NSDictionary * JSON1 = [offline getCustomerDetailsBasedOnPhoneNo:customerMobileNumberStr];
//
//                if ([[NSString stringWithFormat:@"%@",JSON1[@"phone"]] isEqualToString:@"<null>"] || [[NSString stringWithFormat:@"%@",JSON1[@"email"]] isEqualToString:@"<null>"] || JSON1.count==0) {
//
//                    emailtext.text = @"";
//                    nametext.text = @"";
//                    streettext.text = @"";
//                    locltytext.text = @"";
//                    citytext.text = @"";
//                    pintext.text = @"";
//
//
//                    //added by Srinivauslu on 03/05/2017....
//
//                    if(doorNoTxt != nil)
//                        doorNoTxt.text = @"";
//
//
//                    if(landMarkTxt != nil)
//                        landMarkTxt.text = @"";
//
//                    if(lastNameTxt != nil)
//                        lastNameTxt.text = @"";
//
//                    //upto here on 03/05/2017....
//
//                    if ([(self.view).subviews containsObject:newCust]) {
//
//                        [newCust removeFromSuperview];
//                    }
//
//                    newCust = [[UILabel alloc] init];
//                    newCust.text =  NSLocalizedString(@"New_customer_message", nil);
//                    newCust.font = [UIFont systemFontOfSize:20];
//                    newCust.backgroundColor = [UIColor clearColor];
//                    newCust.textColor = [UIColor redColor];
//
//                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
//
//                        newCust.frame = CGRectMake(500, 350, 500, 50);
//                        if ([WebServiceUtility checkIsCardPayment:paymentView]) {
//                            newCust.frame = CGRectMake(500, 280, 500, 50);
//                        }
//                    }
//                    else {
//
//                        newCust.frame = CGRectMake(70, 320, 300, 30);
//                        newCust.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
//                    }
//                    [self applyAnimationToLabel:newCust];
//
//                    [paymentScrollView addSubview:newCust];
//
//
//                }
//                else{
//
//                    //NSArray *temp = [body.return_ componentsSeparatedByString:@"#"];
//                    phnotext.text = [NSString stringWithFormat:@"%@",JSON1[@"phone"]];
//                    emailtext.text = [NSString stringWithFormat:@"%@",JSON1[@"email"]];
//                    nametext.text = [NSString stringWithFormat:@"%@",JSON1[@"name"]];
//                    streettext.text = [NSString stringWithFormat:@"%@",JSON1[@"street"]];
//                    locltytext.text = [NSString stringWithFormat:@"%@",JSON1[@"locality"]];
//                    citytext.text = [NSString stringWithFormat:@"%@",JSON1[@"city"]];
//                    pintext.text = [NSString stringWithFormat:@"%@",JSON1[@"pin_no"]];
//
//                    //added by Srinivasulu on 03/05/2017....
//
//                    if((doorNoTxt != nil) && (![JSON1[@"houseNo"] isKindOfClass:[NSNull class]]&& [JSON1[@"houseNo"] length] > 0))
//                        doorNoTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"houseNo"]];
//                    else if(doorNoTxt != nil)
//                        doorNoTxt.text = @"";
//
//
//                    if((landMarkTxt != nil) && (![JSON1[@"landMark"] isKindOfClass:[NSNull class]]&& [JSON1[@"landMark"] length] > 0))
//                        landMarkTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"landMark"]];
//                    else if(landMarkTxt != nil)
//                        landMarkTxt.text = @"";
//
//                    if((lastNameTxt != nil) && (![JSON1[@"lastName"] isKindOfClass:[NSNull class]]&& [JSON1[@"lastName"] length] > 0))
//                        lastNameTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"lastName"]];
//                    else if(lastNameTxt != nil)
//                        lastNameTxt.text = @"";
//
//                    //added by Srinivasulu on 12/08/2017....
//
//                    customerGstinStr = [self checkGivenValueIsNullOrNil:[JSON1 valueForKey:CUSTOMER_GSTIN] defaultReturn:@""];
//                    customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[JSON1 valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
//
//                    //upto here on 12/08/2017....
//
//                    //upto here on 03/05/2017....
//
//                    //NSString *temp1 = [temp objectAtIndex:1];
//                    billCustomerName = [JSON1[@"name"] copy];
//                    [savebtn setTitle:@"Update" forState:UIControlStateNormal];
//                }
//
//            }
//
//            //changed by Srinivasulu on 04/12/2017....
//            //reason -- changed the deceleation outside the block....
//            if( !(streettext.text).length && !(locltytext.text).length &&  !(citytext.text).length && !(pintext.text).length){
//
//                NSUserDefaults * custDefaults  = [[NSUserDefaults alloc] init];
//
//
//                streettext.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_AREA] defaultReturn:@""];
//                locltytext.text = presentLocation;
//                if(landMarkTxt != nil)
//                    landMarkTxt.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_LANDMARK] defaultReturn:@""];
//                citytext.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_CITY] defaultReturn:@""];
//                //                                streettext.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_STATE] defaultReturn:@""];
//                pintext.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_PIN] defaultReturn:@""];
//
//                if(addressTxt1 != nil && addressTxt2 != nil &&  addressTxt3 != nil && addressTxt3 != nil){
//
//                    addressTxt2.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_AREA] defaultReturn:@""];
//                    addressTxt4.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_CITY] defaultReturn:@""];
//
//                    addressTxt5.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_LANDMARK] defaultReturn:@""];
//                    addressTxt6.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_PIN] defaultReturn:@""];
//                }
//            }
//            //upto here on 04/12/2017....
//        }
//
//    } @catch (NSException *exception) {
//
//    } @finally {
//
//    }
//
//}



//getCustomerDetails method changed by roja on 17/10/2019.. // reason removed SOAP service call related code and  added REST service call code...
// At the time of converting SOAP call's to REST

-(void) getCustomerDetails {
    
    @try {
        
        [self.view endEditing: YES];
        
        // NSString *value = [smsField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        // PhoNumber validation...
        NSString *decimalRegex = @"[0-9]+([.]([0-9]+)?)?"; // @"[0-9]+[.][0-9]+";
        NSPredicate *decimalTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", decimalRegex];
        BOOL isNumber = [decimalTest evaluateWithObject:phnotext.text];
        //int qty = [value intValue];
        
        
        if ((phnotext.text).length == 0) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
        else if((phnotext.text).length <= 9 || (phnotext.text).length >= 12 || !isNumber) {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Phone Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else{
            
            customerStatus = true;
            
            BOOL status = FALSE;
            
            CheckWifi *wifi = [[CheckWifi alloc]init];
            
            status = [wifi checkWifi];
            
            
            if (status) {
                
                isCustomerDetailsCall = true;

                // showing the HUD ..
                [HUD setHidden:NO];
                HUD.labelText = @"Please wait...";
                
                //checking for deals & offers...
                
                
                NSError * err;
                NSData * jsonData = [NSJSONSerialization dataWithJSONObject:[RequestHeader getRequestHeader] options:0 error:&err];
                NSString * requestHeaderString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                
                
                NSArray *loyaltyKeys = @[@"email", @"mobileNumber",@"requestHeader"];
                
                NSArray *loyaltyObjects = @[@"",phnotext.text,requestHeaderString];
                NSDictionary *dictionary_req = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                
                NSError * err_;
                NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_req options:0 error:&err_];
                NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                
            
                WebServiceController *services = [[WebServiceController alloc] init];
                services.customerServiceDelegate = self;
                [services getCustomerDetails:loyaltyString];
                

            }
            else {
                //added by Srinivasulu on 15/03/2018....
                
                NSString * customerMobileNumberStr = @"";
                
                if((custmerPhNum.text).length >= 10)
                    customerMobileNumberStr = custmerPhNum.text;
                
                if((phnotext.text).length >= 10)
                    customerMobileNumberStr = phnotext.text;
                
                //upto here on 15/03/2018....
                
                
                offline = [[OfflineBillingServices alloc] init];
                //commented & changed by Srinivauslu on 06/09/2018....
                //                NSDictionary *JSON1 = [offline getCustomerDetails:phnotext.text];
                NSDictionary * JSON1 = [offline getCustomerDetailsBasedOnPhoneNo:customerMobileNumberStr];
                
                if ([[NSString stringWithFormat:@"%@",JSON1[@"phone"]] isEqualToString:@"<null>"] || [[NSString stringWithFormat:@"%@",JSON1[@"email"]] isEqualToString:@"<null>"] || JSON1.count==0) {
                    
                    emailtext.text = @"";
                    nametext.text = @"";
                    streettext.text = @"";
                    locltytext.text = @"";
                    citytext.text = @"";
                    pintext.text = @"";
                    
                    
                    //added by Srinivauslu on 03/05/2017....
                    
                    if(doorNoTxt != nil)
                        doorNoTxt.text = @"";
                    
                    
                    if(landMarkTxt != nil)
                        landMarkTxt.text = @"";
                    
                    if(lastNameTxt != nil)
                        lastNameTxt.text = @"";
                    
                    //upto here on 03/05/2017....
                    
                    if ([(self.view).subviews containsObject:newCust]) {
                        
                        [newCust removeFromSuperview];
                    }
                    
                    newCust = [[UILabel alloc] init];
                    newCust.text =  NSLocalizedString(@"New_customer_message", nil);
                    newCust.font = [UIFont systemFontOfSize:20];
                    newCust.backgroundColor = [UIColor clearColor];
                    newCust.textColor = [UIColor redColor];
                    
                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                        
                        newCust.frame = CGRectMake(500, 350, 500, 50);
                        if ([WebServiceUtility checkIsCardPayment:paymentView]) {
                            newCust.frame = CGRectMake(500, 280, 500, 50);
                        }
                    }
                    else {
                        
                        newCust.frame = CGRectMake(70, 320, 300, 30);
                        newCust.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
                    }
                    [self applyAnimationToLabel:newCust];
                    
                    [paymentScrollView addSubview:newCust];
                    
                    
                }
                else{
                    
                    //NSArray *temp = [body.return_ componentsSeparatedByString:@"#"];
                    phnotext.text = [NSString stringWithFormat:@"%@",JSON1[@"phone"]];
                    emailtext.text = [NSString stringWithFormat:@"%@",JSON1[@"email"]];
                    nametext.text = [NSString stringWithFormat:@"%@",JSON1[@"name"]];
                    streettext.text = [NSString stringWithFormat:@"%@",JSON1[@"street"]];
                    locltytext.text = [NSString stringWithFormat:@"%@",JSON1[@"locality"]];
                    citytext.text = [NSString stringWithFormat:@"%@",JSON1[@"city"]];
                    pintext.text = [NSString stringWithFormat:@"%@",JSON1[@"pin_no"]];
                    
                    //added by Srinivasulu on 03/05/2017....
                    
                    if((doorNoTxt != nil) && (![JSON1[@"houseNo"] isKindOfClass:[NSNull class]]&& [JSON1[@"houseNo"] length] > 0))
                        doorNoTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"houseNo"]];
                    else if(doorNoTxt != nil)
                        doorNoTxt.text = @"";
                    
                    
                    if((landMarkTxt != nil) && (![JSON1[@"landMark"] isKindOfClass:[NSNull class]]&& [JSON1[@"landMark"] length] > 0))
                        landMarkTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"landMark"]];
                    else if(landMarkTxt != nil)
                        landMarkTxt.text = @"";
                    
                    if((lastNameTxt != nil) && (![JSON1[@"lastName"] isKindOfClass:[NSNull class]]&& [JSON1[@"lastName"] length] > 0))
                        lastNameTxt.text = [NSString stringWithFormat:@"%@",JSON1[@"lastName"]];
                    else if(lastNameTxt != nil)
                        lastNameTxt.text = @"";
                    
                    //added by Srinivasulu on 12/08/2017....
                    
                    customerGstinStr = [self checkGivenValueIsNullOrNil:[JSON1 valueForKey:CUSTOMER_GSTIN] defaultReturn:@""];
                    customerMemberShipStatus = [[self checkGivenValueIsNullOrNil:[JSON1 valueForKey:IS_MEMBERSHIP_CUSTOMER] defaultReturn:@"0"] boolValue];
                    
                    //upto here on 12/08/2017....
                    
                    //upto here on 03/05/2017....
                    
                    //NSString *temp1 = [temp objectAtIndex:1];
                    billCustomerName = [JSON1[@"name"] copy];
                    [savebtn setTitle:@"Update" forState:UIControlStateNormal];
                }
                
            }
            
            //changed by Srinivasulu on 04/12/2017....
            //reason -- changed the deceleation outside the block....
            if( !(streettext.text).length && !(locltytext.text).length &&  !(citytext.text).length && !(pintext.text).length){
                
                NSUserDefaults * custDefaults  = [[NSUserDefaults alloc] init];
                
                
                streettext.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_AREA] defaultReturn:@""];
                locltytext.text = presentLocation;
                if(landMarkTxt != nil)
                    landMarkTxt.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_LANDMARK] defaultReturn:@""];
                citytext.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_CITY] defaultReturn:@""];
                //                                streettext.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_STATE] defaultReturn:@""];
                pintext.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_PIN] defaultReturn:@""];
                
                if(addressTxt1 != nil && addressTxt2 != nil &&  addressTxt3 != nil && addressTxt3 != nil){
                    
                    addressTxt2.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_AREA] defaultReturn:@""];
                    addressTxt4.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_CITY] defaultReturn:@""];
                    
                    addressTxt5.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_LANDMARK] defaultReturn:@""];
                    addressTxt6.text = [self checkGivenValueIsNullOrNil:[custDefaults objectForKey:CUSTOMER_DEFAULT_PIN] defaultReturn:@""];
                }
            }
            //upto here on 04/12/2017....
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}




#pragma -mark keyboard notification methods

/**
 * @description  called when keyboard is displayed
 * @date         10/08/2017
 * @method       keyboardWillShow
 * @author       Srinivasulu
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)keyboardWillShow {
    // Animate the current view out of the way
    @try {
        [self setViewMovedUp:YES];
        
    } @catch (NSException *exception) {
        NSLog(@"-------exception while changing frame self.view---------%@",exception);
        
    }
}

/**
 * @description  called when keyboard is dismissed
 * @date         10/08/2017
 * @method       keyboardWillHide
 * @author       Srinivasulu
 * @param
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)keyboardWillHide {
    @try {
        [self setViewMovedUp:NO];
        
    } @catch (NSException *exception) {
        NSLog(@"-------exception while changing frame self.view---------%@",exception);
        
    }
}

/**
 * @description  method to move the view up/down whenever the keyboard is shown/dismissed
 * @date         10/08/2017
 * @method       setViewMovedUp
 * @author       Srinivasulu
 * @param        BOOL
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)setViewMovedUp:(BOOL)movedUp
{
    @try {
        
        [UIView beginAnimations:nil context:NULL];
        [UIView setAnimationDuration:0.3]; // if you want to slide up the view
        
        CGRect rect = self.view.frame;
        
        //    CGRect rect = scrollView.frame;
        
        if (movedUp)
        {
            // 1. move the view's origin up so that the text field that will be hidden come above the keyboard
            rect.origin.y = (rect.origin.y -(rect.origin.y + offSetViewTo));
        }
        else
        {
            // revert back to the normal state.
            rect.origin.y +=  offSetViewTo;
        }
        self.view.frame = rect;
        //   scrollView.frame = rect;
        
        [UIView commitAnimations];
        
        /* offSetViewTo = 80;
         [self keyboardWillShow];*/
        
    } @catch (NSException *exception) {
        NSLog(@"-------exception while changing frame self.view---------%@",exception);
    } @finally {
        
    }
    
}

#pragma -mark start of UITextViewDelegate methods.....


/**
 * @description  it is an textFieldDelegate method it will be executed when text Begin edititng........
 * @date
 * @method       textViewDidBeginEditing:
 * @author
 * @param        UITextView
 * @param
 * @param
 * @return
 *
 * @modified By  Srinivasulu on 10/08/2017....
 * @reason       added the comment's....
 *
 * @verified By
 * @verified On
 *
 */

-(void)textViewDidBeginEditing:(UITextView *)textView {
    
    @try {
        
        offSetViewTo = textView.frame.origin.y - textView.frame.size.height;
        
        [self keyboardWillShow];
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  it is an textFieldDelegate method it will be executed when text Begin edititng........
 * @date
 * @method       textView:-- shouldChangeTextInRange:-- replacementText:--
 * @author
 * @param        UITextView
 * @param        NSRange
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu on 10/08/2017....
 * @reason       added the comment's....
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
    
    return YES;
}

/**
 * @description  it is an textFieldDelegate method it will be executed when text Begin edititng........
 * @date
 * @method       textViewDidEndEditing:
 * @author
 * @param        UITextView
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 10/08/2017....
 * @reason       added the comment's....
 *
 * @verified By
 * @verified On
 *
 */

-(void)textViewDidEndEditing:(UITextView *)textView {
    
    @try {
        
        [self keyboardWillHide];
        offSetViewTo = 0;
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  here we are froming and dispalying the display EditPrice reasons....
 * @date         06/09/2017....
 * @method       showListOfPriceEditReasons:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showListOfPriceEditReasons:(UIButton *)sender{
    
    @try {
        
        if (isPriceEditableArr.count > 0 && ![isPriceEditableArr[sender.tag] boolValue] && !isOfflineService) {
            
            float y_axis = self.view.frame.size.height/2;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"price_edit_is_not_allowed", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
            return;
        }
        
        if(editPriceReasonArr == nil ||  editPriceReasonTbl == nil){
            
            editPriceReasonArr = [NSMutableArray arrayWithObjects:NSLocalizedString(@"in_correct_price", nil),NSLocalizedString(@"price_is_not_upto_date", nil),NSLocalizedString(@"no_price_information", nil), nil];
            
            
            //editPriceReasonTbl table creation....
            editPriceReasonTbl = [[UITableView alloc] init];
            editPriceReasonTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            editPriceReasonTbl.dataSource = self;
            editPriceReasonTbl.delegate = self;
            (editPriceReasonTbl.layer).borderWidth = 1.0f;
            editPriceReasonTbl.layer.cornerRadius = 3;
            editPriceReasonTbl.layer.borderColor = [UIColor grayColor].CGColor;
            
        }
        
        
        float tableHeight = editPriceReasonArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = editPriceReasonArr.count * 33;
        
        if(editPriceReasonArr.count > 5)
            tableHeight = (tableHeight/editPriceReasonArr.count) * 5;
        
        [self showPopUpForTables:editPriceReasonTbl  popUpWidth:itemEditPriceReasonTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:itemEditPriceReasonTxt  showViewIn:editItemDetailsView permittedArrowDirections:UIPopoverArrowDirectionUp];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are froming and dispalying the display EditPrice reasons....
 * @date         06/09/2017....
 * @method       showListOfItemVoidReasons:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showListOfItemVoidReasons:(UIButton *)sender{
    
    @try {
        
        if(isVoidItemArr == nil ||  itemVoidReasonsArr == nil){
            
            isVoidItemArr = [NSMutableArray arrayWithObjects:NSLocalizedString(@"yes", nil),NSLocalizedString(@"no", nil), nil];
            
            itemVoidReasonsArr = [NSMutableArray arrayWithObjects:NSLocalizedString(@"change_mind",nil),NSLocalizedString(@"defective", nil), nil];
            
            //Change Mind
            //Defective
            
            //Insufficient Money
            //Failed Card Payment
        }
        
        voidItemReasonsTbl.tag = sender.tag;
        
        int disPlayCountSize = isVoidItemArr.count;
        if(voidItemReasonsTbl.tag  == 4){
            
            //commented by Srinivasulu on 08/09/2017.....
            //reason for temperory solutions....
            
            //            if((![isItemVoidTxt.text length])  || [isItemVoidTxt.text isEqualToString:[isVoidItemArr objectAtIndex:1]] ){
            //
            //                float y_axis = self.view.frame.size.height - 350;
            //
            //                NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"please_void_the_item_first", nil)];
            //
            //                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            //
            //                return;
            //            }
            
            
            disPlayCountSize = (int)itemVoidReasonsArr.count;
            
        }
        
        float tableHeight = disPlayCountSize * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = disPlayCountSize * 33;
        
        if(disPlayCountSize > 5)
            tableHeight = (tableHeight/disPlayCountSize) * 5;
        
        if(voidItemReasonsTbl.tag  == 2)
            
            [self showPopUpForTables:voidItemReasonsTbl  popUpWidth:isItemVoidTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:isItemVoidTxt  showViewIn:editItemDetailsView permittedArrowDirections:UIPopoverArrowDirectionUp];
        
        else
            
            [self showPopUpForTables:voidItemReasonsTbl  popUpWidth:itemVoidReasonTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:itemVoidReasonTxt  showViewIn:editItemDetailsView permittedArrowDirections:UIPopoverArrowDirectionAny];
        
    } @catch (NSException *exception) {
        
        float y_axis = self.view.frame.size.height - 350;
        
        NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"unable_to_display_reasons", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @finally {
        
    }
    
}



/**
 * @description  here we are froming and dispalying the display EditPrice reasons....
 * @date         07/09/2017....
 * @method       showListOfItemCancelReasons:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showListOfItemCancelReasons:(UIButton *)sender{
    
    @try {
        
        if(itemCancelReasonsTbl == nil ||  itemCancelReasonArr == nil){
            
            //itemCancelReasonsTbl table creation....
            itemCancelReasonsTbl = [[UITableView alloc] init];
            itemCancelReasonsTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            itemCancelReasonsTbl.dataSource = self;
            itemCancelReasonsTbl.delegate = self;
            (itemCancelReasonsTbl.layer).borderWidth = 1.0f;
            itemCancelReasonsTbl.layer.cornerRadius = 3;
            itemCancelReasonsTbl.layer.borderColor = [UIColor grayColor].CGColor;
            
            itemCancelReasonArr = [NSMutableArray arrayWithObjects:NSLocalizedString(@"insufficient_money", nil),NSLocalizedString(@"failed_card_payment", nil), nil];
        }
        
        itemCancelReasonsTbl.tag = sender.tag;
        
        int disPlayCountSize = itemCancelReasonArr.count;
        
        float tableHeight = disPlayCountSize * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = disPlayCountSize * 33;
        
        if(disPlayCountSize > 5)
            tableHeight = (tableHeight/disPlayCountSize) * 5;
        
        [self showPopUpForTables:itemCancelReasonsTbl  popUpWidth:itemCancelReasonTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:itemCancelReasonTxt  showViewIn:cancelBillView permittedArrowDirections:UIPopoverArrowDirectionUp];
        
    } @catch (NSException *exception) {
        
        float y_axis = self.view.frame.size.height - 350;
        
        NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"unable_to_display_reasons", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @finally {
        
    }
    
}

/**
 * @description  here we are froming and dispalying the display EditPrice reasons....
 * @date         07/09/2017....
 * @method       showListOfItemCancelReasons:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)cancelTheBillWithReason:(UIButton *)sender{
    
    @try {
        
        if(isEnforceBillCancelReason && (!(itemCancelReasonTxt.text).length)){
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"please_select_the_cancelled_reason", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
            [alert show];
            //return;
        }
        else
            [self eraseEntireDetails];
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}


#pragma -mark void items reason....

/**
 * @description  here we are ....
 * @date         08/09/2017....
 * @method       showVoidItemReasonView:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showVoidItemReasonView:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        transperentView = [[UIView alloc] init];
        transperentView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.7];
        
        //UILabel used for displaying header information...
        UILabel * headerlabel;
        UIButton * closeBtn;
        
        UILabel * itemVoidReasonLbl;
        UILabel * selectItemVoidReasonLbl;
        
        UIImage * image;
        
        UIButton * selectItemVoidReasonBtn;
        UIImage * buttonImageDD;
        
        
        UIButton * yesBtn;
        UIButton * cancelBtn;
        
        editItemDetailsView = [[UIView alloc] init];
        editItemDetailsView.opaque = NO;
        editItemDetailsView.backgroundColor = [UIColor blackColor];
        editItemDetailsView.layer.borderColor = [UIColor lightGrayColor].CGColor;
        editItemDetailsView.layer.borderWidth = 2.0f;
        
        headerlabel = [[UILabel alloc] init];
        headerlabel.textColor = [UIColor whiteColor];
        headerlabel.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        headerlabel.textAlignment = NSTextAlignmentCenter;
        
        
        // close button to close the view ..
        image = [UIImage imageNamed:@"delete.png"];
        
        closeBtn = [[UIButton alloc] init] ;
        [closeBtn addTarget:self action:@selector(closeEditItemDetailsView:) forControlEvents:UIControlEventTouchUpInside];
        
        
        [closeBtn setBackgroundImage:image    forState:UIControlStateNormal];
        
        
        
        //creation of UILabel used in page....
        itemVoidReasonLbl = [[UILabel alloc] init];
        itemVoidReasonLbl.textColor = [UIColor whiteColor];
        itemVoidReasonLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemVoidReasonLbl.textAlignment = NSTextAlignmentLeft;
        
        selectItemVoidReasonLbl = [[UILabel alloc] init];
        selectItemVoidReasonLbl.textColor = [UIColor whiteColor];
        selectItemVoidReasonLbl.font = [UIFont boldSystemFontOfSize:18.0];
        selectItemVoidReasonLbl.textAlignment = NSTextAlignmentLeft;
        
        
        itemVoidReasonTxt = [[UITextField alloc] init];
        itemVoidReasonTxt.borderStyle = UITextBorderStyleNone;
        itemVoidReasonTxt.borderStyle = UITextBorderStyleRoundedRect;
        itemVoidReasonTxt.textColor = [UIColor blackColor];
        itemVoidReasonTxt.backgroundColor = [UIColor whiteColor];
        
        
        buttonImageDD = [UIImage imageNamed:@"combo.png"];
        
        selectItemVoidReasonBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [selectItemVoidReasonBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
        [selectItemVoidReasonBtn addTarget:self
                                    action:@selector(showListOfItemVoidReasons:) forControlEvents:UIControlEventTouchDown];
        selectItemVoidReasonBtn.tag = 4;
        
        
        yesBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [yesBtn addTarget:self action:@selector(voidTheItemWithReason:) forControlEvents:UIControlEventTouchDown];
        yesBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
        yesBtn.backgroundColor = [UIColor grayColor];
        yesBtn.tag = sender.tag;
        
        
        cancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [cancelBtn addTarget:self  action:@selector(closeEditItemDetailsView:) forControlEvents:UIControlEventTouchDown];
        cancelBtn.backgroundColor = [UIColor grayColor];
        
        yesBtn.tag = sender.tag;
        cancelBtn.tag = sender.tag;
        
        
        //here we are populating text into UILabels and UITextFields....
        @try {
            
            headerlabel.text = NSLocalizedString(@"item_void_reason", nil);
            
            itemVoidReasonLbl.text  = NSLocalizedString(@"do_you_want_to_void_the_item_?", nil);
            selectItemVoidReasonLbl.text  = NSLocalizedString(@"select_reason_:", nil);
            
            itemVoidReasonTxt.userInteractionEnabled = NO;
            itemVoidReasonTxt.placeholder = NSLocalizedString(@"reason", nil);
            
            [yesBtn setTitle:NSLocalizedString(@"yes", nil) forState:UIControlStateNormal];
            [cancelBtn setTitle:NSLocalizedString(@"no", nil) forState:UIControlStateNormal];
            
        } @catch (NSException *exception) {
            
        }
        
        
        
        [editItemDetailsView addSubview:headerlabel];
        [editItemDetailsView addSubview:closeBtn];
        
        [editItemDetailsView addSubview:itemVoidReasonLbl];
        [editItemDetailsView addSubview:selectItemVoidReasonLbl];
        
        [editItemDetailsView addSubview:itemVoidReasonTxt];
        [editItemDetailsView addSubview:selectItemVoidReasonBtn];
        
        [editItemDetailsView addSubview:yesBtn];
        [editItemDetailsView addSubview:cancelBtn];
        
        [transperentView addSubview:editItemDetailsView];
        
        [self.view addSubview:transperentView];
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                
            }
            else{
            }
            
            transperentView.frame = self.view.frame;
            
            headerlabel.frame = CGRectMake(0, 0, 500, 50);
            
            
            closeBtn.frame =  CGRectMake( headerlabel.frame.size.width - 60, 0, 50, 50);
            
            //first row frames....
            itemVoidReasonLbl.frame =  CGRectMake( 20, headerlabel.frame.origin.y + headerlabel.frame.size.height + 10, headerlabel.frame.size.width, 40);
            
            selectItemVoidReasonLbl.frame = CGRectMake( 20, itemVoidReasonLbl.frame.origin.y + itemVoidReasonLbl.frame.size.height + 10, 200, 40);
            
            itemVoidReasonTxt.frame = CGRectMake( selectItemVoidReasonLbl.frame.origin.x + selectItemVoidReasonLbl.frame.size.width + 10, selectItemVoidReasonLbl.frame.origin.y, 240, selectItemVoidReasonLbl.frame.size.height);
            
            
            selectItemVoidReasonBtn.frame =  CGRectMake( itemVoidReasonTxt.frame.origin.x + itemVoidReasonTxt.frame.size.width - (itemVoidReasonTxt.frame.size.height), itemVoidReasonTxt.frame.origin.y - 6, itemVoidReasonTxt.frame.size.height + 16, itemVoidReasonTxt.frame.size.height + 16);
            
            yesBtn.frame = CGRectMake( (headerlabel.frame.size.width - 300) / 3, itemVoidReasonTxt.frame.origin.y + itemVoidReasonTxt.frame.size.height + 20, 150, 40);
            
            cancelBtn.frame = CGRectMake( 2 * yesBtn.frame.origin.x + yesBtn.frame.size.width, yesBtn.frame.origin.y, yesBtn.frame.size.width, yesBtn.frame.size.height);
            
            
            editItemDetailsView.frame = CGRectMake( (transperentView.frame.size.width - headerlabel.frame.size.width) / 2, (transperentView.frame.size.height - (yesBtn.frame.origin.y +  yesBtn.frame.size.height + 12)) / 2, headerlabel.frame.size.width, yesBtn.frame.origin.y +  yesBtn.frame.size.height + 12);
            
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:editItemDetailsView andSubViews:YES fontSize:22 cornerRadius:0];
            
            headerlabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
            
            yesBtn.titleLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
            cancelBtn.titleLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
            
            
        }
        else{
            
            
            
            
        }
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  here we are froming and dispalying the display EditPrice reasons....
 * @date         07/09/2017....
 * @method       voidTheItemWithReason:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)voidTheItemWithReason:(UIButton *)sender{
    
    @try {
        
        if(isEnforceVoidItemsReason && (!(itemVoidReasonTxt.text).length)){
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"please_select_the_item_void_reason", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
            [alert show];
            //return;
        }
        else
            [self delRow:sender];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}




#pragma -mark methods used offline for getting product related data....

/**
 * @description  In this method we are searchProductDetails existing in same class....
 * @date
 * @method       getSearchedProducts:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 29/09/2017....   and before also....
 * @reason       reason --  added comments, exception handling and SQL related object need to make them as local....
 *
 * @verified By
 * @verified On
 *
 */

-(void)getSearchedProducts:(NSString *)searchString{
    
    @try {
        isSearchingItem = FALSE;
        
        //  [self performSelectorInBackground:@selector(getSearchedProductDetails:) withObject:searchString];
        
        // [HUD showWhileExecuting:@selector(getSearchedProductDetails:) onTarget:self withObject:searchString animated:YES];
        
        [self getSearchedProductDetails:searchString];
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

- (void)getSearchedProductDetails:(NSString *)searchString {
    
    NSString * dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        
        //aded by Srinivasulu on 04/06/2017....
        @try {
            
            
            if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
                
                
                NSString *query = [NSString stringWithFormat:@"select sku_Id,ean,last_cost,short_description from sku_master where sku_id LIKE '%%%@%%' or short_description LIKE '%%%@%%' or ean LIKE '%%%@%%' LIMIT 30",searchString,searchString,searchString];
                
                
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSString  * skuId = @((char *)sqlite3_column_text(selectStmt, 0));
                        
                        
                        //changed by Srinivasulu on 04/08/2017....
                        
                        NSString  * ean  = @"";
                        NSString  * price = @"0.00";
                        
                        if( (char *)sqlite3_column_text(selectStmt,1))
                            ean = @((char *)sqlite3_column_text(selectStmt,1));
                        else
                            ean = @((char *)sqlite3_column_text(selectStmt,0));
                        
                        if( (char *)sqlite3_column_text(selectStmt,2))
                            price = @((char *)sqlite3_column_text(selectStmt,2));
                        
                        //upto here on 04/08/2017....
                        
                        
                        NSString  *name = @((char *)sqlite3_column_text(selectStmt, 3));
                        NSString  *description = @((char *)sqlite3_column_text(selectStmt,3));
                        
                        NSMutableDictionary *searchResult = [[NSMutableDictionary alloc]init];
                        
                        searchResult[@"skuID"] = skuId;
                        searchResult[@"description"] = description;
                        searchResult[@"name"] = name;
                        searchResult[@"price"] = price;
                        searchResult[@"ean"] = ean;
                        
                        
                        [tempSkuArrayList addObject:searchResult];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
            }
            
        } @catch (NSException * exception) {
            
            NSLog(@"%@",exception) ;
            
        } @finally {
            
            sqlite3_close(database);
        }
        
        //upto here on 04/08/2017....
        
        //        if ([tempSkuArrayList count]==0) {
        //            [self getSearchedProductsFromEAN:searchString];
        //        }
        //        if ([tempSkuArrayList count]==0) {
        //            [self getPriceListForSearchString:searchString];
        //        }
        for (NSDictionary *product in tempSkuArrayList)
        {
            NSComparisonResult result;
            if ([product[@"productId"] length]!=0) {
                
                if (!([product[@"productId"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound))
                {
                    result = [product[@"productId"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, (BillField.text).length)];
                    if (result == NSOrderedSame)
                    {
                        if (![filteredSkuArrayList containsObject:product[@"description"]]) {
                            [filteredSkuArrayList addObject:product[@"description"]];
                            //                            if (!isOfflineService) {
                            //
                            //                                [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
                            //
                            //                            }
                            //                            else {
                            [filteredPriceArr addObject:product[@"price"] ];
                            
                            
                            //                            }
                            [skuArrayList addObject:product];
                            
                            
                        }
                    }
                }
            }
            
            if (!([product[@"description"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound)) {
                if (![filteredSkuArrayList containsObject:product[@"description"]]) {
                    [filteredSkuArrayList addObject:product[@"description"]];
                    if (!isOfflineService) {
                        
                        [filteredPriceArr addObject:[product[@"price"] stringValue]];
                        
                    }
                    else {
                        [filteredPriceArr addObject:product[@"price"] ];
                        
                    }
                    [skuArrayList addObject:product];
                    
                }
                
            }
            if (!([product[@"ean"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound)) {
                if (![filteredSkuArrayList containsObject:product[@"description"]]) {
                    [filteredSkuArrayList addObject:product[@"description"]];
                    if (!isOfflineService) {
                        
                        [filteredPriceArr addObject:[product[@"price"] stringValue]];
                        
                    }
                    else {
                        [filteredPriceArr addObject:product[@"price"] ];
                        
                    }
                    [skuArrayList addObject:product];
                    
                }
                
            }
            else {
                
                // [filteredSkuArrayList addObject:[product objectForKey:@"skuID"]];
                
                
                //                                      result = [[product objectForKey:@"skuID"] compare:searchString options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, [searchString length])];
                //
                //                                    if (result == NSOrderedSame)
                //                                    {
                if (![filteredSkuArrayList containsObject:product[@"description"]]) {
                    [filteredSkuArrayList addObject:product[@"description"]];
                    [filteredPriceArr addObject:product[@"price"] ];
                    [skuArrayList addObject:product];
                    //                                        }
                }
            }
            
            
        }
        if (filteredSkuArrayList.count > 0) {
            //changeed By Srinivasulu on 17/08/2016
            
            float cell_height = 45;
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                cell_height = 28;
            }
            
            float table_height = (filteredSkuArrayList.count + 1) * cell_height;
            
            if(table_height > ( segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height))){
                table_height = segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height);
                
            }
            skListTable.frame =  CGRectMake(BillField.frame.origin.x, (BillField.frame.origin.y + BillField.frame.size.height), BillField.frame.size.width, table_height);
            
            //            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            //                skListTable.frame = CGRectMake(5, 200, 560,240);
            //            }
            //            else {
            //                if (version >= 8.0) {
            //                    skListTable.frame = CGRectMake(40, 145, 350,180);
            //                }
            //                else{
            //                    skListTable.frame = CGRectMake(20, 75, 350,100);
            //                }
            //            }
            //
            //            if ([filteredSkuArrayList count] > 5) {
            //                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            //                    skListTable.frame = CGRectMake(5, 200, 560,450);
            //                }
            //                else {
            //                    if (version >= 8.0) {
            //                        skListTable.frame = CGRectMake(40, 145, 350,180);
            //                    }
            //                    else{
            //                        skListTable.frame = CGRectMake(20, 75, 350,130);
            //                    }
            //                }
            //            }
            skListTable.hidden = NO;
            [self.view bringSubviewToFront:skListTable];
            [skListTable reloadData];
        }
        
        else {
            
            skListTable.hidden = YES;
        }
        isSearchingItem = TRUE;
        [HUD setHidden: YES];
        [textFieldSpinner stopAnimating];
        // [BillField becomeFirstResponder];
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        [HUD setHidden:YES];
    } @finally {
        [HUD setHidden: YES];
        
    }
    
    
}

-(void)getSearchedProductsFromEAN:(NSString *)searchString {
    NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
    
    @try {
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            
            NSString *query = [NSString stringWithFormat:@"select * from sku_eans where ean LIKE '%%%@%%' LIMIT 30",searchString];
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                
                if (selectStmt != NULL) {
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSString  *skuId = @((char *)sqlite3_column_text(selectStmt, 1));
                        [self getSearchedProductDetails:skuId];
                    }
                    
                }
                //                        int count = sqlite3_column_count(selectStmt);
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            sqlite3_finalize(selectStmt);
        }
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
        
        
    } @finally {
        
        sqlite3_close(database);
        
        
    }
}



#pragma -mark methods modified by Srinivasulu from 24/10/2017....

/**
 * @description  ....
 * @date
 * @method       searchProducts
 * @author
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 24/10/2017....
 * @reason       added comments and exception handling and This method may not be in used after priceList search changes are done....
 *
 * @verified By
 * @verified On
 *
 */

-(void)searchProducts {
    
    @try {
        
        //[HUD_ showWhileExecuting:@selector() onTarget:self withObject:nil animated:YES];
        
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        filteredSkuArrayList = [[NSMutableArray alloc]init];
        skuArrayList = [[NSMutableArray alloc]init];
        filteredPriceArr = [[NSMutableArray alloc]init];
        if (tempSkuArrayList.count!=0) {
            [tempSkuArrayList removeAllObjects];
        }
        
        if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
            
            
            //        NSString *query = [NSString stringWithFormat:@"select * from sku_master where sku_id LIKE '%%%@%%' or item_name LIKE '%%%@%%' or description LIKE '%%%@%%' or ean LIKE '%%%@%%' LIMIT 30",BillField.text,BillField.text,BillField.text,BillField.text];
            
            
            
            NSString *query = [NSString stringWithFormat:@"select sku_Id,ean,last_cost,short_description  from sku_master where sku_id LIKE '%%%@%%' LIMIT 30",BillField.text];
            
            const char *sqlStatement = query.UTF8String;
            
            
            if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                
                NSLog(@"%@",[NSDate date]);
                
                //                        int count = sqlite3_column_count(selectStmt);
                while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                    
                    NSString  *skuId = @((char *)sqlite3_column_text(selectStmt, 0));
                    NSString  *name = @((char *)sqlite3_column_text(selectStmt, 3));
                    NSString  *description = @((char *)sqlite3_column_text(selectStmt, 3));
                    //                NSString  *price = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 2)];
                    //                NSString  *ean = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 1)];
                    
                    //changed by Srinivasulu on 04/08/2017....
                    NSString  * ean  = @"";
                    NSString  * price = @"0.00";
                    
                    if( (char *)sqlite3_column_text(selectStmt,1))
                        ean = @((char *)sqlite3_column_text(selectStmt,1));
                    else
                        ean = @((char *)sqlite3_column_text(selectStmt,0));
                    
                    if( (char *)sqlite3_column_text(selectStmt,2))
                        price = @((char *)sqlite3_column_text(selectStmt,2));
                    
                    //upto here on 04/08/2017....
                    
                    NSMutableDictionary *searchResult = [[NSMutableDictionary alloc]init];
                    
                    searchResult[@"skuID"] = skuId;
                    searchResult[@"description"] = description;
                    searchResult[@"name"] = name;
                    searchResult[@"price"] = price;
                    searchResult[@"ean"] = ean;
                    
                    
                    [tempSkuArrayList addObject:searchResult];
                    
                    
                }
                sqlite3_finalize(selectStmt);
                
                NSLog(@"%@",[NSDate date]);
                
            }
            else {
                NSLog(@"%s",sqlite3_errmsg(database)) ;
            }
            
            NSLog(@"%@",tempSkuArrayList);
        }
        sqlite3_close(database);
        if (tempSkuArrayList.count==0) {
            
            if(sqlite3_open(dbPath.UTF8String, &database) == SQLITE_OK) {
                
                //-*-*--5
                NSString *query = [NSString stringWithFormat:@"select * from sku_price_list where sku_status == 1 and plu_code LIKE '%%%@%%' LIMIT 30",BillField.text];
                const char *sqlStatement = query.UTF8String;
                
                
                if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
                    //                        int count = sqlite3_column_count(selectStmt);
                    while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                        
                        NSString  *skuId = @((char *)sqlite3_column_text(selectStmt,0));
                        NSString  *name = @((char *)sqlite3_column_text(selectStmt, 2));
                        NSString  *description = @((char *)sqlite3_column_text(selectStmt, 2));
                        
                        
                        
                        //changed by Srinivasulu on 12/08/2017....
                        //                    NSString  *price = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt,4)];
                        //                    NSString  *ean = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 3)];
                        
                        
                        NSString  * ean  = @"";
                        NSString  * price = @"0.00";
                        
                        if( (char *)sqlite3_column_text(selectStmt,3))
                            ean = @((char *)sqlite3_column_text(selectStmt,3));
                        else
                            ean = @((char *)sqlite3_column_text(selectStmt,0));
                        
                        if( (char *)sqlite3_column_text(selectStmt,4))
                            price = @((char *)sqlite3_column_text(selectStmt,4));
                        
                        //upto here on 12/08/2017....
                        
                        NSMutableDictionary *searchResult = [[NSMutableDictionary alloc]init];
                        
                        searchResult[@"skuID"] = skuId;
                        searchResult[@"description"] = description;
                        searchResult[@"name"] = name;
                        searchResult[@"price"] = price;
                        searchResult[@"ean"] = ean;
                        
                        
                        [tempSkuArrayList addObject:searchResult];
                        
                        
                    }
                    sqlite3_finalize(selectStmt);
                }
                else {
                    NSLog(@"%s",sqlite3_errmsg(database)) ;
                }
                
                NSLog(@"%@",tempSkuArrayList);
            }
            sqlite3_close(database);
            
        }
        for (NSDictionary *product in tempSkuArrayList)
        {
            //Below line commented by Srinivasulu on 25/10/2017....
            //reason is -- in order to remove the warning due to unused variable....
            
            //            NSComparisonResult result;
            //                    if ([[product objectForKey:@"productId"] length]!=0) {
            //
            //                        if (!([[product objectForKey:@"productId"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound))
            //                        {
            //                            result = [[product objectForKey:@"productId"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, [BillField.text length])];
            //                            if (result == NSOrderedSame)
            //                            {
            //                                if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
            //                                    [filteredSkuArrayList addObject:[product objectForKey:@"description"]];
            //                                    if (!isOfflineService) {
            //
            //                                        [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
            //
            //                                    }
            //                                    else {
            //                                        [filteredPriceArr addObject:[product objectForKey:@"price"] ];
            //
            //                                    }                                [skuArrayList addObject:product];
            //
            //                                }
            //                            }
            //                        }
            //                    }
            
            //                    if (!([[product objectForKey:@"description"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound)) {
            //                        if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
            //                            [filteredSkuArrayList addObject:[product objectForKey:@"description"]];
            //                            if (!isOfflineService) {
            //
            //                                [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
            //
            //                            }
            //                            else {
            //                                [filteredPriceArr addObject:[product objectForKey:@"price"] ];
            //
            //                            }
            //                            [skuArrayList addObject:product];
            //
            //                        }
            //
            //                    }
            //                    if (!([[product objectForKey:@"ean"] rangeOfString:searchString options:NSCaseInsensitiveSearch].location == NSNotFound)) {
            //                        if (![filteredSkuArrayList containsObject:[product objectForKey:@"description"]]) {
            //                            [filteredSkuArrayList addObject:[product objectForKey:@"description"]];
            //                            if (!isOfflineService) {
            //
            //                                [filteredPriceArr addObject:[[product objectForKey:@"price"] stringValue]];
            //
            //                            }
            //                            else {
            //                                [filteredPriceArr addObject:[product objectForKey:@"price"] ];
            //
            //                            }
            //                            [skuArrayList addObject:product];
            //
            //                        }
            //
            //                    }
            //                    else {
            
            // [filteredSkuArrayList addObject:[product objectForKey:@"skuID"]];
            
            
            //  result = [[product objectForKey:@"skuID"] compare:BillField.text options:(NSCaseInsensitiveSearch|NSDiacriticInsensitiveSearch) range:NSMakeRange(0, [BillField.text length])];
            
            //                        if (result == NSOrderedSame)
            //                        {
            if (![filteredSkuArrayList containsObject:product[@"description"]]) {
                [filteredSkuArrayList addObject:product[@"description"]];
                [filteredPriceArr addObject:product[@"price"] ];
                [skuArrayList addObject:product];
            }
            //                        }
            //                    }
            
            
        }
        if (filteredSkuArrayList.count > 0) {
            
            //changeed By Srinivasulu on 17/08/2016
            
            float cell_height = 45;
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                cell_height = 28;
            }
            
            float table_height = (filteredSkuArrayList.count + 1) * cell_height;
            
            if(table_height > ( segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height))){
                table_height = segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height);
                
            }
            skListTable.frame =  CGRectMake(BillField.frame.origin.x, (BillField.frame.origin.y + BillField.frame.size.height), BillField.frame.size.width, table_height);
            
            
            //                    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            //                        skListTable.frame = CGRectMake(5, 200, 810,240);
            //                    }
            //                    else {
            //                        if (version >= 8.0) {
            //                            skListTable.frame = CGRectMake(40, 145, 350,180);
            //                        }
            //                        else{
            //                            skListTable.frame = CGRectMake(20, 75, 350,100);
            //                        }
            //                    }
            //
            //                    if ([filteredSkuArrayList count] > 5) {
            //                        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            //                            skListTable.frame = CGRectMake(15, 200, 560,450);
            //                        }
            //                        else {
            //                            if (version >= 8.0) {
            //                                skListTable.frame = CGRectMake(40, 145, 350,180);
            //                            }
            //                            else{
            //                                skListTable.frame = CGRectMake(20, 75, 350,130);
            //                            }
            //                        }
            //                    }
            
            
            //upto here
            
            skListTable.hidden = NO;
            [self.view bringSubviewToFront:skListTable];
            [skListTable reloadData];
        }
        
        else {
            
            skListTable.hidden = YES;
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  ....
 * @date
 * @method       getPriceListForSearchString:--
 * @author
 * @param        NSString
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 24/10/2017....
 * @reason       added comments and exception handling and changing the search to priceList....
 *
 * @verified By
 * @verified On
 *
 */

-(void)getPriceListForSearchString:(NSString *)searchString{
    
    @try {
        NSString* dbPath = [DataBaseConnection connection:@"RetailerBillingDataBase.sqlite"];
        
        static sqlite3 * localDatabase = nil;
        static sqlite3_stmt * localSelectStmt = nil;
        
        if(sqlite3_open(dbPath.UTF8String, &localDatabase) == SQLITE_OK) {
            
            //-*-*--5 --  sku_status == 1
            NSString * query = [NSString stringWithFormat:@"select sku_id, description, ean, sale_price, quantity_in_hand, color, size, measure_range,plu_code from sku_price_list where sku_status == 1 and (plu_code LIKE '%%%@%%' or sku_id LIKE '%%%@%%' or description LIKE '%%%@%%' or ean  LIKE '%%%@%%') LIMIT 30",searchString,searchString,searchString,searchString];
            const char *sqlStatement = query.UTF8String;
            
            if(sqlite3_prepare_v2(localDatabase, sqlStatement, -1, &localSelectStmt, NULL) == SQLITE_OK) {
                
                if (localSelectStmt != NULL) {
                    
                    //                        int count = sqlite3_column_count(localSelectStmt);
                    while (sqlite3_step(localSelectStmt) == SQLITE_ROW) {
                        
                        NSString  * skuIdStr = @"";
                        NSString  * descriptionStr = @"";
                        NSString  * eanStr  = @"";
                        NSString  * priceStr = @"0.00";
                        NSString  * quntityStr = @"0.00";
                        NSString  * colorStr = @"";
                        NSString  * sizeStr = @"";
                        NSString  * measureRangeStr = @"";
                        NSString  * plucodeStr = @"";
                        
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,0))
                            skuIdStr = @((char *)sqlite3_column_text(localSelectStmt,0));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,1))
                            descriptionStr = @((char *)sqlite3_column_text(localSelectStmt,1));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,2))
                            eanStr = @((char *)sqlite3_column_text(localSelectStmt,2));
                        else
                            eanStr = skuIdStr;
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,3))
                            priceStr = @((char *)sqlite3_column_text(localSelectStmt,3));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,4))
                            quntityStr = @((char *)sqlite3_column_text(localSelectStmt,4));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,5))
                            colorStr = @((char *)sqlite3_column_text(localSelectStmt,5));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,6))
                            sizeStr = @((char *)sqlite3_column_text(localSelectStmt,6));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,7))
                            measureRangeStr = @((char *)sqlite3_column_text(localSelectStmt,7));
                        
                        if( (char *)sqlite3_column_text(localSelectStmt,8))
                            plucodeStr = @((char *)sqlite3_column_text(localSelectStmt,8));
                        
                        
                        
                        
                        NSMutableDictionary *searchResult = [[NSMutableDictionary alloc]init];
                        //  QUANTITY_IN_HAND -- COLOR -- SIZE --  MEASUREMENT_RANGE
                        
                        searchResult[SKUID] = skuIdStr;
                        searchResult[ITEM_DESCRIPTION] = descriptionStr;
                        searchResult[ITEM_UNIT_PRICE] = priceStr;
                        searchResult[EAN] = eanStr;
                        searchResult[QUANTITY_IN_HAND] = quntityStr;
                        searchResult[COLOR] = colorStr;
                        searchResult[SIZE] = sizeStr;
                        searchResult[MEASUREMENT_RANGE] = measureRangeStr;
                        searchResult[PLU_CODE] = plucodeStr;
                        
                        [tempSkuArrayList addObject:searchResult];
                    }
                }
                
                sqlite3_finalize(localSelectStmt);
            }
            else {
                
                NSLog(@"%s",sqlite3_errmsg(localDatabase)) ;
            }
            
            sqlite3_close(localDatabase);
        }
        
    } @catch (NSException *exception) {
        
        [HUD setHidden:YES];
    } @finally {
        
        @try{
            
            for(NSDictionary * tempDic in tempSkuArrayList){
                
                [filteredSkuArrayList addObject:tempDic[ITEM_DESCRIPTION]];
                [filteredPriceArr addObject:tempDic[ITEM_UNIT_PRICE] ];
                [skuArrayList addObject:tempDic];
            }
            
            if (filteredSkuArrayList.count > 0) {
                
                float cell_height = 45;
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                    
                    cell_height = 28;
                }
                
                float table_height = (filteredSkuArrayList.count + 1) * cell_height;
                
                if(table_height > ( segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height))){
                    
                    table_height = segmentedControl.frame.origin.y - (BillField.frame.origin.y + BillField.frame.size.height);
                }
                
                skListTable.frame =  CGRectMake( BillField.frame.origin.x, (BillField.frame.origin.y + BillField.frame.size.height), BillField.frame.size.width, table_height);
                
                skListTable.hidden = NO;
                [self.view bringSubviewToFront:skListTable];
                [skListTable reloadData];
                [HUD setHidden:YES];
            }
            else {
                
                //added by Srinivasulu on 28/08/2018....
                if(isHybirdCallFailed){
                    isHybirdCallFailed = false;
                    
                    if(BillField.tag == 2)
                        [self textFieldDidChange:BillField];
                }
                
                skListTable.hidden = YES;
                [HUD setHidden:YES];
            }
        } @catch (NSException *exception) {
            
        }
        
    }
}

/**
 * @description  here we are accessing the offline DB and getting prodcut details based on skuID or plucode from DB....
 * @date         01/12/2017
 * @method       getOfflineProductWithSearchSkuId:--
 * @author
 * @param        NSString
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 01/12/2017....
 * @reason       added the new parameter withPlucode:--
 *
 * @verified By
 * @verified On
 *
 */

-(void)getOfflineProductWithSearchSkuId:(NSString *)skuID  withPlucode:(NSString *)pluCodeStr{
    Boolean isToCallOnlineAgain = false;
    @try {
        
        offline = [[OfflineBillingServices alloc]init];
        priceDic = [[NSMutableArray alloc]init];
        
        if(!pluCodeStr.length)
            pluCodeStr = skuID;
        
        NSDictionary * itemDic = [offline getProductDetails:[NSString stringWithFormat:@"%@",skuID] isEanSearch:isBarcodeType];
        
        if (itemDic.count>0) {
            
            //get the product category and sub-category.... commented by Srinivasulu on 08/03/2018.. b/z now we are retriving them from skuMaster itself....
            //            NSDictionary * productInfoDic = [offline getProductCategory:[itemDic valueForKey:kProductId]];
            
            NSMutableArray * taxRate = [offline getTaxForSku:[NSString stringWithFormat:@"%@",[itemDic valueForKey:@"taxCode"]]];
            
            NSString * itemString = @"";
            
            
            priceDic = [offline getLocalPriceLists:[NSString stringWithFormat:@"%@",pluCodeStr]];
            
            itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@",itemDic[@"description"],@"#",itemDic[@"description"],@"#",[itemDic[@"quantity"] floatValue],@"#",[itemDic[@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
            
            [itemDic setValue:taxRate forKey:@"tax"];
            
            
            //changed by Srinivasulu on 21/02/2018....
            
            
            /*
             selected_SKID = [NSString stringWithFormat:@"%@",[[priceDic objectAtIndex:0] objectForKey:@"skuId"]];
             NSArray *temptaxArr = [[priceDic objectAtIndex:0] valueForKey:@"tax"];
             NSString *itemString = @"";
             if ([temptaxArr count] > 0) {
             
             //sdfasdf
             itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",[[priceDic objectAtIndex:0] objectForKey:@"description"],@"#",[[priceDic objectAtIndex:0] objectForKey:@"description"],@"#",[[[priceDic objectAtIndex:0] objectForKey:@"quantity"] floatValue],@"#",[[[priceDic objectAtIndex:0] objectForKey:@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",[[[[priceDic objectAtIndex:0] objectForKey:@"tax"] objectAtIndex:0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[[[[priceDic objectAtIndex:0] objectForKey:@"tax"] objectAtIndex:0] valueForKey:@"taxRate"] doubleValue]], @"#", [[priceDic objectAtIndex:0] valueForKey:@"pluCode"], @"#", [[[priceDic objectAtIndex:0] valueForKey:@"price"] floatValue]];
             
             
             }
             else {
             itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",[[priceDic objectAtIndex:0] objectForKey:@"description"],@"#",[[priceDic objectAtIndex:0] objectForKey:@"description"],@"#",[[[priceDic objectAtIndex:0] objectForKey:@"quantity"] floatValue],@"#",[[[priceDic objectAtIndex:0] objectForKey:@"price"] floatValue], @"#",[NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00], @"#", [[priceDic objectAtIndex:0] valueForKey:@"pluCode"], @"#", [[[priceDic objectAtIndex:0] valueForKey:@"price"] floatValue]];
             
             }
             
             */
            
            
            //upto here on 21/02/2018....
            
            
            if (taxRate.count>0) {
                
                // [taxArr addObject:taxRate];
                itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[taxRate[0] valueForKey:@"taxRate"] floatValue]];
            }
            else {
                
                //[taxArr addObject:taxRate];
                itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
            }
            
            
            if (priceDic.count > 1) {
                
                [HUD setHidden:YES];
                for (int i=0; i<priceDic.count; i++) {
                    NSString *tax_code = [itemString componentsSeparatedByString:@"#"][4];
                    
                    NSMutableDictionary *dic = [priceDic[i] mutableCopy];
                    [dic setValue:tax_code forKey:@"taxCode"];
                    [dic setValue:taxRate forKey:@"tax"];
                    
                    
                    //commented by Srinivasulu on 24/08/2017....
                    
                    //                    NSString *desc = [[itemString componentsSeparatedByString:@"#"]objectAtIndex:1];
                    
                    //                    [dic setValue:desc forKey:@"description"];
                    
                    //upto here on 24/08/2017...
                    
                    
                    //changed by Srinivasulu on 24/08/2017....
                    
                    //it may produces carsh...
                    //                    [dic setValue:[dic valueForKey:@"description"] forKey:@"description"];
                    
                    
                    //commented by Srinivasulu on same day....
                    //reason this already exist in this dictionary itself.
                    
                    //it doesn't produces any carsh. But  affect the processing time...
                    //                    [dic setValue:[self checkGivenValueIsNullOrNil:[dic valueForKey:kDescription] defaultReturn:@""] forKey:kDescription];
                    
                    
                    //upto here on 24/08/2017....
                    
                    //need to change
                    
                    
                    [dic setValue:[itemDic valueForKey:@"editable"] forKey:@"editable"];
                    [dic setValue:[itemDic valueForKey:kPackagedType] forKey:kPackagedType];
                    [dic setValue:[itemDic valueForKey:kIsManuFacturedItem] forKey:kIsManuFacturedItem];
                    //                    [dic setValue:[productInfoDic valueForKey:kProductCategory] forKey:kProductCategory];
                    //                    [dic setValue:[productInfoDic valueForKey:kProductSubCategory] forKey:kProductSubCategory];
                    [dic setValue:[itemDic valueForKey:kItemTaxExclusive] forKey:kItemTaxExclusive];
                    
                    //added by Srinivasulu on 11/07/2017 && 29/08/2018....
                    [dic setValue:[itemDic valueForKey:kBrand] forKey:kBrand];
                    [dic setValue:[itemDic valueForKey:HSN_CODE] forKey:HSN_CODE];
                    [dic setValue:[itemDic valueForKey:Pack_Size] forKey:Pack_Size];
                    [dic setValue:[itemDic valueForKey:EXPIRY_DATE] forKey:EXPIRY_DATE];
                    [dic setValue:[itemDic valueForKey:SECTION] forKey:SECTION];
                    [dic setValue:[itemDic valueForKey:PATTERN] forKey:PATTERN];
                    [dic setValue:[itemDic valueForKey:kPrimaryDepartment] forKey:kPrimaryDepartment];
                    [dic setValue:[itemDic valueForKey:SECONDARY_DEPARTMENT] forKey:SECONDARY_DEPARTMENT];
                    
                    //added by Srinivasulu on 12/08/2017....
                    // product_class ---------  product_sub_class -- it's from sku_master....
                    // PRODUCT_CLASS ---------  PRODUCT_SUB_CLASS -- it's from sku_priceList....
                    
                    //kProductCategory -- kProductSubCategory -- TAXATION_ON_DISCOUNT_PRICE -- TRACKING_REQUIRED -- added on 08/07/2018....
                    
                    [dic setValue:[itemDic valueForKey:kProductCategory] forKey:kProductCategory];
                    [dic setValue:[itemDic valueForKey:kProductSubCategory] forKey:kProductSubCategory];
                    [dic setValue:[itemDic valueForKey:TAXATION_ON_DISCOUNT_PRICE] forKey:TAXATION_ON_DISCOUNT_PRICE];
                    [dic setValue:[itemDic valueForKey:TRACKING_REQUIRED] forKey:TRACKING_REQUIRED];
                    
                    [dic setValue:[itemDic valueForKey:PRODUCT_CLASS] forKey:PRODUCT_CLASS];
                    
                    
                    //upto here on 11/07/2017....
                    
                    //upto here on11/07/2017....
                    
                    
                    priceDic[i] = dic;
                }
                transparentView.hidden = NO;
                [priceTable reloadData];
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"popup_tune" withExtension: @"mp3"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
                
            }
            else {
                
                [itemDic setValue:[priceDic[0] valueForKey:kProductRange] forKey:kProductRange];
                [itemDic setValue:[priceDic[0] valueForKey:kMeasureRange] forKey:kMeasureRange];
                //                [itemDic setValue:[productInfoDic valueForKey:kProductCategory] forKey:kProductCategory];
                //                [itemDic setValue:[productInfoDic valueForKey:kProductSubCategory] forKey:kProductSubCategory];
                
                //added by Srinivasulu on 11/07/2017....
                
                [itemDic setValue:[priceDic[0] valueForKey:BATCH] forKey:BATCH];
                [itemDic setValue:[priceDic[0] valueForKey:UTILITY] forKey:UTILITY];
                
                
                //upto here on 11/07/2017....
                
                
                //added by Srinivasulu on 12/08/2017....
                // product_class ---------  product_sub_class -- it's from sku_master....
                // PRODUCT_CLASS ---------  PRODUCT_SUB_CLASS -- it's from sku_priceList....
                
                [itemDic setValue:[priceDic[0] valueForKey:PRODUCT_SUB_CLASS] forKey:PRODUCT_SUB_CLASS];
                [itemDic setValue:[priceDic[0] valueForKey:STYLE_RANGE] forKey:STYLE_RANGE];
                
                //upto here on 12/08/2017....
                
                
                if(priceDic.count == 1) {
                    NSMutableDictionary *dic = [priceDic[0] mutableCopy];
                    itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@",dic[@"description"],@"#",dic[@"description"],@"#",[dic[@"quantity"] floatValue],@"#",[dic[@"price"] floatValue], @"#", [NSString stringWithFormat:@"%@",itemDic[@"taxCode"]]];
                    if (taxRate.count>0) {
                        
                        itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[taxRate[0] valueForKey:@"taxRate"] floatValue]];
                    }
                    else {
                        
                        itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",@"0.00"];
                    }
                    itemString = [NSString stringWithFormat:@"%@%@%@",itemString,@"#",[dic valueForKey:PLU_CODE]];
                    selectedPluCode = [[dic valueForKey:PLU_CODE] copy];
                    itemString = [NSString stringWithFormat:@"%@%@%.2f",itemString,@"#",[[dic valueForKey:@"price"] floatValue]];
                }
                //                            if ([[[itemString componentsSeparatedByString:@"#"] objectAtIndex:2] intValue]>=0) {
                
                if (priceDic.count > 0) {
                    selected_desc = [itemString componentsSeparatedByString:@"#"][1];
                    selected_price = [[itemString componentsSeparatedByString:@"#"][3] copy];
                    // [itemScanCode addObject:selected_SKID];
                    [self getSkuDetailsHandler:itemString productInfo:itemDic];
                    NSLog(@"%@",[NSDate date]);
                }
                else {
                    
                    //added by Srinivasulu on 28/08/2018....
                    isToCallOnlineAgain = true;
                    
                    [HUD setHidden:YES];
                    [MBProgressHUD hideHUDForView:self.view animated:YES];
                    UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                    
                }
                
                //                            }
                //                            else {
                //
                //                                [HUD setHidden:YES];
                //                                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Stock Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //                                [alert show];
                //                            }
            }
        }
        else {
            //added by Srinivasulu on 28/08/2018....
            isToCallOnlineAgain = true;
            if (!(isHybirdCallFailed && isHybirdMode && !isOfflineService && isToCallOnlineAgain)){
                
                [HUD setHidden:YES];
                [MBProgressHUD hideHUDForView:self.view animated:YES];
                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
            }
        }
    }
    @catch (NSException *exception) {
        NSLog(@"%@",exception);
        //added by Srinivasulu on 28/08/2018....
        isToCallOnlineAgain = true;
        
        if (!(isHybirdCallFailed && isHybirdMode && !isOfflineService && isToCallOnlineAgain)){
            
            [HUD setHidden:YES];
            [MBProgressHUD hideHUDForView:self.view animated:YES];
            UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Sorry" message:@"Product Not Available" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    @finally{
        [HUD setHidden:YES];
        
        if (isHybirdCallFailed && isHybirdMode && !isOfflineService && isToCallOnlineAgain){
            isHybirdCallFailed = false;
            [self callGetSKUDetailOnline:pluCodeStr];
        }
    }
}

#pragma -mark

/**
 * @description  In this method we are forming the item view along with edit price details....
 * @date
 * @method       populateEditItemDetailsFullView:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Roja on 16/08/2018..
 * @reason       Changes Regards to UPDATED GUI..
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateEditItemDetailsFullView:(UIButton *)sender {
    
    @try {
        
        if ([isVoidedArray[sender.tag] boolValue]) {
            
            [self delRow:sender];
            return;
        }
        
        
        transperentView = [[UIView alloc] init];
        transperentView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.7];
        
        //UILabel used for displaying header information...
        UILabel * headerlabel;
        
        UIButton * closeBtn;
        
        editItemDetailsView = [[UIView alloc] init];
        editItemDetailsView.opaque = NO;
        editItemDetailsView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
        editItemDetailsView.layer.borderColor = [UIColor lightGrayColor].CGColor;
        editItemDetailsView.layer.borderWidth = 2.0f;
        
        
        headerlabel = [[UILabel alloc] init];
        headerlabel.textColor = [UIColor whiteColor];
        headerlabel.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        headerlabel.textAlignment = NSTextAlignmentCenter;
        
        
        // close button to close the view ..
        UIImage *image = [UIImage imageNamed:@"delete.png"];
        
        closeBtn = [[UIButton alloc] init] ;
        [closeBtn addTarget:self action:@selector(closeEditItemDetailsView:) forControlEvents:UIControlEventTouchUpInside];
        
        
        [closeBtn setBackgroundImage:image    forState:UIControlStateNormal];
        
        
        // first row UILabel part
        UILabel * productDeatilsDisplayLbl;
        UILabel * productDeatilsDisplayUnderLineLbl;
        
        
        UILabel * itemSkuIdLbl;
        UILabel * itemSkuIdValueLbl;
        UILabel * itemSkuIdUnderLineLbl;
        
        UILabel * itemDescriptionLbl;
        UILabel * itemDescriptionValueLbl;
        UILabel * itemDescriptionUnderLineLbl;
        
        UILabel * itemTaxRateLbl;
        UILabel * itemTaxRateValueLbl;
        UILabel * itemTaxRateUnderLineLbl;
        
        UILabel * itemSalePriceLbl;
        UILabel * itemSalePriceValueLbl;
        UILabel * itemSalePriceUnderLineLbl;
        
        UILabel * scanCodeLbl;
        UILabel * scanCodeValueLbl;
        UILabel * scanCodeUnderLineLbl;
        
        UILabel * gradeLbl;
        UILabel * gradeValueLbl;
        UILabel * gradeUnderLineLbl;
        
        UILabel * colorLbl;
        UILabel * colorValueLbl;
        UILabel * colorUnderLineLbl;
        
        UILabel * sizeLbl;
        UILabel * sizeValueLbl;
        UILabel * sizeUnderLineLbl;
        
        UILabel * batchLbl;
        UILabel * batchValueLbl;
        UILabel * batchUnderLineLbl;
        
        UILabel * packSizeLbl;
        UILabel * packSizeValueLbl;
        UILabel * packSizeUnderLineLbl;
        
        UILabel * categoryLbl;
        UILabel * categoryValueLbl;
        UILabel * categoryUnderLineLbl;
        
        UILabel * subcategoryLbl;
        UILabel * subcategoryValueLbl;
        UILabel * subcategoryUnderLineLbl;
        
        UILabel * departmentLbl;
        UILabel * departmentUnderLineLbl;
        
        UILabel * subDepartmentLbl;
        UILabel * subDepartmentUnderLineLbl;
        
        UILabel * stockQtyLbl;
        UILabel * stockQtyValueLbl;
        UILabel * stockQtyUnderLineLbl;
        
        // second row UILabel part
        UILabel * manualDiscountDisplayLbl;
        UILabel * itemFlatDiscountLbl;
        UILabel * itemPrecentageDiscountLbl;
        UILabel * manualDiscountDisplayUnderLineLbl;
        UILabel * itemFlatDiscountUnderLineLbl;
        UILabel * itemPrecentageDiscountUnderLineLbl;
        
        
        
        UILabel * editPriceDisplayLbl;
        UILabel * itemMrpLbl;
        UILabel * itemMrpValueLbl;
        UILabel * itemEditedPriceLbl;
        UILabel * itemEditedPriceReasonLbl;
        UILabel * editPriceDisplayUnderLineLbl;
        UILabel * itemEditPriceUnderLineLbl;
        UILabel * itemEditPriceReasonUnderLineLbl;
        
        
        
        // third row UILabel part
        UILabel * salesPersonDisplayLbl;
        UILabel * itemSelectPersonLbl;
        UILabel * salesPersonDisplayUnderLineLbl;
        
        
        UILabel * voidItemDisplayLbl;
        UILabel * isItemVoidLbl;
        UILabel * itemVoidReasonLbl;
        UILabel * voidItemDisplayUnderLineLbl;
        
        
        
        //        UILabel * rightLineLbl_3;
        //        UILabel * rightLineLbl_4;
        //
        
        UILabel * semiColomn_1;
        UILabel * semiColomn_2;
        UILabel * semiColomn_3;
        UILabel * semiColomn_4;
        UILabel * semiColomn_5;
        UILabel * semiColomn_6;
        UILabel * semiColomn_7;
        UILabel * semiColomn_8;
        UILabel * semiColomn_9;
        UILabel * semiColomn_10;
        UILabel * semiColomn_11;
        UILabel * semiColomn_12;
        UILabel * semiColomn_13;
        UILabel * semiColomn_14;
        UILabel * semiColomn_15;
        
        UILabel * semiColomn_16;
        UILabel * semiColomn_17;
        UILabel * semiColomn_18;
        UILabel * semiColomn_19;
        UILabel * semiColomn_20;
        UILabel * semiColomn_21;
        UILabel * semiColomn_22;
        
        
        UIButton * showListOfSalesPersonsDeptBtn;
        UIButton * showListOfSalesPersonsSubDeptBtn;
        UIButton * selectEditReasonBtn;
        UIButton * isVoidBtn;
        UIButton * selectVoidReasonBtn;
        UIButton * showListOfSalesPersonsBtn;
        UIButton * okEditItemDeatilsBtn;
        UIButton * cancelItemEditDetailsViewBtn;
        
        UIImage * buttonImageDD;
        buttonImageDD = [UIImage imageNamed:@"arrow_1.png"];
        
        selectEditReasonBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [selectEditReasonBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
        [selectEditReasonBtn addTarget:self
                                action:@selector(showListOfPriceEditReasons:) forControlEvents:UIControlEventTouchDown];
        
        isVoidBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [isVoidBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
        [isVoidBtn addTarget:self
                      action:@selector(showListOfItemVoidReasons:) forControlEvents:UIControlEventTouchDown];
        
        selectVoidReasonBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [selectVoidReasonBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
        [selectVoidReasonBtn addTarget:self
                                action:@selector(showListOfItemVoidReasons:) forControlEvents:UIControlEventTouchDown];
        
        
        //populateCstmrDprtmnt ----
        showListOfSalesPersonsDeptBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfSalesPersonsDeptBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
        [showListOfSalesPersonsDeptBtn addTarget:self
                                          action:@selector(populateCstmrDprtmnt:) forControlEvents:UIControlEventTouchDown];
        
        showListOfSalesPersonsSubDeptBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfSalesPersonsSubDeptBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
        [showListOfSalesPersonsSubDeptBtn addTarget:self
                                             action:@selector(populateSubDepartment:) forControlEvents:UIControlEventTouchDown];
        
        showListOfSalesPersonsBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfSalesPersonsBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
        [showListOfSalesPersonsBtn addTarget:self
                                      action:@selector(selectSalesPersonIds:) forControlEvents:UIControlEventTouchDown];
        
        
        isVoidBtn.tag = 2;
        selectVoidReasonBtn.tag = 4;
        
        /** ok Button for edit price view....*/
        okEditItemDeatilsBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [okEditItemDeatilsBtn addTarget:self
                                 action:@selector(commitAllItemChanges:) forControlEvents:UIControlEventTouchDown];
        okEditItemDeatilsBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
        okEditItemDeatilsBtn.backgroundColor = [UIColor grayColor];
        okEditItemDeatilsBtn.layer.cornerRadius = 10.0f;
        okEditItemDeatilsBtn.backgroundColor = [UIColor darkGrayColor];
        
        
        cancelItemEditDetailsViewBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [cancelItemEditDetailsViewBtn addTarget:self
                                         action:@selector(closeEditItemDetailsView:) forControlEvents:UIControlEventTouchDown];
        
        cancelItemEditDetailsViewBtn.titleLabel.font = [UIFont boldSystemFontOfSize:12.0];
        cancelItemEditDetailsViewBtn.backgroundColor = [UIColor grayColor];
        cancelItemEditDetailsViewBtn.layer.cornerRadius = 10.0f;
        cancelItemEditDetailsViewBtn.backgroundColor = [UIColor darkGrayColor];
        
        okEditItemDeatilsBtn.tag = sender.tag;
        cancelItemEditDetailsViewBtn.tag = sender.tag;
        
        isFlatDiscBtn = [[UIButton alloc] init] ;
        [isFlatDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
        isFlatDiscBtn.backgroundColor = [UIColor clearColor];
        isFlatDiscBtn.layer.masksToBounds = YES;
        isFlatDiscBtn.layer.cornerRadius = 5.0f;
        isFlatDiscBtn.tag = 0;
        [isFlatDiscBtn addTarget:self action:@selector(changeDiscountionType:) forControlEvents:UIControlEventTouchUpInside];
        
        isPercentileDiscBtn = [[UIButton alloc] init] ;
        [isPercentileDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
        isPercentileDiscBtn.backgroundColor = [UIColor clearColor];
        isPercentileDiscBtn.layer.masksToBounds = YES;
        isPercentileDiscBtn.layer.cornerRadius = 5.0f;
        isPercentileDiscBtn.tag = 1;
        [isPercentileDiscBtn addTarget:self action:@selector(changeDiscountionType:) forControlEvents:UIControlEventTouchUpInside];
        
        
        //creation of UILabel used in page....
        //creation of UILabel used in page....
        productDeatilsDisplayLbl = [[UILabel alloc] init];
        productDeatilsDisplayLbl.textColor = [UIColor blackColor];
        productDeatilsDisplayLbl.font = [UIFont boldSystemFontOfSize:18.0];
        productDeatilsDisplayLbl.textAlignment = NSTextAlignmentLeft;
        
        
        productDeatilsDisplayUnderLineLbl = [[UILabel alloc] init];
        productDeatilsDisplayUnderLineLbl.textColor = [UIColor blackColor];
        productDeatilsDisplayUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        productDeatilsDisplayUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        itemSkuIdLbl = [[UILabel alloc] init];
        itemSkuIdLbl.textColor = [UIColor blackColor];
        itemSkuIdLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemSkuIdLbl.textAlignment = NSTextAlignmentLeft;
        
        itemSkuIdValueLbl = [[UILabel alloc] init];
        itemSkuIdValueLbl.textColor = [UIColor blackColor];
        itemSkuIdValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemSkuIdValueLbl.textAlignment = NSTextAlignmentLeft;
        
        //                itemSkuIdValueLbl.backgroundColor = [UIColor blueColor];
        
        
        itemSkuIdUnderLineLbl = [[UILabel alloc] init];
        itemSkuIdUnderLineLbl.textColor = [UIColor blackColor];
        itemSkuIdUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemSkuIdUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        itemDescriptionLbl = [[UILabel alloc] init];
        itemDescriptionLbl.textColor = [UIColor blackColor];
        itemDescriptionLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemDescriptionLbl.textAlignment = NSTextAlignmentLeft;
        
        itemDescriptionValueLbl = [[UILabel alloc] init];
        itemDescriptionValueLbl.textColor = [UIColor blackColor];
        itemDescriptionValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemDescriptionValueLbl.textAlignment = NSTextAlignmentLeft;
        
        itemDescriptionUnderLineLbl = [[UILabel alloc] init];
        itemDescriptionUnderLineLbl.textColor = [UIColor blackColor];
        itemDescriptionUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemDescriptionUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        itemTaxRateLbl = [[UILabel alloc] init];
        itemTaxRateLbl.textColor = [UIColor blackColor];
        itemTaxRateLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemTaxRateLbl.textAlignment = NSTextAlignmentLeft;
        
        itemTaxRateValueLbl = [[UILabel alloc] init];
        itemTaxRateValueLbl.textColor = [UIColor blackColor];
        itemTaxRateValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemTaxRateValueLbl.textAlignment = NSTextAlignmentLeft;
        
        
        itemTaxRateUnderLineLbl = [[UILabel alloc] init];
        itemTaxRateUnderLineLbl.textColor = [UIColor blackColor];
        itemTaxRateUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemTaxRateUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        itemSalePriceLbl = [[UILabel alloc] init];
        itemSalePriceLbl.textColor = [UIColor blackColor];
        itemSalePriceLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemSalePriceLbl.textAlignment = NSTextAlignmentLeft;
        
        itemSalePriceValueLbl = [[UILabel alloc] init];
        itemSalePriceValueLbl.textColor = [UIColor blackColor];
        itemSalePriceValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemSalePriceValueLbl.textAlignment = NSTextAlignmentLeft;
        
        itemSalePriceUnderLineLbl = [[UILabel alloc] init];
        itemSalePriceUnderLineLbl.textColor = [UIColor blackColor];
        itemSalePriceUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemSalePriceUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        scanCodeLbl = [[UILabel alloc] init];
        scanCodeLbl.textColor = [UIColor blackColor];
        scanCodeLbl.font = [UIFont boldSystemFontOfSize:18.0];
        scanCodeLbl.textAlignment = NSTextAlignmentLeft;
        
        scanCodeValueLbl = [[UILabel alloc] init];
        scanCodeValueLbl.textColor = [UIColor blackColor];
        scanCodeValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        scanCodeValueLbl.textAlignment = NSTextAlignmentLeft;
        
        scanCodeUnderLineLbl = [[UILabel alloc] init];
        scanCodeUnderLineLbl.textColor = [UIColor blackColor];
        scanCodeUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        scanCodeUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        gradeLbl = [[UILabel alloc] init];
        gradeLbl.textColor = [UIColor blackColor];
        gradeLbl.font = [UIFont boldSystemFontOfSize:18.0];
        gradeLbl.textAlignment = NSTextAlignmentLeft;
        
        
        gradeValueLbl = [[UILabel alloc] init];
        gradeValueLbl.textColor = [UIColor blackColor];
        gradeValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        gradeValueLbl.textAlignment = NSTextAlignmentLeft;
        
        //        gradeValueLbl.backgroundColor = [UIColor blueColor];
        
        gradeUnderLineLbl= [[UILabel alloc] init];
        gradeUnderLineLbl.textColor = [UIColor blackColor];
        gradeUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        gradeUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        
        colorLbl = [[UILabel alloc] init];
        colorLbl.textColor = [UIColor blackColor];
        colorLbl.font = [UIFont boldSystemFontOfSize:18.0];
        colorLbl.textAlignment = NSTextAlignmentLeft;
        
        
        colorValueLbl = [[UILabel alloc] init];
        colorValueLbl.textColor = [UIColor blackColor];
        colorValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        colorValueLbl.textAlignment = NSTextAlignmentLeft;
        
        colorUnderLineLbl = [[UILabel alloc] init];
        colorUnderLineLbl.textColor = [UIColor blackColor];
        colorUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        colorUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        sizeLbl = [[UILabel alloc] init];
        sizeLbl.textColor = [UIColor blackColor];
        sizeLbl.font = [UIFont boldSystemFontOfSize:18.0];
        sizeLbl.textAlignment = NSTextAlignmentLeft;
        
        sizeValueLbl = [[UILabel alloc] init];
        sizeValueLbl.textColor = [UIColor blackColor];
        sizeValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        sizeValueLbl.textAlignment = NSTextAlignmentLeft;
        
        sizeUnderLineLbl = [[UILabel alloc] init];
        sizeUnderLineLbl.textColor = [UIColor blackColor];
        sizeUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        sizeUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        batchLbl = [[UILabel alloc] init];
        batchLbl.textColor = [UIColor blackColor];
        batchLbl.font = [UIFont boldSystemFontOfSize:18.0];
        batchLbl.textAlignment = NSTextAlignmentLeft;
        
        batchValueLbl = [[UILabel alloc] init];
        batchValueLbl.textColor = [UIColor blackColor];
        batchValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        batchValueLbl.textAlignment = NSTextAlignmentLeft;
        
        batchUnderLineLbl = [[UILabel alloc] init];
        batchUnderLineLbl.textColor = [UIColor blackColor];
        batchUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        batchUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        packSizeLbl = [[UILabel alloc] init];
        packSizeLbl.textColor = [UIColor blackColor];
        packSizeLbl.font = [UIFont boldSystemFontOfSize:18.0];
        packSizeLbl.textAlignment = NSTextAlignmentLeft;
        
        packSizeValueLbl = [[UILabel alloc] init];
        packSizeValueLbl.textColor = [UIColor blackColor];
        packSizeValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        packSizeValueLbl.textAlignment = NSTextAlignmentLeft;
        
        packSizeUnderLineLbl = [[UILabel alloc] init];
        packSizeUnderLineLbl.textColor = [UIColor blackColor];
        packSizeUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        packSizeUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        categoryLbl = [[UILabel alloc] init];
        categoryLbl.textColor = [UIColor blackColor];
        categoryLbl.font = [UIFont boldSystemFontOfSize:18.0];
        categoryLbl.textAlignment = NSTextAlignmentLeft;
        
        categoryValueLbl = [[UILabel alloc] init];
        categoryValueLbl.textColor = [UIColor blackColor];
        categoryValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        categoryValueLbl.textAlignment = NSTextAlignmentLeft;
        
        //        categoryValueLbl.backgroundColor = [UIColor blueColor];
        
        categoryUnderLineLbl = [[UILabel alloc] init];
        categoryUnderLineLbl.textColor = [UIColor blackColor];
        categoryUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        categoryUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        
        subcategoryLbl = [[UILabel alloc] init];
        subcategoryLbl.textColor = [UIColor blackColor];
        subcategoryLbl.font = [UIFont boldSystemFontOfSize:18.0];
        subcategoryLbl.textAlignment = NSTextAlignmentLeft;
        
        subcategoryValueLbl = [[UILabel alloc] init];
        subcategoryValueLbl.textColor = [UIColor blackColor];
        subcategoryValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        subcategoryValueLbl.textAlignment = NSTextAlignmentLeft;
        
        
        subcategoryUnderLineLbl = [[UILabel alloc] init];
        subcategoryUnderLineLbl.textColor = [UIColor blackColor];
        subcategoryUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        subcategoryUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        departmentLbl = [[UILabel alloc] init];
        departmentLbl.textColor = [UIColor blackColor];
        departmentLbl.font = [UIFont boldSystemFontOfSize:18.0];
        departmentLbl.textAlignment = NSTextAlignmentLeft;
        
        departmentUnderLineLbl = [[UILabel alloc] init];
        departmentUnderLineLbl.textColor = [UIColor blackColor];
        departmentUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        departmentUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        itemsSalePersonDeptTxt = [[UITextField alloc] init];
        //        itemsSalePersonDeptTxt.borderStyle = UITextBorderStyleBezel;
        itemsSalePersonDeptTxt.textColor = [UIColor blackColor];
        itemsSalePersonDeptTxt.borderStyle = UITextBorderStyleNone;
        
        
        subDepartmentLbl = [[UILabel alloc] init];
        subDepartmentLbl.textColor = [UIColor blackColor];
        subDepartmentLbl.font = [UIFont boldSystemFontOfSize:18.0];
        subDepartmentLbl.textAlignment = NSTextAlignmentLeft;
        
        subDepartmentUnderLineLbl = [[UILabel alloc] init];
        subDepartmentUnderLineLbl.textColor = [UIColor blackColor];
        subDepartmentUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        subDepartmentUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        itemsSalePersonSubDeptTxt = [[UITextField alloc] init];
        //        itemsSalePersonSubDeptTxt.borderStyle = UITextBorderStyleBezel;
        itemsSalePersonSubDeptTxt.borderStyle = UITextBorderStyleNone;
        itemsSalePersonSubDeptTxt.textColor = [UIColor blackColor];
        
        
        stockQtyLbl = [[UILabel alloc] init];
        stockQtyLbl.textColor = [UIColor blackColor];
        stockQtyLbl.font = [UIFont boldSystemFontOfSize:18.0];
        stockQtyLbl.textAlignment = NSTextAlignmentLeft;
        
        stockQtyValueLbl = [[UILabel alloc] init];
        stockQtyValueLbl.textColor = [UIColor blackColor];
        stockQtyValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        stockQtyValueLbl.textAlignment = NSTextAlignmentLeft;
        
        stockQtyUnderLineLbl = [[UILabel alloc] init];
        stockQtyUnderLineLbl.textColor = [UIColor blackColor];
        stockQtyUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        stockQtyUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        // Second row allocation part
        manualDiscountDisplayLbl = [[UILabel alloc] init];
        manualDiscountDisplayLbl.textColor = [UIColor blackColor];
        manualDiscountDisplayLbl.font = [UIFont boldSystemFontOfSize:18.0];
        manualDiscountDisplayLbl.textAlignment = NSTextAlignmentLeft;
        
        itemFlatDiscountLbl = [[UILabel alloc] init];
        itemFlatDiscountLbl.textColor = [UIColor blackColor];
        itemFlatDiscountLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemFlatDiscountLbl.textAlignment = NSTextAlignmentLeft;
        
        itemPrecentageDiscountLbl = [[UILabel alloc] init];
        itemPrecentageDiscountLbl.textColor = [UIColor blackColor];
        itemPrecentageDiscountLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemPrecentageDiscountLbl.textAlignment = NSTextAlignmentLeft;
        
        manualDiscountDisplayUnderLineLbl = [[UILabel alloc] init];
        manualDiscountDisplayUnderLineLbl.textColor = [UIColor blackColor];
        manualDiscountDisplayUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        manualDiscountDisplayUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        itemFlatDiscountUnderLineLbl = [[UILabel alloc] init];
        itemFlatDiscountUnderLineLbl.textColor = [UIColor blackColor];
        itemFlatDiscountUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemFlatDiscountUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        itemPrecentageDiscountUnderLineLbl = [[UILabel alloc] init];
        itemPrecentageDiscountUnderLineLbl.textColor = [UIColor blackColor];
        itemPrecentageDiscountUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemPrecentageDiscountUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        
        editPriceDisplayLbl  = [[UILabel alloc] init];
        editPriceDisplayLbl.textColor = [UIColor blackColor];
        editPriceDisplayLbl.font = [UIFont boldSystemFontOfSize:18.0];
        editPriceDisplayLbl.textAlignment = NSTextAlignmentLeft;
        
        itemMrpLbl = [[UILabel alloc] init];
        itemMrpLbl.textColor = [UIColor blackColor];
        itemMrpLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemMrpLbl.textAlignment = NSTextAlignmentLeft;
        
        itemMrpValueLbl = [[UILabel alloc] init];
        itemMrpValueLbl.textColor = [UIColor blackColor];
        itemMrpValueLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemMrpValueLbl.textAlignment = NSTextAlignmentCenter;
        itemMrpValueLbl.backgroundColor = [UIColor lightGrayColor];
        
        
        itemEditedPriceLbl = [[UILabel alloc] init];
        itemEditedPriceLbl.textColor = [UIColor blackColor];
        itemEditedPriceLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemEditedPriceLbl.textAlignment = NSTextAlignmentLeft;
        
        itemEditedPriceReasonLbl = [[UILabel alloc] init];
        itemEditedPriceReasonLbl.textColor = [UIColor blackColor];
        itemEditedPriceReasonLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemEditedPriceReasonLbl.textAlignment = NSTextAlignmentLeft;
        
        
        itemSelectPersonLbl = [[UILabel alloc] init];
        itemSelectPersonLbl.textColor = [UIColor blackColor];
        itemSelectPersonLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemSelectPersonLbl.textAlignment = NSTextAlignmentLeft;
        
        editPriceDisplayUnderLineLbl = [[UILabel alloc] init];
        editPriceDisplayUnderLineLbl.textColor = [UIColor blackColor];
        editPriceDisplayUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        editPriceDisplayUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        itemEditPriceUnderLineLbl = [[UILabel alloc] init];
        itemEditPriceUnderLineLbl.textColor = [UIColor blackColor];
        itemEditPriceUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemEditPriceUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        itemEditPriceReasonUnderLineLbl = [[UILabel alloc] init];
        itemEditPriceReasonUnderLineLbl.textColor = [UIColor blackColor];
        itemEditPriceReasonUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemEditPriceReasonUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        salesPersonDisplayLbl = [[UILabel alloc] init];
        salesPersonDisplayLbl.textColor = [UIColor blackColor];
        salesPersonDisplayLbl.font = [UIFont boldSystemFontOfSize:18.0];
        salesPersonDisplayLbl.textAlignment = NSTextAlignmentLeft;
        
        
        salesPersonDisplayUnderLineLbl = [[UILabel alloc] init];
        salesPersonDisplayUnderLineLbl.textColor = [UIColor blackColor];
        salesPersonDisplayUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        salesPersonDisplayUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        voidItemDisplayLbl = [[UILabel alloc] init];
        voidItemDisplayLbl.textColor = [UIColor blackColor];
        voidItemDisplayLbl.font = [UIFont boldSystemFontOfSize:18.0];
        voidItemDisplayLbl.textAlignment = NSTextAlignmentLeft;
        
        isItemVoidLbl = [[UILabel alloc] init];
        isItemVoidLbl.textColor = [UIColor blackColor];
        isItemVoidLbl.font = [UIFont boldSystemFontOfSize:18.0];
        //                isItemVoidLbl.textAlignment = NSTextAlignmentLeft;
        isItemVoidLbl.textAlignment = NSTextAlignmentRight;
        
        
        itemVoidReasonLbl = [[UILabel alloc] init];
        itemVoidReasonLbl.textColor = [UIColor blackColor];
        itemVoidReasonLbl.font = [UIFont boldSystemFontOfSize:18.0];
        itemVoidReasonLbl.textAlignment = NSTextAlignmentLeft;
        
        
        voidItemDisplayUnderLineLbl = [[UILabel alloc] init];
        voidItemDisplayUnderLineLbl.textColor = [UIColor blackColor];
        voidItemDisplayUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        voidItemDisplayUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        
        
        itemEditPriceTxt = [[UITextField alloc] init];
        itemEditPriceTxt.borderStyle = UITextBorderStyleBezel;
        itemEditPriceTxt.textColor = [UIColor blackColor];
        itemEditPriceTxt.delegate = self;
        itemEditPriceTxt.keyboardType = UIKeyboardTypeNumberPad;
        itemEditPriceTxt.backgroundColor = [UIColor lightGrayColor];
        
        itemEditPriceReasonTxt = [[UITextField alloc] init];
        itemEditPriceReasonTxt.borderStyle = UITextBorderStyleBezel;
        itemEditPriceReasonTxt.textColor = [UIColor blackColor];
        
        
        
        isItemVoidTxt = [[UITextField alloc] init];
        isItemVoidTxt.borderStyle = UITextBorderStyleBezel;
        isItemVoidTxt.textColor = [UIColor blackColor];
        
        itemVoidReasonTxt  = [[UITextField alloc] init];
        itemVoidReasonTxt.borderStyle = UITextBorderStyleBezel;
        itemVoidReasonTxt.textColor = [UIColor blackColor];
        
        
        itemFlatDiscountTxt = [[UITextField alloc] init];
        itemFlatDiscountTxt.borderStyle = UITextBorderStyleBezel;
        itemFlatDiscountTxt.textColor = [UIColor blackColor];
        itemFlatDiscountTxt.delegate = self;
        itemFlatDiscountTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        
        itemPrecentageDiscountTxt = [[UITextField alloc] init];
        itemPrecentageDiscountTxt.borderStyle = UITextBorderStyleBezel;
        itemPrecentageDiscountTxt.textColor = [UIColor blackColor];
        itemPrecentageDiscountTxt.delegate = self;
        itemPrecentageDiscountTxt.keyboardType = UIKeyboardTypeNumberPad;
        itemPrecentageDiscountTxt.backgroundColor = [UIColor lightGrayColor];
        [itemPrecentageDiscountTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        
        
        itemPrecentageDiscountValueTxt = [[UITextField alloc] init];
        itemPrecentageDiscountValueTxt.borderStyle = UITextBorderStyleBezel;
        itemPrecentageDiscountValueTxt.textColor = [UIColor blackColor];
        itemPrecentageDiscountValueTxt.userInteractionEnabled = NO;
        itemPrecentageDiscountValueTxt.keyboardType = UIKeyboardTypeNumberPad;
        itemPrecentageDiscountValueTxt.backgroundColor = [UIColor lightGrayColor];
        
        itemsSalePersonTxt = [[UITextField alloc] init];
        itemsSalePersonTxt.borderStyle = UITextBorderStyleBezel;
        itemsSalePersonTxt.textColor = [UIColor blackColor];
        
        itemsSalePersonIdTxt = [[UITextField alloc] init];
        itemsSalePersonIdTxt.borderStyle = UITextBorderStyleBezel;
        itemsSalePersonIdTxt.textColor = [UIColor blackColor];
        itemsSalePersonIdTxt.backgroundColor = [UIColor lightGrayColor];
        
        
        semiColomn_1 = [[UILabel alloc] init];
        semiColomn_1.textColor = [UIColor blackColor];
        semiColomn_1.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_1.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_2 = [[UILabel alloc] init];
        semiColomn_2.textColor = [UIColor blackColor];
        semiColomn_2.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_2.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_3 = [[UILabel alloc] init];
        semiColomn_3.textColor = [UIColor blackColor];
        semiColomn_3.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_3.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_4 = [[UILabel alloc] init];
        semiColomn_4.textColor = [UIColor blackColor];
        semiColomn_4.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_4.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_5 = [[UILabel alloc] init];
        semiColomn_5.textColor = [UIColor blackColor];
        semiColomn_5.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_5.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_6 = [[UILabel alloc] init];
        semiColomn_6.textColor = [UIColor blackColor];
        semiColomn_6.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_6.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_7 = [[UILabel alloc] init];
        semiColomn_7.textColor = [UIColor blackColor];
        semiColomn_7.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_7.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_8 = [[UILabel alloc] init];
        semiColomn_8.textColor = [UIColor blackColor];
        semiColomn_8.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_8.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_9 = [[UILabel alloc] init];
        semiColomn_9.textColor = [UIColor blackColor];
        semiColomn_9.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_9.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_10 = [[UILabel alloc] init];
        semiColomn_10.textColor = [UIColor blackColor];
        semiColomn_10.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_10.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_11 = [[UILabel alloc] init];
        semiColomn_11.textColor = [UIColor blackColor];
        semiColomn_11.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_11.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_12 = [[UILabel alloc] init];
        semiColomn_12.textColor = [UIColor blackColor];
        semiColomn_12.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_12.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_13 = [[UILabel alloc] init];
        semiColomn_13.textColor = [UIColor blackColor];
        semiColomn_13.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_13.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_14 = [[UILabel alloc] init];
        semiColomn_14.textColor = [UIColor blackColor];
        semiColomn_14.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_14.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_15 = [[UILabel alloc] init];
        semiColomn_15.textColor = [UIColor blackColor];
        semiColomn_15.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_15.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_16 = [[UILabel alloc] init];
        semiColomn_16.textColor = [UIColor blackColor];
        semiColomn_16.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_16.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_17 = [[UILabel alloc] init];
        semiColomn_17.textColor = [UIColor blackColor];
        semiColomn_17.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_17.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_18 = [[UILabel alloc] init];
        semiColomn_18.textColor = [UIColor blackColor];
        semiColomn_18.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_18.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_19 = [[UILabel alloc] init];
        semiColomn_19.textColor = [UIColor blackColor];
        semiColomn_19.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_19.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_20 = [[UILabel alloc] init];
        semiColomn_20.textColor = [UIColor blackColor];
        semiColomn_20.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_20.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_21 = [[UILabel alloc] init];
        semiColomn_21.textColor = [UIColor blackColor];
        semiColomn_21.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_21.textAlignment = NSTextAlignmentCenter;
        
        
        semiColomn_22 = [[UILabel alloc] init];
        semiColomn_22.textColor = [UIColor blackColor];
        semiColomn_22.font = [UIFont boldSystemFontOfSize:18.0];
        semiColomn_22.textAlignment = NSTextAlignmentCenter;
        
        
        //upto here on 16/08/2018....
        
        //here we are populating text into UILabels and UITextFields....
        @try{
            
            
            itemsSalePersonDeptTxt.userInteractionEnabled = NO;
            itemsSalePersonSubDeptTxt.userInteractionEnabled = NO;
            itemEditPriceTxt.userInteractionEnabled = YES;
            itemEditPriceReasonTxt.userInteractionEnabled = NO;
            itemFlatDiscountTxt.userInteractionEnabled = YES;
            itemPrecentageDiscountTxt.userInteractionEnabled = NO;
            
            isItemVoidTxt.userInteractionEnabled = NO;
            itemVoidReasonTxt.userInteractionEnabled = NO;
            itemsSalePersonTxt.userInteractionEnabled = NO;
            itemsSalePersonIdTxt.userInteractionEnabled = NO;
            
            itemEditPriceTxt.tag = sender.tag;
            selectEditReasonBtn.tag = sender.tag;
            itemEditPriceReasonTxt.tag = sender.tag;
            
            
            itemsSalePersonDeptTxt.placeholder = NSLocalizedString(@"department", nil);
            itemsSalePersonSubDeptTxt.placeholder = NSLocalizedString(@"sub_department", nil);
            itemEditPriceTxt.placeholder = NSLocalizedString(@"edit_price", nil);
            itemEditPriceReasonTxt.placeholder = NSLocalizedString(@"edit_reason", nil);
            isItemVoidTxt.placeholder = NSLocalizedString(@"", nil);
            itemVoidReasonTxt.placeholder = NSLocalizedString(@"void_reason", nil);
            itemFlatDiscountTxt.placeholder = NSLocalizedString(@"flat_discount", nil);
            itemPrecentageDiscountTxt.placeholder = NSLocalizedString(@"%", nil);
            itemPrecentageDiscountValueTxt.placeholder = NSLocalizedString(@"calculation", nil);
            itemsSalePersonTxt.placeholder = NSLocalizedString(@"select_person", nil);
            itemsSalePersonIdTxt.placeholder = NSLocalizedString(@"select_person_id", nil);
            productDeatilsDisplayLbl.text = NSLocalizedString(@"product_deatils", nil);
            headerlabel.text = NSLocalizedString(@"edit_item_details", nil);
            itemSkuIdLbl.text  = NSLocalizedString(@"sku_id", nil);
            itemDescriptionLbl.text  = NSLocalizedString(@"description", nil);
            itemTaxRateLbl.text  = NSLocalizedString(@"tax_rate_%", nil);
            itemSalePriceLbl.text  = NSLocalizedString(@"sale_price", nil);
            scanCodeLbl.text  = NSLocalizedString(@"scan_code", nil);
            gradeLbl.text  = NSLocalizedString(@"grade", nil);
            colorLbl.text  = NSLocalizedString(@"color", nil);
            sizeLbl.text  = NSLocalizedString(@"size", nil);
            batchLbl.text  = NSLocalizedString(@"batch", nil);
            packSizeLbl.text  = NSLocalizedString(@"pack_size", nil);
            categoryLbl.text  = NSLocalizedString(@"category", nil);
            subcategoryLbl.text  = NSLocalizedString(@"sub_category", nil);
            departmentLbl.text  = NSLocalizedString(@"department", nil);
            subDepartmentLbl.text  = NSLocalizedString(@"sub_department", nil);
            stockQtyLbl.text  = NSLocalizedString(@"stock_qty", nil);
            manualDiscountDisplayLbl.text  = NSLocalizedString(@"manual_discount", nil);
            itemFlatDiscountLbl.text  = NSLocalizedString(@"flat_discount", nil);
            itemPrecentageDiscountLbl.text  = NSLocalizedString(@"%_discount", nil);
            itemMrpLbl.text  = NSLocalizedString(@"mrp", nil);
            itemSelectPersonLbl.text = NSLocalizedString(@"select_person", nil);
            editPriceDisplayLbl.text = NSLocalizedString(@"edit_price", nil);
            itemEditedPriceReasonLbl.text  = NSLocalizedString(@"reason_for_edit", nil);
            itemEditedPriceLbl.text  = NSLocalizedString(@"edit_price", nil);
            salesPersonDisplayLbl.text  = NSLocalizedString(@"sales_person", nil);
            voidItemDisplayLbl.text  = NSLocalizedString(@"void_items", nil);
            isItemVoidLbl.text  = NSLocalizedString(@"void", nil);
            itemVoidReasonLbl.text = NSLocalizedString(@"reason_for_void", nil);
            
            semiColomn_1.text  = NSLocalizedString(@":", nil);
            semiColomn_2.text  = NSLocalizedString(@":", nil);
            semiColomn_3.text  = NSLocalizedString(@":", nil);
            semiColomn_4.text  = NSLocalizedString(@":", nil);
            semiColomn_5.text  = NSLocalizedString(@":", nil);
            semiColomn_6.text  = NSLocalizedString(@":", nil);
            semiColomn_7.text  = NSLocalizedString(@":", nil);
            semiColomn_8.text  = NSLocalizedString(@":", nil);
            semiColomn_9.text  = NSLocalizedString(@":", nil);
            semiColomn_10.text = NSLocalizedString(@":", nil);
            semiColomn_11.text = NSLocalizedString(@":", nil);
            semiColomn_12.text = NSLocalizedString(@":", nil);
            semiColomn_13.text = NSLocalizedString(@":", nil);
            semiColomn_14.text = NSLocalizedString(@":", nil);
            semiColomn_15.text = NSLocalizedString(@":", nil);
            semiColomn_16.text  = NSLocalizedString(@":", nil);
            semiColomn_17.text  = NSLocalizedString(@":", nil);
            semiColomn_18.text  = NSLocalizedString(@":", nil);
            semiColomn_19.text  = NSLocalizedString(@":", nil);
            semiColomn_20.text  = NSLocalizedString(@":", nil);
            semiColomn_21.text  = NSLocalizedString(@":", nil);
            semiColomn_22.text  = NSLocalizedString(@":", nil);
            
            
            
            //                    manualDiscountDisplayLbl.textColor = [UIColor blackColor];
            
            productDeatilsDisplayUnderLineLbl.backgroundColor = [UIColor blackColor];
            manualDiscountDisplayUnderLineLbl.backgroundColor = [UIColor blackColor];
            salesPersonDisplayUnderLineLbl.backgroundColor = [UIColor blackColor];
            editPriceDisplayUnderLineLbl.backgroundColor = [UIColor blackColor];
            voidItemDisplayUnderLineLbl.backgroundColor = [UIColor blackColor];
            
            itemSkuIdUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            itemDescriptionUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            itemTaxRateUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            itemSalePriceUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            scanCodeUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            
            gradeUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            colorUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            sizeUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            batchUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            packSizeUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            
            
            categoryUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            subcategoryUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            departmentUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            subDepartmentUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            stockQtyUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            
            itemFlatDiscountUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            itemPrecentageDiscountUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            
            itemEditPriceUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            itemEditPriceReasonUnderLineLbl.backgroundColor = [UIColor lightGrayColor];
            
            [okEditItemDeatilsBtn setTitle:NSLocalizedString(@"submit", nil) forState:UIControlStateNormal];
            [cancelItemEditDetailsViewBtn setTitle:NSLocalizedString(@"cancel", nil) forState:UIControlStateNormal];
            
            isItemVoidTxt.text = isVoidItemArr[1];
            
            if(cartTotalItems.count > 0){
                NSArray *temp = [cartTotalItems[sender.tag] componentsSeparatedByString:@"#"];
                
                itemSkuIdValueLbl.text = temp[0];
                itemDescriptionValueLbl.text = temp[1];
                stockQtyValueLbl.text = temp[3];
                itemSalePriceValueLbl.text = [NSString stringWithFormat:@"%.02f",[temp[4] floatValue]];
                itemMrpValueLbl.text =  itemSalePriceValueLbl.text;
                
                if ([editedPriceArr[sender.tag] floatValue] > 0) {
                    
                    itemEditPriceTxt.text = [NSString stringWithFormat:@"%.02f",[editedPriceArr[sender.tag] floatValue]];
                    
                    itemEditPriceReasonTxt.text = editPriceReasonArr[sender.tag];
                }
                else{
                    
                    itemEditPriceTxt.text = @"0.00";
                }
                
                if (isPriceEditableArr.count > 0 && ![isPriceEditableArr[itemEditPriceTxt.tag] boolValue] && !isOfflineService) {
                    
                    itemEditPriceTxt.userInteractionEnabled = NO;
                    itemEditPriceTxt.backgroundColor = [UIColor lightGrayColor];
                    
                }
                else{
                    
                    itemEditPriceTxt.userInteractionEnabled = YES;
                    itemEditPriceTxt.backgroundColor = [UIColor whiteColor];
                }
                
                if((isItemFlatDiscountedArr.count > sender.tag) && (itemDiscountArr.count > sender.tag)  && (itemDiscountDescArr.count > sender.tag) ){
                    
                    reasontextField.text = itemDiscountDescArr[sender.tag];
                    
                    if([isItemFlatDiscountedArr[sender.tag] integerValue] || (![itemDiscountArr[sender.tag] floatValue])){
                        
                        isFlatDisc = true;
                        
                        
                        [isFlatDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
                        [isPercentileDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                        
                        itemFlatDiscountTxt.text = [NSString stringWithFormat:@"%.2f", [itemDiscountArr[sender.tag] floatValue]];
                        itemFlatDiscountTxt.userInteractionEnabled = YES;
                        itemPrecentageDiscountTxt.userInteractionEnabled = NO;
                        itemFlatDiscountTxt.backgroundColor = [UIColor whiteColor];
                        itemPrecentageDiscountTxt.backgroundColor = [UIColor lightGrayColor];
                    }
                    else{
                        
                        [isFlatDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                        [isPercentileDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
                        
                        itemPrecentageDiscountValueTxt.text = [NSString stringWithFormat:@"%.2f", [itemDiscountArr[sender.tag] floatValue]];
                        
                        isFlatDisc = false;
                        
                        float itemTotalPrice = [temp[4] floatValue] * [temp[5] floatValue];
                        
                        if(onlineOfferDiscountPriceArr.count > sender.tag)
                            itemTotalPrice -= [onlineOfferDiscountPriceArr[sender.tag] floatValue];
                        
                        if(onlineDealDiscountPriceArr.count > sender.tag)
                            itemTotalPrice -= [onlineDealDiscountPriceArr[sender.tag] floatValue];
                        
                        float fraction = 0;
                        if (turnoverofferDiscount > 0) {
                            
                            fraction = ((itemTotalPrice / totalBeforeTurnOver) * 100);
                            itemTotalPrice = itemTotalPrice - ((turnoverofferDiscount * fraction) / 100);
                        }
                        
                        if(otherDiscountValue.floatValue > 0){
                            
                            itemTotalPrice = itemTotalPrice - (itemTotalPrice * (otherDiscountValue.floatValue/100.0));
                        }
                        
                        itemPrecentageDiscountTxt.text = [NSString stringWithFormat:@"%.2f", (([itemDiscountArr[sender.tag] floatValue]/itemTotalPrice) * 100)];
                        
                        itemFlatDiscountTxt.userInteractionEnabled = NO;
                        itemPrecentageDiscountTxt.userInteractionEnabled = YES;
                        itemFlatDiscountTxt.backgroundColor = [UIColor lightGrayColor];
                        itemPrecentageDiscountTxt.backgroundColor = [UIColor whiteColor];
                    }
                    
                    
                    if([employeeDic.allKeys containsObject:pluCodeList[sender.tag]]){
                        
                        NSMutableDictionary * tempEmpDic = [employeeDic valueForKey:pluCodeList[sender.tag]];
                        
                        itemsSalePersonDeptTxt.text  = [tempEmpDic valueForKey:kItemDept];
                        itemsSalePersonSubDeptTxt.text  = [tempEmpDic valueForKey:kItemSubDept];
                        itemsSalePersonIdTxt.text  = [tempEmpDic valueForKey:kItemSpecificEmplId];
                        itemsSalePersonTxt.text  = [tempEmpDic valueForKey:kItemSpecificEmplName];
                    }
                    else{
                        
                        NSMutableDictionary * tempEmpDic = productInfoArr[sender.tag];
                        
                        itemsSalePersonDeptTxt.text  = [self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:kItemDept] defaultReturn:@""];
                        itemsSalePersonSubDeptTxt.text  = [self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:kItemSubDept] defaultReturn:@""];
                        itemsSalePersonIdTxt.text  = @"";
                        itemsSalePersonTxt.text  = @"";
                    }
                    
                    //added by Roja from 16/08/2018....
                    
                    NSMutableDictionary * tempEmpDic = productInfoArr[sender.tag];
                    scanCodeValueLbl.text  = [self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:ITEM_SCAN_CODE] defaultReturn:@""];
                    categoryValueLbl.text  = [self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:ITEM_CATEGORY] defaultReturn:@""];
                    subcategoryValueLbl.text  = [self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:kSubCategory] defaultReturn:@""];
                    gradeValueLbl.text  = [self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:PRODUCT_RANGE] defaultReturn:@""];
                    colorValueLbl.text  = [self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:COLOR] defaultReturn:@""];
                    sizeValueLbl.text  = [self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:SIZE] defaultReturn:@""];
                    batchValueLbl.text  = [self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:PRODUCT_BATCH_NO] defaultReturn:@""];
                    packSizeValueLbl.text = [NSString stringWithFormat:@"%li",[[self checkGivenValueIsNullOrNil:[tempEmpDic valueForKey:[tempEmpDic valueForKey:Pack_Size]] defaultReturn:@"1"] integerValue]];
                    
                    //upto here on 16/08/2018
                }
                
                
                NSArray *taxDicArr = taxArr[sender.tag];
                float taxValue = 0.0f;
                
                float unit_price = [self getUnitPriceForItemAt:(int)sender.tag];
                taxValue = [self calculateTaxForItemPopUp:taxDicArr itemPosition:(int)sender.tag unitPrice:unit_price  qty:[cartTotalItems[sender.tag] componentsSeparatedByString:@"#"][5].floatValue];
                
                if (taxValue<=0) {
                    
                    itemTaxRateValueLbl.text = @"0.00";
                }
                else {
                    
                    NSString *taxLblStr = @"";
                    for (NSDictionary *taxDic in taxDicArr) {
                        if (taxLblStr.length == 0) {
                            taxLblStr = [NSString stringWithFormat:@"%.2f %@%@",taxValue,@"(",[taxDic valueForKey:@"taxRate"]];
                        }
                        else {
                            taxLblStr = [NSString stringWithFormat:@"%@%@%@",taxLblStr,@",",[taxDic valueForKey:@"taxRate"]];
                        }
                    }
                    taxLblStr = [NSString stringWithFormat:@"%@%@",taxLblStr,@")"];
                    itemTaxRateValueLbl.text = taxLblStr;
                }
                
            }
            
            
            
            
        } @catch (NSException *exception) {
            
        }
        [editItemDetailsView addSubview:headerlabel];
        [editItemDetailsView addSubview:closeBtn];
        
        [editItemDetailsView addSubview:productDeatilsDisplayLbl];
        [editItemDetailsView addSubview:productDeatilsDisplayUnderLineLbl];
        
        [editItemDetailsView addSubview:itemSkuIdLbl];
        [editItemDetailsView addSubview:itemSkuIdValueLbl];
        [editItemDetailsView addSubview:itemSkuIdUnderLineLbl];
        
        [editItemDetailsView addSubview:itemDescriptionLbl];
        [editItemDetailsView addSubview:itemDescriptionValueLbl];
        [editItemDetailsView addSubview:itemDescriptionUnderLineLbl];
        
        
        [editItemDetailsView addSubview:itemTaxRateLbl];
        [editItemDetailsView addSubview:itemTaxRateValueLbl];
        [editItemDetailsView addSubview:itemTaxRateUnderLineLbl];
        
        [editItemDetailsView addSubview:itemSalePriceLbl];
        [editItemDetailsView addSubview:itemSalePriceValueLbl];
        [editItemDetailsView addSubview:itemSalePriceUnderLineLbl];
        
        [editItemDetailsView addSubview:scanCodeLbl];
        [editItemDetailsView addSubview:scanCodeValueLbl];
        [editItemDetailsView addSubview:scanCodeUnderLineLbl];
        
        [editItemDetailsView addSubview:gradeLbl];
        [editItemDetailsView addSubview:gradeValueLbl];
        [editItemDetailsView addSubview:gradeUnderLineLbl];
        
        [editItemDetailsView addSubview:colorLbl];
        [editItemDetailsView addSubview:colorValueLbl];
        [editItemDetailsView addSubview:colorUnderLineLbl];
        
        [editItemDetailsView addSubview:sizeLbl];
        [editItemDetailsView addSubview:sizeValueLbl];
        [editItemDetailsView addSubview:sizeUnderLineLbl];
        
        [editItemDetailsView addSubview:batchLbl];
        [editItemDetailsView addSubview:batchValueLbl];
        [editItemDetailsView addSubview:batchUnderLineLbl];
        
        [editItemDetailsView addSubview:packSizeLbl];
        [editItemDetailsView addSubview:packSizeValueLbl];
        [editItemDetailsView addSubview:packSizeUnderLineLbl];
        
        [editItemDetailsView addSubview:categoryLbl];
        [editItemDetailsView addSubview:categoryValueLbl];
        [editItemDetailsView addSubview:categoryUnderLineLbl];
        
        [editItemDetailsView addSubview:subcategoryLbl];
        [editItemDetailsView addSubview:subcategoryValueLbl];
        [editItemDetailsView addSubview:subcategoryUnderLineLbl];
        
        [editItemDetailsView addSubview:departmentLbl];
        [editItemDetailsView addSubview:departmentUnderLineLbl];
        
        [editItemDetailsView addSubview:subDepartmentLbl];
        [editItemDetailsView addSubview:subDepartmentUnderLineLbl];
        
        [editItemDetailsView addSubview:itemsSalePersonDeptTxt];
        [editItemDetailsView addSubview:itemsSalePersonSubDeptTxt];
        
        [editItemDetailsView addSubview:showListOfSalesPersonsDeptBtn];
        [editItemDetailsView addSubview:showListOfSalesPersonsSubDeptBtn];
        
        [editItemDetailsView addSubview:stockQtyLbl];
        [editItemDetailsView addSubview:stockQtyValueLbl];
        [editItemDetailsView addSubview:stockQtyUnderLineLbl];
        
        [editItemDetailsView addSubview:manualDiscountDisplayLbl];
        [editItemDetailsView addSubview:manualDiscountDisplayUnderLineLbl];
        
        [editItemDetailsView addSubview:itemFlatDiscountLbl];
        [editItemDetailsView addSubview:isFlatDiscBtn];
        [editItemDetailsView addSubview:itemFlatDiscountTxt];
        
        [editItemDetailsView addSubview:isPercentileDiscBtn];
        [editItemDetailsView addSubview:itemPrecentageDiscountValueTxt];
        [editItemDetailsView addSubview:itemPrecentageDiscountLbl];
        [editItemDetailsView addSubview:itemPrecentageDiscountTxt];
        
        [editItemDetailsView addSubview:salesPersonDisplayLbl];
        [editItemDetailsView addSubview:salesPersonDisplayUnderLineLbl];
        [editItemDetailsView addSubview:itemsSalePersonTxt];
        [editItemDetailsView addSubview:itemsSalePersonIdTxt];
        [editItemDetailsView addSubview:showListOfSalesPersonsBtn];
        
        
        [editItemDetailsView addSubview:editPriceDisplayLbl];
        [editItemDetailsView addSubview:editPriceDisplayUnderLineLbl];
        
        [editItemDetailsView addSubview:itemEditPriceUnderLineLbl];
        [editItemDetailsView addSubview:itemEditPriceReasonUnderLineLbl];
        [editItemDetailsView addSubview:itemFlatDiscountUnderLineLbl];
        [editItemDetailsView addSubview:itemPrecentageDiscountUnderLineLbl];
        
        [editItemDetailsView addSubview:itemMrpLbl];
        [editItemDetailsView addSubview:itemMrpValueLbl];
        
        [editItemDetailsView addSubview:itemEditedPriceLbl];
        [editItemDetailsView addSubview:itemEditPriceTxt];
        
        
        [editItemDetailsView addSubview:itemEditedPriceReasonLbl];
        [editItemDetailsView addSubview:itemEditPriceReasonTxt];
        
        [editItemDetailsView addSubview:voidItemDisplayLbl];
        [editItemDetailsView addSubview:isItemVoidLbl];
        [editItemDetailsView addSubview:isItemVoidTxt];
        [editItemDetailsView addSubview:itemVoidReasonLbl];
        [editItemDetailsView addSubview:itemVoidReasonTxt];
        [editItemDetailsView addSubview:selectEditReasonBtn];
        [editItemDetailsView addSubview:isVoidBtn];
        [editItemDetailsView addSubview:selectVoidReasonBtn];
        
        [editItemDetailsView addSubview:voidItemDisplayUnderLineLbl];
        
        [editItemDetailsView addSubview:semiColomn_1];
        [editItemDetailsView addSubview:semiColomn_2];
        [editItemDetailsView addSubview:semiColomn_3];
        [editItemDetailsView addSubview:semiColomn_4];
        [editItemDetailsView addSubview:semiColomn_5];
        [editItemDetailsView addSubview:semiColomn_6];
        [editItemDetailsView addSubview:semiColomn_7];
        [editItemDetailsView addSubview:semiColomn_8];
        [editItemDetailsView addSubview:semiColomn_9];
        [editItemDetailsView addSubview:semiColomn_10];
        [editItemDetailsView addSubview:semiColomn_11];
        [editItemDetailsView addSubview:semiColomn_12];
        [editItemDetailsView addSubview:semiColomn_13];
        [editItemDetailsView addSubview:semiColomn_14];
        [editItemDetailsView addSubview:semiColomn_15];
        [editItemDetailsView addSubview:semiColomn_16];
        [editItemDetailsView addSubview:semiColomn_17];
        [editItemDetailsView addSubview:semiColomn_18];
        [editItemDetailsView addSubview:semiColomn_19];
        [editItemDetailsView addSubview:semiColomn_20];
        [editItemDetailsView addSubview:semiColomn_21];
        [editItemDetailsView addSubview:semiColomn_22];
        
        [editItemDetailsView addSubview:okEditItemDeatilsBtn];
        [editItemDetailsView addSubview:cancelItemEditDetailsViewBtn];
        [editItemDetailsView addSubview:itemPrecentageDiscountLbl];
        
        [transperentView addSubview:editItemDetailsView];
        
        [self.view addSubview:transperentView];
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                
            }
            else{
            }
            
            transperentView.frame = self.view.frame;
            
            headerlabel.frame = CGRectMake( 0, 0, transperentView.frame.size.width - 100, 50);
            
            
            
            closeBtn.frame =  CGRectMake( headerlabel.frame.size.width - 60, 0, 50, 50);
            
            float labelWidth = 105 ;
            float labelValueWidth = (headerlabel.frame.size.width - 340)/2  - labelWidth - 5;
            
            //------ First Row - First Column  -------
            
            //------ productDeatils  -------
            productDeatilsDisplayLbl.frame =  CGRectMake( 20, headerlabel.frame.origin.y + headerlabel.frame.size.height + 10, (headerlabel.frame.size.width - 100)/2, 25);
            productDeatilsDisplayUnderLineLbl.frame = CGRectMake( 20, productDeatilsDisplayLbl.frame.origin.y + productDeatilsDisplayLbl.frame.size.height, (headerlabel.frame.size.width - 40), 1);
            
            //first row frames....
            itemSkuIdLbl.frame =  CGRectMake( 20, productDeatilsDisplayLbl.frame.origin.y + productDeatilsDisplayLbl.frame.size.height + 4, labelWidth, 25);
            semiColomn_1.frame = CGRectMake( itemSkuIdLbl.frame.origin.x + itemSkuIdLbl.frame.size.width + 10, itemSkuIdLbl.frame.origin.y, 5, 25);
            itemSkuIdValueLbl.frame = CGRectMake( semiColomn_1.frame.origin.x + semiColomn_1.frame.size.width + 10, itemSkuIdLbl.frame.origin.y, labelValueWidth, 25);
            itemSkuIdUnderLineLbl.frame = CGRectMake( itemSkuIdLbl.frame.origin.x, itemSkuIdLbl.frame.origin.y + itemSkuIdLbl.frame.size.height, (headerlabel.frame.size.width - 290)/2, 0.5);
            
            
            //second row frames....
            itemDescriptionLbl.frame = CGRectMake( itemSkuIdLbl.frame.origin.x, itemSkuIdLbl.frame.origin.y + itemSkuIdLbl.frame.size.height + 2, itemSkuIdLbl.frame.size.width, itemSkuIdLbl.frame.size.height);
            semiColomn_2.frame = CGRectMake( semiColomn_1.frame.origin.x, itemDescriptionLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            itemDescriptionValueLbl.frame = CGRectMake( itemSkuIdValueLbl.frame.origin.x, itemDescriptionLbl.frame.origin.y, itemSkuIdValueLbl.frame.size.width, itemSkuIdValueLbl.frame.size.height);
            itemDescriptionUnderLineLbl.frame = CGRectMake( itemSkuIdLbl.frame.origin.x, itemDescriptionLbl.frame.origin.y + itemDescriptionLbl.frame.size.height, itemSkuIdUnderLineLbl.frame.size.width , itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //third row frames....
            itemTaxRateLbl.frame = CGRectMake( itemSkuIdLbl.frame.origin.x, itemDescriptionLbl.frame.origin.y + itemDescriptionLbl.frame.size.height+2, itemSkuIdLbl.frame.size.width, itemSkuIdLbl.frame.size.height);
            semiColomn_3.frame = CGRectMake( semiColomn_1.frame.origin.x, itemTaxRateLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            itemTaxRateValueLbl.frame = CGRectMake( itemSkuIdValueLbl.frame.origin.x, itemTaxRateLbl.frame.origin.y, itemSkuIdValueLbl.frame.size.width, itemSkuIdValueLbl.frame.size.height);
            itemTaxRateUnderLineLbl.frame = CGRectMake( itemSkuIdLbl.frame.origin.x, itemTaxRateValueLbl.frame.origin.y + itemTaxRateValueLbl.frame.size.height, itemSkuIdUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //fourth row frames....
            itemSalePriceLbl.frame = CGRectMake( itemSkuIdLbl.frame.origin.x, itemTaxRateLbl.frame.origin.y + itemTaxRateLbl.frame.size.height+2, itemSkuIdLbl.frame.size.width, itemSkuIdLbl.frame.size.height);
            semiColomn_4.frame = CGRectMake( semiColomn_1.frame.origin.x, itemSalePriceLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            itemSalePriceValueLbl.frame = CGRectMake( itemSkuIdValueLbl.frame.origin.x, itemSalePriceLbl.frame.origin.y, itemSkuIdValueLbl.frame.size.width, itemSkuIdValueLbl.frame.size.height);
            itemSalePriceUnderLineLbl.frame = CGRectMake( itemSkuIdLbl.frame.origin.x, itemSalePriceLbl.frame.origin.y + itemSalePriceLbl.frame.size.height,itemSkuIdUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //fivth row frames....
            scanCodeLbl.frame = CGRectMake( itemSkuIdLbl.frame.origin.x, itemSalePriceLbl.frame.origin.y + itemSalePriceLbl.frame.size.height+2, itemSkuIdLbl.frame.size.width, itemSkuIdLbl.frame.size.height);
            semiColomn_5.frame = CGRectMake( semiColomn_1.frame.origin.x, scanCodeLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            scanCodeValueLbl.frame = CGRectMake( itemSkuIdValueLbl.frame.origin.x, scanCodeLbl.frame.origin.y, itemSkuIdValueLbl.frame.size.width, itemSkuIdValueLbl.frame.size.height);
            scanCodeUnderLineLbl.frame = CGRectMake( itemSkuIdLbl.frame.origin.x, scanCodeLbl.frame.origin.y + scanCodeLbl.frame.size.height, itemSkuIdUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            //------ First Row - second Column  -------
            
            float secColumnLblWidth = 85;
            float secColumnLblValueWidth = 80;
            
            //first row frames....
            gradeLbl.frame = CGRectMake( itemSkuIdUnderLineLbl.frame.origin.x + itemSkuIdUnderLineLbl.frame.size.width+10, productDeatilsDisplayLbl.frame.origin.y + productDeatilsDisplayLbl.frame.size.height + 4,secColumnLblWidth , 25);
            semiColomn_6.frame = CGRectMake( gradeLbl.frame.origin.x + gradeLbl.frame.size.width + 10, gradeLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            gradeValueLbl.frame = CGRectMake( semiColomn_6.frame.origin.x + semiColomn_6.frame.size.width + 10, gradeLbl.frame.origin.y, secColumnLblValueWidth, 25);
            gradeUnderLineLbl.frame = CGRectMake( gradeLbl.frame.origin.x, gradeLbl.frame.origin.y + gradeLbl.frame.size.height, (headerlabel.frame.size.width - 550)/2, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            
            //second row frames....
            colorLbl.frame = CGRectMake( gradeLbl.frame.origin.x, gradeLbl.frame.origin.y + gradeLbl.frame.size.height + 2, gradeLbl.frame.size.width, gradeLbl.frame.size.height);
            semiColomn_7.frame = CGRectMake( semiColomn_6.frame.origin.x, colorLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            colorValueLbl.frame = CGRectMake( gradeValueLbl.frame.origin.x, colorLbl.frame.origin.y, gradeValueLbl.frame.size.width, gradeValueLbl.frame.size.height);
            colorUnderLineLbl.frame = CGRectMake( gradeLbl.frame.origin.x, colorLbl.frame.origin.y + colorLbl.frame.size.height, gradeUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //third row frames....
            sizeLbl.frame = CGRectMake( gradeLbl.frame.origin.x, colorLbl.frame.origin.y + colorLbl.frame.size.height + 2, gradeLbl.frame.size.width, gradeLbl.frame.size.height);
            semiColomn_8.frame = CGRectMake( semiColomn_6.frame.origin.x, sizeLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            sizeValueLbl.frame = CGRectMake( colorValueLbl.frame.origin.x, sizeLbl.frame.origin.y, gradeValueLbl.frame.size.width, gradeValueLbl.frame.size.height);
            sizeUnderLineLbl.frame = CGRectMake( gradeLbl.frame.origin.x, sizeLbl.frame.origin.y + sizeLbl.frame.size.height, gradeUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //fourth row frames....
            batchLbl.frame = CGRectMake( gradeLbl.frame.origin.x, sizeLbl.frame.origin.y + sizeLbl.frame.size.height + 2, gradeLbl.frame.size.width, gradeLbl.frame.size.height);
            semiColomn_9.frame = CGRectMake( semiColomn_6.frame.origin.x, batchLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            batchValueLbl.frame = CGRectMake( sizeValueLbl.frame.origin.x, batchLbl.frame.origin.y, gradeValueLbl.frame.size.width, gradeValueLbl.frame.size.height);
            batchUnderLineLbl.frame = CGRectMake( gradeLbl.frame.origin.x, batchLbl.frame.origin.y + batchLbl.frame.size.height, gradeUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //fivth row frames....
            packSizeLbl.frame = CGRectMake( gradeLbl.frame.origin.x, batchLbl.frame.origin.y + batchLbl.frame.size.height + 2, gradeLbl.frame.size.width, gradeLbl.frame.size.height);
            semiColomn_10.frame = CGRectMake( semiColomn_6.frame.origin.x, packSizeLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            packSizeValueLbl.frame = CGRectMake( batchValueLbl.frame.origin.x, packSizeLbl.frame.origin.y, gradeValueLbl.frame.size.width, gradeValueLbl.frame.size.height);
            packSizeUnderLineLbl.frame = CGRectMake( gradeLbl.frame.origin.x, packSizeLbl.frame.origin.y + packSizeLbl.frame.size.height, gradeUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //------ First Row - third Column  -------
            
            float thirdColumnLblWidth = 150;
            float thirdColumnLblValueWidth = 185;
            
            //first row frames....
            categoryLbl.frame = CGRectMake( gradeUnderLineLbl.frame.origin.x + gradeUnderLineLbl.frame.size.width + 10, productDeatilsDisplayLbl.frame.origin.y + productDeatilsDisplayLbl.frame.size.height + 4,thirdColumnLblWidth , 25);
            semiColomn_11.frame = CGRectMake( categoryLbl.frame.origin.x + categoryLbl.frame.size.width + 10, categoryLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            categoryValueLbl.frame = CGRectMake( semiColomn_11.frame.origin.x + semiColomn_11.frame.size.width + 10, categoryLbl.frame.origin.y, thirdColumnLblValueWidth, 25);
            categoryUnderLineLbl.frame = CGRectMake( categoryLbl.frame.origin.x, categoryLbl.frame.origin.y + categoryLbl.frame.size.height, (headerlabel.frame.size.width - 200)/2, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //second row frames....
            subcategoryLbl.frame = CGRectMake( categoryLbl.frame.origin.x, categoryLbl.frame.origin.y + categoryLbl.frame.size.height + 2, categoryLbl.frame.size.width, categoryLbl.frame.size.height);
            semiColomn_12.frame = CGRectMake( semiColomn_11.frame.origin.x, subcategoryLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            subcategoryValueLbl.frame = CGRectMake( categoryValueLbl.frame.origin.x, subcategoryLbl.frame.origin.y, categoryValueLbl.frame.size.width, categoryValueLbl.frame.size.height);
            subcategoryUnderLineLbl.frame = CGRectMake( categoryLbl.frame.origin.x, subcategoryLbl.frame.origin.y + subcategoryLbl.frame.size.height, categoryUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //third row frames....
            departmentLbl.frame = CGRectMake( categoryLbl.frame.origin.x, subcategoryLbl.frame.origin.y + subcategoryLbl.frame.size.height + 2, categoryLbl.frame.size.width, categoryLbl.frame.size.height);
            semiColomn_13.frame = CGRectMake( semiColomn_11.frame.origin.x, departmentLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            itemsSalePersonDeptTxt.frame = CGRectMake( categoryValueLbl.frame.origin.x, departmentLbl.frame.origin.y, categoryValueLbl.frame.size.width, categoryValueLbl.frame.size.height);
            showListOfSalesPersonsDeptBtn.frame = CGRectMake( itemsSalePersonDeptTxt.frame.origin.x + itemsSalePersonDeptTxt.frame.size.width - (itemsSalePersonDeptTxt.frame.size.height + 10), itemsSalePersonDeptTxt.frame.origin.y - 4, itemsSalePersonDeptTxt.frame.size.height + 8 , itemsSalePersonDeptTxt.frame.size.height + 8);
            departmentUnderLineLbl.frame = CGRectMake( categoryLbl.frame.origin.x, departmentLbl.frame.origin.y + departmentLbl.frame.size.height, categoryUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            //fourth row frames....
            subDepartmentLbl.frame = CGRectMake( categoryLbl.frame.origin.x, departmentLbl.frame.origin.y + departmentLbl.frame.size.height + 2, categoryLbl.frame.size.width, categoryLbl.frame.size.height);
            semiColomn_14.frame = CGRectMake( semiColomn_11.frame.origin.x, subDepartmentLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            itemsSalePersonSubDeptTxt.frame  = CGRectMake( categoryValueLbl.frame.origin.x, subDepartmentLbl.frame.origin.y, categoryValueLbl.frame.size.width, categoryValueLbl.frame.size.height);
            showListOfSalesPersonsSubDeptBtn.frame = CGRectMake( itemsSalePersonSubDeptTxt.frame.origin.x + itemsSalePersonSubDeptTxt.frame.size.width - (itemsSalePersonSubDeptTxt.frame.size.height + 10), itemsSalePersonSubDeptTxt.frame.origin.y - 4, itemsSalePersonSubDeptTxt.frame.size.height + 8, itemsSalePersonSubDeptTxt.frame.size.height + 8);
            subDepartmentUnderLineLbl.frame = CGRectMake( categoryLbl.frame.origin.x, subDepartmentLbl.frame.origin.y + subDepartmentLbl.frame.size.height,categoryUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            
            
            //fivth row frames....
            stockQtyLbl.frame = CGRectMake( categoryLbl.frame.origin.x, subDepartmentLbl.frame.origin.y + subDepartmentLbl.frame.size.height + 2, categoryLbl.frame.size.width, categoryLbl.frame.size.height);
            semiColomn_15.frame = CGRectMake( semiColomn_11.frame.origin.x, stockQtyLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            stockQtyValueLbl.frame = CGRectMake( categoryValueLbl.frame.origin.x, stockQtyLbl.frame.origin.y, categoryValueLbl.frame.size.width, categoryValueLbl.frame.size.height);
            stockQtyUnderLineLbl.frame = CGRectMake( categoryLbl.frame.origin.x, stockQtyLbl.frame.origin.y + stockQtyLbl.frame.size.height, categoryUnderLineLbl.frame.size.width, itemSkuIdUnderLineLbl.frame.size.height);
            
            //------------ Second Row - First column ------------
            
            // First column frame
            manualDiscountDisplayLbl.frame = CGRectMake( productDeatilsDisplayLbl.frame.origin.x, scanCodeLbl.frame.origin.y + scanCodeLbl.frame.size.height + 15, productDeatilsDisplayLbl.frame.size.width, productDeatilsDisplayLbl.frame.size.height);
            
            manualDiscountDisplayUnderLineLbl.frame = CGRectMake( manualDiscountDisplayLbl.frame.origin.x, manualDiscountDisplayLbl.frame.origin.y + manualDiscountDisplayLbl.frame.size.height,  (headerlabel.frame.size.width - 150)/2, productDeatilsDisplayUnderLineLbl.frame.size.height);
            
            isFlatDiscBtn.frame = CGRectMake( 80 , manualDiscountDisplayUnderLineLbl.frame.origin.y + manualDiscountDisplayUnderLineLbl.frame.size.height + 10, 22, 22);
            
            itemFlatDiscountLbl.frame = CGRectMake( isFlatDiscBtn.frame.origin.x + isFlatDiscBtn.frame.size.width + 10, isFlatDiscBtn.frame.origin.y ,itemSkuIdLbl.frame.size.width + 10 , itemSkuIdLbl.frame.size.height);
            
            semiColomn_16.frame = CGRectMake( itemFlatDiscountLbl.frame.origin.x + itemFlatDiscountLbl.frame.size.width + 10 , isFlatDiscBtn.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            
            itemFlatDiscountTxt.frame = CGRectMake( semiColomn_16.frame.origin.x + semiColomn_16.frame.size.width + 10 , (itemFlatDiscountLbl.frame.origin.y - 5),(manualDiscountDisplayUnderLineLbl.frame.size.width - 80)/2,  32);
            
            itemFlatDiscountUnderLineLbl.frame = CGRectMake( isFlatDiscBtn.frame.origin.x, itemFlatDiscountTxt.frame.origin.y + itemFlatDiscountTxt.frame.size.height + 10, manualDiscountDisplayUnderLineLbl.frame.size.width - 60 , productDeatilsDisplayUnderLineLbl.frame.size.height);
            
            
            isPercentileDiscBtn.frame = CGRectMake( isFlatDiscBtn.frame.origin.x, itemFlatDiscountUnderLineLbl.frame.origin.y + itemFlatDiscountUnderLineLbl.frame.size.height + 10, isFlatDiscBtn.frame.size.width, isFlatDiscBtn.frame.size.height);
            
            itemPrecentageDiscountLbl.frame = CGRectMake( itemFlatDiscountLbl.frame.origin.x, isPercentileDiscBtn.frame.origin.y , itemFlatDiscountLbl.frame.size.width, itemFlatDiscountLbl.frame.size.height);
            
            semiColomn_17.frame = CGRectMake( semiColomn_16.frame.origin.x , isPercentileDiscBtn.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            
            itemPrecentageDiscountTxt.frame = CGRectMake(itemFlatDiscountTxt.frame.origin.x, (itemPrecentageDiscountLbl.frame.origin.y - 5), 60, itemFlatDiscountTxt.frame.size.height);
            
            itemPrecentageDiscountValueTxt.frame = CGRectMake( itemPrecentageDiscountTxt.frame.origin.x + itemPrecentageDiscountTxt.frame.size.width + 5, itemPrecentageDiscountTxt.frame.origin.y , (itemFlatDiscountUnderLineLbl.frame.size.width - 150 ) /2,  itemFlatDiscountTxt.frame.size.height);
            
            itemPrecentageDiscountUnderLineLbl.frame = CGRectMake( isPercentileDiscBtn.frame.origin.x, itemPrecentageDiscountTxt.frame.origin.y + itemPrecentageDiscountTxt.frame.size.height + 10, itemFlatDiscountUnderLineLbl.frame.size.width, productDeatilsDisplayUnderLineLbl.frame.size.height);
            
            
            //------------ Second Row - Second column ------------
            // First column frame
            editPriceDisplayLbl.frame = CGRectMake( manualDiscountDisplayUnderLineLbl.frame.origin.x + manualDiscountDisplayUnderLineLbl.frame.size.width +  105 , manualDiscountDisplayLbl.frame.origin.y, productDeatilsDisplayLbl.frame.size.width, productDeatilsDisplayLbl.frame.size.height);
            
            editPriceDisplayUnderLineLbl.frame =  CGRectMake( editPriceDisplayLbl.frame.origin.x, editPriceDisplayLbl.frame.origin.y +editPriceDisplayLbl.frame.size.height , (manualDiscountDisplayUnderLineLbl.frame.size.width ), productDeatilsDisplayUnderLineLbl.frame.size.height);
            
            
            itemMrpLbl.frame = CGRectMake( editPriceDisplayLbl.frame.origin.x, editPriceDisplayUnderLineLbl.frame.origin.y + editPriceDisplayUnderLineLbl.frame.size.height + 10, 40 , 25);
            
            semiColomn_18.frame = CGRectMake( itemMrpLbl.frame.origin.x + itemMrpLbl.frame.size.width + 10 , itemMrpLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            
            itemMrpValueLbl.frame = CGRectMake( semiColomn_18.frame.origin.x + semiColomn_18.frame.size.width + 10, (itemMrpLbl.frame.origin.y - 2), 95, 30);
            
            itemEditedPriceLbl.frame = CGRectMake( itemMrpValueLbl.frame.origin.x + itemMrpValueLbl.frame.size.width + 10, itemMrpLbl.frame.origin.y , itemMrpLbl.frame.size.width + 50, itemMrpLbl.frame.size.height);
            
            semiColomn_19.frame = CGRectMake( itemEditedPriceLbl.frame.origin.x + itemEditedPriceLbl.frame.size.width + 10 , itemMrpLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            
            itemEditPriceTxt.frame = CGRectMake( semiColomn_19.frame.origin.x + semiColomn_19.frame.size.width +10 , itemMrpValueLbl.frame.origin.y, itemMrpValueLbl.frame.size.width , itemMrpValueLbl.frame.size.height);
            
            itemEditPriceUnderLineLbl.frame = CGRectMake( editPriceDisplayUnderLineLbl.frame.origin.x, itemEditPriceTxt.frame.origin.y + itemEditPriceTxt.frame.size.height + 10, editPriceDisplayUnderLineLbl.frame.size.width, productDeatilsDisplayUnderLineLbl.frame.size.height);
            
            
            itemEditedPriceReasonLbl.frame = CGRectMake( itemMrpLbl.frame.origin.x, itemEditPriceUnderLineLbl.frame.origin.y + itemEditPriceUnderLineLbl.frame.size.height + 10, itemMrpLbl.frame.size.width + 100, itemMrpLbl.frame.size.height);
            
            semiColomn_20.frame = CGRectMake( itemEditedPriceReasonLbl.frame.origin.x + itemEditedPriceReasonLbl.frame.size.width + 10 , itemEditedPriceReasonLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            
            
            itemEditPriceReasonTxt.frame = CGRectMake( semiColomn_20.frame.origin.x + semiColomn_20.frame.size.width + 10, (itemEditedPriceReasonLbl.frame.origin.y - 5), (itemEditPriceUnderLineLbl.frame.size.width + 60 ) / 2, itemFlatDiscountTxt.frame.size.height);
            
            selectEditReasonBtn.frame =  CGRectMake( itemEditPriceReasonTxt.frame.origin.x + itemEditPriceReasonTxt.frame.size.width - (itemEditPriceReasonTxt.frame.size.height + 10), itemEditPriceReasonTxt.frame.origin.y - 4, itemEditPriceReasonTxt.frame.size.height + 8, itemEditPriceReasonTxt.frame.size.height + 8);
            
            itemEditPriceReasonUnderLineLbl.frame = CGRectMake( editPriceDisplayUnderLineLbl.frame.origin.x , itemEditPriceReasonTxt.frame.origin.y + itemEditPriceReasonTxt.frame.size.height + 10, itemEditPriceUnderLineLbl.frame.size.width, productDeatilsDisplayUnderLineLbl.frame.size.height);
            
            
            
            salesPersonDisplayLbl.frame = CGRectMake( productDeatilsDisplayLbl.frame.origin.x, itemPrecentageDiscountUnderLineLbl.frame.origin.y + itemPrecentageDiscountUnderLineLbl.frame.size.height + 15, productDeatilsDisplayLbl.frame.size.width, productDeatilsDisplayLbl.frame.size.height);
            
            salesPersonDisplayUnderLineLbl.frame = CGRectMake( productDeatilsDisplayUnderLineLbl.frame.origin.x, salesPersonDisplayLbl.frame.origin.y + salesPersonDisplayLbl.frame.size.height, manualDiscountDisplayUnderLineLbl.frame.size.width, productDeatilsDisplayUnderLineLbl.frame.size.height);
            
            
            itemsSalePersonTxt.frame = CGRectMake(salesPersonDisplayLbl.frame.origin.x, salesPersonDisplayUnderLineLbl.frame.origin.y + salesPersonDisplayUnderLineLbl.frame.size.height + 5, (salesPersonDisplayUnderLineLbl.frame.size.width -10 )/2, 40);
            
            
            itemsSalePersonIdTxt.frame  = CGRectMake( itemsSalePersonTxt.frame.origin.x + itemsSalePersonTxt.frame.size.width + 10, itemsSalePersonTxt.frame.origin.y, itemsSalePersonTxt.frame.size.width, itemsSalePersonTxt.frame.size.height);
            
            showListOfSalesPersonsBtn.frame = CGRectMake( itemsSalePersonTxt.frame.origin.x + itemsSalePersonTxt.frame.size.width - (itemsSalePersonTxt.frame.size.height + 2), itemsSalePersonTxt.frame.origin.y - 2, selectEditReasonBtn.frame.size.width, selectEditReasonBtn.frame.size.height);
            
            
            voidItemDisplayLbl.frame = CGRectMake( editPriceDisplayLbl.frame.origin.x, salesPersonDisplayLbl.frame.origin.y , editPriceDisplayLbl.frame.size.width, editPriceDisplayLbl.frame.size.height);
            
            voidItemDisplayUnderLineLbl.frame =  CGRectMake( editPriceDisplayLbl.frame.origin.x, voidItemDisplayLbl.frame.origin.y + voidItemDisplayLbl.frame.size.height , editPriceDisplayUnderLineLbl.frame.size.width, productDeatilsDisplayUnderLineLbl.frame.size.height);
            
            
            isItemVoidLbl.frame = CGRectMake( voidItemDisplayLbl.frame.origin.x, voidItemDisplayUnderLineLbl.frame.origin.y + voidItemDisplayUnderLineLbl.frame.size.height + 10, itemEditedPriceReasonLbl.frame.size.width + 10, itemMrpLbl.frame.size.height);
            
            semiColomn_21.frame = CGRectMake( semiColomn_20.frame.origin.x + 10, isItemVoidLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            
            
            isItemVoidTxt.frame = CGRectMake( itemEditPriceReasonTxt.frame.origin.x + 10, (isItemVoidLbl.frame.origin.y - 5), (itemSkuIdValueLbl.frame.size.width + 10)/2, itemEditPriceReasonTxt.frame.size.height + 5);
            
            
            isVoidBtn.frame = CGRectMake( isItemVoidTxt.frame.origin.x + isItemVoidTxt.frame.size.width - (isItemVoidTxt.frame.size.height + 10), isItemVoidTxt.frame.origin.y - 4, selectEditReasonBtn.frame.size.width, selectEditReasonBtn.frame.size.height);
            
            
            itemVoidReasonLbl.frame = CGRectMake(voidItemDisplayLbl.frame.origin.x , isItemVoidTxt.frame.origin.y + isItemVoidTxt.frame.size.height + 10, isItemVoidLbl.frame.size.width, isItemVoidLbl.frame.size.height);
            
            semiColomn_22.frame = CGRectMake( semiColomn_21.frame.origin.x, itemVoidReasonLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
            
            
            itemVoidReasonTxt.frame = CGRectMake( isItemVoidTxt.frame.origin.x, (itemVoidReasonLbl.frame.origin.y - 5), itemEditPriceReasonTxt.frame.size.width -10, isItemVoidTxt.frame.size.height);
            
            
            selectVoidReasonBtn.frame = CGRectMake(  itemVoidReasonTxt.frame.origin.x + itemVoidReasonTxt.frame.size.width - (itemVoidReasonTxt.frame.size.height + 10), itemVoidReasonTxt.frame.origin.y - 4, selectEditReasonBtn.frame.size.width, selectEditReasonBtn.frame.size.height);
            
            
            
            okEditItemDeatilsBtn.layer.cornerRadius  = 0.0f;
            cancelItemEditDetailsViewBtn.layer.cornerRadius  = 0.0f;
            
            okEditItemDeatilsBtn.frame = CGRectMake( itemPrecentageDiscountTxt.frame.origin.x, itemsSalePersonTxt.frame.origin.y + itemsSalePersonTxt.frame.size.height + 80, 100, 35);
            
            
            
            cancelItemEditDetailsViewBtn.frame = CGRectMake( okEditItemDeatilsBtn.frame.origin.x + okEditItemDeatilsBtn.frame.size.width + 150, okEditItemDeatilsBtn.frame.origin.y, okEditItemDeatilsBtn.frame.size.width, okEditItemDeatilsBtn.frame.size.height);
            
            
            editItemDetailsView.frame = CGRectMake( (transperentView.frame.size.width - headerlabel.frame.size.width) / 2, (transperentView.frame.size.height - (okEditItemDeatilsBtn.frame.origin.y +  okEditItemDeatilsBtn.frame.size.height + 12 + 20)) / 2, headerlabel.frame.size.width, okEditItemDeatilsBtn.frame.origin.y +  okEditItemDeatilsBtn.frame.size.height + 12);
            
            //added on 14/03/2018....
            if(isNewReturnBill)
                editItemDetailsView.frame = CGRectMake( (transperentView.frame.size.width - headerlabel.frame.size.width) / 2, (transperentView.frame.size.height - (okEditItemDeatilsBtn.frame.origin.y +  okEditItemDeatilsBtn.frame.size.height)) / 2, headerlabel.frame.size.width, okEditItemDeatilsBtn.frame.origin.y +  okEditItemDeatilsBtn.frame.size.height + 12);
            
            
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:editItemDetailsView andSubViews:YES fontSize:18 cornerRadius:0];
            
            headerlabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
            manualDiscountDisplayLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            salesPersonDisplayLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            voidItemDisplayLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            itemDescriptionValueLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
            itemTaxRateValueLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:14];
        }
        else{
            
        }
        
        //populating data into textfields....
        
        @try {
            
            int selectedItemNo = (int)sender.tag;
            
            
            if(cartTotalItems.count > selectedItemNo){
                
                //changed on 04/12/2017....
                NSUInteger selectedItemCount = [cartItem indexOfObject:cartTotalItems[sender.tag]];
                
                NSArray * itemDetailsFromCartTotalItemsListArr = [cartItem[selectedItemCount] componentsSeparatedByString:@"#"];
                
                itemSkuIdValueLbl.text = itemDetailsFromCartTotalItemsListArr[0];
                itemDescriptionValueLbl.text = itemDetailsFromCartTotalItemsListArr[1];
                //itemTaxRateValueLbl
                stockQtyValueLbl.text = itemDetailsFromCartTotalItemsListArr[3];
                itemSalePriceValueLbl.text  = [NSString stringWithFormat:@"%@",itemDetailsFromCartTotalItemsListArr[9]];
                
                itemMrpValueLbl.text =  itemSalePriceValueLbl.text;
                
                itemEditPriceTxt.text = [NSString stringWithFormat:@"%@",itemDetailsFromCartTotalItemsListArr[4]];
                
                if(editedPriceArr.count > sender.tag){
                    
                    itemEditPriceTxt.text =  [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:editedPriceArr[sender.tag] defaultReturn:@"0.0"] floatValue]];
                }
                else {
                    
                    itemEditPriceTxt.text =  @"0.00";
                }
                
                if(productInfoArr.count > sender.tag){
                    
                    NSDictionary * dic = productInfoArr[sender.tag];
                    
                    itemEditPriceReasonTxt.text =  [self checkGivenValueIsNullOrNil:[dic valueForKey:EDIT_PRICE_REASON] defaultReturn:@""];
                }
                
                
                itemEditQtyTxt = [[UITextField alloc] init];
                itemEditQtyTxt.text = itemDetailsFromCartTotalItemsListArr[5];
                itemEditQtyTxt.hidden = true;
                
                //below code is for displaying the tax information....
                
                itemTaxRateValueLbl.text = @"";
                
                if(taxArr.count > selectedItemNo){
                    NSArray * taxDicArr = taxArr[selectedItemNo];
                    
                    NSString * taxRateKey = @"taxRate";
                    NSString * taxCodeStr = @"";
                    
                    float unitPrice = [self getUnitPriceForItemAt:selectedItemNo];
                    
                    for (NSDictionary * taxDic in taxDicArr) {
                        
                        float taxRateValue = [[taxDic valueForKey:taxRateKey] floatValue];
                        
                        taxCodeStr = [taxDic valueForKey:@"taxCode"];
                        
                        for(NSDictionary * saleRangeListDic in [taxDic valueForKey:SALE_RANGES_LIST]) {
                            
                            if( ([[saleRangeListDic valueForKey:SALE_VALUE_FROM] floatValue] <= unitPrice) && ( unitPrice <= [[saleRangeListDic valueForKey:SALE_VALUE_TO] floatValue])){
                                
                                taxRateValue = [[saleRangeListDic valueForKey:taxRateKey] floatValue];
                                break;
                            }
                        }
                        
                        itemTaxRateValueLbl.text = [NSString stringWithFormat:@"%@%@%@%.2f%@", itemTaxRateValueLbl.text,taxCodeStr,@":",taxRateValue,@"% "];
                    }
                }
                
                if(!(itemTaxRateValueLbl.text).length)
                    itemTaxRateValueLbl.text = @"0.00 %";
                
            }
            
        } @catch (NSException *exception) {
            
        }
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  In this method we are changing UIButton image and user interaction based on the....
 * @date
 * @method       changeDiscountionType:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */


-(IBAction)changeDiscountionType:(id)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    @try{
        
        
        if(!isManualDiscounts){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"discount_is_not_applicable", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
            return;
        }
        
        if ((UIButton *)sender == isFlatDiscBtn) {
            [isFlatDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
            [isPercentileDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
            isFlatDisc = TRUE;
            itemFlatDiscountTxt.text = @"";
            itemPrecentageDiscountTxt.text = @"";
            itemPrecentageDiscountValueTxt.text = @"";
            itemPrecentageDiscountTxt.userInteractionEnabled = false;
            itemFlatDiscountTxt.userInteractionEnabled = TRUE;
            [itemFlatDiscountTxt becomeFirstResponder];
            itemFlatDiscountTxt.backgroundColor = [UIColor whiteColor];
            itemPrecentageDiscountTxt.backgroundColor = [UIColor lightGrayColor];
        }
        else{
            
            [isFlatDiscBtn setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
            [isPercentileDiscBtn setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
            isFlatDisc = false;
            itemFlatDiscountTxt.text = @"";
            itemPrecentageDiscountTxt.text = @"";
            itemPrecentageDiscountValueTxt.text = @"";
            itemPrecentageDiscountTxt.userInteractionEnabled = TRUE;
            itemFlatDiscountTxt.userInteractionEnabled = FALSE;
            [itemPrecentageDiscountTxt becomeFirstResponder];
            itemFlatDiscountTxt.backgroundColor = [UIColor lightGrayColor];
            itemPrecentageDiscountTxt.backgroundColor = [UIColor whiteColor];
        }
    }
    @catch(NSException * exception){
        
    }
    
}

/**
 * @description  here we are vadliation all related changes and committing them if all are valide....
 * @date
 * @method       commitAllItemChanges:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)commitAllItemChanges:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    NSArray * temp1 = [cartTotalItems[sender.tag] componentsSeparatedByString:@"#"];
    
    @try {
        
        BOOL commitEditPriceChange = false;
        float y_axis = self.view.frame.size.height/2;
        
        NSString * editedPriceStr = [itemEditPriceTxt.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        //        NSString * editedPriceReasonStr = itemEditPriceReasonTxt.text;
        
        if(!editedPriceStr.length){
            
            editedPriceStr = @"0.00";
        }
        
        if(!commitEditPriceChange  && editedPriceStr.floatValue > 0){
            y_axis = transperentView.frame.size.height / 2;
            
            if(editedPriceStr.length == 0){
                
                
                NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_valide_price", nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                
                return;
            }
            else if((!(itemEditPriceReasonTxt.text).length) && (editedPriceStr.floatValue)){
                
                y_axis = transperentView.frame.size.height / 2;
                
                NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_select_the_reason_for_editing_the_item_price", nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                
                return;
            }
            
            commitEditPriceChange = true;
        }
        
        //end of validating the Price changes....
        
        //start of validating the Qty changes....
        y_axis = transperentView.frame.size.height / 2;
        
        
        if((itemEditQtyTxt.text).floatValue == 0){
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"enter_valide_quantity", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            return;
        }
        //changed by Srinivasulu on 21/04/2018....
        //        else if ((![[zeroStockAvailInfoArr objectAtIndex:[sender tag]] boolValue] && ([itemEditQtyTxt.text floatValue] > [[[[cartTotalItems objectAtIndex:[sender tag]] componentsSeparatedByString:@"#"] objectAtIndex:3] floatValue])) && (!isOfflineService)) {
        else if ((![zeroStockAvailInfoArr[sender.tag] boolValue] && ((itemEditQtyTxt.text).floatValue > [cartTotalItems[sender.tag] componentsSeparatedByString:@"#"][3].floatValue)) && (!isOfflineService || isMasterCounter)) {
            
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"quantity_should_be_less_than_or_equal_to_available_quantity", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            return;
        }
        
        
        //end of validating the Qty changes....
        
        //start of validating the void item....
        
        if([isItemVoidTxt.text isEqualToString:isVoidItemArr[0]]  &&  !(itemVoidReasonTxt.text).length){
            
            //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"please_select_the_item_void_reason", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
            //            [alert show];
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_select_the_item_void_reason", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            return;
        }
        
        //end of validating the void item....
        
        float itemNewPrice = editedPriceStr.floatValue;
        
        
        
        if(editedPriceStr.floatValue <= 0){
            
            itemNewPrice = [temp1[4] floatValue];
        }
        
        NSString * itemSavePrice = [NSString stringWithFormat:@"%.2f", itemNewPrice];
        
        
        
        NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[sender.tag]];
        NSArray * temp = [cartItem[positionCount] componentsSeparatedByString:@"#"];
        
        itemNewPrice = itemNewPrice * [temp[5] floatValue];
        
        if(onlineDealDiscountPriceArr.count > sender.tag)
            itemNewPrice -= [onlineDealDiscountPriceArr[sender.tag] floatValue];
        
        if(onlineOfferDiscountPriceArr.count > sender.tag)
            itemNewPrice -= [onlineOfferDiscountPriceArr[sender.tag] floatValue];
        
        float fraction = 0;
        if (turnoverofferDiscount > 0) {
            
            fraction = ((itemNewPrice / totalBeforeTurnOver) * 100);
            itemNewPrice = itemNewPrice - ((turnoverofferDiscount * fraction) / 100);
        }
        
        if(otherDiscountValue.floatValue > 0){
            
            itemNewPrice = itemNewPrice - (itemNewPrice  * (otherDiscountValue.floatValue/100.0));
        }
        
        BOOL isValide = true;
        
        //verify the FlatDisc
        
        NSString * value = [itemFlatDiscountTxt.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        
        
        if ((value.floatValue > itemNewPrice) && isFlatDisc)
            isValide = false;
        
        else if( [itemPrecentageDiscountTxt.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]].floatValue > 100)
            isValide = false;
        
        //changed on 16/10/2018...
        if (!isValide && !([isItemVoidTxt.text isEqualToString:isVoidItemArr[0]]  &&  (itemVoidReasonTxt.text).length)) {
            
            //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"discount_amount_should_not_exceeds_item_cost", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
            //            [alert show];
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"discount_amount_should_not_exceeds_item_cost", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            return;
        }
        
        
        if(isValide){
            
            if (isFlatDisc) {
                
                itemDiscountArr[sender.tag] = @((itemFlatDiscountTxt.text).floatValue);
            }
            else {
                
                float discountedPrice = 0;
                
                discountedPrice = (itemNewPrice * (itemPrecentageDiscountTxt.text).floatValue) / 100;
                itemDiscountArr[sender.tag] = @(discountedPrice);
            }
            
            itemDiscountDescArr[sender.tag] = @"";
            
            
            if(isItemFlatDiscountedArr.count > sender.tag){
                
                isItemFlatDiscountedArr[sender.tag] = @(isFlatDisc);
            }
            
        }
        
        
        NSMutableDictionary * tempEmpDic = [NSMutableDictionary new];
        [tempEmpDic setValue:itemsSalePersonDeptTxt.text forKey:kItemDept];
        [tempEmpDic setValue:itemsSalePersonSubDeptTxt.text forKey:kItemSubDept];
        [tempEmpDic setValue:itemsSalePersonIdTxt.text forKey:kItemSpecificEmplId];
        [tempEmpDic setValue:itemsSalePersonTxt.text forKey:kItemSpecificEmplName];
        
        if( pluCodeList == nil)
            pluCodeList = [NSMutableArray new];
        
        if(pluCodeList.count != cartTotalItems.count){
            
            if(pluCodeList.count)
                [pluCodeList removeAllObjects];
            
            for (int i = 0; i < cartTotalItems.count; i++) {
                
                NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                if(itemDetails.count > 9)
                    [pluCodeList addObject:itemDetails[8]];
            }
        }
        
        if(pluCodeList.count > sender.tag)
            employeeDic[pluCodeList[sender.tag]] = tempEmpDic;
        
        for(NSString * pluDic in pluCodeList){
            
            if(![employeeDic.allKeys  containsObject:pluDic]){
                
                employeeDic[pluDic] = tempEmpDic;
            }
        }
        
        
        NSMutableDictionary * productInfoDic = [productInfoArr[sender.tag] mutableCopy];
        
        if(editedPriceStr.floatValue > 0){
            
            editedPriceArr[sender.tag] = editedPriceStr;
            productInfoDic[EDIT_PRICE_REASON] = itemEditPriceReasonTxt.text;
        }
        
        //added by roja on 29/07/2019...
        if([productInfoDic.allKeys containsObject:ITEM_TYPE_] && ([[productInfoDic valueForKey:ITEM_TYPE_] caseInsensitiveCompare:WALLET] == NSOrderedSame)) {
            
            walletCreditAmt = editedPriceStr.floatValue;
            
        }
        //upto here added by roja on 29/07/2019...

            
        cartItemDetails[positionCount] = [NSString stringWithFormat:@"%.2f",(itemEditQtyTxt.text).floatValue];
        
        productInfoArr[sender.tag] = productInfoDic;
        
        
        
        //start of saving all user entered data....
        
        //editedPriceStr ---- for priceSaving....
        
        cartItem[positionCount] = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", temp[3], @"#", itemSavePrice, @"#", [NSString stringWithFormat:@"%.2f",(itemEditQtyTxt.text).floatValue], @"#", temp[6], @"#", temp[7] ,@"#",temp[8], @"#", temp[9]]; //@"#", temp[10] added by roja on 20/11/2019... // WALLET_RELATED
        
        cartTotalItems[sender.tag] = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", temp[3], @"#", itemSavePrice, @"#", [NSString stringWithFormat:@"%.2f",(itemEditQtyTxt.text).floatValue], @"#", temp[6], @"#", temp[7] ,@"#", temp[8], @"#", temp[9]]; //@"#", temp[10] added by roja on 20/11/2019... // WALLET_RELATED
        
        
        
        if([isItemVoidTxt.text isEqualToString:isVoidItemArr[0]]  &&  (itemVoidReasonTxt.text).length){
            
            [self delRow:sender];
        }
        else{
            
            
            //changed by Srinivasulu on 13/02/2018....
            
            if (isToCallApplyCampaigns && !isNewReturnBill) {
                
                float price = 0;
                
                for (int i=0; i<cartItem.count; i++) {
                    
                    price = price + ([cartItem[i] componentsSeparatedByString:@"#"][5].intValue*[cartItem[i] componentsSeparatedByString:@"#"][4].floatValue);
                }
                
                NSMutableDictionary *inputDic = [NSMutableDictionary new];
                [inputDic setValue:temp[0] forKey:@"skuID"];
                [inputDic setValue:[NSString stringWithFormat:@"%.2f",[temp[5] floatValue]] forKey:@"qty"];
                [inputDic setValue:[NSString stringWithFormat:@"%.2f",price] forKey:@"totalPrice"];
                [inputDic setValue:[NSString stringWithFormat:@"%.02f",([temp[4] floatValue])] forKey:@"price"];
                
                [HUD setHidden:NO];
                
                [self callOffersForScanning:[inputDic valueForKey:@"skuID"] qty:[inputDic valueForKey:@"qty"] total:[inputDic valueForKey:@"totalPrice"] itemPrice:[inputDic valueForKey:@"price"]];
                
                
                //            [HUD showWhileExecuting:@selector(calculateDealsAndOffers:) onTarget:self withObject:inputDic animated:true];
                
                
                //                [cartTable reloadData];
                
                if (dealDataItems.count!=0) {                   //removing deals....
                    
                    for (int i = 0; i < dealDataItems.count; i++) {
                        
                        DealsController *_dealsController = dealDataItems[i];
                        _dealsController.isDealApplied = NO;
                    }
                }
                
                //                [self updateValues];
                //
                //                //commented by Srinivasulu on 23/08/2017...
                //                //reason inorder to redue the crashs acrossed around this variable.. It has changed from class varible to local varible....
                //
                //                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                //
                //                //upto here on 23/08/2017....
                //
                //                [defaults setValue:[WebServiceUtility getCurrentDate] forKey:SCAN_END_TIME];
                //                [self saveCartItems:cartTotalItems];
                //
                //                if ([transperentView isDescendantOfView:self.view])
                //                    [transperentView removeFromSuperview];
            }
            //            else{
            
            [cartTable reloadData];
            
            [self updateValues];
            
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            
            [defaults setValue:[WebServiceUtility getCurrentDate] forKey:SCAN_END_TIME];
            [self saveCartItems:cartTotalItems];
            
            if ([transperentView isDescendantOfView:self.view])
                [transperentView removeFromSuperview];
            //            }
            
            //upto here on 13/02/2018....
            
            
        }
        
    } @catch (NSException *exception) {
        
        [HUD setHidden:YES];
    } @finally {
        
    }
    
}

/**
 * @description  here we are dismissing the editItemDetailsView....
 * @date
 * @method       closeEditItemDetailsView:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)closeEditItemDetailsView:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        transperentView.hidden = YES;
        
        if ([transperentView isDescendantOfView:self.view])
            [transperentView removeFromSuperview];
        
        if(itemCancelReasonTxt != nil)
            itemCancelReasonTxt.text = @"";
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

#pragma -mark methods modified by Srinivasulu from november 2017....

/**
 * @description  here we are populating the card information GUI....
 * @date
 * @method       populateCardDetailsView
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateCardDetailsView {
    
    @try {
        
        //        UIView * billSummaryView;
        //
        //        UILabel * totalBillSummaryBackGroundLbl;
        //        UILabel * totalBillSummaryLbl;
        //
        //        UILabel * totalBilledItemsLbl;
        //        UILabel * totalBilledItemsValueLbl;
        //        UILabel * totalBillCostLbl;
        //        UILabel * totalBillCostValueLbl;
        //        UILabel * totalBillDiscountLbl;
        //        UILabel * totalBillDiscountValueLbl;
        //        UILabel * totalBillTaxLbl;
        //        UILabel * totalBillTaxValueLbl;
        //        UILabel * totalBillShipmentCostLbl;
        //        UILabel * totalBillShipmentCostValueLbl;
        //        UILabel * totalBillNetCostLbl;
        //        UILabel * totalBillNetCostValueLbl;
        //
        //        UILabel * underLineLbl_1;
        //        UILabel * underLineLbl_2;
        //
        //        label = [[UILabel alloc] init] ;
        ////        label.alpha = 0.8f;
        //        label.textAlignment = NSTextAlignmentCenter;
        //        label.layer.masksToBounds = YES;
        //        label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        //        label.textColor = [UIColor whiteColor];
        //
        //
        //        backbutton = [[UIButton alloc] init];
        //        [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        //        UIImage * image = [UIImage imageNamed:@"delete.png"];
        //        [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
        //
        //        //BillSummary Creation..
        //        billSummaryView = [[UIView alloc] init];
        //        billSummaryView.backgroundColor = [UIColor clearColor];
        //
        //        totalBillSummaryBackGroundLbl =  [[UILabel alloc] init];
        //        totalBillSummaryBackGroundLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillSummaryBackGroundLbl.layer.masksToBounds = YES;
        //        totalBillSummaryBackGroundLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        //        totalBillSummaryBackGroundLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillSummaryLbl =  [[UILabel alloc] init];
        //        totalBillSummaryLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillSummaryLbl.layer.masksToBounds = YES;
        //        totalBillSummaryLbl.backgroundColor = [UIColor blackColor];
        //        totalBillSummaryLbl.textColor = [UIColor whiteColor];
        //
        //        totalBilledItemsLbl  =  [[UILabel alloc] init];
        //        totalBilledItemsLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBilledItemsLbl.layer.masksToBounds = YES;
        //        totalBilledItemsLbl.backgroundColor = [UIColor blackColor];
        //        totalBilledItemsLbl.textColor = [UIColor whiteColor];
        //
        //        totalBilledItemsValueLbl =  [[UILabel alloc] init];
        //        totalBilledItemsValueLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBilledItemsValueLbl.layer.masksToBounds = YES;
        //        totalBilledItemsValueLbl.backgroundColor = [UIColor blackColor];
        //        totalBilledItemsValueLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillCostLbl =  [[UILabel alloc] init];
        //        totalBillCostLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillCostLbl.layer.masksToBounds = YES;
        //        totalBillCostLbl.backgroundColor = [UIColor blackColor];
        //        totalBillCostLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillCostValueLbl =  [[UILabel alloc] init];
        //        totalBillCostValueLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillCostValueLbl.layer.masksToBounds = YES;
        //        totalBillCostValueLbl.backgroundColor = [UIColor blackColor];
        //        totalBillCostValueLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillDiscountLbl =  [[UILabel alloc] init];
        //        totalBillDiscountLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillDiscountLbl.layer.masksToBounds = YES;
        //        totalBillDiscountLbl.backgroundColor = [UIColor blackColor];
        //        totalBillDiscountLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillDiscountValueLbl =  [[UILabel alloc] init];
        //        totalBillDiscountValueLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillDiscountValueLbl.layer.masksToBounds = YES;
        //        totalBillDiscountValueLbl.backgroundColor = [UIColor blackColor];
        //        totalBillDiscountValueLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillTaxLbl =  [[UILabel alloc] init];
        //        totalBillTaxLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillTaxLbl.layer.masksToBounds = YES;
        //        totalBillTaxLbl.backgroundColor = [UIColor blackColor];
        //        totalBillTaxLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillTaxValueLbl =  [[UILabel alloc] init];
        //        totalBillTaxValueLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillTaxValueLbl.layer.masksToBounds = YES;
        //        totalBillTaxValueLbl.backgroundColor = [UIColor blackColor];
        //        totalBillTaxValueLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillShipmentCostLbl =  [[UILabel alloc] init];
        //        totalBillShipmentCostLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillShipmentCostLbl.layer.masksToBounds = YES;
        //        totalBillShipmentCostLbl.backgroundColor = [UIColor blackColor];
        //        totalBillShipmentCostLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillShipmentCostValueLbl =  [[UILabel alloc] init];
        //        totalBillShipmentCostValueLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillShipmentCostValueLbl.layer.masksToBounds = YES;
        //        totalBillShipmentCostValueLbl.backgroundColor = [UIColor blackColor];
        //        totalBillShipmentCostValueLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillNetCostLbl =  [[UILabel alloc] init];
        //        totalBillNetCostLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillNetCostLbl.layer.masksToBounds = YES;
        //        totalBillNetCostLbl.backgroundColor = [UIColor blackColor];
        //        totalBillNetCostLbl.textColor = [UIColor whiteColor];
        //
        //        totalBillNetCostValueLbl =  [[UILabel alloc] init];
        //        totalBillNetCostValueLbl.textAlignment = NSTextAlignmentCenter;
        //        totalBillNetCostValueLbl.layer.masksToBounds = YES;
        //        totalBillNetCostValueLbl.backgroundColor = [UIColor blackColor];
        //        totalBillNetCostValueLbl.textColor = [UIColor whiteColor];
        //
        //        underLineLbl_1 = [[UILabel alloc] init];
        //        underLineLbl_1.backgroundColor = [UIColor grayColor];
        //
        //        underLineLbl_2 = [[UILabel alloc] init];
        //        underLineLbl_2.backgroundColor = [UIColor grayColor];
        //
        //        @try{
        //            backbutton.tag = 88;
        //
        //            label.text = NSLocalizedString(@"card_payment_details", nil);
        //        }
        //        @catch(NSException * exp){
        //
        //        }
        //
        //
        //        [cardDetailsView addSubview:label];
        //        [cardDetailsView addSubview:backbutton];
        //
        //        [cardDetailsView addSubview:totalBillSummaryBackGroundLbl];
        //        [cardDetailsView addSubview:totalBillSummaryLbl];
        //
        //        [cardDetailsView addSubview:totalBilledItemsLbl];
        //        [cardDetailsView addSubview:totalBilledItemsValueLbl];
        //        [cardDetailsView addSubview:totalBillCostLbl];
        //        [cardDetailsView addSubview:totalBillCostValueLbl];
        //        [cardDetailsView addSubview:totalBillDiscountLbl];
        //        [cardDetailsView addSubview:totalBillDiscountValueLbl];
        //        [cardDetailsView addSubview:totalBillTaxLbl];
        //        [cardDetailsView addSubview:totalBillTaxValueLbl];
        //        [cardDetailsView addSubview:totalBillShipmentCostLbl];
        //        [cardDetailsView addSubview:totalBillShipmentCostValueLbl];
        //        [cardDetailsView addSubview:totalBillNetCostLbl];
        //        [cardDetailsView addSubview:totalBillNetCostValueLbl];
        //
        //        [cardDetailsView addSubview:underLineLbl_1];
        //        [cardDetailsView addSubview:underLineLbl_2];
        //
        //        [cardDetailsView addSubview:billSummaryView];
        //
        //
        //        [self.view addSubview:cardDetailsView];
        //
        //
        //        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //            if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) { }
        //            else{ }
        //
        //            label.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
        //
        //            label.frame = CGRectMake( 0, 0, self.view.frame.size.width - 200, 55);
        //            backbutton.frame = CGRectMake( label.frame.size.width - 50, label.frame.origin.y + 10, 35, 35);
        //
        //            cardDetailsView.frame = CGRectMake( (self.view.frame.size.width - label.frame.size.width)/2, (self.view.frame.size.height - (label.frame.origin.y + label.frame.size.height))/2, label.frame.size.width, label.frame.origin.y + label.frame.size.height);
        //
        //            totalBillSummaryBackGroundLbl.frame = CGRectMake( 20, label.frame.origin.y + label.frame.size.height + 10, label.frame.size.width/2 - 100, 40);
        //
        //        }
        //        else{
        //
        //        }
        
        label = [[UILabel alloc] init] ;
        label.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        label.alpha = 0.8f;
        label.textAlignment = NSTextAlignmentLeft;
        label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label.textColor = [UIColor whiteColor];
        
        // close button to close the view ..
        backbutton = [[UIButton alloc] init] ;
        [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        
        UIImage *image = [UIImage imageNamed:@"delete.png"];
        [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
        
        cardInfoLbl = [[UILabel alloc] init] ;
        cardInfoLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
        cardInfoLbl.backgroundColor = [UIColor clearColor];
        cardInfoLbl.textColor = [UIColor whiteColor];
        
        approvalCodeLbl = [[UILabel alloc] init] ;
        approvalCodeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
        approvalCodeLbl.backgroundColor = [UIColor clearColor];
        approvalCodeLbl.textColor = [UIColor whiteColor];
        
        bankNameLbl = [[UILabel alloc] init] ;
        bankNameLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
        bankNameLbl.backgroundColor = [UIColor clearColor];
        bankNameLbl.textColor = [UIColor whiteColor];
        
        
        
        payBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [payBtn addTarget:self action:@selector(cardPaymentCall) forControlEvents:UIControlEventTouchUpInside];
        payBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        payBtn.titleLabel.textColor = [UIColor whiteColor];
        payBtn.backgroundColor = [UIColor grayColor];
        
        UIButton  *cancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [cancelBtn addTarget:self action:@selector(backToPaymentView) forControlEvents:UIControlEventTouchUpInside];
        cancelBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        cancelBtn.titleLabel.textColor = [UIColor whiteColor];
        cancelBtn.backgroundColor = [UIColor grayColor];
        
        cardInfoTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        
        //added by Srinivasulu on 21/11/2017....
        
        UILabel * cardTypeLbl = [[UILabel alloc] init] ;
        cardTypeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:16];
        cardTypeLbl.backgroundColor = [UIColor clearColor];
        cardTypeLbl.textColor = [UIColor whiteColor];
        
        // close button to close the view ..
        UIImage *  buttonImage_;
        UIButton * showListOfCardTypesBtn;
        
        buttonImage_ = [UIImage imageNamed:@"arrow_1.png"];
        
        showListOfCardTypesBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfCardTypesBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
        [showListOfCardTypesBtn addTarget:self
                                   action:@selector(showListOfCardTypes:) forControlEvents:UIControlEventTouchDown];
        
        //upto here on 21/11/2017....
        
        @try {
            
            backbutton.tag = 88;
            
            label.text = NSLocalizedString(@"card_payment_details", nil);
            cardInfoLbl.text = NSLocalizedString(@"card_info", nil);
            approvalCodeLbl.text = NSLocalizedString(@"approval_code", nil);
            bankNameLbl.text = NSLocalizedString(@"bank_name", nil);
            
            cardTypeLbl.text = NSLocalizedString(@"card_type", nil);
            
            [payBtn setTitle:NSLocalizedString(@"ok", nil)    forState:UIControlStateNormal];
            [cancelBtn setTitle:NSLocalizedString(@"cancel", nil)    forState:UIControlStateNormal];
            
            
            
            if(cardTypesArr == nil){
                
                
                //cardTypesTbl table creation....
                cardTypesTbl = [[UITableView alloc] init];
                cardTypesTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
                cardTypesTbl.dataSource = self;
                cardTypesTbl.delegate = self;
                (cardTypesTbl.layer).borderWidth = 1.0f;
                cardTypesTbl.layer.cornerRadius = 3;
                cardTypesTbl.layer.borderColor = [UIColor grayColor].CGColor;
                
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                
                if ( ! ([[defaults valueForKey:CARD_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:CARD_OPTIONS] == nil)) {
                    
                    cardTypesArr = [[defaults valueForKey:CARD_OPTIONS] mutableCopy];
                    
                    if(cardTypesArr.count){
                        cardTypeTxt.text = [self checkGivenValueIsNullOrNil:[cardTypesArr[0] valueForKey:TENDER_NAME] defaultReturn:@""];
                        
                        if(billPaymentTendeInfoDic.allKeys.count)
                            [billPaymentTendeInfoDic removeAllObjects];
                        
                        billPaymentTendeInfoDic = [cardTypesArr[0] mutableCopy];
                    }
                }
            }
        } @catch (NSException *exception) {
            
        }
        
        [cardDetailsView addSubview:label];
        [cardDetailsView addSubview:backbutton];
        [cardDetailsView addSubview:cardInfoLbl];
        [cardDetailsView addSubview:approvalCodeLbl];
        [cardDetailsView addSubview:bankNameLbl];
        [cardDetailsView addSubview:cardInfoTxt];
        [cardDetailsView addSubview:approvalCodeTxt];
        [cardDetailsView addSubview:bankNameTxt];
        
        [cardDetailsView addSubview:cardTypeLbl];
        [cardDetailsView addSubview:cardTypeTxt];
        [cardDetailsView addSubview:showListOfCardTypesBtn];
        
        [cardDetailsView addSubview:payBtn];
        [cardDetailsView addSubview:cancelBtn];
        [self.view addSubview:cardDetailsView];
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                
            }
            else{
                
            }
            //        cardDetailsView.frame = CGRectMake(230, 80, 500, 450);
            label.frame = CGRectMake(0, 0, 500, 70);
            backbutton.frame = CGRectMake(440, 10.0, 45.0, 45.0);
            
            cardInfoLbl.frame = CGRectMake( label.frame.origin.x + 20, label.frame.origin.y + label.frame.size.height + 20, (label.frame.size.width - 100) / 2, 40);
            cardInfoTxt.frame = CGRectMake( cardInfoLbl.frame.origin.x + cardInfoLbl.frame.size.width, cardInfoLbl.frame.origin.y, cardInfoLbl.frame.size.width + 20, cardInfoLbl.frame.size.height);
            
            approvalCodeLbl.frame = CGRectMake( cardInfoLbl.frame.origin.x, cardInfoLbl.frame.origin.y + cardInfoLbl.frame.size.height + 20, cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
            approvalCodeTxt.frame = CGRectMake( cardInfoTxt.frame.origin.x, approvalCodeLbl.frame.origin.y, cardInfoTxt.frame.size.width, cardInfoTxt.frame.size.height);
            
            bankNameLbl.frame = CGRectMake( cardInfoLbl.frame.origin.x, approvalCodeLbl.frame.origin.y + approvalCodeLbl.frame.size.height + 20, cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
            bankNameTxt.frame = CGRectMake( cardInfoTxt.frame.origin.x, bankNameLbl.frame.origin.y, cardInfoTxt.frame.size.width, cardInfoTxt.frame.size.height);
            
            cardTypeLbl.frame = CGRectMake( cardInfoLbl.frame.origin.x, bankNameLbl.frame.origin.y + bankNameLbl.frame.size.height + 20, cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
            cardTypeTxt.frame = CGRectMake( cardInfoTxt.frame.origin.x, cardTypeLbl.frame.origin.y, cardInfoTxt.frame.size.width, cardInfoTxt.frame.size.height);
            
            showListOfCardTypesBtn.frame = CGRectMake( (cardTypeTxt.frame.origin.x + cardTypeTxt.frame.size.width - (cardTypeTxt.frame.size.height * 1.4)), cardTypeTxt.frame.origin.y - 10, cardTypeTxt.frame.size.height * 1.4, cardTypeTxt.frame.size.height * 1.4);
            
            
            payBtn.frame = CGRectMake( (label.frame.size.width - 300) / 3, cardTypeLbl.frame.origin.y + cardTypeLbl.frame.size.height + 20, 150, 45);
            
            cancelBtn.frame = CGRectMake( (2 * payBtn.frame.origin.x) + payBtn.frame.size.width, payBtn.frame.origin.y, payBtn.frame.size.width, payBtn.frame.size.height);
            
            cardDetailsView.frame = CGRectMake( (self.view.frame.size.width - label.frame.size.width) / 2, (self.view.frame.size.height - (payBtn.frame.origin.y +  payBtn.frame.size.height + 20)) / 2, label.frame.size.width, payBtn.frame.origin.y +  payBtn.frame.size.height + 20);
            
            
            label.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
            
            cardInfoLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            approvalCodeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            bankNameLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            cardTypeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            
            cardInfoTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            approvalCodeTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            bankNameTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:20];
            cardTypeTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            
            payBtn.layer.cornerRadius = 10.0f;
            payBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
            cancelBtn.layer.cornerRadius = 10.0f;
            cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        }
        else{
            
        }
        
        paymentView.hidden = YES;
        cardDetailsView.hidden = NO;
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are showing list of cardTypes avaliable....
 * @date         22/11/2017
 * @method       showListOfCardTypes:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showListOfCardTypes:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        float tableHeight = cardTypesArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = cardTypesArr.count * 33;
        
        if(cardTypesArr.count > 5)
            tableHeight = (tableHeight/cardTypesArr.count) * 5;
        
        [self showPopUpForTables:cardTypesTbl  popUpWidth:cardTypeTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:cardTypeTxt  showViewIn:cardPaymentView permittedArrowDirections:UIPopoverArrowDirectionUp];
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
}

/**
 * @description  it is an ........
 * @date         22/11/2017
 * @method       showOtherPaymentsView
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (void)showOtherPaymentsView{
    
    @try {
        couponView.hidden = NO;
        
        UILabel * headerNameLbl;
        UIImage * image;
        UIButton * closeOtherPaymentBtn;
        
        UIButton * confirmOtherPaymentBtn;
        
        UIButton * cancelOtherPaymentBtn;
        UIButton * conformOtherPaymentBtn;
        UILabel * totalPayedAmountLbl;
        
        UIImage *  buttonImage_;
        UIButton * showListOfOtherPaymentOptionsBtn;
        
        buttonImage_ = [UIImage imageNamed:@"arrow_1.png"];
        
        showListOfOtherPaymentOptionsBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfOtherPaymentOptionsBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
        [showListOfOtherPaymentOptionsBtn addTarget:self
                                             action:@selector(showListOfOtherPaymentOptions:) forControlEvents:UIControlEventTouchDown];
        
        
        
        
        transperentView = [[UIView alloc] init];
        transperentView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.7];
        
        
        headerNameLbl = [[UILabel alloc] init];
        headerNameLbl.textColor = [UIColor whiteColor];
        headerNameLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        headerNameLbl.textAlignment = NSTextAlignmentCenter;
        
        // close button to close the view ..
        image = [UIImage imageNamed:@"delete.png"];
        
        closeOtherPaymentBtn = [[UIButton alloc] init] ;
        [closeOtherPaymentBtn addTarget:self action:@selector(closeOtherPaymentsView:) forControlEvents:UIControlEventTouchUpInside];
        [closeOtherPaymentBtn setBackgroundImage:image    forState:UIControlStateNormal];
        
        
        otherPaymentTypeTxt = [[UITextField alloc] init];
        otherPaymentTypeTxt.borderStyle = UITextBorderStyleRoundedRect;
        otherPaymentTypeTxt.textColor = [UIColor blackColor];
        otherPaymentTypeTxt.backgroundColor = [UIColor whiteColor];
        otherPaymentTypeTxt.delegate = self;
        //        [otherPaymentTypeTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        
        otherPaymentReferenceNumTxt = [[UITextField alloc] init];
        otherPaymentReferenceNumTxt.borderStyle = UITextBorderStyleRoundedRect;
        otherPaymentReferenceNumTxt.textColor = [UIColor blackColor];
        otherPaymentReferenceNumTxt.backgroundColor = [UIColor whiteColor];
        otherPaymentReferenceNumTxt.delegate = self;
        
        otherPaymentCountTxt = [[UITextField alloc] init];
        otherPaymentCountTxt.borderStyle = UITextBorderStyleRoundedRect;
        otherPaymentCountTxt.textColor = [UIColor blackColor];
        otherPaymentCountTxt.backgroundColor = [UIColor whiteColor];
        otherPaymentCountTxt.delegate = self;
        otherPaymentCountTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        otherPaymentAmountTxt = [[UITextField alloc] init];
        otherPaymentAmountTxt.borderStyle = UITextBorderStyleRoundedRect;
        otherPaymentAmountTxt.textColor = [UIColor blackColor];
        otherPaymentAmountTxt.backgroundColor = [UIColor whiteColor];
        otherPaymentAmountTxt.delegate = self;
        otherPaymentAmountTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        confirmOtherPaymentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [confirmOtherPaymentBtn addTarget:self action:@selector(addNewOtherPaymentToBill:) forControlEvents:UIControlEventTouchUpInside];
        confirmOtherPaymentBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        //        confirmOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
        //        confirmOtherPaymentBtn.backgroundColor = [UIColor colorWithRed:(241/255.0) green:(246/255.0) blue:(241/255.0) alpha:1];
        
        conformOtherPaymentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [conformOtherPaymentBtn addTarget:self action:@selector(confirmOtherPaymentsView:) forControlEvents:UIControlEventTouchUpInside];
        conformOtherPaymentBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        //        conformOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
        //        conformOtherPaymentBtn.backgroundColor = [UIColor colorWithRed:(241/255.0) green:(246/255.0) blue:(241/255.0) alpha:1];
        
        cancelOtherPaymentBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [cancelOtherPaymentBtn addTarget:self action:@selector(closeOtherPaymentsView:) forControlEvents:UIControlEventTouchUpInside];
        cancelOtherPaymentBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        //        cancelOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
        //        cancelOtherPaymentBtn.backgroundColor = [UIColor colorWithRed:(241/255.0) green:(246/255.0) blue:(241/255.0) alpha:1];
        
        paymentRefNoLbl = [[CustomLabel alloc] init];
        [paymentRefNoLbl awakeFromNib];
        
        paymentModeLbl = [[CustomLabel alloc] init];
        [paymentModeLbl awakeFromNib];
        
        paymentValueLbl = [[CustomLabel alloc] init];
        [paymentValueLbl awakeFromNib];
        
        paymentCountLbl = [[CustomLabel alloc] init];
        [paymentCountLbl awakeFromNib];
        
        paymentTotalLbl = [[CustomLabel alloc] init];
        [paymentTotalLbl awakeFromNib];
        
        if(otherPaymentsDeatilsArr == nil)
            otherPaymentsDeatilsArr = [NSMutableArray new];
        else if(otherPaymentsDeatilsArr.count){
            [otherPaymentsDeatilsArr removeAllObjects];
            [otherPaymentsDetailsTbl reloadData];
        }
        
        otherPaymentsDetailsTbl = [[UITableView alloc] init];
        otherPaymentsDetailsTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
        otherPaymentsDetailsTbl.backgroundColor = [UIColor clearColor];
        otherPaymentsDetailsTbl.dataSource = self;
        otherPaymentsDetailsTbl.delegate = self;
        otherPaymentsDetailsTbl.tableFooterView = [[UIView  alloc] initWithFrame:CGRectZero];
        
        
        totalPayedAmountLbl = [[UILabel alloc] init];
        totalPayedAmountLbl.backgroundColor = [UIColor clearColor];
        totalPayedAmountLbl.textAlignment = NSTextAlignmentCenter;
        totalPayedAmountLbl.numberOfLines = 1;
        totalPayedAmountLbl.layer.borderWidth = 0;
        totalPayedAmountLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        totalPayedAmountLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        totalPayedAmountLbl.textColor = [UIColor whiteColor];
        
        otherPaymentTotalAmountLbl = [[UILabel alloc] init];
        otherPaymentTotalAmountLbl.backgroundColor = [UIColor whiteColor];
        otherPaymentTotalAmountLbl.textAlignment = NSTextAlignmentCenter;
        otherPaymentTotalAmountLbl.numberOfLines = 1;
        //        otherPaymentTotalAmountLbl.layer.borderWidth = 0;
        //        otherPaymentTotalAmountLbl.layer.borderColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4].CGColor;
        otherPaymentTotalAmountLbl.lineBreakMode = NSLineBreakByTruncatingTail;
        otherPaymentTotalAmountLbl.textColor = [UIColor blackColor];
        
        @try {
            
            headerNameLbl.text = NSLocalizedString(@"other_payments", nil);
            
            otherPaymentTypeTxt.placeholder = NSLocalizedString(@"select_payment_mode", nil);
            
            otherPaymentReferenceNumTxt.placeholder = NSLocalizedString(@"ref_number", nil);
            otherPaymentCountTxt.placeholder = NSLocalizedString(@"count", nil);
            otherPaymentAmountTxt.placeholder = NSLocalizedString(@"value", nil);
            
            //            confirmOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
            //            conformOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
            //            cancelOtherPaymentBtn.titleLabel.textColor = [UIColor blackColor];
            
            confirmOtherPaymentBtn.titleLabel.text = NSLocalizedString(@"OK", nil);
            conformOtherPaymentBtn.titleLabel.text = NSLocalizedString(@"pay", nil);
            cancelOtherPaymentBtn.titleLabel.text = NSLocalizedString(@"cancel_", nil);
            
            [confirmOtherPaymentBtn setTitle:NSLocalizedString(@"OK", nil) forState:UIControlStateNormal];
            [conformOtherPaymentBtn setTitle:NSLocalizedString(@"pay", nil) forState:UIControlStateNormal];
            [cancelOtherPaymentBtn setTitle:NSLocalizedString(@"cancel_", nil) forState:UIControlStateNormal];
            
            //            [confirmOtherPaymentBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            //            [conformOtherPaymentBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            //            [cancelOtherPaymentBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
            confirmOtherPaymentBtn.titleLabel.textColor = [UIColor whiteColor];
            confirmOtherPaymentBtn.backgroundColor = [UIColor grayColor];
            conformOtherPaymentBtn.titleLabel.textColor = [UIColor whiteColor];
            conformOtherPaymentBtn.backgroundColor = [UIColor grayColor];
            cancelOtherPaymentBtn.titleLabel.textColor = [UIColor whiteColor];
            cancelOtherPaymentBtn.backgroundColor = [UIColor grayColor];
            
            confirmOtherPaymentBtn.layer.cornerRadius = 5.0f;
            conformOtherPaymentBtn.layer.cornerRadius = 5.0f;
            cancelOtherPaymentBtn.layer.cornerRadius = 5.0f;
            otherPaymentTotalAmountLbl.layer.cornerRadius = 5.0f;
            otherPaymentTotalAmountLbl.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:0.8];
            otherPaymentTotalAmountLbl.layer.masksToBounds = YES;
            
            
            
            paymentRefNoLbl.text = NSLocalizedString(@"ref_no", nil);
            paymentModeLbl.text = NSLocalizedString(@"pay_mode", nil);
            paymentValueLbl.text = NSLocalizedString(@"value", nil);
            paymentCountLbl.text = NSLocalizedString(@"count", nil);
            paymentTotalLbl.text = NSLocalizedString(@"total_", nil);
            
            totalPayedAmountLbl.text = NSLocalizedString(@"total_amount_:", nil);
            
            
            if(otherPaymentsOptionsArr == nil){
                
                //denominstaionsTypeTbl table creation....
                otherPaymentsOptionsTbl = [[UITableView alloc] init];
                otherPaymentsOptionsTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
                otherPaymentsOptionsTbl.dataSource = self;
                otherPaymentsOptionsTbl.delegate = self;
                (otherPaymentsOptionsTbl.layer).borderWidth = 1.0f;
                otherPaymentsOptionsTbl.layer.cornerRadius = 3;
                otherPaymentsOptionsTbl.layer.borderColor = [UIColor grayColor].CGColor;
                
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                
                if ( ! ([[defaults valueForKey:COUPON_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:COUPON_OPTIONS] == nil)) {
                    
                    if(isNewReturnBill){
                        
                        otherPaymentsOptionsArr = [NSMutableArray new];
                        for(NSDictionary * dic in [defaults valueForKey:COUPON_OPTIONS]){
                            
                            if([[self checkGivenValueIsNullOrNil:[dic valueForKey:RETURN_TENDER] defaultReturn:@"0"] integerValue]){
                                
                                [otherPaymentsOptionsArr addObject:dic];
                            }
                        }
                        
                    }
                    else
                        otherPaymentsOptionsArr = [[defaults valueForKey:COUPON_OPTIONS] mutableCopy];
                    
                    
                    
                    if(billPaymentTendeInfoDic.allKeys.count)
                        [billPaymentTendeInfoDic removeAllObjects];
                    
                    billPaymentTendeInfoDic = [otherPaymentsOptionsArr[0] mutableCopy];
                }
                
                if(otherPaymentsOptionsArr.count)
                    otherPaymentTypeTxt.text = [otherPaymentsOptionsArr[0] valueForKey:TENDER_NAME];
                
            }
            
            
        } @catch (NSException *exception) {
            
        } @finally {
            
        }
        
        [couponView addSubview:headerNameLbl];
        [couponView addSubview:closeOtherPaymentBtn];
        
        [couponView addSubview:otherPaymentTypeTxt];
        [couponView addSubview:otherPaymentReferenceNumTxt];
        [couponView addSubview:otherPaymentCountTxt];
        [couponView addSubview:otherPaymentAmountTxt];
        
        [couponView addSubview:showListOfOtherPaymentOptionsBtn];
        
        [couponView addSubview:confirmOtherPaymentBtn];
        
        
        [couponView addSubview:paymentRefNoLbl];
        [couponView addSubview:paymentModeLbl];
        [couponView addSubview:paymentValueLbl];
        [couponView addSubview:paymentCountLbl];
        [couponView addSubview:paymentTotalLbl];
        
        [couponView addSubview:otherPaymentsDetailsTbl];
        
        [couponView addSubview:paymentTotalLbl];
        
        [couponView addSubview:conformOtherPaymentBtn];
        [couponView addSubview:cancelOtherPaymentBtn];
        
        [couponView addSubview:totalPayedAmountLbl];
        [couponView addSubview:otherPaymentTotalAmountLbl];
        
        [transperentView addSubview:couponView];
        
        
        //        [couponView.layer setBorderWidth:1.0f];
        //        [couponView.layer setCornerRadius:8.0f];
        couponView.backgroundColor = [UIColor blackColor];
        couponView.layer.borderColor = [UIColor whiteColor].CGColor;
        couponView.layer.borderWidth = 1.0f;
        
        
        [self.view addSubview:transperentView];
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            }
            else{
            }
            
            transperentView.frame = self.view.frame;
            
            headerNameLbl.frame = CGRectMake(0, 0, 680, 50);
            
            closeOtherPaymentBtn.frame =  CGRectMake( headerNameLbl.frame.size.width - 50, 5, 40, 40);
            
            otherPaymentTypeTxt.frame = CGRectMake( 10, headerNameLbl.frame.origin.y + headerNameLbl.frame.size.height + 10, 300, 40);
            
            
            showListOfOtherPaymentOptionsBtn.frame = CGRectMake( (otherPaymentTypeTxt.frame.origin.x + otherPaymentTypeTxt.frame.size.width - (otherPaymentTypeTxt.frame.size.height * 1.4)), otherPaymentTypeTxt.frame.origin.y - 7, otherPaymentTypeTxt.frame.size.height * 1.4, otherPaymentTypeTxt.frame.size.height * 1.4);
            
            otherPaymentReferenceNumTxt.frame = CGRectMake( otherPaymentTypeTxt.frame.origin.x, otherPaymentTypeTxt.frame.origin.y + otherPaymentTypeTxt.frame.size.height + 10, otherPaymentTypeTxt.frame.size.width, 40);
            otherPaymentAmountTxt.frame = CGRectMake( otherPaymentReferenceNumTxt.frame.origin.x + otherPaymentReferenceNumTxt.frame.size.width + 20, otherPaymentReferenceNumTxt.frame.origin.y, 100, 40);
            otherPaymentCountTxt.frame = CGRectMake( otherPaymentAmountTxt.frame.origin.x + otherPaymentAmountTxt.frame.size.width + 20, otherPaymentReferenceNumTxt.frame.origin.y, 100, 40);
            
            confirmOtherPaymentBtn.frame = CGRectMake( otherPaymentCountTxt.frame.origin.x + otherPaymentCountTxt.frame.size.width + 2, otherPaymentReferenceNumTxt.frame.origin.y, 80, 40);
            
            paymentRefNoLbl.frame = CGRectMake( otherPaymentTypeTxt.frame.origin.x, otherPaymentReferenceNumTxt.frame.origin.y + otherPaymentReferenceNumTxt.frame.size.height + 4, 0.65 * otherPaymentTypeTxt.frame.size.width, 40);
            paymentModeLbl.frame = CGRectMake( paymentRefNoLbl.frame.origin.x + paymentRefNoLbl.frame.size.width + 2, paymentRefNoLbl.frame.origin.y, otherPaymentTypeTxt.frame.size.width - (paymentRefNoLbl.frame.size.width + 2), 40);
            paymentValueLbl.frame = CGRectMake( paymentModeLbl.frame.origin.x + paymentModeLbl.frame.size.width + 2, paymentModeLbl.frame.origin.y, paymentModeLbl.frame.size.width, 40);
            paymentCountLbl.frame = CGRectMake( paymentValueLbl.frame.origin.x + paymentValueLbl.frame.size.width + 2, paymentModeLbl.frame.origin.y, paymentModeLbl.frame.size.width, 40);
            paymentTotalLbl.frame = CGRectMake( paymentCountLbl.frame.origin.x + paymentCountLbl.frame.size.width + 2, paymentModeLbl.frame.origin.y, (confirmOtherPaymentBtn.frame.origin.x + confirmOtherPaymentBtn.frame.size.width) - (paymentCountLbl.frame.origin.x + paymentCountLbl.frame.size.width + 2), 40);
            
            //aded by Srinivauslu on 11/12/2017....
            
            otherPaymentAmountTxt.frame = CGRectMake( otherPaymentReferenceNumTxt.frame.origin.x + otherPaymentReferenceNumTxt.frame.size.width + 2, otherPaymentReferenceNumTxt.frame.origin.y, paymentModeLbl.frame.size.width, 40);
            otherPaymentCountTxt.frame = CGRectMake( otherPaymentAmountTxt.frame.origin.x + otherPaymentAmountTxt.frame.size.width + 2, otherPaymentReferenceNumTxt.frame.origin.y, paymentModeLbl.frame.size.width, 40);
            
            confirmOtherPaymentBtn.frame = CGRectMake( paymentTotalLbl.frame.origin.x + paymentTotalLbl.frame.size.width - 100, otherPaymentReferenceNumTxt.frame.origin.y, 100, 40);
            
            //upto here on 11/12/2017....
            
            otherPaymentsDetailsTbl.frame = CGRectMake( 0, paymentRefNoLbl.frame.origin.y + paymentRefNoLbl.frame.size.height + 10, paymentTotalLbl.frame.origin.x + paymentTotalLbl.frame.size.width + 50, 250);
            
            conformOtherPaymentBtn.frame = CGRectMake( paymentRefNoLbl.frame.origin.x, otherPaymentsDetailsTbl.frame.origin.y + otherPaymentsDetailsTbl.frame.size.height + 10, 120, 40);
            
            cancelOtherPaymentBtn.frame = CGRectMake( conformOtherPaymentBtn.frame.origin.x + conformOtherPaymentBtn.frame.size.width + 20, conformOtherPaymentBtn.frame.origin.y, 120, 40);
            
            otherPaymentTotalAmountLbl.frame = CGRectMake(  paymentTotalLbl.frame.origin.x + paymentTotalLbl.frame.size.width -  paymentTotalLbl.frame.size.width, conformOtherPaymentBtn.frame.origin.y, paymentTotalLbl.frame.size.width, 40);
            
            totalPayedAmountLbl.frame = CGRectMake( otherPaymentTotalAmountLbl.frame.origin.x  -  (paymentTotalLbl.frame.size.width + 40), conformOtherPaymentBtn.frame.origin.y, paymentTotalLbl.frame.size.width + 40, 40);
            
            couponView.frame = CGRectMake( (transperentView.frame.size.width - headerNameLbl.frame.size.width) / 2, (self.view.frame.size.height - (conformOtherPaymentBtn.frame.origin.y +  conformOtherPaymentBtn.frame.size.height + 12)) / 2, headerNameLbl.frame.size.width, conformOtherPaymentBtn.frame.origin.y +  conformOtherPaymentBtn.frame.size.height + 12);
            
            if(isNewReturnBill)
                couponView.frame = CGRectMake( (transperentView.frame.size.width - headerNameLbl.frame.size.width) / 2, (self.view.frame.size.height + 80 - (conformOtherPaymentBtn.frame.origin.y +  conformOtherPaymentBtn.frame.size.height + 12)) / 2, headerNameLbl.frame.size.width, conformOtherPaymentBtn.frame.origin.y +  conformOtherPaymentBtn.frame.size.height + 12);
            
            [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:couponView andSubViews:YES fontSize:20.0f cornerRadius:0];
            
            //            confirmOtherPaymentBtn.titleLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0f];
            //            conformOtherPaymentBtn.titleLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0f];
            //            cancelOtherPaymentBtn.titleLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0f];
            
            headerNameLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:25.0f];
        }
        else{
            
        }
        
        //couponView
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are showing list of cardTypes avaliable....
 * @date         22/11/2017
 * @method       showListOfCardTypes:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By
 * @reason
 *
 */

-(void)showListOfOtherPaymentOptions:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        
        
        
        
        float tableHeight = otherPaymentsOptionsArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = otherPaymentsOptionsArr.count * 33;
        
        if(otherPaymentsOptionsArr.count > 5)
            tableHeight = (tableHeight/otherPaymentsOptionsArr.count) * 5;
        //--
        
        [self showPopUpForTables:otherPaymentsOptionsTbl  popUpWidth:otherPaymentTypeTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:otherPaymentTypeTxt  showViewIn:couponView permittedArrowDirections:UIPopoverArrowDirectionUp];
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
}

/**
 * @description  here we are dismissing the editItemDetailsView....
 * @date         23/11/2017
 * @method       closeOtherPaymentsView:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)addNewOtherPaymentToBill:(UIButton *)sender{
    
    @try {
        
        float comleteCouponsValue = 0;
        
        //        if([otherPaymentCountTxt.text length] && [otherPaymentAmountTxt.text length])
        //          comleteCouponsValue =[otherPaymentCountTxt.text floatValue] * [otherPaymentAmountTxt.text floatValue];
        
        for(NSDictionary * dic in otherPaymentsDeatilsArr){
            
            comleteCouponsValue = comleteCouponsValue + [[dic valueForKey:PAYMENT_TOTAL] floatValue];
        }
        
        if(!(otherPaymentReferenceNumTxt.text).length || !(otherPaymentCountTxt.text).length || !(otherPaymentAmountTxt.text).length || !(otherPaymentTypeTxt.text).length ){
            
            float y_axis = otherPaymentReferenceNumTxt.frame.origin.y + otherPaymentReferenceNumTxt.frame.size.width;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"please_enter_necessary_information", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
        }
        else if(comleteCouponsValue >=  (netPayLblVal.text).floatValue){
            
            float y_axis = otherPaymentReferenceNumTxt.frame.origin.y + otherPaymentReferenceNumTxt.frame.size.width;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"paid_amount_already_exceeded_the_bill_amount", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
        }
        else{
            BOOL isNew = true;
            
            for (int i = 0; i < otherPaymentsDeatilsArr.count; i++) {
                
                NSMutableDictionary * mutDic = otherPaymentsDeatilsArr[i];
                
                if([[mutDic valueForKey:PAYMENT_MODE] isEqualToString:otherPaymentTypeTxt.text] &&  ([[mutDic valueForKey:PAYMENT_TYPE] caseInsensitiveCompare:otherPaymentReferenceNumTxt.text] == NSOrderedSame)){
                    
                    
                    isNew = false;
                    [mutDic setValue:otherPaymentCountTxt.text forKey:PAYMENT_COUNT];
                    
                    [mutDic setValue:[NSString stringWithFormat:@"%.2f", ((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)]   forKey:PAYMENT_TOTAL];
                    [mutDic setValue:[NSString stringWithFormat:@"%.2f",((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)] forKey:PAID_AMT];
                    [mutDic setValue:[NSString stringWithFormat:@"%.2f",((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)] forKey:RECEIVED_AMOUNT];
                    
                    
                    otherPaymentsDeatilsArr[i] = mutDic;
                }
            }
            
            if(isNew){
                NSMutableDictionary * newDic = [NSMutableDictionary new];
                
                [newDic setValue:otherPaymentReferenceNumTxt.text  forKey:PAYMENT_TYPE];
                [newDic setValue:otherPaymentReferenceNumTxt.text forKey:COUPON_NO];
                
                [newDic setValue:otherPaymentTypeTxt.text  forKey:PAYMENT_MODE];
                [newDic setValue:otherPaymentCountTxt.text forKey:PAYMENT_COUNT];
                [newDic setValue:otherPaymentAmountTxt.text forKey:PAYMENT_VALUE];
                [newDic setValue:[NSString stringWithFormat:@"%.2f", ((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)]   forKey:PAYMENT_TOTAL];
                
                //                [newDic setValue:@"0.00" forKey:CHANGE_RETURN];
                
                [newDic setValue:otherPaymentReferenceNumTxt.text forKey:COUPON_NO];
                [newDic setValue:@"" forKey:CARD_TYPE];
                [newDic setValue:[NSString stringWithFormat:@"%.2f",((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)] forKey:PAID_AMT];
                [newDic setValue:[NSString stringWithFormat:@"%.2f",((otherPaymentCountTxt.text).floatValue * (otherPaymentAmountTxt.text).floatValue)] forKey:RECEIVED_AMOUNT];
                
                
                if(isNewReturnBill)
                    [newDic setValue:@YES forKey:TRANSACTION_TYPE_FLAG];
                
                //added by srinivasulu on 24/11/2017....
                
                if(billPaymentTendeInfoDic != nil && billPaymentTendeInfoDic.allKeys.count){
                    
                    //TENDER_NAME -- COUNTRY_CODE --  TENDER_CODE , TENDER_MODE --  TENDER_KEY
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""] forKey:MODE_OF_PAY];
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""] forKey:TENDER_NAME];
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:COUNTRY_CODE] defaultReturn:@""] forKey:COUNTRY_CODE];
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_CODE] defaultReturn:@""] forKey:TENDER_MODE];
                    [newDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_KEY] defaultReturn:@""] forKey:TENDER_KEY];
                    
                }
                
                //upto here on 24/11/2017....
                
                
                [newDic setValue:@"" forKey:CARD_INFO];
                [newDic setValue:@"" forKey:APPROVAL_CODE];
                [newDic setValue:@"" forKey:BANK_NAME];
                
                [newDic setValue:[WebServiceUtility getCurrentDate] forKey:DATE];
                
                [otherPaymentsDeatilsArr addObject:newDic];
            }
            
            float totalPaidAmount = 0.0;
            float totalBillAmount = (netPayLblVal.text).floatValue;
            
            
            for(int i = 0; i < otherPaymentsDeatilsArr.count; i++){
                
                NSMutableDictionary * dic = [otherPaymentsDeatilsArr[i] mutableCopy];
                
                float currentPay = [[dic valueForKey:PAYMENT_TOTAL] floatValue];
                
                totalPaidAmount = totalPaidAmount + currentPay;
                
                if((totalBillAmount < currentPay) && totalBillAmount > 0 ){
                    
                    dic[PAID_AMT] = [NSString stringWithFormat:@"%.2f",totalBillAmount];
                    //                    [dic setObject:[NSString stringWithFormat:@"%.2f",(currentPay - totalBillAmount)]  forKey:CHANGE_RETURN];
                }
                else if(totalBillAmount < 0){
                    
                    dic[PAID_AMT] = @"0.00";
                }
                otherPaymentsDeatilsArr[i] = dic;
                
                
                if(totalBillAmount > 0)
                    totalBillAmount = totalBillAmount - [[dic valueForKey:PAYMENT_TOTAL] floatValue];
                
            }
            
            
            
            
            otherPaymentTotalAmountLbl.text = [NSString stringWithFormat:@"%.2f",totalPaidAmount];
            
            otherPaymentReferenceNumTxt.text = @"";
            otherPaymentCountTxt.text = @"";
            otherPaymentAmountTxt.text = @"";
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        
        [otherPaymentsDetailsTbl reloadData];
    }
    
}

/**
 * @description  here we are deleting the  item from other payment options....
 * @date         24/11/2017....
 * @method       delTransactionFromOtherPaymentList:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

- (void)delTransactionFromOtherPaymentList:(UIButton *)sender{
    
    @try {
        
        [otherPaymentsDeatilsArr removeObjectAtIndex:sender.tag];
        
        float totalPaidAmount = 0.0;
        float totalBillAmount = (netPayLblVal.text).floatValue;
        
        for(int i = 0; i < otherPaymentsDeatilsArr.count; i++){
            
            NSMutableDictionary * dic = [otherPaymentsDeatilsArr[i] mutableCopy];
            
            float currentPay = [[dic valueForKey:PAYMENT_TOTAL] floatValue];
            
            totalPaidAmount = totalPaidAmount + currentPay;
            
            if((totalBillAmount < currentPay) && totalBillAmount > 0 ){
                
                dic[PAID_AMT] = [NSString stringWithFormat:@"%.2f",totalBillAmount];
                //                    [dic setObject:[NSString stringWithFormat:@"%.2f",(currentPay - totalBillAmount)]  forKey:CHANGE_RETURN];
            }
            else if(totalBillAmount < 0){
                
                dic[PAID_AMT] = @"0.00";
            }
            otherPaymentsDeatilsArr[i] = dic;
            
            
            if(totalBillAmount > 0)
                totalBillAmount = totalBillAmount - [[dic valueForKey:PAYMENT_TOTAL] floatValue];
            
        }
        
        
        
        
        otherPaymentTotalAmountLbl.text = [NSString stringWithFormat:@"%.2f",totalPaidAmount];
        
        otherPaymentReferenceNumTxt.text = @"";
        otherPaymentCountTxt.text = @"";
        otherPaymentAmountTxt.text = @"";
    } @catch (NSException *exception) {
        
    } @finally {
        
        [otherPaymentsDetailsTbl reloadData];
    }
}

/**
 * @description  here we are dismissing the editItemDetailsView....
 * @date         23/11/2017
 * @method       closeOtherPaymentsView:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)confirmOtherPaymentsView:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        
        if(otherPaymentsDeatilsArr.count){
            
            if(isNewReturnBill){
                
                
                float totalPaidAmount = 0.0;
                float totalBillAmount = (netPayLblVal.text).floatValue;
                
                
                for(int i = 0; i < otherPaymentsDeatilsArr.count; i++){
                    
                    NSDictionary * dic = otherPaymentsDeatilsArr[i];
                    
                    float currentPay = [[dic valueForKey:PAYMENT_TOTAL] floatValue];
                    
                    totalPaidAmount = totalPaidAmount + currentPay;
                }
                
                if(totalPaidAmount < totalBillAmount){
                    
                    float y_axis = otherPaymentReferenceNumTxt.frame.origin.x + otherPaymentReferenceNumTxt.frame.size.width;
                    
                    NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"please_do_complete_payment_to_move_further", nil)];
                    
                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
                    return;
                }
                
            }
            
            transperentView.hidden = YES;
            
            if ([transperentView isDescendantOfView:self.view])
                [transperentView removeFromSuperview];
            
            
            paymentTransactionArray = [otherPaymentsDeatilsArr mutableCopy];
            
            [self addPaymentViewFor:@"Food Coupons"];
            
        }
        else{
            
            float y_axis = otherPaymentReferenceNumTxt.frame.origin.x + otherPaymentReferenceNumTxt.frame.size.width;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"please_do_payment_to_move_further", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
        }
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are dismissing the editItemDetailsView....
 * @date         23/11/2017
 * @method       closeOtherPaymentsView:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @param
 * @param
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)closeOtherPaymentsView:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if(otherPaymentsDeatilsArr.count)
            [otherPaymentsDeatilsArr removeAllObjects];
        [otherPaymentsDetailsTbl reloadData];
        
        
        transperentView.hidden = YES;
        
        if ([transperentView isDescendantOfView:self.view])
            [transperentView removeFromSuperview];
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  it is an ........
 * @date
 * @method       couponsView:
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

-(void)couponsView {
    
    paymentTransactionArray = [NSMutableArray new];
    
    couponType = [[UITableView alloc] init];
    //giftTypeTableView.backgroundColor = [UIColor whiteColor];
    couponType.dataSource = self;
    couponType.delegate = self;
    couponType.bounces = FALSE;
    couponType.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
    couponType.layer.cornerRadius = 3.0f;
    (couponType.layer).borderWidth = 1.0f;
    
    valueTable = [[UITableView alloc] init];
    valueTable.dataSource = self;
    valueTable.delegate = self;
    valueTable.bounces = FALSE;
    valueTable.backgroundColor = [UIColor colorWithRed:229/255.0 green:229/255.0 blue:229/255.0 alpha:1.0];
    valueTable.layer.cornerRadius = 3.0f;
    (valueTable.layer).borderWidth = 1.0f;
    
    selectCouponType = [[UITextField alloc] init];
    selectCouponType.borderStyle = UITextBorderStyleRoundedRect;
    selectCouponType.textColor = [UIColor blackColor];
    selectCouponType.font = [UIFont systemFontOfSize:18.0];
    selectCouponType.backgroundColor = [UIColor whiteColor];
    selectCouponType.text = @"Sodexo Coupon";
    selectCouponType.userInteractionEnabled = NO;
    selectCouponType.autocapitalizationType = UITextAutocapitalizationTypeNone;
    selectCouponType.autocorrectionType = UITextAutocorrectionTypeNo;
    selectCouponType.keyboardType = UIKeyboardTypeAlphabet;
    selectCouponType.delegate = self;
    
    UILabel *label1 = [[UILabel alloc] init];
    label1.text = @"Type ";
    label1.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:14];
    label1.backgroundColor = [UIColor clearColor];
    label1.textColor = [UIColor whiteColor];
    
    giftTypeBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
    UIImage *buttonImageDD1 = [UIImage imageNamed:@"combo.png"];
    [giftTypeBtn setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
    giftTypeBtn.tag = 5;
    [giftTypeBtn addTarget:self
                    action:@selector(giftContinue:) forControlEvents:UIControlEventTouchDown];
    giftTypeBtn.titleLabel.textColor = [UIColor blackColor];
    
    valueBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
    UIImage *buttonImageDD = [UIImage imageNamed:@"combo.png"];
    [valueBtn setBackgroundImage:buttonImageDD forState:UIControlStateNormal];
    valueBtn.tag = 5;
    [valueBtn addTarget:self
                 action:@selector(selectValue:) forControlEvents:UIControlEventTouchDown];
    valueBtn.titleLabel.textColor = [UIColor blackColor];
    valueBtn.tag = 0;
    
    
    
    couponId = [[UITextField alloc] init];
    couponId.borderStyle = UITextBorderStyleRoundedRect;
    couponId.textColor = [UIColor blackColor];
    couponId.font = [UIFont systemFontOfSize:18.0];
    couponId.backgroundColor = [UIColor whiteColor];
    couponId.text = @"";
    couponId.autocapitalizationType = UITextAutocapitalizationTypeNone;
    couponId.autocorrectionType = UITextAutocorrectionTypeNo;
    couponId.keyboardType = UIKeyboardTypeAlphabet;
    couponId.placeholder = @"Coupon Id";
    couponId.delegate = self;
    
    couponValue = [[UITextField alloc] init];
    couponValue.borderStyle = UITextBorderStyleRoundedRect;
    couponValue.layer.borderColor = [UIColor whiteColor].CGColor;
    couponValue.textColor = [UIColor blackColor];
    couponValue.font = [UIFont systemFontOfSize:18.0];
    couponValue.backgroundColor = [UIColor whiteColor];
    couponValue.text = @"";
    couponValue.autocapitalizationType = UITextAutocapitalizationTypeNone;
    couponValue.autocorrectionType = UITextAutocorrectionTypeNo;
    couponValue.keyboardType = UIKeyboardTypeNumberPad;
    couponValue.placeholder = @"Value";
    couponValue.delegate = self;
    //    couponValue.userInteractionEnabled = NO;
    
    couponQty = [[UITextField alloc] init];
    couponQty.borderStyle = UITextBorderStyleRoundedRect;
    couponQty.layer.borderColor = [UIColor whiteColor].CGColor;
    couponQty.textColor = [UIColor blackColor];
    couponQty.font = [UIFont systemFontOfSize:18.0];
    couponQty.backgroundColor = [UIColor whiteColor];
    couponQty.text = @"";
    couponQty.autocapitalizationType = UITextAutocapitalizationTypeNone;
    couponQty.autocorrectionType = UITextAutocorrectionTypeNo;
    couponQty.keyboardType = UIKeyboardTypeNumberPad;
    couponQty.placeholder = @"Qty";
    couponQty.delegate = self;
    
    UIButton *okBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [okBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
    okBtn.tag = 6;
    [okBtn setTitle:@"OK"    forState:UIControlStateNormal];
    okBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    okBtn.titleLabel.textColor = [UIColor whiteColor];
    okBtn.backgroundColor = [UIColor grayColor];
    okBtn.titleLabel.font = [UIFont systemFontOfSize:20];
    okBtn.layer.cornerRadius = 10.0f;
    
    
    UILabel *qty = [[UILabel alloc] init];
    qty.layer.cornerRadius = 14;
    qty.textAlignment = NSTextAlignmentCenter;
    qty.layer.masksToBounds = YES;
    qty.font = [UIFont boldSystemFontOfSize:14.0];
    qty.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    qty.textColor = [UIColor whiteColor];
    qty.text = @"Qty";
    
    UILabel *c_total = [[UILabel alloc] init];
    c_total.layer.cornerRadius = 14;
    c_total.textAlignment = NSTextAlignmentCenter;
    c_total.layer.masksToBounds = YES;
    c_total.font = [UIFont boldSystemFontOfSize:14.0];
    c_total.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    c_total.textColor = [UIColor whiteColor];
    c_total.text = @"Total";
    
    
    UILabel *Type = [[UILabel alloc] init];
    Type.layer.cornerRadius = 12;
    Type.textAlignment = NSTextAlignmentCenter;
    Type.layer.masksToBounds = YES;
    Type.font = [UIFont boldSystemFontOfSize:14.0];
    Type.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    Type.textColor = [UIColor whiteColor];
    Type.text = @"Type";
    
    UILabel *ID = [[UILabel alloc] init];
    ID.layer.cornerRadius = 14;
    ID.textAlignment = NSTextAlignmentCenter;
    ID.layer.masksToBounds = YES;
    ID.font = [UIFont boldSystemFontOfSize:14.0];
    ID.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    ID.textColor = [UIColor whiteColor];
    ID.text = @"ID";
    
    UILabel *value = [[UILabel alloc] init];
    value.layer.cornerRadius = 14;
    value.textAlignment = NSTextAlignmentCenter;
    value.layer.masksToBounds = YES;
    value.font = [UIFont boldSystemFontOfSize:14.0];
    value.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    value.textColor = [UIColor whiteColor];
    value.text = @"Value";
    
    UILabel *total_value = [[UILabel alloc] init];
    total_value.layer.cornerRadius = 14;
    //  [total_value setTextAlignment:NSTextAlignmentCenter];
    total_value.layer.masksToBounds = YES;
    total_value.font = [UIFont boldSystemFontOfSize:14.0];
    total_value.backgroundColor = [UIColor clearColor];
    total_value.textColor = [UIColor whiteColor];
    total_value.text = @"Total Value";
    
    UILabel *total = [[UILabel alloc] init];
    total.layer.cornerRadius = 14;
    // [total setTextAlignment:NSTextAlignmentCenter];
    total.layer.masksToBounds = YES;
    total.font = [UIFont boldSystemFontOfSize:14.0];
    total.backgroundColor = [UIColor clearColor];
    total.textColor = [UIColor whiteColor];
    total.text = @"Total Bill";
    
    UILabel *bill_due= [[UILabel alloc] init];
    bill_due.layer.cornerRadius = 14;
    // [bill_due setTextAlignment:NSTextAlignmentCenter];
    bill_due.layer.masksToBounds = YES;
    bill_due.font = [UIFont boldSystemFontOfSize:14.0];
    bill_due.backgroundColor = [UIColor clearColor];
    bill_due.textColor = [UIColor whiteColor];
    bill_due.text = @"Bill Due";
    
    totalCoupValue = [[UILabel alloc] init];
    totalCoupValue.layer.cornerRadius = 14;
    //[totalCoupValue setTextAlignment:UITextAlignmentRight];
    totalCoupValue.layer.masksToBounds = YES;
    totalCoupValue.font = [UIFont boldSystemFontOfSize:14.0];
    totalCoupValue.backgroundColor = [UIColor clearColor];
    totalCoupValue.textColor = [UIColor whiteColor];
    totalCoupValue.text = @"0.00";
    
    totalBill = [[UILabel alloc] init];
    totalBill.layer.cornerRadius = 14;
    //  [totalBill setTextAlignment:UITextAlignmentRight];
    totalBill.layer.masksToBounds = YES;
    totalBill.font = [UIFont boldSystemFontOfSize:14.0];
    totalBill.backgroundColor = [UIColor clearColor];
    totalBill.textColor = [UIColor whiteColor];
    totalBill.text = netPayLblVal.text;
    
    billDueLbl = [[UILabel alloc] init];
    billDueLbl.layer.cornerRadius = 14;
    //  [billDueLbl setTextAlignment:UITextAlignmentRight];
    billDueLbl.layer.masksToBounds = YES;
    billDueLbl.font = [UIFont boldSystemFontOfSize:14.0];
    billDueLbl.backgroundColor = [UIColor clearColor];
    billDueLbl.textColor = [UIColor whiteColor];
    billDueLbl.text = netPayLblVal.text;
    
    if (couponArr.count!=0) {
        
        float total_val = 0.00f;
        for (int i=0; i<couponArr.count; i++) {
            
            total_val = total_val + ([couponArr[i] componentsSeparatedByString:@"#"][3].intValue * [couponArr[i] componentsSeparatedByString:@"#"][2].floatValue);
        }
        
        totalCoupValue.text = [NSString stringWithFormat:@"%.2f",total_val];
        
    }
    
    uiscroll_gift_view = [[UIScrollView alloc] init];
    uiscroll_gift_view.hidden = NO;
    uiscroll_gift_view.backgroundColor = [UIColor clearColor];
    uiscroll_gift_view.bounces = FALSE;
    uiscroll_gift_view.scrollEnabled = YES;
    
    
    couponDeatails = [[UITableView alloc] init];
    couponDeatails.separatorColor = [UIColor clearColor];
    couponDeatails.dataSource = self;
    couponDeatails.delegate = self;
    couponDeatails.backgroundColor = [UIColor clearColor];
    couponDeatails.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
    
    phnotext = [[UITextField alloc] init];
    
    phnotext.borderStyle = UITextBorderStyleRoundedRect;
    phnotext.autocorrectionType = UITextAutocorrectionTypeNo;
    phnotext.keyboardType = UIKeyboardTypeNumberPad;
    phnotext.returnKeyType = UIReturnKeyDone;
    phnotext.clearButtonMode = UITextFieldViewModeWhileEditing;
    phnotext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    [phnotext addTarget:self action:@selector(textFieldDidEndEditing:) forControlEvents:UIControlEventEditingChanged];
    //    phnotext.delegate = self;
    // phnotext.tag = 111;
    phnotext.placeholder = @"Phone Number";
    
    phonelbl = [[UILabel alloc] init];
    
    phonelbl.text= @"Phone";
    phonelbl.textColor = [UIColor whiteColor];
    phonelbl.backgroundColor = [UIColor clearColor];
    
    emaillbl = [[UILabel alloc] init];
    
    emaillbl.text= @"Email";
    emaillbl.textColor = [UIColor whiteColor];
    emaillbl.backgroundColor = [UIColor clearColor];
    
    namelbl = [[UILabel alloc] init];
    
    namelbl.text= @"Name ";
    namelbl.textColor = [UIColor whiteColor];
    namelbl.backgroundColor = [UIColor clearColor];
    
    emailtext = [[UITextField alloc] init];
    
    emailtext.borderStyle = UITextBorderStyleRoundedRect;
    emailtext.autocorrectionType = UITextAutocorrectionTypeNo;
    emailtext.keyboardType = UIKeyboardTypeEmailAddress;
    emailtext.returnKeyType = UIReturnKeyDone;
    emailtext.clearButtonMode = UITextFieldViewModeWhileEditing;
    emailtext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    emailtext.delegate = self;
    emailtext.autocapitalizationType = UITextAutocapitalizationTypeNone;
    emailtext.placeholder = @"Customer Mail ID";
    
    nametext = [[UITextField alloc] init];
    
    nametext.borderStyle = UITextBorderStyleRoundedRect;
    nametext.autocorrectionType = UITextAutocorrectionTypeNo;
    nametext.keyboardType = UIKeyboardTypeDefault;
    nametext.returnKeyType = UIReturnKeyDone;
    nametext.clearButtonMode = UITextFieldViewModeWhileEditing;
    nametext.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
    nametext.placeholder = @"Customer Name";
    nametext.delegate = self;
    
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight){
            
            selectCouponType.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            selectCouponType.frame = CGRectMake(15, 80, 250, 55);
            couponType.frame = CGRectMake(15, 120, 260, 130);
            giftTypeBtn.frame = CGRectMake(230, 73,50 , 75);
            couponId.frame = CGRectMake(10, 160, 210, 55);
            couponId.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            couponValue.frame = CGRectMake(250, 160, 160, 55);
            couponValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            valueBtn.frame = CGRectMake(390, 152,50 , 75);
            valueTable.frame = CGRectMake(250, 215, 150, 200);
            couponQty.frame = CGRectMake(470, 160, 160, 55);
            couponQty.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            okBtn.frame = CGRectMake(650, 165, 65, 50);
            
            
            Type .font = [UIFont boldSystemFontOfSize:20];
            Type.frame = CGRectMake(5, 230, 150, 45);
            ID .font = [UIFont boldSystemFontOfSize:20];
            ID.frame = CGRectMake(160, 230, 160, 45);
            value.font = [UIFont boldSystemFontOfSize:20];
            value.frame = CGRectMake(330, 230, 120, 45);
            qty.font = [UIFont boldSystemFontOfSize:20];
            qty.frame = CGRectMake(460, 230, 120, 45);
            c_total.font = [UIFont boldSystemFontOfSize:20];
            c_total.frame = CGRectMake(590, 230, 120, 45);
            
            uiscroll_gift_view.frame = CGRectMake(0, 290, 778, 150);
            uiscroll_gift_view.contentSize = CGSizeMake(778, 500);
            couponDeatails.frame = CGRectMake(10, 0, 780,150);
            
            phonelbl.font = [UIFont systemFontOfSize:25.0];
            phonelbl.frame = CGRectMake(10, 450, 160.0, 30);
            emaillbl.font = [UIFont systemFontOfSize:25.0];
            emaillbl.frame = CGRectMake(10, 480, 160.0, 30);
            namelbl.font = [UIFont systemFontOfSize:25.0];
            namelbl.frame = CGRectMake(10, 510, 160.0, 30);
            
            phnotext.frame = CGRectMake(400.0, 450, 300.0, 30);
            phnotext.font = [UIFont systemFontOfSize:25];
            emailtext.frame = CGRectMake(400, 480, 300.0, 30);
            emailtext.font = [UIFont systemFontOfSize:25.0];
            nametext.frame = CGRectMake(400.0,510, 300.0, 30);
            nametext.font = [UIFont systemFontOfSize:25];
            
            
            total.frame = CGRectMake(10, 450, 120, 30);
            total.font = [UIFont boldSystemFontOfSize:22];
            totalBill.frame = CGRectMake(550, 450, 200, 30);
            totalBill.font = [UIFont boldSystemFontOfSize:22];
            total_value.frame = CGRectMake(10, 500, 120, 30);
            total_value.font = [UIFont boldSystemFontOfSize:22];
            totalCoupValue.frame = CGRectMake(550, 500, 200, 30);
            totalCoupValue.font = [UIFont boldSystemFontOfSize:22];
            bill_due.frame = CGRectMake(10, 550, 120, 30);
            bill_due.font = [UIFont boldSystemFontOfSize:22];
            billDueLbl.frame = CGRectMake(550, 550, 200, 30);
            billDueLbl.font = [UIFont boldSystemFontOfSize:22];
            
            [couponView addSubview:total_value];
            [couponView addSubview:totalCoupValue];
            [couponView addSubview:total];
            [couponView addSubview:totalBill];
            [couponView addSubview:bill_due];
            [couponView addSubview:billDueLbl];
            //            [couponView addSubview:phonelbl];
            //            [couponView addSubview:emaillbl];
            //            [couponView addSubview:namelbl];
            //            [couponView addSubview:phnotext];
            //            [couponView addSubview:emailtext];
            //            [couponView addSubview:nametext];
            
            
        }
        else {
            selectCouponType.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            selectCouponType.frame = CGRectMake(15, 80, 250, 55);
            couponType.frame = CGRectMake(15, 120, 260, 130);
            giftTypeBtn.frame = CGRectMake(230, 73,50 , 75);
            couponId.frame = CGRectMake(10, 160, 210, 55);
            couponId.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            couponValue.frame = CGRectMake(250, 160, 160, 55);
            couponValue.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            valueBtn.frame = CGRectMake(390, 152,50 , 75);
            valueTable.frame = CGRectMake(250, 215, 150, 200);
            couponQty.frame = CGRectMake(470, 160, 160, 55);
            couponQty.font = [UIFont fontWithName:@"TrebuchetMS-Bold" size:25];
            okBtn.frame = CGRectMake(670, 165, 65, 50);
            
            
            Type .font = [UIFont boldSystemFontOfSize:20];
            Type.frame = CGRectMake(5, 230, 150, 45);
            ID .font = [UIFont boldSystemFontOfSize:20];
            ID.frame = CGRectMake(160, 230, 150, 45);
            value.font = [UIFont boldSystemFontOfSize:20];
            value.frame = CGRectMake(315, 230, 150, 45);
            qty.font = [UIFont boldSystemFontOfSize:20];
            qty.frame = CGRectMake(475, 230, 120, 45);
            c_total.font = [UIFont boldSystemFontOfSize:20];
            c_total.frame = CGRectMake(605, 230, 120, 45);
            
            uiscroll_gift_view.frame = CGRectMake(0, 290, 778, 200);
            uiscroll_gift_view.contentSize = CGSizeMake(778, 300);
            couponDeatails.frame = CGRectMake(10, 0, 780,200);
            
            phonelbl.font = [UIFont systemFontOfSize:25.0];
            phonelbl.frame = CGRectMake(10, 510, 160.0, 45);
            emaillbl.font = [UIFont systemFontOfSize:25.0];
            emaillbl.frame = CGRectMake(10, 560, 160.0, 45);
            namelbl.font = [UIFont systemFontOfSize:25.0];
            namelbl.frame = CGRectMake(10, 610, 160.0, 45);
            
            phnotext.frame = CGRectMake(400.0, 510.0, 300.0, 40);
            phnotext.font = [UIFont systemFontOfSize:25];
            emailtext.frame = CGRectMake(400, 560.0, 300.0, 40);
            emailtext.font = [UIFont systemFontOfSize:25.0];
            nametext.frame = CGRectMake(400.0,610.0, 300.0, 40);
            nametext.font = [UIFont systemFontOfSize:25];
            
            
            total.frame = CGRectMake(10, 670, 120, 35);
            total.font = [UIFont boldSystemFontOfSize:22];
            totalBill.frame = CGRectMake(550, 670, 200, 35);
            totalBill.font = [UIFont boldSystemFontOfSize:22];
            total_value.frame = CGRectMake(10, 715, 120, 35);
            total_value.font = [UIFont boldSystemFontOfSize:22];
            totalCoupValue.frame = CGRectMake(550, 715, 200, 35);
            totalCoupValue.font = [UIFont boldSystemFontOfSize:22];
            bill_due.frame = CGRectMake(10, 760, 120, 35);
            bill_due.font = [UIFont boldSystemFontOfSize:22];
            billDueLbl.frame = CGRectMake(550, 760, 200, 35);
            billDueLbl.font = [UIFont boldSystemFontOfSize:22];
            
            [couponView addSubview:total_value];
            [couponView addSubview:totalCoupValue];
            [couponView addSubview:total];
            [couponView addSubview:totalBill];
            [couponView addSubview:bill_due];
            [couponView addSubview:billDueLbl];
            //            [couponView addSubview:phonelbl];
            //            [couponView addSubview:emaillbl];
            //            [couponView addSubview:namelbl];
            //            [couponView addSubview:phnotext];
            //            [couponView addSubview:emailtext];
            //            [couponView addSubview:nametext];
            
        }
        
        
    }
    else {
        
        selectCouponType.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        selectCouponType.frame = CGRectMake(15, 43, 130, 30);
        couponType.frame = CGRectMake(15, 73, 130, 80);
        giftTypeBtn.frame = CGRectMake(143, 42,30 , 35);
        couponId.frame = CGRectMake(0, 75, 80, 30);
        couponId.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        couponId.placeholder = @"Id";
        couponValue.frame = CGRectMake(81, 75, 80, 30);
        couponValue.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        valueBtn.frame = CGRectMake(155, 72,30 , 35);
        valueTable.frame = CGRectMake(81, 105, 80, 100);
        couponQty.frame = CGRectMake(190, 75, 65, 30);
        couponQty.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        okBtn.frame = CGRectMake(265, 75, 35, 30);
        okBtn.titleLabel.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        
        
        Type .font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        Type.frame = CGRectMake(5, 120, 50, 30);
        ID .font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        ID.frame = CGRectMake(56, 120, 50, 30);
        value.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        value.frame = CGRectMake(107, 120, 50, 30);
        qty.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        qty.frame = CGRectMake(158, 120, 50, 30);
        c_total.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        c_total.frame = CGRectMake(209, 120, 80, 30);
        
        uiscroll_gift_view.frame = CGRectMake(0, 152, 778, 160);
        uiscroll_gift_view.contentSize = CGSizeMake(778, 500);
        couponDeatails.frame = CGRectMake(0, 0, 780,120);
        
        phonelbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        phonelbl.frame = CGRectMake(10, 150, 50.0, 25);
        emaillbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        emaillbl.frame = CGRectMake(10, 180, 50.0, 25);
        namelbl.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        namelbl.frame = CGRectMake(10, 210, 50.0, 25);
        
        phnotext.frame = CGRectMake(120.0, 150, 150, 25);
        phnotext.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        emailtext.frame = CGRectMake(120, 180, 150, 25);
        emailtext.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        nametext.frame = CGRectMake(120,210, 150, 25);
        nametext.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        
        
        total.frame = CGRectMake(10, 300, 120, 25);
        total.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        totalBill.frame = CGRectMake(120, 300, 120, 25);
        totalBill.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        total_value.frame = CGRectMake(10, 330, 120, 25);
        total_value.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        totalCoupValue.frame = CGRectMake(120, 330, 120, 25);
        totalCoupValue.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        bill_due.frame = CGRectMake(10, 360, 120, 25);
        bill_due.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        billDueLbl.frame = CGRectMake(120, 360, 120, 25);
        billDueLbl.font =[UIFont fontWithName:@"ArialRoundedMTBold" size:15];
        
        [couponView addSubview:total_value];
        [couponView addSubview:totalCoupValue];
        [couponView addSubview:total];
        [couponView addSubview:totalBill];
        [couponView addSubview:bill_due];
        [couponView addSubview:billDueLbl];
        
    }
    
    
    [couponView addSubview:selectCouponType];
    [couponView addSubview:couponQty];
    //    [couponView addSubview:valueTable];
    [couponView addSubview:giftTypeBtn];
    [couponView addSubview:couponValue];
    [couponView addSubview:valueBtn];
    [couponView addSubview:couponId];
    [couponView addSubview:okBtn];
    [couponView addSubview:qty];
    [couponView addSubview:c_total];
    [couponView addSubview:Type];
    [couponView addSubview:ID];
    [uiscroll_gift_view addSubview:couponDeatails];
    [couponView addSubview:uiscroll_gift_view];
    
    [couponView addSubview:value];
    
}




#pragma -mark start of textFields delegates...

/**
 * @description  it is an textFieldDelegate method it will be executed when text  Begin edititng........
 * @date
 * @method       textFieldShouldBeginEditing:
 * @author
 * @param        UITextField
 * @param
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField {
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        paymentScrollView.scrollEnabled = YES;
        
        if (textField == otherDiscountTxt) {
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                
                
                //changed by Srinivasulu on 18/10/2017....
                
                //                self.view.frame = CGRectMake(0, -110, self.view.frame.size.width, self.view.frame.size.height);
                //added on 14/03/2018....
                if(!isNewReturnBill)
                    
                    self.view.frame = CGRectMake(0, - 170, self.view.frame.size.width, self.view.frame.size.height);
                
                //upto here on 18/10/2017....
                
            }
        }
        //commneted and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
        
        else if(textField == otherDiscountValueTxt){
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                
                //changed by Srinivasulu on 18/10/2017....
                
                //                self.view.frame = CGRectMake(0, -110, self.view.frame.size.width, self.view.frame.size.height);
                //added on 14/03/2018....
                if(!isNewReturnBill)
                    
                    self.view.frame = CGRectMake(0, - 170, self.view.frame.size.width, self.view.frame.size.height);
                
                //upto here on 18/10/2017....
                
            }
        }
        else if (textField == recash) {
            
            
            loyaltyScrollPoint = loyaltyScrollView.contentOffset;
            
            
            CGRect rc = textField.bounds;
            rc = [textField convertRect:rc toView:loyaltyScrollView];
            rc.origin.x = 0 ;
            rc.origin.y -= 20 ;
            
            rc.size.height = 400;
            
            [loyaltyScrollView scrollRectToVisible:rc animated:YES];
        }
        else if (textField == couponValue){
            
            couponQty.text = @"";
        }
        
        
        //added Srinivasulu on 02/07/2018....
        else if(textField.frame.origin.x == qtyFeild.frame.origin.x){
            
            
        }
        
        //upto here on 02/07/2018....
        //commented by Srinivasulu on srinivasulu on 28/03/2018....
        
        //        else if (!isReturnDenom && (textField.tag == 5 || textField.tag == 2 || textField.tag == 1) && (textField != conversionRatioTxt && textField != totalDenominationsCountTxt) ) {
        //
        //            denominationView.frame = CGRectMake(denominationView.frame.origin.x, textField.frame.origin.y - 300.0, denominationView.frame.size.width, denominationView.frame.size.height);
        //        }
        //        else if ((textField.tag == 5 || textField.tag == 2 || textField.tag == 1)  && (textField != conversionRatioTxt && textField != totalDenominationsCountTxt)) {
        //            returnDenominationView.frame = CGRectMake(returnDenominationView.frame.origin.x, returnDenominationView.frame.origin.y - 300.0, returnDenominationView.frame.size.width, returnDenominationView.frame.size.height);
        //        }
        
        //upto here on 28/03/2018....
        
    }
    else{
        
        if (version>=8.0) {
            
            if (textField == emailtext || textField==nametext) {
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, paymentView.frame.origin.y - 90, paymentView.frame.size.width, paymentView.frame.size.height);
            }
            else if (textField == avai_points || textField == recash || textField == giftAmt) {
                
                giftView .frame = CGRectMake(giftView.frame.origin.x, -200, giftView.frame.size.width, giftView.frame.size.height);
            }
            else if (textField == giftNo || textField == giftValidFrom || textField == giftValidTo) {
                
                giftView .frame = CGRectMake(giftView.frame.origin.x, 10, giftView.frame.size.width, giftView.frame.size.height);
            }
            else if (textField == locltytext || textField == citytext || textField == pintext){
                
                addCustView.frame = CGRectMake(addCustView.frame.origin.x, - 30, addCustView.frame.size.width, addCustView.frame.size.height);
            }
            else if (textField == phnotext || textField == emailtext || textField == nametext || textField == streettext){
                
                addCustView.frame = CGRectMake(20.0, 60.0, 280, 340);
            }
            
        }
        else {
            if (textField == payTxt1) {
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, paymentView.frame.origin.y - 90, paymentView.frame.size.width, paymentView.frame.size.height);
            }
            else if (textField == avai_points || textField == recash || textField == giftAmt) {
                
                giftView .frame = CGRectMake(giftView.frame.origin.x, -200, giftView.frame.size.width, giftView.frame.size.height);
            }
            else if (textField == giftNo || textField == giftValidFrom || textField == giftValidTo) {
                
                giftView .frame = CGRectMake(giftView.frame.origin.x, 10, giftView.frame.size.width, giftView.frame.size.height);
            }
            else if (textField == locltytext || textField == citytext || textField == pintext){
                
                addCustView.frame = CGRectMake(addCustView.frame.origin.x, - 30, addCustView.frame.size.width, addCustView.frame.size.height);
            }
            else if (textField == phnotext || textField == emailtext || textField == nametext || textField == streettext){
                
                addCustView.frame = CGRectMake(20.0, 60.0, 280, 340);
            }
            
        }
        
    }
    return YES;
    
}

/**
 * @description  it is an textFieldDelegate method it will be executed when text Begin edititng........
 * @date
 * @method       textFieldDidBeginEditing:
 * @author
 * @param        UITextField
 * @param
 * @param
 *
 * @return
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

-(void)textFieldDidBeginEditing:(UITextField *)textField {
    
    @try{
        
        
        //gtinTxt -- emailAddressTxt -- addressTxt1 -- addressTxt2 -- addressTxt3 -- addressTxt4 -- addressTxt5 -- addressTxt6
        //changed by Srinivasulu on 23/03/2018....
        
        //        if (textField == nametext || textField == phoneTxt || textField == emailtext || textField == pintext) {
        if(textField == otherDiscountTxt || textField == otherDiscountValueTxt)
            [textField selectAll:nil];
        
        else if (textField == phnotext || textField == landMarkTxt || textField == emailtext || textField == citytext ||  textField == pintext ||  textField == billRemarksTxt) {
            
            
            if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, paymentView.frame.origin.y - 200.0, paymentView.frame.size.width, paymentView.frame.size.height);
                
                if(isNewReturnBill){
                    
                    paymentView.frame = CGRectMake(paymentView.frame.origin.x, paymentView.frame.origin.y - 140, paymentView.frame.size.width, paymentView.frame.size.height);
                    
                }
            }
            else {
                paymentView.frame = CGRectMake(20, 100, 730, 820.0);
            }
            
        }
        else  if (textField == custmerPhNum) {
            starRat.image = nil;
        }
        
        
        else if ( textField.frame.origin.x == gtinTxt.frame.origin.x || textField.frame.origin.x == emailAddressTxt.frame.origin.x || textField.frame.origin.x == addressTxt1.frame.origin.x || textField.frame.origin.x == addressTxt2.frame.origin.x || textField.frame.origin.x == addressTxt3.frame.origin.x || textField.frame.origin.x == addressTxt4.frame.origin.x || textField.frame.origin.x == addressTxt5.frame.origin.x || textField.frame.origin.x == addressTxt6.frame.origin.x){
            
            offSetViewTo = textField.frame.origin.y;
            
            //            if(offSetViewTo < 0)
            //                offSetViewTo = -offSetViewTo;
            
            [self keyboardWillShow];
            
        }
        
        //added Srinivasulu on 02/07/2018....
        else if(textField.frame.origin.x == qtyFeild.frame.origin.x){
            @try{
                
                [textField selectAll:nil];
                int rowNum = (int)textField.tag;
                if(rowNum > 10)
                    rowNum = 10;
                
                offSetViewTo = cartTable.frame.origin.y + rowNum * textField.frame.size.height;
                [self keyboardWillShow];
            }
            @catch(NSException * exp){
                
            }
        }
        
        //upto here on 02/07/2018....
        //added on 26/04/2018....
        else if(textField == recash ){
            
            offSetViewTo = recash.frame.origin.y;
            [self keyboardWillShow];
        }
        // added by roja on 20/11/2019..
        else if (textField == enterOtpTxt){
            offSetViewTo = enterOtpTxt.frame.origin.y;
            [self keyboardWillShow];
        }
        //upto here added by roja on 20/11/2019..

        else if (textField == qtyFeild || textField == giftAmt || textField == newPriceField || textField == payTxt2 || textField == couponQty ) {
            
            [textField selectAll:nil];
            [UIMenuController sharedMenuController].menuVisible = NO;
            
        }
        
        //added by Srinivasulu on 28/08/2017....
        
        //        if( textField == phnotext){
        //
        //            paymentScrollView.contentOffset = CGPointMake( paymentScrollView.frame.origin.x, label.frame.size.height);
        //        }
        
        else if(textField == itemEditQtyTxt || textField == itemPrecentageDiscountTxt){
            
            [textField selectAll:nil];
            [UIMenuController sharedMenuController].menuVisible = NO;
            
            offSetViewTo = textField.frame.origin.y;
            
            //added on 14/03/2018....
            //            if(isNewReturnBill)
            //                offSetViewTo = - self.view.frame.origin.y;
            
            [self keyboardWillShow];
        }
        else if(textField == itemEditPriceTxt || textField == itemFlatDiscountTxt  || textField == conversionRatioTxt || textField == totalDenominationsCountTxt){
            
            [textField selectAll:nil];
            [UIMenuController sharedMenuController].menuVisible = NO;
        }
        
        //added by Srinivasulu on srinivasulu on 28/03/2018....
        else if(textField.frame.origin.x == denomValueTxt.frame.origin.x || textField.frame.origin.x == returnDenomValueTxt.frame.origin.x){
            
            @try {
                offSetViewTo = textField.frame.origin.y;
                [self keyboardWillShow];
            } @catch (NSException *exception) {
            }
        }
        //upto here on 28/08/2017 && 28/03/2018....
        
        // added by roja on 07-11-2019...
        else if(textField == walletUserHouseNoTF){
            offSetViewTo = walletUserHouseNoTF.frame.origin.y;
            [self keyboardWillShow];
        }
        else if(textField == walletUserLocalityTF){
            offSetViewTo = walletUserLocalityTF.frame.origin.y;
            [self keyboardWillShow];
        }
        else if(textField == walletUserCityTF){
            offSetViewTo = walletUserCityTF.frame.origin.y;
            [self keyboardWillShow];
        }
        else if(textField == walletUserEmailIdTF){
            offSetViewTo = walletUserEmailIdTF.frame.origin.y;
            [self keyboardWillShow];
        }
        else if(textField == walletAmountValueTF){
            offSetViewTo = walletAmountValueTF.frame.origin.y;
            [self keyboardWillShow];
        }
        //Upto here added by roja on 07-11-2019...

        //added by roja on 03-09-2018...
        else if(textField == paidAmtTxt || textField == cardInfoTxt || textField == approvalCodeTxt || textField == bankNameTxt) {
            
            offSetViewTo = textField.frame.origin.y;
            [self keyboardWillShow];
        }
        else if( textField.frame.origin.x == cardHolderPhoneNumTxt.frame.origin.x ){
            
            offSetViewTo = textField.frame.origin.y - 200;
            [self keyboardWillShow];
        }
        //upto here added by roja on 29-08-2018...
        else {
            
            presentTextField = textField;
        }
        
    }@catch (NSException *exception) {
        
    }
    
}

/**
 * @description  it is an textFieldDelegate method it will be executed for ever character change........
 * @date
 * @method       textField:  shouldChangeCharactersInRange:  replacementString:
 * @author
 * @param        UITextField
 * @param        NSRange
 * @param        NSString
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

-(BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {
    //    if (textField == giftNo || textField == giftID) {
    //
    //        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textChange:) name:UITextFieldTextDidChangeNotification object:nil];
    //    }
    //    else if (textField == phoneNumberText) {
    //        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textChange:) name:UITextFieldTextDidChangeNotification object:nil];
    //    }
    
    // Added by Bhargav.v on 17/08/2018
    if (textField == giftNo) {
        
        if (textField.text.length >= 16 && range.length == 0) // >=15 to >=16 ...changed by roja on 03/06/2019
        {
            return NO; // return NO to not change text
        }
        else {
            return YES;
        }
    }
    else if (textField == giftID) {
        if (textField.text.length >= 16 && range.length == 0)
        {
            return NO; // return NO to not change text
        }
        else {
            return YES;
        }
    }
    else if (textField == phoneNumberText) {
        
        // added by roja on 20/11/2019...
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) return NO; // 48 unichar for 0
            if (character > 57) return NO; // 57 unichar for 9
        }
        //Upto here added by roja on 20/11/2019...

        if (textField.text.length >= 10 && range.length == 0)
        {
            return NO; // return NO to not change text
        }
        else {
            return YES;
        }
    }
    //up to here on 17/08/2018
    else if (textField == creditNoteTxt) {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textChange:) name:UITextFieldTextDidChangeNotification object:nil];
        
    }
    
    else if (textField == pintext) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Pin No should be a number" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                return NO;
            } // 48 unichar for 0
            if (character > 57) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Pin No should be a number" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                return NO;
                
            } // 57 unichar for 9
            
            NSUInteger proposedNewLength = textField.text.length - range.length + string.length;
            if (proposedNewLength > 6) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter valid pin" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                return NO;
                
            }
            
        }
        
    }
    else if (textField == tensQty || textField == twentyQty || textField == fiftyQty || textField == hundredQty || textField == fiveHundredQty || textField == thousandQty || textField == oneQty || textField == twoQty || textField == fiveQty) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) {
                
                return NO;
            } // 48 unichar for 0
            if (character > 57) {
                
                return NO;
                
            } // 57 unichar for 9
            
        }
        
    }
    else if (textField == tensReturnQty || textField == twentyReturnQty || textField == fiftyReturnQty || textField == hundredReturnQty || textField == fiveHundredReturnQty || textField == thousandReturnQty || textField == oneReturnQty || textField == twoReturnQty || textField == fiveReturnQty) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) {
                
                return NO;
            } // 48 unichar for 0
            if (character > 57) {
                
                return NO;
                
            } // 57 unichar for 9
            
        }
        
    }
    
    //changed by Srinivasulu on 20/09/2017....
    //reason -- for priceEditing we are allowing the negatives and characters also.....
    
    //    else if (textField == payTxt2) {
    else if (textField == payTxt2 || textField == newPriceField || textField == recash || textField == walletAmountValueTF) {
        
        
        
        //upto here on 20/09/2017.....
        
        //changed by Srinivasulu on 24/08/2017....
        //commented by Srinivasulu on 24/08/2017....
        //reason we need to along user to enter decimal point....
        
        //        NSUInteger lengthOfString = string.length;
        //        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
        //            unichar character = [string characterAtIndex:loopIndex];
        //            if (character < 48) return NO; // 48 unichar for 0
        //            if (character > 57) return NO; // 57 unichar for 9
        //        }
        
        
        @try {
            
            
            NSString *newString = [textField.text stringByReplacingCharactersInRange:range withString:string];
            NSString *expression = @"^[0-9]*((\\.)[0-9]{0,2})?$";
            NSError *error = nil;
            NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
            NSUInteger numberOfMatches = [regex numberOfMatchesInString:newString options:0 range:NSMakeRange(0, newString.length)];
            return numberOfMatches != 0;
            
        } @catch (NSException *exception) {
            return  YES;
            
        }
        
        //upto here on 24/08/2017....
        
    }
    //commented and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
    
    else if (textField == otherDiscountTxt || textField == percentageDiscTxt || textField == percentageDiscTxt) {
        
        
        //added by Srinivasulu on 26/06/2017....
        
        if(!isManualDiscounts){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"discount_is_not_applicable", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
            return NO;
        }
        
        
        
        
        
        //here we are checking the decimal point....
        @try {
            
            
            NSString *newString = [textField.text stringByReplacingCharactersInRange:range withString:string];
            NSString *expression = @"^[0-9]*((\\.)[0-9]{0,2})?$";
            NSError *error = nil;
            NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
            NSUInteger numberOfMatches = [regex numberOfMatchesInString:newString options:0 range:NSMakeRange(0, newString.length)];
            return numberOfMatches != 0;
            
        } @catch (NSException *exception) {
            return  YES;
            
        }
        
        //        if ([textField.text floatValue] >= 100) {
        //            return NO;
        //        }
        
        
        //commented by Srinivasulu on 26/06.2017....
        
        
        //        NSCharacterSet *set = [NSCharacterSet characterSetWithCharactersInString:@"."];
        //        if ([string rangeOfCharacterFromSet:[set invertedSet]].location == NSNotFound) {
        //
        //            return YES;
        //        }
        //
        //        NSUInteger lengthOfString = string.length;
        //        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
        //            unichar character = [string characterAtIndex:loopIndex];
        //            if (character < 48) return NO; // 48 unichar for 0
        //            if (character > 57) return NO; // 57 unichar for 9
        //        }
        //
        //        if ([textField.text floatValue] >= 100) {
        //            return NO;
        //        }
        //upto here on 26/06/2017....
        
        
        
    }
    else if (textField == phoneTxt) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) return NO; // 48 unichar for 0
            if (character > 57) return NO; // 57 unichar for 9
        }
        NSLog(@"%lu",(unsigned long)(textField.text).length);
        if ((textField.text).length>=10) {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Mobile number cannot exceed 10 digits" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            return NO;
            
        }
        
    }
    else if (textField == phnotext || textField == custmerPhNum) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) return NO; // 48 unichar for 0
            if (character > 57) return NO; // 57 unichar for 9
        }
        NSLog(@"%lu",(unsigned long)(textField.text).length);
        //        if ([textField.text length]>=10) {
        //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter valid phone no" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        //            [alert show];
        //            return NO;
        //
        //        }
        //        else {
        //            return YES;
        //        }
        
    }
    if (textField == couponValue || textField == couponQty) {
        
        // Check for non-numeric characters
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter valid value" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                return NO;
            } // 48 unichar for 0
            if (character > 57){
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Enter valid value" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
                return NO;
                
            } // 57 unichar for 9
        }
        
    }
    //ADDED BY Srinivasulu on 18/04/2017....
    else if((textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x) ){
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) return NO; // 48 unichar for 0
            if (character > 57) return NO; // 57 unichar for 9
        }
        
        
    }
    
    
    //upto here on 18/04/2017....
    
    //added by Srinivasulu on 06/09/2017....
    
    else if( textField == itemFlatDiscountTxt  || textField == itemPrecentageDiscountTxt){
        
        @try {
            
            if(!isManualDiscounts){
                
                float y_axis = self.view.frame.size.height - 350;
                
                NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"discount_is_not_applicable", nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
                
                return NO;
            }
            
            NSString *newString = [textField.text stringByReplacingCharactersInRange:range withString:string];
            NSString *expression = @"^[0-9]*((\\.)[0-9]{0,2})?$";
            NSError *error = nil;
            NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
            NSUInteger numberOfMatches = [regex numberOfMatchesInString:newString options:0 range:NSMakeRange(0, newString.length)];
            return numberOfMatches != 0;
            
        } @catch (NSException *exception) {
            
            return  YES;
        }
        
    }
    
    else if(textField == itemEditPriceTxt){
        
        //changed by Srinivasulu on 13/03/2018....
        if (isPriceEditableArr.count > 0 && ![isPriceEditableArr[textField.tag] boolValue] && !isOfflineService && !isNewReturnBill) {
            
            float y_axis = self.view.frame.size.height - 550;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"price_edit_is_not_allowed", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 300)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
            return NO;
        }
        
        @try {
            
            NSString *newString = [textField.text stringByReplacingCharactersInRange:range withString:string];
            NSString *expression = @"^[0-9]*((\\.)[0-9]{0,2})?$";
            NSError *error = nil;
            NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
            NSUInteger numberOfMatches = [regex numberOfMatchesInString:newString options:0 range:NSMakeRange(0, newString.length)];
            return numberOfMatches != 0;
            
        } @catch (NSException *exception) {
            
            return  YES;
        }
    }
    else if(textField == itemEditQtyTxt || textField == qtyFeild || textField.frame.origin.x == qtyFeild.frame.origin.x){
        
        //added by Srinivasulu on 06/03/2018....
        
        if (isItemTrackingRequiredArr.count > 0 && [isItemTrackingRequiredArr[textField.tag] boolValue]) {
            
            float y_axis = self.view.frame.size.height - 550;
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"sorry", nil),@"\n",NSLocalizedString(@"qty_cannot_be_editable", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:300 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
            
            return NO;
        }
        
        //upto here on 06/03/2018....
        
        
        if ([isPackagedItem[textField.tag] boolValue]) {
            NSUInteger lengthOfString = string.length;
            for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
                unichar character = [string characterAtIndex:loopIndex];
                if (character < 48) return NO; // 48 unichar for 0
                if (character > 57) return NO; // 57 unichar for 9
            }
        }
        else {
            
            @try {
                
                NSString *newString = [textField.text stringByReplacingCharactersInRange:range withString:string];
                NSString *expression = @"^[0-9]*((\\.)[0-9]{0,2})?$";
                NSError *error = nil;
                NSRegularExpression * regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
                NSUInteger numberOfMatches = [regex numberOfMatchesInString:newString options:0 range:NSMakeRange(0, newString.length)];
                return numberOfMatches != 0;
                
            } @catch (NSException *exception) {
                
                return  YES;
            }
            
        }
    }
    
    /*   conversionRatioTxt.hidden = YES;
     totalDenominationsCountTxt.hidden = YES;*/
    else if( textField == conversionRatioTxt || textField ==  otherPaymentCountTxt || textField == otherPaymentAmountTxt){
        
        @try {
            
            NSString *newString = [textField.text stringByReplacingCharactersInRange:range withString:string];
            NSString *expression = @"^[0-9]*((\\.)[0-9]{0,2})?$";
            NSError *error = nil;
            NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
            NSUInteger numberOfMatches = [regex numberOfMatchesInString:newString options:0 range:NSMakeRange(0, newString.length)];
            return numberOfMatches != 0;
            
        } @catch (NSException *exception) {
            
            return  YES;
        }
        
    }
    else if(textField == totalDenominationsCountTxt){
        
        @try {
            
            NSUInteger lengthOfString = string.length;
            for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
                unichar character = [string characterAtIndex:loopIndex];
                if (character < 48) return NO; // 48 unichar for 0
                if (character > 57) return NO; // 57 unichar for 9
            }
            return  YES;
            
        } @catch (NSException *exception) {
            
            return  YES;
        }
        
    }
    //upto here on 06/09/2017....
    
    //added by by roja on 03-09-2018....
    else if (textField == phnotext || textField == custmerPhNum || textField == cardHolderPhoneNumTxt) {
        
        NSUInteger lengthOfString = string.length;
        for (NSInteger loopIndex = 0; loopIndex < lengthOfString; loopIndex++) {
            unichar character = [string characterAtIndex:loopIndex];
            if (character < 48) return NO; // 48 unichar for 0
            if (character > 57) return NO; // 57 unichar for 9
        }
    }
    else if(textField == paidAmtTxt || textField == cardInfoTxt ){
        
        @try {
            NSString *newString = [textField.text stringByReplacingCharactersInRange:range withString:string];
            NSString *expression = @"^[0-9]*((\\.)[0-9]{0,2})?$";
            NSError *error = nil;
            NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:expression options:NSRegularExpressionCaseInsensitive error:&error];
            NSUInteger numberOfMatches = [regex numberOfMatchesInString:newString options:0 range:NSMakeRange(0, newString.length)];
            return numberOfMatches != 0;
        } @catch (NSException *exception) {
            return  YES;
            
            NSLog(@"----exception in BillingHome ----");
            NSLog(@"---- exception in texField: shouldChangeCharactersInRange:replalcement----%@",exception);
        }
    }
    //upto here on 03/09/2018....
    
    return YES;
}

/**
 * @description  it is an textFieldDelegate method it will be executed for ever character change........
 * @date
 * @method       textFieldDidChange:
 * @author
 * @param        UITextField
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

// verified by chandhu, shiva

- (void)textFieldDidChange:(UITextField *)textField {
    
    //    [self networkSwitch];
    if (textField == BillField) {
        BillField.tag = 4;
        if (isSearch.on) {
            
            if ((textField.text).length >= 3) {
                
                //[filteredSkuArrayList removeAllObjects];   // First clear the filtered array.
                filteredSkuArrayList = [[NSMutableArray alloc]init];
                filteredPriceArr = [[NSMutableArray alloc]init];
                skuArrayList = [[NSMutableArray alloc]init];
                
                // [skuArrayList removeAllObjects];
                startIndexint_ = -1;
                
                @try {
                    //added by Srinivasulu on 28/08/2018....
                    if (!isOfflineService && (!isHybirdCallFailed || !isHybirdMode) ) {
                        if (isSearchBool) {
                            isSearchBool = false;
                            searchString = [textField.text copy];
                            [self callSkuIdService:textField.text startIndex:[NSString stringWithFormat:@"%d",startIndexint_]];
                        }
                    }
                    else {
                        //                        BillField.rightViewMode = UITextFieldViewModeAlways;
                        //                        textFieldSpinner = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
                        //                        textFieldSpinner.frame = CGRectMake(BillField.frame.size.width - 40, 0, 50, 50);
                        //                        textFieldSpinner.tag = 7;
                        //                        textFieldSpinner.color = [UIColor blackColor];
                        //                        [BillField addSubview:textFieldSpinner];
                        //                        BillField.rightView = textFieldSpinner;
                        //                        [textFieldSpinner startAnimating];
                        
                        [HUD setHidden:NO];
                        
                        searchString = [textField.text copy];
                        BOOL status = FALSE;
                        //                        OmniRetailerViewController *omni = [[OmniRetailerViewController alloc] init];
                        //                        status =  [omni checkDatabaseStatus];
                        status=true;
                        if (status) {
                            
                            filteredSkuArrayList = [[NSMutableArray alloc]init];
                            skuArrayList = [[NSMutableArray alloc]init];
                            filteredPriceArr = [[NSMutableArray alloc]init];
                            if (tempSkuArrayList.count!=0) {
                                [tempSkuArrayList removeAllObjects];
                            }
                            if(isSearchingItem){
                                
                                //changed by Srinivasulu on 24/10/2017....
                                //reason searching the product has change to priceList search from skuMaster....
                                
                                //                                [self getSearchedProducts:BillField.text];
                                if(isHybirdCallFailed)
                                    BillField.tag = 2;
                                [self getPriceListForSearchString:BillField.text];
                                
                                //upto here on 24/10/2017....
                            }
                        }
                        else {
                            [HUD setHidden:YES];
                            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"You need to first login with the internet connectivity" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                            [alert show];
                        }
                    }
                }
                @catch (NSException *exception) {
                    
                    NSLog(@"%@",exception);
                }
            }
            else if ((textField.text).length == 0) {
                skListTable.hidden = YES;
            }
            
        }
        
        //added by Srinivasulu on 31/01/2018....
        else{
            
            try {
                
                if(intervalTImer == nil)
                    intervalTImer =  [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(ScanItem) userInfo:nil repeats:NO];
                else{
                    [intervalTImer invalidate];
                    
                    intervalTImer = [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(ScanItem) userInfo:nil repeats:NO];
                }
                //                ScanItem
                
            } catch (NSException * exception) {
                
            }
            
        }
        
        
        //upto here on 31/01/2018....
        
    }
    else if (textField == payTxt2) {
        
        if ((payTxt2.text).floatValue < (netPayLblVal.text).floatValue) {
            NSString *billDue = [NSString stringWithFormat:@"%.02f",(netPayLblVal.text).floatValue - (payTxt2.text).floatValue];
            
            //added by Srinivasulu on 24/08/2017....
            
            //added by Srinivasulu on 29/08/2017....
            if(returnAmountTxt != nil)
                returnAmountTxt.text = @"0.00";
            
            //returnAmountTxt.text = [NSString stringWithFormat:@"%.02f",[netPayLblVal.text floatValue] - [payTxt2.text floatValue]];
            
            //upto here on 24/08/2017....
            
            billStatusLabel.hidden = NO;
            billStatusLabelValue.hidden = NO;
            
            //added by Srinivasulu on 24/08/2017....
            
            billStatusLabel.hidden = YES;
            billStatusLabelValue.hidden = YES;
            
            //upto here on 24/08/2017....
            
            
            billStatusLabel.text = @"Bill Due";
            finalBillDue = [billDue copy];
            billStatusLabelValue.text = finalBillDue;
            if (segment_index == 6) {
                //changed by Srinivasulu on 05/05/2017....
                
                //                billStatusLabel.frame = CGRectMake(400.0, 450.0, 150.0, 40.0);
                //                billStatusLabelValue.frame = CGRectMake(680.0, 450.0, 150.0, 40.0);
                
                billStatusLabel.frame = CGRectMake(400.0, citytext.frame.origin.y + citytext.frame.size.height, 150.0, 40.0);
                billStatusLabelValue.frame = CGRectMake(680.0, billStatusLabel.frame.origin.y, 150.0, 40.0);
                
                
                
                //upto here on 05/05/2017....
            }
            else {
                
                //changed by Srinivasulu on 05/05/2017....
                
                //                billStatusLabel.frame = CGRectMake(400.0, 380, 150.0, 40.0);
                //                billStatusLabelValue.frame = CGRectMake(680.0, 380, 150.0, 40.0);
                
                
                
                billStatusLabel.frame = CGRectMake(400.0, citytext.frame.origin.y + citytext.frame.size.height, 150.0, 40.0);
                billStatusLabelValue.frame = CGRectMake(680.0, billStatusLabel.frame.origin.y, 150.0, 40.0);
                
                
                
                //upto here on 05/05/2017....
                
            }
            if ([WebServiceUtility checkIsCardPayment:paymentView]) {
                //changed by Srinivasulu on 05/05/2017....
                
                //                billStatusLabel.frame = CGRectMake(400.0, 330, 150.0, 40.0);
                //                billStatusLabelValue.frame = CGRectMake(680.0, 330, 150.0, 40.0);
                
                billStatusLabel.frame = CGRectMake(400.0, citytext.frame.origin.y + citytext.frame.size.height, 150.0, 40.0);
                billStatusLabelValue.frame = CGRectMake(680.0, billStatusLabel.frame.origin.y, 150.0, 40.0);
                
                //upto here on 05/05/2017....
                
            }
        }
        else if ((payTxt2.text).floatValue > (netPayLblVal.text).floatValue){
            NSString *changeReturn = [NSString stringWithFormat:@"%.02f",(payTxt2.text).floatValue - (netPayLblVal.text).floatValue];
            
            //added by Srinivasulu on 24/08/2017....
            
            if(returnAmountTxt != nil)
                returnAmountTxt.text = [NSString stringWithFormat:@"%.02f",(payTxt2.text).floatValue - (netPayLblVal.text).floatValue];
            
            //upto here on 24/08/2017....
            
            
            billStatusLabel.hidden = NO;
            billStatusLabelValue.hidden = NO;
            
            //added by Srinivasulu on 24/08/2017....
            
            billStatusLabel.hidden = YES;
            billStatusLabelValue.hidden = YES;
            
            //upto here on 24/08/2017....
            
            
            billStatusLabel.text = @"Change Return";
            billStatusLabelValue.text = changeReturn;
            NSString *billDue = @"0.0";
            billChangeReturn = [changeReturn copy];
            finalBillDue = [billDue copy];
            
            //changed by Srinivasulu on 05/05/2017....
            
            //            billStatusLabel.frame = CGRectMake(400.0, 390.00, 150.0, 40.0);
            //            billStatusLabelValue.frame = CGRectMake(680.0, 390.0, 150.0, 40.0);
            
            
            billStatusLabel.frame = CGRectMake(400.0, citytext.frame.origin.y + citytext.frame.size.height, 150.0, 40.0);
            billStatusLabelValue.frame = CGRectMake(680.0, billStatusLabel.frame.origin.y, 150.0, 40.0);
            
            //upto here on 05/05/2017...
            
            if ([WebServiceUtility checkIsCardPayment:paymentView]) {
                //changed by Srinivasulu on 05/05/2017....
                
                
                //                billStatusLabel.frame = CGRectMake(400.0, 330, 150.0, 40.0);
                //                billStatusLabelValue.frame = CGRectMake(680.0, 330, 150.0, 40.0);
                
                billStatusLabel.frame = CGRectMake(400.0, citytext.frame.origin.y + citytext.frame.size.height, 150.0, 40.0);
                billStatusLabelValue.frame = CGRectMake(680.0, billStatusLabel.frame.origin.y, 150.0, 40.0);
                
                //upto here on 05/05/2017....
                
                
                
            }
        }
        else {
            billStatusLabel.hidden = YES;
            billStatusLabelValue.hidden = YES;
            
            
            
            //            payTxt1.text = totalTxt.text;
            //            payTxt2.text = @"";
            
            //added by Srinivasulu on 24/08/2017....
            
            if(returnAmountTxt != nil)
                returnAmountTxt.text = @"0.0";
            
            //upto here on 24/08/2017....
            
            NSString *billDue = @"0.0";
            finalBillDue = [billDue copy];
            NSString *changeReturn = @"0.0";
            billChangeReturn = [changeReturn copy];
        }
    }
    else if (textField == custmerPhNum) {
        if (textField.text.length == 10) {
            [custmerPhNum resignFirstResponder];
            [self getCustomerDetailsForOffers];
        }
//        else{
//            // added by roja on 29/07/2019...
//
//            if (isToCallApplyCampaigns && !isNewReturnBill) {
//
//                [HUD setHidden:NO];
//
//                //                    [self callOffersForScanning:@"" qty:@"1" total:[NSString stringWithFormat:@"%.2f",(totalTxt.text).floatValue] itemPrice:@"100.0"];
//
//                [self callOffersForScanning:@"" qty:@"0" total:@"0" itemPrice:@"0"];
//            }
//            // upto here added by roja on 29/07/2019...
//        }
    }
    else if (textField == phnotext) {
        
        
        if (textField.text.length == 10) {
            
            [self getCustomerDetails];
            
        }
        else {
            newCust.hidden = YES;
        }
    }
    else if (textField == percentageDiscTxt) {
        
        NSArray *temp = [cartTotalItems[textField.tag] componentsSeparatedByString:@"#"];
        
        float price = 0.00f;
        
        if ([editedPriceArr[textField.tag] floatValue] > 0) {
            
            price = [editedPriceArr[textField.tag] floatValue];
        }
        else {
            price = [temp[4] floatValue];
        }
        
        float discountedPrice = 0;
        
        //commented && changed by Srinivasulu on 03/10/2017....
        //reason is deals, offers and turnOver amount has to be removed and calculated.....
        
        // discountedPrice = ((price * [[temp objectAtIndex:5] floatValue]) * [percentageDiscTxt.text floatValue]) / 100;
        @try {
            
            price = price * [temp[5] floatValue];
            
            if(onlineDealDiscountPriceArr.count > textField.tag)
                price -= [onlineDealDiscountPriceArr[textField.tag] floatValue];
            
            if(onlineOfferDiscountPriceArr.count > textField.tag)
                price -= [onlineOfferDiscountPriceArr[textField.tag] floatValue];
            
            float fraction = 0;
            if (turnoverofferDiscount > 0) {
                
                fraction = ((price / totalBeforeTurnOver) * 100);
                price = price - ((turnoverofferDiscount * fraction) / 100);
            }
            
            if(otherDiscountValue.floatValue > 0){
                
                price = price - (price * (otherDiscountValue.floatValue/100.0));
            }
            
            discountedPrice = (price * (percentageDiscTxt.text).floatValue) / 100;
            
            
            
            /* if([onlineDealDiscountPriceArr count] > sender.tag)
             price -= [[onlineDealDiscountPriceArr objectAtIndex:sender.tag] floatValue];
             
             if([onlineOfferDiscountPriceArr count] > sender.tag)
             price -= [[onlineOfferDiscountPriceArr objectAtIndex:sender.tag] floatValue];
             
             
             //added by Srinivasulu on  03/10/2017....
             
             float fraction = 0;
             if (turnoverofferDiscount > 0) {
             
             fraction = ((price / totalBeforeTurnOver) * 100);
             price = price - ((turnoverofferDiscount * fraction) / 100);
             }
             
             if([otherDiscountValue floatValue] > 0){
             
             price = price - (price  * ([otherDiscountValue floatValue]/100.0));
             }
             */
        } @catch (NSException *exception) {
            
        }
        //upto here on 03/10/2017.....
        
        percentageDiscValTxt.text = [NSString stringWithFormat:@"%.2f",discountedPrice];
    }
    
    else if (textField == itemPrecentageDiscountTxt) {
        
        NSArray *temp = [cartTotalItems[textField.tag] componentsSeparatedByString:@"#"];
        
        float price = 0.00f;
        
        if ([editedPriceArr[textField.tag] floatValue] > 0) {
            
            price = [editedPriceArr[textField.tag] floatValue];
        }
        else {
            price = [temp[4] floatValue];
        }
        
        float discountedPrice = 0;
        
        @try {
            
            price = price * [temp[5] floatValue];
            
            if(onlineDealDiscountPriceArr.count > textField.tag)
                price -= [onlineDealDiscountPriceArr[textField.tag] floatValue];
            
            if(onlineOfferDiscountPriceArr.count > textField.tag)
                price -= [onlineOfferDiscountPriceArr[textField.tag] floatValue];
            
            float fraction = 0;
            if (turnoverofferDiscount > 0) {
                
                fraction = ((price / totalBeforeTurnOver) * 100);
                price = price - ((turnoverofferDiscount * fraction) / 100);
            }
            
            if(otherDiscountValue.floatValue > 0){
                
                price = price - (price * (otherDiscountValue.floatValue/100.0));
            }
            
            discountedPrice = (price * (itemPrecentageDiscountTxt.text).floatValue) / 100;
            
        } @catch (NSException *exception) {
            
        }
        
        itemPrecentageDiscountValueTxt.text = [NSString stringWithFormat:@"%.2f",discountedPrice];
    }
    
    //added by Srinivasulu on 16/11/2017....
    else if (textField == conversionRatioTxt) {
        
        @try {
            if(textField.tag == 2){
                
                [self updatePaidAmount];
            }
            else{
                
                [self updateReturnAmount];
            }
        } @catch (NSException *exception) {
            
        }
    }
    else if (textField == totalDenominationsCountTxt) {
        
        @try {
            if(textField.tag == 2){
                
                denomValueTxt.text = textField.text;
                //                [self textFieldDidEndEditing:denomValueTxt];
                // [self updatePaidAmount];//
            }
            else{
                
                returnDenomValueTxt.text = textField.text;
                //                [self textFieldDidEndEditing:returnDenomValueTxt];
                //[self updateReturnAmount];
            }
        } @catch (NSException *exception) {
            
        }
    }
    
    //added by Srinivasulu on 26/12/2017....
    
    
    //    else if (textField == phoneNumberText){
    //        if (phoneNumberText.text.length == 10) {
    //            [giftTypeString isEqualToString:@"loyaltycard"]
    
    //            [phoneNumberText resignFirstResponder];
    //            giftNo.text = nil;
    //            [[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
    //            if (![giftVoucherArr containsObject:giftID.text] && [giftNo.text length] == 0) {
    //                [self giftContinue:(UIButton *)giftSearchBtn];
    //            }
    //            else {
    //                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    //                [validalert show];
    //            }
    //        }
    //    }
    
    //upto here on 26/12/2017....
    
    //    [totalDenominationsCountTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
    //    [conversionRatioTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];   - --
    
    //upto here on 16/11/2017....
    
}

/**
 * @description  It is tableFieldDelegates Method. It will executed when textFieldEndEditing....
 * @date
 * @method       textFieldDidEndEditing:
 * @author
 * @param        UITextField
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

-(void)textFieldDidEndEditing:(UITextField *)textField {
    
    //added on 14/03/2018....
    if(isNewReturnBill && offSetViewTo != 0)
        offSetViewTo = offSetViewTo - segmentedControl.frame.size.height;
    
    [self keyboardWillHide];
    offSetViewTo = 0;
    
    if (textField == otherDiscountTxt) {
        
        if (cartItem.count==0) {
            
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Add items to cart" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            otherDiscountTxt.text = @"0.00";
        }
        else if ((otherDiscountTxt.text).floatValue>100) {
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Invalid Input" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
            otherDiscountTxt.text = @"0.00";
            otherDiscountValue = [otherDiscountTxt.text copy];
            if (dealDataItems.count!=0) {                   //removing deals....
                
                for (int i = 0; i < dealDataItems.count; i++) {
                    
                    DealsController *_dealsController = dealDataItems[i];
                    _dealsController.isDealApplied = NO;
                }
            }
            [self updateValues];
        }
        else {
            otherDiscountValue = [otherDiscountTxt.text copy];
            if (dealDataItems.count!=0) {                   //removing deals....
                
                for (int i = 0; i < dealDataItems.count; i++) {
                    
                    DealsController *_dealsController = dealDataItems[i];
                    _dealsController.isDealApplied = NO;
                }
            }
            [self updateValues];
            
        }
        //        else  if ([otherDiscountTxt.text floatValue]>[totalTxt.text floatValue]) {
        //
        //            totalTxt.text = @"0.00";
        //
        //            for (int j = 0; j < [cartItemDetails count]; j++) {
        //
        //                NSArray *temp = [[cartItem objectAtIndex:j] componentsSeparatedByString:@"#"];
        //                totalTxt.text = [NSString stringWithFormat:@"%.2f",([totalTxt.text floatValue] + ([[cartItemDetails objectAtIndex:j] intValue] * [[temp objectAtIndex:4] floatValue]))];
        //
        //            }
        //            totalTxt.text = [NSString stringWithFormat:@"%.2f",([totalTxt.text floatValue] - [dealoroffersTxt.text floatValue])];
        //            if ([totalTxt.text floatValue] < 0) {
        //                totalTxt.text = @"0.00";
        //            }
        //            otherDiscountTxt.text = @"0.00";
        //
        //            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Other discount cannot be greater than the total amount" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        //            [alert show];
        //        }
        //        else {
        //
        //
        //            if ([otherDiscountTxt.text floatValue] == [totalTxt.text floatValue]) {
        //
        //                subtotalTxt.text = @"0.00";
        //                taxTxt.text = @"0.00";
        //            }
        //
        //
        //            totalTxt.text = @"0.00";
        //
        //            for (int j = 0; j < [cartItemDetails count]; j++) {
        //
        //                NSArray *temp = [[cartItem objectAtIndex:j] componentsSeparatedByString:@"#"];
        //                totalTxt.text = [NSString stringWithFormat:@"%.2f",([totalTxt.text floatValue] + ([[cartItemDetails objectAtIndex:j] intValue] * [[temp objectAtIndex:4] floatValue]))];
        //
        //            }
        //            [totalTxt setText:[NSString stringWithFormat:@"%.2f",[totalTxt.text floatValue]-[otherDiscountTxt.text floatValue]]];
        //
        //            if ([dealoroffersTxt.text floatValue] > 0) {
        //                [totalTxt setText:[NSString stringWithFormat:@"%.2f",[totalTxt.text floatValue]-[dealoroffersTxt.text floatValue]]];
        //            }
        //            if ([giftVoucherTxt.text floatValue] > 0) {
        //                [totalTxt setText:[NSString stringWithFormat:@"%.2f",[totalTxt.text floatValue]-[giftVoucherTxt.text floatValue]]];
        //            }
        //
        //
        //            if ([otherDiscountTxt.text floatValue] == 0) {
        //                [self updateValues];
        //            }
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            
            //added on 14/03/2018....
            if(!isNewReturnBill)
                
                self.view.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
        }
        
        
    }
    //added Srinivasulu on 02/07/2018....
    else if(textField.frame.origin.x == qtyFeild.frame.origin.x){
        @try{
            NSUInteger positionCount = [cartItem indexOfObject:cartTotalItems[textField.tag]];
            NSArray * temp = [cartItem[positionCount] componentsSeparatedByString:@"#"];
            
            float y_axis = self.view.frame.size.height - 350;
            if((textField.text).floatValue <= 0){
                
                NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"invalid_input", nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                textField.text = temp[5];
                return;
            }
            else if ((![zeroStockAvailInfoArr[textField.tag] boolValue] && ((textField.text).floatValue > [cartTotalItems[textField.tag] componentsSeparatedByString:@"#"][3].floatValue)) && (!isOfflineService || isMasterCounter)) {
                
                NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"quantity_should_be_less_than_or_equal_to_available_quantity", nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                textField.text = temp[5];
                return;
            }
            
            
            cartItem[positionCount] = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", temp[3], @"#", temp[4], @"#", [NSString stringWithFormat:@"%.2f",(textField.text).floatValue], @"#", temp[6], @"#", temp[7] ,@"#",temp[8], @"#", temp[9]];
            
            cartTotalItems[textField.tag] = [NSString stringWithFormat:@"%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@%@", temp[0], @"#", temp[1], @"#", temp[2], @"#", temp[3], @"#", temp[4], @"#", [NSString stringWithFormat:@"%.2f",(textField.text).floatValue], @"#", temp[6], @"#", temp[7] ,@"#", temp[8], @"#", temp[9]];
            
            cartItemDetails[positionCount] = [NSString stringWithFormat:@"%.2f",(textField.text).floatValue];
            
            if (isToCallApplyCampaigns && !isNewReturnBill) {
                
                float price = 0;
                
                for (int i=0; i<cartItem.count; i++) {
                    
                    price = price + ([cartItem[i] componentsSeparatedByString:@"#"][5].intValue*[cartItem[i] componentsSeparatedByString:@"#"][4].floatValue);
                }
                
                NSMutableDictionary *inputDic = [NSMutableDictionary new];
                [inputDic setValue:temp[0] forKey:SKUID];
                [inputDic setValue:[NSString stringWithFormat:@"%.2f",[temp[5] floatValue]] forKey:QTY];
                [inputDic setValue:[NSString stringWithFormat:@"%.2f",price] forKey:TOTAL_BILL_AMT];
                [inputDic setValue:[NSString stringWithFormat:@"%.02f",([temp[4] floatValue])] forKey:ITEM_UNIT_PRICE];
                
                [HUD setHidden:NO];
                
                [self callOffersForScanning:[inputDic valueForKey:SKUID] qty:[inputDic valueForKey:QTY] total:[inputDic valueForKey:TOTAL_BILL_AMT] itemPrice:[inputDic valueForKey:ITEM_UNIT_PRICE]];
                
                if (dealDataItems.count!=0) {                   //removing deals....
                    
                    for (int i = 0; i < dealDataItems.count; i++) {
                        
                        DealsController *_dealsController = dealDataItems[i];
                        _dealsController.isDealApplied = NO;
                    }
                }
            }
            
            [cartTable reloadData];
            
            [self updateValues];
            
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            
            [defaults setValue:[WebServiceUtility getCurrentDate] forKey:SCAN_END_TIME];
            [self saveCartItems:cartTotalItems];
        }
        @catch(NSException * e){
            
        }
    }
    //upto here on 02/07/2018....
    
    //commneted and added by Srinivasulu on 18/05/2018.... otherDiscountTxt to otherDiscountValueTxt
    else if (textField == otherDiscountValueTxt) {
        
        @try {
            
            if (cartItem.count==0) {
                
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"please_add_items_to_cart", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
                [alert show];
                otherDiscountValueTxt.text = @"0.00";
            }
            else if ((otherDiscountValueTxt.text).floatValue > ((totalTxt.text).floatValue - (dealoroffersTxt.text).floatValue) ) {
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"invalid_input", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
                [alert show];
                otherDiscountTxt.text = @"0.00";
                otherDiscountValueTxt.text = @"0.00";
                otherDiscountValue = [otherDiscountTxt.text copy];
                if (dealDataItems.count!=0) {                   //removing deals....
                    
                    for (int i = 0; i < dealDataItems.count; i++) {
                        
                        DealsController *_dealsController = dealDataItems[i];
                        _dealsController.isDealApplied = NO;
                    }
                }
                [self updateValues];
            }
            else {
                
                otherDiscountValue = [NSString stringWithFormat:@"%f", (((otherDiscountValueTxt.text).floatValue / ((totalTxt.text).floatValue - (dealoroffersTxt.text).floatValue)) * 100)];
                
                otherDiscountTxt.text = [NSString stringWithFormat:@"%.2f", otherDiscountValue.floatValue];
                if (dealDataItems.count!=0) {                   //removing deals....
                    
                    for (int i = 0; i < dealDataItems.count; i++) {
                        
                        DealsController *_dealsController = dealDataItems[i];
                        _dealsController.isDealApplied = NO;
                    }
                }
                [self updateValues];
                
            }
            if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                
                if(!isNewReturnBill)
                    
                    self.view.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);
            }
            
        } @catch (NSException *exception) {
            
        }
    }
    else if (textField == recash){
        loyaltyScrollView.contentOffset = loyaltyScrollPoint;
        [textField resignFirstResponder];
        
    }
    
    //added by Srinivasulu on 18/04/2017....
    
    else if((textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x) ){
        @try {
            if (isReturnDenom) {
                
                
                //added by Srinivasulu on 07/06/2017....
                
                float textFieldCount = textField.frame.origin.y / 40;
                
                
                if(textFieldCount > returnDenomCountArr.count){
                    
                    
                    if([self checkMaxReturnAmountWith:(textField.text).intValue * textField.tag isTextField:YES]){
                        
                        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                            
                            oneReturnCount = 0;
                            oneReturnCount = (textField.text).intValue;
                            
                            if (oneReturnCount > 0) {
                                [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                            else if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]){
                                
                                [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                
                            }
                            
                            for (UITextField *text in returnDenomValCoinsTxtArr) {
                                
                                if (text.tag == textField.tag) {
                                    text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                    
                                    
                                }
                            }
                            
                            for (UILabel *text in returnDenomCountCoinsArr) {
                                
                                if (text.tag == textField.tag) {
                                    text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                    
                                }
                            }
                            
                        }
                        else {
                            oneReturnCount = 0;
                            oneReturnCount = (textField.text).intValue;
                            
                            int actualValue = 0;
                            
                            if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                
                                NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                
                                actualValue = str.integerValue;
                            }
                            if (oneReturnCount < actualValue) {
                                fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                                if (oneReturnCount > 0) {
                                    [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                }
                                else {
                                    if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                        [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                    }
                                }
                            }
                            
                            for (UITextField *text in returnDenomValCoinsTxtArr) {
                                
                                if (text.tag == textField.tag) {
                                    text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                    
                                    
                                }
                            }
                            
                            for (UILabel *text in returnDenomCountCoinsArr) {
                                
                                if (text.tag == textField.tag) {
                                    text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                    
                                }
                            }
                        }
                        
                    }
                    
                    else {
                        
                        oneReturnCount = 0;
                        
                        oneReturnCount = (textField.text).intValue;
                        
                        int actualValue = 0;
                        
                        if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            
                            NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            
                            actualValue = str.integerValue;
                        }
                        
                        
                        if (oneReturnCount < actualValue) {
                            
                            if (oneReturnCount > 0) {
                                [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                            else{
                                if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                    [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                }
                            }
                            
                        }
                        else{
                            
                            float y_axis = self.view.frame.size.height - 350;
                            
                            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
                            
                            if( (actualValue >= 0) && (oneReturnCount > 0))
                                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                            
                            oneReturnCount = actualValue;
                            
                        }
                        
                        
                        
                        for (UITextField *text in returnDenomValCoinsTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in returnDenomCountCoinsArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                
                            }
                        }
                        
                        
                        
                        
                        
                    }
                    
                    return;
                }
                
                
                //upto here by 07/06/2017....
                
                
                
                
                if([self checkMaxReturnAmountWith:(textField.text).intValue * textField.tag isTextField:YES]){
                    if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                        oneReturnCount = 0;
                        oneReturnCount = (textField.text).intValue;
                        fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                        if (oneReturnCount > 0) {
                            [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                        else if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]){
                            
                            [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            
                        }
                        
                        for (UITextField *text in returnDenomValTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in returnDenomCountArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                
                            }
                        }
                        
                    }
                    else {
                        oneReturnCount = 0;
                        
                        oneReturnCount = (textField.text).intValue;
                        
                        int actualValue = 0;
                        
                        if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            
                            NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            
                            actualValue = str.integerValue;
                        }
                        if (oneReturnCount < actualValue) {
                            fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                            if (oneReturnCount > 0) {
                                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                            else {
                                if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                    [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                }
                            }
                        }
                        
                        for (UITextField *text in returnDenomValTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in returnDenomCountArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                                
                            }
                        }
                    }
                }
                else {
                    
                    oneReturnCount = 0;
                    
                    oneReturnCount = (textField.text).intValue;
                    
                    int actualValue = 0;
                    
                    if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                        
                        NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                        actualValue = str.integerValue;
                    }
                    
                    
                    if (oneReturnCount < actualValue) {
                        
                        if (oneReturnCount > 0) {
                            [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                        else{
                            if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                        }
                        
                    }
                    else{
                        
                        float y_axis = self.view.frame.size.height - 350;
                        
                        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
                        
                        if( (actualValue >= 0) && (oneReturnCount > 0))
                            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                        
                        oneReturnCount = actualValue;
                        
                        
                    }
                    
                    for (UITextField *text in returnDenomValTxtArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in returnDenomCountArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
                            
                        }
                    }
                    
                    
                    
                    
                    //                    float y_axis = self.view.frame.size.height - 350;
                    //
                    //
                    //                    NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
                    //
                    //
                    //                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                    
                    
                }
                
                
                //                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
                //                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
            }
            
            //changed by Srinivasulu  on 18/04/2017.....
            
            
            
            
            
            
            else {
                
                
                //added by Srinivasulu on 07/06/2017....
                
                float textFieldCount = textField.frame.origin.y / 40;
                
                
                if(textFieldCount > denomCountArr.count){
                    
                    //here we are checking whether bill payment was exceed the total pay....
                    
                    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
                        
                        oneCount = 0;
                        oneCount = (textField.text).intValue;
                        
                        //here we are check whether user has enter the any text or not....
                        
                        if (oneCount > 0) {
                            
                            [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            
                        }
                        else{
                            
                            if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                        }
                        
                        for (UITextField *text in denomValCoinsTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%ld",oneCount];
                                
                                break;
                            }
                        }
                        
                        for (UILabel *text in denomCountCoinsArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                                break;
                                
                            }
                        }
                        
                        
                    }
                    else {
                        oneCount = 0;
                        
                        oneCount = (textField.text).intValue;
                        
                        int actualValue = 0;
                        
                        if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            
                            NSString *str = [denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            
                            actualValue = str.integerValue;
                        }
                        
                        
                        if (oneCount < actualValue) {
                            tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                            if (oneCount > 0) {
                                [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                            else{
                                if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                    [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                                }
                            }
                            
                        }
                        else{
                            
                            float y_axis = self.view.frame.size.height - 350;
                            
                            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
                            
                            if( (actualValue >= 0) && (oneCount > 0))
                                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                            
                            oneCount = actualValue;
                            
                        }
                        
                        
                        for (UITextField *text in denomValCoinsTxtArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%ld",oneCount];
                                
                                
                            }
                        }
                        
                        for (UILabel *text in denomCountCoinsArr) {
                            
                            if (text.tag == textField.tag) {
                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                                
                            }
                        }
                        
                        [self updatePaidAmount];
                        
                        if (((changeReturnVal.text).floatValue > 0) && ((totalAmtVal.text).floatValue == (paidVal.text).floatValue)){
                            
                            float y_axis = self.view.frame.size.height - 350;
                            
                            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
                            
                            
                            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                            
                        }
                        
                    }
                    
                    
                    NSLog(@"---------------- edited the coin field -----------");
                    
                    return;
                }
                
                //upto here on 07/06/2017....
                
                if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
                    oneCount = 0;
                    oneCount = (textField.text).intValue;
                    tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                    if (oneCount > 0) {
                        [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                    }
                    else{
                        tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                        if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                            [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                    }
                    
                    for (UITextField *text in denomValTxtArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%ld",oneCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in denomCountArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                            
                        }
                    }
                    
                }
                else {
                    oneCount = 0;
                    
                    oneCount = (textField.text).intValue;
                    
                    int actualValue = 0;
                    
                    if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                        
                        NSString *str = [denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        
                        actualValue = str.integerValue;
                    }
                    
                    //                int actualValue = [[denominationDic valueForKey:@"10"] intValue];
                    if (oneCount < actualValue) {
                        tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                        if (oneCount > 0) {
                            [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                        }
                        else{
                            if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
                                [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
                            }
                        }
                        
                    }
                    
                    //added by Srinivasulu on 07/06/2017....
                    
                    else{
                        
                        float y_axis = self.view.frame.size.height - 350;
                        
                        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
                        
                        if( (actualValue >= 0) && (oneCount > 0))
                            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                        
                        oneCount = actualValue;
                        
                        
                    }
                    
                    //upto here on 07/06/2017....
                    
                    
                    
                    for (UITextField *text in denomValTxtArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%ld",oneCount];
                            
                            
                        }
                    }
                    
                    for (UILabel *text in denomCountArr) {
                        
                        if (text.tag == textField.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
                            
                        }
                    }
                    
                    [self updatePaidAmount];
                    
                    if (((changeReturnVal.text).floatValue > 0) && ((totalAmtVal.text).floatValue == (paidVal.text).floatValue)){
                        
                        float y_axis = self.view.frame.size.height - 350;
                        
                        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
                        
                        
                        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
                        
                    }
                    
                }
            }
            
            //upto here on 18/04/2017....
            
        } @catch (NSException *exception) {
            
        } @finally {
            @try {
                if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
                    
                    if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                        
                        paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                        
                        
                    }
                }
                else {
                    if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                            
                            paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                            
                            if(isNewReturnBill){
                                
                                paymentView.frame = CGRectMake(paymentView.frame.origin.x, 180.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                                
                            }
                            
                            //commented by Srinivasulu on 28/03/2018....
                            //                            if (!isReturnDenom && (textField.tag == 5 || textField.tag == 2 || textField.tag == 1)) {
                            //                                denominationView.frame = CGRectMake(denominationView.frame.origin.x, 80, denominationView.frame.size.width, denominationView.frame.size.height);
                            //                            }
                            //                            else if (textField.tag == 5 || textField.tag == 2 || textField.tag == 1) {
                            //                                returnDenominationView.frame = CGRectMake(returnDenominationView.frame.origin.x, 80, returnDenominationView.frame.size.width, returnDenominationView.frame.size.height);
                            //                            }
                            
                        }
                        
                    }
                    else {
                        paymentView.frame = CGRectMake(20, 140, 730, 820.0);
                    }
                }
                
                
                if((textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x)){
                    if (isReturnDenom)
                        [self updateReturnAmount];
                    else
                        [self updatePaidAmount];
                }
                
            } @catch (NSException *exception) {
                
            }
            
        }
        
    }
    
    
    //added by Srinivasulu on 12/08/2017....
    
    else  if ( textField.frame.origin.x == gtinTxt.frame.origin.x || textField.frame.origin.x == emailAddressTxt.frame.origin.x || textField.frame.origin.x == addressTxt1.frame.origin.x || textField.frame.origin.x == addressTxt2.frame.origin.x || textField.frame.origin.x == addressTxt3.frame.origin.x || textField.frame.origin.x == addressTxt4.frame.origin.x || textField.frame.origin.x == addressTxt5.frame.origin.x || textField.frame.origin.x == addressTxt6.frame.origin.x){
        
        @try {
            [self keyboardWillHide];
            offSetViewTo = 0;
        } @catch (NSException *exception) {
            
            NSLog(@"----exception while moving the frame----%@",exception);
        }
    }
    
    //added by Srinivasulu on 12/08/2017....
    
    
    else if (textField == totalDenominationsCountTxt) {
        
        @try {
            if(textField.tag == 2){
                
                denomValueTxt.text = textField.text;
                [self textFieldDidEndEditing:denomValueTxt];
                [self updatePaidAmount];
                // [self updatePaidAmount];//
            }
            else{
                
                returnDenomValueTxt.text = textField.text;
                [self textFieldDidEndEditing:returnDenomValueTxt];
                [self updateReturnAmount];
                
                //[self updateReturnAmount];
            }
        } @catch (NSException *exception) {
            
        }
    }
    
    
    //upto here on 18/04/2017......
    
    // if (textField == emailtext || textField == phnotext || textField == nametext) {
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            if (textField == nametext || textField == phoneTxt || textField == emailtext || textField == pintext) {
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80, paymentView.frame.size.width, paymentView.frame.size.height);
            }
        }
    }
    else {
        
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            
            //changed by Srinivasulu on 23/03/2018....
            
            //        if (textField == nametext || textField == phoneTxt || textField == emailtext || textField == pintext) {
            
            if (textField == phnotext || textField == landMarkTxt || textField == emailtext || textField == citytext ||  textField == pintext ||  textField == billRemarksTxt) {
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80, paymentView.frame.size.width, paymentView.frame.size.height);
                
                if(isNewReturnBill){
                    
                    paymentView.frame = CGRectMake(paymentView.frame.origin.x, 180.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                    
                }
            }
        }
        else {
            paymentView.frame = CGRectMake(20, 100, 730, 820.0);
        }
    }
    //}
    
}

/**
 * @description  It is tableFieldDelegates Method. It will executed when user started entering input....
 * @date         29/05/2016
 * @method       textFieldShouldBeginEditing:
 * @author       Srinivasulu
 * @param        UITextField
 * @param
 *
 * @return       BOOL
 *
 * @modified By  Srinivasulu by on 18/11/2017...
 * @reason       added the comments and need to change more
 *
 * @verified By
 * @verified On
 *
 */

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    
    if (textField == BillField) {
        [BillField resignFirstResponder];
    }
    else if (textField == recash){
        loyaltyScrollView.contentOffset = loyaltyScrollPoint;
        [textField resignFirstResponder];
        
    }
    
    else if (textField == tensQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            tensCount = 0;
            tensCount = (tensQty.text).intValue;
            tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
            if (tensCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",tensCount] forKey:@"10"];
                tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
            }
            else{
                tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                if ([denominationDic valueForKey:@"10"]) {
                    [denominationDic removeObjectForKey:@"10"];
                }
            }
            
        }
        else {
            tensCount = 0;
            tensCount = (tensQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"10"] intValue];
            if (tensCount < actualValue) {
                tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
                if (tensCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",tensCount] forKey:@"10"];
                    tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                }
                else{
                    tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
                    if ([denominationDic valueForKey:@"10"]) {
                        [denominationDic removeObjectForKey:@"10"];
                    }
                }
                
            }
            else {
                tensQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"10"] intValue]];
                tenValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"10"] intValue] * 10.00)];
                
            }
        }
    }
    else if (textField == twentyQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            twentyCount = 0;
            twentyCount = (twentyQty.text).intValue;
            twentyQty.text = [NSString stringWithFormat:@"%d",twentyCount];
            if (twentyCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",twentyCount] forKey:@"20"];
                twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
            }
            else{
                twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
                if ([denominationDic valueForKey:@"20"]) {
                    [denominationDic removeObjectForKey:@"20"];
                }
            }
        }
        else {
            twentyCount = 0;
            twentyCount = (twentyQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"20"] intValue];
            if (twentyCount < actualValue) {
                twentyQty.text = [NSString stringWithFormat:@"%d",twentyCount];
                if (twentyCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",twentyCount] forKey:@"20"];
                    twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
                }
                else{
                    twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
                    if ([denominationDic valueForKey:@"20"]) {
                        [denominationDic removeObjectForKey:@"20"];
                    }
                }
            }
            else {
                twentyQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"20"] intValue]];
                twentyValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"20"] intValue] * 20.00)];
                
            }
        }
    }
    else if (textField == fiftyQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            fiftyCount = 0;
            fiftyCount = (fiftyQty.text).intValue;
            fiftyQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
            if (fiftyCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiftyCount] forKey:@"50"];
                fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
            }
            else{
                fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
                if ([denominationDic valueForKey:@"50"]) {
                    [denominationDic removeObjectForKey:@"50"];
                }
            }
        }
        else {
            fiftyCount = 0;
            fiftyCount = (fiftyQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"50"] intValue];
            if (fiftyCount < actualValue) {
                fiftyQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
                if (fiftyCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",fiftyCount] forKey:@"50"];
                    fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
                }
                else{
                    fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
                    if ([denominationDic valueForKey:@"50"]) {
                        [denominationDic removeObjectForKey:@"50"];
                    }
                }
            }
            else {
                fiftyQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"50"] intValue]];
                fiftyValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"50"] intValue] * 50.00)];
            }
        }
    }
    else if (textField == hundredQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            hundredCount = 0;
            hundredCount = (hundredQty.text).intValue;
            hundredQty.text = [NSString stringWithFormat:@"%d",hundredCount];
            if (hundredCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",hundredCount] forKey:@"100"];
                hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
            }
            else{
                hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
                if ([denominationDic valueForKey:@"100"]) {
                    [denominationDic removeObjectForKey:@"100"];
                }
            }
        }
        else {
            hundredCount = 0;
            hundredCount = (hundredQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"100"] intValue];
            if (hundredCount < actualValue) {
                hundredQty.text = [NSString stringWithFormat:@"%d",hundredCount];
                if (hundredCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",hundredCount] forKey:@"100"];
                    hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
                }
                else{
                    hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
                    if ([denominationDic valueForKey:@"100"]) {
                        [denominationDic removeObjectForKey:@"100"];
                    }
                }
            }else {
                hundredQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"100"] intValue]];
                hundValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"100"] intValue] * 100.00)];
            }
        }
    }
    else if (textField == fiveHundredQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            fiveHundredCount = 0;
            fiveHundredCount = (fiveHundredQty.text).intValue;
            fiveHundredQty.text = [NSString stringWithFormat:@"%d",fiveHundredCount];
            if (fiveHundredCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredCount] forKey:@"500"];
                fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
            }
            else{
                fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
                if ([denominationDic valueForKey:@"500"]) {
                    [denominationDic removeObjectForKey:@"500"];
                }
            }
        }
        else {
            fiveHundredCount = 0;
            fiveHundredCount = (fiveHundredQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"500"] intValue];
            if (fiveHundredCount < actualValue) {
                fiveHundredQty.text = [NSString stringWithFormat:@"%d",fiveHundredCount];
                if (fiveHundredCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredCount] forKey:@"500"];
                    fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
                }
                else{
                    fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
                    if ([denominationDic valueForKey:@"500"]) {
                        [denominationDic removeObjectForKey:@"500"];
                    }
                }
            }
            else{
                fiveHundredQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"500"] intValue]];
                fiveHundValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"500"] intValue] * 500.00)];
            }
        }
    }
    else if (textField == thousandQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            thousandCount = 0;
            thousandCount = (thousandQty.text).intValue;
            thousandQty.text = [NSString stringWithFormat:@"%d",thousandCount];
            if (thousandCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",thousandCount] forKey:@"2000"];
                thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
            }
            else{
                thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
                if ([denominationDic valueForKey:@"2000"]) {
                    [denominationDic removeObjectForKey:@"2000"];
                }
            }
        }
        else {
            thousandCount = 0;
            thousandCount = (thousandQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"2000"] intValue];
            if (thousandCount < actualValue) {
                thousandQty.text = [NSString stringWithFormat:@"%d",thousandCount];
                if (thousandCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",thousandCount] forKey:@"2000"];
                    thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
                }
                else{
                    thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
                    if ([denominationDic valueForKey:@"2000"]) {
                        [denominationDic removeObjectForKey:@"2000"];
                    }
                }
            }else{
                thousandQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"2000"] intValue]];
                thousandValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"2000"] intValue] * 2000.00)];
            }
        }
    }
    else if (textField == oneQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            oneCount = 0;
            oneCount = (oneQty.text).intValue;
            oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
            if (oneCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:@"1"];
                oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
            }
            else{
                oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
                if ([denominationDic valueForKey:@"1"]) {
                    [denominationDic removeObjectForKey:@"1"];
                }
            }
        }
        else {
            oneCount = 0;
            oneCount = (oneQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"1"] intValue];
            if (oneCount < actualValue) {
                oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
                if (oneCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:@"1"];
                    oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
                }
                else{
                    oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
                    if ([denominationDic valueForKey:@"1"]) {
                        [denominationDic removeObjectForKey:@"1"];
                    }
                }
            }else{
                oneQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"1"] intValue]];
                oneValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"1"] intValue] * 1.00)];
            }
        }
    }
    else if (textField == twoQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            twoCount = 0;
            twoCount = (twoQty.text).intValue;
            twoQty.text = [NSString stringWithFormat:@"%d",twoCount];
            if (twoCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",twoCount] forKey:@"2"];
                twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount * 2.00)];
            }
            else{
                twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount *2.00)];
                if ([denominationDic valueForKey:@"2"]) {
                    [denominationDic removeObjectForKey:@"2"];
                }
            }
        }
        else {
            twoCount = 0;
            twoCount = (twoQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"2"] intValue];
            if (twoCount < actualValue) {
                twoQty.text = [NSString stringWithFormat:@"%d",twoCount];
                if (twoCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",twoCount] forKey:@"2"];
                    twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount * 2.00)];
                }
                else{
                    twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount *2.00)];
                    if ([denominationDic valueForKey:@"2"]) {
                        [denominationDic removeObjectForKey:@"2"];
                    }
                }
            }else{
                twoQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"2"] intValue]];
                twoValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"2"] intValue] * 2.00)];
            }
        }
    }
    else if (textField == fiveQty){
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            fiveCount = 0;
            fiveCount = (fiveQty.text).intValue;
            fiveQty.text = [NSString stringWithFormat:@"%d",fiveCount];
            if (fiveCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveCount] forKey:@"5"];
                fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount * 5.00)];
            }
            else{
                fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount *5.00)];
                if ([denominationDic valueForKey:@"5"]) {
                    [denominationDic removeObjectForKey:@"5"];
                }
            }
        }
        else {
            fiveCount = 0;
            fiveCount = (fiveQty.text).intValue;
            int actualValue = [[denominationDic valueForKey:@"5"] intValue];
            if (fiveCount < actualValue) {
                fiveQty.text = [NSString stringWithFormat:@"%d",fiveCount];
                if (fiveCount > 0) {
                    [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveCount] forKey:@"5"];
                    fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount * 5.00)];
                }
                else{
                    fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount *5.00)];
                    if ([denominationDic valueForKey:@"5"]) {
                        [denominationDic removeObjectForKey:@"5"];
                    }
                }
            }
            else{
                fiveQty.text = [NSString stringWithFormat:@"%d",[[denominationDic valueForKey:@"5"] intValue]];
                fiveValue.text = [NSString stringWithFormat:@"%.2f",([[denominationDic valueForKey:@"5"] intValue] * 5.00)];
            }
        }
    }
    else if (textField == tensReturnQty){
        if([self checkMaxReturnAmountWith:(tensReturnQty.text).intValue * 10.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                tensReturnCount = 0;
                tensReturnCount = (tensReturnQty.text).intValue;
                tensReturnQty.text = [NSString stringWithFormat:@"%d",tensReturnCount];
                if (tensReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",tensReturnCount] forKey:@"10"];
                    tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
                }
            }
            else {
                tensReturnCount = 0;
                tensReturnCount = (tensReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"10"] intValue];
                if (tensReturnCount < actualValue) {
                    tensReturnQty.text = [NSString stringWithFormat:@"%d",tensReturnCount];
                    if (tensReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",tensReturnCount] forKey:@"10"];
                        tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
                    }
                    else {
                        tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
                        if ([returnDenominationDic valueForKey:@"10"]) {
                            [returnDenominationDic removeObjectForKey:@"10"];
                        }
                    }
                }
                else {
                    tensReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"10"] intValue]];
                    tenReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"10"] intValue] * 10.00)];
                }
            }
            
        }
        else {
            tensReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"10"] intValue]];
            tenReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"10"] intValue] * 10.00)];
        }
    }
    else if (textField == twentyReturnQty){
        if([self checkMaxReturnAmountWith:(twentyReturnQty.text).intValue * 20.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                twentyReturnCount = 0;
                twentyReturnCount = (twentyReturnQty.text).intValue;
                twentyReturnQty.text = [NSString stringWithFormat:@"%d",twentyReturnCount];
                if (twentyReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twentyReturnCount] forKey:@"20"];
                    twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
                }
            }
            else {
                twentyReturnCount = 0;
                twentyReturnCount = (twentyReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"20"] intValue];
                if (twentyReturnCount < actualValue) {
                    twentyReturnQty.text = [NSString stringWithFormat:@"%d",twentyReturnCount];
                    if (twentyReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twentyReturnCount] forKey:@"20"];
                        twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
                    }
                    else {
                        twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
                        if ([returnDenominationDic valueForKey:@"20"]) {
                            [returnDenominationDic removeObjectForKey:@"20"];
                        }
                    }
                }
                else {
                    twentyReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"20"] intValue]];
                    twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"20"] intValue] * 20.00)];
                }
            }
        }
        else {
            twentyReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"20"] intValue]];
            twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"20"] intValue] * 20.00)];
        }
    }
    else if (textField == fiftyReturnQty){
        if([self checkMaxReturnAmountWith:(fiftyReturnQty.text).intValue * 50.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                fiftyReturnCount = 0;
                fiftyReturnCount = (fiftyReturnQty.text).intValue;
                fiftyReturnQty.text = [NSString stringWithFormat:@"%d",fiftyReturnCount];
                if (fiftyReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiftyReturnCount] forKey:@"50"];
                    fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
                }
            }
            else {
                fiftyReturnCount = 0;
                fiftyReturnCount = (fiftyReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"50"] intValue];
                if (fiftyReturnCount < actualValue) {
                    fiftyReturnQty.text = [NSString stringWithFormat:@"%d",fiftyReturnCount];
                    if (fiftyReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiftyReturnCount] forKey:@"50"];
                        fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
                    }
                    else {
                        fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
                        if ([returnDenominationDic valueForKey:@"50"]) {
                            [returnDenominationDic removeObjectForKey:@"50"];
                        }
                    }
                }
                else {
                    fiftyReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"50"] intValue]];
                    fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"50"] intValue] * 50.00)];
                }
            }
        }
        else {
            fiftyReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"50"] intValue]];
            fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"50"] intValue] * 50.00)];
        }
    }
    else if (textField == hundredReturnQty){
        if([self checkMaxReturnAmountWith:(hundredReturnQty.text).intValue * 100.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                hundredReturnCount = 0;
                hundredReturnCount = (hundredReturnQty.text).intValue;
                hundredReturnQty.text = [NSString stringWithFormat:@"%d",hundredReturnCount];
                if (hundredReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",hundredReturnCount] forKey:@"100"];
                    hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
                }
            }
            else {
                hundredReturnCount = 0;
                hundredReturnCount = (hundredReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"100"] intValue];
                if (hundredReturnCount < actualValue) {
                    hundredReturnQty.text = [NSString stringWithFormat:@"%d",hundredReturnCount];
                    if (hundredReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",hundredReturnCount] forKey:@"100"];
                        hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
                    }
                    else {
                        hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
                        if ([returnDenominationDic valueForKey:@"100"]) {
                            [returnDenominationDic removeObjectForKey:@"100"];
                        }
                    }
                }
                else {
                    hundredReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"100"] intValue]];
                    hundReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"100"] intValue] * 100.00)];
                }
            }
        }
        else {
            hundredReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"100"] intValue]];
            hundReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"100"] intValue] * 100.00)];
        }
    }
    else if (textField == fiveHundredReturnQty){
        if([self checkMaxReturnAmountWith:(fiveHundredReturnQty.text).intValue * 500.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                fiveHundredReturnCount = 0;
                fiveHundredReturnCount = (fiveHundredReturnQty.text).intValue;
                fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",fiveHundredReturnCount];
                if (fiveHundredReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredReturnCount] forKey:@"500"];
                    fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
                }
            }
            else {
                fiveHundredReturnCount = 0;
                fiveHundredReturnCount = (fiveHundredReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"500"] intValue];
                if (fiveHundredReturnCount < actualValue) {
                    fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",fiveHundredReturnCount];
                    if (fiveHundredReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredReturnCount] forKey:@"500"];
                        fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
                    }
                    else {
                        fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
                        if ([returnDenominationDic valueForKey:@"500"]) {
                            [returnDenominationDic removeObjectForKey:@"500"];
                        }
                    }
                }
                else {
                    fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"500"] intValue]];
                    fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"500"] intValue] * 500.00)];
                }
            }
        }
        else {
            fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"500"] intValue]];
            fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"500"] intValue] * 500.00)];
        }
    }
    else if (textField == thousandReturnQty){
        if([self checkMaxReturnAmountWith:(thousandReturnQty.text).intValue * 2000.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                thousandReturnCount = 0;
                thousandReturnCount = (thousandReturnQty.text).intValue;
                thousandReturnQty.text = [NSString stringWithFormat:@"%d",thousandReturnCount];
                if (thousandReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",thousandReturnCount] forKey:@"2000"];
                    thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
                }
            }
            else {
                thousandReturnCount = 0;
                thousandReturnCount = (thousandReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"2000"] intValue];
                if (thousandReturnCount < actualValue) {
                    thousandReturnQty.text = [NSString stringWithFormat:@"%d",thousandReturnCount];
                    if (thousandReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",thousandReturnCount] forKey:@"2000"];
                        thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
                    }
                    else {
                        thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
                        if ([returnDenominationDic valueForKey:@"2000"]) {
                            [returnDenominationDic removeObjectForKey:@"2000"];
                        }
                    }
                }
                else {
                    thousandReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"2000"] intValue]];
                    thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"2000"] intValue] * 2000.00)];
                }
            }
        }
        else {
            thousandReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"2000"] intValue]];
            thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"2000"] intValue] * 2000.00)];
        }
    }
    else if (textField == oneReturnQty){
        if([self checkMaxReturnAmountWith:(oneReturnQty.text).intValue * 1.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                oneReturnCount = 0;
                oneReturnCount = (oneReturnQty.text).intValue;
                oneReturnQty.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                if (oneReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:@"1"];
                    oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
                }
            }
            else {
                oneReturnCount = 0;
                oneReturnCount = (oneReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"1"] intValue];
                if (oneReturnCount < actualValue) {
                    oneReturnQty.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                    if (oneReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:@"1"];
                        oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
                    }
                    else {
                        oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
                        if ([returnDenominationDic valueForKey:@"1"]) {
                            [returnDenominationDic removeObjectForKey:@"1"];
                        }
                    }
                }
                else {
                    oneReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"1"] intValue]];
                    oneReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"1"] intValue] * 1.00)];
                }
            }
        }
        else {
            oneReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"1"] intValue]];
            oneReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"1"] intValue] * 1.00)];
        }
    }
    else if (textField == twoReturnQty){
        if([self checkMaxReturnAmountWith:(twoReturnQty.text).intValue * 2.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                twoReturnCount = 0;
                twoReturnCount = (twoReturnQty.text).intValue;
                twoReturnQty.text = [NSString stringWithFormat:@"%d",twoReturnCount];
                if (twoReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twoReturnCount] forKey:@"2"];
                    twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
                }
            }
            else {
                twoReturnCount = 0;
                twoReturnCount = (twoReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"2"] intValue];
                if (twoReturnCount < actualValue) {
                    twoReturnQty.text = [NSString stringWithFormat:@"%d",twoReturnCount];
                    if (twoReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twoReturnCount] forKey:@"2"];
                        twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
                    }
                    else {
                        twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
                        if ([returnDenominationDic valueForKey:@"2"]) {
                            [returnDenominationDic removeObjectForKey:@"2"];
                        }
                    }
                }
                else {
                    twoReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"2"] intValue]];
                    twoReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"2"] intValue] * 2.00)];
                }
            }
        }
        else {
            twoReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"2"] intValue]];
            twoReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"2"] intValue] * 2.00)];
        }
    }
    else if (textField == fiveReturnQty){
        if([self checkMaxReturnAmountWith:(fiveReturnQty.text).intValue * 5.00 isTextField:YES]){
            if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
                fiveReturnCount = 0;
                fiveReturnCount = (fiveReturnQty.text).intValue;
                fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                if (fiveReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveReturnCount] forKey:@"5"];
                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
                }
            }
            else {
                fiveReturnCount = 0;
                fiveReturnCount = (fiveReturnQty.text).intValue;
                int actualValue = [[returnDenominationDic valueForKey:@"5"] intValue];
                if (fiveReturnCount < actualValue) {
                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
                    if (fiveReturnCount > 0) {
                        [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveReturnCount] forKey:@"5"];
                        fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
                    }
                    else {
                        fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
                        if ([returnDenominationDic valueForKey:@"5"]) {
                            [returnDenominationDic removeObjectForKey:@"5"];
                        }
                    }
                }
                else {
                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
                }
            }
        }
        else {
            fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
            fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
        }
    }
    
    //chagned by Srinivasulu on 18/04/2017....
    
    //    else if((textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x) ){
    //        @try {
    //            if (isReturnDenom) {
    //                if([self checkMaxReturnAmountWith:[textField.text intValue] * textField.tag isTextField:YES]){
    //                    if (!([returnedval.text floatValue] >= [returnAmtVal.text floatValue])) {
    //                        oneReturnCount = 0;
    //                        oneReturnCount = [textField.text intValue];
    //                        fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
    //                        if (oneReturnCount > 0) {
    //                            [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                        }
    //                        else if ([[returnDenominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]){
    //
    //                            [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //
    //                        }
    //
    //                        for (UITextField *text in returnDenomValTxtArr) {
    //
    //                            if (text.tag == textField.tag) {
    //                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
    //
    //
    //                            }
    //                        }
    //
    //                        for (UILabel *text in returnDenomCountArr) {
    //
    //                            if (text.tag == textField.tag) {
    //                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
    //
    //                            }
    //                        }
    //
    //                    }
    //                    else {
    //                        oneReturnCount = 0;
    //
    //                        oneReturnCount = [textField.text intValue];
    //
    //                        int actualValue = 0;
    //
    //                        if ([[returnDenominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //
    //                            NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //
    //                            actualValue = [str integerValue];
    //                        }
    //                        if (oneReturnCount < actualValue) {
    //                            fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
    //                            if (oneReturnCount > 0) {
    //                                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                            }
    //                            else {
    //                                if ([[returnDenominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //                                    [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                                }
    //                            }
    //                        }
    //
    //                        for (UITextField *text in returnDenomValTxtArr) {
    //
    //                            if (text.tag == textField.tag) {
    //                                text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
    //
    //
    //                            }
    //                        }
    //
    //                        for (UILabel *text in returnDenomCountArr) {
    //
    //                            if (text.tag == textField.tag) {
    //                                text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
    //
    //                            }
    //                        }
    //                    }
    //                }
    //                else {
    //
    //                    oneReturnCount = [textField.text intValue];
    //
    //                    for (UITextField *text in returnDenomValTxtArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
    //
    //
    //                        }
    //                    }
    //
    //                    for (UILabel *text in returnDenomCountArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * textField.tag)];
    //
    //                        }
    //                    }
    //
    //
    //
    //
    //                    float y_axis = self.view.frame.size.height - 350;
    //
    //
    //                    NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
    //
    //
    //                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
    //
    //
    //                }
    //
    //
    ////                    fiveReturnQty.text = [NSString stringWithFormat:@"%d",[[returnDenominationDic valueForKey:@"5"] intValue]];
    ////                    fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",([[returnDenominationDic valueForKey:@"5"] intValue] * 5.00)];
    //                }
    //
    //            //changed by Srinivasulu  on 18/04/2017.....
    //
    //
    //
    //
    //
    //
    //            else {
    //
    //
    //                if (!([changeReturnVal.text floatValue] > 0) && !([totalAmtVal.text floatValue] == [paidVal.text floatValue])) {
    //                    oneCount = 0;
    //                    oneCount = [textField.text intValue];
    //                    tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
    //                    if (oneCount > 0) {
    //                        [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //
    //                    }
    //                    else{
    //                        tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
    //                        if ([[denominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //                            [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                        }
    //                    }
    //
    //                    for (UITextField *text in denomValTxtArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%ld",oneCount];
    //
    //
    //                        }
    //                    }
    //
    //                    for (UILabel *text in denomCountArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
    //
    //                        }
    //                    }
    //
    //                }
    //                else {
    //                    oneCount = 0;
    //
    //                    oneCount = [textField.text intValue];
    //
    //                    int actualValue = 0;
    //
    //                    if ([[denominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //
    //                        NSString *str = [denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //
    //                        actualValue = [str integerValue];
    //                    }
    //
    //                    //                int actualValue = [[denominationDic valueForKey:@"10"] intValue];
    //                    if (oneCount < actualValue) {
    //                        tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
    //                        if (oneCount > 0) {
    //                            [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                        }
    //                        else{
    //                            if ([[denominationDic allKeys] containsObject:[NSString stringWithFormat:@"%ld",(long)textField.tag]]) {
    //                                [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)textField.tag]];
    //                            }
    //                        }
    //
    //                    }
    //
    //
    //
    //                    for (UITextField *text in denomValTxtArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%ld",oneCount];
    //
    //
    //                        }
    //                    }
    //
    //                    for (UILabel *text in denomCountArr) {
    //
    //                        if (text.tag == textField.tag) {
    //                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * textField.tag)];
    //
    //                        }
    //                    }
    //
    //                    [self updatePaidAmount];
    //
    //                    if (!(!([changeReturnVal.text floatValue] > 0) && !([totalAmtVal.text floatValue] == [paidVal.text floatValue]))){
    //
    //                        float y_axis = self.view.frame.size.height - 350;
    //
    //                        NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
    //
    //
    //                        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
    //
    //                    }
    //
    //                }
    //            }
    //
    //            //upto here on 18/04/2017....
    //
    //        } @catch (NSException *exception) {
    //
    //        } @finally {
    //
    //        }
    //
    //    }
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            
            paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
        }
    }
    else {
        if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
            if (currentOriention == UIDeviceOrientationLandscapeRight || currentOriention == UIDeviceOrientationLandscapeLeft) {
                
                paymentView.frame = CGRectMake(paymentView.frame.origin.x, 80.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                
                if(isNewReturnBill){
                    
                    paymentView.frame = CGRectMake(paymentView.frame.origin.x, 180.0f, paymentView.frame.size.width, paymentView.frame.size.height);
                    
                }
                //commented by Srinivasulu on 28/03/2018....
                //                if (!isReturnDenom && (textField.tag == 5 || textField.tag == 2 || textField.tag == 1) && (textField != conversionRatioTxt && textField != totalDenominationsCountTxt)) {
                //                    denominationView.frame = CGRectMake(denominationView.frame.origin.x, 80, denominationView.frame.size.width, denominationView.frame.size.height);
                //                }
                //                else if ((textField.tag == 5 || textField.tag == 2 || textField.tag == 1) && (textField != conversionRatioTxt && textField != totalDenominationsCountTxt)) {
                //                    returnDenominationView.frame = CGRectMake(returnDenominationView.frame.origin.x, 80, returnDenominationView.frame.size.width, returnDenominationView.frame.size.height);
                //                }
                
            }
            
        }
        else {
            paymentView.frame = CGRectMake(20, 140, 730, 820.0);
        }
    }
    
    if(textField != conversionRatioTxt && textField != totalDenominationsCountTxt){
        
        if((textField.frame.origin.x == denomValueTxt.frame.origin.x) || (textField.frame.origin.x == returnDenomValueTxt.frame.origin.x)){
            if (isReturnDenom)
                [self updateReturnAmount];
            else
                [self updatePaidAmount];
        }
    }
    
    [textField resignFirstResponder];
    
    //  giftView.frame = CGRectMake(giftView.frame.origin.x, 10, giftView.frame.size.width, giftView.frame.size.height);
    
    return YES;
}

#pragma  -mark methods used for Denomination....

/**
 * @description  here we are reading the denomination from DB and displaying them....
 * @date
 * @method       populateDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       now new implementation allowing the user to select the denomination type....
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateDenominations {
    
    @try {
        
        denominationDic = [[NSMutableDictionary alloc] init];
        denomValTxtArr = [NSMutableArray new];
        denomCountArr = [NSMutableArray new];
        denomCountCoinsArr = [NSMutableArray new];
        denomValCoinsTxtArr = [NSMutableArray new];
        
        denominationDic = [[NSMutableDictionary alloc] init];
        returnDenominationDic = [[NSMutableDictionary alloc] init];
        denominationCoinDic = [NSMutableDictionary new];
        returnDenominationCoinDic = [NSMutableDictionary new];
        
        offline = [[OfflineBillingServices alloc] init];
        NSArray * denominations = [offline getDenominationDetails:currencyCodeStr];
        
        //added by Srinivasulu on 05/11/2017....
        
        @try {
            //in below if condition currencyCodeStr can be removed.... after && can be removed written by srinivasulu on 10/02/2018...
            if(!denominations.count && ([currencyCodeStr caseInsensitiveCompare:INR] == NSOrderedSame) ){
                [HUD setHidden:NO];
                HUD.labelText = @"Getting denominations...";
                
                
                if([offline getDenominationsDetails:-1 totalRecords:DOWNLOAD_RATE]){
                    
                    denominations = [offline getDenominationDetails:currencyCodeStr];
                }
                
                [HUD setHidden:YES];
            }
            
        } @catch (NSException *exception) {
            
            [HUD setHidden:YES];
        }
        
        //upto here on 05/05/2017....
        
        if(denominationsTypeArr == nil){
            
            
            //denominstaionsTypeTbl table creation....
            denominstaionsTypeTbl = [[UITableView alloc] init];
            denominstaionsTypeTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
            denominstaionsTypeTbl.dataSource = self;
            denominstaionsTypeTbl.delegate = self;
            (denominstaionsTypeTbl.layer).borderWidth = 1.0f;
            denominstaionsTypeTbl.layer.cornerRadius = 3;
            denominstaionsTypeTbl.layer.borderColor = [UIColor grayColor].CGColor;
            
            
            NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
            
            if ( ! ([[defaults valueForKey:DENOMNINATION_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:DENOMNINATION_OPTIONS] == nil)) {
                
                denominationsTypeArr = [[defaults valueForKey:DENOMNINATION_OPTIONS] mutableCopy];
                
                
                for(NSDictionary * payDic in [defaults valueForKey:DENOMNINATION_OPTIONS]){
                    
                    if([[payDic valueForKey:TENDER_NAME] caseInsensitiveCompare:currencyCodeStr] == NSOrderedSame){
                        
                        if(billPaymentTendeInfoDic.allKeys.count)
                            [billPaymentTendeInfoDic removeAllObjects];
                        
                        billPaymentTendeInfoDic = [payDic mutableCopy];
                        break;
                    }
                }
                
                if( (billPaymentTendeInfoDic == nil ) && denominationsTypeArr.count &&  !billPaymentTendeInfoDic.allKeys.count){
                    
                    billPaymentTendeInfoDic = [denominationsTypeArr[0] mutableCopy];
                }
                
            }
            
        }
        
        
        //        if ([denominations count]) {
        
        
        // close button to close the view ..
        backbutton = [[UIButton alloc] init] ;
        [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        backbutton.tag = 75;
        
        label = [[UILabel alloc] init] ;
        label.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        label.alpha = 1.0f;
        label.textAlignment = NSTextAlignmentLeft;
        label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label.textColor = [UIColor whiteColor];
        
        
        UIImage * image;
        UILabel * totalAmt;
        UILabel * paid;
        UILabel * changeReturn;
        
        UILabel * currencyCodeLbl;
        
        UIButton * continueBtn;
        UIButton * closeBtn;
        
        UIButton * showListOfAvaiDemBtn;
        UIImage * buttonImage_ = [UIImage imageNamed:@"arrow_1.png"];
        
        showListOfAvaiDemBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfAvaiDemBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
        [showListOfAvaiDemBtn addTarget:self
                                 action:@selector(showListOfAvailiableDenominations:) forControlEvents:UIControlEventTouchDown];
        
        
        currencyCodeLbl = [[UILabel alloc]init];
        currencyCodeLbl.textColor = [UIColor whiteColor];
        
        denominationTypeTxt = [[UITextField alloc] init];
        denominationTypeTxt.borderStyle = UITextBorderStyleBezel;
        denominationTypeTxt.textColor = [UIColor blackColor];
        denominationTypeTxt.backgroundColor = [UIColor whiteColor];
        denominationTypeTxt.delegate = self;
        
        conversionRatioTxt = [[UITextField alloc] init];
        conversionRatioTxt.borderStyle = UITextBorderStyleBezel;
        conversionRatioTxt.textColor = [UIColor blackColor];
        conversionRatioTxt.backgroundColor = [UIColor whiteColor];
        conversionRatioTxt.keyboardType = UIKeyboardTypeNumberPad;
        conversionRatioTxt.delegate = self;
        conversionRatioTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        qtyFeild.clearButtonMode = UITextFieldViewModeWhileEditing;
        //        qtyFeild.returnKeyType = UIReturnKeyDone;
        
        
        totalDenominationsCountTxt = [[UITextField alloc] init];
        totalDenominationsCountTxt.borderStyle = UITextBorderStyleBezel;
        totalDenominationsCountTxt.textColor = [UIColor blackColor];
        totalDenominationsCountTxt.backgroundColor = [UIColor whiteColor];
        totalDenominationsCountTxt.delegate = self;
        totalDenominationsCountTxt.userInteractionEnabled = NO;
        totalDenominationsCountTxt.keyboardType = UIKeyboardTypeNumberPad;
        [totalDenominationsCountTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        [totalDenominationsCountTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        [conversionRatioTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        
        if(denominations.count <= 1)
            totalDenominationsCountTxt.userInteractionEnabled = YES;
        
        showListOfAvaiDemBtn.tag = 2;
        conversionRatioTxt.tag = 2;
        totalDenominationsCountTxt.tag = 2;
        
        denominationTypeTxt.text = currencyCodeStr;
        
        
        
        image = [UIImage imageNamed:@"delete.png"];
        [backbutton setBackgroundImage:image forState:UIControlStateNormal];
        
        totalAmt = [[UILabel alloc]init];
        totalAmt.textColor = [UIColor whiteColor];
        
        totalAmtVal = [[UILabel alloc]init];
        totalAmtVal.textColor = [UIColor whiteColor];
        
        paid = [[UILabel alloc]init];
        paid.textColor = [UIColor whiteColor];
        
        paidVal = [[UILabel alloc]init];
        paidVal.textColor = [UIColor whiteColor];
        
        changeReturn = [[UILabel alloc]init];
        changeReturn.textColor = [UIColor whiteColor];
        
        changeReturnVal = [[UILabel alloc]init];
        changeReturnVal.textColor = [UIColor whiteColor];
        
        continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [continueBtn addTarget:self action:@selector(checkStatus) forControlEvents:UIControlEventTouchUpInside];
        continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        continueBtn.titleLabel.textColor = [UIColor whiteColor];
        continueBtn.backgroundColor = [UIColor grayColor];
        
        closeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [closeBtn addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        closeBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        closeBtn.titleLabel.textColor = [UIColor whiteColor];
        closeBtn.backgroundColor = [UIColor grayColor];
        closeBtn.tag = 75;
        
        denominationView   = [[UIView alloc] init];
        (denominationView.layer).borderWidth = 1.0f;
        (denominationView.layer).cornerRadius = 8.0f;
        denominationView.backgroundColor = [UIColor blackColor];
        denominationView.hidden = false;
        denominationView.tag = 33;
        
        UIScrollView  * denomSrollView;
        denomSrollView = [[UIScrollView alloc] init];
        denomSrollView.hidden = NO;
        denomSrollView.backgroundColor = [UIColor clearColor];
        denomSrollView.bounces = FALSE;
        denomSrollView.scrollEnabled = YES;
        
        NSArray * paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString * documentsDirectory = [paths[0] stringByAppendingString:@"/DenominationImagesFolder"];
        
        int index = 1;
        
        float yPosition = 0;
        float xPosition = 10;
        
        float textYposition = 20;
        
        NSMutableArray * notesArr = [NSMutableArray new];
        NSMutableArray * coinsArr = [NSMutableArray new];
        
        for (NSDictionary *infoDic in denominations) {
            
            if (![[infoDic valueForKey:kDenomType] boolValue]) {
                
                [coinsArr addObject:infoDic];
            }
            else {
                
                [notesArr addObject:infoDic];
            }
        }
        
        
        NSSortDescriptor *sortDescriptor;
        
        //changed by Srinivaslulu on 16/08/2017....
        
        //            sortDescriptor = [[NSSortDescriptor alloc] initWithKey:kDenomValue
        //                                                         ascending:YES];
        
        sortDescriptor = [[NSSortDescriptor alloc] initWithKey:kDenomValue
                                                     ascending:NO];
        
        
        //upto here on 16/08/2017....
        
        NSArray * sortDescriptors = @[sortDescriptor];
        notesArr = [[notesArr sortedArrayUsingDescriptors:sortDescriptors] mutableCopy];
        coinsArr = [[coinsArr sortedArrayUsingDescriptors:sortDescriptors] mutableCopy];
        
        
        
        @try{
            
            label.text = NSLocalizedString(@"_cash_denomination", nil);
            
            totalAmt.text = NSLocalizedString(@"total_bill", nil);
            totalAmtVal.text = netPayLblVal.text;
            
            paid.text = NSLocalizedString(@"paid_amount", nil);
            paidVal.text = NSLocalizedString(@"0_00", nil);
            
            changeReturn.text = NSLocalizedString(@"change_return", nil);
            changeReturnVal.text = NSLocalizedString(@"0_00", nil);
            
            currencyCodeLbl.text = NSLocalizedString(@"_currency", nil);
            
            [continueBtn setTitle:NSLocalizedString(@"continue", nil)    forState:UIControlStateNormal];
            [closeBtn setTitle:NSLocalizedString(@"back", nil)    forState:UIControlStateNormal];
        }
        @catch(NSException * exception){
            
        }
        
        
        //commented by Srinivasulu on 15/11/2017....
        
        //            denominationView.frame = CGRectMake( 100, 80, 800, 670);
        //            label.frame = CGRectMake( 0, 0, denominationView.frame.size.width, 60);
        //            label.font = [UIFont systemFontOfSize:25];
        //            backbutton.frame = CGRectMake( 740, 10.0, 45.0, 45.0);
        //
        //
        denomSrollView.frame = CGRectMake( 0, 80, 800, 250);
        //            denomSrollView.contentSize = CGSizeMake( 778, 500);
        
        //upto here on 15/11/2017....
        
        
        for (NSDictionary *dic in notesArr) {
            
            
            NSString *savedImagePath = [documentsDirectory stringByAppendingPathComponent:[dic valueForKey:kDenomImage]];
            
            UIImageView *denomImg = [[UIImageView alloc] init];
            denomImg.backgroundColor = [UIColor clearColor];
            denomImg.image = [UIImage imageWithContentsOfFile:savedImagePath];
            
            UIButton *addDenom = [[UIButton alloc] init];
            addDenom.backgroundColor = [UIColor clearColor];
            addDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [addDenom addTarget:self action:@selector(addDenominations:) forControlEvents:UIControlEventTouchUpInside];
            //            [addDenom  setImage:[UIImage imageNamed:@"Plus_Gray.png"] forState:UIControlStateNormal];
            //            [addDenom setContentMode:UIViewContentModeScaleAspectFit];
            
            UIButton *removeDenom = [[UIButton alloc] init];
            removeDenom.backgroundColor = [UIColor clearColor];
            removeDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            //            [removeDenom addTarget:self action:@selector(removeDenominations:) forControlEvents:UIControlEventTouchUpInside];
            //            [removeDenom  setImage:[UIImage imageNamed:@"Minus_Gray.png"] forState:UIControlStateNormal];
            
            UILabel *addDenomLbl = [[UILabel alloc] init];
            addDenomLbl.text = @"+";
            addDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel *removeDenomLbl = [[UILabel alloc] init];
            removeDenomLbl.text = @"-";
            removeDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel  *denomValueMultiply = [[UILabel alloc]init];
            denomValueMultiply.textColor = [UIColor whiteColor];
            denomValueMultiply.text = [NSString stringWithFormat:@"%@%@",[[dic valueForKey:kDenomValue] stringValue],@"  X"];
            denomValueMultiply.textAlignment = NSTextAlignmentRight;
            
            UILabel  *denomValue = [[UILabel alloc]init];
            denomValue.textColor = [UIColor whiteColor];
            denomValue.text = @"0.00";
            denomValue.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            denomValueTxt = [[CustomTextField alloc]init];
            denomValueTxt.borderStyle = UITextBorderStyleRoundedRect;
            denomValueTxt.textColor = [UIColor blackColor];
            denomValueTxt.font = [UIFont systemFontOfSize:18.0];
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.keyboardType = UIKeyboardTypeNumberPad;
            denomValueTxt.autocorrectionType = UITextAutocorrectionTypeNo;
            denomValueTxt.layer.borderColor = [UIColor whiteColor].CGColor;
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.delegate = self;
            denomValueTxt.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                denominationView.frame = CGRectMake(100, 0, 800, 670);
                label.frame = CGRectMake(0, 0, denominationView.frame.size.width, 70);
                label.font = [UIFont systemFontOfSize:25];
                backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                
                denomSrollView.frame = CGRectMake(0, 80, 778, 150);
                denomSrollView.contentSize = CGSizeMake(778, 800);
                
                removeDenomLbl.frame = CGRectMake(xPosition , yPosition, 60, 40);
                removeDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                
                denomImg.frame = CGRectMake( xPosition, yPosition + removeDenomLbl.frame.size.height, 156, 60);
                
                addDenomLbl.frame = CGRectMake( xPosition + denomImg.frame.size.width - 30, yPosition, 60, 40);
                addDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                //                denomImg.frame = CGRectMake( xPosition, yPosition + 40, 156, 60);
                
                
                removeDenom.frame = CGRectMake( denomImg.frame.origin.x, denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                addDenom.frame = CGRectMake( denomImg.frame.origin.x + (denomImg.frame.size.width/2), denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                
                //                denomImg.contentMode = UIViewContentModeScaleAspectFit;
                
                //                denomImg.frame = CGRectMake( xPosition, yPosition, 156, 80);
                //                removeDenom.frame = CGRectMake( 5, denomImg.frame.origin.y + 5, (denomImg.frame.size.width - 20)/2, denomImg.frame.size.height - 10);
                //                addDenom.frame = CGRectMake( removeDenom.frame.origin.x + 10 + removeDenom.frame.size.width, removeDenom.frame.origin.y, removeDenom.frame.size.width, removeDenom.frame.size.height);
                
                denomValueMultiply.frame = CGRectMake( 450, textYposition, 120, 25);
                denomValueMultiply.font = [UIFont boldSystemFontOfSize:20];
                
                denomValueTxt.frame = CGRectMake( denomValueMultiply.frame.origin.x + denomValueMultiply.frame.size.width + 20,textYposition, 80, 25);
                denomValueTxt.font = [UIFont boldSystemFontOfSize:20];
                
                
                
                //changed by Srinivasulu on 29/08/2017....
                
                //                    denomValue.frame = CGRectMake(denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 20,textYposition, 200, 25);
                denomValue.frame = CGRectMake( denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 10,textYposition, denomSrollView.frame.size.width - (denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 20), 25);
                
                
                //upto here on 29/08/2017....
                
                denomValue.font = [UIFont systemFontOfSize:20.0];
                
            }
            
            xPosition = xPosition + denomImg.frame.size.width + 20;
            
            textYposition = textYposition + 40;
            
            if (index != 0 && (index%2) == 0) {
                
                yPosition = yPosition + denomImg.frame.size.height+addDenomLbl.frame.size.height;
                //                yPosition = yPosition + denomImg.frame.size.height + 40;
                
                xPosition = 10;
            }
            [denomSrollView addSubview:addDenomLbl];
            [denomSrollView addSubview:removeDenomLbl];
            [denomSrollView addSubview:denomImg];
            [denomSrollView addSubview:addDenom];
            [denomSrollView addSubview:removeDenom];
            [denomSrollView addSubview:denomValueMultiply];
            [denomSrollView addSubview:denomValue];
            [denomSrollView addSubview:denomValueTxt];
            
            index++;
            
            [denomValTxtArr addObject:denomValueTxt];
            [denomCountArr addObject:denomValue];
        }
        
        //--
        index = 1;
        
        if(notesArr.count%2 != 0)
            index = 3;
        
        //added by srinivasulu on 27/03/2018....
        //because need to be displaced side
        
        yPosition = 0;
        xPosition = 380;
        
        //upto here on 27/03/2018....
        
        for (NSDictionary *dic in coinsArr) {
            
            NSString *savedImagePath = [documentsDirectory stringByAppendingPathComponent:[dic valueForKey:kDenomImage]];
            
            UIImageView *denomImg = [[UIImageView alloc] init];
            denomImg.backgroundColor = [UIColor clearColor];
            denomImg.image = [UIImage imageWithContentsOfFile:savedImagePath];
            //            denomImg.contentMode = UIViewContentModeScaleAspectFit;
            
            UIButton *addDenom = [[UIButton alloc] init];
            addDenom.backgroundColor = [UIColor clearColor];
            addDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [addDenom addTarget:self action:@selector(addCoinsDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UIButton *removeDenom = [[UIButton alloc] init];
            removeDenom.backgroundColor = [UIColor clearColor];
            removeDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [removeDenom addTarget:self action:@selector(removeCoinDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            
            UILabel *addDenomLbl = [[UILabel alloc] init];
            addDenomLbl.text = @"+";
            addDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel *removeDenomLbl = [[UILabel alloc] init];
            removeDenomLbl.text = @"-";
            removeDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel  *denomValueMultiply = [[UILabel alloc]init];
            denomValueMultiply.textColor = [UIColor whiteColor];
            denomValueMultiply.text = [NSString stringWithFormat:@"%@%@",[[dic valueForKey:kDenomValue] stringValue],@"  X"];
            denomValueMultiply.textAlignment = NSTextAlignmentRight;
            
            UILabel  *denomValue = [[UILabel alloc]init];
            denomValue.textColor = [UIColor whiteColor];
            denomValue.text = @"0.00";
            denomValue.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            denomValueTxt = [[CustomTextField alloc]init];
            denomValueTxt.borderStyle = UITextBorderStyleRoundedRect;
            denomValueTxt.textColor = [UIColor blackColor];
            denomValueTxt.font = [UIFont systemFontOfSize:18.0];
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.keyboardType = UIKeyboardTypeNumberPad;
            denomValueTxt.autocorrectionType = UITextAutocorrectionTypeNo;
            denomValueTxt.layer.borderColor = [UIColor whiteColor].CGColor;
            denomValueTxt.backgroundColor = [UIColor whiteColor];
            denomValueTxt.delegate = self;
            denomValueTxt.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            //commented by Srinivasulu on 18/04/2017....
            
            //                [denomValueTxt addTarget:self action:@selector(coinsTextFieldChanged:) forControlEvents:UIControlEventEditingChanged];
            
            
            //upto here on 18/04/2017....
            
            
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                removeDenomLbl.frame = CGRectMake(xPosition , yPosition, 60, 40);
                removeDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                
                denomImg.frame = CGRectMake(xPosition, yPosition + removeDenomLbl.frame.size.height, 95, 85);
                
                addDenomLbl.frame = CGRectMake(xPosition + denomImg.frame.size.width - 30, yPosition, 60, 40);
                addDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                removeDenom.frame = CGRectMake(denomImg.frame.origin.x, denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                addDenom.frame = CGRectMake(denomImg.frame.origin.x + (denomImg.frame.size.width/2), denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                
                denomValueMultiply.frame = CGRectMake(450, textYposition, 120, 25);
                denomValueMultiply.font = [UIFont boldSystemFontOfSize:20];
                
                denomValueTxt.frame = CGRectMake(denomValueMultiply.frame.origin.x + denomValueMultiply.frame.size.width + 20,textYposition, 80, 25);
                denomValueTxt.font = [UIFont boldSystemFontOfSize:20];
                
                
                //changed by Srinivasulu on 29/08/2017....
                
                //                    denomValue.frame = CGRectMake(denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 20,textYposition, 200, 25);
                denomValue.frame = CGRectMake( denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 10,textYposition, denomSrollView.frame.size.width - (denomValueTxt.frame.origin.x + denomValueTxt.frame.size.width + 20), 25);
                
                //upto here on 29/08/2017....
                
                denomValue.font = [UIFont systemFontOfSize:20.0];
                
            }
            
            
            
            //commented and changes done by srinivasulu on 27/03/2018....
            //because need to be displaced side
            
            //            xPosition = xPosition + denomImg.frame.size.width + 20;
            textYposition = textYposition + 40;
            
            //            if (index != 0 && (index%3) == 0) {
            //
            //                yPosition = yPosition + denomImg.frame.size.height+addDenomLbl.frame.size.height ;
            //
            //                xPosition = 10;
            //            }
            
            //            if (index != 0 && (index%3) == 0) {
            
            yPosition = yPosition + denomImg.frame.size.height+addDenomLbl.frame.size.height ;
            
            //                xPosition = 10;
            //            }
            
            //upto here by srinivasulu on 27/03/2018....
            
            [denomSrollView addSubview:addDenomLbl];
            [denomSrollView addSubview:removeDenomLbl];
            [denomSrollView addSubview:denomImg];
            [denomSrollView addSubview:addDenom];
            [denomSrollView addSubview:removeDenom];
            [denomSrollView addSubview:denomValueMultiply];
            [denomSrollView addSubview:denomValue];
            [denomSrollView addSubview:denomValueTxt];
            
            index++;
            
            [denomValCoinsTxtArr addObject:denomValueTxt];
            [denomCountCoinsArr addObject:denomValue];
            
        }
        
        
        UILabel * underLineLbl = [[UILabel alloc] init];
        underLineLbl.backgroundColor = [UIColor lightGrayColor];
        
        denominationView.layer.borderColor = [UIColor whiteColor].CGColor;
        denominationView.layer.borderWidth = 1.0f;
        
        [denominationView addSubview:label];
        [denominationView addSubview:backbutton];
        
        [denominationView addSubview:currencyCodeLbl];
        
        [denominationView addSubview:denominationTypeTxt];
        [denominationView addSubview:conversionRatioTxt];
        [denominationView addSubview:totalDenominationsCountTxt];
        [denominationView addSubview:showListOfAvaiDemBtn];
        
        
        [denominationView addSubview:denomSrollView];
        
        
        [denominationView addSubview:underLineLbl];
        
        
        [denominationView addSubview:totalAmt];
        [denominationView addSubview:totalAmtVal];
        [denominationView addSubview:paidVal];
        [denominationView addSubview:paid];
        [denominationView addSubview:changeReturnVal];
        [denominationView addSubview:changeReturn];
        [denominationView addSubview:continueBtn];
        [denominationView addSubview:closeBtn];
        [self.view addSubview:denominationView];
        
        
        //changed by Srinivasulu on 15/11/2017....
        //        conversionRatioTxt.text = @"0.00";
        //        totalDenominationsCountTxt.text = @"0";
        
        conversionRatioTxt.placeholder = NSLocalizedString(@"conversion_ration", nil);
        totalDenominationsCountTxt.placeholder = NSLocalizedString(@"count", nil);
        
        if([currencyCodeStr caseInsensitiveCompare:INR] == NSOrderedSame){
            
            conversionRatioTxt.hidden = YES;
            totalDenominationsCountTxt.hidden = YES;
        }
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            
            //changed by Srinivasulu on 15/11/2017....
            label.frame = CGRectMake( 0, 0, 800, 52);
            backbutton.frame = CGRectMake( label.frame.origin.x + label.frame.size.width - 50, 5.0, 40.0, 40.0);
            
            
            currencyCodeLbl.frame = CGRectMake(  10, label.frame.origin.y + label.frame.size.height + 5, (label.frame.size.width - 100)/4 , 40.0);
            denominationTypeTxt.frame = CGRectMake( currencyCodeLbl.frame.origin.x + currencyCodeLbl.frame.size.width + 5, currencyCodeLbl.frame.origin.y, (label.frame.size.width)/4, currencyCodeLbl.frame.size.height);
            conversionRatioTxt.frame = CGRectMake( denominationTypeTxt.frame.origin.x + denominationTypeTxt.frame.size.width + 15, currencyCodeLbl.frame.origin.y, denominationTypeTxt.frame.size.width, currencyCodeLbl.frame.size.height);
            totalDenominationsCountTxt.frame = CGRectMake( conversionRatioTxt.frame.origin.x + conversionRatioTxt.frame.size.width + 15, currencyCodeLbl.frame.origin.y, denominationTypeTxt.frame.size.width/1.4, currencyCodeLbl.frame.size.height);
            
            showListOfAvaiDemBtn.frame = CGRectMake( (denominationTypeTxt.frame.origin.x + denominationTypeTxt.frame.size.width - 50), denominationTypeTxt.frame.origin.y - 10,  60, 60);
            
            
            
            CGRect contentRect = CGRectZero;
            for (UIView *view in denomSrollView.subviews) {
                
                contentRect = CGRectUnion(contentRect, view.frame);
            }
            //                yPosition   denomSrollView.frame
            
            float height = 425;
            
            if(denomSrollView.frame.size.height > yPosition)
                height = denomSrollView.frame.size.height;
            
            denomSrollView.frame = CGRectMake( 0, denominationTypeTxt.frame.origin.y + denominationTypeTxt.frame.size.height,  label.frame.size.width, height);
            
            
            denomSrollView.contentSize = contentRect.size;
            
            underLineLbl.frame = CGRectMake( 450, denomSrollView.frame.origin.y + denomSrollView.frame.size.height, 320, 2);
            
            totalAmt.frame = CGRectMake( 450, underLineLbl.frame.origin.y + underLineLbl.frame.size.height + 4, 150, 30);
            totalAmtVal.frame = CGRectMake( 670, totalAmt.frame.origin.y, 150, 30);
            
            
            paid.frame = CGRectMake( 450, totalAmt.frame.origin.y + totalAmt.frame.size.height + 4, 150, 30);
            paidVal.frame = CGRectMake( 670, paid.frame.origin.y, 150, 30);
            
            changeReturn.frame = CGRectMake( 450, paid.frame.origin.y + paid.frame.size.height + 4, 150, 30);
            changeReturnVal.frame = CGRectMake( 670, changeReturn.frame.origin.y, 150, 30);
            
            continueBtn.frame = CGRectMake( 100.0, changeReturnVal.frame.origin.y + changeReturnVal.frame.size.height + 10, 250.0, 40);
            closeBtn.frame = CGRectMake( 450.0, continueBtn.frame.origin.y, 250.0, 40);
            
            
            float  originY = 80;
            
            if(originY  > ((self.view.frame.size.width - label.frame.size.width) / 2))
                originY = (self.view.frame.size.width - label.frame.size.width) / 2;
            
            denominationView.frame = CGRectMake( (self.view.frame.size.width - label.frame.size.width)/2, originY, label.frame.size.width, continueBtn.frame.origin.y + continueBtn.frame.size.height + 4);
            
            label.font = [UIFont fontWithName:TEXT_FONT_NAME size:25];
            currencyCodeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:25];
            
            
            denominationTypeTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            conversionRatioTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            totalDenominationsCountTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            
            
            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
            totalAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
            paid.font = [UIFont boldSystemFontOfSize:20.0];
            paidVal.font = [UIFont boldSystemFontOfSize:20.0];
            changeReturn.font = [UIFont boldSystemFontOfSize:20.0];
            changeReturnVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            continueBtn.layer.cornerRadius = 10.0f;
            closeBtn.layer.cornerRadius = 10.0;
            
            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        }
        else{
            
        }
        
        //upto here on 15/11/2017....
        
        
        //        }
        //        else {
        //            [self setSiblings:paymentView enabled:true];
        //
        //            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Denominations are not available" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        //            [alert show];
        //
        //        }
        
    }
    @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are showing list of denominations....
 * @date         16/11/2017
 * @method       showListOfAvailiableDenominations:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 * @return
 * @verified By
 * @verified On
 *
 *
 * @modified By
 * @reason
 *
 */

-(void)showListOfAvailiableDenominations:(UIButton *)sender{
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        float tableHeight = denominationsTypeArr.count * 40;
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
            tableHeight = denominationsTypeArr.count * 33;
        
        if(denominationsTypeArr.count > 5)
            tableHeight = (tableHeight/denominationsTypeArr.count) * 5;
        
        denominstaionsTypeTbl.tag = sender.tag;
        
        if(sender.tag == 2)
            [self showPopUpForTables:denominstaionsTypeTbl  popUpWidth:denominationTypeTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:denominationTypeTxt  showViewIn:denominationView permittedArrowDirections:UIPopoverArrowDirectionUp];
        else
            [self showPopUpForTables:denominstaionsTypeTbl  popUpWidth:denominationTypeTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:denominationTypeTxt  showViewIn:returnDenominationView permittedArrowDirections:UIPopoverArrowDirectionUp];
        
        
    } @catch (NSException *exception) {
        
        NSLog(@"%@",exception);
    }
}

/**
 * @description  here we are adding the denomination amount....
 * @date
 * @method       addDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)addDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            
            if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                
                NSString *str = [denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                
                oneCount = str.integerValue;
            }
            else {
                oneCount = 0;
            }
            oneCount++;
            oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
            if (oneCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                
                for (UITextField *text in denomValTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in denomCountArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
        }
        else {
            
            //changed by Srinivasulu on 18/04/2017....
            
            //            [self addLabel];
            //added by Srinivasulu on 18/04/2017....
            
            float y_axis = self.view.frame.size.height - 350;
            
            //                if(requestRefNoTxt.isEditing)
            //                    y_axis = requestRefNoTxt.frame.origin.y + requestRefNoTxt.frame.size.height;
            
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
            
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            //upto here on 18/04/2017....
        }
        [self updatePaidAmount];
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are adding the denomination coins amount....
 * @date
 * @method       addCoinsDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)addCoinsDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
            
            if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                
                NSString *str = [denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                
                oneCount = str.integerValue;
            }
            else {
                oneCount = 0;
            }
            oneCount++;
            oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
            if (oneCount > 0) {
                [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                
                for (UITextField *text in denomValCoinsTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in denomCountCoinsArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
        }
        else {
            
            //changed by Srinivasulu on 18/04/2017....
            
            
            //            [self addLabel];
            //added by Srinivasulu on 18/04/2017....
            
            float y_axis = self.view.frame.size.height - 350;
            
            //                if(requestRefNoTxt.isEditing)
            //                    y_axis = requestRefNoTxt.frame.origin.y + requestRefNoTxt.frame.size.height;
            
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_bill_amount", nil)];
            
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            //upto here on 18/04/2017....
        }
        [self updatePaidAmount];
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are removing the denomination note amount from the paid amount....
 * @date
 * @method       removeDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)removeDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        if ([denominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
            
            NSString *str = [denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            
            oneCount = str.integerValue;
        }
        else {
            oneCount = 0;
        }
        if (oneCount != 0) {
            oneCount--;
        }
        if (oneCount>=0) {
            if ([denominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                for (UITextField *text in denomValTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in denomCountArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            if (oneCount == 0) {
                [denominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
        }
        [self updatePaidAmount];
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are removing the denomination coin amount from the paid amount....
 * @date
 * @method       removeCoinDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)removeCoinDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        if ([denominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
            
            NSString *str = [denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            
            oneCount = str.integerValue;
        }
        else {
            oneCount = 0;
        }
        if (oneCount != 0) {
            oneCount--;
        }
        if (oneCount>=0) {
            if ([denominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                for (UITextField *text in denomValCoinsTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in denomCountCoinsArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            if (oneCount == 0) {
                [denominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
            else {
                [denominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
        }
        [self updatePaidAmount];
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are reading the denomination from DB and displaying them....
 * @date
 * @method       populateReturnDenominationViewDynamically:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       now new implementation allowing the user to select the denomination type....
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateReturnDenominationViewDynamically {
    @try {
        
        isReturnDenom = true;
        //changeReturnVal
        returnDenomValTxtArr = [NSMutableArray new];
        returnDenomCountArr = [NSMutableArray new];
        returnDenomValCoinsTxtArr = [NSMutableArray new];
        returnDenomCountCoinsArr = [NSMutableArray new];
        
        returnDenominationDic = [NSMutableDictionary new];
        returnDenominationCoinDic = [NSMutableDictionary new];
        
        offline = [[OfflineBillingServices alloc] init];
        
        
        NSArray * denominations = [offline getDenominationDetails:currencyCodeStr];
        
        
        //        if ([denominations count]) {
        
        tensReturnCount = 0;
        twentyReturnCount = 0;
        fiftyReturnCount = 0;
        hundredReturnCount = 0;
        fiveHundredReturnCount = 0;
        thousandReturnCount = 0;
        oneReturnCount = 0;
        twoReturnCount = 0;
        fiveReturnCount = 0;
        
        
        UIImage * image;
        
        UILabel * currencyCodeLbl;
        
        UILabel * totalAmt;
        UILabel * paid;
        
        UIButton   * continueBtn;
        UIButton   * closeBtn;
        
        UIButton * showListOfAvaiDemBtn;
        UIImage * buttonImage_ = [UIImage imageNamed:@"arrow_1.png"];
        
        showListOfAvaiDemBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [showListOfAvaiDemBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
        [showListOfAvaiDemBtn addTarget:self
                                 action:@selector(showListOfAvailiableDenominations:) forControlEvents:UIControlEventTouchDown];
        
        
        // close button to close the view ..
        backbutton = [[UIButton alloc] init] ;
        [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        backbutton.tag = 78;
        
        label = [[UILabel alloc] init] ;
        label.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        label.alpha = 1.0f;
        label.textAlignment = NSTextAlignmentLeft;
        label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        label.textColor = [UIColor whiteColor];
        
        
        image = [UIImage imageNamed:@"delete.png"];
        [backbutton setBackgroundImage:image forState:UIControlStateNormal];
        
        
        
        totalAmt = [[UILabel alloc]init];
        totalAmt.textColor = [UIColor whiteColor];
        
        returnAmtVal = [[UILabel alloc]init];
        returnAmtVal.textColor = [UIColor whiteColor];
        
        paid = [[UILabel alloc]init];
        paid.textColor = [UIColor whiteColor];
        
        returnedval = [[UILabel alloc]init];
        returnedval.textColor = [UIColor whiteColor];
        
        
        continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        // pay the cash button to continue the transaction ..
        [continueBtn addTarget:self action:@selector(checkReturnDenomStatus) forControlEvents:UIControlEventTouchUpInside];
        continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        continueBtn.titleLabel.textColor = [UIColor whiteColor];
        continueBtn.backgroundColor = [UIColor grayColor];
        
        closeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [closeBtn addTarget:self action:@selector(backToReturnDenomination) forControlEvents:UIControlEventTouchUpInside];
        closeBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
        closeBtn.titleLabel.textColor = [UIColor whiteColor];
        closeBtn.backgroundColor = [UIColor grayColor];
        
        
        returnDenominationView    = [[UIView alloc] init];
        (returnDenominationView.layer).borderWidth = 1.0f;
        (returnDenominationView.layer).cornerRadius = 8.0f;
        returnDenominationView.backgroundColor = [UIColor blackColor];
        returnDenominationView.hidden = false;
        returnDenominationView.tag = 33;
        
        
        currencyCodeLbl = [[UILabel alloc]init];
        currencyCodeLbl.textColor = [UIColor whiteColor];
        
        denominationTypeTxt = [[UITextField alloc] init];
        denominationTypeTxt.borderStyle = UITextBorderStyleBezel;
        denominationTypeTxt.textColor = [UIColor blackColor];
        denominationTypeTxt.backgroundColor = [UIColor whiteColor];
        
        conversionRatioTxt = [[UITextField alloc] init];
        conversionRatioTxt.borderStyle = UITextBorderStyleBezel;
        conversionRatioTxt.textColor = [UIColor blackColor];
        conversionRatioTxt.backgroundColor = [UIColor whiteColor];
        conversionRatioTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        
        totalDenominationsCountTxt = [[UITextField alloc] init];
        totalDenominationsCountTxt.borderStyle = UITextBorderStyleBezel;
        totalDenominationsCountTxt.textColor = [UIColor blackColor];
        totalDenominationsCountTxt.backgroundColor = [UIColor whiteColor];
        totalDenominationsCountTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        conversionRatioTxt.delegate = self;
        
        totalDenominationsCountTxt.delegate = self;
        totalDenominationsCountTxt.userInteractionEnabled = NO;
        [totalDenominationsCountTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        [conversionRatioTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
        
        denominationTypeTxt.text = currencyCodeStr;
        
        if(denominations.count <= 1)
            totalDenominationsCountTxt.userInteractionEnabled = YES;
        
        showListOfAvaiDemBtn.tag = 4;
        conversionRatioTxt.tag = 4;
        totalDenominationsCountTxt.tag = 4;
        
        
        UIScrollView  *denomSrollView = [[UIScrollView alloc] init];
        denomSrollView.hidden = NO;
        denomSrollView.backgroundColor = [UIColor clearColor];
        denomSrollView.bounces = FALSE;
        denomSrollView.scrollEnabled = YES;
        
        
        @try{
            
            label.text = NSLocalizedString(@"_cash_denomination", nil);
            totalAmt.text = NSLocalizedString(@"change_to_be_returned", nil);
            paid.text = NSLocalizedString(@"returned_amount", nil);
            
            returnAmtVal.text = changeReturnVal.text;
            
            returnedval.text = NSLocalizedString(@"0_00", nil);
            currencyCodeLbl.text = NSLocalizedString(@"_currency", nil);
            
            [continueBtn setTitle:NSLocalizedString(@"continue", nil)    forState:UIControlStateNormal];
            [closeBtn setTitle:NSLocalizedString(@"back", nil)    forState:UIControlStateNormal];
        }
        @catch(NSException * exception){
            
        }
        
        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString *documentsDirectory = [paths[0] stringByAppendingString:@"/DenominationImagesFolder"];
        
        int index=1;
        
        float yPosition = 0;
        float xPosition = 10;
        
        float textYposition = 20;
        
        NSMutableArray *notesArr = [NSMutableArray new];
        NSMutableArray *coinsArr = [NSMutableArray new];
        
        for (NSDictionary *infoDic in denominations) {
            
            if (![[infoDic valueForKey:kDenomType] boolValue]) {
                
                [coinsArr addObject:infoDic];
            }
            else {
                [notesArr addObject:infoDic];
            }
        }
        
        NSSortDescriptor *sortDescriptor;
        
        //changed by Srinivasulu on 29/08/2017....
        
        //            sortDescriptor = [[NSSortDescriptor alloc] initWithKey:kDenomValue
        //                                                         ascending:YES];
        sortDescriptor = [[NSSortDescriptor alloc] initWithKey:kDenomValue
                                                     ascending:NO];
        //upto here on 29/08/2017....
        
        NSArray *sortDescriptors = @[sortDescriptor];
        notesArr = [[notesArr sortedArrayUsingDescriptors:sortDescriptors] mutableCopy];
        coinsArr = [[coinsArr sortedArrayUsingDescriptors:sortDescriptors] mutableCopy];
        
        //            returnDenominationView.frame = CGRectMake(100, 80, 800, 670);
        //            label.frame = CGRectMake(0, 0, returnDenominationView.frame.size.width, 70);
        //            label.font = [UIFont systemFontOfSize:25];
        //            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
        
        
        denomSrollView.frame = CGRectMake(0, 80, 800, 250);
        //            denomSrollView.contentSize = CGSizeMake(778, 500);
        
        for (NSDictionary *dic in notesArr) {
            
            NSString *savedImagePath = [documentsDirectory stringByAppendingPathComponent:[dic valueForKey:kDenomImage]];
            
            UIImageView *denomImg = [[UIImageView alloc] init];
            denomImg.backgroundColor = [UIColor clearColor];
            denomImg.image = [UIImage imageWithContentsOfFile:savedImagePath];
            
            UIButton *addDenom = [[UIButton alloc] init];
            addDenom.backgroundColor = [UIColor clearColor];
            addDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [addDenom addTarget:self action:@selector(addReturnDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UIButton *removeDenom = [[UIButton alloc] init];
            removeDenom.backgroundColor = [UIColor clearColor];
            removeDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [removeDenom addTarget:self action:@selector(removeReturnDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UILabel *addDenomLbl = [[UILabel alloc] init];
            addDenomLbl.text = @"+";
            addDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel *removeDenomLbl = [[UILabel alloc] init];
            removeDenomLbl.text = @"-";
            removeDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel  *denomValueMultiply = [[UILabel alloc]init];
            denomValueMultiply.textColor = [UIColor whiteColor];
            denomValueMultiply.text = [NSString stringWithFormat:@"%@%@",[[dic valueForKey:kDenomValue] stringValue],@"  X"];
            denomValueMultiply.textAlignment = NSTextAlignmentRight;
            
            UILabel  *denomValue = [[UILabel alloc]init];
            denomValue.textColor = [UIColor whiteColor];
            denomValue.text = @"0.00";
            denomValue.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            returnDenomValueTxt = [[CustomTextField alloc]init];
            returnDenomValueTxt.borderStyle = UITextBorderStyleRoundedRect;
            returnDenomValueTxt.textColor = [UIColor blackColor];
            returnDenomValueTxt.font = [UIFont systemFontOfSize:18.0];
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.keyboardType = UIKeyboardTypeNumberPad;
            returnDenomValueTxt.autocorrectionType = UITextAutocorrectionTypeNo;
            returnDenomValueTxt.layer.borderColor = [UIColor whiteColor].CGColor;
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.delegate = self;
            returnDenomValueTxt.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                //                    returnDenominationView.frame = CGRectMake(100, 80, 800, 670);
                //                    label.frame = CGRectMake(0, 0, denominationView.frame.size.width, 70);
                //                    label.font = [UIFont systemFontOfSize:25];
                //                    backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                
                //                    denomSrollView.frame = CGRectMake(0, 290, 778, 150);
                //                    denomSrollView.contentSize = CGSizeMake(778, 500);
                
                removeDenomLbl.frame = CGRectMake(xPosition , yPosition, 60, 40);
                removeDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                
                denomImg.frame = CGRectMake(xPosition, yPosition + removeDenomLbl.frame.size.height, 156, 60);
                
                addDenomLbl.frame = CGRectMake(xPosition + denomImg.frame.size.width - 30, yPosition, 60, 40);
                addDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                removeDenom.frame = CGRectMake(denomImg.frame.origin.x, denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                addDenom.frame = CGRectMake(denomImg.frame.origin.x + (denomImg.frame.size.width/2), denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                
                denomValueMultiply.frame = CGRectMake(450, textYposition, 120, 25);
                denomValueMultiply.font = [UIFont boldSystemFontOfSize:20];
                
                returnDenomValueTxt.frame = CGRectMake(denomValueMultiply.frame.origin.x + denomValueMultiply.frame.size.width + 20,textYposition, 80, 25);
                returnDenomValueTxt.font = [UIFont boldSystemFontOfSize:20];
                
                
                
                //changed by Srinivasulu on 29/08/2017....
                
                //                    denomValue.frame = CGRectMake(returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 20,textYposition, 200, 25);
                denomValue.frame = CGRectMake( returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 10,textYposition, denomSrollView.frame.size.width - (returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 20), 25);
                
                
                //upto here on 29/08/2017....
                
                denomValue.font = [UIFont systemFontOfSize:20.0];
                
            }
            
            xPosition = xPosition + denomImg.frame.size.width + 20;
            
            textYposition = textYposition + 40;
            
            if (index != 0 && (index%2) == 0) {
                
                yPosition = yPosition + denomImg.frame.size.height+addDenomLbl.frame.size.height;
                
                xPosition = 10;
            }
            [denomSrollView addSubview:addDenomLbl];
            [denomSrollView addSubview:removeDenomLbl];
            [denomSrollView addSubview:denomImg];
            [denomSrollView addSubview:addDenom];
            [denomSrollView addSubview:removeDenom];
            [denomSrollView addSubview:denomValueMultiply];
            [denomSrollView addSubview:denomValue];
            [denomSrollView addSubview:returnDenomValueTxt];
            
            index++;
            
            [returnDenomValTxtArr addObject:returnDenomValueTxt];
            [returnDenomCountArr addObject:denomValue];
            
        }
        
        index = 0;
        
        
        if(notesArr.count%2 != 0)
            index = 3;
        
        //added by srinivasulu on 27/03/2018....
        //because need to be displaced side
        
        yPosition = 0;
        xPosition = 380;
        
        //upto here on 27/03/2018....
        
        
        for (NSDictionary *dic in coinsArr) {
            
            NSString *savedImagePath = [documentsDirectory stringByAppendingPathComponent:[dic valueForKey:kDenomImage]];
            
            UIImageView *denomImg = [[UIImageView alloc] init];
            denomImg.backgroundColor = [UIColor clearColor];
            denomImg.image = [UIImage imageWithContentsOfFile:savedImagePath];
            
            UIButton *addDenom = [[UIButton alloc] init];
            addDenom.backgroundColor = [UIColor clearColor];
            addDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [addDenom addTarget:self action:@selector(addReturnCoinsDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            UIButton *removeDenom = [[UIButton alloc] init];
            removeDenom.backgroundColor = [UIColor clearColor];
            removeDenom.tag = [[dic valueForKey:kDenomValue] integerValue];
            [removeDenom addTarget:self action:@selector(removeReturnCoinsDenominations:) forControlEvents:UIControlEventTouchUpInside];
            
            
            UILabel *addDenomLbl = [[UILabel alloc] init];
            addDenomLbl.text = @"+";
            addDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel *removeDenomLbl = [[UILabel alloc] init];
            removeDenomLbl.text = @"-";
            removeDenomLbl.textColor = [UIColor whiteColor];
            
            UILabel  *denomValueMultiply = [[UILabel alloc]init];
            denomValueMultiply.textColor = [UIColor whiteColor];
            denomValueMultiply.text = [NSString stringWithFormat:@"%@%@",[[dic valueForKey:kDenomValue] stringValue],@"  X"];
            denomValueMultiply.textAlignment = NSTextAlignmentRight;
            
            UILabel  *denomValue = [[UILabel alloc]init];
            denomValue.textColor = [UIColor whiteColor];
            denomValue.text = @"0.00";
            denomValue.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            returnDenomValueTxt = [[CustomTextField alloc]init];
            returnDenomValueTxt.borderStyle = UITextBorderStyleRoundedRect;
            returnDenomValueTxt.textColor = [UIColor blackColor];
            returnDenomValueTxt.font = [UIFont systemFontOfSize:18.0];
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.keyboardType = UIKeyboardTypeNumberPad;
            returnDenomValueTxt.autocorrectionType = UITextAutocorrectionTypeNo;
            returnDenomValueTxt.layer.borderColor = [UIColor whiteColor].CGColor;
            returnDenomValueTxt.backgroundColor = [UIColor whiteColor];
            returnDenomValueTxt.delegate = self;
            returnDenomValueTxt.tag = [[dic valueForKey:kDenomValue] integerValue];
            
            //commented by Srinivasulu on 18/04/2017....
            
            //                [returnDenomValueTxt addTarget:self action:@selector(coinsTextFieldChanged:) forControlEvents:UIControlEventEditingChanged];
            
            //upto here on 18/04/2017....
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                //                    returnDenominationView.frame = CGRectMake(100, 80, 800, 670);
                //                    label.frame = CGRectMake(0, 0, returnDenominationView.frame.size.width, 70);
                //                    label.font = [UIFont systemFontOfSize:25];
                //                    backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
                //
                //                    denomSrollView.frame = CGRectMake(0, 290, 778, 150);
                //                    denomSrollView.contentSize = CGSizeMake(778, 500);
                
                removeDenomLbl.frame = CGRectMake(xPosition , yPosition, 60, 40);
                removeDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                
                denomImg.frame = CGRectMake(xPosition, yPosition + removeDenomLbl.frame.size.height, 95, 85);
                
                addDenomLbl.frame = CGRectMake(xPosition + denomImg.frame.size.width - 30, yPosition, 60, 40);
                addDenomLbl.font = [UIFont boldSystemFontOfSize:22];
                
                removeDenom.frame = CGRectMake(denomImg.frame.origin.x, denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                addDenom.frame = CGRectMake(denomImg.frame.origin.x + (denomImg.frame.size.width/2), denomImg.frame.origin.y, denomImg.frame.size.width/2, denomImg.frame.size.height);
                
                denomValueMultiply.frame = CGRectMake(450, textYposition, 120, 25);
                denomValueMultiply.font = [UIFont boldSystemFontOfSize:20];
                
                returnDenomValueTxt.frame = CGRectMake(denomValueMultiply.frame.origin.x + denomValueMultiply.frame.size.width + 20,textYposition, 80, 25);
                returnDenomValueTxt.font = [UIFont boldSystemFontOfSize:20];
                
                
                //changed by Srinivasulu on 29/08/2017....
                
                //                    denomValue.frame = CGRectMake(returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 20,textYposition, 200, 25);
                denomValue.frame = CGRectMake( returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 10,textYposition, denomSrollView.frame.size.width - (returnDenomValueTxt.frame.origin.x + returnDenomValueTxt.frame.size.width + 20), 25);
                
                
                //upto here on 29/08/2017....
                
                
                denomValue.font = [UIFont systemFontOfSize:20.0];
                
            }
            
            
            //commented and changes done by srinivasulu on 27/03/2018....
            //because need to be displaced side
            
            //            xPosition = xPosition + denomImg.frame.size.width + 20;
            textYposition = textYposition + 40;
            
            //            if (index != 0 && (index%2) == 0) {
            
            yPosition = yPosition + denomImg.frame.size.height+addDenomLbl.frame.size.height ;
            
            //                xPosition = 10;
            //            }
            
            
            //upto here by srinivasulu on 27/03/2018....
            
            
            
            
            [denomSrollView addSubview:addDenomLbl];
            [denomSrollView addSubview:removeDenomLbl];
            [denomSrollView addSubview:denomImg];
            [denomSrollView addSubview:addDenom];
            [denomSrollView addSubview:removeDenom];
            [denomSrollView addSubview:denomValueMultiply];
            [denomSrollView addSubview:denomValue];
            [denomSrollView addSubview:returnDenomValueTxt];
            
            index++;
            
            [returnDenomValCoinsTxtArr addObject:returnDenomValueTxt];
            [returnDenomCountCoinsArr addObject:denomValue];
        }
        
        CGRect contentRect = CGRectZero;
        for (UIView *view in denomSrollView.subviews) {
            contentRect = CGRectUnion(contentRect, view.frame);
        }
        denomSrollView.contentSize = contentRect.size;
        
        //        yPosition = denomSrollView.frame.size.height + denomSrollView.frame.origin.y + 30;
        //
        //        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        //
        //            totalAmt.frame = CGRectMake(450, yPosition, 230, 30);
        //            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
        //
        //            returnAmtVal.frame = CGRectMake(710, yPosition, 150, 30);
        //            returnAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
        //
        //            paid.frame = CGRectMake(450, yPosition+30, 200, 30);
        //            paid.font = [UIFont boldSystemFontOfSize:20.0];
        //
        //            returnedval.frame = CGRectMake(710, yPosition+30, 150, 30);
        //            returnedval.font = [UIFont boldSystemFontOfSize:20.0];
        //
        //
        //            continueBtn.frame = CGRectMake(100.0, yPosition+80, 250.0, 40);
        //            continueBtn.layer.cornerRadius = 10.0f;
        //            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        //
        //            closeBtn.frame = CGRectMake(450.0, yPosition+80, 250.0, 40);
        //            closeBtn.layer.cornerRadius = 10.0;
        //            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        //
        //        }
        
        returnDenominationView.layer.borderColor = [UIColor whiteColor].CGColor;
        returnDenominationView.layer.borderWidth = 1.0f;
        
        UILabel * underLineLbl = [[UILabel alloc] init];
        underLineLbl.backgroundColor = [UIColor lightGrayColor];
        
        
        [returnDenominationView addSubview:label];
        [returnDenominationView addSubview:backbutton];
        
        
        [returnDenominationView addSubview:currencyCodeLbl];
        
        [returnDenominationView addSubview:denominationTypeTxt];
        [returnDenominationView addSubview:conversionRatioTxt];
        [returnDenominationView addSubview:totalDenominationsCountTxt];
        [returnDenominationView addSubview:showListOfAvaiDemBtn];
        
        [returnDenominationView addSubview:denomSrollView];
        
        [returnDenominationView addSubview:underLineLbl];
        
        [returnDenominationView addSubview:totalAmt];
        [returnDenominationView addSubview:returnAmtVal];
        [returnDenominationView addSubview:returnedval];
        [returnDenominationView addSubview:paid];
        [returnDenominationView addSubview:continueBtn];
        [returnDenominationView addSubview:closeBtn];
        [self.view addSubview:returnDenominationView];
        
        //changed by Srinivasulu on 15/11/2017....
        //        conversionRatioTxt.text = @"0.00";
        //        totalDenominationsCountTxt.text = @"0";
        
        conversionRatioTxt.placeholder = NSLocalizedString(@"conversion_ration", nil);
        totalDenominationsCountTxt.placeholder = NSLocalizedString(@"count", nil);
        
        if([currencyCodeStr caseInsensitiveCompare:INR] == NSOrderedSame){
            
            conversionRatioTxt.hidden = YES;
            totalDenominationsCountTxt.hidden = YES;
        }
        
        
        
        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
            
            label.frame = CGRectMake( 0, 0, 800, 52);
            backbutton.frame = CGRectMake( label.frame.origin.x + label.frame.size.width - 50, 5.0, 40.0, 40.0);
            
            
            currencyCodeLbl.frame = CGRectMake(  10, label.frame.origin.y + label.frame.size.height + 5, (label.frame.size.width - 100)/4 , 40.0);
            denominationTypeTxt.frame = CGRectMake( currencyCodeLbl.frame.origin.x + currencyCodeLbl.frame.size.width + 5, currencyCodeLbl.frame.origin.y, (label.frame.size.width)/4, currencyCodeLbl.frame.size.height);
            conversionRatioTxt.frame = CGRectMake( denominationTypeTxt.frame.origin.x + denominationTypeTxt.frame.size.width + 15, currencyCodeLbl.frame.origin.y, denominationTypeTxt.frame.size.width, currencyCodeLbl.frame.size.height);
            totalDenominationsCountTxt.frame = CGRectMake( conversionRatioTxt.frame.origin.x + conversionRatioTxt.frame.size.width + 15, currencyCodeLbl.frame.origin.y, denominationTypeTxt.frame.size.width/1.4, currencyCodeLbl.frame.size.height);
            
            showListOfAvaiDemBtn.frame = CGRectMake( (denominationTypeTxt.frame.origin.x + denominationTypeTxt.frame.size.width - 50), denominationTypeTxt.frame.origin.y - 10,  60, 60);
            
            CGRect contentRect = CGRectZero;
            for (UIView *view in denomSrollView.subviews) {
                
                contentRect = CGRectUnion(contentRect, view.frame);
            }
            
            float height = 425;
            
            if(denomSrollView.frame.size.height >  yPosition)
                height = denomSrollView.frame.size.height;
            
            denomSrollView.frame = CGRectMake( 0, denominationTypeTxt.frame.origin.y + denominationTypeTxt.frame.size.height,  label.frame.size.width, height);
            
            denomSrollView.contentSize = contentRect.size;
            
            underLineLbl.frame = CGRectMake( 450, denomSrollView.frame.origin.y + denomSrollView.frame.size.height, 340, 2);
            
            
            totalAmt.frame = CGRectMake( 450, underLineLbl.frame.origin.y + underLineLbl.frame.size.height + 4, 225, 30);
            returnAmtVal.frame = CGRectMake( 680, totalAmt.frame.origin.y, 150, 30);
            
            
            paid.frame = CGRectMake( 450, totalAmt.frame.origin.y + totalAmt.frame.size.height + 4, 225, 30);
            returnedval.frame = CGRectMake( 680, paid.frame.origin.y, 150, 30);
            
            
            continueBtn.frame = CGRectMake( 100.0, returnedval.frame.origin.y + returnedval.frame.size.height + 10, 250.0, 40);
            closeBtn.frame = CGRectMake( 450.0, continueBtn.frame.origin.y, 250.0, 40);
            
            float  originY = 80;
            
            if(originY  > ((self.view.frame.size.width - label.frame.size.width) / 2))
                originY = (self.view.frame.size.width - label.frame.size.width) / 2;
            
            returnDenominationView.frame = CGRectMake( (self.view.frame.size.width - label.frame.size.width)/2, originY, label.frame.size.width, continueBtn.frame.origin.y + continueBtn.frame.size.height + 4);
            
            
            //--  --    --       --denominationView
            
            label.font = [UIFont fontWithName:TEXT_FONT_NAME size:25];
            currencyCodeLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:25];
            
            
            denominationTypeTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            conversionRatioTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            totalDenominationsCountTxt.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
            
            
            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
            returnAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
            paid.font = [UIFont boldSystemFontOfSize:20.0];
            returnedval.font = [UIFont boldSystemFontOfSize:20.0];
            
            
            continueBtn.layer.cornerRadius = 10.0f;
            closeBtn.layer.cornerRadius = 10.0;
            
            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
        }
        
        //        }
        
        //        if ([denominationView isDescendantOfView:self.view])
        
        //Changes done by Srinivasulu on 17/05/2018....
        //reaons -- Sir side remove animations. Commented and written the code....
        
        if(!returnDenominationView.isHidden){
            //            [UIView transitionFromView:denominationView
            //                                toView:returnDenominationView
            //                              duration:0.6
            //                               options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
            //                            completion:nil];
            denominationView.hidden = YES;
            returnDenominationView.hidden = NO;
        }
        //upto here on 17/05/2018....
    }
    @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are adding the denomination note amount from the returned amount....
 * @date
 * @method       addReturnDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)addReturnDenominations:(UIButton*)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        BOOL isAmountExceed = false;
        
        if ([self checkMaxReturnAmountWith:1.00 isTextField:NO]) {
            
            //changed by srinivasulu
            
            //            if (!([returnedval.text floatValue] >= [returnAmtVal.text floatValue])) {
            if (!(((returnedval.text).floatValue  + sender.tag) > (returnAmtVal.text).floatValue)) {
                
                if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                    
                    NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                    
                    oneReturnCount = str.intValue;
                }
                else {
                    oneReturnCount = 0;
                }
                oneReturnCount++;
                if (oneReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                    
                    for (UITextField *text in returnDenomValTxtArr) {
                        
                        if (text.tag == sender.tag) {
                            
                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                        }
                    }
                    
                    for (UILabel *text in returnDenomCountArr) {
                        
                        if (text.tag == sender.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * sender.tag)];
                            
                        }
                    }
                }
            }
            //added by Srinivasulu on 18/04/2017....
            else{
                
                isAmountExceed = true;
            }
            //upto here on 18/04/2017....
            
        }
        //added by Srinivasulu on 18/04/2017....
        else{
            
            isAmountExceed = true;
        }
        
        if(isAmountExceed){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
        }
        
        //upto here on 18/04/2017....
        
        [self updateReturnAmount];
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are adding the denomination coin amount from the returned amount....
 * @date
 * @method       addReturnCoinsDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)addReturnCoinsDenominations:(UIButton*)sender {
    
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        BOOL isAmountExceed = FALSE;
        
        if ([self checkMaxReturnAmountWith:1.00 isTextField:NO]) {
            
            //changed by srinivasulu
            
            //            if (!([returnedval.text floatValue] >= [returnAmtVal.text floatValue])) {
            if (!(((returnedval.text).floatValue  + sender.tag) > (returnAmtVal.text).floatValue)) {
                
                if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                    
                    NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                    
                    oneReturnCount = str.intValue;
                }
                else {
                    
                    oneReturnCount = 0;
                }
                oneReturnCount++;
                if (oneReturnCount > 0) {
                    [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
                    
                    for (UITextField *text in returnDenomValCoinsTxtArr) {
                        
                        if (text.tag == sender.tag) {
                            
                            text.text = [NSString stringWithFormat:@"%d",oneReturnCount];
                        }
                    }
                    
                    for (UILabel *text in returnDenomCountCoinsArr) {
                        
                        if (text.tag == sender.tag) {
                            text.text = [NSString stringWithFormat:@"%.2f",(float)(oneReturnCount * sender.tag)];
                            
                        }
                    }
                }
            }
            //added by Srinivasulu on 18/04/2017....
            else{
                
                isAmountExceed = true;
            }
            //upto here on 18/04/2017....
            
        }
        //added by Srinivasulu on 18/04/2017....
        else{
            
            isAmountExceed = true;
        }
        
        if(isAmountExceed){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_check_the_denominations_amount_exceeded_the_return_amount", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
        }
        
        //upto here on 18/04/2017....
        
        
        [self updateReturnAmount];
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are removing the denomination note amount from the returned amount....
 * @date
 * @method       removeReturnDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)removeReturnDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        if ([returnDenominationDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
            
            NSString *str = [returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            
            oneCount = str.integerValue;
        }
        else {
            oneCount = 0;
        }
        if (oneCount != 0) {
            oneCount--;
        }
        if (oneCount>=0) {
            if ([returnDenominationDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                for (UITextField *text in returnDenomValTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in returnDenomCountArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            if (oneCount == 0) {
                [returnDenominationDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
        }
        [self updateReturnAmount];
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are removing the denomination coin amount from the returned amount....
 * @date
 * @method       removeReturnCoinsDenominations:
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)removeReturnCoinsDenominations:(UIButton*)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        if ([returnDenominationCoinDic.allKeys containsObject:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
            
            NSString *str = [returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            
            oneCount = str.integerValue;
        }
        else {
            oneCount = 0;
        }
        if (oneCount != 0) {
            oneCount--;
        }
        if (oneCount>=0) {
            if ([returnDenominationCoinDic valueForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]]) {
                for (UITextField *text in returnDenomValCoinsTxtArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%ld",oneCount];
                    }
                }
                
                for (UILabel *text in returnDenomCountCoinsArr) {
                    
                    if (text.tag == sender.tag) {
                        text.text = [NSString stringWithFormat:@"%.2f",(float)(oneCount * sender.tag)];
                        
                    }
                }
            }
            if (oneCount == 0) {
                [returnDenominationCoinDic removeObjectForKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
            else {
                [returnDenominationCoinDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:[NSString stringWithFormat:@"%ld",(long)sender.tag]];
            }
        }
        [self updateReturnAmount];
        
    } @catch (NSException *exception) {
        
    }
    
}

#pragma mark actions used executed at time submitting and closing the button....

/**
 * @description  this method will be executed when submitt button is cilcked in paid denomincations....
 * @date
 * @method       checkStatus
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)checkStatus {
    
    if ((paidVal.text).floatValue == 0) {
        
        
        //added by Srinivasul on 07/09/2017....
        
        if(isEnforceDenominations){
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"please_select_the_denominations", nil) message:nil delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil];
            [alert show];
            return;
        }
        
        //upto here on 07/09/2017....
        
        
        //commented by Srinivasulu on 24/08/2017....
        //reason below code will hide the customer view screen.... witten by Srinivasulu on 07/09/2017....
        
        //        if ([finalBillDue floatValue] == 0 && [netPayLblVal.text floatValue] == 0) {
        //            NSString *paidAmt = @"0.00";
        //            payTxt2 = [[UITextField alloc] init];
        //            payTxt2.text = [NSString stringWithFormat:@"%@",paidAmt];
        //
        //            //here need to change written by Srinivasulu on 10/08/2017....
        //            //reason payViaw has to show....
        //
        //            [self continuePay1];
        //
        //            //upto here on 10/08/2017....
        //
        //        }
        //        else {
        
        
        
        
        //changed by Srinivasulu on 01/05/2017....
        
        //            cofirmAlert = [[UIAlertView alloc]initWithTitle:@"Paid Amount is Zero. Do You Want to continue?" message:nil delegate:self cancelButtonTitle:@"YES" otherButtonTitles:@"NO", nil];
        
        cofirmAlert = [[UIAlertView alloc]initWithTitle:@"You haven't select any Denominations! Do you want to continue?" message:nil delegate:self cancelButtonTitle:@"YES" otherButtonTitles:@"NO", nil];
        
        
        //upto here on 01/05/2017......
        
        [cofirmAlert show];
        
        //        }
        
        //upto here on 24/08/2017....
        
    }
    else {
        if ((changeReturnVal.text).floatValue > 0) {
            [self populateReturnDenominationViewDynamically];
        }
        else {
            [self addPaymentViewFor:@"CASH"];
        }
    }
}

/**
 * @description  this method will be executed when submitt button is cilcked in return denomincations....
 * @date
 * @method       checkReturnDenomStatus
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

- (void)checkReturnDenomStatus {
    
    // returnDenominationView.hidden = YES;
    
    if ((returnedval.text).floatValue == 0) {
        //changed by Srinivasulu on 01/05/2017....
        
        //            returnCofirmAlert = [[UIAlertView alloc]initWithTitle:@"Change not Returned. Do You Want to continue?" message:nil delegate:self cancelButtonTitle:@"YES" otherButtonTitles:@"NO", nil];
        
        returnCofirmAlert = [[UIAlertView alloc]initWithTitle:@"You haven't select any Denominations! Do you want to continue?" message:nil delegate:self cancelButtonTitle:@"YES" otherButtonTitles:@"NO", nil];
        
        
        //upto here on 01/05/2017......
        [returnCofirmAlert show];
        
    }
    else {
        
        //Changes done by Srinivasulu on 17/05/2018....
        //reaons -- Sir side remove animations. Commented and written the code....
        
        //        [UIView transitionFromView:returnDenominationView
        //                            toView:paymentView
        //                          duration:0.6
        //                           options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
        //                        completion:nil];
        
        returnDenominationView.hidden = YES;
        paymentView.hidden = NO;
        
        [self addPaymentViewFor:@"CASH"];
        
        //upto here on 17/05/2018....
        
    }
}


#pragma mark   End of returning amount calculations -

/**
 * @description  here we are changing the value for paid amount through denominations....
 * @date
 * @method       updatePaidAmount
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

- (void)updatePaidAmount {
    
    @try {
        
        
        paidVal.text = @"0.00";
        changeReturnVal.text = @"0.00";
        
        NSMutableArray *count = [denominationDic.allValues mutableCopy];
        NSMutableArray *denom = [denominationDic.allKeys mutableCopy];
        
        [count addObjectsFromArray:denominationCoinDic.allValues];
        [denom addObjectsFromArray:denominationCoinDic.allKeys];
        
        float multipleValue = 1;
        float value = 0;
        
        if([currencyCodeStr caseInsensitiveCompare:INR] != NSOrderedSame){
            
            multipleValue = (conversionRatioTxt.text).floatValue;
        }
        
        float total = 0;
        for (int i=0; i<denom.count; i++) {
            
            total += [count[i] floatValue] * [denom[i] floatValue]  * multipleValue;
            value += [count[i] floatValue];
        }
        
        if(([currencyCodeStr caseInsensitiveCompare:INR] != NSOrderedSame)  && ((denominationCoinDic.allKeys.count +  denominationDic.allKeys.count) == 0)){
            
            total = (conversionRatioTxt.text).floatValue * (totalDenominationsCountTxt.text).floatValue ;
        }
        else{
            
            totalDenominationsCountTxt.text = [NSString stringWithFormat:@"%.f",value];
        }
        
        paidVal.text = [NSString stringWithFormat:@"%.2f",total];
        if (((paidVal.text).floatValue - (netPayLblVal.text).floatValue) > 0) {
            changeReturnVal.text = [NSString stringWithFormat:@"%.2f",((paidVal.text).floatValue - (netPayLblVal.text).floatValue)];
        }
        
        
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are changing the value for return amount through denominations....
 * @date
 * @method       updateReturnAmount
 * @author
 * @param
 * @param
 * @param
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 18/11/2017....
 * @reason       added the comments....
 *
 * @verified By
 * @verified On
 *
 */

- (void)updateReturnAmount {
    
    @try {
        
        returnedval.text = @"0.00";
        
        NSMutableArray *count = [returnDenominationDic.allValues mutableCopy];
        NSMutableArray *denom = [returnDenominationDic.allKeys mutableCopy];
        
        [count addObjectsFromArray:returnDenominationCoinDic.allValues];
        [denom addObjectsFromArray:returnDenominationCoinDic.allKeys];
        
        float total = 0;
        
        
        float multipleValue = 1;
        float value = 0;
        
        if([currencyCodeStr caseInsensitiveCompare:INR] != NSOrderedSame){
            
            multipleValue = (conversionRatioTxt.text).floatValue;
        }
        
        
        for (int i=0; i<denom.count; i++) {
            
            total += [count[i] floatValue] * [denom[i] floatValue] * multipleValue;
            value += [count[i] floatValue];
        }
        
        if(([currencyCodeStr caseInsensitiveCompare:INR] != NSOrderedSame)  && ((returnDenominationCoinDic.allKeys.count +  returnDenominationDic.allKeys.count) == 0)){
            
            total = (conversionRatioTxt.text).floatValue * (totalDenominationsCountTxt.text).floatValue ;
        }
        else{
            
            totalDenominationsCountTxt.text = [NSString stringWithFormat:@"%.f",value];
        }
        
        returnedval.text = [NSString stringWithFormat:@"%.2f",total];
        
    } @catch (NSException *exception) {
        
    }
}


#pragma -mark   method which is using in both previous and current denominations....

- (BOOL)checkMaxReturnAmountWith:(float)amount isTextField:(BOOL)isTextField {
    if (!isTextField) {
        if ((returnedval.text).floatValue == 0) {
            if ((returnAmtVal.text).floatValue >= amount) {
                return YES;
            }
            return NO;
        }
        else {
            if (((returnedval.text).floatValue + amount) > (returnAmtVal.text).floatValue) {
                return NO;
            }
            return YES;
        }
        
    }
    else {
        if ((returnedval.text).floatValue == 0) {
            if ((returnAmtVal.text).floatValue >= amount) {
                return YES;
            }
            return NO;
        }
        else {
            if ( amount > (returnAmtVal.text).floatValue) {
                return NO;
            }
            return YES;
        }
        
    }
    return NO;
}


#pragma -mark methods which are used in denominations populations....

-(void)populateDenominationView {
    
    //    paymentView.hidden = YES;
    
    tensCount = 0;
    twentyCount = 0;
    fiftyCount = 0;
    hundredCount = 0;
    fiveHundredCount = 0;
    thousandCount = 0;
    oneCount = 0;
    twoCount = 0;
    fiveCount = 0;
    tenCoinCount = 0;
    
    denominationDic = [[NSMutableDictionary alloc]init];
    returnDenominationDic = [[NSMutableDictionary alloc]init];
    
    
    denomination = [[NSBundle mainBundle]loadNibNamed:@"DenominationView" owner:self options:nil][0];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        denomination = [[NSBundle mainBundle]loadNibNamed:@"DenominationView-iPhone" owner:self options:nil][0];
    }
    denomination.hidden = NO;
    
    thousandValue = [[UILabel alloc]init];
    thousandValue.textColor = [UIColor whiteColor];
    thousandValue.text = @"0.00";
    
    fiveHundValue = [[UILabel alloc]init];
    fiveHundValue.textColor = [UIColor whiteColor];
    fiveHundValue.text = @"0.00";
    
    hundValue = [[UILabel alloc]init];
    hundValue.textColor = [UIColor whiteColor];
    hundValue.text = @"0.00";
    
    fiftyValue = [[UILabel alloc]init];
    fiftyValue.textColor = [UIColor whiteColor];
    fiftyValue.text = @"0.00";
    
    twentyValue = [[UILabel alloc]init];
    twentyValue.textColor = [UIColor whiteColor];
    twentyValue.text = @"0.00";
    
    tenValue = [[UILabel alloc]init];
    tenValue.textColor = [UIColor whiteColor];
    tenValue.text = @"0.00";
    
    fiveValue = [[UILabel alloc]init];
    fiveValue.textColor = [UIColor whiteColor];
    fiveValue.text = @"0.00";
    
    twoValue = [[UILabel alloc]init];
    twoValue.textColor = [UIColor whiteColor];
    twoValue.text = @"0.00";
    
    oneValue = [[UILabel alloc]init];
    oneValue.textColor = [UIColor whiteColor];
    oneValue.text = @"0.00";
    
    label = [[UILabel alloc] init] ;
    label.text = @"    Cash Denomination";
    label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
    label.alpha = 1.0f;
    label.textAlignment = NSTextAlignmentLeft;
    label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label.textColor = [UIColor whiteColor];
    
    // close button to close the view ..
    backbutton = [[UIButton alloc] init] ;
    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    backbutton.tag = 0;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [backbutton setBackgroundImage:image forState:UIControlStateNormal];
    
    UILabel *totalAmt = [[UILabel alloc]init];
    totalAmt.text = @"Total Bill";
    totalAmt.textColor = [UIColor whiteColor];
    
    totalAmtVal = [[UILabel alloc]init];
    totalAmtVal.text = netPayLblVal.text;
    totalAmtVal.textColor = [UIColor whiteColor];
    
    UILabel *paid = [[UILabel alloc]init];
    paid.text = @"Paid Amount";
    paid.textColor = [UIColor whiteColor];
    
    paidVal = [[UILabel alloc]init];
    paidVal.text = @"0.00";
    paidVal.textColor = [UIColor whiteColor];
    
    UILabel *changeReturn = [[UILabel alloc]init];
    changeReturn.text = @"Change Return";
    changeReturn.textColor = [UIColor whiteColor];
    
    changeReturnVal = [[UILabel alloc]init];
    changeReturnVal.text = @"0.00";
    changeReturnVal.textColor = [UIColor whiteColor];
    
    tensQty = [[CustomTextField alloc]init];
    tensQty.borderStyle = UITextBorderStyleRoundedRect;
    tensQty.textColor = [UIColor blackColor];
    tensQty.font = [UIFont systemFontOfSize:18.0];
    tensQty.backgroundColor = [UIColor whiteColor];
    tensQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    tensQty.backgroundColor = [UIColor whiteColor];
    tensQty.keyboardType = UIKeyboardTypeNumberPad;
    tensQty.autocorrectionType = UITextAutocorrectionTypeNo;
    tensQty.layer.borderColor = [UIColor whiteColor].CGColor;
    tensQty.backgroundColor = [UIColor whiteColor];
    tensQty.delegate = self;
    // [tensQty awakeFromNib];
    
    twentyQty = [[CustomTextField alloc]init];
    twentyQty.borderStyle = UITextBorderStyleRoundedRect;
    twentyQty.textColor = [UIColor blackColor];
    twentyQty.font = [UIFont systemFontOfSize:18.0];
    twentyQty.backgroundColor = [UIColor whiteColor];
    twentyQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    twentyQty.backgroundColor = [UIColor whiteColor];
    twentyQty.keyboardType = UIKeyboardTypeNumberPad;
    twentyQty.autocorrectionType = UITextAutocorrectionTypeNo;
    twentyQty.layer.borderColor = [UIColor whiteColor].CGColor;
    twentyQty.backgroundColor = [UIColor whiteColor];
    twentyQty.delegate = self;
    // [twentyQty awakeFromNib];
    
    fiftyQty = [[CustomTextField alloc]init];
    fiftyQty.borderStyle = UITextBorderStyleRoundedRect;
    fiftyQty.textColor = [UIColor blackColor];
    fiftyQty.font = [UIFont systemFontOfSize:18.0];
    fiftyQty.backgroundColor = [UIColor whiteColor];
    fiftyQty.keyboardType = UIKeyboardTypeNumberPad;
    fiftyQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiftyQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiftyQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiftyQty.delegate = self;
    // [fiftyQty awakeFromNib];
    
    hundredQty = [[CustomTextField alloc]init];
    hundredQty.borderStyle = UITextBorderStyleRoundedRect;
    hundredQty.textColor = [UIColor blackColor];
    hundredQty.font = [UIFont systemFontOfSize:18.0];
    hundredQty.backgroundColor = [UIColor whiteColor];
    hundredQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    hundredQty.backgroundColor = [UIColor whiteColor];
    hundredQty.keyboardType = UIKeyboardTypeNumberPad;
    hundredQty.autocorrectionType = UITextAutocorrectionTypeNo;
    hundredQty.layer.borderColor = [UIColor whiteColor].CGColor;
    hundredQty.backgroundColor = [UIColor whiteColor];
    hundredQty.delegate = self;
    //    [hundredQty awakeFromNib];
    
    fiveHundredQty = [[CustomTextField alloc]init];
    fiveHundredQty.borderStyle = UITextBorderStyleRoundedRect;
    fiveHundredQty.textColor = [UIColor blackColor];
    fiveHundredQty.font = [UIFont systemFontOfSize:18.0];
    fiveHundredQty.backgroundColor = [UIColor whiteColor];
    fiveHundredQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiveHundredQty.backgroundColor = [UIColor whiteColor];
    fiveHundredQty.keyboardType = UIKeyboardTypeNumberPad;
    fiveHundredQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiveHundredQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiveHundredQty.backgroundColor = [UIColor whiteColor];
    fiveHundredQty.delegate = self;
    //    [fiveHundredQty awakeFromNib];
    
    thousandQty = [[CustomTextField alloc]init];
    thousandQty.borderStyle = UITextBorderStyleRoundedRect;
    thousandQty.textColor = [UIColor blackColor];
    thousandQty.font = [UIFont systemFontOfSize:18.0];
    thousandQty.backgroundColor = [UIColor whiteColor];
    thousandQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    thousandQty.backgroundColor = [UIColor whiteColor];
    thousandQty.keyboardType = UIKeyboardTypeNumberPad;
    thousandQty.autocorrectionType = UITextAutocorrectionTypeNo;
    thousandQty.layer.borderColor = [UIColor whiteColor].CGColor;
    thousandQty.backgroundColor = [UIColor whiteColor];
    thousandQty.delegate = self;
    
    oneQty = [[CustomTextField alloc]init];
    oneQty.borderStyle = UITextBorderStyleRoundedRect;
    oneQty.textColor = [UIColor blackColor];
    oneQty.font = [UIFont systemFontOfSize:18.0];
    oneQty.backgroundColor = [UIColor whiteColor];
    oneQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    oneQty.keyboardType = UIKeyboardTypeNumberPad;
    oneQty.autocorrectionType = UITextAutocorrectionTypeNo;
    oneQty.layer.borderColor = [UIColor whiteColor].CGColor;
    oneQty.delegate = self;
    
    twoQty = [[CustomTextField alloc]init];
    twoQty.borderStyle = UITextBorderStyleRoundedRect;
    twoQty.textColor = [UIColor blackColor];
    twoQty.font = [UIFont systemFontOfSize:18.0];
    twoQty.backgroundColor = [UIColor whiteColor];
    twoQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    twoQty.keyboardType = UIKeyboardTypeNumberPad;
    twoQty.backgroundColor = [UIColor whiteColor];
    twoQty.autocorrectionType = UITextAutocorrectionTypeNo;
    twoQty.layer.borderColor = [UIColor whiteColor].CGColor;
    twoQty.backgroundColor = [UIColor whiteColor];
    twoQty.delegate = self;
    
    fiveQty = [[CustomTextField alloc]init];
    fiveQty.borderStyle = UITextBorderStyleRoundedRect;
    fiveQty.textColor = [UIColor blackColor];
    fiveQty.font = [UIFont systemFontOfSize:18.0];
    fiveQty.backgroundColor = [UIColor whiteColor];
    fiveQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiveQty.keyboardType = UIKeyboardTypeNumberPad;
    fiveQty.backgroundColor = [UIColor whiteColor];
    fiveQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiveQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiveQty.backgroundColor = [UIColor whiteColor];
    fiveQty.delegate = self;
    //    [fiveHundredQty awakeFromNib];
    
    tenCoinQty = [[CustomTextField alloc]init];
    tenCoinQty.borderStyle = UITextBorderStyleRoundedRect;
    tenCoinQty.textColor = [UIColor blackColor];
    tenCoinQty.font = [UIFont systemFontOfSize:18.0];
    tenCoinQty.backgroundColor = [UIColor whiteColor];
    tenCoinQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    tenCoinQty.backgroundColor = [UIColor whiteColor];
    tenCoinQty.autocorrectionType = UITextAutocorrectionTypeNo;
    tenCoinQty.layer.borderColor = [UIColor whiteColor].CGColor;
    tenCoinQty.backgroundColor = [UIColor whiteColor];
    tenCoinQty.delegate = self;
    
    UIButton   *continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [continueBtn addTarget:self action:@selector(checkStatus) forControlEvents:UIControlEventTouchUpInside];
    [continueBtn setTitle:@"Continue"    forState:UIControlStateNormal];
    continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    continueBtn.titleLabel.textColor = [UIColor whiteColor];
    continueBtn.backgroundColor = [UIColor grayColor];
    
    UIButton   *closeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [closeBtn addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    [closeBtn setTitle:@"Back"    forState:UIControlStateNormal];
    closeBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    closeBtn.titleLabel.textColor = [UIColor whiteColor];
    closeBtn.backgroundColor = [UIColor grayColor];
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            
            denomination.frame = CGRectMake(100, 80, 800, 650);
            label.frame = CGRectMake(0, 0, 800, 70);
            label.font = [UIFont systemFontOfSize:25];
            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
            tensQty.frame = CGRectMake(540,280.0, 80, 25);
            tensQty.font = [UIFont boldSystemFontOfSize:20];
            
            twentyQty.frame = CGRectMake(540,240.0, 80, 25);
            twentyQty.font = [UIFont boldSystemFontOfSize:20];
            
            fiftyQty.frame = CGRectMake(540,205.0, 80, 25);
            fiftyQty.font = [UIFont boldSystemFontOfSize:20];
            
            hundredQty.frame = CGRectMake(540,170.0, 80, 25);
            hundredQty.font = [UIFont boldSystemFontOfSize:20];
            fiveHundredQty.frame = CGRectMake(540,130, 80, 25);
            fiveHundredQty.font = [UIFont boldSystemFontOfSize:20];
            thousandQty.frame = CGRectMake(540,90, 80, 25);
            thousandQty.font =[UIFont boldSystemFontOfSize:20];
            
            oneQty.frame = CGRectMake(540,390.0, 80, 25);
            oneQty.font = [UIFont boldSystemFontOfSize:20];
            twoQty.frame = CGRectMake(540,355.0, 80, 25);
            twoQty.font = [UIFont boldSystemFontOfSize:20];
            fiveQty.frame = CGRectMake(540,315.0, 80, 25);
            fiveQty.font =[UIFont boldSystemFontOfSize:20];
            tenCoinQty.frame = CGRectMake(450,460, 80, 20);
            tenCoinQty.font =[UIFont boldSystemFontOfSize:20];
            
            thousandValue.frame = CGRectMake(670.0, 96.0, 200.0, 20);
            thousandValue.font = [UIFont systemFontOfSize:17.0];
            fiveHundValue.frame = CGRectMake(670.0, 133.0, 200.0, 20);
            fiveHundValue.font = [UIFont systemFontOfSize:17.0];
            hundValue.frame = CGRectMake(670.0, 170.0, 200.0, 20);
            hundValue.font = [UIFont systemFontOfSize:17.0];
            fiftyValue.frame = CGRectMake(670.0, 207.0, 200.0, 20);
            fiftyValue.font = [UIFont systemFontOfSize:17.0];
            twentyValue.frame = CGRectMake(670.0, 244.0, 200.0, 20);
            twentyValue.font = [UIFont systemFontOfSize:17.0];
            tenValue.frame = CGRectMake(670.0, 281.0, 200.0, 20);
            tenValue.font = [UIFont systemFontOfSize:17.0];
            fiveValue.frame = CGRectMake(670.0, 318.0, 200.0, 20);
            fiveValue.font = [UIFont systemFontOfSize:17.0];
            twoValue.frame = CGRectMake(670.0, 355.0, 200.0, 20);
            twoValue.font = [UIFont systemFontOfSize:17.0];
            oneValue.frame = CGRectMake(670.0, 392.0, 200.0, 20);
            oneValue.font = [UIFont systemFontOfSize:17.0];
            
            totalAmt.frame = CGRectMake(450, 450, 150, 30);
            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
            totalAmtVal.frame = CGRectMake(670, 450, 150, 30);
            totalAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            paid.frame = CGRectMake(450, 480, 150, 30);
            paid.font = [UIFont boldSystemFontOfSize:20.0];
            
            paidVal.frame = CGRectMake(670, 480, 150, 30);
            paidVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            
            changeReturn.frame = CGRectMake(450, 510, 150, 30);
            changeReturn.font = [UIFont boldSystemFontOfSize:20.0];
            
            changeReturnVal.frame = CGRectMake(670, 510, 150, 30);
            changeReturnVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            
            
            continueBtn.frame = CGRectMake(100.0, 600, 250.0, 40);
            continueBtn.layer.cornerRadius = 10.0f;
            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
            closeBtn.frame = CGRectMake(450.0, 600, 250.0, 40);
            closeBtn.layer.cornerRadius = 10.0;
            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
        }
    }
    else {
        denomination.frame = CGRectMake(10, 80, self.view.frame.size.width - 20.0, 480.0);
        denomination.backgroundColor = [UIColor blackColor];
        label.frame = CGRectMake(0, 0, self.view.frame.size.width - 20.0, 30);
        label.font = [UIFont systemFontOfSize:15];
        backbutton.frame = CGRectMake(self.view.frame.size.width - 60.0, 0, 30.0, 30.0);
        tensQty.frame = CGRectMake(165,180.0, 40, 20);
        tensQty.font = [UIFont boldSystemFontOfSize:15];
        
        twentyQty.frame = CGRectMake(165,150.0, 40, 20);
        twentyQty.font = [UIFont boldSystemFontOfSize:15];
        
        fiftyQty.frame = CGRectMake(165,125.0, 40, 20);
        fiftyQty.font = [UIFont boldSystemFontOfSize:15];
        
        hundredQty.frame = CGRectMake(165,95.0, 40, 20);
        hundredQty.font = [UIFont boldSystemFontOfSize:15];
        fiveHundredQty.frame = CGRectMake(165,65, 40, 20);
        fiveHundredQty.font = [UIFont boldSystemFontOfSize:15];
        thousandQty.frame = CGRectMake(165,35, 40, 20);
        thousandQty.font =[UIFont boldSystemFontOfSize:15];
        
        oneQty.frame = CGRectMake(165,270.0, 40, 20);
        oneQty.font = [UIFont boldSystemFontOfSize:15];
        twoQty.frame = CGRectMake(165,240.0, 40, 20);
        twoQty.font = [UIFont boldSystemFontOfSize:15];
        fiveQty.frame = CGRectMake(165,210.0, 40, 20);
        fiveQty.font =[UIFont boldSystemFontOfSize:15];
        tenCoinQty.frame = CGRectMake(165,460, 40, 20);
        tenCoinQty.font =[UIFont boldSystemFontOfSize:15];
        
        thousandValue.frame = CGRectMake(210.0, 35.0, 200.0, 20);
        thousandValue.font = [UIFont systemFontOfSize:12.0];
        fiveHundValue.frame = CGRectMake(210.0, 65.0, 200.0, 20);
        fiveHundValue.font = [UIFont systemFontOfSize:12.0];
        hundValue.frame = CGRectMake(210.0, 95.0, 200.0, 20);
        hundValue.font = [UIFont systemFontOfSize:12.0];
        fiftyValue.frame = CGRectMake(210.0, 125.0, 200.0, 20);
        fiftyValue.font = [UIFont systemFontOfSize:12.0];
        twentyValue.frame = CGRectMake(210.0, 150.0, 200.0, 20);
        twentyValue.font = [UIFont systemFontOfSize:12.0];
        tenValue.frame = CGRectMake(210.0, 180.0, 200.0, 20);
        tenValue.font = [UIFont systemFontOfSize:12.0];
        fiveValue.frame = CGRectMake(210.0, 210.0, 200.0, 20);
        fiveValue.font = [UIFont systemFontOfSize:12.0];
        twoValue.frame = CGRectMake(210.0, 240.0, 200.0, 20);
        twoValue.font = [UIFont systemFontOfSize:12.0];
        oneValue.frame = CGRectMake(210.0, 270.0, 200.0, 20);
        oneValue.font = [UIFont systemFontOfSize:12.0];
        
        totalAmt.frame = CGRectMake(120, 300, 150, 30);
        totalAmt.font = [UIFont boldSystemFontOfSize:12.0];
        totalAmtVal.frame = CGRectMake(230.0, 300, 150, 30);
        totalAmtVal.font = [UIFont boldSystemFontOfSize:12.0];
        
        paid.frame = CGRectMake(120, 315, 150, 30);
        paid.font = [UIFont boldSystemFontOfSize:12.0];
        
        paidVal.frame = CGRectMake(230.0, 315, 150, 30);
        paidVal.font = [UIFont boldSystemFontOfSize:12.0];
        
        
        changeReturn.frame = CGRectMake(120, 330.0, 150, 30);
        changeReturn.font = [UIFont boldSystemFontOfSize:12.0];
        
        changeReturnVal.frame = CGRectMake(230.0, 330.0, 150, 30);
        changeReturnVal.font = [UIFont boldSystemFontOfSize:12.0];
        
        
        
        continueBtn.frame = CGRectMake(30, 450.0, 100.0, 25);
        continueBtn.layer.cornerRadius = 10.0f;
        continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
        closeBtn.frame = CGRectMake(170.0, 450.0, 100.0, 25);
        closeBtn.layer.cornerRadius = 10.0;
        closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
    }
    denomination.layer.borderColor = [UIColor whiteColor].CGColor;
    denomination.layer.borderWidth = 1.0f;
    [denomination addSubview:label];
    [denomination addSubview:backbutton];
    [denomination addSubview:tensQty];
    [denomination addSubview:twentyQty];
    [denomination addSubview:fiftyQty];
    [denomination addSubview:hundredQty];
    [denomination addSubview:fiveHundredQty];
    [denomination addSubview:thousandQty];
    [denomination addSubview:thousandValue];
    [denomination addSubview:fiveHundValue];
    [denomination addSubview:hundValue];
    [denomination addSubview:fiftyValue];
    [denomination addSubview:twentyValue];
    [denomination addSubview:tenValue];
    [denomination addSubview:fiveValue];
    [denomination addSubview:twoValue];
    [denomination addSubview:oneValue];
    [denomination addSubview:totalAmt];
    [denomination addSubview:totalAmtVal];
    [denomination addSubview:paidVal];
    [denomination addSubview:paid];
    [denomination addSubview:changeReturnVal];
    [denomination addSubview:changeReturn];
    [denomination addSubview:oneQty];
    [denomination addSubview:twoQty];
    [denomination addSubview:fiveQty];
    
    
    [denomination addSubview:continueBtn];
    [denomination addSubview:closeBtn];
    
    
    [self.view addSubview:denomination];
}

-(void)populateReturnDenominationView {
    
    //    paymentView.hidden = YES;
    
    tensReturnCount = 0;
    twentyReturnCount = 0;
    fiftyReturnCount = 0;
    hundredReturnCount = 0;
    fiveHundredReturnCount = 0;
    thousandReturnCount = 0;
    oneReturnCount = 0;
    twoReturnCount = 0;
    fiveReturnCount = 0;
    
    returnDenomination = [[NSBundle mainBundle]loadNibNamed:@"ReturnDenomination" owner:self options:nil][0];
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        returnDenomination = [[NSBundle mainBundle]loadNibNamed:@"ReturnDenomination-iPhone" owner:self options:nil][0];
    }
    returnDenomination.hidden = NO;
    
    thousandReturnValue = [[UILabel alloc]init];
    thousandReturnValue.textColor = [UIColor whiteColor];
    
    fiveHundReturnValue = [[UILabel alloc]init];
    fiveHundReturnValue.textColor = [UIColor whiteColor];
    
    hundReturnValue = [[UILabel alloc]init];
    hundReturnValue.textColor = [UIColor whiteColor];
    
    fiftyReturnValue = [[UILabel alloc]init];
    fiftyReturnValue.textColor = [UIColor whiteColor];
    
    twentyReturnValue = [[UILabel alloc]init];
    twentyReturnValue.textColor = [UIColor whiteColor];
    
    tenReturnValue = [[UILabel alloc]init];
    tenReturnValue.textColor = [UIColor whiteColor];
    
    fiveReturnValue = [[UILabel alloc]init];
    fiveReturnValue.textColor = [UIColor whiteColor];
    
    twoReturnValue = [[UILabel alloc]init];
    twoReturnValue.textColor = [UIColor whiteColor];
    
    oneReturnValue = [[UILabel alloc]init];
    oneReturnValue.textColor = [UIColor whiteColor];
    
    label = [[UILabel alloc] init] ;
    label.text = @"    Change Denomination";
    label.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:18];
    label.textAlignment = NSTextAlignmentLeft;
    label.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    label.textColor = [UIColor whiteColor];
    
    // close button to close the view ..
    backbutton = [[UIButton alloc] init] ;
    [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
    backbutton.tag = 78;
    
    UIImage *image = [UIImage imageNamed:@"delete.png"];
    [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
    
    UILabel *totalAmt = [[UILabel alloc]init];
    totalAmt.text = @"Change To Be Returned";
    totalAmt.textColor = [UIColor whiteColor];
    
    returnAmtVal = [[UILabel alloc]init];
    returnAmtVal.text = changeReturnVal.text;
    returnAmtVal.textColor = [UIColor whiteColor];
    
    UILabel *paid = [[UILabel alloc]init];
    paid.text = @"Returned Amount";
    paid.textColor = [UIColor whiteColor];
    
    returnedval = [[UILabel alloc]init];
    returnedval.text = @"0.00";
    returnedval.textColor = [UIColor whiteColor];
    
    tensReturnQty = [[CustomTextField alloc]init];
    tensReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    tensReturnQty.textColor = [UIColor blackColor];
    tensReturnQty.font = [UIFont systemFontOfSize:18.0];
    tensReturnQty.backgroundColor = [UIColor whiteColor];
    tensReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    tensReturnQty.backgroundColor = [UIColor whiteColor];
    tensReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    tensReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    tensReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    tensReturnQty.backgroundColor = [UIColor whiteColor];
    tensReturnQty.delegate = self;
    // [tensQty awakeFromNib];
    
    twentyReturnQty = [[CustomTextField alloc]init];
    twentyReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    twentyReturnQty.textColor = [UIColor blackColor];
    twentyReturnQty.font = [UIFont systemFontOfSize:18.0];
    twentyReturnQty.backgroundColor = [UIColor whiteColor];
    twentyReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    twentyReturnQty.backgroundColor = [UIColor whiteColor];
    twentyReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    twentyReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    twentyReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    twentyReturnQty.backgroundColor = [UIColor whiteColor];
    twentyReturnQty.delegate = self;
    // [twentyQty awakeFromNib];
    
    fiftyReturnQty = [[CustomTextField alloc]init];
    fiftyReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    fiftyReturnQty.textColor = [UIColor blackColor];
    fiftyReturnQty.font = [UIFont systemFontOfSize:18.0];
    fiftyReturnQty.backgroundColor = [UIColor whiteColor];
    fiftyReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiftyReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiftyReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    fiftyReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiftyReturnQty.delegate = self;
    // [fiftyQty awakeFromNib];
    
    hundredReturnQty = [[CustomTextField alloc]init];
    hundredReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    hundredReturnQty.textColor = [UIColor blackColor];
    hundredReturnQty.font = [UIFont systemFontOfSize:18.0];
    hundredReturnQty.backgroundColor = [UIColor whiteColor];
    hundredReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    hundredReturnQty.backgroundColor = [UIColor whiteColor];
    hundredReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    hundredReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    hundredReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    hundredReturnQty.backgroundColor = [UIColor whiteColor];
    hundredReturnQty.delegate = self;
    //    [hundredQty awakeFromNib];
    
    fiveHundredReturnQty = [[CustomTextField alloc]init];
    fiveHundredReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    fiveHundredReturnQty.textColor = [UIColor blackColor];
    fiveHundredReturnQty.font = [UIFont systemFontOfSize:18.0];
    fiveHundredReturnQty.backgroundColor = [UIColor whiteColor];
    fiveHundredReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiveHundredReturnQty.backgroundColor = [UIColor whiteColor];
    fiveHundredReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiveHundredReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiveHundredReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    fiveHundredReturnQty.backgroundColor = [UIColor whiteColor];
    fiveHundredReturnQty.delegate = self;
    //    [fiveHundredQty awakeFromNib];
    
    thousandReturnQty = [[CustomTextField alloc]init];
    thousandReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    thousandReturnQty.textColor = [UIColor blackColor];
    thousandReturnQty.font = [UIFont systemFontOfSize:18.0];
    thousandReturnQty.backgroundColor = [UIColor whiteColor];
    thousandReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    thousandReturnQty.backgroundColor = [UIColor whiteColor];
    thousandReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    thousandReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    thousandReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    thousandReturnQty.backgroundColor = [UIColor whiteColor];
    thousandReturnQty.delegate = self;
    
    oneReturnQty = [[CustomTextField alloc]init];
    oneReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    oneReturnQty.textColor = [UIColor blackColor];
    oneReturnQty.font = [UIFont systemFontOfSize:18.0];
    oneReturnQty.backgroundColor = [UIColor whiteColor];
    oneReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    oneReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    oneReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    oneReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    oneReturnQty.delegate = self;
    // [fiftyQty awakeFromNib];
    
    twoReturnQty = [[CustomTextField alloc]init];
    twoReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    twoReturnQty.textColor = [UIColor blackColor];
    twoReturnQty.font = [UIFont systemFontOfSize:18.0];
    twoReturnQty.backgroundColor = [UIColor whiteColor];
    twoReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    twoReturnQty.backgroundColor = [UIColor whiteColor];
    twoReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    twoReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    twoReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    twoReturnQty.backgroundColor = [UIColor whiteColor];
    twoReturnQty.delegate = self;
    //    [hundredQty awakeFromNib];
    
    fiveReturnQty = [[CustomTextField alloc]init];
    fiveReturnQty.borderStyle = UITextBorderStyleRoundedRect;
    fiveReturnQty.textColor = [UIColor blackColor];
    fiveReturnQty.font = [UIFont systemFontOfSize:18.0];
    fiveReturnQty.backgroundColor = [UIColor whiteColor];
    fiveReturnQty.clearButtonMode = UITextFieldViewModeWhileEditing;
    fiveReturnQty.backgroundColor = [UIColor whiteColor];
    fiveReturnQty.autocorrectionType = UITextAutocorrectionTypeNo;
    fiveReturnQty.keyboardType = UIKeyboardTypeNumberPad;
    fiveReturnQty.layer.borderColor = [UIColor whiteColor].CGColor;
    fiveReturnQty.backgroundColor = [UIColor whiteColor];
    fiveReturnQty.delegate = self;
    //    [fiveHundredQty awakeFromNib];
    
    
    UIButton   *continueBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    // pay the cash button to continue the transaction ..
    [continueBtn addTarget:self action:@selector(checkReturnDenomStatus) forControlEvents:UIControlEventTouchUpInside];
    [continueBtn setTitle:@"Continue"    forState:UIControlStateNormal];
    continueBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    continueBtn.titleLabel.textColor = [UIColor whiteColor];
    continueBtn.backgroundColor = [UIColor grayColor];
    
    UIButton   *closeBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [closeBtn addTarget:self action:@selector(backToReturnDenomination) forControlEvents:UIControlEventTouchUpInside];
    [closeBtn setTitle:@"Back"    forState:UIControlStateNormal];
    closeBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
    closeBtn.titleLabel.textColor = [UIColor whiteColor];
    closeBtn.backgroundColor = [UIColor grayColor];
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
            
            returnDenomination.frame = CGRectMake(100, 80, 800, 650);
            label.frame = CGRectMake(0, 0, 800, 70);
            label.font = [UIFont systemFontOfSize:25];
            backbutton.frame = CGRectMake(740, 10.0, 45.0, 45.0);
            tensReturnQty.frame = CGRectMake(540,280.0, 80, 25);
            tensReturnQty.font = [UIFont boldSystemFontOfSize:20];
            
            twentyReturnQty.frame = CGRectMake(540,240.0, 80, 25);
            twentyReturnQty.font = [UIFont boldSystemFontOfSize:20];
            
            fiftyReturnQty.frame = CGRectMake(540,205.0, 80, 25);
            fiftyReturnQty.font = [UIFont boldSystemFontOfSize:20];
            
            hundredReturnQty.frame = CGRectMake(540,170.0, 80, 25);
            hundredReturnQty.font = [UIFont boldSystemFontOfSize:20];
            fiveHundredReturnQty.frame = CGRectMake(540,130, 80, 25);
            fiveHundredReturnQty.font = [UIFont boldSystemFontOfSize:20];
            thousandReturnQty.frame = CGRectMake(540,90, 80, 25);
            thousandReturnQty.font =[UIFont boldSystemFontOfSize:20];
            
            oneReturnQty.frame = CGRectMake(540,390.0, 80, 25);
            oneReturnQty.font = [UIFont boldSystemFontOfSize:20];
            twoReturnQty.frame = CGRectMake(540,355.0, 80, 25);
            twoReturnQty.font = [UIFont boldSystemFontOfSize:20];
            fiveReturnQty.frame = CGRectMake(540,315.0, 80, 25);
            fiveReturnQty.font =[UIFont boldSystemFontOfSize:20];
            
            thousandReturnValue.frame = CGRectMake(670.0, 96.0, 200.0, 20);
            thousandReturnValue.font = [UIFont systemFontOfSize:17.0];
            fiveHundReturnValue.frame = CGRectMake(670.0, 133.0, 200.0, 20);
            fiveHundReturnValue.font = [UIFont systemFontOfSize:17.0];
            hundReturnValue.frame = CGRectMake(670.0, 170.0, 200.0, 20);
            hundReturnValue.font = [UIFont systemFontOfSize:17.0];
            fiftyReturnValue.frame = CGRectMake(670.0, 207.0, 200.0, 20);
            fiftyReturnValue.font = [UIFont systemFontOfSize:17.0];
            twentyReturnValue.frame = CGRectMake(670.0, 244.0, 200.0, 20);
            twentyReturnValue.font = [UIFont systemFontOfSize:17.0];
            tenReturnValue.frame = CGRectMake(670.0, 281.0, 200.0, 20);
            tenReturnValue.font = [UIFont systemFontOfSize:17.0];
            fiveReturnValue.frame = CGRectMake(670.0, 318.0, 200.0, 20);
            fiveReturnValue.font = [UIFont systemFontOfSize:17.0];
            twoReturnValue.frame = CGRectMake(670.0, 355.0, 200.0, 20);
            twoReturnValue.font = [UIFont systemFontOfSize:17.0];
            oneReturnValue.frame = CGRectMake(670.0, 392.0, 200.0, 20);
            oneReturnValue.font = [UIFont systemFontOfSize:17.0];
            
            totalAmt.frame = CGRectMake(420, 450, 250, 30);
            totalAmt.font = [UIFont boldSystemFontOfSize:20.0];
            returnAmtVal.frame = CGRectMake(670, 450, 150, 30);
            returnAmtVal.font = [UIFont boldSystemFontOfSize:20.0];
            
            paid.frame = CGRectMake(420, 480, 200, 30);
            paid.font = [UIFont boldSystemFontOfSize:20.0];
            
            returnedval.frame = CGRectMake(670, 480, 150, 30);
            returnedval.font = [UIFont boldSystemFontOfSize:20.0];
            
            
            continueBtn.frame = CGRectMake(100.0, 600, 250.0, 40);
            continueBtn.layer.cornerRadius = 10.0f;
            continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
            closeBtn.frame = CGRectMake(450.0, 600, 250.0, 40);
            closeBtn.layer.cornerRadius = 10.0f;
            closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
            
        }
    }
    else {
        totalAmt.text = @"Change To Return";
        returnDenomination.frame = CGRectMake(10, 80, self.view.frame.size.width - 20.0, 480.0);
        returnDenomination.backgroundColor = [UIColor blackColor];
        label.frame = CGRectMake(0, 0, self.view.frame.size.width - 20.0, 30);
        label.font = [UIFont systemFontOfSize:15];
        backbutton.frame = CGRectMake(self.view.frame.size.width - 60.0, 0, 30.0, 30.0);
        tensReturnQty.frame = CGRectMake(165,180.0, 40, 20);
        tensReturnQty.font = [UIFont boldSystemFontOfSize:15];
        
        twentyReturnQty.frame = CGRectMake(165,150.0, 40, 20);
        twentyReturnQty.font = [UIFont boldSystemFontOfSize:15];
        
        fiftyReturnQty.frame = CGRectMake(165,125.0, 40, 20);
        fiftyReturnQty.font = [UIFont boldSystemFontOfSize:15];
        
        hundredReturnQty.frame = CGRectMake(165,95.0, 40, 20);
        hundredReturnQty.font = [UIFont boldSystemFontOfSize:15];
        fiveHundredReturnQty.frame = CGRectMake(165,65, 40, 20);
        fiveHundredReturnQty.font = [UIFont boldSystemFontOfSize:15];
        thousandReturnQty.frame = CGRectMake(165,35, 40, 20);
        thousandReturnQty.font =[UIFont boldSystemFontOfSize:15];
        
        oneReturnQty.frame = CGRectMake(165,270.0, 40, 20);
        oneReturnQty.font = [UIFont boldSystemFontOfSize:15];
        twoReturnQty.frame = CGRectMake(165,240.0, 40, 20);
        twoReturnQty.font = [UIFont boldSystemFontOfSize:15];
        fiveReturnQty.frame = CGRectMake(165,210.0, 40, 20);
        fiveReturnQty.font =[UIFont boldSystemFontOfSize:15];
        
        thousandReturnValue.frame = CGRectMake(210.0, 35.0, 200.0, 20);
        thousandReturnValue.font = [UIFont systemFontOfSize:12.0];
        fiveHundReturnValue.frame = CGRectMake(210.0, 65.0, 200.0, 20);
        fiveHundReturnValue.font = [UIFont systemFontOfSize:12.0];
        hundReturnValue.frame = CGRectMake(210.0, 95.0, 200.0, 20);
        hundReturnValue.font = [UIFont systemFontOfSize:12.0];
        fiftyReturnValue.frame = CGRectMake(210.0, 125.0, 200.0, 20);
        fiftyReturnValue.font = [UIFont systemFontOfSize:12.0];
        twentyReturnValue.frame = CGRectMake(210.0, 150.0, 200.0, 20);
        twentyReturnValue.font = [UIFont systemFontOfSize:12.0];
        tenReturnValue.frame = CGRectMake(210.0, 180.0, 200.0, 20);
        tenReturnValue.font = [UIFont systemFontOfSize:12.0];
        fiveReturnValue.frame = CGRectMake(210.0, 210.0, 200.0, 20);
        fiveReturnValue.font = [UIFont systemFontOfSize:12.0];
        twoReturnValue.frame = CGRectMake(210.0, 240.0, 200.0, 20);
        twoReturnValue.font = [UIFont systemFontOfSize:12.0];
        oneReturnValue.frame = CGRectMake(210.0, 270.0, 200.0, 20);
        oneReturnValue.font = [UIFont systemFontOfSize:12.0];
        
        totalAmt.frame = CGRectMake(120, 300, 150, 30);
        totalAmt.font = [UIFont boldSystemFontOfSize:12.0];
        returnAmtVal.frame = CGRectMake(230.0, 300, 150, 30);
        returnAmtVal.font = [UIFont boldSystemFontOfSize:12.0];
        
        paid.frame = CGRectMake(120, 315, 150, 30);
        paid.font = [UIFont boldSystemFontOfSize:12.0];
        
        returnedval.frame = CGRectMake(230.0, 315, 150, 30);
        returnedval.font = [UIFont boldSystemFontOfSize:12.0];
        
        continueBtn.frame = CGRectMake(30, 450.0, 100.0, 25);
        continueBtn.layer.cornerRadius = 10.0f;
        continueBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
        closeBtn.frame = CGRectMake(170.0, 450.0, 100.0, 25);
        closeBtn.layer.cornerRadius = 10.0;
        closeBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
        
    }
    tenReturnValue.text = @"0.00";
    twentyReturnValue.text = @"0.00";
    fiftyReturnValue.text = @"0.00";
    hundReturnValue.text = @"0.00";
    fiveHundReturnValue.text = @"0.00";
    thousandReturnValue.text = @"0.00";
    oneReturnValue.text = @"0.00";
    twoReturnValue.text = @"0.00";
    fiveReturnValue.text = @"0.00";
    returnDenomination.layer.borderColor = [UIColor whiteColor].CGColor;
    returnDenomination.layer.borderWidth = 1.0f;
    [returnDenomination addSubview:label];
    [returnDenomination addSubview:backbutton];
    [returnDenomination addSubview:tensReturnQty];
    [returnDenomination addSubview:twentyReturnQty];
    [returnDenomination addSubview:fiftyReturnQty];
    [returnDenomination addSubview:hundredReturnQty];
    [returnDenomination addSubview:fiveHundredReturnQty];
    [returnDenomination addSubview:thousandReturnQty];
    [returnDenomination addSubview:thousandReturnValue];
    [returnDenomination addSubview:fiveHundReturnValue];
    [returnDenomination addSubview:hundReturnValue];
    [returnDenomination addSubview:fiftyReturnValue];
    [returnDenomination addSubview:twentyReturnValue];
    [returnDenomination addSubview:tenReturnValue];
    [returnDenomination addSubview:fiveReturnValue];
    [returnDenomination addSubview:twoReturnValue];
    [returnDenomination addSubview:oneReturnValue];
    [returnDenomination addSubview:totalAmt];
    [returnDenomination addSubview:returnAmtVal];
    [returnDenomination addSubview:returnedval];
    [returnDenomination addSubview:paid];
    [returnDenomination addSubview:oneReturnQty];
    [returnDenomination addSubview:twoReturnQty];
    [returnDenomination addSubview:fiveReturnQty];
    //    [denomination addSubview:tenCoinQty];
    
    
    [returnDenomination addSubview:continueBtn];
    [returnDenomination addSubview:closeBtn];
    
    [self.view addSubview:returnDenomination];
    
    [UIView transitionFromView:denomination
                        toView:returnDenomination
                      duration:0.6
                       options:UIViewAnimationOptionTransitionFlipFromLeft | UIViewAnimationOptionShowHideTransitionViews
                    completion:nil];
    
}

#pragma -mark   Start of Paying amount calculations

-(void)addLabel {
    
    if ([(self.view).subviews containsObject:excessAmt]) {
        
        [excessAmt removeFromSuperview];
    }
    
    excessAmt = [[UILabel alloc] init];
    excessAmt.text =  @"Paid amount exceeds the total amount";
    excessAmt.font = [UIFont systemFontOfSize:20];
    excessAmt.backgroundColor = [UIColor clearColor];
    excessAmt.textColor = [UIColor redColor];
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        excessAmt.frame = CGRectMake(420, 410, 500, 50);
    }
    else {
        
        excessAmt.frame = CGRectMake(70, 320, 300, 30);
        excessAmt.font = [UIFont fontWithName:@"ArialRoundedMTBold" size:15.0f];
    }
    
    [denomination addSubview:excessAmt];
    
    SystemSoundID    soundFileObject1;
    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
    self.soundFileURLRef = (__bridge CFURLRef) tapSound;
    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
    AudioServicesPlaySystemSound (soundFileObject1);
    
    [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(labelEffect) userInfo:nil repeats:NO];
}
-(void)labelEffect {
    
    if ([denomination.subviews containsObject:excessAmt]) {
        
        [excessAmt removeFromSuperview];
    }
    else if ([paymentScrollView.subviews containsObject:newCust]){
        [newCust removeFromSuperview];
    }
}


- (IBAction)removeRupee:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (oneCount != 0) {
        oneCount--;
    }
    if (oneCount>=0) {
        if ([denominationDic valueForKey:@"1"]) {
            oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
            oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
            if (((paidVal.text).floatValue - (netPayLblVal.text).floatValue) < 0) {
                changeReturnVal.text = @"0.00";
            }
            else {
                changeReturnVal.text = [NSString stringWithFormat:@"%.2f",((paidVal.text).floatValue - (netPayLblVal.text).floatValue)];
            }
            
            if (oneReturnCount == 0) {
                [denominationDic removeObjectForKey:@"1"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:@"1"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addRupee:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        oneCount++;
        oneQty.text = [NSString stringWithFormat:@"%ld",oneCount];
        if (oneCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%ld",oneCount] forKey:@"1"];
            oneValue.text = [NSString stringWithFormat:@"%.2f",(oneCount * 1.00)];
        }
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeTwo:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (twoCount != 0) {
        twoCount--;
    }
    if (twoCount>=0) {
        if ([denominationDic valueForKey:@"2"]) {
            twoQty.text = [NSString stringWithFormat:@"%d",twoCount];
            twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount * 2.00)];
            if (((paidVal.text).floatValue - (netPayLblVal.text).floatValue) < 0) {
                changeReturnVal.text = @"0.00";
            }
            else {
                changeReturnVal.text = [NSString stringWithFormat:@"%.2f",((paidVal.text).floatValue - (netPayLblVal.text).floatValue)];
            }
            
            if (twoCount == 0) {
                [denominationDic removeObjectForKey:@"2"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",twoCount] forKey:@"2"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addTwoCoin:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        twoCount++;
        twoQty.text = [NSString stringWithFormat:@"%d",twoCount];
        if (twoCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",twoCount] forKey:@"2"];
            twoValue.text = [NSString stringWithFormat:@"%.2f",(twoCount * 2.00)];
        }
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeFiveCoin:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (fiveCount != 0) {
        fiveCount--;
    }
    if (fiveCount>=0) {
        if ([denominationDic valueForKey:@"5"]) {
            fiveQty.text = [NSString stringWithFormat:@"%d",fiveCount];
            fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount * 5.00)];
            if (((paidVal.text).floatValue - (netPayLblVal.text).floatValue) < 0) {
                changeReturnVal.text = @"0.00";
            }
            else {
                changeReturnVal.text = [NSString stringWithFormat:@"%.2f",((paidVal.text).floatValue - (netPayLblVal.text).floatValue)];
            }
            
            if (fiveCount == 0) {
                [denominationDic removeObjectForKey:@"5"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveCount] forKey:@"5"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addFiveCoin:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        fiveCount++;
        fiveQty.text = [NSString stringWithFormat:@"%d",fiveCount];
        if (fiveCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveCount] forKey:@"5"];
            fiveValue.text = [NSString stringWithFormat:@"%.2f",(fiveCount * 5.00)];
        }
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeTenCoin:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (tenCoinCount != 0) {
        tenCoinCount--;
    }
    if (tenCoinCount>=0) {
        if ([denominationDic valueForKey:@"10"]) {
            tenCoinQty.text = [NSString stringWithFormat:@"%d",tenCoinCount];
            tenValue.text = [NSString stringWithFormat:@"%.2f",(tenCoinCount * 10.00)];
        }
        if (tenCoinCount == 0) {
            [denominationDic removeObjectForKey:@"10"];
        }
        else {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",tenCoinCount] forKey:@"10"];
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addTenCoin:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (!((changeReturnVal.text).floatValue > 0)) {
        tenCoinCount++;
        tenCoinQty.text = [NSString stringWithFormat:@"%d",tenCoinCount];
        if (tenCoinCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",tenCoinCount] forKey:@"10"];
            tenValue.text = [NSString stringWithFormat:@"%.2f",(tenCoinCount * 10.00)];
        }
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)addHundred:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        hundredCount++;
        hundredQty.text = [NSString stringWithFormat:@"%d",hundredCount];
        if (hundredCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",hundredCount] forKey:@"100"];
            hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
        }
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeHundred:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (hundredCount != 0) {
        hundredCount--;
    }
    //    hundredCount--;
    if (hundredCount>=0) {
        if ([denominationDic valueForKey:@"100"]) {
            hundredQty.text = [NSString stringWithFormat:@"%d",hundredCount];
            hundValue.text = [NSString stringWithFormat:@"%.2f",(hundredCount * 100.00)];
            
            if (hundredCount == 0) {
                [denominationDic removeObjectForKey:@"100"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",hundredCount] forKey:@"100"];
            }
        }
        
    }
    [self updatePaidAmount];
}

- (IBAction)addFiveHundred:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        fiveHundredCount++;
        fiveHundredQty.text = [NSString stringWithFormat:@"%d",fiveHundredCount];
        if (fiveHundredCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredCount] forKey:@"500"];
            fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
        }
        
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeFiveHundred:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (fiveHundredCount != 0) {
        fiveHundredCount--;
    }
    if (fiveHundredCount>=0) {
        if ([denominationDic valueForKey:@"500"]) {
            fiveHundredQty.text = [NSString stringWithFormat:@"%d",fiveHundredCount];
            fiveHundValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredCount * 500.00)];
            
            if (fiveHundredCount == 0) {
                [denominationDic removeObjectForKey:@"500"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredCount] forKey:@"500"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addThousand:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        thousandCount++;
        thousandQty.text = [NSString stringWithFormat:@"%d",thousandCount];
        if (thousandCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",thousandCount] forKey:@"2000"];
            thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
        }
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeThousand:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (thousandCount != 0) {
        thousandCount--;
    }
    if (thousandCount>=0) {
        if ([denominationDic valueForKey:@"2000"]) {
            thousandQty.text = [NSString stringWithFormat:@"%d",thousandCount];
            thousandValue.text = [NSString stringWithFormat:@"%.2f",(thousandCount * 2000.00)];
            if (thousandCount == 0) {
                [denominationDic removeObjectForKey:@"2000"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",thousandCount] forKey:@"2000"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addTens:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        tensCount++;
        tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
        if (tensCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",tensCount] forKey:@"10"];
            tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
        }
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeTens:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (tensCount != 0) {
        tensCount--;
    }
    if (tensCount>=0) {
        if ([denominationDic valueForKey:@"10"]) {
            tensQty.text = [NSString stringWithFormat:@"%d",tensCount];
            tenValue.text = [NSString stringWithFormat:@"%.2f",(tensCount * 10.00)];
            
            if (tensCount == 0) {
                [denominationDic removeObjectForKey:@"10"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",tensCount] forKey:@"10"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addTwenty:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        twentyCount++;
        twentyQty.text = [NSString stringWithFormat:@"%d",twentyCount];
        if (twentyCount > 0) {
            [denominationDic setValue:[NSString stringWithFormat:@"%d",twentyCount] forKey:@"20"];
            twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
        }
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeTwenty:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (twentyCount != 0) {
        twentyCount--;
    }
    if (twentyCount>=0) {
        if ([denominationDic valueForKey:@"20"]) {
            twentyQty.text = [NSString stringWithFormat:@"%d",twentyCount];
            twentyValue.text = [NSString stringWithFormat:@"%.2f",(twentyCount * 20.00)];
            if (twentyCount == 0) {
                [denominationDic removeObjectForKey:@"0"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",twentyCount] forKey:@"20"];
            }
        }
    }
    [self updatePaidAmount];
}

- (IBAction)addFifty:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (!((changeReturnVal.text).floatValue > 0) && !((totalAmtVal.text).floatValue == (paidVal.text).floatValue)) {
        fiftyCount++;
        if (fiftyCount>=0) {
            
            fiftyQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
            if (fiftyCount > 0) {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiftyCount] forKey:@"50"];
                fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
            }
        }
        else {
            fiftyCount = 0;
            hundredQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
            
        }
    }
    else {
        
        [self addLabel];
    }
    [self updatePaidAmount];
}

- (IBAction)removeFifty:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (fiftyCount != 0) {
        fiftyCount--;
    }
    if (fiftyCount>=0) {
        if ([denominationDic valueForKey:@"50"]) {
            fiftyQty.text = [NSString stringWithFormat:@"%d",fiftyCount];
            fiftyValue.text = [NSString stringWithFormat:@"%.2f",(fiftyCount * 50.00)];
            
            if (fiftyCount == 0) {
                [denominationDic removeObjectForKey:@"50"];
            }
            else {
                [denominationDic setValue:[NSString stringWithFormat:@"%d",fiftyCount] forKey:@"50"];
            }
        }
    }
    [self updatePaidAmount];
}
#pragma -mark  End of Paying amount calculations


#pragma -mark   CAlculations for Returning Amount

- (IBAction)removeReturnone:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (oneReturnCount != 0) {
        oneReturnCount--;
    }
    if (oneReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"1"]) {
            oneReturnQty.text = [NSString stringWithFormat:@"%d",oneReturnCount];
            oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
            if (oneReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"1"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:@"1"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnone:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:1.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            oneReturnCount++;
            oneReturnQty.text = [NSString stringWithFormat:@"%d",oneReturnCount];
            if (oneReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",oneReturnCount] forKey:@"1"];
                oneReturnValue.text = [NSString stringWithFormat:@"%.2f",(oneReturnCount * 1.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnTwo:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (twoReturnCount != 0) {
        twoReturnCount--;
    }
    if (twoReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"2"]) {
            twoReturnQty.text = [NSString stringWithFormat:@"%d",twoReturnCount];
            twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
            if (twoReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"2"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twoReturnCount] forKey:@"2"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnTwo:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:2.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            twoReturnCount++;
            twoReturnQty.text = [NSString stringWithFormat:@"%d",twoReturnCount];
            if (twoReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twoReturnCount] forKey:@"2"];
                twoReturnValue.text = [NSString stringWithFormat:@"%.2f",(twoReturnCount * 2.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnFive:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    
    if (fiveReturnCount != 0) {
        fiveReturnCount--;
    }
    if (fiveReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"5"]) {
            fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
            fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
            if (fiveReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"5"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveReturnCount] forKey:@"5"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnFive:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:5.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            fiveReturnCount++;
            fiveReturnQty.text = [NSString stringWithFormat:@"%d",fiveReturnCount];
            if (fiveReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveReturnCount] forKey:@"5"];
                fiveReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveReturnCount * 5.00)];
            }
        }
    }
    [self updateReturnAmount];
}


- (IBAction)addReturnHund:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:100.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            hundredReturnCount++;
            hundredReturnQty.text = [NSString stringWithFormat:@"%d",hundredReturnCount];
            if (hundredReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",hundredReturnCount] forKey:@"100"];
                hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
            }
            if ((netPayLblVal.text).floatValue-(paidVal.text).floatValue<0) {
                
                changeReturnVal.text = [NSString stringWithFormat:@"%.2f",(paidVal.text).floatValue-(netPayLblVal.text).floatValue];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnHund:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (hundredReturnCount != 0) {
        hundredReturnCount--;
    }
    if (hundredReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"100"]) {
            hundredReturnQty.text = [NSString stringWithFormat:@"%d",hundredReturnCount];
            hundReturnValue.text = [NSString stringWithFormat:@"%.2f",(hundredReturnCount * 100.00)];
            if (hundredReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"100"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",hundredReturnCount] forKey:@"100"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnsFiveHund:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith: 500.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            fiveHundredReturnCount++;
            fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",fiveHundredReturnCount];
            if (fiveHundredReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredReturnCount] forKey:@"500"];
                fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnsFiveHund:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (fiveHundredReturnCount != 0) {
        fiveHundredReturnCount--;
    }
    if (fiveHundredReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"500"]) {
            fiveHundredReturnQty.text = [NSString stringWithFormat:@"%d",fiveHundredReturnCount];
            fiveHundReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiveHundredReturnCount * 500.00)];
            if (fiveHundredReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"500"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiveHundredReturnCount] forKey:@"500"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnthousand:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:2000.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            thousandReturnCount++;
            thousandReturnQty.text = [NSString stringWithFormat:@"%d",thousandReturnCount];
            if (thousandReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",thousandReturnCount] forKey:@"2000"];
                thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnThousand:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (thousandReturnCount != 0) {
        thousandReturnCount--;
    }
    if (thousandReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"2000"]) {
            thousandReturnQty.text = [NSString stringWithFormat:@"%d",thousandReturnCount];
            thousandReturnValue.text = [NSString stringWithFormat:@"%.2f",(thousandReturnCount * 2000.00)];
            if (thousandReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"2000"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",thousandReturnCount] forKey:@"2000"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnTen:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:10.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            tensReturnCount++;
            tensReturnQty.text = [NSString stringWithFormat:@"%d",tensReturnCount];
            if (tensReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",tensReturnCount] forKey:@"10"];
                tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnTen:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (tensReturnCount != 0) {
        tensReturnCount--;
    }
    if (tensReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"10"]) {
            tensReturnQty.text = [NSString stringWithFormat:@"%d",tensReturnCount];
            tenReturnValue.text = [NSString stringWithFormat:@"%.2f",(tensReturnCount * 10.00)];
            if (tensReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"10"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",tensReturnCount] forKey:@"10"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnTwenty:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:20.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            twentyReturnCount++;
            twentyReturnQty.text = [NSString stringWithFormat:@"%d",twentyReturnCount];
            if (twentyReturnCount > 0) {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twentyReturnCount] forKey:@"20"];
                twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnTwenty:(id)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (twentyReturnCount != 0) {
        twentyReturnCount--;
    }
    if (twentyReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"20"]) {
            twentyReturnQty.text = [NSString stringWithFormat:@"%d",twentyReturnCount];
            twentyReturnValue.text = [NSString stringWithFormat:@"%.2f",(twentyReturnCount * 20.00)];
            if (twentyReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"20"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",twentyReturnCount] forKey:@"20"];
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)addReturnFifty:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if ([self checkMaxReturnAmountWith:50.00 isTextField:NO]) {
        if (!((returnedval.text).floatValue >= (returnAmtVal.text).floatValue)) {
            fiftyReturnCount++;
            if (fiftyReturnCount>=0) {
                
                fiftyReturnQty.text = [NSString stringWithFormat:@"%d",fiftyReturnCount];
                if (fiftyReturnCount > 0) {
                    [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiftyReturnCount] forKey:@"50"];
                    fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
                }
            }
        }
    }
    [self updateReturnAmount];
}

- (IBAction)removeReturnFifty:(UIButton *)sender {
    AudioServicesPlaySystemSound (soundFileObject);
    if (fiftyReturnCount != 0) {
        fiftyReturnCount--;
    }
    
    if (fiftyReturnCount >= 0) {
        if ([returnDenominationDic valueForKey:@"50"]) {
            fiftyReturnQty.text = [NSString stringWithFormat:@"%d",fiftyReturnCount];
            fiftyReturnValue.text = [NSString stringWithFormat:@"%.2f",(fiftyReturnCount * 50.00)];
            if (fiftyReturnCount == 0) {
                [returnDenominationDic removeObjectForKey:@"50"];
            }
            else {
                [returnDenominationDic setValue:[NSString stringWithFormat:@"%d",fiftyReturnCount] forKey:@"50"];
            }
        }
    }
    [self updateReturnAmount];
}

#pragma -mark end of methods which are not in used

#pragma -mark Start of methods used in the GiftVouchers, GiftCoupons && LoylityCard

/**
 * @description  in this we are handling multiple functionalitys....
 * @date
 * @method       giftContinue:--
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 29/12/2017....
 * @reason       added the comments, exception handling and constants....
 *
 * @verified By
 * @verified On
 *
 */

- (void) giftContinue:(UIButton *) sender {
    
    @try {
        
        [couponValue resignFirstResponder];
        [couponId resignFirstResponder];
        [couponQty resignFirstResponder];
        
        if (sender.tag == 0) {
            // added by roja on 28-09-2018...
            if(giftTypeArrayList == nil || giftTypeArrayList.count == 0){
                
                float y_axis = self.view.frame.size.height - 350;
                
                NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"unable_to_process_your_request", nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:350 contentHeight:45  isSoundRequired:YES timming:2.0 noOfLines:2];
            }
            else{
                // gift type selection
                //Play Audio for button touch....
                AudioServicesPlaySystemSound (soundFileObject);
                [giftTypeTableView reloadData];
                [giftView addSubview:giftTypeTableView];
                [giftTypeTableView setHidden:FALSE];
                
                PopOverViewController  *customerInfoPopUp = [[PopOverViewController alloc] init];
                
                float frameHeight = 200;
                
                if(giftTypeArrayList != nil)
                    frameHeight = [giftTypeArrayList count] * 40;
                
                UIView *editPriceView = [[UIView alloc] initWithFrame:CGRectMake(0.0, 0.0, 300, frameHeight)];
                editPriceView.opaque = NO;
                editPriceView.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
                editPriceView.layer.borderColor = [UIColor lightGrayColor].CGColor;
                editPriceView.layer.borderWidth = 2.0f;
                [editPriceView setHidden:NO];
                giftTypeTableView.frame = CGRectMake(0.0, 0.0, editPriceView.frame.size.width, editPriceView.frame.size.height);
                [editPriceView addSubview:giftTypeTableView];
                customerInfoPopUp.view = editPriceView;
                
                if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
                    customerInfoPopUp.preferredContentSize =  CGSizeMake(editPriceView.frame.size.width, editPriceView.frame.size.height);
                    
                    UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
                    
                    [popover presentPopoverFromRect:giftType.frame inView:loyaltyScrollView permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
                    
                    editPricePopOver= popover;
                    
                }
                
                else {
                    
                    //                customerInfoPopUp.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
                    
                    UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:customerInfoPopUp];
                    // popover.contentViewController.view.alpha = 0.0;
                    popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
                    [popover presentPopoverFromBarButtonItem:self.navigationItem.rightBarButtonItem permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
                    editPricePopOver = popover;
                    
                }
                
            }
            
        }
        else if(sender.tag == 30) {
            
            sender.tag = 0;
            [giftTypeTableView setHidden:TRUE];
            
        }
        else if (sender.tag == 1) {    // ok button
            
            // disable the backgroud view ..
            
            if ((giftNo.text).length > 0) {
                
                float y_position = self.view.frame.size.height - 150;
                y_position = giftView.frame.origin.y + giftView.frame.size.height - 300;
                
                //For Coupon
                if( (amountToBePaidValLbl.text.floatValue < minimumValueText.text.floatValue) && [giftTypeString isEqualToString:@"coupon"]){
                    
                    NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"net_bill_amount_should_be_greater_than_minimum_bill_amount", nil)];
                    
                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 420)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:650 contentHeight:80  isSoundRequired:YES timming:2.0 noOfLines:2];
                    
                    return;
                }
                // added by roja on 20/11/2019...
                else if((amountToBePaidValLbl.text.floatValue > maximumValueText.text.floatValue) && [giftTypeString isEqualToString:@"coupon"]){
                    
                    NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"Net Bill amount should be less than Maximum Bill amount", nil)];
                    
                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 420)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:650 contentHeight:80  isSoundRequired:YES timming:2.0 noOfLines:2];
                    
                    return;
                }
                // Upto here added by roja on 20/11/2019...

                else if(enterOtpTxt.tag == 2 && generateOtpBtn.tag  == 2){
                    
                    NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_generate_the_otp", nil)];
                    
                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                    
                    return;
                }
                else  if((!(enterOtpTxt.text).length) && (enterOtpTxt.tag == 4 && generateOtpBtn.tag  == 4)){
                    
                    NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_otp", nil)];
                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                    return;
                }
                
                else if( (enterOtpTxt.tag == 4 && generateOtpBtn.tag  == 4) || (enterOtpTxt.tag == 2 && generateOtpBtn.tag  == 2)){
                    
                    [self validateUserEnteredOtp:nil];
                    //                    NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_valide_otp", nil)];
                    //
                    //                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                    return;
                }
                else{
                    generateOtpBtn.tag = 2;
                    enterOtpTxt.tag = 4;
                    
                    if ([giftTypeString isEqualToString:@"giftvoucher"]) {
                        giftNumber = [giftNo.text copy];
                        
                        if (!giftClaimStatus) {
                            
                            [self setSiblings:giftView enabled:TRUE];
                            
                            if (giftView.subviews){
                                for (UIView *subview in giftView.subviews) {
                                    [subview removeFromSuperview];
                                }
                                
                            }
                            
                            
                            giftView.hidden = YES;
                            
                            
                            if((giftAmt.text).intValue <= (netPayLblVal.text).intValue){
                                
                                float giftAmount = 0.0f;
                                if ((giftVoucherTxt.text).floatValue > 0) {
                                    giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                                }
                                else {
                                    giftAmount = (giftAmt.text).floatValue;
                                }
                                giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f", giftAmount];
                                
                                //                        subtotalTxt.text = [NSString stringWithFormat:@"%.02f",[subtotalTxt.text floatValue] - [giftAmt.text floatValue]];
                                netPayLblVal.text = [NSString stringWithFormat:@"%.02f", (netPayLblVal.text).floatValue - (giftAmt.text).floatValue];
                                finalBillDue = [[NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue-(giftVoucherTxt.text).floatValue] copy];
                                

                                //                    pastGiftValueToDeduct = [giftVoucherTxt.text intValue];
                                
                            }
                            else {
                                float giftAmount = 0.0f;
                                if ((giftVoucherTxt.text).floatValue > 0) {
                                    giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                                }
                                else {
                                    giftAmount = (giftAmt.text).floatValue;
                                }
                                
                                giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f", giftAmount];
                                netPayLblVal.text = @"0.00";
                                
                                //                            float subtotalValue = 0.0f;
                                //                        for (int c = 0; c < [textFieldData count]; c++) {
                                //                            UITextField *text = [textFieldData objectAtIndex:c];
                                //                            text.text = @"0.00";
                                //                        }
                                
                                finalBillDue = @"0.0";
                                //                        subtotalTxt.text = [NSString stringWithFormat:@"%.02f",([totalTxt.text floatValue] - subtotalValue)];
                                
                                //                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Voucher value exceeds total amount" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                                //                    [alert show];
                                
                            }
                            NSMutableDictionary *transDic = [NSMutableDictionary new];
                            [transDic setValue:@"giftvoucher" forKey:@"modeOfPayment"];
                            [transDic setValue:@"giftvoucher" forKey:@"cardType"];
                            [transDic setValue:giftNumber forKey:@"couponNumber"];
                            [transDic setValue:giftAmt.text forKey:@"paidAmount"];
                            [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                            [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                            [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                            
                            [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
                            [transDic setValue:@"0.0" forKey:CHANGE_RETURN];
                            [transDic setValue:giftAmt.text forKey:RECEIVED_AMOUNT];
                            
                            [paymentTransactionArray addObject:transDic];
                            [giftVoucherArr addObject:giftNo.text];
                            [giftVoucherArr addObject:giftID.text];
                            
                            giftNo.text = @"";
                            giftType.text = @"";
                            giftAmt.text = @"0.0";
                            
                            // added by roja on 20/11/2109...
                            [self updateValues];
                            NSString * mesg = @"Voucher amount added successfully";
                            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                            //Upto here added by roja on 20/11/2109...

                        }
                        else {
                            
                            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Invalid gift voucher" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                            [alert show];
                        }
                    }
                    else if([giftTypeString isEqualToString:@"coupon"]) {
                        giftNumber = [giftNo.text copy];
                        
                    //  if (!giftClaimStatus) {       // commented by roja on 20/11/2019...

                            [self setSiblings:giftView enabled:TRUE];
                            
                            if (giftView.subviews){
                                for (UIView *subview in giftView.subviews) {
                                    [subview removeFromSuperview];
                                }
                            }
                            
                            giftView.hidden = YES;
                            
                            if((giftAmt.text).intValue <= (netPayLblVal.text).intValue) {
                                
                                float giftAmount = 0.0f;
                                if ((giftVoucherTxt.text).floatValue > 0) {
                                    giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                                }
                                else {
                                    giftAmount = (giftAmt.text).floatValue;
                                }
                                
                                
                                giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f", giftAmount];
                                
                                //                        subtotalTxt.text = [NSString stringWithFormat:@"%.02f",[subtotalTxt.text floatValue] - [giftAmt.text floatValue]];
                                //                    subtotalTxt.text = [NSString stringWithFormat:@"%.02f",[subtotalTxt.text floatValue] - [dealoroffersTxt.text floatValue]];
                                // taxTxt.text = [NSString stringWithFormat:@"%.02f", ([subtotalTxt.text floatValue] / 100) * 0.0f];
                                
                                
                                
//                                amountToBePaidValLbl.text  = [NSString stringWithFormat:@"%.02f", (netPayLblVal.text).floatValue - (giftAmt.text).floatValue]; // added by roja on 20/11/2019...

                                
                                netPayLblVal.text = [NSString stringWithFormat:@"%.02f", (netPayLblVal.text).floatValue - (giftAmt.text).floatValue];
                                
                                finalBillDue = [[NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue-(giftVoucherTxt.text).floatValue] copy];
                                
                            }
                            else{
                                
                                
                                float giftAmount = 0.0f;
                                if ((giftVoucherTxt.text).floatValue > 0) {
                                    giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                                }
                                else {
                                    giftAmount = (giftAmt.text).floatValue;
                                }
                                
                                
                                giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f", giftAmount];
                                netPayLblVal.text = @"0.00";
                                //                            float subtotalValue = 0.0f;
                                
                                //                        for (int c = 0; c < [textFieldData count]; c++) {
                                //                            UITextField *text = [textFieldData objectAtIndex:c];
                                //                            text.text = @"0.00";
                                //                        }
                                finalBillDue = @"0.0";
                                
                                //                        subtotalTxt.text = [NSString stringWithFormat:@"%.02f",([totalTxt.text floatValue] - subtotalValue)];
                                
                                //                        UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"CashforPoints  exceeds  the Total Amount." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                                //                        [noGift show];
                                //                        [noGift release];
                                //                        giftType.text = @"";
                                //                        giftAmt.text = @"0.0";
                                
                            }
                            NSMutableDictionary *transDic = [NSMutableDictionary new];
                            [transDic setValue:@"coupon" forKey:@"modeOfPayment"];
                            [transDic setValue:@"coupon" forKey:@"cardType"];
//                            [transDic setValue:giftNumber forKey:@"couponNumber"]; //giftID.text
//                            [transDic setValue:giftID.text forKey:@"couponCode"]; //added by roja on 20/11/2019...
                        
                        [transDic setValue:giftNumber forKey:@"couponCode"]; //added by roja on 20/11/2019...
                        [transDic setValue:giftID.text forKey:@"couponNumber"]; //added by roja on 20/11/2019...

                            [transDic setValue:giftAmt.text forKey:@"paidAmount"];
                            [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                            [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                            [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                            
                            [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
                            [transDic setValue:@"0.0" forKey:CHANGE_RETURN];
                            [transDic setValue:giftAmt.text forKey:RECEIVED_AMOUNT];
                            
                            //added by Srinivasulu on 17/10/2018....
                            [transDic setValue:[NSNumber numberWithFloat:couponUnitCashPercentageValue] forKey:UNIT_CASH_VALUE];
                            [transDic setValue:EMPTY_STRING forKey:DISCOUNT_TYPE];
                            if(giftAmt.tag == 4){
                                
                                [transDic setValue:Percentage forKey:DISCOUNT_TYPE];
                                [transDic setValue:maximumValueText.text forKey:MAX_DISCOUNT_AMOUNT];
                            }
                            //upto here on 17/10/2018....
                            
                            
                            
                            [paymentTransactionArray addObject:transDic];
                            [giftVoucherArr addObject:giftNo.text];
                            [giftVoucherArr addObject:giftID.text];
                            giftNo.text = @"";
                            giftType.text = @"";
                            giftAmt.text = @"0.0";
                        
                        
                        // added by roja on 20/11/2109...
                        [self updateValues];
                        NSString * mesg = @"Coupon amount added successfully";
                        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                        //Upto here added by roja on 20/11/2109...

                          // commented by roja on 20/11/2019...
//                        }
//                        else {
//
//                            UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid gift coupon" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                            [noGift show];
//                        }
                            //Upto here commented by roja on 20/11/2019...

                    }
                    
                    else if([giftTypeString isEqualToString:@"loyaltycard"]) {
                        
                        // added by roja on 20/11/2019...
                        
                        
                        NSString * currentDate = [WebServiceUtility getCurrentDate];
                        currentDate = [currentDate componentsSeparatedByString:@" "] [0];
                        
                        NSString * validToDate = giftValidTo.text;
                        
                        
                        if([validToDate compare: currentDate] == NSOrderedDescending || [validToDate compare: currentDate] == NSOrderedSame){ //a > b
                            
                            //added by Srinivasulu on 26/12/2017....
                            if((phoneNumberText.text).length < 10){
                                
                                NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_valide_phone_number", nil)];
                                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                                return;
                            }
                            else
                                
                                //upto here on 26/12/2017....
                                
                                //if ([giftNo.text length]>0) {
                                //  if([giftAmt.text intValue] >= [recash.text intValue]) {
                                
                                // if ([recash.text floatValue]>0) {
                                
                                // added by roja on 14/03/2019...
                                if((giftAmt.text).floatValue > 0 && (recash.text).floatValue == 0){
                                    
                                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Please enter Encashing amount" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                                    [alert show];
                                }
                                else if ((recash.text).floatValue>(giftAmt.text).floatValue) {
                                    
                                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Encashing amount should be less than the available amount" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                                    [alert show];
                                }
                            // added by roja on 20/11/2019...
                                else if((recash.text).floatValue <  minRedeemPoints){
                                    
                                    float y_position =  giftView.frame.origin.y + giftView.frame.size.height - 300;

                                    NSString * alertMsg = [NSString stringWithFormat:@"%@%.2f", @"minimum redeem points is ",minRedeemPoints];
                                    
                                    [self displayAlertMessage:alertMsg horizontialAxis:(self.view.frame.size.width - 420)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:80  isSoundRequired:YES timming:2.0 noOfLines:2];
                                                             
                                }
                            // added by roja on 20/11/2019...

                                else if((recash.text).intValue <= (netPayLblVal.text).intValue){
                                    giftNumber = [giftID.text copy];
                                    
                                    //                    if ([giftAmt.text floatValue] == 0) {
                                    //                        giftVoucherTxt.text = giftAmt.text;
                                    //                    }
                                    //                    else {
                                    //                        giftVoucherTxt.text = recash.text ;
                                    //                    }
                                    float giftAmount = 0.0f;
                                    if ((giftAmt.text).floatValue == 0) {
                                        if ((giftVoucherTxt.text).floatValue > 0) {
                                            giftAmount = (giftVoucherTxt.text).floatValue + (giftAmt.text).floatValue;
                                        }
                                        else {
                                            giftAmount = (giftAmt.text).floatValue;
                                        }
                                        
                                    }
                                    else {
                                        if ((giftVoucherTxt.text).floatValue > 0) {
                                            giftAmount = (giftVoucherTxt.text).floatValue + (recash.text).floatValue;
                                        }
                                        else {
                                            giftAmount = (recash.text).floatValue;
                                        }
                                        
                                    }
                                    giftVoucherTxt.text = [NSString stringWithFormat:@"%.2f",giftAmount];
                                    //                    subtotalTxt.text = [NSString stringWithFormat:@"%.02f",[subtotalTxt.text floatValue] - [recash.text floatValue]];
                                    netPayLblVal.text = [NSString stringWithFormat:@"%.02f", (netPayLblVal.text).floatValue - (recash.text).floatValue];
                                    
                                    
                                    
                                    [self setSiblings:giftView enabled:TRUE];
                                    
                                    if (giftView.subviews){
                                        for (UIView *subview in giftView.subviews) {
                                            [subview removeFromSuperview];
                                        }
                                        
                                    }
                                    
                                    giftView.hidden = YES;
                                    
                                    finalBillDue = [[NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue-(giftVoucherTxt.text).floatValue] copy];
                                    payTxt2.text = [NSString stringWithFormat:@"%.2f",(giftVoucherTxt.text).floatValue];
                                    typeOfPayment = [@"loyaltycard" mutableCopy];
                                    
                                    
                                    //                    [self continuePay1];
                                    
                                    
                                    NSMutableDictionary *transDic = [NSMutableDictionary new];
                                    [transDic setValue:@"Loyalty Points" forKey:@"modeOfPayment"];
                                    [transDic setValue:@"Loyalty Points" forKey:@"cardType"];
                                    [transDic setValue:giftNumber forKey:@"couponNumber"];
                                    [transDic setValue:recash.text forKey:@"paidAmount"];
                                    [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                                    [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                                    [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                                    
                                    [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
                                    [transDic setValue:@"0.0" forKey:CHANGE_RETURN];
                                    [transDic setValue:recash.text forKey:RECEIVED_AMOUNT];
                                    
                                    [paymentTransactionArray addObject:transDic];
                                    [giftVoucherArr addObject:giftNo.text];
                                    [giftVoucherArr addObject:giftID.text];
                                    
                                    giftNo.text = @"";
                                    giftType.text = @"";
                                    giftAmt.text = @"0.0";
                                    
                                    
                                    // added by roja on 20/11/2109...
                                    [self updateValues];
                                    NSString * mesg = @"Loyalty cash added successfully";
                                    [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                                    // upto here added by roja on 20/11/2109...

                                }
                                else{
                                    UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Cash for Points exceeds the Total Amount." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                                    [noGift show];
                                }
                            //                    }
                            //                        else {
                            //
                            //                            UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter the encashing amount" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            //                            [noGift show];
                            //                            [noGift release];
                            //                            [recash becomeFirstResponder];
                            //                        }
                            //                    }
                            //                    else{
                            //                        UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Encashing amount is more than   CashforPoints." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            //                        [noGift show];
                            //                        [noGift release];
                            //                    }
                            
                            //}
                            //                else {
                            //
                            //                    UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter the loyalty details" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                            //                    [noGift show];
                            //                    [noGift release];
                            //
                            //                }
                            
                            
                        }
                        else {
                            float y_position =  giftView.frame.origin.y + giftView.frame.size.height - 300;
                            
                            NSString * alertMsg = @"Your Loyalty Card validity period exceeded";
                            
                            [self displayAlertMessage:alertMsg horizontialAxis:(self.view.frame.size.width - 420)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:80  isSoundRequired:YES timming:2.0 noOfLines:2];
                            
                        }
                        // added by roja on 20/11/2019...
                        
                        
                    }
                    
                    
                    //added by Srinivasulu on 13/10/2018....
                    if([phoneNumberText.text length] > 0 && [custmerPhNum.text length] == 0)
                        custmerPhNum.text  = phoneNumberText.text;
                    //upto here on 13/10/2018....
                }
            }
            // added by roja on 07/11/2019....
            else if([giftTypeString isEqualToString:@"Wallet"]){
                
                if ([walletAmountValueTF.text length] > 0) {
                    
                    [self setSiblings:giftView enabled:TRUE];
                    if (giftView.subviews){
                        for (UIView *subview in giftView.subviews) {
                            [subview removeFromSuperview];
                        }
                    }
                    giftView.hidden = YES;
                    
                    float walletAmtToUse = 0.0;
                    isToCallCreateWalletService = true; // he customer is using wallet amt. so, need to call isToCallCreateWalletService to debit his wallet amt..

                    if((walletAmountValueTF.text).intValue <= (netPayLblVal.text).intValue){
                        
                        walletAmtToUse = [walletAmountValueTF.text floatValue];
                        
                        netPayLblVal.text = [NSString stringWithFormat:@"%.02f", (netPayLblVal.text).floatValue - (walletAmountValueTF.text).floatValue];
                        finalBillDue = [[NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue-(walletAmountValueTF.text).floatValue] copy];
                    }
                    
                    else { // when walletAmountValueTF > netPayLblVal
                        walletAmtToUse = (netPayLblVal.text).floatValue;
                        walletDebitAmt = walletAmtToUse;
                        
                        netPayLblVal.text = @"0.0";
                        finalBillDue = @"0.0";
                    }
                    
                    NSMutableDictionary *transDic = [NSMutableDictionary new];
                    [transDic setValue:@"Wallet" forKey:@"modeOfPayment"];
                    [transDic setValue:@"Wallet" forKey:@"cardType"];
                    [transDic setValue:@"" forKey:@"couponNumber"];
                    [transDic setValue:walletAmountValueTF.text forKey:@"paidAmount"];
                    [transDic setValue:@"" forKey:CARD_INFO];
                    [transDic setValue:@"" forKey:APPROVAL_CODE];
                    [transDic setValue:@"" forKey:BANK_NAME];
                    
                    [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
                    [transDic setValue:@"0.0" forKey:CHANGE_RETURN];
                    [transDic setValue:walletAmountValueTF.text forKey:RECEIVED_AMOUNT];
                    
                    [paymentTransactionArray addObject:transDic];
                    walletAmountValueTF.text = @"0.0";
                    walletUserEmailIdTF.text = @"";
                    walletUserCityTF.text = @"";
                    walletUserLocalityTF.text = @"";
                    walletUserHouseNoTF.text = @"";
                    walletUserLastNameTF.text = @"";
                    walletUserFirstNameTF.text = @"";
                    
                    
                }
                else if([walletAmountValueTF.text length] == 0 && ([phoneNumberText.text length] >= 10)){
                    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Your wallet is empty" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
                else if([phoneNumberText.text length] < 10) {
                    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter mobile number to check the balance" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
                else {
                    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Your wallet is empty" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
                
            }
            // Upto here added by roja on 07/11/2019....

            else {
                
                UIAlertView *noGift = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enter the   details" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [noGift show];
            }
        }
        else if (sender.tag == 2) {    // cancel button
            
            //Play Audio for button touch....
            AudioServicesPlaySystemSound (soundFileObject);
            
            // disable the backgroud view ..
            [self setSiblings:giftView enabled:TRUE];
            
            if (giftView.subviews){
                for (UIView *subview in giftView.subviews) {
                    [subview removeFromSuperview];
                }
            }

            giftView.hidden = YES;
            segment_index = 1;
            
        }
        else if (sender.tag == 5) {                     //select coupon type...
            
            AudioServicesPlaySystemSound (soundFileObject);
            
            [couponType reloadData];
            [couponView addSubview:couponType];
            [couponType setHidden:FALSE];
            
        }
        else if (sender.tag == 6) {          // add coupon details...
            
            AudioServicesPlaySystemSound (soundFileObject);
            
            if (![billDueLbl.text isEqualToString: @"0.00"]) {
                
                NSDate *today = [NSDate date];
                NSDateFormatter *f = [[NSDateFormatter alloc] init];
                f.dateFormat = @"dd/MM/yyyy HH:mm:ss";
                NSString* currentdate = [f stringFromDate:today];
                
                
                if ( (couponValue.text).length!=0 && ![couponValue.text isEqualToString:@"0"]) {
                    
                    if (couponArr.count!=0 && (couponId.text).length!=0) {
                        
                        if ([self checkCouponId:couponId.text]) {
                            
                            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Coupon already used" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                            [alert show];
                            return;
                        }
                        else{
                            NSString *strCuponDestails = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",selectCouponType.text,@"#",couponId.text,@"#",couponValue.text,@"#",couponQty.text];
                            [couponArr addObject:strCuponDestails];
                        }
                        
                    }
                    
                    else{
                        NSString *strCuponDestails;
                        strCuponDestails = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",selectCouponType.text,@"#",couponId.text,@"#",couponValue.text,@"#",couponQty.text];
                        if ((couponQty.text).intValue == 0) {
                            couponQty.text = @"1";
                            strCuponDestails = [NSString stringWithFormat:@"%@%@%@%@%@%@%@",selectCouponType.text,@"#",couponId.text,@"#",couponValue.text,@"#",couponQty.text];
                            
                        }
                        [couponArr addObject:strCuponDestails];
                    }
                    
                    changeReturnStr = @"0.00";
                    
                    if (((couponValue.text).floatValue*(couponQty.text).intValue)-(billDueLbl.text).floatValue>0) {
                        
                        changeReturnStr = [NSString stringWithFormat:@"%.2f",(((couponValue.text).floatValue*(couponQty.text).intValue)-(billDueLbl.text).floatValue)];
                    }
                    
                    NSMutableDictionary *transDic = [NSMutableDictionary new];
                    [transDic setValue:foodCouponTypeStr forKey:@"modeOfPayment"];
                    [transDic setValue:@"" forKey:@"cardType"];
                    [transDic setValue:couponId.text forKey:@"couponNumber"];
                    [transDic setValue:[NSString stringWithFormat:@"%.2f",(couponValue.text).floatValue*(couponQty.text).intValue] forKey:@"paidAmount"];
                    [transDic setValue:cardInfoTxt.text forKey:CARD_INFO];
                    [transDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
                    [transDic setValue:bankNameTxt.text forKey:BANK_NAME];
                    [transDic setValue:changeReturnStr forKey:CHANGE_RETURN];
                    [transDic setValue:[NSString stringWithFormat:@"%.2f",(couponValue.text).floatValue*(couponQty.text).intValue] forKey:RECEIVED_AMOUNT];
                    
                    [transDic setValue:currentdate forKey:@"dateTime"];
                    
                    [paymentTransactionArray addObject:transDic];
                    
                    
                    
                    [couponIdArr removeAllObjects];
                    [couponValArr removeAllObjects];
                    [couponTotalArr removeAllObjects];
                    
                    
                    [couponDeatails reloadData];
                    
                    float total_val = 0.00f;
                    for (int i=0; i<couponArr.count; i++) {
                        
                        total_val = total_val + ([couponArr[i] componentsSeparatedByString:@"#"][3].intValue * [couponArr[i] componentsSeparatedByString:@"#"][2].floatValue);
                    }
                    totalCoupValue.text = [NSString stringWithFormat:@"%.2f",total_val];
                    totalBill.text = [NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue];
                    billDueLbl.text = [NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue-(totalCoupValue.text).floatValue];
                    if ((billDueLbl.text).intValue < 0) {
                        
                        billDueLbl.text = @"0.00";
                    }
                    
                    couponId.text = @"";
                    couponValue.text = @"";
                    couponQty.text = @"";
                    
                }
                else {
                    
                    NSString *msg;
                    msg = @"Please provide Coupon Value";
                    
                    UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:msg delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                    [alert show];
                    
                }
            }
            else {
                
                couponQty.text = @"";
                couponValue.text = @"";
                couponId.text = @"";
                
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Message" message:@"Bill Value Reached" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            
        }
        else if (sender.tag == 21) {
            
            if ((netPayLblVal.text).floatValue < 0.0) {
                
                totalTxt.text  = @"0.00";
                netPayLblVal.text = @"0.00";
                subtotalTxt.text = @"0.0";
                totalCoupValue.text = @"0.00";
            }
            
            if ((totalCoupValue.text).intValue == 0) {
                
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please Add atleast one coupon to continue Billing" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
                [alert show];
            }
            else {
                payTxt2.text = totalCoupValue.text;
                NSString *billDue;
                billDue = [NSString stringWithFormat:@"%.2f",(netPayLblVal.text).floatValue - (totalCoupValue.text).floatValue];
                if (billDue.intValue < 0) {
                    billDue = @"0.00";
                }
                finalBillDue = [billDue copy];
                [self addPaymentViewFor:@"Food Coupons"];
                // [self continuePay2];
            }
        }
        else {   // Coupon Service calls online && offline .....
            
            
            //changed by Srinivasulu on 29/12/2017....
            if (![giftNo.text isEqualToString:@""] || ![giftID.text isEqualToString:@""] || ![phoneNumberText.text isEqualToString:@""]){
                
                //this may not
                //            CheckWifi * wifi = [[CheckWifi alloc]init];
                //            BOOL status = [wifi checkWifi];
                //
                //            if (status) {
                //            }
                //            else{
                //
                //                UIAlertView *alert=  [[UIAlertView alloc] initWithTitle:@"Message" message:@"Please enable wifi or mobile data" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                //                [alert show];
                //            }
                
                
                NSString * serviceCallParamStr = giftNo.text;
                
                if((giftID.text).length >= 15)//16`
                    serviceCallParamStr = giftID.text;
                
                //  added by roja on 05/05/2019
                if (giftView.tag == 0) {    // Gift voucher....
                    
                    @try {
                        
                        if(isOfflineService){
                            
                            offline = [[OfflineBillingServices alloc] init];
                            NSMutableDictionary * giftVoucherDetailsDic = [offline fetchGiftVoucherDetailsFromSqliteWithVoucherCodeStr:serviceCallParamStr];
                            
                            NSError * err_;
                            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:giftVoucherDetailsDic options:0 error:&err_];
                            NSString * giftVoucherDetailsString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                            
                            [self getVoucherDetailsHandler:giftVoucherDetailsString];
                            
                        } // Upto here added by roja on 05/05/2019
                        else{
                            
                            HUD.labelText = NSLocalizedString(@"searching..", nil);
                            [HUD setHidden:NO];
                            // MOBILE_NUMBER key and if-condition added by roja
                            
                            //                        if ([serviceCallParamStr length] == 0) {
                            //
                            //                            serviceCallParamStr = phoneNumberText.text;
                            //                        }
                            // No need of phone number to get voucher details..
                            NSArray *loyaltyKeys = @[REQUEST_HEADER, LOCATIONS, VOUCHER_CODE,MOBILE_NUMBER];
                            NSArray *loyaltyObjects = @[[RequestHeader getRequestHeader], presentLocation, serviceCallParamStr,phoneNumberText.text];
                            
                            
                            //                        NSArray *loyaltyKeys = @[REQUEST_HEADER, LOCATIONS, VOUCHER_CODE];
                            //                        NSArray *loyaltyObjects = @[[RequestHeader getRequestHeader], presentLocation, serviceCallParamStr];
                            
                            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                            
                            NSError * err_;
                            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
                            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                            
                            WebServiceController * webServiceController = [WebServiceController new];
                            webServiceController.giftVoucherServicesDelegate = self;
                            [webServiceController getGiftVoucherDetails:loyaltyString];
                        }
                    }
                    @catch (NSException *exception) {
                        
                        [HUD setHidden:YES];
                        NSLog(@"Exception %@",exception.name);
                    }
                    
                }
                else if (giftView.tag == 1){ // Gift Coupon....
                    
                    @try {
                        
                        if (isOfflineService) { //  added by roja on 05/05/2019
                            // Hud ??
                            
                                offline = [[OfflineBillingServices alloc] init];
                            
                            if([phoneNumberText.text length] >0 && giftNo.text == 0){
                                
                                float y_axis = giftView.frame.origin.y + giftView.frame.size.height - 200;
                                
                                NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"Please enter the Coupon code before fetching",nil)];
                                
                                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:400 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                                return;
                            }
                            
                            else{
                                
                                NSMutableDictionary * giftCouponDetailsDic = [offline fetchGiftCouponDetailsFromSqliteWithPhoneNumber:phoneNumberText.text enteredCouponCode:serviceCallParamStr];
                                
                                NSError * err_;
                                NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:giftCouponDetailsDic options:0 error:&err_];
                                NSString * giftCoupnDetailsString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                                
                                [self getCouponDetailsHandler:giftCoupnDetailsString];
                            }
                        }// upto here added by roja on 05/05/2019
                        
                        else{
                            
                            HUD.labelText = NSLocalizedString(@"searching..", nil);
                            [HUD setHidden:NO];
                            
                            NSArray *loyaltyKeys = @[REQUEST_HEADER, LOCATIONS, COUPON_CODE, MOBILE_NUMBER];
                            
                            NSArray *loyaltyObjects = @[[RequestHeader getRequestHeader], presentLocation, serviceCallParamStr, phoneNumberText.text];
                            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                            // changed by roja on 28-09-2018.. custmerPhNum.text to phoneNumberText.text
                            
                            NSError * err_;
                            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
                            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                            
                            WebServiceController * webServiceController = [WebServiceController new];
                            webServiceController.giftCouponServicesDelegate = self;
                            [webServiceController getGiftCouponDetails:loyaltyString];
                        }
                    }
                    @catch (NSException *exception) {
                        
                        [HUD setHidden:YES];
                        NSLog(@"Exception %@",exception.name);
                    }
                }
                
                else {  // Loyalty....
                    
                    @try {
                        if (isOfflineService) { //  added by roja on 05/05/2019
                            // Hud ??
                            @try {
                                
                                offline = [[OfflineBillingServices alloc] init];
                                
                               NSMutableDictionary * customerLoyaltyCardDic = [offline fetchLoyaltyCardDetailsFromSqliteWithPhoneNumber:phoneNumberText.text withGiftId:serviceCallParamStr];
                                
                                    
                                    NSError * err_;
                                    NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:customerLoyaltyCardDic options:0 error:&err_];
                                    NSString * loyaltyCardDetailsString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                                    
                                    [self getLoyalcardDetailsHandler:loyaltyCardDetailsString];
                                
                            } @catch (NSException *exception) {
                                
                                NSLog(@"Offline Loyalty Fetching exception:---> %@",exception);
                            }
                            
                        }// upto here added by roja on 05/05/2019
                        else{
                            HUD.labelText = NSLocalizedString(@"searching..", nil);
                            [HUD setHidden:NO];
                            
                            if([serviceCallParamStr length] == 0)
                                serviceCallParamStr = phoneNumberText.text;
                            
                            NSArray * loyaltyKeys = @[REQUEST_HEADER, LOCATIONS, LOYALITY_CARD_NUMBER, MOBILE_NUMBER];
                            NSArray * loyaltyObjects = @[[RequestHeader getRequestHeader], presentLocation, serviceCallParamStr, phoneNumberText.text];
                            
                            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
                            
                            NSError * err_;
                            NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
                            NSString * loyaltyString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
                            
                            WebServiceController * webServiceController = [WebServiceController new];
                            webServiceController.loyaltycardServicesDelegate = self;
                            [webServiceController getLoyaltycardDetails:loyaltyString];
                        }
                        
                    }
                    @catch (NSException *exception) {
                        
                        [HUD setHidden:YES];
                        NSLog(@"Exception %@",exception.name);
                    }
                    
                }
            }
            
            //upto here on 29/12/2017....
            
        }
        
    } @catch (NSException *exception) {
        
    }
    
}


/**
 * @description  in this method we change the frames based on custom selected payment coupon type....
 * @date         02/01/2018
 * @method       formAndViewGiftView
 * @author       Srinivasulu . V
 * @param        UIButton
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)formAndViewGiftView:(UIButton *)sender{
    
    @try {
        
        if(loyaltyScrollView == nil){
            
            loyaltyScrollView = [[UIScrollView alloc] init];
            loyaltyScrollView.hidden = NO;
            loyaltyScrollView.backgroundColor = [UIColor clearColor];
            loyaltyScrollView.bounces = FALSE;
            loyaltyScrollView.scrollEnabled = YES;
            
            giftViewHeaderLbl = [[UILabel alloc] init];
            giftViewHeaderLbl.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:0.8];
            giftViewHeaderLbl.textColor = [UIColor blackColor];
            giftViewHeaderLbl.textAlignment = NSTextAlignmentCenter;
            giftViewHeaderLbl.numberOfLines = 2;
            
            backbutton = [[UIButton alloc] init] ;
            [backbutton addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
            backbutton.tag = 22;
            UIImage * image = [UIImage imageNamed:@"delete.png"];
            [backbutton setBackgroundImage:image    forState:UIControlStateNormal];
            
            giftTypeLbl = [[UILabel alloc] init];
            giftTypeLbl.backgroundColor = [UIColor clearColor];
            giftTypeLbl.textColor = [UIColor whiteColor];
            
            giftType.backgroundColor = [UIColor whiteColor];
            giftType.hidden = NO;
            
            
            cardNumber = [[UILabel alloc] init];
            cardNumber.backgroundColor = [UIColor clearColor];
            cardNumber.textColor = [UIColor whiteColor];
            
            cardID = [[UILabel alloc] init];
            cardID.backgroundColor = [UIColor clearColor];
            cardID.textColor = [UIColor whiteColor];
            
            giftIssuedOnLbl = [[UILabel alloc] init];
            giftIssuedOnLbl.backgroundColor = [UIColor clearColor];
            giftIssuedOnLbl.textColor = [UIColor whiteColor];
            
            giftIssuedToLbl = [[UILabel alloc] init];
            giftIssuedToLbl.backgroundColor = [UIColor clearColor];
            giftIssuedToLbl.textColor = [UIColor whiteColor];
            
            giftStatusLbl = [[UILabel alloc] init];
            giftStatusLbl.backgroundColor = [UIColor clearColor];
            giftStatusLbl.textColor = [UIColor whiteColor];
            
            giftValideFromLbl = [[UILabel alloc] init];
            giftValideFromLbl.backgroundColor = [UIColor clearColor];
            giftValideFromLbl.textColor = [UIColor whiteColor];
            
            giftValideToLbl = [[UILabel alloc] init];
            giftValideToLbl.backgroundColor = [UIColor clearColor];
            giftValideToLbl.textColor = [UIColor whiteColor];
            
            avai_points_label = [[UILabel alloc] init];
            avai_points_label.backgroundColor = [UIColor clearColor];
            avai_points_label.textColor = [UIColor whiteColor];
            
            amtLabel = [[UILabel alloc] init];
            amtLabel.backgroundColor = [UIColor clearColor];
            amtLabel.textColor = [UIColor whiteColor];
            
            recash_label = [[UILabel alloc] init];
            recash_label.backgroundColor = [UIColor clearColor];
            recash_label.textColor = [UIColor whiteColor];
            
            
            giftTypeBtn  = [UIButton buttonWithType:UIButtonTypeCustom];
            buttonImageDD1 = [UIImage imageNamed:@"combo.png"];
            [giftTypeBtn setBackgroundImage:buttonImageDD1 forState:UIControlStateNormal];
            [giftTypeBtn addTarget:self
                            action:@selector(giftContinue:) forControlEvents:UIControlEventTouchDown];
            giftTypeBtn.titleLabel.textColor = [UIColor blackColor];
            giftTypeBtn.tag = 0;
            
            
            giftNo = [[CustomTextField alloc] init];
            giftNo.placeholder = NSLocalizedString(@"5_digit_code", nil);
            [giftNo awakeFromNib];
            //giftNo.textColor = [UIColor blackColor];
            giftNo.borderStyle = UITextBorderStyleRoundedRect;
            giftNo.keyboardType = UIKeyboardTypeNumberPad;
            
            
            giftID = [[CustomTextField alloc] init];
            giftID.placeholder = NSLocalizedString(@"16_digit_code", nil);
            [giftID awakeFromNib];
            //        giftID.textColor = [UIColor blackColor];
            giftID.borderStyle = UITextBorderStyleRoundedRect;
            
            
            cardStatusTxt = [[CustomTextField alloc] init];
            cardStatusTxt.placeholder = NSLocalizedString(@"status", nil);
            [cardStatusTxt awakeFromNib];
            //        cardStatusTxt.textColor = [UIColor blackColor];
            cardStatusTxt.borderStyle = UITextBorderStyleRoundedRect;
            
            
            cardIssuedOnTxt = [[CustomTextField alloc] init];
            cardIssuedOnTxt.placeholder = NSLocalizedString(@"issued_on", nil);
            [cardIssuedOnTxt awakeFromNib];
            //        cardIssuedOnTxt.textColor = [UIColor blackColor];
            giftNo.borderStyle = UITextBorderStyleRoundedRect;
            
            
            cardIssuedToTxt = [[CustomTextField alloc] init];
            cardIssuedToTxt.placeholder = NSLocalizedString(@"issued_to", nil);
            [cardIssuedToTxt awakeFromNib];
            //        cardIssuedToTxt.textColor = [UIColor blackColor];
            
            giftValidFrom = [[CustomTextField alloc] init];
            giftValidFrom.placeholder = NSLocalizedString(@"valide_from", nil);
            [giftValidFrom awakeFromNib];
            //        giftValidFrom.textColor = [UIColor blackColor];
            giftValidFrom.borderStyle = UITextBorderStyleRoundedRect;
            
            
            giftValidTo = [[CustomTextField alloc] init];
            giftValidTo.placeholder = NSLocalizedString(@"valide_to", nil);
            [giftValidTo awakeFromNib];
            //        giftValidTo.textColor = [UIColor blackColor];
            giftValidTo.borderStyle = UITextBorderStyleRoundedRect;
            
            
            giftAmt.textColor = [UIColor whiteColor];
            giftAmt.hidden = NO;
            giftAmt.borderStyle = UITextBorderStyleRoundedRect;
            
            avai_points = [[CustomTextField alloc] init];
            avai_points.placeholder = NSLocalizedString(@"0.00", nil);
            [avai_points awakeFromNib];
            //        avai_points.textColor = [UIColor blackColor];
            avai_points.borderStyle = UITextBorderStyleRoundedRect;
            
            recash = [[CustomTextField alloc] init];
            recash.placeholder = NSLocalizedString(@"0.00", nil);
            [recash awakeFromNib];
            //        recash.textColor = [UIColor blackColor];
            recash.borderStyle = UITextBorderStyleRoundedRect;
            recash.delegate = self;
            recash.keyboardType = UIKeyboardTypeNumberPad;
            
            enterOtpTxt = [[CustomTextField alloc] init];
            enterOtpTxt.placeholder = NSLocalizedString(@"enter_otp", nil);
            [enterOtpTxt awakeFromNib];
            enterOtpTxt.backgroundColor = [UIColor blackColor];
            //        enterOtpTxt.textColor = [UIColor blackColor];
            enterOtpTxt.borderStyle = UITextBorderStyleRoundedRect;
            enterOtpTxt.delegate = self;
            enterOtpTxt.keyboardType = UIKeyboardTypeNumberPad;
            [enterOtpTxt addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventTouchUpInside]; // added by roja on 20/11/2019..

            
            
            giftOkBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [giftOkBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
            giftOkBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            giftOkBtn.titleLabel.textColor = [UIColor whiteColor];
            giftOkBtn.backgroundColor = [UIColor grayColor];
            giftOkBtn.layer.cornerRadius = 5;
            
            giftCancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [giftCancelBtn addTarget:self action:@selector(giftContinue:) forControlEvents:UIControlEventTouchUpInside];
            giftCancelBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            giftCancelBtn.titleLabel.textColor = [UIColor whiteColor];
            giftCancelBtn.backgroundColor = [UIColor grayColor];
            giftCancelBtn.layer.cornerRadius = 5;
            
            
            generateOtpBackGroundLbl = [[UILabel alloc] init];
            generateOtpBackGroundLbl.backgroundColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.4];
            generateOtpBackGroundLbl.textAlignment = NSTextAlignmentCenter;
            generateOtpBackGroundLbl.numberOfLines = 2;
            generateOtpBackGroundLbl.layer.borderColor = [UIColor grayColor].CGColor;
            generateOtpBackGroundLbl.layer.borderWidth = .7;
            generateOtpBackGroundLbl.layer.masksToBounds = YES;
            
            generateOtpBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [generateOtpBtn addTarget:self action:@selector(generatedCustomerOtp) forControlEvents:UIControlEventTouchUpInside];
            generateOtpBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
            generateOtpBtn.backgroundColor = [UIColor grayColor];
            generateOtpBtn.layer.cornerRadius = 5;
            
            //Added By Bhargav.v on 16/08/2018
            fetchDataButton = [UIButton buttonWithType:UIButtonTypeCustom];
            [fetchDataButton addTarget:self action:@selector(fetchCustomerLoyaltyData) forControlEvents:UIControlEventTouchUpInside];
            fetchDataButton.titleLabel.textAlignment = NSTextAlignmentCenter;
            fetchDataButton.titleLabel.textColor = [UIColor whiteColor];
            fetchDataButton.backgroundColor = [UIColor grayColor];
            fetchDataButton.layer.cornerRadius = 5;
            
            billValueLabel = [[UILabel alloc] init];
            billValueLabel.backgroundColor = [UIColor clearColor];
            billValueLabel.textColor = [UIColor whiteColor];
            
            minimumValueText = [[CustomTextField alloc] init];
            minimumValueText.placeholder = NSLocalizedString(@"min_val", nil);
            [minimumValueText awakeFromNib];
            
            maximumValueText = [[CustomTextField alloc] init];
            maximumValueText.placeholder = NSLocalizedString(@"max_val", nil);
            [maximumValueText awakeFromNib];
            
            // added by roja on 27/07/2019...
            walletUserFirstNameLbl  = [[UILabel alloc] init];
            walletUserFirstNameLbl.backgroundColor = [UIColor clearColor];
            walletUserFirstNameLbl.textColor = [UIColor whiteColor];
            
            walletUserHouseNoLbl = [[UILabel alloc] init];
            walletUserHouseNoLbl.backgroundColor = [UIColor clearColor];
            walletUserHouseNoLbl.textColor = [UIColor whiteColor];
            
            walletUserLocalityLbl = [[UILabel alloc] init];
            walletUserLocalityLbl.backgroundColor = [UIColor clearColor];
            walletUserLocalityLbl.textColor = [UIColor whiteColor];
            
            walletUserCityLbl = [[UILabel alloc] init];
            walletUserCityLbl.backgroundColor = [UIColor clearColor];
            walletUserCityLbl.textColor = [UIColor whiteColor];
            
            walletUserEmailIdLbl = [[UILabel alloc] init];
            walletUserEmailIdLbl.backgroundColor = [UIColor clearColor];
            walletUserEmailIdLbl.textColor = [UIColor whiteColor];
            
            walletAmountLbl = [[UILabel alloc] init];
            walletAmountLbl.backgroundColor = [UIColor clearColor];
            walletAmountLbl.textColor = [UIColor whiteColor];
            
            walletPhoneNobl  = [[UILabel alloc] init];
            walletPhoneNobl.backgroundColor = [UIColor clearColor];
            walletPhoneNobl.textColor = [UIColor whiteColor];

            
            walletUserFirstNameTF = [[CustomTextField alloc] init];
            walletUserFirstNameTF.placeholder = @"User Name";
            [walletUserFirstNameTF awakeFromNib];
            walletUserFirstNameTF.borderStyle = UITextBorderStyleRoundedRect;
            walletUserFirstNameTF.delegate = self;

            
            walletUserLastNameTF  = [[CustomTextField alloc] init];
            walletUserLastNameTF.placeholder = @"Last Name";
            [walletUserLastNameTF awakeFromNib];
            walletUserLastNameTF.delegate = self;
            walletUserLastNameTF.borderStyle = UITextBorderStyleRoundedRect;
            
            walletUserHouseNoTF = [[CustomTextField alloc] init];
            walletUserHouseNoTF.placeholder = @"House No";
            [walletUserHouseNoTF awakeFromNib];
            walletUserHouseNoTF.borderStyle = UITextBorderStyleRoundedRect;
            walletUserHouseNoTF.delegate = self;
            [walletUserHouseNoTF addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventTouchUpInside];
            
            
            
            walletUserLocalityTF  = [[CustomTextField alloc] init];
            walletUserLocalityTF.placeholder = @"Locality";
            [walletUserLocalityTF awakeFromNib];
            walletUserLocalityTF.borderStyle = UITextBorderStyleRoundedRect;
            walletUserLocalityTF.delegate = self;
            [walletUserLocalityTF addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventTouchUpInside];

            walletUserCityTF  = [[CustomTextField alloc] init];
            walletUserCityTF.placeholder = @"City";
            [walletUserCityTF awakeFromNib];
            walletUserCityTF.borderStyle = UITextBorderStyleRoundedRect;
            walletUserCityTF.delegate = self;
            [walletUserCityTF addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventTouchUpInside];

            walletUserEmailIdTF  = [[CustomTextField alloc] init];
            walletUserEmailIdTF.placeholder = @"Email";
            [walletUserEmailIdTF awakeFromNib];
            walletUserEmailIdTF.borderStyle = UITextBorderStyleRoundedRect;
            walletUserEmailIdTF.delegate = self;
            [walletUserEmailIdTF addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventTouchUpInside];

            walletAmountValueTF  = [[CustomTextField alloc] init];
            walletAmountValueTF.placeholder = @"Wallet Amt";
            [walletAmountValueTF awakeFromNib];
            walletAmountValueTF.borderStyle = UITextBorderStyleRoundedRect;
            walletAmountValueTF.delegate = self;
            walletAmountValueTF.keyboardType = UIKeyboardTypeNumberPad;
            [walletAmountValueTF addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventTouchUpInside];


            checkWalletBalanceBtn = [UIButton buttonWithType:UIButtonTypeCustom];
            [checkWalletBalanceBtn addTarget:self action:@selector(getCustomerWalletDetails) forControlEvents:UIControlEventTouchUpInside];
            checkWalletBalanceBtn.titleLabel.textAlignment = NSTextAlignmentCenter;
            checkWalletBalanceBtn.titleLabel.textColor = [UIColor whiteColor];
            checkWalletBalanceBtn.backgroundColor = [UIColor grayColor];
            checkWalletBalanceBtn.layer.cornerRadius = 5;
           //upto here added by roja on 27/07/2019...

            
        }
        else {
            
        }
        
        [giftView addSubview:giftViewHeaderLbl];
        [giftView addSubview:backbutton];
        
        
        [loyaltyScrollView addSubview:giftTypeLbl];
        [loyaltyScrollView addSubview:cardNumber];
        [loyaltyScrollView addSubview:cardID];
        [loyaltyScrollView addSubview:giftIssuedOnLbl];
        [loyaltyScrollView addSubview:giftIssuedToLbl];
        [loyaltyScrollView addSubview:giftStatusLbl];
        [loyaltyScrollView addSubview:giftValideFromLbl];
        [loyaltyScrollView addSubview:giftValideToLbl];
        [loyaltyScrollView addSubview:avai_points_label];
        [loyaltyScrollView addSubview:amtLabel];
        [loyaltyScrollView addSubview:recash_label];
        [loyaltyScrollView addSubview:billValueLabel];
        
        
        [loyaltyScrollView addSubview:giftType];
        [loyaltyScrollView addSubview:phoneNumberText];
        [loyaltyScrollView addSubview:giftTypeBtn];
        [loyaltyScrollView addSubview:giftNo];
        [loyaltyScrollView addSubview:giftID];
        [loyaltyScrollView addSubview:cardStatusTxt];
        [loyaltyScrollView addSubview:giftValidFrom];
        [loyaltyScrollView addSubview:giftValidTo];
        [loyaltyScrollView addSubview:cardIssuedOnTxt];
        [loyaltyScrollView addSubview:cardIssuedToTxt];
        [loyaltyScrollView addSubview:giftAmt];
        [loyaltyScrollView addSubview:avai_points];
        [loyaltyScrollView addSubview:recash];
        
        [loyaltyScrollView addSubview:minimumValueText];
        [loyaltyScrollView addSubview:maximumValueText];
        
        // added by roja on 29/07/2019....
        [loyaltyScrollView addSubview:walletUserFirstNameLbl];
        [loyaltyScrollView addSubview:walletUserHouseNoLbl];
        [loyaltyScrollView addSubview:walletUserLocalityLbl];
        [loyaltyScrollView addSubview:walletUserCityLbl];
        [loyaltyScrollView addSubview:walletUserEmailIdLbl];
        [loyaltyScrollView addSubview:walletAmountLbl];
        [loyaltyScrollView addSubview:walletPhoneNobl];

        
        [loyaltyScrollView addSubview:walletUserFirstNameTF];
        [loyaltyScrollView addSubview:walletUserLastNameTF];
        [loyaltyScrollView addSubview:walletUserHouseNoTF];
        [loyaltyScrollView addSubview:walletUserLocalityTF];
        [loyaltyScrollView addSubview:walletUserCityTF];
        [loyaltyScrollView addSubview:walletUserEmailIdTF];
        [loyaltyScrollView addSubview:walletAmountValueTF];
        [loyaltyScrollView addSubview:checkWalletBalanceBtn];
        //upto here added by roja on 29/07/2019....

        //added By Bhargav.v on 16/08/2018...
        [loyaltyScrollView addSubview:fetchDataButton];
        
        //added on 26/04/2018....
        cardIssuedOnTxt.userInteractionEnabled = NO;
        cardIssuedToTxt.userInteractionEnabled = NO;
        giftValidFrom.userInteractionEnabled = NO;
        giftValidTo.userInteractionEnabled = NO;
        cardStatusTxt.userInteractionEnabled = NO;
        giftAmt.userInteractionEnabled = NO;
        avai_points.userInteractionEnabled = NO;
        
        [loyaltyScrollView addSubview:generateOtpBackGroundLbl];
        [loyaltyScrollView addSubview:generateOtpBtn];
        [loyaltyScrollView addSubview:enterOtpTxt];
        
        [giftView addSubview:loyaltyScrollView];
        
        [giftView addSubview:giftOkBtn];
        [giftView addSubview:giftCancelBtn];
        
        [self.view addSubview:giftView];
        giftView.hidden = NO;
        
        @try {
            
            giftViewHeaderLbl.text = NSLocalizedString(@"gift_voucher_coupon_loyalty_card", nil);
            
            giftTypeLbl.text = NSLocalizedString(@"type", nil);
            cardNumber.text = NSLocalizedString(@"coupon_code", nil);
            cardID.text = NSLocalizedString(@"coupon_id", nil);
            giftIssuedOnLbl.text = NSLocalizedString(@"issued_on", nil);
            giftIssuedToLbl.text = NSLocalizedString(@"issued_to", nil);
            giftStatusLbl.text = NSLocalizedString(@"coupon_status", nil);
            giftValideFromLbl.text = NSLocalizedString(@"valide_from", nil);
            giftValideToLbl.text = NSLocalizedString(@"valide_to", nil);
            avai_points_label.text = NSLocalizedString(@"avail_points_", nil);
            amtLabel.text = NSLocalizedString(@"available_cash_", nil);
            recash_label.text = NSLocalizedString(@"encashing_amount", nil);
            
            // added by roja on 29-07-2018..
            walletUserFirstNameLbl.text = @"Name";
            walletUserHouseNoLbl.text = @"House No.";
            walletUserLocalityLbl.text = @"Locality";
            walletUserCityLbl.text = @"City";
            walletUserEmailIdLbl.text = @"Email";
            walletAmountLbl.text = @"Wallet";
            walletPhoneNobl.text = @"Mobile No.";
            
            [checkWalletBalanceBtn setTitle:@"Check Balance"  forState:UIControlStateNormal];

            // upto here added by roja on 29-07-2018..

            giftType.placeholder = NSLocalizedString(@"select_type", nil);
            
            giftOkBtn.tag = 1;
            giftCancelBtn.tag = 2;
            [giftOkBtn setTitle:NSLocalizedString(@"OK", nil)  forState:UIControlStateNormal];
            [giftCancelBtn setTitle:NSLocalizedString(@"cancel", nil)  forState:UIControlStateNormal];
            [generateOtpBtn setTitle:NSLocalizedString(@"generate_otp", nil)  forState:UIControlStateNormal];
            
            [fetchDataButton setTitle:NSLocalizedString(@"fetch_data",nil) forState:UIControlStateNormal];
            billValueLabel.text = NSLocalizedString(@"bill_val",nil);
        }
        @catch(NSException * exception) {
            
        }
        
        giftNo.delegate = self;
        giftID.delegate = self;
        //added on 15/10/2018...
        if(![giftType.text length]){
            giftType.text = giftTypeArrayList[0];
            giftView.tag = 0;
            giftTypeBtn.tag = 0;
        }
        
        if([giftType.text length] > 0) {
            
            if([giftType.text isEqualToString:@"Loyalty Card"]){
                
                giftTypeString = @"loyaltycard";
                giftScannerBtn.tag = 2;
            }
            else  if([giftType.text isEqualToString:@"Coupon"]){
                
                giftTypeString = @"coupon";
                giftScannerBtn.tag = 1;
            }
            else if([giftType.text isEqualToString:@"Gift Voucher"]){
                
                giftTypeString = @"giftvoucher";
                giftScannerBtn.tag = 3;
            }
            else{
                
                giftTypeString = @"Wallet";
            }
            
            //giftType.text = [giftTypeArrayList objectAtIndex:indexPath.row];
            giftType.backgroundColor = [UIColor whiteColor];
            //giftView.tag = indexPath.row;
            [giftTypeTableView setHidden:YES];
            [editPricePopOver dismissPopoverAnimated:YES];
            giftTypeBtn.tag = 0;
            
        }
        
        [self showgiftView];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  in this method we change the frames based on custom selected payment coupon type....
 * @date
 * @method       showgiftView
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 26/12/2017 && Bhargav on 22/08/2018....
 * @reason       added the comments, exception handling and constants && added fetch data button....
 *
 * @verified By
 * @verified On
 *
 */

- (void) showgiftView {
    
    @try {
        
        generateOtpBtn.tag = 2;
        enterOtpTxt.tag = 2;
        enterOtpTxt.text = @"";
        phoneNumberText.hidden = NO;
        //added by Srinivasulu on 17/10/2018....
        giftAmt.tag = 2;
        giftValidTo.text = @"";
        giftValidFrom.text = @"";
        amtLabel.text = NSLocalizedString(@"cash_value", nil);
        minimumValueText.userInteractionEnabled = NO;
        maximumValueText.userInteractionEnabled = NO;
        giftAmt.userInteractionEnabled = NO;
        
        if (giftView.tag == 0 ) {   // for voucher selection
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                }
                else {
                }
                
                giftValideToLbl.textAlignment = NSTextAlignmentLeft;
                giftViewHeaderLbl.frame = CGRectMake(0, 0, 680, 60);
                backbutton.frame = CGRectMake( giftViewHeaderLbl.frame.size.width - 70, 10.0, 45.0, 45.0);
                
                giftTypeLbl.frame = CGRectMake( 5, 10, (giftViewHeaderLbl.frame.size.width - 40)/4, 35);
                
                giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 20), 35);
                
                giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
                
                cardNumber.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftTypeLbl.frame.origin.y + giftTypeLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftNo.frame = CGRectMake( giftType.frame.origin.x, cardNumber.frame.origin.y,(giftType.frame.size.width)/3, giftType.frame.size.height);
                
                phoneNumberText.frame = CGRectMake( giftNo.frame.origin.x + giftNo.frame.size.width + 10, giftNo.frame.origin.y, (giftType.frame.size.width)/2.8,giftType.frame.size.height);
                
                //Added By Bhargav.v on 16/08/2018...
                fetchDataButton.frame = CGRectMake(phoneNumberText.frame.origin.x + phoneNumberText.frame.size.width + 15,phoneNumberText.frame.origin.y,120,35);
                //upto here..
                cardID.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardNumber.frame.origin.y + cardNumber.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftID.frame = CGRectMake( giftType.frame.origin.x, cardID.frame.origin.y, giftType.frame.size.width, giftType.frame.size.height);
                
                giftIssuedOnLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardID.frame.origin.y + cardID.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                cardIssuedOnTxt.frame = CGRectMake( giftType.frame.origin.x, giftIssuedOnLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftIssuedToLbl.textAlignment = NSTextAlignmentCenter;
                giftIssuedToLbl.frame = CGRectMake( cardIssuedOnTxt.frame.origin.x + cardIssuedOnTxt.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width , giftTypeLbl.frame.size.height);
                
                cardIssuedToTxt.frame = CGRectMake( giftID.frame.origin.x + giftID.frame.size.width - giftTypeLbl.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftStatusLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftIssuedOnLbl.frame.origin.y + giftIssuedOnLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                cardStatusTxt.frame = CGRectMake( giftType.frame.origin.x, giftStatusLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftValideFromLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftStatusLbl.frame.origin.y + giftStatusLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidFrom.frame = CGRectMake( giftType.frame.origin.x, giftValideFromLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftValideToLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftValideFromLbl.frame.origin.y + giftValideFromLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidTo.frame = CGRectMake( giftType.frame.origin.x, giftValideToLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                amtLabel.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftValideToLbl.frame.origin.y + giftValideToLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftAmt.frame = CGRectMake( giftType.frame.origin.x, amtLabel.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                loyaltyScrollView.frame = CGRectMake( 0, giftViewHeaderLbl.frame.origin.y + giftViewHeaderLbl.frame.size.height, giftViewHeaderLbl.frame.size.width, amtLabel.frame.origin.y + amtLabel.frame.size.height + 10);
                
                
                generateOtpBackGroundLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x + 35, cardStatusTxt.frame.origin.y, cardIssuedToTxt.frame.origin.x + cardIssuedToTxt.frame.size.width - (giftIssuedToLbl.frame.origin.x + 35), loyaltyScrollView.frame.size.height - (cardStatusTxt.frame.origin.y + 10));
                
                
                generateOtpBtn.frame = CGRectMake( generateOtpBackGroundLbl.frame.origin.x + ((generateOtpBackGroundLbl.frame.size.width - 140)/2), generateOtpBackGroundLbl.frame.origin.y + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), 140, 40);
                
                enterOtpTxt.frame = CGRectMake( generateOtpBtn.frame.origin.x, generateOtpBtn.frame.origin.y + generateOtpBtn.frame.size.height + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), generateOtpBtn.frame.size.width, generateOtpBtn.frame.size.height);
                
                
                
                giftOkBtn.frame = CGRectMake( giftTypeLbl.frame.origin.x, loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height, 120, 40);
                giftCancelBtn.frame = CGRectMake( giftOkBtn.frame.origin.x + giftOkBtn.frame.size.width + 20, giftOkBtn.frame.origin.y, giftOkBtn.frame.size.width, giftOkBtn.frame.size.height);
                
                giftView.frame = CGRectMake( (self.view.frame.size.width - giftViewHeaderLbl.frame.size.width)/2, (self.view.frame.size.height - (loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height))/2, giftViewHeaderLbl.frame.size.width, giftOkBtn.frame.origin.y + giftOkBtn.frame.size.height + 10);
                
                [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:giftView andSubViews:YES fontSize:20.0f cornerRadius:0];
            }
            else{
                
            }
            
            //            //phoneNumberText.hidden = YES;
            //            if (giftView.tag == 1) {
            //                cardNumber.text = @"Coupon Code";
            //                cardID.text = @"Coupon ID";
            //
            //
            //
            //
            //            }
            //else {
            
            cardNumber.text = @"Voucher Id";
            cardID.text = @"Voucher Code";
            
            //}
            // commented by roja on 29/07/2019...
//            [avai_points_label setHidden:TRUE];
//            [avai_points        setHidden:TRUE];
//            [recash_label       setHidden:TRUE];
//            [recash              setHidden:TRUE];
//            [billValueLabel     setHidden:TRUE];
//            [minimumValueText   setHidden:TRUE];
//            [maximumValueText   setHidden:TRUE];
            
               [giftScannerBtn     setHidden:TRUE];
            
            // added by roja no 29/07/2019
           // Voucher related....
            [cardNumber     setHidden:FALSE];
            [giftNo     setHidden:FALSE];
            [fetchDataButton     setHidden:FALSE];
            [cardID     setHidden:FALSE];
            [giftID     setHidden:FALSE];
            [giftIssuedOnLbl     setHidden:FALSE];
            [cardIssuedOnTxt     setHidden:FALSE];
            [giftIssuedToLbl     setHidden:FALSE];
            [cardIssuedToTxt     setHidden:FALSE];
            [giftStatusLbl     setHidden:FALSE];
            [cardStatusTxt     setHidden:FALSE];
            [giftValideFromLbl     setHidden:FALSE];
            [giftValidFrom     setHidden:FALSE];
            [giftValideToLbl     setHidden:FALSE];
            [giftValidTo     setHidden:FALSE];
            [amtLabel     setHidden:FALSE];
            [giftAmt     setHidden:FALSE];
            
            // Coupon related....
            [billValueLabel     setHidden:TRUE];
            [minimumValueText     setHidden:TRUE];
            [maximumValueText     setHidden:TRUE];
            
            // loyalty related
            [avai_points_label     setHidden:TRUE];
            [avai_points     setHidden:TRUE];
            [recash_label     setHidden:TRUE];
            [recash     setHidden:TRUE];
            
            // otp related
            [generateOtpBackGroundLbl     setHidden:FALSE];
            [generateOtpBtn     setHidden:FALSE];
            [enterOtpTxt     setHidden:FALSE];
            
            // wallet page related labels and tfs should hide here
            [walletPhoneNobl   setHidden:TRUE];
            [checkWalletBalanceBtn   setHidden:TRUE];
            [walletUserFirstNameLbl   setHidden:TRUE];
            [walletUserFirstNameTF   setHidden:TRUE];
            [walletUserLastNameTF   setHidden:TRUE];
            [walletUserHouseNoLbl   setHidden:TRUE];
            [walletUserHouseNoTF   setHidden:TRUE];
            [walletUserLocalityLbl   setHidden:TRUE];
            [walletUserLocalityTF   setHidden:TRUE];
            [walletUserCityLbl   setHidden:TRUE];
            [walletUserCityTF   setHidden:TRUE];
            [walletUserEmailIdLbl   setHidden:TRUE];
            [walletUserEmailIdTF   setHidden:TRUE];
            [walletAmountLbl   setHidden:TRUE];
            [walletAmountValueTF   setHidden:TRUE];
            // upto here added by roja no 29/07/2019......

            
            giftNo.text        = @"";
            giftValidFrom.text = @"";
            giftValidTo.text   = @"";
            giftAmt.text       = @"0.0";
            savebtn.tag = 0;
            minimumValueText.text = @"";
            maximumValueText.text = @"";
            cardStatusTxt.text = @"";
            giftID.text = @"";
            phoneNumberText.text =@"";
            
            cardIssuedOnTxt.text = @""; // added by roja on 20/11/2019...
        }
        
        else if (giftView.tag == 1){ // for coupon selection
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                }
                else {
                }
                
                giftValideToLbl.textAlignment = NSTextAlignmentCenter;
                
                giftViewHeaderLbl.frame = CGRectMake(0, 0, 680, 60);
                backbutton.frame = CGRectMake( giftViewHeaderLbl.frame.size.width - 70, 10.0, 45.0, 45.0);
                
                
                giftTypeLbl.frame = CGRectMake( 5, 10, (giftViewHeaderLbl.frame.size.width - 40)/4, 35);
                
                //Commented By Bhargav.v as per GUI specification on 16/08/2018...
                //giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 40), 35);
                
                giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 20), 35);
                
                giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
           
                cardNumber.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftTypeLbl.frame.origin.y + giftTypeLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                //Frames changed As per latest GUI Specification
                giftNo.frame = CGRectMake( giftType.frame.origin.x, cardNumber.frame.origin.y,(giftType.frame.size.width)/3, giftType.frame.size.height);
                
                phoneNumberText.frame = CGRectMake( giftNo.frame.origin.x + giftNo.frame.size.width + 10, giftNo.frame.origin.y, (giftType.frame.size.width)/2.8,giftType.frame.size.height);
                
                //Added By Bhargav.v on 16/08/2018...
                fetchDataButton.frame = CGRectMake(phoneNumberText.frame.origin.x + phoneNumberText.frame.size.width + 15,phoneNumberText.frame.origin.y,120,35);
                //upto here..
                
                cardID.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardNumber.frame.origin.y + cardNumber.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftID.frame = CGRectMake( giftType.frame.origin.x, cardID.frame.origin.y, giftType.frame.size.width, giftType.frame.size.height);
                
                giftIssuedOnLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardID.frame.origin.y + cardID.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                cardIssuedOnTxt.frame = CGRectMake( giftType.frame.origin.x, giftIssuedOnLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftIssuedToLbl.textAlignment = NSTextAlignmentCenter;
                giftIssuedToLbl.frame = CGRectMake( cardIssuedOnTxt.frame.origin.x + cardIssuedOnTxt.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width , giftTypeLbl.frame.size.height);
                
                cardIssuedToTxt.frame = CGRectMake( giftID.frame.origin.x + giftID.frame.size.width - giftTypeLbl.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                
                //giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftNo.frame.size.width - 20)/2, 35);
                
                //giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
                
                giftValideFromLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftIssuedOnLbl.frame.origin.y + giftIssuedOnLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidFrom.frame = CGRectMake( giftType.frame.origin.x, giftValideFromLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftValideToLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x, giftValideFromLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidTo.frame = CGRectMake( cardIssuedToTxt.frame.origin.x, giftValideToLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftStatusLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftValideToLbl.frame.origin.y + giftValideToLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                cardStatusTxt.frame = CGRectMake( giftType.frame.origin.x, giftStatusLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                //avai_points_label.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftStatusLbl.frame.origin.y + giftStatusLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                //avai_points.frame = CGRectMake( giftType.frame.origin.x, avai_points_label.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                amtLabel.frame = CGRectMake(giftTypeLbl.frame.origin.x, giftStatusLbl.frame.origin.y + giftStatusLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftAmt.frame = CGRectMake( giftType.frame.origin.x, amtLabel.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                billValueLabel.frame = CGRectMake( giftTypeLbl.frame.origin.x, amtLabel.frame.origin.y + amtLabel.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                minimumValueText.frame = CGRectMake( giftType.frame.origin.x, billValueLabel.frame.origin.y, (giftIssuedOnLbl.frame.size.width)/2.1, giftType.frame.size.height);
                
                maximumValueText.frame = CGRectMake( minimumValueText.frame.origin.x + minimumValueText.frame.size.width + 5, billValueLabel.frame.origin.y, (minimumValueText.frame.size.width), giftType.frame.size.height);
                
                //recash_label.frame = CGRectMake( giftTypeLbl.frame.origin.x, amtLabel.frame.origin.y + amtLabel.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                //recash.frame = CGRectMake( giftType.frame.origin.x, recash_label.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                loyaltyScrollView.frame = CGRectMake( 0, giftViewHeaderLbl.frame.origin.y + giftViewHeaderLbl.frame.size.height, giftViewHeaderLbl.frame.size.width, billValueLabel.frame.origin.y + billValueLabel.frame.size.height + 10);
                
                generateOtpBackGroundLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x + 35, cardStatusTxt.frame.origin.y, cardIssuedToTxt.frame.origin.x + cardIssuedToTxt.frame.size.width - (giftIssuedToLbl.frame.origin.x + 35), loyaltyScrollView.frame.size.height - (cardStatusTxt.frame.origin.y + 10));
                
                generateOtpBtn.frame = CGRectMake( generateOtpBackGroundLbl.frame.origin.x + ((generateOtpBackGroundLbl.frame.size.width - 140)/2), generateOtpBackGroundLbl.frame.origin.y + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), 140, 40);
                
                enterOtpTxt.frame = CGRectMake( generateOtpBtn.frame.origin.x, generateOtpBtn.frame.origin.y + generateOtpBtn.frame.size.height + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), generateOtpBtn.frame.size.width, generateOtpBtn.frame.size.height);
                
                giftOkBtn.frame = CGRectMake( giftTypeLbl.frame.origin.x, loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height, 120, 40);
                giftCancelBtn.frame = CGRectMake( giftOkBtn.frame.origin.x + giftOkBtn.frame.size.width + 20, giftOkBtn.frame.origin.y, giftOkBtn.frame.size.width, giftOkBtn.frame.size.height);
                
                giftView.frame = CGRectMake( (self.view.frame.size.width - giftViewHeaderLbl.frame.size.width)/2, (self.view.frame.size.height - (loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height))/2, giftViewHeaderLbl.frame.size.width, giftOkBtn.frame.origin.y + giftOkBtn.frame.size.height + 10);
                
                [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:giftView andSubViews:YES fontSize:20.0f cornerRadius:0];
                
            }
            
            cardNumber.text = @"Coupon Code";
            cardID.text = @"Coupon ID";
            
            // commented by roja on 29/07/2019....
//            [avai_points_label setHidden:TRUE];
//            [avai_points        setHidden:TRUE];
//            [recash_label       setHidden:TRUE];
//            [recash             setHidden:TRUE];
//
//            [billValueLabel     setHidden:FALSE];
//            [minimumValueText   setHidden:FALSE];
//            [maximumValueText   setHidden:FALSE];
//
            
            [giftScannerBtn     setHidden:TRUE];
            
            // added by roja on 29/07/2019.....
            // Vouchers page related
            [cardNumber     setHidden:FALSE];
            [giftNo       setHidden:FALSE];
            [fetchDataButton     setHidden:FALSE];
            [cardID     setHidden:FALSE];
            [giftID     setHidden:FALSE];
            [giftIssuedOnLbl     setHidden:FALSE];
            [cardIssuedOnTxt     setHidden:FALSE];
            [giftIssuedToLbl     setHidden:FALSE];
            [cardIssuedToTxt     setHidden:FALSE];
            [giftStatusLbl     setHidden:FALSE];
            [cardStatusTxt     setHidden:FALSE];
            [giftValideFromLbl     setHidden:FALSE];
            [giftValidFrom     setHidden:FALSE];
            [giftValideToLbl     setHidden:FALSE];
            [giftValidTo     setHidden:FALSE];
            [amtLabel     setHidden:FALSE];
            [giftAmt     setHidden:FALSE];

            // Coupons page related
            [billValueLabel     setHidden:FALSE];
            [minimumValueText     setHidden:FALSE];
            [maximumValueText     setHidden:FALSE];

            // loyalty related
            [avai_points_label     setHidden:TRUE];
            [avai_points     setHidden:TRUE];
            [recash_label     setHidden:TRUE];
            [recash     setHidden:TRUE];
            
            // otp related
            [generateOtpBackGroundLbl  setHidden:FALSE];
            [generateOtpBtn     setHidden:FALSE];
            [enterOtpTxt     setHidden:FALSE];
            
           // wallet page related labels and tfs should hide here
            [walletPhoneNobl   setHidden:TRUE];
            [checkWalletBalanceBtn   setHidden:TRUE];
            [walletUserFirstNameLbl   setHidden:TRUE];
            [walletUserFirstNameTF   setHidden:TRUE];
            [walletUserLastNameTF   setHidden:TRUE];
            [walletUserHouseNoLbl   setHidden:TRUE];
            [walletUserHouseNoTF   setHidden:TRUE];
            [walletUserLocalityLbl   setHidden:TRUE];
            [walletUserLocalityTF   setHidden:TRUE];
            [walletUserCityLbl   setHidden:TRUE];
            [walletUserCityTF   setHidden:TRUE];
            [walletUserEmailIdLbl   setHidden:TRUE];
            [walletUserEmailIdTF   setHidden:TRUE];
            [walletAmountLbl   setHidden:TRUE];
            [walletAmountValueTF   setHidden:TRUE];
            // upto here added by roja no 29/07/2019....
            
            
            giftNo.text        = @"";
            giftValidFrom.text = @"";
            giftValidTo.text   = @"";
            giftAmt.text       = @"0.0";
            savebtn.tag = 0;
            minimumValueText.text = @"";
            maximumValueText.text = @"";
            cardStatusTxt.text = @"";
            giftID.text = @"";
            phoneNumberText.text =@"";
            
            cardIssuedOnTxt.text = @""; // added by roja on 20/11/2019...
        }
        
        else if (giftView.tag == 2){ // for loyalty selection
            
            amtLabel.text = NSLocalizedString(@"available_cash_", nil);
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                
                if (currentOriention == UIDeviceOrientationLandscapeLeft || currentOriention == UIDeviceOrientationLandscapeRight) {
                }
                else {
                }
                
                giftValideToLbl.textAlignment = NSTextAlignmentCenter;
                
                giftViewHeaderLbl.frame = CGRectMake(0, 0, 680, 60);
                backbutton.frame = CGRectMake( giftViewHeaderLbl.frame.size.width - 70, 10.0, 45.0, 45.0);
                
                
                giftTypeLbl.frame = CGRectMake( 5, 10, (giftViewHeaderLbl.frame.size.width - 40)/4, 35);
                
                //Commented By Bhargav.v as per GUI specification on 16/08/2018...
                //giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 40), 35);
                
                giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 20), 35);
                
                giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
                
                cardNumber.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftTypeLbl.frame.origin.y + giftTypeLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                
                //Frames changed As per latest GUI Specification
                giftNo.frame = CGRectMake( giftType.frame.origin.x, cardNumber.frame.origin.y,(giftType.frame.size.width)/3, giftType.frame.size.height);
                
                phoneNumberText.frame = CGRectMake( giftNo.frame.origin.x + giftNo.frame.size.width + 10, giftNo.frame.origin.y, (giftType.frame.size.width)/2.8,giftType.frame.size.height);
                
                //Added By Bhargav.v on 16/08/2018...
                fetchDataButton.frame = CGRectMake(phoneNumberText.frame.origin.x + phoneNumberText.frame.size.width + 15,phoneNumberText.frame.origin.y,120,35);
                //upto here..
                
                cardID.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardNumber.frame.origin.y + cardNumber.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                giftID.frame = CGRectMake( giftType.frame.origin.x, cardID.frame.origin.y, giftType.frame.size.width, giftType.frame.size.height);
                
                giftIssuedOnLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, cardID.frame.origin.y + cardID.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                cardIssuedOnTxt.frame = CGRectMake( giftType.frame.origin.x, giftIssuedOnLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftIssuedToLbl.textAlignment = NSTextAlignmentCenter;
                giftIssuedToLbl.frame = CGRectMake( cardIssuedOnTxt.frame.origin.x + cardIssuedOnTxt.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width , giftTypeLbl.frame.size.height);
                
                cardIssuedToTxt.frame = CGRectMake( giftID.frame.origin.x + giftID.frame.size.width - giftTypeLbl.frame.size.width, giftIssuedOnLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                
                
                //giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width, giftTypeLbl.frame.origin.y, (giftNo.frame.size.width - 20)/2, 35);
                
                //giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
                
                
                giftValideFromLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftIssuedOnLbl.frame.origin.y + giftIssuedOnLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidFrom.frame = CGRectMake( giftType.frame.origin.x, giftValideFromLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftValideToLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x, giftValideFromLbl.frame.origin.y, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftValidTo.frame = CGRectMake( cardIssuedToTxt.frame.origin.x, giftValideToLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                giftStatusLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftValideToLbl.frame.origin.y + giftValideToLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                cardStatusTxt.frame = CGRectMake( giftType.frame.origin.x, giftStatusLbl.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                avai_points_label.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftStatusLbl.frame.origin.y + giftStatusLbl.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                avai_points.frame = CGRectMake( giftType.frame.origin.x, avai_points_label.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                amtLabel.frame = CGRectMake( giftTypeLbl.frame.origin.x, avai_points_label.frame.origin.y + avai_points_label.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                giftAmt.frame = CGRectMake( giftType.frame.origin.x, amtLabel.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                recash_label.frame = CGRectMake( giftTypeLbl.frame.origin.x, amtLabel.frame.origin.y + amtLabel.frame.size.height + 10, giftTypeLbl.frame.size.width, giftTypeLbl.frame.size.height);
                recash.frame = CGRectMake( giftType.frame.origin.x, recash_label.frame.origin.y, giftIssuedOnLbl.frame.size.width, giftType.frame.size.height);
                
                loyaltyScrollView.frame = CGRectMake( 0, giftViewHeaderLbl.frame.origin.y + giftViewHeaderLbl.frame.size.height, giftViewHeaderLbl.frame.size.width, recash_label.frame.origin.y + recash_label.frame.size.height + 10);
                
                
                generateOtpBackGroundLbl.frame = CGRectMake( giftIssuedToLbl.frame.origin.x + 35, cardStatusTxt.frame.origin.y, cardIssuedToTxt.frame.origin.x + cardIssuedToTxt.frame.size.width - (giftIssuedToLbl.frame.origin.x + 35), loyaltyScrollView.frame.size.height - (cardStatusTxt.frame.origin.y + 10));
                
                
                generateOtpBtn.frame = CGRectMake( generateOtpBackGroundLbl.frame.origin.x + ((generateOtpBackGroundLbl.frame.size.width - 140)/2), generateOtpBackGroundLbl.frame.origin.y + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), 140, 40);
                
                enterOtpTxt.frame = CGRectMake( generateOtpBtn.frame.origin.x, generateOtpBtn.frame.origin.y + generateOtpBtn.frame.size.height + ((generateOtpBackGroundLbl.frame.size.height - 80)/3), generateOtpBtn.frame.size.width, generateOtpBtn.frame.size.height);
                
                
                
                giftOkBtn.frame = CGRectMake( giftTypeLbl.frame.origin.x, loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height, 120, 40);
                giftCancelBtn.frame = CGRectMake( giftOkBtn.frame.origin.x + giftOkBtn.frame.size.width + 20, giftOkBtn.frame.origin.y, giftOkBtn.frame.size.width, giftOkBtn.frame.size.height);
                
                giftView.frame = CGRectMake( (self.view.frame.size.width - giftViewHeaderLbl.frame.size.width)/2, (self.view.frame.size.height - (loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height))/2, giftViewHeaderLbl.frame.size.width, giftOkBtn.frame.origin.y + giftOkBtn.frame.size.height + 10);
                
                [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:giftView andSubViews:YES fontSize:20.0f cornerRadius:0];
                
            }
            else{
                
            }
            
            cardNumber.text = @"Loyalty Id";
            cardID.text = @"Loyalty Code";
            
            //  commented by roja

//            [avai_points_label setHidden:FALSE];
//            [avai_points        setHidden:FALSE];
//            [recash_label       setHidden:FALSE];
//            [recash             setHidden:FALSE];
//
//            [billValueLabel     setHidden:TRUE];
//            [minimumValueText   setHidden:TRUE];
//            [maximumValueText   setHidden:TRUE];
//              upto here commented by roja
            
            [giftScannerBtn     setHidden:FALSE];
            
            
            // added by roja no 29/07/2019
            // Voucher related....
            [cardNumber     setHidden:FALSE];
            [giftNo     setHidden:FALSE];
            [fetchDataButton     setHidden:FALSE];
            [cardID     setHidden:FALSE];
            [giftID     setHidden:FALSE];
            [giftIssuedOnLbl     setHidden:FALSE];
            [cardIssuedOnTxt     setHidden:FALSE];
            [giftIssuedToLbl     setHidden:FALSE];
            [cardIssuedToTxt     setHidden:FALSE];
            [giftStatusLbl     setHidden:FALSE];
            [cardStatusTxt     setHidden:FALSE];
            [giftValideFromLbl     setHidden:FALSE];
            [giftValidFrom     setHidden:FALSE];
            [giftValideToLbl     setHidden:FALSE];
            [giftValidTo     setHidden:FALSE];
            [amtLabel     setHidden:FALSE];
            [giftAmt     setHidden:FALSE];
            
            // Coupon related....
            [billValueLabel     setHidden:TRUE];
            [minimumValueText     setHidden:TRUE];
            [maximumValueText     setHidden:TRUE];
            
        // loyalty related
            [avai_points_label     setHidden:false];
            [avai_points     setHidden:false];
            [recash_label     setHidden:false];
            [recash     setHidden:false];
            
            // otp related
            [generateOtpBackGroundLbl     setHidden:FALSE];
            [generateOtpBtn     setHidden:FALSE];
            [enterOtpTxt     setHidden:FALSE];
            
            // wallet page related labels and tfs should hide here
            [walletPhoneNobl   setHidden:TRUE];
            [checkWalletBalanceBtn   setHidden:TRUE];
            [walletUserFirstNameLbl   setHidden:TRUE];
            [walletUserFirstNameTF   setHidden:TRUE];
            [walletUserLastNameTF   setHidden:TRUE];
            [walletUserHouseNoLbl   setHidden:TRUE];
            [walletUserHouseNoTF   setHidden:TRUE];
            [walletUserLocalityLbl   setHidden:TRUE];
            [walletUserLocalityTF   setHidden:TRUE];
            [walletUserCityLbl   setHidden:TRUE];
            [walletUserCityTF   setHidden:TRUE];
            [walletUserEmailIdLbl   setHidden:TRUE];
            [walletUserEmailIdTF   setHidden:TRUE];
            [walletAmountLbl   setHidden:TRUE];
            [walletAmountValueTF   setHidden:TRUE];
            // upto here added by roja no 29/07/2019
            
            phoneNumberText.hidden = NO;
            if ([custmerPhNum.text length] != 0) {
                phoneNumberText.text = custmerPhNum.text;
                [self textChange:nil];
            }
            else{
                phoneNumberText.text =@"";
            }
            
            giftNo.text        = @"";
            giftValidFrom.text = @"";
            giftValidTo.text   = @"";
            giftAmt.text       = @"0.0";
            avai_points.text   = @"";
            recash.text        = @"0.0";
            minimumValueText.text = @"";
            maximumValueText.text = @"";
            cardStatusTxt.text = @"";
            giftID.text = @"";
            cardIssuedOnTxt.text = @""; // added by roja on 20/11/2019...

        }
        // added by roja on 29/07/2019...
        else {   // for Wallet selection
            
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
                

                giftViewHeaderLbl.frame = CGRectMake(0, 0, 680, 60);
                backbutton.frame = CGRectMake( giftViewHeaderLbl.frame.size.width - 70, 10.0, 45.0, 45.0);
                
                giftTypeLbl.frame = CGRectMake( 5, 10, (giftViewHeaderLbl.frame.size.width - 40)/4, 35);
                
                giftType.frame = CGRectMake( giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 20, giftTypeLbl.frame.origin.y, (giftViewHeaderLbl.frame.size.width - 20) - (giftTypeLbl.frame.origin.x + giftTypeLbl.frame.size.width + 20), 35);
                
                giftTypeBtn.frame = CGRectMake( (giftType.frame.origin.x + giftType.frame.size.width) - (giftType.frame.size.height + 2),   giftType.frame.origin.y - 6, 50, 50);
           
                walletPhoneNobl.frame = CGRectMake( giftTypeLbl.frame.origin.x, giftType.frame.origin.y + giftType.frame.size.height + 10, (giftType.frame.size.width)/2.8, giftType.frame.size.height);
                
                phoneNumberText.frame = CGRectMake( walletPhoneNobl.frame.origin.x + walletPhoneNobl.frame.size.width + 10, walletPhoneNobl.frame.origin.y, (giftType.frame.size.width)/2 - 20, giftType.frame.size.height);

                checkWalletBalanceBtn.frame = CGRectMake(phoneNumberText.frame.origin.x + phoneNumberText.frame.size.width + 80, phoneNumberText.frame.origin.y, 170, 35);
               
                walletUserFirstNameLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, walletPhoneNobl.frame.origin.y + walletPhoneNobl.frame.size.height + 10, walletPhoneNobl.frame.size.width, giftType.frame.size.height);
                
                walletUserFirstNameTF.frame = CGRectMake( walletUserFirstNameLbl.frame.origin.x + walletUserFirstNameLbl.frame.size.width + 10, walletUserFirstNameLbl.frame.origin.y, (phoneNumberText.frame.size.width - 10), giftType.frame.size.height);
                
                walletUserLastNameTF.frame = CGRectMake( walletUserFirstNameTF.frame.origin.x + walletUserFirstNameTF.frame.size.width + 5, walletUserFirstNameLbl.frame.origin.y, walletUserFirstNameTF.frame.size.width, giftType.frame.size.height);

                walletUserHouseNoLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, walletUserFirstNameLbl.frame.origin.y + walletUserFirstNameLbl.frame.size.height + 10, walletUserFirstNameLbl.frame.size.width, giftType.frame.size.height);
                
                walletUserHouseNoTF.frame = CGRectMake( walletUserHouseNoLbl.frame.origin.x + walletUserHouseNoLbl.frame.size.width + 10, walletUserHouseNoLbl.frame.origin.y, 220 , giftType.frame.size.height);
                
                walletUserLocalityLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, walletUserHouseNoLbl.frame.origin.y + walletUserHouseNoLbl.frame.size.height +10, walletUserHouseNoLbl.frame.size.width, giftType.frame.size.height);
                
                walletUserLocalityTF.frame = CGRectMake( walletUserLocalityLbl.frame.origin.x + walletUserLocalityLbl.frame.size.width + 10, walletUserLocalityLbl.frame.origin.y, walletUserHouseNoTF.frame.size.width, giftType.frame.size.height);
                
                walletUserCityLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, walletUserLocalityLbl.frame.origin.y + walletUserLocalityLbl.frame.size.height +10,  walletUserLocalityLbl.frame.size.width, giftType.frame.size.height);
                
                walletUserCityTF.frame = CGRectMake( walletUserCityLbl.frame.origin.x + walletUserCityLbl.frame.size.width + 10, walletUserCityLbl.frame.origin.y, walletUserHouseNoTF.frame.size.width, giftType.frame.size.height);
                
                walletUserEmailIdLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, walletUserCityLbl.frame.origin.y + walletUserCityLbl.frame.size.height +1, walletUserCityLbl.frame.size.width, giftType.frame.size.height);
                
                walletUserEmailIdTF.frame = CGRectMake( walletUserEmailIdLbl.frame.origin.x + walletUserEmailIdLbl.frame.size.width + 10, walletUserEmailIdLbl.frame.origin.y, walletUserHouseNoTF.frame.size.width, giftType.frame.size.height);
                
                walletAmountLbl.frame = CGRectMake( giftTypeLbl.frame.origin.x, walletUserEmailIdLbl.frame.origin.y + walletUserEmailIdLbl.frame.size.height +10, walletUserEmailIdLbl.frame.size.width, giftType.frame.size.height);
                
                walletAmountValueTF.frame = CGRectMake( walletAmountLbl.frame.origin.x + walletAmountLbl.frame.size.width + 10, walletAmountLbl.frame.origin.y, walletUserHouseNoTF.frame.size.width, giftType.frame.size.height);
                
                
                loyaltyScrollView.frame = CGRectMake( 0, giftViewHeaderLbl.frame.origin.y + giftViewHeaderLbl.frame.size.height, giftViewHeaderLbl.frame.size.width, walletAmountValueTF.frame.origin.y + walletAmountValueTF.frame.size.height + 10);
                
                giftOkBtn.frame = CGRectMake( giftTypeLbl.frame.origin.x, loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height, 120, 40);
                giftCancelBtn.frame = CGRectMake( giftOkBtn.frame.origin.x + giftOkBtn.frame.size.width + 20, giftOkBtn.frame.origin.y, giftOkBtn.frame.size.width, giftOkBtn.frame.size.height);
                
                giftView.frame = CGRectMake( (self.view.frame.size.width - giftViewHeaderLbl.frame.size.width)/2, (self.view.frame.size.height - (loyaltyScrollView.frame.origin.y + loyaltyScrollView.frame.size.height))/2, giftViewHeaderLbl.frame.size.width, giftOkBtn.frame.origin.y + giftOkBtn.frame.size.height + 10);
                
                [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:giftView andSubViews:YES fontSize:20.0f cornerRadius:0];
                
            }
         
            
         
            // added by roja no 29/07/2019.....
            // Voucher related....
            [cardNumber     setHidden:TRUE];
            [giftNo     setHidden:TRUE];
            [fetchDataButton     setHidden:TRUE];
            [cardID     setHidden:TRUE];
            [giftID     setHidden:TRUE];
            [giftIssuedOnLbl     setHidden:TRUE];
            [cardIssuedOnTxt     setHidden:TRUE];
            [giftIssuedToLbl     setHidden:TRUE];
            [cardIssuedToTxt     setHidden:TRUE];
            [giftStatusLbl     setHidden:TRUE];
            [cardStatusTxt     setHidden:TRUE];
            [giftValideFromLbl     setHidden:TRUE];
            [giftValidFrom     setHidden:TRUE];
            [giftValideToLbl     setHidden:TRUE];
            [giftValidTo     setHidden:TRUE];
            [amtLabel     setHidden:TRUE];
            [giftAmt     setHidden:TRUE];
            
            // Coupon related....
            [billValueLabel     setHidden:TRUE];
            [minimumValueText     setHidden:TRUE];
            [maximumValueText     setHidden:TRUE];
            
            // loyalty related
            [avai_points_label     setHidden:TRUE];
            [avai_points     setHidden:TRUE];
            [recash_label     setHidden:TRUE];
            [recash     setHidden:TRUE];
            
            // otp related
            [generateOtpBackGroundLbl     setHidden:true];
            [generateOtpBtn     setHidden:true];
            [enterOtpTxt     setHidden:true];
            
            // wallet page related labels and TF's should show here
            [walletPhoneNobl   setHidden:false];
            [checkWalletBalanceBtn   setHidden:false];
            [walletUserFirstNameLbl   setHidden:false];
            [walletUserFirstNameTF   setHidden:false];
            [walletUserLastNameTF   setHidden:false];
            [walletUserHouseNoLbl   setHidden:false];
            [walletUserHouseNoTF   setHidden:false];
            [walletUserLocalityLbl   setHidden:false];
            [walletUserLocalityTF   setHidden:false];
            [walletUserCityLbl   setHidden:false];
            [walletUserCityTF   setHidden:false];
            [walletUserEmailIdLbl   setHidden:false];
            [walletUserEmailIdTF   setHidden:false];
            [walletAmountLbl   setHidden:false];
            [walletAmountValueTF   setHidden:false];
            // upto here added by roja no 29/07/2019.....
            
            [giftScannerBtn  setHidden:true];
            giftNo.text        = @"";
            giftValidFrom.text = @"";
            giftValidTo.text   = @"";
            giftAmt.text       = @"0.0";
            savebtn.tag = 0;
            minimumValueText.text = @"";
            maximumValueText.text = @"";
            cardStatusTxt.text = @"";
            giftID.text = @"";
            phoneNumberText.text =@"";
            cardIssuedOnTxt.text = @""; // added by roja on 20/11/2019...

            walletUserLastNameTF.text = @"";
            walletUserFirstNameTF.text = @"";
            walletUserEmailIdTF.text = @"";
            walletUserCityTF.text = @"";
            walletUserLocalityTF.text = @"";
            walletAmountValueTF.text =@"";
            walletUserHouseNoTF.text = @"";
            
        }
        // upto here added by roja on 29/07/2019...
        
        

    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  Instead of making a service call dynamically we are calling it manually by using a Button action..
 * @date         16/08/2018
 * @method       fetchCustomerLoyaltyData
 * @author       Bhargav.v
 * @param        -------
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)fetchCustomerLoyaltyData {
    
    @try {
        
        if(giftSearchBtn == nil) {
            giftSearchBtn = [[UIButton alloc] init];
            giftSearchBtn.tag = 3;
        }
        
        if ([giftNo.text length] == 0  && [giftID.text length] == 0 && [phoneNumberText.text length] == 0) {
            
            float y_axis = giftView.frame.origin.y + giftView.frame.size.height - 200;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"Please enter the Voucher/Coupon code before fetching",nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:400 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
            return;
        }
        else {
            
            if (giftNo.text.length >= 5) {
                [giftNo resignFirstResponder];
                giftID.text = nil;
                //[[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
                if (![giftVoucherArr containsObject:giftNo.text] && [giftID.text length] == 0) {
                    [self giftContinue:(UIButton *)giftSearchBtn];
                }
                else {
                    UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [validalert show];
                }
            }
            else  if (giftID.text.length == 16) {
                [giftID resignFirstResponder];
                giftNo.text = nil;
                //[[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
                if (![giftVoucherArr containsObject:giftID.text] && [giftNo.text length] == 0) {
                    [self giftContinue:(UIButton *)giftSearchBtn];
                }
                else {
                    UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [validalert show];
                }
            }
            
            else if (phoneNumberText.text.length == 10) {
                [phoneNumberText resignFirstResponder];
                giftNo.text = nil;
                //[[NSNotificationCenter defaultCenter]removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
                if (![giftVoucherArr containsObject:giftID.text] && [giftNo.text length] == 0) {
                    [self giftContinue:(UIButton *)giftSearchBtn];
                }
                else {
                    UIAlertView * validalert = [[UIAlertView alloc] initWithTitle:@"Voucher/Coupon Already Used to This Bill" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [validalert show];
                }
            }
            else{
                
                float y_axis = giftView.frame.origin.y + giftView.frame.size.height - 200;
                
                NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"Please enter the Voucher/Coupon code before fetching",nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:400 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
                return;
            }
        }
    }
    @catch(NSException * exception){
        
    }
    @finally {
        
    }
}



/**
 * @description
 * @date         29/07/2019
 * @method       fetchCustomerLoyaltyData
 * @author       Roja
 * @param        -------
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

-(void)getCustomerWalletDetails{
    
    //Play Audio for Button touch......
    AudioServicesPlaySystemSound(soundFileObject);
    //    HUD.labelText
    isWalletBtnSelected = false;
    
    if([phoneNumberText.text length] == 0){
        
        float y_position  = giftView.frame.origin.y + giftView.frame.size.height - 200;
        
        [self displayAlertMessage:@"Please enter mobile number" horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
    }
    else if([phoneNumberText.text length] < 10){
        
        float y_position  = giftView.frame.origin.y + giftView.frame.size.height - 200;
        
        [self displayAlertMessage:@"Please enter valid mobile number" horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
    }
    else {
        
        NSArray * keys = @[REQUEST_HEADER, @"phoneNumber"]; //LOCATIONS
        NSArray * objects = @[[RequestHeader getRequestHeader], phoneNumberText.text];//presentLocation
        
        NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
        
        NSError * err_;
        NSData * jsonData_ = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err_];
        NSString * requestString = [[NSString alloc] initWithData:jsonData_ encoding:NSUTF8StringEncoding];
        
        WebServiceController * service = [[WebServiceController alloc] init];
        service.customerLedgerService = self;
        [service getCustomerWalletBalanceDetails:requestString];
    }

}

/**
 * @description
 * @date         29/07/2019
 * @method       getCustomerWalletBalanceDetailsSuccessResponse:-
 * @author       Roja
 * @param        NSString
 * @param
 * @return
 * @verified By
 * @verified On
 *
 */

- (void)getCustomerWalletBalanceDetailsSuccessResponse:(NSDictionary *)successDictionary{
    
    @try {
        isCustomerDetailsCall = false;
        isWalletBtnSelected = true;
        
        walletAmountValueTF.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[successDictionary valueForKey:@"amountBalance"] defaultReturn:0] floatValue]];
                                    
        [self getCustomerDetailsForOffers];
        
    } @catch (NSException *exception) {
        
    } @finally {
//        [HUD setHidden:YES];
    }
}
/**
 * @description
 * @date         29/07/2019
 * @method       getCustomerWalletBalanceErrorResponse:-
 * @author       Roja
 * @param        NSString
 * @param
 * @return      void
 * @verified By
 * @verified On
 *
 */

- (void)getCustomerWalletBalanceErrorResponse:(NSString *)failureString{
    
    @try {
        walletAmountValueTF.text = @"";
        isWalletBtnSelected = false;
        
        float y_position  = giftView.frame.origin.y + giftView.frame.size.height - 200;
        
        [self displayAlertMessage:failureString horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];

    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method we change the frames based on custom selected payment coupon type....
 * @date         29/12/2017....
 * @method       showOtpView:--
 * @author       Srinivasulu
 * @param
 * @param        UIButton
 * @param
 *
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showOtpView:(UIButton *)sender{
    
    
}

/**
 * @description  in this method we change the frames based on custom selected payment coupon type....
 * @date         29/12/2017....
 * @method       showOtpView:--
 * @author       Srinivasulu
 * @param
 * @param        UIButton
 * @param
 *
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)validateUserEnteredOtp:(UIButton *)sender{
    
    @try {
        
        [self valideCustomerOtp];
        
    } @catch (NSException *exception) {
        
    }
}


#pragma -mark service call used  in the GiftVouchers, GiftCoupons && LoylityCard

/**
 * @description  in this method we calling generate otp servives....
 * @date         29/12/2017....
 * @method       generatedCustomerOtp
 * @author
 * @param
 * @param        UIButton
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)generatedCustomerOtp{
    
    @try {
        
        if( (!(phoneNumberText.text).length || (phoneNumberText.text).length != 10) && (!(custmerPhNum.text).length || (custmerPhNum.text).length != 10)){
            
            //            if( (![phoneNumberText.text length]) && (![custmerPhNum.text length])){
            
            float y_position  = giftView.frame.origin.y + giftView.frame.size.height - 200;
            
            
            NSString * mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_valide_phone_no", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 350)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:350 contentHeight:60  isSoundRequired:YES timming:2.0 noOfLines:2];
            
            return;
        }
        //showing the hud....
        [HUD setHidden:NO];
        
        //text format of the HUD...
        [HUD setLabelText:NSLocalizedString(@"please_wait..", nil)];
        
        NSString * mobileNoStr = phoneNumberText.text;
        
        if((custmerPhNum.text).length && !mobileNoStr.length)
            mobileNoStr = custmerPhNum.text;
        
        NSMutableDictionary * generateOtpDetailsDic = [[NSMutableDictionary alloc] init];
        
        //setting requestHeader....
        generateOtpDetailsDic[REQUEST_HEADER] = [RequestHeader getRequestHeader];
        
        //setting for phoneNumber....
        generateOtpDetailsDic[CUSTOMER_PHONE] = mobileNoStr;
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:generateOtpDetailsDic options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * webServiceController = [WebServiceController new];
        webServiceController.customerServiceDelegate = self;
        [webServiceController generateCustomerOtp:quoteRequestJsonString];
        
    } @catch (NSException * exception) {
        
        [HUD setHidden:YES];
        
        float y_axis = self.view.frame.size.height - 120;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"unable_to_process_your_request", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
        
        NSLog(@"----exception in Service Call---%@",exception);
    }
}

/**
 * @description  in this method we calling validate otp servives....
 * @date         29/12/2017....
 * @method       valideCustomerOtp
 * @author
 * @param
 * @param        UIButton
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)valideCustomerOtp{
    
    @try {
        
        //showing the hud....
        [HUD setHidden:NO];
        
        //text format of the HUD...
        [HUD setLabelText:NSLocalizedString(@"please_wait..", nil)];
        
        
        NSMutableDictionary  * valideOtpDetailsDic = [[NSMutableDictionary alloc] init];
        
        //setting requestHeader....
        valideOtpDetailsDic[REQUEST_HEADER] = [RequestHeader getRequestHeader];
        
        //                private String otpCode;
        //                private String phone=null;
        //setting for phoneNumber....
        valideOtpDetailsDic[CUSTOMER_PHONE] = phoneNumberText.text;
        valideOtpDetailsDic[OTP_CODE] = enterOtpTxt.text;
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:valideOtpDetailsDic options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * webServiceController = [WebServiceController new];
        webServiceController.customerServiceDelegate = self;
        [webServiceController validateCustomerOtp:quoteRequestJsonString];
        
    } @catch (NSException * exception) {
        
        [HUD setHidden:YES];
        
        float y_axis = self.view.frame.size.height - 120;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"unable_to_process_your_request", nil)];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
        
        NSLog(@"----exception in Service Call---%@",exception);
    }
}

#pragma -mark start service call response handling  in the GiftVouchers, GiftCoupons && LoylityCard

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       generateOtpForCustomerSuccessReponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSDictionary
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)generateOtpForCustomerSuccessReponse:(NSDictionary *)sucessDictionary{
    @try {
        
        generateOtpBtn.tag = 4;
        enterOtpTxt.tag = 4;
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       generateOtpForCustomerErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)generateOtpForCustomerErrorResponse:(NSString *)error{
    @try {
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       validateOtpForCustomerSuccessResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSDictionary
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)validateOtpForCustomerSuccessResponse:(NSDictionary *)sucessDictionary{
    @try {
        
        generateOtpBtn.tag = 2;
        enterOtpTxt.tag = 4;
        
        // added by roja on 28-09-2018..
        generateOtpBtn.userInteractionEnabled = YES;
        enterOtpTxt.userInteractionEnabled = YES;
        generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
        
        UIButton * btn = [[UIButton alloc] init];
        btn.tag = 1;
        [self giftContinue:btn];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       validateForCustomerErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)validateForCustomerErrorResponse:(NSString *)error{
    @try {
        
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + (2 * BillField.frame.size.height) ;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       validateForCustomerErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getGiftVoucherDetailsSuccessReponse:(NSDictionary *)sucessDictionary{
    
    @try {
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:sucessDictionary options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        [self getVoucherDetailsHandler:quoteRequestJsonString];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  in this method will be executed when error resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       getGiftVoucherDetailsErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getGiftVoucherDetailsErrorResponse:(NSString*)error{
    
    @try {
        
        
        float y_axis = self.view.frame.size.height - 200;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 600)/2   verticalAxis:y_axis  msgType:@""  conentWidth:600 contentHeight:80  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}

/**
 * @description  in this method will be executed when success resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       getGiftCouponDetailsSuccessReponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getGiftCouponDetailsSuccessReponse:(NSDictionary*)sucessDictionary{
    
    @try {
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:sucessDictionary options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        [self getCouponDetailsHandler:quoteRequestJsonString];
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  in this method will be executed when error resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       getGiftCouponDetailsErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getGiftCouponDetailsErrorResponse:(NSString*)error{
    
    @try {
        
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:600 contentHeight:80  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}

/**
 * @description  in this method will be executed when success resposne is received from service for loyality service call....
 * @date         29/12/2017....
 * @method       getLoyaltycardDetailsSuccessReponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getLoyaltycardDetailsSuccessReponse:(NSDictionary*)sucessDictionary{
    
    @try {
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:sucessDictionary options:0 error:&err];
        NSString * quoteRequestJsonString   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        [self getLoyalcardDetailsHandler:quoteRequestJsonString];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

/**
 * @description  in this method will be executed when error resposne is received from service for gernerateOtp service call....
 * @date         29/12/2017....
 * @method       getLoyaltycardDetailsErrorResponse:--
 * @author       Srinivasulu
 * @param
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getLoyaltycardDetailsErrorResponse:(NSString*)error{
    
    @try {
        
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",error];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:600 contentHeight:80  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
}

/**
 * @description  in this method success response for giftvouchers service call is handling....
 * @method       getVoucherDetailsHandler:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 29/12/2017....
 * @reason       added the comments, exception handling and constants....
 *
 * @verified By
 * @verified On
 *
 */

- (void) getVoucherDetailsHandler: (NSString *) value {
    
    
    @try {
        [HUD setHidden:YES];
        
        // Handle errors
        if([value isKindOfClass:[NSError class]]) {
            NSLog(@"%@", value);
            return;
        }
        
        
        
        // Do something with the NSString* result
        NSString* result = (NSString*)value;
        NSError *e;
        NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [result dataUsingEncoding:NSUTF8StringEncoding]
                                                             options: NSJSONReadingMutableContainers
                                                               error: &e];
        if ([[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_CODE] isEqualToString:@"0"]) {
            
            giftClaimStatus = [[JSON valueForKey:CLAIM_STATUS] boolValue];
            if (!giftClaimStatus) {
                if (((NSArray *)[JSON valueForKey:GIFT_VOUCHER_DETAILS]).count>0) {
                    
                    NSDictionary *details = [JSON valueForKey:GIFT_VOUCHER_DETAILS];
                    
                    giftValidFrom.text = [[details valueForKey:CREATED_ON] componentsSeparatedByString:@" "][0];
                    giftValidTo.text   = [[details valueForKey:EXPIRYDATE] componentsSeparatedByString:@" "][0];
                    giftAmt.text       = [[details valueForKey:UNIT_CASH_VALUE] stringValue];
                    
                    cardStatusTxt.text = [details valueForKey:STATUS];
                    
                    enterOtpTxt.tag = 2;
                    generateOtpBtn.tag  = 2;
                    generateOtpBtn.userInteractionEnabled =  YES;
                    enterOtpTxt.userInteractionEnabled = YES;
                    generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
                    
                    
                    if(![[self checkGivenValueIsNullOrNil:[details valueForKey:OTP_REQUIREMENT] defaultReturn:@"0"] boolValue]){
                        
                        enterOtpTxt.tag = 4;
                        generateOtpBtn.tag  = 2;
                        generateOtpBtn.userInteractionEnabled =  NO;
                        enterOtpTxt.userInteractionEnabled = NO;
                        generateOtpBtn.titleLabel.textColor = [UIColor lightGrayColor];
                    }
                    
                    
                }
                if (((NSArray *)[JSON valueForKey:GIFT_VOUCHERS]).count>0) {
                    NSDictionary *details = [JSON valueForKey:GIFT_VOUCHERS];
                    giftID.text = [details valueForKey:VOUCHER_CODE];
                    if (!([[details valueForKey:VOUCHER_ID] isKindOfClass:[NSNull class]])) {
                        giftNo.text = [details valueForKey:VOUCHER_ID];
                    }
                }
                
            }
            else {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Voucher Already Used" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
        }
        else {
            
            UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Invalid" message:[NSString stringWithFormat:@"%@",[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE]]  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [validalert show];
            
        }
        
    } @catch (NSException *exception) {
        
        isItemScanned = false;
        NSLog(@"----exception in BillingHome page -- in getCouponDeatilsHandler---");
        NSLog(@"----%@",exception);
        
        
        
    } @finally {
        //added by Srinivasulu on 29/12/2017....
        isItemScanned = false;
        //upto here on 29/12/2017....
    }
    
}

/**
 * @description  in this method success response for giftvouchers service call is handling....
 * @method       getCouponDetailsHandler:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 29/12/2017....
 * @reason       added the comments, exception handling and constants....
 *
 * @verified By
 * @verified On
 *
 */

-(void)getCouponDetailsHandler:(NSString *)response {
    
    
    //added by Srinivasulu on 19/01/2017....added exception handling....
    @try {
        [HUD setHidden:YES];
        
        
        // Handle errors
        if([response isKindOfClass:[NSError class]]) {
            NSLog(@"%@", response);
            return;
        }
        
        
        // Do something with the NSString* result
        NSString* result = (NSString*)response;
        NSError *e;
        NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [result dataUsingEncoding:NSUTF8StringEncoding]  options: NSJSONReadingMutableContainers  error: &e];
        
        
        if ([[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_CODE] isEqualToString:@"0"]) {
            giftClaimStatus = [[JSON valueForKey:CLAIM_STATUS] boolValue];
            
            //            if (!giftClaimStatus) {   // commented by roja on 20/11/2019...

                if (((NSArray *)[JSON valueForKey:COUPON_DETAILS]).count>0) {
                    
                    NSDictionary *couponDetails = [JSON valueForKey:COUPON];
                    giftID.text = [couponDetails valueForKey:COUPON_CODE];
                    giftNo.text = [couponDetails valueForKey:COUPON_ID];
                    
                    
                    NSDictionary *details = [JSON valueForKey:COUPON_DETAILS];
                    
                    giftValidFrom.text = [[details valueForKey:CREATED_ON] componentsSeparatedByString:@" "][0];
                    giftValidTo.text   = [[details valueForKey:EXPIRYDATE] componentsSeparatedByString:@" "][0];
                    
                    giftAmt.text     = [[details valueForKey:UNIT_CASH_VALUE] stringValue]; // flat discount
                    
                    
                    //added by roja on 28-09-2018...
                    minimumValueText.text = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[details valueForKey:MIN_SALE_AMOUNT] defaultReturn:@"0"] floatValue]];
                    
//                    maximumValueText.text = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[details valueForKey:MAX_DISCOUNT_AMOUNT] defaultReturn:@"0"] floatValue]];// commented by roja on 20/11/2019...

                    // added by roja on 20/11/2019...
                    maximumValueText.text = [NSString stringWithFormat:@"%.2f",[[self checkGivenValueIsNullOrNil:[details valueForKey:@"max_sale_amount"] defaultReturn:@"0"] floatValue]];
                    
                    float maxDiscountAmt = 0;
                    maxDiscountAmt = [[self checkGivenValueIsNullOrNil:[details valueForKey:MAX_DISCOUNT_AMOUNT] defaultReturn:@"0"] floatValue];
                    //Upto here added by roja on 20/11/2019...

                    
                    cardStatusTxt.text = [details valueForKey:STATUS];
                    
                    //added by Srinivasulu on 17/10/2018....
                    couponUnitCashPercentageValue = [[self checkGivenValueIsNullOrNil:[details valueForKey:UNIT_CASH_VALUE] defaultReturn:@"0"] floatValue];
                    
                    giftAmt.tag = 2;
                    if([[details valueForKey:DISCOUNT_TYPE] caseInsensitiveCompare:Percentage] == NSOrderedSame){
                        
                        giftAmt.tag = 4;
                        
                        // added by roja...
                        giftAmt.text = [NSString stringWithFormat:@"%.2f",([netPayLblVal.text floatValue] * couponUnitCashPercentageValue / 100)];

                        //([maximumValueText.text  floatValue] > 0)
                        if(maxDiscountAmt > 0){// means there is a max coupon value limit //condition added by roja...
                            
                            if(([netPayLblVal.text floatValue] * couponUnitCashPercentageValue / 100) <= maxDiscountAmt){ //[maximumValueText.text  floatValue]
                                
                                giftAmt.text = [NSString stringWithFormat:@"%.2f",([netPayLblVal.text floatValue] * couponUnitCashPercentageValue / 100)];
                            }
                            else{
                                
                                giftAmt.text = [NSString stringWithFormat:@"%.2f",maxDiscountAmt] ; //maximumValueText.text
                                
                                
                                // added by roja on 20/11/2019...
                                float y_position =  giftView.frame.origin.y + giftView.frame.size.height - 300;

                                NSString * alertMsg = [NSString stringWithFormat:@"%.2f%@",maxDiscountAmt,@" is the maximum discount amount for the applied coupon"];
                                
                                [self displayAlertMessage:alertMsg horizontialAxis:(self.view.frame.size.width - 420)/2   verticalAxis:y_position  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:80  isSoundRequired:YES timming:2.0 noOfLines:2];
                                // added by roja on 20/11/2019...
                            }
                        }
                    }
                    
                    //upto here on 17/10/2018....
                    
                    
                    
                    enterOtpTxt.tag = 2;
                    generateOtpBtn.tag  = 2;
                    generateOtpBtn.userInteractionEnabled =  YES;
                    enterOtpTxt.userInteractionEnabled = YES;
                    generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
                    
                    
                    if(![[self checkGivenValueIsNullOrNil:[details valueForKey:OTP_REQUIREMENT] defaultReturn:@"0"] boolValue]){
                        
                        enterOtpTxt.tag = 4;
                        generateOtpBtn.tag  = 2;
                        generateOtpBtn.userInteractionEnabled =  NO;
                        enterOtpTxt.userInteractionEnabled = NO;
                        generateOtpBtn.titleLabel.textColor = [UIColor lightGrayColor];
                    }
                }
                if (((NSArray *)[JSON valueForKey:GIFT_COUPONS]).count>0) {
                    NSDictionary *details = [JSON valueForKey:GIFT_COUPONS];
                    giftID.text = [details valueForKey:COUPON_CODE];
                    if (!([[details valueForKey:COUPON_ID] isKindOfClass:[NSNull class]])) {
                        giftNo.text = [details valueForKey:COUPON_ID];
                    }
                }
                
                //added by Roja on 17/10/2018....
                if( [[JSON allKeys] containsObject:CUSTOMER_GIFT_COUPONS_LIST] && !([[JSON valueForKey:CUSTOMER_GIFT_COUPONS_LIST] isKindOfClass:[NSNull class]])){
                    
                    for(NSDictionary *customerGiftCouponsDic in [JSON valueForKey:CUSTOMER_GIFT_COUPONS_LIST]){
                        
                        phoneNumberText.text = [NSString stringWithFormat:@"%@",[self checkGivenValueIsNullOrNil:[customerGiftCouponsDic valueForKey:CUSTOMER_MOBILE] defaultReturn:@""]];
                        
                        
                        cardIssuedToTxt.text = [NSString stringWithFormat:@"%@",[self checkGivenValueIsNullOrNil:[customerGiftCouponsDic valueForKey:ISSUED_TO] defaultReturn:@""]];
                        
                        cardIssuedOnTxt.text = [NSString stringWithFormat:@"%@",[self checkGivenValueIsNullOrNil:[customerGiftCouponsDic[ISSUE_DATE] componentsSeparatedByString:@" "][0] defaultReturn:@""]];
                        
                        break;
                    }
                }
                //upto here on 17/10/2018....
                
                // commented by roja on 20/11/2019...
//            }
//            else {
//                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Coupon Already Used" message:nil  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
//                [validalert show];
//            }
                // Upto here commented by roja on 20/11/2019...

        }
        else {
            
            if ((giftValidFrom.text).length == 0 && (giftValidTo.text).length == 0) {
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Invalid" message:[NSString stringWithFormat:@"%@",[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE]]  delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
            }
        }
    } @catch (NSException *exception) {
        NSLog(@"----exception in BillingHome page -- in getCouponDeatilsHandler---");
        NSLog(@"----%@",exception);
        
    } @finally {
        //added by Srinivasulu on 19/01/2017....
        isItemScanned = false;
        //upto here on 19/01/2017....
    }
}

/**
 * @description  in this method success response for giftvouchers service call is handling....
 * @method       getCouponDetailsHandler:--
 * @author
 * @param        NSString
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By  Srinivasulu on 29/12/2017....
 * @reason       added the comments, exception handling and constants....
 *
 * @verified By
 * @verified On
 *
 */

- (void) getLoyalcardDetailsHandler: (NSString *) value {
    
    
    //added by Srinivasulu on 19/01/2017........added exception handling....   
    @try {
        
        [HUD setHidden:YES];
        
        // Handle errors
        if([value isKindOfClass:[NSError class]]) {
            NSLog(@"%@", value);
            return;
        }
        
        // Handle faults
        //    if([value isKindOfClass:[SoapFault class]]) {
        //        NSLog(@"%@", value);
        //
        //        UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Loyalty Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        //        [validalert show];
        //        [validalert release];
        //        return;
        //    }
        
        
        // Do something with the NSString* result
        NSString* result = (NSString*)value;
        NSError *e;
        NSDictionary *JSON = [NSJSONSerialization JSONObjectWithData: [result dataUsingEncoding:NSUTF8StringEncoding]
                                                             options: NSJSONReadingMutableContainers
                                                               error: &e];
        //NSArray *list = [result componentsSeparatedByString:@"#"];
        //[list removeObjectAtIndex:0];
        
        [HUD setHidden:YES];
        
        
        if ([[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_CODE] intValue]==0) {
            
            NSDictionary *loyaltyDic = [JSON valueForKey:CUSTOMER_LOYALTY_CARDS];
            
            if (![[NSString stringWithFormat:@"%@",loyaltyDic[LOYALITY_CARD_NUMBER]] isEqualToString:@"<null>"]) {
                
                //giftNo.text = nil;
                
                    if ([[NSString stringWithFormat:@"%@",loyaltyDic[cash]] isEqualToString:@"<null>"]) {
                        
                        giftAmt.text = @"0.0";
                        
                    }
                    else {
                        giftAmt.text = [NSString stringWithFormat:@"%@",loyaltyDic[cash]];
                        
                    }
                    //   giftAmt.text       = [NSString stringWithFormat:@"%.2f",[[JSON objectForKey:@"cash"] floatValue]];
                    
                    if ([[NSString stringWithFormat:@"%@",loyaltyDic[POINTS_REMAINING]] isEqualToString:@"<null>"]) {
                        
                        avai_points.text = @"0.0";
                        
                    }
                    else {
                        avai_points.text = [NSString stringWithFormat:@"%@",loyaltyDic[POINTS_REMAINING]];
                        
                    }
                    
                    giftNo.text = [loyaltyDic valueForKey:CARD_ID];
                    giftID.text = [loyaltyDic valueForKey:LOYALITY_CARD_NUMBER];
                    
                    //commented by Srinivasulu on 28/12/2017....
                    
                    //                [[NSNotificationCenter defaultCenter] removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
                    phoneNumberText.text = [self checkGivenValueIsNullOrNil:[loyaltyDic valueForKey:PHONE_NUM] defaultReturn:@""];
                    //                [self generatedCustomerOtp];

                    //upto here on 28/12/2017....
                    
                    SystemSoundID    soundFileObject1;
                    NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep" withExtension: @"mp3"];
                    self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                    AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                    AudioServicesPlaySystemSound (soundFileObject1);
                    
                    // need too enter otp
                    enterOtpTxt.tag = 2;
                    generateOtpBtn.tag  = 2;
                    generateOtpBtn.userInteractionEnabled =  YES;
                    enterOtpTxt.userInteractionEnabled = YES;
                    generateOtpBtn.titleLabel.textColor = [UIColor whiteColor];
                    
                    if(![[self checkGivenValueIsNullOrNil:[loyaltyDic valueForKey:OTP_REQUIREMENT] defaultReturn:@"0"] boolValue]){ // no need to enter otp
                        
                        enterOtpTxt.tag = 4;
                        generateOtpBtn.tag  = 2;
                        generateOtpBtn.userInteractionEnabled =  NO;
                        enterOtpTxt.userInteractionEnabled = NO;
                        generateOtpBtn.titleLabel.textColor = [UIColor lightGrayColor];
                    }
                    
                    giftValidFrom.text = [NSString stringWithFormat:@"%@",[loyaltyDic[VALID_FROM] componentsSeparatedByString:@" "][0]];
                    giftValidTo.text   = [NSString stringWithFormat:@"%@",[loyaltyDic[VALID_TO] componentsSeparatedByString:@" "][0]];
                
                    // added by roja on 20/11/2019....
                    minRedeemPoints = [[self checkGivenValueIsNullOrNil:[loyaltyDic valueForKey:@"minRedeemPoints"] defaultReturn:@"0.0"] floatValue];
                
            }
            else {
                SystemSoundID    soundFileObject1;
                NSURL *tapSound   = [[NSBundle mainBundle] URLForResource: @"beep-01a" withExtension: @"wav"];
                self.soundFileURLRef = (__bridge CFURLRef) tapSound ;
                AudioServicesCreateSystemSoundID (soundFileURLRef,&soundFileObject1);
                AudioServicesPlaySystemSound (soundFileObject1);
                
                UIAlertView *validalert = [[UIAlertView alloc] initWithTitle:@"Message" message:@"Invalid Loyalty Number" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [validalert show];
                giftValidFrom.text = @"";
                giftValidTo.text = @"";
                giftAmt.text = @"";
                avai_points.text = @"";
            }

        }
        else {
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Message" message:[[JSON valueForKey:RESPONSE_HEADER] valueForKey:RESPONSE_MESSAGE] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
            [alert show];
        }
        
    } @catch (NSException *exception) {
        NSLog(@"----exception in BillingHome page -- in getLoyalcardDetailsHandler---");
        NSLog(@"----%@",exception);
    } @finally {
        //added by Srinivasulu on 19/01/2017....
        isItemScanned = false;
        //upto here on 19/01/2017....
        
    }
    
}

// end of gift type method ..

/**
 * @description  Here we are modifying the customer Loyalty details and updating...
 * @Date         05/05/2019
 * @method       updateCustomerLoyaltyCardDetails:--
 * @author
 * @param
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)updateCustomerLoyaltyCardDetails:(NSMutableDictionary *)customerLoyaltyCardDic{
    
    float rewardValue = 0.0;
    NSString *  rewardCriteria;
    NSString * rewardType;
    float presentPointUsed = 0;
    float encashingAmt = 0.0;
    float rewardConversionRatio = 0;
    
    
    NSMutableDictionary * customerLoyaltyCardDetails = [[NSMutableDictionary alloc]init];
    
    customerLoyaltyCardDetails = [customerLoyaltyCardDic valueForKey:@"customerLoyaltyCards"];
    
    NSString * loyaltyCardNum = [self checkGivenValueIsNullOrNil:[customerLoyaltyCardDetails valueForKey:@"loyaltyCardNumber"]  defaultReturn:@""];
    
    NSString * loyaltyProgramNum = [self checkGivenValueIsNullOrNil:[customerLoyaltyCardDetails valueForKey:@"loyaltyProgramNumber"] defaultReturn:@""];

    
    if([giftID.text isEqualToString:loyaltyCardNum] || [phnotext.text length]){
        
//        float encashingAmt = [[NSString stringWithFormat:@"%.2f", recash.text] floatValue];
        
         encashingAmt =  recash.text.floatValue;
        
         rewardConversionRatio = [[self checkGivenValueIsNullOrNil:[customerLoyaltyCardDetails valueForKey:@"rewardConversionRatio"] defaultReturn:@"0"] floatValue]; // float

        if(rewardConversionRatio >0){
            presentPointUsed = encashingAmt/rewardConversionRatio;// ex:10-encash , 20 pointsUsed.. (0.5)ratio
        }
        
        float customerAvailCash = [[self checkGivenValueIsNullOrNil:[customerLoyaltyCardDetails valueForKey:@"cash"] defaultReturn:@"0"]floatValue] - encashingAmt;
        
        int customerPointsUsed = [[self checkGivenValueIsNullOrNil:[customerLoyaltyCardDetails valueForKey:@"pointsUsed"] defaultReturn:@"0"] intValue] +  presentPointUsed;

        int customerPointsRemaining = [[self checkGivenValueIsNullOrNil:[customerLoyaltyCardDetails valueForKey:@"pointsRemaining"] defaultReturn:@"0"] intValue] - presentPointUsed;

        int customerPointsEarned = [[self checkGivenValueIsNullOrNil:[customerLoyaltyCardDetails valueForKey:@"pointsEarned"] defaultReturn:@"0"] intValue];
        

        // here, we are getting Purchange Range Values - for selected loyalty program number.
        offline = [[OfflineBillingServices alloc]init];
        
       NSMutableArray * purchaseRangeArr = [offline getLoyaltyProgramPurchaseRangesFromSqlite:loyaltyProgramNum];

        for (NSDictionary * purchaseRangeDic in purchaseRangeArr) {
            
            if([netPayLblVal.text floatValue]  >= [[purchaseRangeDic valueForKey:@"minPurchaseValue"] floatValue] && [netPayLblVal.text floatValue] <= [[purchaseRangeDic valueForKey:@"maxPurchaseValue"] floatValue]){
                
                 rewardValue = [[purchaseRangeDic valueForKey:@"rewardValue"] floatValue];
                 rewardType = [purchaseRangeDic valueForKey:@"rewardType"];
                 rewardCriteria = [purchaseRangeDic valueForKey:@"rewardCriteria"];
                
                break;
            }
        }
        
        if(rewardValue == 0){ // Doubt should this condition is required or not?
            for (NSDictionary * purchaseRangeDic in purchaseRangeArr) {
                
                if([netPayLblVal.text floatValue] >= [[purchaseRangeDic valueForKey:@"minPurchaseValue"] floatValue]){
                    
                    rewardValue = [[purchaseRangeDic valueForKey:@"rewardValue"] floatValue];
                    rewardType = [purchaseRangeDic valueForKey:@"rewardType"];
                    rewardCriteria = [purchaseRangeDic valueForKey:@"rewardCriteria"];
                    
                    break;
                }
            }
        }// till here doubt..
        
        if( [rewardType caseInsensitiveCompare:@"FIXED"] == NSOrderedSame){
            
//            customerAvailCash = customerAvailCash + (rewardValue / rewardConversionRatio) * 100;
            
            customerAvailCash = customerAvailCash + (rewardValue * rewardConversionRatio);
            customerPointsEarned = customerPointsEarned + rewardValue;
            customerPointsRemaining = customerPointsRemaining + rewardValue;
        }

        [offline updateCustomerLoyaltyTable:loyaltyCardNum pointsEarnedValue:customerPointsEarned pointsRemainingValue:customerPointsRemaining pointsUsedValue:customerPointsUsed cashValue:customerAvailCash];
        
//        avai_points(pt remaing) giftAmt(enchasing) phoneNumberText
    }
}



/**
 * @description  Here we are modifying the customer Coupon details in Local DB and updating...
 * @Date         05/06/2019
 * @method       updateCustomerCouponDetails:--
 * @author
 * @param        NSMutableDictionary
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)updateCustomerCouponDetails:(NSMutableDictionary *)couponDetailsDic billReference:(NSString *)billRefStr{
    
    int noOfClaims = 0;
    int totalNoOfClaims = 0;

    BOOL claimStatus = false;
    BOOL multiples =  false;
    BOOL limitedUseCoupon =  false;
    NSString * mobileNum =  @"";
    NSString * couponCode =  @"";

    
    
    NSMutableDictionary * customerGiftCouponDetailsDic  = [[couponDetailsDic valueForKey:@"customerGiftCouponsList"] objectAtIndex:0];
    
    NSMutableDictionary * giftCouponMasterDetailsDic = [couponDetailsDic valueForKey:@"couponDetails"];
    NSMutableDictionary * giftCouponDetailsDic = [couponDetailsDic valueForKey:@"coupon"];
    
    if(customerGiftCouponDetailsDic != nil){
        
        mobileNum = [self checkGivenValueIsNullOrNil:[customerGiftCouponDetailsDic valueForKey:@"customerMobile"]  defaultReturn:@""];
        couponCode = [self checkGivenValueIsNullOrNil:[customerGiftCouponDetailsDic valueForKey:@"couponCode"]  defaultReturn:@""];
        
        noOfClaims = [[self checkGivenValueIsNullOrNil:[customerGiftCouponDetailsDic valueForKey:@"noOfClaims"]  defaultReturn:@""] intValue];
        claimStatus = [[self checkGivenValueIsNullOrNil:[customerGiftCouponDetailsDic valueForKey:@"claimStatus"]  defaultReturn:@""] boolValue];
    }
    if(giftCouponMasterDetailsDic != nil){
        
        multiples = [[self checkGivenValueIsNullOrNil:[giftCouponMasterDetailsDic valueForKey:@"multiples"]  defaultReturn:false] boolValue];
        
        limitedUseCoupon = [[self checkGivenValueIsNullOrNil:[giftCouponMasterDetailsDic valueForKey:@"limitedUseCoupon"]  defaultReturn:false] boolValue];
        
    }
    if(giftCouponDetailsDic != nil){
        
        totalNoOfClaims = [[self checkGivenValueIsNullOrNil:[giftCouponDetailsDic valueForKey:@"noOfCliams"] defaultReturn:@""] intValue];
    }

    noOfClaims = noOfClaims - 1;
    if(noOfClaims < 0){
        noOfClaims = 0;
    }
    totalNoOfClaims = totalNoOfClaims - 1;
    if(totalNoOfClaims < 0){
        totalNoOfClaims = 0;
    }
   
//    if(!multiples && limitedUseCoupon && (noOfClaims == 0)){// limitedUseCoupon = true &&  multiples =  false
//
//        claimStatus = true;
//    }
    
    // *********   if limitedUseCoupon = false, then claimStatus will be false always..  *********
    if(multiples && !limitedUseCoupon){ //For this condition no need to make claim status = true, bcoz unlimited coupons can be used till totalNoOfClaims(master) has reached to 0
        claimStatus = false;
    }
    else if(noOfClaims == 0){
        claimStatus = true;
    }
    
    offline = [[OfflineBillingServices alloc]init];
    
    [offline updateCustomerCouponDetailsTableForPhoneNum:mobileNum noOfClaimsToUpdate:noOfClaims setClaimStatus:claimStatus forCouponCode:couponCode totalNumberOfClaims:totalNoOfClaims forBillReference:billRefStr];

}

/**
 * @description  Here we are Updating the customer Voucher Claim status in Local DB...
 * @Date         11/06/2019
 * @method       updateVoucherDetails:--
 * @author
 * @param        NSMutableDictionary
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */
-(void)updateVoucherDetails:(NSMutableDictionary *)voucherDetailsDic billReferenceString:(NSString *)billRefStr{
    
    NSString * voucherCodeStr = @"";
    
    voucherCodeStr =  [[voucherDetailsDic valueForKey:@"giftvouchers"] valueForKey:@"voucherCode"];
    
    if([voucherCodeStr isEqualToString:@""]){
        
        voucherCodeStr =  [[voucherDetailsDic valueForKey:@"giftvouchers"] valueForKey:@"voucherId"];
    }
    BOOL claimStatus = true;
    
    offline = [[OfflineBillingServices alloc]init];
    
    [offline updateGiftVoucherDetailsTableForVoucherCode: voucherCodeStr setClaimStatusTo: claimStatus forBillRef: billRefStr];
    
}



-(void)ScanItem{
    
    //    [BillField resignFirstResponder];
    skListTable.hidden = YES;
    @try {
        
        //        if ([skuArrayList count] > indexPath.row) {
        //
        //            NSDictionary *json = [skuArrayList objectAtIndex:indexPath.row];
        
        
        
        //added By Bhargav.v on 04/09/2017...
        
        NSString * inputServiceStr = BillField.text;
        
        //            if (([[json allKeys] containsObject:PLU_CODE]) && (![[json valueForKey:PLU_CODE] isKindOfClass:[NSNull class]])) {
        //
        //                inputServiceStr = [NSString stringWithFormat:@"%@",[json objectForKey:PLU_CODE]];
        //            }
        
        //up to here  on  04/09/2017...
        
        selected_SKID = [[NSString stringWithFormat:@"%@", BillField.text] copy];
        barcodeBtn.tag = 0;
        
        offerLabel.text = [NSString stringWithFormat:@"%@", BillField.text];
        
        //            HUD = [[MBProgressHUD alloc] initWithView:self.navigationController.view];
        //            [self.navigationController.view addSubview:HUD];
        //            // Regiser for HUD callbacks so we can remove it from the window at the right time
        //            HUD.delegate = self;
        //            HUD.dimBackground = TRUE;
        //            HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"pending.gif"]];
        //            HUD.mode = MBProgressHUDModeCustomView;
        //            // Show the HUD
        //            [HUD show:YES];
        //            [HUD setLabelText:@"Please Wait.."];
        
        if (!isOfflineService) {
            
            [HUD setHidden:NO];
            
            NSArray *keys = @[@"skuId",@"requestHeader",@"storeLocation",@"isApplyCampaigns",@"cartDetails",kZeroStockBillCheck];
            
            skuIdList = [NSMutableArray new];
            pluCodeList = [NSMutableArray new];
            unitPriceList = [NSMutableArray new];
            qtyList = [NSMutableArray new];
            totalPriceList = [NSMutableArray new];
            itemStatusList = [NSMutableArray new];
            itemDiscountList = [NSMutableArray new];
            
            for (int i = 0; i < cartTotalItems.count; i++) {
                NSArray *itemDetails = [cartTotalItems[i] componentsSeparatedByString:@"#"];
                [skuIdList addObject:itemDetails[0]];
                [pluCodeList addObject:itemDetails[8]];
                [unitPriceList addObject:@([itemDetails[4] floatValue])];
                [qtyList addObject:@([itemDetails[5] floatValue])];
                [totalPriceList addObject:@([itemDetails[4] floatValue] * [itemDetails[5] floatValue])];
                if ([isVoidedArray[i] boolValue]) {
                    [itemStatusList addObject:@"void"];
                }
                else {
                    [itemStatusList addObject:@""];
                }
                [itemDiscountList addObject:@([itemDiscountArr[i] floatValue])];
                
            }
            
            NSArray *loyaltyKeys = @[@"storeLocation",@"requestHeader",@"skuIdArrList",@"pluCodeArrList",@"unitPriceArrList",@"qtyArrList",@"totalPriceArrList",@"itemStatusArrList",@"productOptionalDiscountArr",@"totalBillAmount",@"quantity",@"phonenumber",@"purchaseChannel"];
            
            NSArray *loyaltyObjects = @[presentLocation,[RequestHeader getRequestHeader],skuIdList,pluCodeList,unitPriceList,qtyList,totalPriceList,itemStatusList, itemDiscountList, totalTxt.text,@"1",custmerPhNum.text,@"POS"];
            NSDictionary *campaigndictionary_ = [NSDictionary dictionaryWithObjects:loyaltyObjects forKeys:loyaltyKeys];
            
            
            //changed by bhargav on 04/10/2017....
            
            //                    NSArray *objects = [NSArray arrayWithObjects:[NSString stringWithFormat:@"%@",[json objectForKey:@"skuID"]],[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],campaigndictionary_,[NSNumber numberWithBool:true], nil];
            
            NSArray *objects = @[inputServiceStr,[RequestHeader getRequestHeader],presentLocation,[NSNumber numberWithBool:TRUE],campaigndictionary_,@true];
            
            //upto here on 04/10/2017....
            
            
            NSDictionary *dictionary_ = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
            
            NSError * err;
            NSData * jsonData = [NSJSONSerialization dataWithJSONObject:dictionary_ options:0 error:&err];
            NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
            
            //            getSkuid.skuID = salesReportJsonString;
            @try {
                skListTable.frame = CGRectMake(skListTable.frame.origin.x, skListTable.frame.origin.y, skListTable.frame.size.width, 0);
                WebServiceController *webServiceController = [WebServiceController new];
                webServiceController.getSkuDetailsDelegate = self;
                [webServiceController getSkuDetailsWithData:salesReportJsonString];
                [tempSkuArrayList removeAllObjects];
                [filteredSkuArrayList removeAllObjects];
                [skuArrayList removeAllObjects];
                
            }
            @catch (NSException *exception) {
                [HUD setHidden:YES];
                
            }
            
            
        }
        else {
            [HUD setHidden:NO];
            //[self performSelectorInBackground:@selector(getOfflineProductWithSearchSkuId:) withObject:[json valueForKey:@"skuID"]];
            
            //changed by Srinivasulu on 24/10/2017....
            //                    if(!inputServiceStr.length)
            //                        inputServiceStr = selected_SKID;
            //
            //                    [self getOfflineProductWithSearchSkuId:inputServiceStr];
            [self getOfflineProductWithSearchSkuId:selected_SKID withPlucode:inputServiceStr];
            
            //upto here on 24/10/2017....
        }
        //        }
    }
    @catch (NSException *exception) {
        [HUD setHidden:YES];
        
        NSLog(@"%@",exception.description);
        
    }
    @finally {
        BillField.text = @"";
        
        //            [HUD setHidden:YES];
    }
    
}

#pragma -mark methods used to convert the Online Orders to bill....
#pragma -mark methods for orders....

/**
 * @description  we are Calling the getOutletOrders based on the location to check the number of OMT(Online (or) Mobile (or) Telephone)orders done....
 * @date         02/03/2018
 * @method       callingOutletOrders
 * @author       Bhargav.v
 * @param
 * @param
 * @return
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)callingOutletOrders{
    
    //Play Audio for Button touch......
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        if(isOfflineService) {
            
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"this_feature_can_only_be_used_with_internet_connectivity", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
            [alert show];
            return;
        }
        
        [HUD setHidden:NO];
        HUD.labelText = @"Getting All Orders..";
        
        onLineArray   = [NSMutableArray new];
        mobileArray    = [NSMutableArray new];
        telePhoneArray = [NSMutableArray new];
        
        NSMutableDictionary * orderListDic = [[NSMutableDictionary alloc]init];
        
        [orderListDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        
        [orderListDic setValue:presentLocation forKey:kLocation];
        
        [orderListDic setValue:presentLocation forKey:SALE_LOCATION];
        
        [orderListDic setValue:ZERO_CONSTANT forKey:START_INDEX];
        
        [orderListDic setValue:CONFIRMED forKey:ORDER_STATUS];
        //        [orderListDic setValue:ORDERED forKey:ORDER_STATUS];
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:orderListDic options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.outletOrderServiceDelegate = self;
        [serviceController getOutletOrders:salesReportJsonString];
    }
    @catch (NSException *exception) {
        
        [HUD setHidden:YES];
    }
}

/**
 * @description  here we are handling the successResponse received from services....
 * @date
 * @method       getOutletOrdersSuccessResponse:--
 * @author       Bhargav.v
 * @param        NSDictionary
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)getOutletOrdersSuccessResponse:(NSDictionary *)successDictionary{
    
    @try {
        
        NSString * onlineOrderStr    = @"Online";
        NSString * mobileOrderStr    = @"Mobile";
        NSString * telePhoneOrderStr = @"Telephone";
        
        for(NSDictionary * ordersListDic in [successDictionary valueForKey:ORDERS_LIST]) {
            
            if ([[ordersListDic valueForKey:ORDER_CHANNEL] isEqualToString:onlineOrderStr ]) {
                
                [onLineArray addObject:ordersListDic];
                
                NSString * onlineCountStr = [NSString stringWithFormat:@"%ld",onLineArray.count];
                
                [onlineOrderBtn setTitle:[NSString stringWithFormat:@"O\n%@",onlineCountStr] forState:UIControlStateNormal];
                
            }
            else if ([[ordersListDic valueForKey:ORDER_CHANNEL] isEqualToString:mobileOrderStr])  {
                
                [mobileArray addObject:ordersListDic];
                
                NSString * mobileCountStr = [NSString stringWithFormat:@"%ld",mobileArray.count];
                
                [mobileOrderBtn setTitle:[NSString stringWithFormat:@"M\n%@",mobileCountStr]  forState:UIControlStateNormal];
            }
            
            else if ([[ordersListDic valueForKey:ORDER_CHANNEL] isEqualToString:telePhoneOrderStr]) {
                
                [telePhoneArray addObject:ordersListDic];
                
                NSString * telePhoneCountStr = [NSString stringWithFormat:@"%ld",telePhoneArray.count];
                
                [telePhoneOrderBtn setTitle:[NSString stringWithFormat:@"T\n%@",telePhoneCountStr]  forState:UIControlStateNormal];
            }
        }
        
    } @catch (NSException * exception) {
        
        NSLog(@"%@ ---channel---",exception);
        
        
        
    } @finally {
        onlineOrderBtn.userInteractionEnabled = YES;
        mobileOrderBtn.userInteractionEnabled = YES;
        telePhoneOrderBtn.userInteractionEnabled = YES;
        
        
        [HUD setHidden:YES];
    }
    
}

/**
 * @description  here the handling error response received from serviceCalls....
 * @date
 * @method       getOutletOrdersErrorResponse:--
 * @author       Bhargav.v
 * @param        NSString
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)getOutletOrdersErrorResponse:(NSString *)errorResponse{
    
    @try {
        
        [HUD setHidden:YES];
        
        float y_axis = self.view.frame.size.height - 120;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",errorResponse];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:1];
        
        [onlineOrderBtn setTitle:@"O\n0" forState:UIControlStateNormal];
        [mobileOrderBtn setTitle:@"M\n0" forState:UIControlStateNormal];
        [telePhoneOrderBtn setTitle:@"T\n0" forState:UIControlStateNormal];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  here we are calling the services for getting the complete order details....
 * @date
 * @method       callingOutletOrderIdDetails:--  orderChannel:--
 * @author       Bhargav.v
 * @param        NSString
 * @param        NSString
 * @return
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)callingOutletOrderIdDetails:(NSString *)orderIdString orderChannel:(NSString * )orderChanneLString {
    
    @try {
        
        [HUD setHidden:NO];
        HUD.labelText = @"Getting Orders Details..";
        
        if (itemListArray == nil && itemListArray.count == 0)
            
            itemListArray = [NSMutableArray new];
        
        else if (itemListArray.count)
            
            [itemListArray removeAllObjects];
        
        NSMutableDictionary * orderDetailsDic = [[NSMutableDictionary alloc]init];
        
        [orderDetailsDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        
        [orderDetailsDic setValue:presentLocation forKey:kLocation];
        
        [orderDetailsDic setValue:ZERO_CONSTANT forKey:START_INDEX];
        
        [orderDetailsDic setValue:orderIdString forKey:ORDER_ID];
        
        if(orderChanneLString.length)
        [orderDetailsDic setValue:orderChanneLString forKey:ORDER_CHANNEL];
        
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:orderDetailsDic options:0 error:&err];
        NSString * salesReportJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.outletOrderServiceDelegate = self;
        [serviceController getOutleOrderDetails:salesReportJsonString];
        
        if(salesOrderBookingTypeStr != nil || isOrderedBill)
            if([salesOrderBookingTypeStr length] || isOrderedBill)
                [self getTheOrderDetailsByOrderId:orderIdString];
    }
    @catch (NSException *exception) {
        
        [HUD setHidden:YES];
    }
}

/**
 * @description  here we are handling the successResponse received from services....
 * @date
 * @method       getOutletOrderDetailsSuccessResponse:--
 * @author       Bhargav.v
 * @param        NSDictionary
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)getOutletOrderDetailsSuccessResponse:(NSDictionary *)successDictionary {
    
    @try {
        
        if(OrderDetailsDictionary != nil)
            OrderDetailsDictionary = nil;
        
        OrderDetailsDictionary = [successDictionary mutableCopy];
        
        if (isToDisplayOrderView == false) {
            
            [self displayOrderIdDetailsView];
        }
        else {
            
            for (NSDictionary * itemDetailsDic in [successDictionary valueForKey:ITEM_DETAILS]) {
                
                [itemListArray addObject:itemDetailsDic];
            }
            
            NSDictionary * orderDetailsDic = [successDictionary valueForKey:ORDER];
            
            orderIdValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:ORDER_ID] defaultReturn:@""];
            
            dateAndTimeValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:ORDER_PLACED_DATE] defaultReturn:@""];
            
            
            
            
            taxValueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:ORDER_TAX] defaultReturn:@"0.00"] floatValue]];
            
            shipmentChargeValueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:SHIPMENT_CHARGES] defaultReturn:@"0.00"] floatValue]];
            
            
            if([[self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:sub_total] defaultReturn:@"0.00"] floatValue] > 0)
                subTotalValueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:sub_total] defaultReturn:@"0.00"] floatValue]];
            else
                subTotalValueLabel.text = [NSString stringWithFormat:@"%.2f", ([[self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:ORDER_TOTAL_COST] defaultReturn:@"0.00"] floatValue] - (taxValueLabel.text).floatValue -  (shipmentChargeValueLabel.text).floatValue)];
            
            
            
            netBillAmountvalueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:TOTAL_ORDER_AMOUNT] defaultReturn:@"0.00"] floatValue]];
            
            
            customerNameValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:SHIPMENT_NAME] defaultReturn:@""];
            
            contactNumberValueLabel.text = [NSString stringWithFormat:@"%@",orderDetailsDic[MOBILE_NUM]];
            
            paymentStatusValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:ORDER_STATUS] defaultReturn:@""];
            
            paymentModeValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:PAYMENT_MODE] defaultReturn:@""];
            
            paidAmountValueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDetailsDic valueForKey:PAID_AMT] defaultReturn:@"0.00"] floatValue]];
            
//            [NSString stringWithFormat:@"%@",orderDetailsDic[PAID_AMT]];
            
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        [orderItemDetailsTable reloadData];
        [HUD setHidden:YES];
    }
}

/**
 * @description  here we are handling the error response received from services....
 * @date
 * @method       getOutletOrderDetailsErrorResponse:--
 * @author       Bhargav.v
 * @param        NSString
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)getOutletOrderDetailsErrorResponse:(NSString *)errorResponse {
    
    @try {
        
        [HUD setHidden:YES];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  In this method we are calling and getting the complete order details based on its orderId..
 * @date
 * @method       callingOnlineOrderDetails:
 * @author       Bhargav.v
 * @param        UIButton
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments and added the button tags ....
 *
 * @verified By
 * @verified On
 *
 */

-(void)callingOnlineOrderDetails:(UIButton *)sender {
    
    //Play Audio for Button touch......
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        if(isOfflineService) {
            
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"this_feature_can_only_be_used_with_internet_connectivity", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
            [alert show];
            return;
        }
        
        isToDisplayOrderView = false;
        
        //added by Srinivasulu on 19/03/2018....
        
        onlineOrderBtn.tag    = 1;
        mobileOrderBtn.tag    = 1;
        telePhoneOrderBtn.tag = 1;
        
        //upto herer on 19/03/2018....
        
        if (onLineArray != nil && onLineArray.count) {
            
            //Handling the Pagenation for displaying the orders...
            
            if (orderListArr == nil && orderListArr.count == 0) {
                
                orderListArr = [NSMutableArray new];
            }
            else if(orderListArr.count)
                
                [orderListArr removeAllObjects];
            
            for(int i = 1;i <= onLineArray.count; i++) {
                
                [orderListArr addObject:[NSString stringWithFormat:@"%i",i]];
            }
            
            NSDictionary * detailsDic = onLineArray[0];
            [self callingOutletOrderIdDetails:detailsDic[ORDER_ID] orderChannel:detailsDic[ORDER_CHANNEL]];
        }
        else {
            
            float y_axis = self.view.frame.size.height - 120;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"no_orders_Available",nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:1];
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  In this method we are calling and getting the complete order details based on its orderId..
 * @date
 * @method       callingMobileOrderDetails:--
 * @author       Bhargav.v
 * @param        UIButton
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments and added the button tags ....
 *
 * @verified By
 * @verified On
 *
 */

-(void)callingMobileOrderDetails:(UIButton *)sender {
    
    //Play Audio for Button touch......
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        if(isOfflineService) {
            
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"this_feature_can_only_be_used_with_internet_connectivity", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
            [alert show];
            return;
        }
        
        isToDisplayOrderView = false;
        
        //added by Srinivasulu on 19/03/2018....
        
        onlineOrderBtn.tag    = 2;
        mobileOrderBtn.tag    = 2;
        telePhoneOrderBtn.tag = 2;
        
        //upto herer on 19/03/2018....
        
        if (mobileArray != nil && mobileArray.count) {
            
            //Handling the Pagenation for displaying the orders...
            
            if (orderListArr == nil && orderListArr.count == 0) {
                
                orderListArr = [NSMutableArray new];
            }
            else if(orderListArr.count)
                
                [orderListArr removeAllObjects];
            
            for(int i = 1;i <= mobileArray.count; i++) {
                
                [orderListArr addObject:[NSString stringWithFormat:@"%i",i]];
            }
            
            NSDictionary * detailsDic = mobileArray[0];
            [self callingOutletOrderIdDetails:detailsDic[ORDER_ID] orderChannel:detailsDic[ORDER_CHANNEL]];
        }
        else {
            
            float y_axis = self.view.frame.size.height - 120;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"no_orders_Available",nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:1];
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  In this method we are calling and getting the complete order details based on its orderId..
 * @date
 * @method       callingTelePhoneOrderDetails:--
 * @author       Bhargav.v
 * @param        UIButton
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments and added the button tags ....
 *
 * @verified By
 * @verified On
 *
 */

-(void)callingTelePhoneOrderDetails:(UIButton *)sender {
    
    //Play Audio for Button touch......
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        if(isOfflineService) {
            
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:NSLocalizedString(@"message", nil) message:NSLocalizedString(@"this_feature_can_only_be_used_with_internet_connectivity", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"ok", nil) otherButtonTitles:nil, nil];
            [alert show];
            return;
        }
        
        isToDisplayOrderView = false;
        
        //added by Srinivasulu on 19/03/2018....
        
        onlineOrderBtn.tag    = 3;
        mobileOrderBtn.tag    = 3;
        telePhoneOrderBtn.tag = 3;
        
        //upto herer on 19/03/2018....
        
        if (telePhoneArray != nil && telePhoneArray.count) {
            
            NSDictionary * detailsDic = telePhoneArray[0];
            
            [self callingOutletOrderIdDetails:detailsDic[ORDER_ID] orderChannel:detailsDic[ORDER_CHANNEL]];
        }
        else {
            
            float y_axis = self.view.frame.size.height - 120;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"no_orders_Available",nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:1];
        }
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}

/**
 * @description  In this method we are forming and displaying the order information..
 * @date
 * @method       displayOrderIdDetailsView
 * @author       Bhargav.v
 * @param
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments and removed the pargma mark & added exception at that place in order to remove the crash if any araises....
 *
 * @verified By
 * @verified On
 *
 */

-(void)displayOrderIdDetailsView {
    
    isToDisplayOrderView = true;
    
    orderDetailsTransparentView = [[UIView alloc] init];
    orderDetailsTransparentView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.7];
    
    UILabel  * headerLbl;
    UIButton * closeBtn;
    UILabel  * orderDetailsLabel;
    // close button to close the view ..
    UIImage  * image = [UIImage imageNamed:@"delete.png"];
    
    orderDetailsView = [[UIView alloc] init];
    orderDetailsView.opaque = NO;
    orderDetailsView.backgroundColor = [UIColor blackColor];
    orderDetailsView.layer.borderColor = [UIColor lightGrayColor].CGColor;
    orderDetailsView.layer.borderWidth = 1.0f;
    
    headerLbl  = [[UILabel alloc] init];
    headerLbl.textColor = [UIColor whiteColor];
    headerLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
    headerLbl.textAlignment = NSTextAlignmentLeft;
    
    
    orderDetailsLabel = [[UILabel alloc] init];
    orderDetailsLabel.layer.cornerRadius = 14;
    orderDetailsLabel.layer.masksToBounds = YES;
    orderDetailsLabel.numberOfLines = 1;
    orderDetailsLabel.textAlignment = NSTextAlignmentLeft;
    orderDetailsLabel.backgroundColor = [UIColor clearColor];
    orderDetailsLabel.textColor = [UIColor whiteColor];
    
    closeBtn = [[UIButton alloc] init] ;
    [closeBtn addTarget:self action:@selector(closeOrderDetailsView:) forControlEvents:UIControlEventTouchUpInside];
    [closeBtn setBackgroundImage:image forState:UIControlStateNormal];
    
    
    UILabel * orderIdLabel;
    UILabel * orderIdColon;
    
    
    orderIdLabel = [[UILabel alloc] init];
    orderIdLabel.layer.cornerRadius = 5.0f;
    orderIdLabel.layer.masksToBounds = YES;
    orderIdLabel.numberOfLines = 1;
    orderIdLabel.textAlignment = NSTextAlignmentLeft;
    orderIdLabel.backgroundColor = [UIColor clearColor];
    orderIdLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    orderIdColon = [[UILabel alloc] init];
    orderIdColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    orderIdColon.textAlignment = NSTextAlignmentCenter;
    
    orderIdValueLabel = [[UILabel alloc] init];
    orderIdValueLabel.layer.cornerRadius = 5.0f;
    orderIdValueLabel.layer.masksToBounds = YES;
    orderIdValueLabel.numberOfLines = 1;
    orderIdValueLabel.textAlignment = NSTextAlignmentLeft;
    orderIdValueLabel.backgroundColor = [UIColor clearColor];
    orderIdValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    
    //
    UILabel * dateAndTimeLabel;
    UILabel * dateAndTimeColon;
    
    
    dateAndTimeLabel = [[UILabel alloc] init];
    dateAndTimeLabel.layer.cornerRadius = 5.0f;
    dateAndTimeLabel.layer.masksToBounds = YES;
    dateAndTimeLabel.numberOfLines = 1;
    dateAndTimeLabel.textAlignment = NSTextAlignmentLeft;
    dateAndTimeLabel.backgroundColor = [UIColor clearColor];
    dateAndTimeLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    dateAndTimeColon = [[UILabel alloc] init];
    dateAndTimeColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    dateAndTimeColon.textAlignment = NSTextAlignmentCenter;
    
    dateAndTimeValueLabel = [[UILabel alloc] init];
    dateAndTimeValueLabel.layer.cornerRadius = 5.0f;
    dateAndTimeValueLabel.layer.masksToBounds = YES;
    dateAndTimeValueLabel.numberOfLines = 1;
    dateAndTimeValueLabel.textAlignment = NSTextAlignmentLeft;
    dateAndTimeValueLabel.backgroundColor = [UIColor clearColor];
    dateAndTimeValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    snoLabel = [[CustomLabel alloc]init];
    [snoLabel awakeFromNib];
    
    skuidLabel = [[CustomLabel alloc]init];
    [skuidLabel awakeFromNib];
    
    descriptionLabel = [[CustomLabel alloc]init];
    [descriptionLabel awakeFromNib];
    
    uomLabel = [[CustomLabel alloc]init];
    [uomLabel awakeFromNib];
    
    quantityLabel = [[CustomLabel alloc]init];
    [quantityLabel awakeFromNib];
    
    mrpLabel = [[CustomLabel alloc]init];
    [mrpLabel awakeFromNib];
    
    discountLabel = [[CustomLabel alloc]init];
    [discountLabel awakeFromNib];
    
    salePriceLabel = [[CustomLabel alloc]init];
    [salePriceLabel awakeFromNib];
    
    costLabel = [[CustomLabel alloc]init];
    [costLabel awakeFromNib];
    
    //stockRequestTable creation...
    orderItemDetailsTable = [[UITableView alloc] init];
    orderItemDetailsTable.backgroundColor  = [UIColor blackColor];
    orderItemDetailsTable.layer.cornerRadius = 4.0;
    orderItemDetailsTable.bounces = true;
    orderItemDetailsTable.dataSource = self;
    orderItemDetailsTable.delegate = self;
    orderItemDetailsTable.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
    
    //UILabels after the orderItemDetailsTable
    
    UILabel * customerNameLabel;
    UILabel * customerColon;
    
    customerNameLabel = [[UILabel alloc] init];
    customerNameLabel.layer.cornerRadius = 5.0f;
    customerNameLabel.layer.masksToBounds = YES;
    customerNameLabel.numberOfLines = 1;
    customerNameLabel.textAlignment = NSTextAlignmentLeft;
    customerNameLabel.backgroundColor = [UIColor clearColor];
    customerNameLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    customerColon = [[UILabel alloc] init];
    customerColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    customerColon.textAlignment = NSTextAlignmentCenter;
    
    customerNameValueLabel = [[UILabel alloc] init];
    customerNameValueLabel.layer.cornerRadius = 5.0f;
    customerNameValueLabel.layer.masksToBounds = YES;
    customerNameValueLabel.numberOfLines = 1;
    customerNameValueLabel.textAlignment = NSTextAlignmentLeft;
    customerNameValueLabel.backgroundColor = [UIColor clearColor];
    customerNameValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    UILabel * contactNumberLabel;
    UILabel * contactNumberColon;
    
    contactNumberLabel = [[UILabel alloc] init];
    contactNumberLabel.layer.cornerRadius = 5.0f;
    contactNumberLabel.layer.masksToBounds = YES;
    contactNumberLabel.numberOfLines = 1;
    contactNumberLabel.textAlignment = NSTextAlignmentLeft;
    contactNumberLabel.backgroundColor = [UIColor clearColor];
    contactNumberLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    contactNumberColon = [[UILabel alloc] init];
    contactNumberColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    contactNumberColon.textAlignment = NSTextAlignmentCenter;
    
    contactNumberValueLabel = [[UILabel alloc] init];
    contactNumberValueLabel.layer.cornerRadius = 5.0f;
    contactNumberValueLabel.layer.masksToBounds = YES;
    contactNumberValueLabel.numberOfLines = 1;
    contactNumberValueLabel.textAlignment = NSTextAlignmentLeft;
    contactNumberValueLabel.backgroundColor = [UIColor clearColor];
    contactNumberValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    UILabel * paymentStatusLabel;
    UILabel * paymentStatusColon;
    
    paymentStatusLabel = [[UILabel alloc] init];
    paymentStatusLabel.layer.cornerRadius = 5.0f;
    paymentStatusLabel.layer.masksToBounds = YES;
    paymentStatusLabel.numberOfLines = 1;
    paymentStatusLabel.textAlignment = NSTextAlignmentLeft;
    paymentStatusLabel.backgroundColor = [UIColor clearColor];
    paymentStatusLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    
    paymentStatusColon = [[UILabel alloc] init];
    paymentStatusColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    paymentStatusColon.textAlignment = NSTextAlignmentCenter;
    
    paymentStatusValueLabel = [[UILabel alloc] init];
    paymentStatusValueLabel.layer.cornerRadius = 5.0f;
    paymentStatusValueLabel.layer.masksToBounds = YES;
    paymentStatusValueLabel.numberOfLines = 1;
    paymentStatusValueLabel.textAlignment = NSTextAlignmentLeft;
    paymentStatusValueLabel.backgroundColor = [UIColor clearColor];
    paymentStatusValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    UILabel * paymentModeLabel;
    UILabel * paymentModeColon;
    
    paymentModeLabel = [[UILabel alloc] init];
    paymentModeLabel.layer.cornerRadius = 5.0f;
    paymentModeLabel.layer.masksToBounds = YES;
    paymentModeLabel.numberOfLines = 1;
    paymentModeLabel.textAlignment = NSTextAlignmentLeft;
    paymentModeLabel.backgroundColor = [UIColor clearColor];
    paymentModeLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    paymentModeColon = [[UILabel alloc] init];
    paymentModeColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    paymentModeColon.textAlignment = NSTextAlignmentCenter;
    
    paymentModeValueLabel = [[UILabel alloc] init];
    paymentModeValueLabel.layer.cornerRadius = 5.0f;
    paymentModeValueLabel.layer.masksToBounds = YES;
    paymentModeValueLabel.numberOfLines = 1;
    paymentModeValueLabel.textAlignment = NSTextAlignmentLeft;
    paymentModeValueLabel.backgroundColor = [UIColor clearColor];
    paymentModeValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    
    UILabel * paidAmountLabel;
    UILabel * paidAmountColon;
    
    
    paidAmountLabel = [[UILabel alloc] init];
    paidAmountLabel.layer.cornerRadius = 5.0f;
    paidAmountLabel.layer.masksToBounds = YES;
    paidAmountLabel.numberOfLines = 1;
    paidAmountLabel.textAlignment = NSTextAlignmentLeft;
    paidAmountLabel.backgroundColor = [UIColor clearColor];
    paidAmountLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    paidAmountColon = [[UILabel alloc] init];
    paidAmountColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    paidAmountColon.textAlignment = NSTextAlignmentCenter;
    
    paidAmountValueLabel = [[UILabel alloc] init];
    paidAmountValueLabel.layer.cornerRadius = 5.0f;
    paidAmountValueLabel.layer.masksToBounds = YES;
    paidAmountValueLabel.numberOfLines = 1;
    paidAmountValueLabel.textAlignment = NSTextAlignmentLeft;
    paidAmountValueLabel.backgroundColor = [UIColor clearColor];
    paidAmountValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    UIImage * buttonImage_ = [UIImage imageNamed:@"arrow_1.png"];
    
    pagenationTxt = [[CustomTextField alloc] init];
    pagenationTxt.userInteractionEnabled = NO;
    pagenationTxt.textAlignment = NSTextAlignmentCenter;
    pagenationTxt.delegate = self;
    [pagenationTxt awakeFromNib];
    
    UIButton * dropDownBtn;
    dropDownBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [dropDownBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
    [dropDownBtn addTarget:self action:@selector(showPagenationData:) forControlEvents:UIControlEventTouchDown];
    
    //creating the UIButton which are used to show CustomerInfo popUp.......
    UIButton * goButton;
    
    goButton = [[UIButton alloc] init] ;
    goButton.backgroundColor = [UIColor grayColor];
    goButton.layer.masksToBounds = YES;
    [goButton addTarget:self action:@selector(goButtonPressed:) forControlEvents:UIControlEventTouchDown];
    goButton.userInteractionEnabled = YES;
    goButton.layer.cornerRadius = 6.0f;
    goButton.titleLabel.font = [UIFont boldSystemFontOfSize:25.0];
    
    
    UILabel * subTotalLabel;
    UILabel * subTotalColon;
    
    
    
    subTotalLabel = [[UILabel alloc] init];
    subTotalLabel.layer.cornerRadius = 5.0f;
    subTotalLabel.layer.masksToBounds = YES;
    subTotalLabel.numberOfLines = 1;
    subTotalLabel.textAlignment = NSTextAlignmentLeft;
    subTotalLabel.backgroundColor = [UIColor clearColor];
    subTotalLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    subTotalColon = [[UILabel alloc] init];
    subTotalColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    subTotalColon.textAlignment = NSTextAlignmentCenter;
    
    subTotalValueLabel = [[UILabel alloc] init];
    subTotalValueLabel.layer.cornerRadius = 5.0f;
    subTotalValueLabel.layer.masksToBounds = YES;
    subTotalValueLabel.numberOfLines = 1;
    subTotalValueLabel.textAlignment = NSTextAlignmentLeft;
    subTotalValueLabel.backgroundColor = [UIColor clearColor];
    subTotalValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    UILabel * taxLabel;
    UILabel * taxColon;
    
    
    taxLabel = [[UILabel alloc] init];
    taxLabel.layer.cornerRadius = 5.0f;
    taxLabel.layer.masksToBounds = YES;
    taxLabel.numberOfLines = 1;
    taxLabel.textAlignment = NSTextAlignmentLeft;
    taxLabel.backgroundColor = [UIColor clearColor];
    taxLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    taxColon = [[UILabel alloc] init];
    taxColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    taxColon.textAlignment = NSTextAlignmentCenter;
    
    taxValueLabel = [[UILabel alloc] init];
    taxValueLabel.layer.cornerRadius = 5.0f;
    taxValueLabel.layer.masksToBounds = YES;
    taxValueLabel.numberOfLines = 1;
    taxValueLabel.textAlignment = NSTextAlignmentLeft;
    taxValueLabel.backgroundColor = [UIColor clearColor];
    taxValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    
    UILabel * shipmentChargeLabel;
    UILabel * shipmentChargeColon;
    
    
    shipmentChargeLabel = [[UILabel alloc] init];
    shipmentChargeLabel.layer.cornerRadius = 5.0f;
    shipmentChargeLabel.layer.masksToBounds = YES;
    shipmentChargeLabel.numberOfLines = 1;
    shipmentChargeLabel.textAlignment = NSTextAlignmentLeft;
    shipmentChargeLabel.backgroundColor = [UIColor clearColor];
    shipmentChargeLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    shipmentChargeColon = [[UILabel alloc] init];
    shipmentChargeColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    shipmentChargeColon.textAlignment = NSTextAlignmentCenter;
    
    shipmentChargeValueLabel = [[UILabel alloc] init];
    shipmentChargeValueLabel.layer.cornerRadius = 5.0f;
    shipmentChargeValueLabel.layer.masksToBounds = YES;
    shipmentChargeValueLabel.numberOfLines = 1;
    shipmentChargeValueLabel.textAlignment = NSTextAlignmentLeft;
    shipmentChargeValueLabel.backgroundColor = [UIColor clearColor];
    shipmentChargeValueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    UILabel * separationLabel;
    
    separationLabel = [[UILabel alloc] init];
    separationLabel.backgroundColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7 ];
    separationLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7 ];
    
    UILabel * netBillAmountLabel;
    UILabel * netBillAmountColon;
    
    netBillAmountLabel = [[UILabel alloc] init];
    netBillAmountLabel.layer.cornerRadius = 5.0f;
    netBillAmountLabel.layer.masksToBounds = YES;
    netBillAmountLabel.numberOfLines = 1;
    netBillAmountLabel.textAlignment = NSTextAlignmentLeft;
    netBillAmountLabel.backgroundColor = [UIColor clearColor];
    netBillAmountLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    netBillAmountColon = [[UILabel alloc] init];
    netBillAmountColon.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    netBillAmountColon.textAlignment = NSTextAlignmentCenter;
    
    netBillAmountvalueLabel = [[UILabel alloc] init];
    netBillAmountvalueLabel.layer.cornerRadius = 5.0f;
    netBillAmountvalueLabel.layer.masksToBounds = YES;
    netBillAmountvalueLabel.numberOfLines = 1;
    netBillAmountvalueLabel.textAlignment = NSTextAlignmentLeft;
    netBillAmountvalueLabel.backgroundColor = [UIColor clearColor];
    netBillAmountvalueLabel.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7];
    
    UILabel * separationLabel2;
    
    separationLabel2 = [[UILabel alloc] init];
    separationLabel2.backgroundColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7 ];
    separationLabel2.textColor = [[UIColor whiteColor]colorWithAlphaComponent:0.7 ];
    
    //
    UIButton * makeBillButton;
    UIButton * cancelButton;
    
    makeBillButton = [[UIButton alloc] init];
    [makeBillButton addTarget:self action:@selector(makeBillButtonPressed:) forControlEvents:UIControlEventTouchDown];
    makeBillButton.layer.cornerRadius = 3.0f;
    makeBillButton.backgroundColor = [UIColor grayColor];
    [makeBillButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    
    cancelButton = [[UIButton alloc] init];
    [cancelButton addTarget:self action:@selector(closeOrderDetailsView:) forControlEvents:UIControlEventTouchDown];
    cancelButton.layer.cornerRadius = 3.0f;
    cancelButton.backgroundColor = [UIColor grayColor];
    [cancelButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    
    
    @try {
        
        orderDetailsLabel.text = NSLocalizedString(@"order_details", nil);
        
        orderIdLabel.text  = NSLocalizedString(@"order_id", nil);
        orderIdColon.text  = NSLocalizedString(@":", nil);
        
        dateAndTimeLabel.text  = NSLocalizedString(@"date_and_time", nil);
        dateAndTimeColon.text  = NSLocalizedString(@":", nil);
        
        snoLabel.text   = NSLocalizedString(@"S_NO",nil);
        skuidLabel.text = NSLocalizedString(@"sku_id",nil);
        descriptionLabel.text = NSLocalizedString(@"description",nil);
        uomLabel.text         = NSLocalizedString(@"uom",nil);
        quantityLabel.text    = NSLocalizedString(@"quantity",nil);
        mrpLabel.text       = NSLocalizedString(@"mrp",nil);
        discountLabel.text  = NSLocalizedString(@"discount",nil);
        salePriceLabel.text = NSLocalizedString(@"sale_price",nil);
        costLabel.text      = NSLocalizedString(@"cost",nil);
        
        customerNameLabel.text = NSLocalizedString(@"customer_name",nil);
        customerColon.text     = NSLocalizedString(@":",nil);
        
        contactNumberLabel.text = NSLocalizedString(@"contact_no", nil);
        contactNumberColon.text = NSLocalizedString(@":", nil);
        
        paymentStatusLabel.text = NSLocalizedString(@"order_status", nil);
        paymentStatusColon.text = NSLocalizedString(@":", nil);
        
        paymentModeLabel.text = NSLocalizedString(@"payment_mode", nil);
        paymentModeColon.text = NSLocalizedString(@":", nil);
        
        paidAmountLabel.text = NSLocalizedString(@"paid_amount", nil);
        paidAmountColon.text = NSLocalizedString(@":", nil);
        
        [goButton setTitle:NSLocalizedString(@"go", nil) forState:UIControlStateNormal];
        
        subTotalLabel.text = NSLocalizedString(@"sub_total", nil);
        subTotalColon.text = NSLocalizedString(@":", nil);
        
        taxLabel.text = NSLocalizedString(@"tax", nil);
        taxColon.text = NSLocalizedString(@":", nil);
        
        shipmentChargeLabel.text = NSLocalizedString(@"shipment_charges", nil);
        shipmentChargeColon.text = NSLocalizedString(@":", nil);
        
        netBillAmountLabel.text = NSLocalizedString(@"net_bill_amount", nil);
        netBillAmountColon.text = NSLocalizedString(@":", nil);
        
        [makeBillButton setTitle:NSLocalizedString(@"make_bill", nil) forState:UIControlStateNormal];
        [cancelButton setTitle:NSLocalizedString(@"cancel_", nil) forState:UIControlStateNormal];
        
    } @catch (NSException *exception) {
        
    }
    
    
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        
        orderDetailsTransparentView.frame = self.view.frame;
        
        orderDetailsView.frame = CGRectMake(BillField.frame.origin.x + 50, (orderDetailsTransparentView.frame.size.height - (cartTable.frame.origin.y +  cartTable.frame.size.height))/2.0, (custmerPhNum.frame.origin.x + custmerPhNum.frame.size.width - (BillField.frame.origin.x)), cartTable.frame.origin.y +  cartTable.frame.size.height + 60);
        
        float labelHeight = 30;
        
        headerLbl.frame = CGRectMake( 0, 0, orderDetailsView.frame.size.width , 45);
        
        closeBtn.frame  =  CGRectMake( headerLbl.frame.size.width - 43, 0, 40, 40);
        
        orderDetailsLabel.frame = CGRectMake(8, 5, 400, 30);
        
        orderIdLabel.frame = CGRectMake(orderDetailsLabel.frame.origin.x, headerLbl.frame.origin.y + headerLbl.frame.size.height + 10, 70 , labelHeight);
        
        orderIdColon.frame = CGRectMake(orderIdLabel.frame.origin.x + orderIdLabel.frame.size.width , orderIdLabel.frame.origin.y + 2,5, 25);
        
        orderIdValueLabel.frame = CGRectMake(orderIdColon.frame.origin.x + orderIdColon.frame.size.width + 10, orderIdLabel.frame.origin.y, 220, labelHeight);
        
        dateAndTimeLabel.frame = CGRectMake(orderIdValueLabel.frame.origin.x + orderIdValueLabel.frame.size.width + 250, orderIdLabel.frame.origin.y,100 , labelHeight);
        
        dateAndTimeColon.frame = CGRectMake(dateAndTimeLabel.frame.origin.x + dateAndTimeLabel.frame.size.width , dateAndTimeLabel.frame.origin.y + 2,5, 25);
        
        dateAndTimeValueLabel.frame = CGRectMake(dateAndTimeColon.frame.origin.x + dateAndTimeColon.frame.size.width + 10, dateAndTimeLabel.frame.origin.y, 200, labelHeight);
        
        //
        snoLabel.frame = CGRectMake(orderIdLabel.frame.origin.x ,orderIdLabel.frame.origin.y + orderIdLabel.frame.size.height + 10,45,labelHeight);
        
        skuidLabel.frame = CGRectMake(snoLabel.frame.origin.x + snoLabel.frame.size.width + 2 ,snoLabel.frame.origin.y ,80,labelHeight);
        
        descriptionLabel.frame = CGRectMake(skuidLabel.frame.origin.x + skuidLabel.frame.size.width + 2 ,snoLabel.frame.origin.y ,140,labelHeight);
        
        uomLabel.frame = CGRectMake(descriptionLabel.frame.origin.x + descriptionLabel.frame.size.width + 2 ,snoLabel.frame.origin.y ,90,labelHeight);
        
        quantityLabel.frame = CGRectMake(uomLabel.frame.origin.x + uomLabel.frame.size.width + 2 ,snoLabel.frame.origin.y ,100,labelHeight);
        
        mrpLabel.frame = CGRectMake(quantityLabel.frame.origin.x + quantityLabel.frame.size.width + 2 ,snoLabel.frame.origin.y ,100,labelHeight);
        
        discountLabel.frame = CGRectMake(mrpLabel.frame.origin.x + mrpLabel.frame.size.width + 2 ,snoLabel.frame.origin.y ,100,labelHeight);
        
        salePriceLabel.frame = CGRectMake(discountLabel.frame.origin.x + discountLabel.frame.size.width + 2 ,snoLabel.frame.origin.y ,100,labelHeight);
        
        costLabel.frame = CGRectMake(salePriceLabel.frame.origin.x + salePriceLabel.frame.size.width + 2 ,snoLabel.frame.origin.y ,90,labelHeight);
        
        orderItemDetailsTable.frame = CGRectMake(snoLabel.frame.origin.x, snoLabel.frame.origin.y + snoLabel.frame.size.height,costLabel.frame.origin.x + costLabel.frame.size.width - (snoLabel.frame.origin.x ),200);
        //
        customerNameLabel.frame = CGRectMake(orderIdLabel.frame.origin.x, orderItemDetailsTable.frame.origin.y + orderItemDetailsTable.frame.size.height + 10, 130, labelHeight);
        
        customerColon.frame = CGRectMake(customerNameLabel.frame.origin.x + customerNameLabel.frame.size.width , customerNameLabel.frame.origin.y + 2,5, 25);
        
        customerNameValueLabel.frame = CGRectMake(customerColon.frame.origin.x + customerColon.frame.size.width + 10, customerNameLabel.frame.origin.y , 200, labelHeight);
        
        //
        contactNumberLabel.frame = CGRectMake(customerNameLabel.frame.origin.x , customerNameLabel.frame.origin.y + customerNameLabel.frame.size.height, customerNameLabel.frame.size.width, labelHeight);
        
        contactNumberColon.frame = CGRectMake(contactNumberLabel.frame.origin.x + contactNumberLabel.frame.size.width, contactNumberLabel.frame.origin.y + 2,5, 25);
        
        contactNumberValueLabel.frame = CGRectMake(customerNameValueLabel.frame.origin.x , contactNumberLabel.frame.origin.y , 200, labelHeight);
        
        
        
        //
        paymentStatusLabel.frame = CGRectMake(customerNameLabel.frame.origin.x, contactNumberLabel.frame.origin.y + contactNumberLabel.frame.size.height,customerNameLabel.frame.size.width,labelHeight);
        
        paymentStatusColon.frame = CGRectMake(paymentStatusLabel.frame.origin.x + paymentStatusLabel.frame.size.width, paymentStatusLabel.frame.origin.y + 2, 5, 25);
        paymentStatusValueLabel.frame = CGRectMake(customerNameValueLabel.frame.origin.x, paymentStatusLabel.frame.origin.y , 200, labelHeight);
        
        
        
        //
        paymentModeLabel.frame = CGRectMake(customerNameLabel.frame.origin.x, paymentStatusLabel.frame.origin.y + paymentStatusLabel.frame.size.height,customerNameLabel.frame.size.width,labelHeight);
        
        paymentModeColon.frame = CGRectMake(paymentModeLabel.frame.origin.x + paymentModeLabel.frame.size.width, paymentModeLabel.frame.origin.y + 2, 5, 25);
        
        paymentModeValueLabel.frame = CGRectMake(customerNameValueLabel.frame.origin.x, paymentModeLabel.frame.origin.y , 200, labelHeight);
        
        //
        paidAmountLabel.frame = CGRectMake(customerNameLabel.frame.origin.x, paymentModeLabel.frame.origin.y + paymentModeLabel.frame.size.height,customerNameLabel.frame.size.width,labelHeight);
        
        paidAmountColon.frame = CGRectMake(paidAmountLabel.frame.origin.x + paidAmountLabel.frame.size.width, paidAmountLabel.frame.origin.y + 2, 5, 25);
        
        paidAmountValueLabel.frame = CGRectMake(customerNameValueLabel.frame.origin.x, paidAmountLabel.frame.origin.y , 200, labelHeight);
        
        
        //
        pagenationTxt.frame = CGRectMake(paidAmountLabel.frame.origin.x,orderDetailsView.frame.size.height - 50,90,40);
        
        dropDownBtn.frame = CGRectMake((pagenationTxt.frame.origin.x+pagenationTxt.frame.size.width-45), pagenationTxt.frame.origin.y-5, 45, 50);
        
        goButton.frame  = CGRectMake(pagenationTxt.frame.origin.x+pagenationTxt.frame.size.width+15,pagenationTxt.frame.origin.y,80, 40);
        
        //
        subTotalLabel.frame = CGRectMake(dateAndTimeLabel.frame.origin.x,customerNameLabel.frame.origin.y,160 , labelHeight);
        subTotalColon.frame = CGRectMake(subTotalLabel.frame.origin.x + subTotalLabel.frame.size.width, subTotalLabel.frame.origin.y + 2, 5, 25);
        subTotalValueLabel.frame = CGRectMake(subTotalColon.frame.origin.x + subTotalColon.frame.size.width + 10, subTotalLabel.frame.origin.y , 140, labelHeight);
        
        
        //
        taxLabel.frame = CGRectMake(subTotalLabel.frame.origin.x,contactNumberLabel.frame.origin.y,160 , labelHeight);
        taxColon.frame = CGRectMake(subTotalLabel.frame.origin.x + subTotalLabel.frame.size.width, taxLabel.frame.origin.y + 2, 5, 25);
        taxValueLabel.frame = CGRectMake(subTotalValueLabel.frame.origin.x , taxLabel.frame.origin.y , 140, labelHeight);
        
        //
        shipmentChargeLabel.frame = CGRectMake(subTotalLabel.frame.origin.x,paymentStatusLabel.frame.origin.y,160 , labelHeight);
        shipmentChargeColon.frame = CGRectMake(shipmentChargeLabel.frame.origin.x + shipmentChargeLabel.frame.size.width, shipmentChargeLabel.frame.origin.y + 2, 5, 25);
        shipmentChargeValueLabel.frame = CGRectMake(subTotalValueLabel.frame.origin.x , shipmentChargeLabel.frame.origin.y , 140, labelHeight);
        
        //
        separationLabel.frame = CGRectMake(shipmentChargeLabel.frame.origin.x , shipmentChargeLabel.frame.origin.y + shipmentChargeLabel.frame.size.height + 10, costLabel.frame.origin.x + costLabel.frame.size.width - (shipmentChargeLabel.frame.origin.x), 1);
        //
        netBillAmountLabel.frame = CGRectMake(separationLabel.frame.origin.x, paymentModeLabel.frame.origin.y + 10, 160, labelHeight);
        netBillAmountColon.frame = CGRectMake(netBillAmountLabel.frame.origin.x + netBillAmountLabel.frame.size.width, netBillAmountLabel.frame.origin.y + 2, 5, 25);
        netBillAmountvalueLabel.frame = CGRectMake(subTotalValueLabel.frame.origin.x , netBillAmountLabel.frame.origin.y , 140, labelHeight);
        
        
        //
        separationLabel2.frame = CGRectMake(separationLabel.frame.origin.x , netBillAmountLabel.frame.origin.y + netBillAmountLabel.frame.size.height + 5,separationLabel.frame.size.width,1);
        
        makeBillButton.frame = CGRectMake(separationLabel2.frame.origin.x, pagenationTxt.frame.origin.y,120 , 40);
        
        cancelButton.frame = CGRectMake(makeBillButton.frame.origin.x + makeBillButton.frame.size.width + 60, makeBillButton.frame.origin.y,120 , 40);
        
    }
    
    //Handling the OrderDetails Dic
    @try {
        pagenationTxt.text = @"1";
        
        for (NSDictionary * itemDetailsDic in [OrderDetailsDictionary valueForKey:ITEM_DETAILS]) {
            
            [itemListArray addObject:itemDetailsDic];
        }
        
        NSDictionary * orderDic = [OrderDetailsDictionary valueForKey:ORDER];
        
        orderIdValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDic valueForKey:ORDER_ID] defaultReturn:@""];
        
        dateAndTimeValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDic valueForKey:ORDER_PLACED_DATE] defaultReturn:@""];
        
        
        
        
        taxValueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDic valueForKey:ORDER_TAX] defaultReturn:@"0.00"] floatValue]];
        
        shipmentChargeValueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDic valueForKey:SHIPMENT_CHARGES] defaultReturn:@"0.00"] floatValue]];
        
        if([[self checkGivenValueIsNullOrNil:[orderDic valueForKey:sub_total] defaultReturn:@"0.00"] floatValue] > 0)
            subTotalValueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDic valueForKey:sub_total] defaultReturn:@"0.00"] floatValue]];
        else
            subTotalValueLabel.text = [NSString stringWithFormat:@"%.2f", ([[self checkGivenValueIsNullOrNil:[orderDic valueForKey:ORDER_TOTAL_COST] defaultReturn:@"0.00"] floatValue] - (taxValueLabel.text).floatValue -  (shipmentChargeValueLabel.text).floatValue)];
        
        
        netBillAmountvalueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDic valueForKey:TOTAL_ORDER_AMOUNT] defaultReturn:@"0.00"] floatValue]];
        
        
        customerNameValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDic valueForKey:SHIPMENT_NAME] defaultReturn:@""];
        
        contactNumberValueLabel.text = [NSString stringWithFormat:@"%@",orderDic[MOBILE_NUM]];
        
        paymentStatusValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDic valueForKey:ORDER_STATUS] defaultReturn:@""];
        
        paymentModeValueLabel.text = [self checkGivenValueIsNullOrNil:[orderDic valueForKey:PAYMENT_MODE] defaultReturn:@""];
        
        paidAmountValueLabel.text = [NSString stringWithFormat:@"%.2f", [[self checkGivenValueIsNullOrNil:[orderDic valueForKey:PAID_AMT] defaultReturn:@"0.00"] floatValue]];
        
//        [NSString stringWithFormat:@"%@",orderDic[PAID_AMT]];
    } @catch (NSException *exception) {
        
    }
    
    
    
    
    [orderDetailsTransparentView addSubview:orderDetailsView];
    [orderDetailsView addSubview:headerLbl];
    [orderDetailsView addSubview:orderDetailsLabel];
    [orderDetailsView addSubview:closeBtn];
    
    [orderDetailsView addSubview:orderIdLabel];
    [orderDetailsView addSubview:orderIdColon];
    [orderDetailsView addSubview:orderIdLabel];
    [orderDetailsView addSubview:orderIdValueLabel];
    
    [orderDetailsView addSubview:dateAndTimeLabel];
    [orderDetailsView addSubview:dateAndTimeColon];
    [orderDetailsView addSubview:dateAndTimeValueLabel];
    
    
    [orderDetailsView addSubview:snoLabel];
    [orderDetailsView addSubview:skuidLabel];
    [orderDetailsView addSubview:descriptionLabel];
    [orderDetailsView addSubview:uomLabel];
    [orderDetailsView addSubview:quantityLabel];
    [orderDetailsView addSubview:mrpLabel];
    [orderDetailsView addSubview:discountLabel];
    [orderDetailsView addSubview:salePriceLabel];
    [orderDetailsView addSubview:costLabel];
    
    [orderDetailsView addSubview:orderItemDetailsTable];
    
    [orderDetailsView addSubview:customerNameLabel];
    [orderDetailsView addSubview:customerColon];
    [orderDetailsView addSubview: customerNameValueLabel];
    
    [orderDetailsView addSubview:contactNumberLabel];
    [orderDetailsView addSubview:contactNumberColon];
    [orderDetailsView addSubview:contactNumberValueLabel];
    
    
    [orderDetailsView addSubview:paymentStatusLabel];
    [orderDetailsView addSubview:paymentStatusColon];
    [orderDetailsView addSubview: paymentStatusValueLabel];
    
    
    [orderDetailsView addSubview:paymentModeLabel];
    [orderDetailsView addSubview:paymentModeColon];
    [orderDetailsView addSubview: paymentModeValueLabel];
    
    
    [orderDetailsView addSubview:paidAmountLabel];
    [orderDetailsView addSubview:paidAmountColon];
    [orderDetailsView addSubview: paidAmountValueLabel];
    
    
    [orderDetailsView addSubview:pagenationTxt];
    [orderDetailsView addSubview:dropDownBtn];
    [orderDetailsView addSubview:goButton];
    
    [orderDetailsView addSubview:subTotalLabel];
    [orderDetailsView addSubview:subTotalColon];
    [orderDetailsView addSubview:subTotalValueLabel];
    
    [orderDetailsView addSubview:taxLabel];
    [orderDetailsView addSubview:taxColon];
    [orderDetailsView addSubview:taxValueLabel];
    
    
    [orderDetailsView addSubview:shipmentChargeLabel];
    [orderDetailsView addSubview:shipmentChargeColon];
    [orderDetailsView addSubview:shipmentChargeValueLabel];
    
    
    [orderDetailsView addSubview:separationLabel];
    
    [orderDetailsView addSubview:netBillAmountLabel];
    [orderDetailsView addSubview:netBillAmountColon];
    [orderDetailsView addSubview:netBillAmountvalueLabel];
    
    
    [orderDetailsView addSubview:separationLabel2];
    
    [orderDetailsView addSubview:makeBillButton];
    [orderDetailsView addSubview:cancelButton];
    
    [self.view addSubview:orderDetailsTransparentView];
    
    [WebServiceUtility setFontFamily:TEXT_FONT_NAME forView:orderDetailsView andSubViews:YES fontSize:16.0f cornerRadius:0];
    
    orderDetailsLabel.font = [UIFont fontWithName:TEXT_FONT_NAME size:18.0f];
}


/*
 * @description  showing the quantity list
 * @date         20/01/2018
 * @method       showQuantityList
 * @author       Bhargav.v
 * @param        UIButton
 * @param
 * @return
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showPagenationData:(UIButton*)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if (orderListArr == nil || orderListArr.count == 0) {
            
            float y_axis = self.view.frame.size.height - 120;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"no_orders_Available", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:1];
        }
        else if (orderListArr.count) {
            float tableHeight = orderListArr.count * 28;
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
                tableHeight = orderListArr.count * 28;
            
            if(orderListArr.count > 5)
                tableHeight = (tableHeight/orderListArr.count) * 5;
            
            [self showPopUpForTables:ordersPagenationTable  popUpWidth:(pagenationTxt.frame.size.width ) popUpHeight:tableHeight presentPopUpAt:pagenationTxt  showViewIn:orderDetailsView permittedArrowDirections:UIPopoverArrowDirectionLeft];
        }
        else
            [popOver dismissPopoverAnimated:YES];
        
    } @catch (NSException *exception) {
        [HUD setHidden:YES];
        
        NSLog(@"----exception in the stockReceiptView in showAllOutletId:----%@",exception);
        NSLog(@"------exception while creating the popUp in stockView------%@",exception);
        
    }
}

/**
 * @description  here we are calling the order details based on its orderId....
 * @date
 * @method       goButtonPressed:--
 * @author       Bhargav.v
 * @param        UIButton
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments ....
 *
 * @verified By
 * @verified On
 *
 */

-(void)goButtonPressed:(UIButton *)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        if ((pagenationTxt.text).length > 0) {
            
            int orderIndex = (int)(pagenationTxt.text).integerValue - 1;
            
            if (onlineOrderBtn.tag == 1) {
                
                NSDictionary * detailsDic = onLineArray[orderIndex];
                [self callingOutletOrderIdDetails:detailsDic[ORDER_ID] orderChannel:detailsDic[ORDER_CHANNEL]];
            }
            else if (mobileOrderBtn.tag == 2) {
                
                NSDictionary * detailsDic = mobileArray[orderIndex];
                [self callingOutletOrderIdDetails:detailsDic[ORDER_ID] orderChannel:detailsDic[ORDER_CHANNEL]];
            }
            else if (telePhoneOrderBtn.tag == 3) {
                
                NSDictionary * detailsDic = telePhoneArray[orderIndex];
                [self callingOutletOrderIdDetails:detailsDic[ORDER_ID] orderChannel:detailsDic[ORDER_CHANNEL]];
            }
            
        }
        
        else {
            
            float y_axis = self.view.frame.size.height - 120;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"please_select_order_List",nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:360 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:1];
        }
        
    }
    @catch(NSException * exception) {
        
    }
}

/**
 * @description  By Making Bill we are adding the Items to the Billing Cart to place Bill According Order Type....
 * @date         05/03/2018
 * @method       makeBillButtonPressed
 * @author       Bhargav.v
 * @param        UIButton...
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 22/03/2018 && 26/06/2018
 * @reason       handle the payments in transactions & customer mobile number.
 *
 * @verified By
 * @verified On
 *
 */

-(void)makeBillButtonPressed:(UIButton *)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        
        float totalOrderAmountPaid = 0;
        
        if (cartTotalItems.count && cartTotalItems != nil) {
            
            float y_axis = self.view.frame.size.height - 120;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"please_clear_the_on_going_bill_first",nil)];//please_complete_Pending_bill
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:360 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:1];
        }
        else {
            //added on 21/03/2018....
            isNewReturnBill = true;
            //upto here on 21/03/2018....
            if (itemListArray.count && itemListArray !=nil) {
                
                salesOrderIdStr = [self checkGivenValueIsNullOrNil:[OrderDetailsDictionary valueForKey:ORDER_ID] defaultReturn:@""];
                
                
                if(([OrderDetailsDictionary.allKeys containsObject:ORDER_TRANSACTIONS]) && (![[OrderDetailsDictionary valueForKey:ORDER_TRANSACTIONS] isKindOfClass: [NSNull class]])){
                    
                    if(paymentTransactionArray == nil){
                        
                        paymentTransactionArray = [NSMutableArray new];
                    }
                    else if(paymentTransactionArray.count){
                        
                        [paymentTransactionArray removeAllObjects];
                    }
                    
                    for(NSDictionary * paymentDic in  [OrderDetailsDictionary valueForKey:ORDER_TRANSACTIONS]){
                        
                        [self checkGivenValueIsNullOrNil:[paymentDic valueForKey:PAID_AMT] defaultReturn:@"0.00"];
                        
                        NSMutableDictionary * transDic = [NSMutableDictionary new];
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:MODE_OF_PAY] defaultReturn:@""] forKey:MODE_OF_PAY];
                        
                        
                        totalOrderAmountPaid = totalOrderAmountPaid + [[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:PAID_AMT] defaultReturn:@"0.00"] floatValue];
                        //amount informations....
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:PAID_AMT] defaultReturn:@"0.00"] forKey:PAID_AMT];
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:CHANGE_RETURN] defaultReturn:@"0.00"] forKey:CHANGE_RETURN];
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:RECEIVED_AMOUNT] defaultReturn:@"0.00"] forKey:RECEIVED_AMOUNT];
                        
                        //card infomations...
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:CARD_TYPE] defaultReturn:@""] forKey:CARD_TYPE];
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:CARD_INFO] defaultReturn:@"0.00"] forKey:CARD_INFO];
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:APPROVAL_CODE] defaultReturn:@"0.00"] forKey:APPROVAL_CODE];
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:BANK_NAME] defaultReturn:@"0.00"] forKey:BANK_NAME];
                        
                        [transDic setValue:[self checkGivenValueIsNullOrNil:[paymentDic valueForKey:COUPON_NO] defaultReturn:@""] forKey:COUPON_NO];
                        
                        [transDic setValue:[WebServiceUtility getCurrentDate] forKey:@"dateTime"];
                        
                        
                        [paymentTransactionArray addObject:transDic];
                    }
                }
                
                
                for(int i = 0; i < itemListArray.count; i++){
                    
                    NSMutableDictionary * orderItemTempdic = [itemListArray[i] mutableCopy];
                    
                    NSMutableArray * mutTaxArr = [NSMutableArray new];
                    
                    if([[self checkGivenValueIsNullOrNil:[orderItemTempdic valueForKey:CGST_RATE] defaultReturn:@"0.00"] floatValue] > 0){
                        
                        NSMutableDictionary * mutDic = [NSMutableDictionary new];
                        
                        [mutDic setValue:[orderItemTempdic valueForKey:CGST_RATE] forKey:TAX_RATE];
                        [mutDic setValue:@"CGST" forKey:TAX_CODE];
                        [mutDic setValue:percentage forKey:TAX_TYPE];
                        [mutDic setValue:@"" forKey:@"taxCategory"];
                        
                        [mutTaxArr addObject:mutDic];
                    }
                    
                    if([[self checkGivenValueIsNullOrNil:[orderItemTempdic valueForKey:SGST_RATE] defaultReturn:@"0.00"] floatValue] > 0){
                        
                        NSMutableDictionary * mutDic = [NSMutableDictionary new];
                        
                        [mutDic setValue:[orderItemTempdic valueForKey:SGST_RATE] forKey:TAX_RATE];
                        [mutDic setValue:@"SGST" forKey:TAX_CODE];
                        [mutDic setValue:percentage forKey:TAX_TYPE];
                        [mutDic setValue:@"" forKey:@"taxCategory"];
                        
                        [mutTaxArr addObject:mutDic];
                    }
                    
                    if([[self checkGivenValueIsNullOrNil:[orderItemTempdic valueForKey:ISGST_RATE] defaultReturn:@"0.00"] floatValue] > 0){
                        
                        NSMutableDictionary * mutDic = [NSMutableDictionary new];
                        
                        [mutDic setValue:[orderItemTempdic valueForKey:ISGST_RATE] forKey:TAX_RATE];
                        [mutDic setValue:@"IGST" forKey:TAX_CODE];
                        [mutDic setValue:percentage forKey:TAX_TYPE];
                        [mutDic setValue:@"" forKey:@"taxCategory"];
                        
                        [mutTaxArr addObject:mutDic];
                    }
                    
                    if([[self checkGivenValueIsNullOrNil:[orderItemTempdic valueForKey:OTHER_TAX_RATE] defaultReturn:@"0.00"] floatValue] > 0){
                        
                        NSMutableDictionary * mutDic = [NSMutableDictionary new];
                        
                        [mutDic setValue:[orderItemTempdic valueForKey:OTHER_TAX_RATE] forKey:TAX_RATE];
                        [mutDic setValue:@"Other Tax" forKey:TAX_CODE];
                        [mutDic setValue:percentage forKey:TAX_TYPE];
                        [mutDic setValue:@"Other Tax" forKey:@"taxCategory"];
                        
                        [mutTaxArr addObject:mutDic];
                    }
                    
                    [orderItemTempdic setValue:mutTaxArr forKey:TAX];
                    
                    selected_SKID = [NSString stringWithFormat:@"%@",orderItemTempdic[@"skuId"]];
                    NSArray  * temptaxArr = [orderItemTempdic valueForKey:@"tax"];
                    NSString * itemString = @"";
                    
                    if (temptaxArr.count > 0) {
                        
                        itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",orderItemTempdic[@"item_name"],@"#",orderItemTempdic[@"item_name"],@"#",[orderItemTempdic[@"ordered_quantity"] floatValue],@"#",[orderItemTempdic[@"item_price"] floatValue], @"#", [NSString stringWithFormat:@"%@",[orderItemTempdic[@"tax"][0] valueForKey:@"taxCategory"]], @"#", [NSString stringWithFormat:@"%.2f",[[orderItemTempdic[@"tax"][0] valueForKey:@"taxRate"] doubleValue]], @"#", [orderItemTempdic valueForKey:@"pluCode"], @"#", [[orderItemTempdic valueForKey:@"mrp"] floatValue]];
                    }
                    
                    else {
                        
                        itemString = [NSString stringWithFormat:@"%@%@%@%@%.2f%@%.2f%@%@%@%@%@%@%@%.2f",orderItemTempdic[@"item_name"],@"#",orderItemTempdic[@"item_name"],@"#",[orderItemTempdic[@"ordered_quantity"] floatValue],@"#",[orderItemTempdic[@"item_price"] floatValue], @"#",[NSString stringWithFormat:@"%@",@""], @"#", [NSString stringWithFormat:@"%.2f",0.00], @"#", [orderItemTempdic valueForKey:@"pluCode"], @"#", [[orderItemTempdic valueForKey:@"mrp"] floatValue]];
                    }
                    
                    selected_desc   = [[NSString stringWithFormat:@"%@",orderItemTempdic[@"item_name"]] copy];
                    selected_price  = [[NSString stringWithFormat:@"%.2f",[orderItemTempdic[@"item_price"] floatValue]] copy];
                    selectedPluCode = [orderItemTempdic[@"pluCode"] copy];
                    
                    [self getSkuDetailsHandler:itemString productInfo:orderItemTempdic];
                }
                
                
                
                NSMutableDictionary * applyCapanignsDic = [NSMutableDictionary new];
                
                NSMutableArray * discountIdArrayList = [NSMutableArray new];
                
                NSMutableArray * dealDiscountArr = [NSMutableArray new];
                NSMutableArray * dealsListArr = [NSMutableArray new];
                NSMutableArray * dealSkuListAllArr = [NSMutableArray new];
                
                NSMutableArray * appliedOfferIdsArr = [NSMutableArray new];
                NSMutableArray * appliedDealIdListArr = [NSMutableArray new];
                NSMutableArray * dealPromoSkusArr = [NSMutableArray new];
                
                
                NSMutableArray * mProductOfferPriceArr = [NSMutableArray new];
                NSMutableArray * offerListArr = [NSMutableArray new];
                
                
                //                    NSMutableArray * appliedDealIdListArr = [NSMutableArray new];
                //                    NSMutableArray * appliedOffersArr = [NSMutableArray new];
                //                    NSMutableArray * availableDealsArr = [NSMutableArray new];
                //                    NSMutableArray * availableOffersArr = [NSMutableArray new];
                
                
                for(int i = 0; i < itemListArray.count; i++){
                    
                    NSMutableDictionary * orderItemTempdic = [itemListArray[i] mutableCopy];
                    
                    
                    if (([orderItemTempdic.allKeys containsObject:DISCOUNT_ID] && ![orderItemTempdic[DISCOUNT_ID] isKindOfClass:[NSNull class]])){
                        
                        
                        for(NSString * str in [orderItemTempdic[DISCOUNT_ID] componentsSeparatedByString:@","]){
                            
                            [appliedOfferIdsArr addObject:str];
                            
                            
                            NSMutableDictionary * tempOfferDic = [NSMutableDictionary new];
                            
                            [tempOfferDic setValue:str forKey:OFFER_ID];
                            [tempOfferDic setValue:[self checkGivenValueIsNullOrNil:orderItemTempdic[DISCOUNT_DESC] defaultReturn:@""] forKey:OFFER_ID];
                            
                            
                            [offerListArr addObject:tempOfferDic];
                            
                        }
                        [mProductOfferPriceArr addObject:[self checkGivenValueIsNullOrNil:orderItemTempdic[DISCOUNT] defaultReturn:@"0.0"]];
                        
                        [dealDiscountArr addObject:@"0"];
                        [dealSkuListAllArr addObject:@"0"];
                        
                    }
                    
                    if(itemDiscountArr.count > i)
                        itemDiscountArr[i] = [self checkGivenValueIsNullOrNil:orderItemTempdic[MANUAL_DISCOUNT] defaultReturn:@"0.0"];
                }
                
                
                [applyCapanignsDic setValue:discountIdArrayList forKey:@"discountIdArrayList"];
                
                [applyCapanignsDic setValue:dealDiscountArr forKey:@"dealDiscount"];
                [applyCapanignsDic setValue:mProductOfferPriceArr forKey:@"mProductOfferPrice"];
                
                [applyCapanignsDic setValue:dealsListArr forKey:@"dealsList"];
                [applyCapanignsDic setValue:offerListArr forKey:@"offerList"];
                
                [applyCapanignsDic setValue:appliedOfferIdsArr forKey:@"appliedOfferIdsArr"];
                [applyCapanignsDic setValue:appliedDealIdListArr forKey:@"appliedDealIdList"];
                [applyCapanignsDic setValue:dealPromoSkusArr forKey:@"dealPromoSkusArr"];
                
                [self getDealsAndOffersSuccessResponse:applyCapanignsDic];
                
            }
            else {
                
                float y_axis = self.view.frame.size.height - 120;
                
                NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"no_items_in_the_order_toMake_bill",nil)];
                
                [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 400)/2   verticalAxis:y_axis  msgType:@""  conentWidth:360 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:1];
                
            }
            
            
            [orderDetailsTransparentView removeFromSuperview];
            
            
            //added by Srinivasulu on 22/03/2018 && 26/06/2018....  paymentTransactionArray
            
            refreshOnlineOrderBtn.tag = 4;
            
            if(!isOrderedBill){//-- added on -- 12/02/2019...
                
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:1];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:2];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:3];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:4];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:5];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:6];
            [segmentedControl setEnabled:FALSE forSegmentAtIndex:7];
           
            deliveryType = @"DD";
            radioBtn1.tag = 0;
            [radioBtn1 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
            [radioBtn2 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
            
            if( paymentTransactionArray.count == 0 || (totalOrderAmountPaid < [[self checkGivenValueIsNullOrNil:[OrderDetailsDictionary valueForKey:TOTAL_ORDER_AMOUNT] defaultReturn:@"0.00"] floatValue])){
                
                radioBtn3.tag = 4;
                [radioBtn3 setImage:[UIImage imageNamed:@"Credit_Select.png"] forState:UIControlStateNormal];
                
                deliveryType = @"DD-CB";
                radioBtn1.tag = 0;
                [radioBtn1 setImage:[UIImage imageNamed:@"unchecked2.png"] forState:UIControlStateNormal];
                [radioBtn2 setImage:[UIImage imageNamed:@"checked2.png"] forState:UIControlStateNormal];
            }
            
            }//-- added on -- 12/02/2019...
            
            
            
            custmerPhNum.text = [self checkGivenValueIsNullOrNil:[[OrderDetailsDictionary valueForKey:ORDER] valueForKey:CUSTOMER_CONTACT_NUM] defaultReturn:@""];
            
            if(!(custmerPhNum.text).length)
                custmerPhNum.text = [self checkGivenValueIsNullOrNil:[[OrderDetailsDictionary valueForKey:ORDER] valueForKey:BILLING_MOBILE_NO] defaultReturn:@""];
            
            
            if(!(custmerPhNum.text).length)
                custmerPhNum.text = contactNumberValueLabel.text;
            
            orderShipmentCharges = (shipmentChargeValueLabel.text).floatValue;
            
            //upto here on 22/03/2018 && 26/06/2018....
            
        }
        
    } @catch (NSException *exception) {
        refreshOnlineOrderBtn.tag = 2;
        
        [segmentedControl setEnabled:true forSegmentAtIndex:1];
        [segmentedControl setEnabled:true forSegmentAtIndex:2];
        [segmentedControl setEnabled:true forSegmentAtIndex:3];
        [segmentedControl setEnabled:true forSegmentAtIndex:4];
        [segmentedControl setEnabled:true forSegmentAtIndex:5];
        [segmentedControl setEnabled:true forSegmentAtIndex:6];
        [segmentedControl setEnabled:true forSegmentAtIndex:7];
        
        if(paymentTransactionArray.count)
            [paymentTransactionArray removeAllObjects];
        
    } @finally {
        
    }
}

/**
 * @description  here we are close the complete orderdetails screen...
 * @date
 * @method       closeOrderDetailsView:--
 * @author       Bhargav.v
 * @param        UIButton
 * @param
 * @return       void
 *
 * @modified By  Srinivasulu on 19/03/2018....
 * @reason       changed comments....
 *
 * @verified By
 * @verified On
 *
 */

-(void)closeOrderDetailsView:(UIButton *)sender {
    
    //Play Audio for button touch....
    AudioServicesPlaySystemSound (soundFileObject);
    
    @try {
        [orderDetailsTransparentView removeFromSuperview];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}



#pragma -mark methods used for customerPurchases

/**
 * @description  here we are calling the services for customer purchase list && if they are exists we are showing them in dropdown.
 * @date         21/05/2018
 * @method       showCustomerPurchasesList:
 * @author       Srinivasulu
 * @param        UIButton
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)showCustomerPurchasesList:(UIButton *)sender {
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        
        if((custmerPhNum.text).length < 10){
            
            float y_axis = self.view.frame.size.height - 350;
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",NSLocalizedString(@"please_enter_valide_phone_no", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 500)/2   verticalAxis:y_axis  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:3];
            
            return;
        }
        else if(listOfCustomerPurchasesArr.count == 0 || listOfCustomerPurchasesArr == nil){
            
            listOfCustomerPurchasesArr = [NSMutableArray new];
            [self callingGetCustomerPurcahses];
            
            return;
        }
        else{
            
            float tableHeight = listOfCustomerPurchasesArr.count * 40;
            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
                tableHeight = listOfCustomerPurchasesArr.count * 33;
            
            if(departmentArr.count > 5)
                tableHeight = (tableHeight/listOfCustomerPurchasesArr.count) * 5;
            
            UIImage  * buttonImage_ = [UIImage imageNamed:@"down_gray_arrow.png"];
            [showCustomerPurchasesBtn setBackgroundImage:buttonImage_ forState:UIControlStateNormal];
            
            showCustomerPurchasesBtn.frame = CGRectMake( customerPurchasesLbl.frame.origin.x + customerPurchasesLbl.frame.size.width, customerPurchasesLbl.frame.origin.y  + customerPurchasesLbl.frame.size.height/2  - 5, customerPurchasesLbl.frame.size.height, customerPurchasesLbl.frame.size.height/2);
            
            listOfCustomerPurchasesTbl.frame = CGRectMake( customerPurchasedSkuIdLbl.frame.origin.x, customerPurchasedSkuIdLbl.frame.origin.y + customerPurchasedSkuIdLbl.frame.size.height + 2, (customerPurchasedSkuValueLbl.frame.origin.x + customerPurchasedSkuValueLbl.frame.size.width) - customerPurchasedSkuIdLbl.frame.origin.x, tableHeight);
            
            verticalScrollView.contentSize = CGSizeMake( verticalScrollView.frame.size.width,  listOfCustomerPurchasesTbl.frame.origin.y + listOfCustomerPurchasesTbl.frame.size.height + 10);
            //            [self showPopUpForTables:listOfCustomerPurchasesTbl  popUpWidth:customerPurchasesTxt.frame.size.width  popUpHeight:tableHeight presentPopUpAt:customerPurchasesTxt  showViewIn:customerSpecificView permittedArrowDirections:UIPopoverArrowDirectionUp];
        }
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are calling the services to customer purchase list.
 * @date         21/05/2018
 * @method       callingGetCustomerPurcahses
 * @author       Srinivasulu
 * @param
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)callingGetCustomerPurcahses{
    
    @try {
        
        [HUD setHidden:NO];
        [HUD setLabelText:NSLocalizedString(@"getting_custome_purchases",nil)];
        
        NSMutableDictionary * customerPurchasesRequestDic = [[NSMutableDictionary alloc]init];
        
        [customerPurchasesRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [customerPurchasesRequestDic setValue:presentLocation forKey:kLocation];
        [customerPurchasesRequestDic setValue:presentLocation forKey:SALE_LOCATION];
        [customerPurchasesRequestDic setValue:NEGATIVE_ONE forKey:START_INDEX];
        [customerPurchasesRequestDic setValue:custmerPhNum.text forKey:MOBILE_NO];
        [customerPurchasesRequestDic setValue:@YES forKey:REQUIRED_BILLING_DETAILS];
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:customerPurchasesRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.getBillsDelegate = self;
        [serviceController getCustomerPurchases:customerPurchasesRequestString];
    }
    @catch (NSException *exception) {
        
        [HUD setHidden:YES];
    }
}

/**
 * @description  here we are handling the success repsonse received from services.
 * @date         21/05/2018
 * @method       getCustomerPurchasesSuccesssResponse:--
 * @author       Srinivasulu
 * @param        NSDictionary
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getCustomerPurchasesSuccesssResponse:(NSDictionary *)successDictionary{
    
    @try {
        
        if([successDictionary.allKeys containsObject:ITEMS_LIST] && ! [[successDictionary valueForKey:ITEMS_LIST] isKindOfClass:ITEMS_LIST])
            if([[successDictionary valueForKey:ITEMS_LIST] count])
                listOfCustomerPurchasesArr = [[successDictionary valueForKey:ITEMS_LIST] mutableCopy];
        
    } @catch (NSException *exception) {
        
    } @finally {
        if(listOfCustomerPurchasesArr.count){
            
            [self showCustomerPurchasesList:nil];
        }
        else{
            float y_axis = self.view.frame.size.height - 120;
            
            y_axis = BillField.frame.origin.y + BillField.frame.size.height;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"no_data_found", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
        }
        
        [HUD setHidden:YES];
    }
}

/**
 * @description  here we are handling the error repsonse received from services.
 * @date         21/05/2018
 * @method       getCustomerPurchasesErrorResponse:--
 * @author       Srinivasulu
 * @param        NSString
 * @param
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)getCustomerPurchasesErrorResponse:(NSString *)errorResponse{
    
    @try {
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",errorResponse];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        
        [HUD setHidden:YES];
    }
}
#pragma -mark new productMenu

-(void)displayNewProductMenu:(UIButton *)sender{
    
    AudioServicesPlaySystemSound(soundFileObject);
    
    @try {
        if(menuCategoriesDic == nil){
            
            if(!isOfflineService){
                
                [self callMenuDetails];
                return;
            }
            else{
                
                if(offline == nil)
                    offline = [[OfflineBillingServices alloc]init];
                menuCategoriesDic =[offline getProductMenuDetailsFromfflineDB];
            }
        }
        
        BOOL isMenuDetailsExist = false;
        
        if(menuCategoriesDic.allKeys.count)
            if([[menuCategoriesDic valueForKey:CATEGORY_NAMES] count] <= 1){
                
                isMenuDetailsExist = true;
            }
        
        if(!menuCategoriesDic.allKeys.count)
            isMenuDetailsExist = true;
        
        
        if(isMenuDetailsExist){
            float y_axis = self.view.frame.size.height - 120;
            
            y_axis = BillField.frame.origin.y + BillField.frame.size.height;
            
            NSString * mesg = [NSString stringWithFormat:@"%@",NSLocalizedString(@"product_menu_details_does_not_exists", nil)];
            
            [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:550 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
            return;
        }
        
        PopOverViewController  * productMenu = [[PopOverViewController alloc] init];
        
        UIView * showProductMenuView = [[UIView alloc] initWithFrame:CGRectMake(productMenuBtn.frame.origin.x,BillField.frame.origin.y,BillField.frame.size.width+ 60, self.view.frame.size.height - (productMenuBtn.frame.origin.y + 100))];
        showProductMenuView.opaque = NO;
        showProductMenuView.backgroundColor = [UIColor blackColor];
        showProductMenuView.layer.borderColor = [UIColor whiteColor].CGColor;
        showProductMenuView.layer.borderWidth = 1.0f;
        
        UICollectionViewFlowLayout * layout = [[UICollectionViewFlowLayout alloc] init];
        layout.sectionInset = UIEdgeInsetsMake( 5, 5, 5, 5);
        layout.itemSize = CGSizeMake(50, 50);
        layout.minimumInteritemSpacing = 1.0;
        layout.minimumLineSpacing = 1.0;
        layout.scrollDirection = UICollectionViewScrollDirectionHorizontal;
        
        menuCategoriesView = [[UICollectionView alloc] initWithFrame:CGRectMake( 0, 0, showProductMenuView.frame.size.width, 120) collectionViewLayout:layout];
        menuCategoriesView.dataSource = self;
        menuCategoriesView.delegate = self;
        [menuCategoriesView registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:@"menu_categories_cell"];
        menuCategoriesView.backgroundColor = [UIColor clearColor];
        menuCategoriesView.pagingEnabled = YES;
        menuCategoriesView.tag = 0;
        //        menuCategoriesView.auto
        
        UICollectionViewFlowLayout * menuCategoriesItemslayout = [[UICollectionViewFlowLayout alloc] init];
        menuCategoriesItemslayout.sectionInset = UIEdgeInsetsMake(5, 5, 5, 5);
        //        menuCategoriesItemslayout.itemSize = CGSizeMake(50, 50);
        menuCategoriesItemslayout.minimumInteritemSpacing = 0.0;
        menuCategoriesItemslayout.minimumLineSpacing = 0.0;
        
        
        menuCategoriesItemsCollectionView = [[UICollectionView alloc] initWithFrame:CGRectMake(0, 0, showProductMenuView.frame.size.width, showProductMenuView.frame.size.height) collectionViewLayout:menuCategoriesItemslayout];
        menuCategoriesItemsCollectionView.dataSource = self;
        menuCategoriesItemsCollectionView.delegate = self;
        [menuCategoriesItemsCollectionView registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:@"menu_categories_item_cell"];
        menuCategoriesItemsCollectionView.backgroundColor = [UIColor blackColor];
        
        
        productMenu.automaticallyAdjustsScrollViewInsets = false;
        
        // sub view frames:
        UILabel * blueBackGroundLbl = [[UILabel alloc] init];
        //        blueBackGroundLbl.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"Gradient.png"]];
        blueBackGroundLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        //        blueBackGroundLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:24.0f];
        //        blueBackGroundLbl.textColor = [UIColor colorWithRed:0.00 green:0.68 blue:0.94 alpha:1.0];
        blueBackGroundLbl.textAlignment = NSTextAlignmentCenter;
        
        CALayer * bottomBorder = [CALayer layer];
        
        bottomBorder.frame = CGRectMake(0.0f, 60.0f, showProductMenuView.frame.size.width, 1.0f);
        bottomBorder.backgroundColor = [UIColor whiteColor].CGColor;
        bottomBorder.opacity = 5.0f;
        [blueBackGroundLbl.layer addSublayer:bottomBorder];
        
        [showProductMenuView addSubview:blueBackGroundLbl];
        [showProductMenuView addSubview:menuCategoriesView];
        [showProductMenuView addSubview:menuCategoriesItemsCollectionView];
        
        blueBackGroundLbl.frame = CGRectMake(0, 0, showProductMenuView.frame.size.width, 50);
        bottomBorder.frame = CGRectMake( 0, blueBackGroundLbl.frame.size.height - 2, blueBackGroundLbl.frame.size.width, 2);
        
        menuCategoriesView.frame = CGRectMake( blueBackGroundLbl.frame.origin.x, blueBackGroundLbl.frame.origin.y, blueBackGroundLbl.frame.size.width - 75, blueBackGroundLbl.frame.size.height);
        
        menuCategoriesItemsCollectionView.frame = CGRectMake(0, blueBackGroundLbl.frame.size.height, showProductMenuView.frame.size.width, showProductMenuView.frame.size.height - blueBackGroundLbl.frame.size.height);
        
        showProductMenuView.clipsToBounds = NO;
        showProductMenuView.layer.cornerRadius = 0.0;
        
        productMenu.view = showProductMenuView;
        
        productMenu.view.clipsToBounds = NO;
        productMenu.view.layer.cornerRadius = 0.0;
        
        if ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) {
            productMenu.preferredContentSize =  CGSizeMake(showProductMenuView.frame.size.width, showProductMenuView.frame.size.height);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:productMenu];
            
            [popover presentPopoverFromRect:productMenuBtn.frame inView:self.view permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];
            
            productmenuInfoPopUp = popover;
            
        }
        
        else {
            
            //            productMenu.contentSizeForViewInPopover = CGSizeMake(160.0, 250.0);
            
            UIPopoverController *popover = [[UIPopoverController alloc] initWithContentViewController:productMenu];
            
            popover.contentViewController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:1.0f];
            
            productmenuInfoPopUp = popover;
            
        }
        
    } @catch (NSException *exception) {
        
    }
}

-(void)callMenuDetails{
    
    @try {
        
        [HUD setHidden:NO];
        [HUD setLabelText:NSLocalizedString(@"getting_custome_purchases",nil)];
        
        menuCategoriesDic = [NSMutableDictionary new];
        
        NSMutableDictionary * menuDeatilsRequestDic = [[NSMutableDictionary alloc]init];
        
        [menuDeatilsRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_NAME];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_LOCATION];
        [menuDeatilsRequestDic setValue:ZERO_CONSTANT forKey:START_INDEX];
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.menuServiceDelegate = self;
        [serviceController getMenuDetailsInfo:customerPurchasesRequestString];
    } @catch (NSException *exception) {
        
        [HUD setHidden:YES];
    }
}

-(void)callMenuCategoriesDetailsInfo:(NSString *)menuNameStr{
    
    @try {
        
        [HUD setHidden:NO];
        [HUD setLabelText:NSLocalizedString(@"getting_custome_purchases",nil)];
        
        menuCategoriesDic = [NSMutableDictionary new];
        
        NSMutableDictionary * menuDeatilsRequestDic = [[NSMutableDictionary alloc]init];
        
        [menuDeatilsRequestDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_NAME];
        [menuDeatilsRequestDic setValue:presentLocation forKey:OUTLET_LOCATION];
        [menuDeatilsRequestDic setValue:menuNameStr forKey:MENU_NAME];
        
        NSError  * err;
        NSData   * jsonData = [NSJSONSerialization dataWithJSONObject:menuDeatilsRequestDic options:0 error:&err];
        NSString * customerPurchasesRequestString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        WebServiceController * serviceController = [WebServiceController new];
        serviceController.menuServiceDelegate = self;
        [serviceController getMenuCategoryDetailsInfo:customerPurchasesRequestString];
    } @catch (NSException *exception) {
        
        [HUD setHidden:YES];
    }
}

-(void)getMenuDetailsSuccessResponse:(NSDictionary *)successDictionary{
    @try {
        
        NSMutableArray * menuNamesArr = [NSMutableArray new];
        
        for(NSDictionary * dic in [successDictionary valueForKey:MENU_CATEGORIES]){
            
            [menuNamesArr addObject:[dic valueForKey:MENU_NAME]];
        }
        if(menuNamesArr.count){
            
            //            [menuCategoriesDic setValue:menuNamesArr forKey:MENU_NAME];
            //            for(NSString * str in menuNamesArr)
            //                [self callMenuCategoriesDetailsInfo:str];
            [self callMenuCategoriesDetailsInfo:menuNamesArr[0]];
        }
        else{
            [HUD setHidden:YES];
            [self displayNewProductMenu:nil];
        }
        
    } @catch (NSException *exception) {
        [HUD setHidden:YES];
    } @finally {
        
    }
}
-(void)getMenuDeatilsErrorResponse:(NSString *)errorResponse{
    @try {
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",errorResponse];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        
        [HUD setHidden:YES];
    }
}

-(void)getMenuCategoryDetailsSuccessResponse:(NSDictionary *)successDictionary{
    @try {
        
        NSMutableArray * categoriesNamesArr = [NSMutableArray new];
        
        [categoriesNamesArr addObject:ALL];
        
        for(NSDictionary * dic in [successDictionary valueForKey:MENU_CATEGORY_DETAILS]){
            
            [categoriesNamesArr addObject:[dic valueForKey:CATEGORY_NAME]];
            
            NSMutableArray * itemNamesArr = [NSMutableArray new];
            for(NSDictionary * locDic in [dic valueForKey:MENU_ITEMS_LIST]){
                
                [itemNamesArr addObject:locDic];
            }
            [menuCategoriesDic setValue:itemNamesArr forKey:[dic valueForKey:CATEGORY_NAME]];
        }
        
        [menuCategoriesDic setValue:categoriesNamesArr forKey:CATEGORY_NAMES];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        [self displayNewProductMenu:nil];
        [HUD setHidden:YES];
    }
}
-(void)getMenuCategoryDeatilsErrorResponse:(NSString *)errorResponse{
    @try {
        
        float y_axis = self.view.frame.size.height - 120;
        
        y_axis = BillField.frame.origin.y + BillField.frame.size.height;
        
        NSString * mesg = [NSString stringWithFormat:@"%@",errorResponse];
        
        [self displayAlertMessage:mesg horizontialAxis:(self.view.frame.size.width - 360)/2   verticalAxis:y_axis  msgType:@""  conentWidth:300 contentHeight:40  isSoundRequired:YES timming:2.0 noOfLines:2];
    } @catch (NSException *exception) {
        
    } @finally {
        
        [HUD setHidden:YES];
    }
}


-(id) imageFromImage:(UIImage*)image  imageBackGroundColor:(UIColor*)backGroundColor  string:(NSString*)string  color:(UIColor*)color  font:(int)fontSize   width:(float)labelWidth height:(float)labelHeight fontType:(NSString *)fontType imageWidth:(float)imageWidth imageHeight:(float)imageHeight{
    
    @try {
        UIImageView  *returnView =  [[UIImageView alloc] init];
        
        UIImageView  *imageView =  [[UIImageView alloc] init];
        
        UIGraphicsBeginImageContext(CGSizeMake(imageWidth, imageHeight));
        [image drawInRect:CGRectMake(0, 0, imageWidth, imageHeight)];
        UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        
        imageView.image = newImage;
        imageView.contentMode = UIViewContentModeCenter;
        
        UILabel *label = [[UILabel alloc] init];
        label.backgroundColor =[UIColor clearColor];
        label.textAlignment =  NSTextAlignmentCenter;
        label.textColor = [UIColor blackColor];
        label.font = [UIFont fontWithName:fontType size:fontSize];
        label.text = string;
        label.textColor = color;
        
        
        //frame setting.....
        returnView.frame = CGRectMake(0, 0, labelWidth, imageHeight + labelHeight);
        imageView.frame = CGRectMake( (labelWidth - imageWidth)/2, 0,  imageWidth, imageHeight);
        label.frame = CGRectMake(0, imageHeight,labelWidth, labelHeight);
        
        
        imageView.backgroundColor = backGroundColor;//[UIColor clearColor];
        
        [returnView addSubview:imageView];
        [returnView addSubview:label];
        
        UIGraphicsBeginImageContextWithOptions(returnView.bounds.size, false, 0);
        
        [returnView.layer renderInContext:UIGraphicsGetCurrentContext()];
        UIImage *imageWithText = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        
        return imageWithText;
    }
    @catch (NSException *exception) {
        
        return image;
    }
    @finally {
        
    }
}

#pragma -mark methods add by Roja for multiple card payments..

/**
 * @description  here we are populating the card information GUI....
 * @date         27/08/2018
 * @method       populateCardPaymentDetailsView
 * @author       K.Roja
 * @param
 * @param
 *
 * @return        void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)populateCardPaymentDetailsView {
    
    @try{
        // UILabel declaration
        UILabel * headerLbl;
        UILabel * billSummaryLbl_1;
        UILabel * billSummaryLbl_2;
        UILabel * cardPaymentLbl_1;
        UILabel * cardPaymentLbl_2;
        UILabel * totalItemsLbl;
        UILabel * totalItemsValueLbl;
        UILabel * totalCostLbl;
        UILabel * totalCostValueLbl;
        UILabel * discountLbl;
        UILabel * discountValueLbl;
        UILabel * taxLbl;
        UILabel * taxValueLbl;
        UILabel * shipmentCostLbl;
        UILabel * shipmentCostValueLbl;
        UILabel * netBillAmountLbl;
        UILabel * shipmentCostUnderLineLbl;
        UILabel * netBillAmtUnderLineLbl;
        UILabel * cardInfoLbl;
        UILabel * paidAmtLbl;
        UILabel * approvalCodeLbl;
        UILabel * bankNameLbl;
        UILabel * cardTypeLbl;
        UILabel * mposLbl;
        UILabel * totalBillLbl;
        UILabel * totalBillValueLbl;
        
        UIButton * cardPayBtn_1;
        UIButton * cardPayBtn_2;
        UIButton * cardPayBtn_3;
        
        UILabel * semiColomn_1;
        UILabel * semiColomn_2;
        UILabel * semiColomn_3;
        UILabel * semiColomn_4;
        UILabel * semiColomn_5;
        UILabel * semiColomn_6;
        
        // UIButton declaration
        UIButton * backBtn;
        UIButton * showListOfCardTypeBtn;
        UIButton * mposBtn;
        UIButton * okCardPaymentDetailsBtn;
        UIButton * cancelBtn;
        
        
        // UIView Declaration
        UIView * billSummaryView ;
        //            UIView *cardPaymentView;
        
        paidAmtTxt = [[UITextField alloc] init];
        paidAmtTxt.borderStyle = UITextBorderStyleRoundedRect;
        paidAmtTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        paidAmtTxt.returnKeyType = UIReturnKeyDone;
        paidAmtTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
        paidAmtTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
        paidAmtTxt.textColor = [UIColor blackColor];
        paidAmtTxt.backgroundColor = [UIColor whiteColor];
        //  paidAmtTxt.placeholder = @"Paid Amount";
        paidAmtTxt.text = @"";
        paidAmtTxt.delegate = self;
        paidAmtTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        cardHolderPhoneNumTxt = [[UITextField alloc] init];
        cardHolderPhoneNumTxt.borderStyle = UITextBorderStyleRoundedRect;
        cardHolderPhoneNumTxt.autocorrectionType = UITextAutocorrectionTypeNo;
        cardHolderPhoneNumTxt.returnKeyType = UIReturnKeyDone;
        cardHolderPhoneNumTxt.clearButtonMode = UITextFieldViewModeWhileEditing;
        cardHolderPhoneNumTxt.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
        cardHolderPhoneNumTxt.textColor = [UIColor blackColor];
        cardHolderPhoneNumTxt.backgroundColor = [UIColor whiteColor];
        // cardHolderPhoneNumTxt.placeholder = @"Phone Number";
        cardHolderPhoneNumTxt.text = @"";
        cardHolderPhoneNumTxt.delegate = self;
        cardHolderPhoneNumTxt.keyboardType = UIKeyboardTypeNumberPad;
        
        
        // UILabel allocation
        headerLbl = [[UILabel alloc] init];
        billSummaryLbl_1 = [[UILabel alloc] init];
        billSummaryLbl_2 = [[UILabel alloc] init];
        cardPaymentLbl_1 = [[UILabel alloc] init];
        cardPaymentLbl_2 = [[UILabel alloc] init];
        totalItemsLbl = [[UILabel alloc] init];
        totalItemsValueLbl = [[UILabel alloc] init];
        totalCostLbl = [[UILabel alloc] init];
        totalCostValueLbl = [[UILabel alloc] init];
        discountLbl = [[UILabel alloc] init];
        discountValueLbl = [[UILabel alloc] init];
        taxLbl = [[UILabel alloc] init];
        taxValueLbl = [[UILabel alloc] init];
        shipmentCostLbl = [[UILabel alloc] init];
        shipmentCostValueLbl = [[UILabel alloc] init];
        netBillAmountLbl = [[UILabel alloc] init];
        netBillAmountValueLbl = [[UILabel alloc] init];
        shipmentCostUnderLineLbl = [[UILabel alloc] init];
        netBillAmtUnderLineLbl = [[UILabel alloc] init];
        cardInfoLbl = [[UILabel alloc] init];
        paidAmtLbl = [[UILabel alloc] init];
        approvalCodeLbl = [[UILabel alloc] init];
        bankNameLbl = [[UILabel alloc] init];
        cardTypeLbl = [[UILabel alloc] init];
        mposLbl = [[UILabel alloc] init];
        totalBillLbl = [[UILabel alloc] init];
        totalBillValueLbl = [[UILabel alloc] init];
        completePaidAmtLbl = [[UILabel alloc] init];
        completePaidAmtValueLbl = [[UILabel alloc] init];
        semiColomn_1 = [[UILabel alloc] init];
        semiColomn_2 = [[UILabel alloc] init];
        semiColomn_3 = [[UILabel alloc] init];
        semiColomn_4 = [[UILabel alloc] init];
        semiColomn_5 = [[UILabel alloc] init];
        semiColomn_6 = [[UILabel alloc] init];
        
        // UITextFields Allocation
        //            bankNameTxt = [[UITextField alloc] init];
        //            cardHolderPhoneNumTxt = [[UITextField alloc] init];
        
        // UIButton allocation
        backBtn = [[UIButton alloc] init];
        showListOfCardTypeBtn = [[UIButton alloc] init];
        mposBtn = [[UIButton alloc] init];
        
        //            cardPayBtn_1 = [[UIButton alloc] init];
        //            cardPayBtn_2 = [[UIButton alloc] init];
        //            cardPayBtn_3 = [[UIButton alloc] init];
        okCardPaymentDetailsBtn = [[UIButton alloc] init];
        cancelBtn = [[UIButton alloc] init];
        
        // UIView allocation
        billSummaryView = [[UIView alloc]init];
        cardPaymentView = [[UIView alloc]init];
        
        
        headerLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        headerLbl.alpha = 0.8f;
        headerLbl.textAlignment = NSTextAlignmentCenter;
        headerLbl.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        headerLbl.textColor = [UIColor whiteColor];
        
        billSummaryLbl_1.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        
        billSummaryLbl_2.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        billSummaryLbl_2.textAlignment = NSTextAlignmentCenter;
        billSummaryLbl_2.backgroundColor = [UIColor darkGrayColor];
        billSummaryLbl_2.textColor = [UIColor whiteColor];
        
        cardPaymentLbl_1.backgroundColor = [UIColor colorWithRed:51.0/255.0 green:153.0/255.0 blue:204.0/255.0 alpha:1.0];
        
        cardPaymentLbl_2.font = [UIFont fontWithName:TEXT_FONT_NAME size:18];
        cardPaymentLbl_2.textAlignment = NSTextAlignmentCenter;
        cardPaymentLbl_2.backgroundColor = [UIColor darkGrayColor];
        cardPaymentLbl_2.textColor = [UIColor whiteColor];
        
        totalItemsLbl.textColor = [UIColor whiteColor];
        totalItemsLbl.font = [UIFont boldSystemFontOfSize:16.0];
        totalItemsLbl.textAlignment = NSTextAlignmentLeft;
        
        totalItemsValueLbl.textColor = [UIColor whiteColor];
        totalItemsValueLbl.font = [UIFont boldSystemFontOfSize:16.0];
        totalItemsValueLbl.textAlignment = NSTextAlignmentRight;
        
        totalCostLbl.textColor = [UIColor whiteColor];
        totalCostLbl.font = [UIFont boldSystemFontOfSize:16.0];
        totalCostLbl.textAlignment = NSTextAlignmentLeft;
        
        totalCostValueLbl.textColor = [UIColor whiteColor];
        totalCostValueLbl.font = [UIFont boldSystemFontOfSize:16.0];
        totalCostValueLbl.textAlignment = NSTextAlignmentRight;
        
        discountLbl.textColor = [UIColor whiteColor];
        discountLbl.font = [UIFont boldSystemFontOfSize:16.0];
        discountLbl.textAlignment = NSTextAlignmentLeft;
        
        discountValueLbl.textColor = [UIColor whiteColor];
        discountValueLbl.font = [UIFont boldSystemFontOfSize:16.0];
        discountValueLbl.textAlignment = NSTextAlignmentRight;
        
        taxLbl.textColor = [UIColor whiteColor];
        taxLbl.font = [UIFont boldSystemFontOfSize:16.0];
        taxLbl.textAlignment = NSTextAlignmentLeft;
        
        taxValueLbl.textColor = [UIColor whiteColor];
        taxValueLbl.font = [UIFont boldSystemFontOfSize:16.0];
        taxValueLbl.textAlignment = NSTextAlignmentRight;
        
        shipmentCostLbl.textColor = [UIColor whiteColor];
        shipmentCostLbl.font = [UIFont boldSystemFontOfSize:16.0];
        shipmentCostLbl.textAlignment = NSTextAlignmentLeft;
        
        shipmentCostValueLbl.textColor = [UIColor whiteColor];
        shipmentCostValueLbl.font = [UIFont boldSystemFontOfSize:16.0];
        shipmentCostValueLbl.textAlignment = NSTextAlignmentRight;
        
        shipmentCostUnderLineLbl.textColor = [UIColor whiteColor];
        shipmentCostUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        shipmentCostUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        shipmentCostUnderLineLbl.backgroundColor = [UIColor whiteColor];
        
        netBillAmountLbl.textColor = [UIColor whiteColor];
        netBillAmountLbl.font = [UIFont boldSystemFontOfSize:20.0];
        netBillAmountLbl.textAlignment = NSTextAlignmentLeft;
        
        netBillAmountValueLbl.textColor = [UIColor whiteColor];
        netBillAmountValueLbl.font = [UIFont boldSystemFontOfSize:20.0];
        netBillAmountValueLbl.textAlignment = NSTextAlignmentRight;
        
        netBillAmtUnderLineLbl.textColor = [UIColor whiteColor];
        netBillAmtUnderLineLbl.font = [UIFont boldSystemFontOfSize:18.0];
        netBillAmtUnderLineLbl.textAlignment = NSTextAlignmentCenter;
        netBillAmtUnderLineLbl.backgroundColor = [UIColor whiteColor];
        
        cardInfoLbl.textColor = [UIColor whiteColor];
        cardInfoLbl.font = [UIFont boldSystemFontOfSize:16.0];
        cardInfoLbl.textAlignment = NSTextAlignmentLeft;
        
        paidAmtLbl.textColor = [UIColor whiteColor];
        paidAmtLbl.font = [UIFont boldSystemFontOfSize:16.0];
        paidAmtLbl.textAlignment = NSTextAlignmentLeft;
        
        approvalCodeLbl.textColor = [UIColor whiteColor];
        approvalCodeLbl.font = [UIFont boldSystemFontOfSize:16.0];
        approvalCodeLbl.textAlignment = NSTextAlignmentLeft;
        
        bankNameLbl.textColor = [UIColor whiteColor];
        bankNameLbl.font = [UIFont boldSystemFontOfSize:16.0];
        bankNameLbl.textAlignment = NSTextAlignmentLeft;
        
        cardTypeLbl.textColor = [UIColor whiteColor];
        cardTypeLbl.font = [UIFont boldSystemFontOfSize:16.0];
        cardTypeLbl.textAlignment = NSTextAlignmentLeft;
        
        mposLbl.textColor = [UIColor whiteColor];
        mposLbl.font = [UIFont boldSystemFontOfSize:20.0];
        mposLbl.textAlignment = NSTextAlignmentLeft;
        
        totalBillLbl.textColor = [UIColor whiteColor];
        totalBillLbl.font = [UIFont boldSystemFontOfSize:16.0];
        totalBillLbl.textAlignment = NSTextAlignmentLeft;
        totalBillLbl.backgroundColor = [UIColor darkGrayColor];
        
        totalBillValueLbl.textColor = [UIColor whiteColor];
        totalBillValueLbl.font = [UIFont boldSystemFontOfSize:16.0];
        totalBillValueLbl.textAlignment = NSTextAlignmentRight;
        totalBillValueLbl.backgroundColor = [UIColor darkGrayColor];
        
        completePaidAmtLbl.textColor = [UIColor whiteColor];
        completePaidAmtLbl.font = [UIFont boldSystemFontOfSize:16.0];
        completePaidAmtLbl.textAlignment = NSTextAlignmentLeft;
        completePaidAmtLbl.backgroundColor = [UIColor darkGrayColor];
        
        completePaidAmtValueLbl.textColor = [UIColor whiteColor];
        completePaidAmtValueLbl.font = [UIFont boldSystemFontOfSize:16.0];
        completePaidAmtValueLbl.textAlignment = NSTextAlignmentRight;
        completePaidAmtValueLbl.backgroundColor = [UIColor darkGrayColor];
        
        semiColomn_1.textColor = [UIColor whiteColor];
        semiColomn_1.font = [UIFont boldSystemFontOfSize:16.0];
        semiColomn_1.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_2.textColor = [UIColor whiteColor];
        semiColomn_2.font = [UIFont boldSystemFontOfSize:16.0];
        semiColomn_2.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_3.textColor = [UIColor whiteColor];
        semiColomn_3.font = [UIFont boldSystemFontOfSize:16.0];
        semiColomn_3.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_4.textColor = [UIColor whiteColor];
        semiColomn_4.font = [UIFont boldSystemFontOfSize:16.0];
        semiColomn_4.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_5.textColor = [UIColor whiteColor];
        semiColomn_5.font = [UIFont boldSystemFontOfSize:16.0];
        semiColomn_5.textAlignment = NSTextAlignmentCenter;
        
        semiColomn_6.textColor = [UIColor whiteColor];
        semiColomn_6.font = [UIFont boldSystemFontOfSize:16.0];
        semiColomn_6.textAlignment = NSTextAlignmentCenter;
        
        // close button to close the view ..
        [backBtn addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        UIImage *image = [UIImage imageNamed:@"delete.png"];
        [backBtn setBackgroundImage:image    forState:UIControlStateNormal];
        
        // Button tag values
        backBtn.tag = 88;
        
        [showListOfCardTypeBtn addTarget:self action:@selector(showListOfCardTypes:) forControlEvents:UIControlEventTouchDown];
        UIImage *cartTypeImage = [UIImage imageNamed: @"arrow_1.png"];
        [showListOfCardTypeBtn setBackgroundImage:cartTypeImage    forState:UIControlStateNormal];
        
        
        // [mposBtn addTarget:self action:@selector( ) forControlEvents:UIControlEventTouchUpInside];
        UIImage *mposBtnImage = [UIImage imageNamed:@"Credit_Deselect.png"];
        [mposBtn setBackgroundImage:mposBtnImage    forState:UIControlStateNormal];
        mposBtn.backgroundColor = [UIColor darkGrayColor];
        mposBtn.layer.masksToBounds = YES;
        mposBtn.layer.cornerRadius = 10.0f;
        
        // added by roja on 30-08-2018...
        cardPayBtn_1 = [[UIButton alloc] init];
        cardPayBtn_1.tag = 1;
        cardPayBtn_1  = [UIButton buttonWithType:UIButtonTypeCustom];
        // cardPayBtn_1.backgroundColor = [UIColor greenColor];
        cardPayBtn_1.backgroundColor = [UIColor greenColor];
        cardPayBtn_1.titleLabel.font = [UIFont boldSystemFontOfSize:16.0];
        [cardPayBtn_1 setTitleColor:[UIColor blackColor]  forState:UIControlStateNormal];
        [cardPayBtn_1 addTarget:self action:@selector(addCardPaymentDetails: ) forControlEvents:UIControlEventTouchUpInside];
        
        cardPayBtn_2 = [[UIButton alloc] init];
        cardPayBtn_2.tag = 3;
        cardPayBtn_2  = [UIButton buttonWithType:UIButtonTypeCustom];
        cardPayBtn_2.backgroundColor = [UIColor whiteColor];
        cardPayBtn_2.layer.cornerRadius = 22.0f;
        cardPayBtn_2.layer.borderWidth = 2.5f;
        cardPayBtn_2.clipsToBounds = YES;
        cardPayBtn_2.layer.borderColor = [UIColor blueColor].CGColor;
        cardPayBtn_2.titleLabel.font = [UIFont boldSystemFontOfSize:16.0];
        [cardPayBtn_2 setTitleColor:[UIColor blackColor]  forState:UIControlStateNormal];
        [cardPayBtn_2 addTarget:self action:@selector(addCardPaymentDetails:) forControlEvents:UIControlEventTouchUpInside];
        
        cardPayBtn_3 = [[UIButton alloc] init];
        cardPayBtn_3.tag = 5;
        cardPayBtn_3  = [UIButton buttonWithType:UIButtonTypeCustom];
        cardPayBtn_3.backgroundColor = [UIColor whiteColor];
        cardPayBtn_3.layer.cornerRadius = 22.0;
        cardPayBtn_3.layer.borderWidth = 2.5f;
        cardPayBtn_3.clipsToBounds = YES;
        // cardPayBtn_3.layer.masksToBounds = YES;
        cardPayBtn_3.layer.borderColor =  [UIColor blueColor].CGColor;
        cardPayBtn_3.titleLabel.font = [UIFont boldSystemFontOfSize:16.0];
        [cardPayBtn_3 setTitleColor:[UIColor blackColor]  forState:UIControlStateNormal];
        [cardPayBtn_3 addTarget:self action:@selector(addCardPaymentDetails: ) forControlEvents:UIControlEventTouchUpInside];
        // upto here added by roja on 30-08-2018...
        
        okCardPaymentDetailsBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [okCardPaymentDetailsBtn addTarget:self  action:@selector(addCardPaymentDetails: ) forControlEvents:UIControlEventTouchUpInside];
        okCardPaymentDetailsBtn.titleLabel.font = [UIFont boldSystemFontOfSize:16.0];
        okCardPaymentDetailsBtn.backgroundColor = [UIColor darkGrayColor];
        okCardPaymentDetailsBtn.layer.cornerRadius = 10.0f;
        
        cancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [cancelBtn addTarget:self action:@selector(closeView:) forControlEvents:UIControlEventTouchUpInside];
        cancelBtn.titleLabel.font = [UIFont boldSystemFontOfSize:16.0];
        cancelBtn.backgroundColor = [UIColor darkGrayColor];
        cancelBtn.layer.cornerRadius = 10.0f;
        
        billSummaryView.opaque = NO;
        billSummaryView.layer.borderColor = [UIColor whiteColor].CGColor;
        billSummaryView.layer.borderWidth = 2.0f;
        
        cardPaymentView.opaque = NO;
        cardPaymentView.layer.borderColor = [UIColor whiteColor].CGColor;
        cardPaymentView.layer.borderWidth = 2.0f;
        
        @try{
            if(cardTypesArr == nil){
                
                //cardTypesTbl table creation....
                cardTypesTbl = [[UITableView alloc] init];
                cardTypesTbl.backgroundColor = [UIColor colorWithRed:0.92f green:0.929f blue:0.929f alpha:1.0];
                cardTypesTbl.dataSource = self;
                cardTypesTbl.delegate = self;
                (cardTypesTbl.layer).borderWidth = 1.0f;
                cardTypesTbl.layer.cornerRadius = 3;
                cardTypesTbl.layer.borderColor = [UIColor grayColor].CGColor;
                
                NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults];
                
                if ( ! ([[defaults valueForKey:CARD_OPTIONS] isKindOfClass:[NSNull class]] || [defaults valueForKey:CARD_OPTIONS] == nil)) {
                    
                    cardTypesArr = [[defaults valueForKey:CARD_OPTIONS] mutableCopy];
                    
                    if(cardTypesArr.count){
                        //   cardTypeTxt.text = [self checkGivenValueIsNullOrNil:[cardTypesArr[0] valueForKey:TENDER_NAME] defaultReturn:@""];
                        if(billPaymentTendeInfoDic.allKeys.count)
                            [billPaymentTendeInfoDic removeAllObjects];
                        
                        billPaymentTendeInfoDic = [cardTypesArr[0] mutableCopy];
                    }
                }
            }
            
            // NSLocalizedString for Labels
            headerLbl.text = NSLocalizedString(@"card_payment_details", nil);
            billSummaryLbl_2.text = NSLocalizedString(@"Bill_Summary", nil);
            cardPaymentLbl_2.text = NSLocalizedString(@"Card_Payments", nil);
            totalItemsLbl.text = NSLocalizedString(@"total_Items_bill", nil);
            totalCostLbl.text = NSLocalizedString(@"total_cost", nil);
            discountLbl.text = NSLocalizedString(@"discount", nil);
            taxLbl.text = NSLocalizedString(@"tax", nil);
            shipmentCostLbl.text = NSLocalizedString(@"shipment_cost", nil);
            netBillAmountLbl.text = NSLocalizedString(@"net_bill_amt", nil);
            cardInfoLbl.text = NSLocalizedString(@"card_info", nil);
            paidAmtLbl.text = NSLocalizedString(@"paid_amount", nil);
            approvalCodeLbl.text = NSLocalizedString(@"approval_code", nil);
            bankNameLbl.text = NSLocalizedString(@"bank_name", nil);
            cardTypeLbl.text = NSLocalizedString(@"card_type", nil);
            mposLbl.text = NSLocalizedString(@"mpos", nil);
            totalBillLbl.text = NSLocalizedString(@"total_bill", nil);
            completePaidAmtLbl.text = NSLocalizedString(@"paid_amount", nil);
            semiColomn_1.text  = NSLocalizedString(@":", nil);
            semiColomn_2.text  = NSLocalizedString(@":", nil);
            semiColomn_3.text  = NSLocalizedString(@":", nil);
            semiColomn_4.text  = NSLocalizedString(@":", nil);
            semiColomn_5.text  = NSLocalizedString(@":", nil);
            semiColomn_6.text  = NSLocalizedString(@":", nil);
            
            cardHolderPhoneNumTxt.placeholder = NSLocalizedString(@"phone_number", nil);
            
            [cardPayBtn_1 setTitle:NSLocalizedString(@"1", nil) forState:UIControlStateNormal];
            [cardPayBtn_2 setTitle:NSLocalizedString(@"2", nil) forState:UIControlStateNormal];
            [cardPayBtn_3 setTitle:NSLocalizedString(@"3", nil) forState:UIControlStateNormal];
            [cancelBtn setTitle:NSLocalizedString(@"cancel", nil) forState:UIControlStateNormal];
            [okCardPaymentDetailsBtn setTitle:NSLocalizedString(@"OK", nil) forState:UIControlStateNormal];
            
            totalItemsValueLbl.text = [NSString stringWithFormat:@"%.2f", (totalItemsLabelValue.text).floatValue];
            totalCostValueLbl.text =  [NSString stringWithFormat:@"%.2f", (subtotalTxt.text).floatValue];
            float totalDiscount = (dealoroffersTxt.text).floatValue + (otherDiscountValueTxt.text).floatValue + (giftVoucherTxt.text).floatValue;
            discountValueLbl.text =  [NSString stringWithFormat:@"%.2f", totalDiscount];
            shipmentCostValueLbl.text = [NSString stringWithFormat:@"%.2f", orderShipmentCharges] ;
            taxValueLbl.text =  [NSString stringWithFormat:@"%.2f", (taxTxt.text).floatValue];
            
            netBillAmountValueLbl.text = [NSString stringWithFormat:@"%.2f", [netPayLblVal.text floatValue]];
            
            paidAmtTxt.text = [NSString stringWithFormat:@"%.2f",(netBillAmountValueLbl.text).floatValue];
            totalBillValueLbl.text = [NSString stringWithFormat:@"%.2f",(netBillAmountValueLbl.text).floatValue] ;
            completePaidAmtValueLbl.text = [NSString stringWithFormat:@"%.2f",(netBillAmountValueLbl.text).floatValue] ;
            cardHolderPhoneNumTxt.text = [NSString stringWithFormat:@"%d",(phnotext.text).intValue];
            
            addCardPaymentDetailsArr = [[NSMutableArray alloc]init];
            cardPaymentButtonArr = [[NSMutableArray alloc]init];
            completePaidAmtValueLbl.tag = 0;
            cardPayBtn_1.tag = 0;
            cardPayBtn_2.tag = 1;
            cardPayBtn_3.tag = 2;
            okCardPaymentDetailsBtn.tag=3;
            
            [cardPaymentButtonArr addObject:cardPayBtn_1];
            [cardPaymentButtonArr addObject:cardPayBtn_2];
            [cardPaymentButtonArr addObject:cardPayBtn_3];
            
            [self displayCardDetails:0 isToSaveCardInfo:NO];
            
        } @catch (NSException *exception) {
            
        }
        
        [cardDetailsView addSubview:headerLbl];
        [cardDetailsView addSubview:backBtn];
        [cardDetailsView addSubview:mposLbl];
        [cardDetailsView addSubview:cardHolderPhoneNumTxt];
        [cardDetailsView addSubview:totalBillLbl];
        [cardDetailsView addSubview:totalBillValueLbl];
        [cardDetailsView addSubview:completePaidAmtLbl];
        [cardDetailsView addSubview:completePaidAmtValueLbl];
        [cardDetailsView addSubview:cardPayBtn_1];
        [cardDetailsView addSubview:cardPayBtn_2];
        [cardDetailsView addSubview:cardPayBtn_3];
        [cardDetailsView addSubview:okCardPaymentDetailsBtn];
        [cardDetailsView addSubview:cancelBtn];
        [cardDetailsView addSubview:mposBtn];
        
        [billSummaryView addSubview:billSummaryLbl_1];
        [billSummaryView addSubview:billSummaryLbl_2];
        [billSummaryView addSubview:totalItemsLbl];
        [billSummaryView addSubview:totalItemsValueLbl];
        [billSummaryView addSubview:totalCostLbl];
        [billSummaryView addSubview:totalCostValueLbl];
        [billSummaryView addSubview:discountLbl];
        [billSummaryView addSubview:discountValueLbl];
        [billSummaryView addSubview:taxLbl];
        [billSummaryView addSubview:taxValueLbl];
        [billSummaryView addSubview:shipmentCostLbl];
        [billSummaryView addSubview:shipmentCostValueLbl];
        [billSummaryView addSubview:netBillAmountLbl];
        [billSummaryView addSubview:netBillAmountValueLbl];
        [billSummaryView addSubview:shipmentCostUnderLineLbl];
        [billSummaryView addSubview:netBillAmtUnderLineLbl];
        [billSummaryView addSubview:semiColomn_1];
        [billSummaryView addSubview:semiColomn_2];
        [billSummaryView addSubview:semiColomn_3];
        [billSummaryView addSubview:semiColomn_4];
        [billSummaryView addSubview:semiColomn_5];
        [billSummaryView addSubview:semiColomn_6];
        
        [cardPaymentView addSubview:cardPaymentLbl_1];
        [cardPaymentView addSubview:cardPaymentLbl_2];
        [cardPaymentView addSubview:cardInfoLbl];
        [cardPaymentView addSubview:paidAmtLbl];
        [cardPaymentView addSubview:approvalCodeLbl];
        [cardPaymentView addSubview:bankNameLbl];
        [cardPaymentView addSubview:cardTypeLbl];
        [cardPaymentView addSubview:cardInfoTxt];
        [cardPaymentView addSubview:paidAmtTxt];
        [cardPaymentView addSubview:approvalCodeTxt];
        [cardPaymentView addSubview:bankNameTxt];
        [cardPaymentView addSubview:cardTypeTxt];
        [cardPaymentView addSubview:showListOfCardTypeBtn];
        
        [cardDetailsView addSubview:billSummaryView];
        [cardDetailsView addSubview:cardPaymentView];
        
        [self.view addSubview:cardDetailsView];
        
        
        // Start of framing
        headerLbl.frame = CGRectMake(0, 0,( self.view.frame.size.width - 130), 50);
        backBtn.frame = CGRectMake(headerLbl.frame.size.width - 80, 2.0, 45.0, 45.0);
        
        
        cardDetailsView.frame = CGRectMake( (self.view.frame.size.width - headerLbl.frame.size.width  ) / 2, 80 , headerLbl.frame.size.width, 670);
        billSummaryView.frame = CGRectMake(cardDetailsView.frame.origin.x , cardDetailsView.frame.origin.y + 10, 290 , 290);
        
        billSummaryLbl_1.frame = CGRectMake(0,0,billSummaryView.frame.size.width,40);
        billSummaryLbl_2.frame = CGRectMake((billSummaryLbl_1.frame.origin.x + 15 ), billSummaryLbl_1.frame.origin.y, (billSummaryLbl_1.frame.size.width - 30), billSummaryLbl_1.frame.size.height);
        
        totalItemsLbl.frame = CGRectMake(10, billSummaryLbl_1.frame.origin.y+billSummaryLbl_1.frame.size.height + 5 , 120, 25);
        semiColomn_1.frame = CGRectMake( totalItemsLbl.frame.origin.x + totalItemsLbl.frame.size.width + 10, totalItemsLbl.frame.origin.y, 5, 25);
        totalItemsValueLbl.frame = CGRectMake(semiColomn_1.frame.origin.x + semiColomn_1.frame.size.width + 10, totalItemsLbl.frame.origin.y, totalItemsLbl.frame.size.width, totalItemsLbl.frame.size.height);
        
        totalCostLbl.frame = CGRectMake(totalItemsLbl.frame.origin.x, totalItemsLbl.frame.origin.y + totalItemsLbl.frame.size.height + 15, totalItemsLbl.frame.size.width, totalItemsLbl.frame.size.height);
        semiColomn_2.frame = CGRectMake( semiColomn_1.frame.origin.x, totalCostLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
        totalCostValueLbl.frame = CGRectMake(totalItemsValueLbl.frame.origin.x , totalCostLbl.frame.origin.y, totalItemsValueLbl.frame.size.width, totalItemsValueLbl.frame.size.height);
        
        discountLbl.frame = CGRectMake(totalItemsLbl.frame.origin.x, totalCostLbl.frame.origin.y + totalCostLbl.frame.size.height + 15, totalItemsLbl.frame.size.width, totalItemsLbl.frame.size.height);
        semiColomn_3.frame = CGRectMake( semiColomn_1.frame.origin.x, discountLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
        discountValueLbl.frame = CGRectMake(totalItemsValueLbl.frame.origin.x , discountLbl.frame.origin.y, totalItemsValueLbl.frame.size.width, totalItemsValueLbl.frame.size.height);
        
        taxLbl.frame = CGRectMake(totalItemsLbl.frame.origin.x,  discountLbl.frame.origin.y + discountLbl.frame.size.height + 15, totalItemsLbl.frame.size.width, totalItemsLbl.frame.size.height);
        semiColomn_4.frame = CGRectMake( semiColomn_1.frame.origin.x, taxLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
        taxValueLbl.frame = CGRectMake(totalItemsValueLbl.frame.origin.x , taxLbl.frame.origin.y, totalItemsValueLbl.frame.size.width, totalItemsValueLbl.frame.size.height);
        
        shipmentCostLbl.frame = CGRectMake(totalItemsLbl.frame.origin.x,  taxLbl.frame.origin.y + taxLbl.frame.size.height + 15, totalItemsLbl.frame.size.width, totalItemsLbl.frame.size.height);
        semiColomn_5.frame = CGRectMake( semiColomn_1.frame.origin.x, shipmentCostLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height);
        shipmentCostValueLbl.frame = CGRectMake(totalItemsValueLbl.frame.origin.x , shipmentCostLbl.frame.origin.y, totalItemsValueLbl.frame.size.width, totalItemsValueLbl.frame.size.height);
        
        shipmentCostUnderLineLbl.frame =  CGRectMake(totalItemsLbl.frame.origin.x,  shipmentCostLbl.frame.origin.y + shipmentCostLbl.frame.size.height, billSummaryView.frame.size.width - 20 , 0.5);
        
        netBillAmountLbl.frame = CGRectMake(totalItemsLbl.frame.origin.x, shipmentCostUnderLineLbl.frame.origin.y + shipmentCostUnderLineLbl.frame.size.height + 10, totalItemsLbl.frame.size.width, totalItemsLbl.frame.size.height + 5);
        semiColomn_6.frame = CGRectMake( semiColomn_1.frame.origin.x, netBillAmountLbl.frame.origin.y, semiColomn_1.frame.size.width, semiColomn_1.frame.size.height + 5);
        netBillAmountValueLbl.frame =CGRectMake(totalItemsValueLbl.frame.origin.x, netBillAmountLbl.frame.origin.y ,  totalItemsLbl.frame.size.width, netBillAmountLbl.frame.size.height + 5);
        
        netBillAmtUnderLineLbl.frame =  CGRectMake(totalItemsLbl.frame.origin.x,  netBillAmountLbl.frame.origin.y + netBillAmountLbl.frame.size.height + 5, shipmentCostUnderLineLbl.frame.size.width , shipmentCostUnderLineLbl.frame.size.height);
        
        cardPaymentView.frame = CGRectMake(billSummaryView.frame.origin.x +  billSummaryView.frame.size.width + 220 , billSummaryView.frame.origin.y , billSummaryView.frame.size.width , 380);
        
        cardPaymentLbl_1.frame = CGRectMake(0,0,cardPaymentView.frame.size.width,40);
        
        cardPaymentLbl_2.frame = CGRectMake((cardPaymentLbl_1.frame.origin.x + 15 ), cardPaymentLbl_1.frame.origin.y, (cardPaymentLbl_1.frame.size.width - 30), cardPaymentLbl_1.frame.size.height);
        
        cardInfoLbl.frame = CGRectMake(10, cardPaymentLbl_1.frame.origin.y+cardPaymentLbl_1.frame.size.height + 5 , 120, 25);
        cardInfoTxt.frame = CGRectMake(cardInfoLbl.frame.origin.x, cardInfoLbl.frame.origin.y + cardInfoLbl.frame.size.height + 5, 270, cardInfoLbl.frame.size.height + 5);
        
        paidAmtLbl.frame = CGRectMake(cardInfoLbl.frame.origin.x, cardInfoTxt.frame.origin.y + cardInfoTxt.frame.size.height + 5 , cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
        paidAmtTxt.frame = CGRectMake(cardInfoLbl.frame.origin.x, paidAmtLbl.frame.origin.y + paidAmtLbl.frame.size.height + 5, (cardInfoTxt.frame.size.width + 70 )/2, cardInfoTxt.frame.size.height);
        
        approvalCodeLbl.frame = CGRectMake(cardInfoLbl.frame.origin.x, paidAmtTxt.frame.origin.y + paidAmtTxt.frame.size.height + 5 , cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
        approvalCodeTxt.frame = CGRectMake(cardInfoLbl.frame.origin.x, approvalCodeLbl.frame.origin.y + approvalCodeLbl.frame.size.height + 5, paidAmtTxt.frame.size.width, cardInfoTxt.frame.size.height);
        
        bankNameLbl.frame = CGRectMake(cardInfoLbl.frame.origin.x, approvalCodeTxt.frame.origin.y + approvalCodeTxt.frame.size.height + 5 , cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
        bankNameTxt.frame = CGRectMake(cardInfoLbl.frame.origin.x, bankNameLbl.frame.origin.y + bankNameLbl.frame.size.height + 5, paidAmtTxt.frame.size.width, cardInfoTxt.frame.size.height);
        
        cardTypeLbl.frame = CGRectMake(cardInfoLbl.frame.origin.x, bankNameTxt.frame.origin.y + bankNameTxt.frame.size.height + 5 , cardInfoLbl.frame.size.width, cardInfoLbl.frame.size.height);
        cardTypeTxt.frame = CGRectMake(cardInfoLbl.frame.origin.x, cardTypeLbl.frame.origin.y + cardTypeLbl.frame.size.height + 5, paidAmtTxt.frame.size.width, cardInfoTxt.frame.size.height);
        showListOfCardTypeBtn.frame =  CGRectMake(cardTypeTxt.frame.origin.x + cardTypeTxt.frame.size.width - (cardTypeTxt.frame.size.height + 10), cardTypeTxt.frame.origin.y - 5, cardTypeTxt.frame.size.height + 8, cardTypeTxt.frame.size.height + 8);
        
        mposBtn.frame = CGRectMake(billSummaryView.frame.origin.x, billSummaryView.frame.origin.y + billSummaryView.frame.size.height + 20, 35 , 35);
        mposLbl.frame = CGRectMake(mposBtn.frame.origin.x + mposBtn.frame.size.width + 5, mposBtn.frame.origin.y + 2 , totalItemsLbl.frame.size.width, totalItemsLbl.frame.size.height);
        
        cardHolderPhoneNumTxt.frame = CGRectMake(billSummaryView.frame.origin.x, mposBtn.frame.origin.y + mposBtn.frame.size.height + 10, billSummaryView.frame.size.width,cardInfoLbl.frame.size.height + 5);
        
        cardPayBtn_1.frame = CGRectMake(cardPaymentView.frame.origin.x + 140, cardPaymentView.frame.origin.y + cardPaymentView.frame.size.height + 15, 45, 45);
        
        cardPayBtn_2.frame = CGRectMake(cardPayBtn_1.frame.origin.x + cardPayBtn_1.frame.size.width + 10, cardPayBtn_1.frame.origin.y, cardPayBtn_1.frame.size.width, cardPayBtn_1.frame.size.height);
        
        cardPayBtn_3.frame = CGRectMake(cardPayBtn_2.frame.origin.x + cardPayBtn_2.frame.size.width + 10, cardPayBtn_1.frame.origin.y,cardPayBtn_1.frame.size.width, cardPayBtn_1.frame.size.height);
        
        totalBillLbl.frame = CGRectMake(cardPaymentView.frame.origin.x, cardPayBtn_1.frame.origin.y + cardPayBtn_1.frame.size.height +15, cardPaymentView.frame.size.width, totalItemsLbl.frame.size.height + 5);
        
        totalBillValueLbl.frame = CGRectMake(totalBillLbl.frame.origin.x + 150 , totalBillLbl.frame.origin.y, 150, totalBillLbl.frame.size.height);
        
        completePaidAmtLbl.frame = CGRectMake(totalBillLbl.frame.origin.x, totalBillLbl.frame.origin.y + totalBillLbl.frame.size.height + 10, totalBillLbl.frame.size.width, totalBillLbl.frame.size.height);
        
        completePaidAmtValueLbl.frame = CGRectMake( completePaidAmtLbl.frame.origin.x + 150, completePaidAmtLbl.frame.origin.y,150, totalBillLbl.frame.size.height);
        
        okCardPaymentDetailsBtn.frame = CGRectMake(billSummaryView.frame.origin.x, cardHolderPhoneNumTxt.frame.origin.y + cardHolderPhoneNumTxt.frame.size.height + 100, (billSummaryView.frame.size.width - 10)/ 2, 38);
        
        cancelBtn.frame = CGRectMake(okCardPaymentDetailsBtn.frame.origin.x + okCardPaymentDetailsBtn.frame.size.width + 10, okCardPaymentDetailsBtn.frame.origin.y, okCardPaymentDetailsBtn.frame.size.width, okCardPaymentDetailsBtn.frame.size.height);
        
        // UILabel fonts
        headerLbl.font = [UIFont fontWithName:TEXT_FONT_NAME size:24];
        paymentView.hidden = YES;
        cardDetailsView.hidden = NO;
    }
    @catch(NSException *exception) {
        
    }
}

/**
 * @description  here we are displaying the alert messages....
 * @date         28/08/2018
 * @method       validateCardInformation:--  selectedCardNum:--
 * @author       Srinivasulu
 * @param
 * @param        UIButton
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(NSString *)validateCardInformation:(int)cardNumber selectedCardNum:(int)displayCardNum {
    
    NSString * returnStr = @"";
    @try {
        
        float paidAmtTotalValue = [paidAmtTxt.text floatValue];
        
        for(int i = 0; i < [addCardPaymentDetailsArr count]; i++){
            
            NSDictionary * dic = [addCardPaymentDetailsArr objectAtIndex:i];
            
            if( i != cardNumber) {
                
                paidAmtTotalValue = paidAmtTotalValue + [[dic valueForKey:PAID_AMT] floatValue];
                
            }
        }
        
        if(paidAmtTotalValue <= [netBillAmountValueLbl.text floatValue])
            completePaidAmtValueLbl.text = [NSString stringWithFormat:@"%.02f", paidAmtTotalValue];
        
        
        if (  paidAmtTotalValue > [netBillAmountValueLbl.text floatValue] )
        {
            
            returnStr = [NSString stringWithFormat:@"%@",NSLocalizedString(@"paid_amount_already_exceeded_the_bill_amount", nil)];
        }
        else if (![cardInfoTxt.text length]) {
            
            returnStr = [NSString stringWithFormat:@"%@",NSLocalizedString(@"Please provide card info", nil)] ;
        }
        else if (![paidAmtTxt.text length]) {
            
            returnStr = [NSString stringWithFormat:@"%@",NSLocalizedString(@"Please enter paid amount", nil)];
        }
        else if (![cardTypeTxt.text length]) {
            
            returnStr = [NSString stringWithFormat:@"%@",NSLocalizedString(@"Please provide card type", nil)];
        }
    } @catch (NSException *exception) {
        
    } @finally {
        return returnStr;
    }
}

/**
 * @description  here we are displaying the card information....
 * @date         28/08/2017
 * @method       displayCardDetails:--- isToSaveCardInfo:---
 * @author       Srinivasulu
 * @param
 * @param        int
 * @param        Boolean
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)displayCardDetails:(int)cardNumber isToSaveCardInfo:(Boolean)isToSave{
    
    @try{
        if(isToSave){
            
            NSString* currentdate = [WebServiceUtility getCurrentDate];
            
            NSMutableDictionary * addCardPaymentDetailsDic = [[NSMutableDictionary alloc]init];
            [addCardPaymentDetailsDic setValue:cardInfoTxt.text forKey:CARD_INFO];
            [addCardPaymentDetailsDic setValue:paidAmtTxt.text forKey:PAID_AMT];
            [addCardPaymentDetailsDic setValue:approvalCodeTxt.text forKey:APPROVAL_CODE];
            [addCardPaymentDetailsDic setValue:bankNameTxt.text forKey:BANK_NAME];
            [addCardPaymentDetailsDic setValue:cardTypeTxt.text forKey:CARD_TYPE];
            
            
            [addCardPaymentDetailsDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_NAME] defaultReturn:@""] forKey:TENDER_NAME];
            [addCardPaymentDetailsDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:COUNTRY_CODE] defaultReturn:@""] forKey:COUNTRY_CODE];
            [addCardPaymentDetailsDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_CODE] defaultReturn:@""] forKey:TENDER_MODE];
            [addCardPaymentDetailsDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:TENDER_KEY] defaultReturn:@""] forKey:TENDER_KEY];
            [addCardPaymentDetailsDic setValue:[self checkGivenValueIsNullOrNil:[billPaymentTendeInfoDic valueForKey:MODE_OF_PAY] defaultReturn:@""] forKey:MODE_OF_PAY];
            
            [addCardPaymentDetailsDic setValue:@"" forKey:COUPON_NO];
            [addCardPaymentDetailsDic setValue:@"0.00" forKey:CHANGE_RETURN];
            [addCardPaymentDetailsDic setValue:currentdate forKey:DATE];
            [addCardPaymentDetailsDic setValue:[NSString stringWithFormat:@"%.2f",(paidAmtTxt.text).floatValue] forKey:RECEIVED_AMOUNT];
            
            
            if([addCardPaymentDetailsArr count] > cardNumber)
                [addCardPaymentDetailsArr replaceObjectAtIndex:cardNumber withObject:addCardPaymentDetailsDic];
            else
                [addCardPaymentDetailsArr addObject:addCardPaymentDetailsDic];
            
            
        }
        else{
            cardInfoTxt.text =@"";
            approvalCodeTxt.text =@"";
            bankNameTxt.text = @"";
            cardTypeTxt.text = @"";
            //  cardHolderPhoneNumTxt.text = @"";
            if([addCardPaymentDetailsArr count] > cardNumber){
                
                NSDictionary * tempDic = [addCardPaymentDetailsArr objectAtIndex:cardNumber];
                cardInfoTxt.text =[tempDic valueForKey:CARD_INFO];
                paidAmtTxt.text =[tempDic valueForKey:PAID_AMT];
                approvalCodeTxt.text =[tempDic valueForKey:APPROVAL_CODE];
                bankNameTxt.text = [tempDic valueForKey:BANK_NAME];
                cardTypeTxt.text = [tempDic valueForKey:CARD_TYPE];
            }
            
            if ([addCardPaymentDetailsArr count] == cardNumber) {
                
                float  paidAmtTotalValue =0.00;
                for (int i = 0 ;i< [addCardPaymentDetailsArr count]; i++) {
                    
                    NSDictionary * dic = [addCardPaymentDetailsArr objectAtIndex:i];
                    
                    paidAmtTotalValue = paidAmtTotalValue + [[dic valueForKey:PAID_AMT] floatValue];
                }
                paidAmtTxt.text = [ NSString stringWithFormat:@"%.2f",((netBillAmountValueLbl.text).floatValue) -  paidAmtTotalValue ] ;
                
            }
        }
    }
    @catch(NSException * exception){
        
    }
}

/**
 * @description  here we are displaying the existing card details based on the input param....
 * @date         28/08/2018
 * @method       ChangeTheCardButtonDisplayView:
 * @author       Srinivasulu
 * @param
 * @param        int
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)ChangeTheCardButtonDisplayView:(int)cardNumber{
    
    @try {
        
        for(int i = 0; i < [cardPaymentButtonArr count]; i++){
            
            UIButton * tempBtn  = [cardPaymentButtonArr objectAtIndex:i];
            
            if(i == cardNumber){
                
                tempBtn.layer.cornerRadius = 0;
                tempBtn.layer.borderWidth = 0;
                tempBtn.clipsToBounds = NO;
                tempBtn.backgroundColor = [UIColor greenColor];
                tempBtn.layer.borderColor =  [UIColor clearColor].CGColor;
                tempBtn.titleLabel.font = [UIFont boldSystemFontOfSize:16.0];
                [tempBtn setTitleColor:[UIColor blackColor]  forState:UIControlStateNormal];
            }
            else{
                
                tempBtn.backgroundColor = [UIColor whiteColor];
                tempBtn.layer.cornerRadius = 22.0f;
                tempBtn.layer.borderWidth = 2.5f;
                tempBtn.clipsToBounds = YES;
                tempBtn.layer.borderColor = [UIColor blueColor].CGColor;
                tempBtn.titleLabel.font = [UIFont boldSystemFontOfSize:16.0];
                [tempBtn setTitleColor:[UIColor blackColor]  forState:UIControlStateNormal];
            }
        }
    } @catch (NSException *exception) {
        
    }
}

/**
 * @description  here we are displaying the alert messages....
 * @date         28/08/2018
 * @method       addCardPaymentDetails:--
 * @author       Srinivasulu
 * @param
 * @param        UIButton
 *
 * @return       void
 *
 * @modified By
 * @reason
 *
 * @verified By
 * @verified On
 *
 */

-(void)addCardPaymentDetails:(UIButton *)sender{
    
    @try {
        
        NSString * errorMessageStr = [self validateCardInformation:(int)completePaidAmtValueLbl.tag selectedCardNum:(int)sender.tag];
        
        if([errorMessageStr length]){
            
            NSString *mesg = [NSString stringWithFormat:@"%@%@%@",NSLocalizedString(@"alert", nil),@"\n",errorMessageStr];
            
            [self displayAlertMessage:mesg horizontialAxis:(cardDetailsView.frame.origin.x + cardDetailsView.frame.size.width/2) - 250  verticalAxis:(cardDetailsView.frame.origin.y + cardDetailsView.frame.size.height/2) - 50  msgType:NSLocalizedString(@"warning", nil)  conentWidth:500 contentHeight:100  isSoundRequired:YES timming:2.0 noOfLines:2];
        }
        else{
            
            [self displayCardDetails:(int)completePaidAmtValueLbl.tag isToSaveCardInfo:YES];
            
            if(sender.tag == 3){
                
                
                finalBillDue = [[NSString stringWithFormat:@"%.2f",(netBillAmountValueLbl.text).floatValue-(completePaidAmtValueLbl.text).floatValue] copy];
                [self continuePay1];
            }
            else{
                [self displayCardDetails:(int)sender.tag isToSaveCardInfo:NO];
                [self ChangeTheCardButtonDisplayView:(int)sender.tag];
                completePaidAmtValueLbl.tag = sender.tag;
            }
        }
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
}


#pragma -mark orders handling..




-(void)changedMenuAndBillingView:(id)sender {
    
    int selectedTopSegmentControlIndex = (int)topSegmentControl.selectedSegmentIndex;
    
    switch (selectedTopSegmentControlIndex) {
        case 0:
            @try {
                
                if(tableOrdersMenuView == nil){
                    
                }
                else{
                    tableOrdersMenuView.hidden = NO;
                }
            } @catch (NSException *exception) {
                
            } @finally {
                
            }
            
            break;
        case 1:
            @try {
                
                tableOrdersMenuView.hidden = YES;
            } @catch (NSException *exception) {
                
            } @finally {
                
            }
            break;
    }
}


-(void)formTableOrderMenuItemsView{
    
    @try {
        tableOrdersMenuView = [[UIView alloc] init];
        tableOrdersMenuView.backgroundColor = [UIColor blackColor];
        
        [self.view addSubview:tableOrdersMenuView];
    } @catch (NSException *exception) {
        
    } @finally {
        
    }
    
}

#pragma -mark handling of F&B orders..


-(void)getTheOrderDetailsByOrderId:(NSString*)orderId{
    
    @try {
        //        [HUD setHidden:NO];
        
        NSDictionary *reqDic = [NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:[RequestHeader getRequestHeader],orderId,presentLocation, nil] forKeys:[NSArray arrayWithObjects:REQUEST_HEADER,ORDER_ID,kStoreLocation, nil]];
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:reqDic options:0 error:&err];
        NSString  *getRoomsJsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        [HUD  setHidden:NO];
        
        
        WebServiceController *service = [[WebServiceController alloc] init];
        [service setRestaurantBookingServiceDelegate:self];
        [service getRestBookingDetails:getRoomsJsonString];
    }
    @catch (NSException *exception) {
        
        [HUD setHidden:YES];
        NSLog(@"%@",exception);
    }
}


-(void)getBookingDetailsSuccess:(NSDictionary*)successDictionary{
    
    @try {
        FBOrderDetailsInfoDic = [successDictionary mutableCopy];
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        //        [HUD setHidden:YES];
    }
}
-(void)getBookingDetailsFailure:(NSString *)failureString{
    
    @try {
        
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        //        [HUD setHidden:YES];
    }
}



- (void)updateFBOrderDetails:(NSMutableDictionary *)details{
    @try {
        //        [HUD setHidden:NO];
        //        [HUD setLabelText:@"Placing order"];
        
        NSMutableDictionary * orderDetails = [NSMutableDictionary new];
        
        [orderDetails setObject:[self checkGivenValueIsNullOrNil:[FBOrderDetailsInfoDic valueForKey:ORDER_REFERENCE] defaultReturn:salesOrderIdStr] forKey:@"orderReference"];
        [orderDetails setObject:@"immediate" forKey:@"orderType"];

        [orderDetails setObject:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
        //
        if ([[details allKeys] containsObject:@"mobileNumber"] && ![[details valueForKey:@"mobileNumber"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"mobileNumber"] forKey:@"mobileNumber"];
        }
        if ([[details allKeys] containsObject:@"customerName"] && ![[details valueForKey:@"customerName"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"customerName"] forKey:@"customerName"];
            
        }
        if ([[details allKeys] containsObject:@"email"] && ![[details valueForKey:@"email"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"email"] forKey:@"email"];
            
        }
        if ([[details allKeys] containsObject:@"reservationDateTimeStr"] && ![[details valueForKey:@"reservationDateTimeStr"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"reservationDateTimeStr"] forKey:@"reservationDateTimeStr"];
            [orderDetails setObject:[details valueForKey:@"reservationDateTimeStr"] forKey:@"orderDate"];
        }
        
        
        
        if ([[details allKeys] containsObject:@"slotId"] && ![[details valueForKey:@"slotId"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"slotId"] forKey:@"slotId"];
            
        }
        if ([[details allKeys] containsObject:@"adultPax"] && ![[details valueForKey:@"adultPax"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[NSNumber numberWithInt:[[details valueForKey:@"adultPax"] intValue]] forKey:@"adultPax"];
            
        }
        if ([[details allKeys] containsObject:@"childPax"] && ![[details valueForKey:@"childPax"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[NSNumber numberWithInt:[[details valueForKey:@"childPax"] intValue]] forKey:@"childPax"];
            
        }
        if ([[details allKeys] containsObject:@"reservationTypeId"] && ![[details valueForKey:@"reservationTypeId"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"reservationTypeId"] forKey:@"reservationTypeId"];
            
        }
        if ([[details allKeys] containsObject:@"occasionDesc"] && ![[details valueForKey:@"occasionDesc"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"occasionDesc"] forKey:@"occasionDesc"];
            
        }
        if ([[details allKeys] containsObject:@"occasionId"] && ![[details valueForKey:@"occasionId"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"occasionId"] forKey:@"occasionId"];
            
        }
        if ([[details allKeys] containsObject:@"specialInstructions"] && ![[details valueForKey:@"specialInstructions"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"specialInstructions"] forKey:@"specialInstructions"];
            
        }
        if ([details valueForKey:@"carNumber"]!=nil && ![[details valueForKey:@"carNumber"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"carNumber"] forKey:@"carNumber"];
            
        }
        if ([details valueForKey:@"salesLocation"]!=nil && ![[details valueForKey:@"salesLocation"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[details valueForKey:@"salesLocation"] forKey:@"salesLocation"];
            
        }
        [orderDetails setObject:[NSNumber numberWithBool:NO] forKey:@"isTablesChange"];
        [orderDetails setObject:@"billed" forKey:STATUS];
        
        if ([[details allKeys] containsObject:@"gender"] && ![[details valueForKey:@"gender"] isKindOfClass:[NSNull class]]) {
            
            [orderDetails setObject:[details valueForKey:@"gender"] forKey:@"gender"];
        }
        
        if ([[details allKeys] containsObject:@"noOfVegAdults"] && ![[details valueForKey:@"noOfVegAdults"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[NSNumber numberWithInt:[[details valueForKey:@"noOfVegAdults"] intValue]] forKey:@"noOfVegAdults"];
        }
        if ([[details allKeys] containsObject:@"noOfNonVegAdult"] && ![[details valueForKey:@"noOfNonVegAdult"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[NSNumber numberWithInt:[[details valueForKey:@"noOfNonVegAdult"] intValue]] forKey:@"noOfNonVegAdult"];
            
        }
        if ([[details allKeys] containsObject:@"noOfAlcoholic"] && ![[details valueForKey:@"noOfAlcoholic"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[NSNumber numberWithInt:[[details valueForKey:@"noOfAlcoholic"] intValue]] forKey:@"noOfAlcoholic"];
            
        }
        if ([[details allKeys] containsObject:@"noOfNonAlcoholic"] && ![[details valueForKey:@"noOfNonAlcoholic"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[NSNumber numberWithInt:[[details valueForKey:@"noOfNonAlcoholic"] intValue]] forKey:@"noOfNonAlcoholic"];
            
        }
        if ([[details allKeys] containsObject:@"noOfNonVegChildren"] && ![[details valueForKey:@"noOfNonVegChildren"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[NSNumber numberWithInt:[[details valueForKey:@"noOfNonVegChildren"] intValue]] forKey:@"noOfNonVegChildren"];
        }
        if ([[details allKeys] containsObject:@"noOfVegChildren"] && ![[details valueForKey:@"noOfVegChildren"] isKindOfClass:[NSNull class]]) {
            [orderDetails setObject:[NSNumber numberWithInt:[[details valueForKey:@"noOfVegChildren"] intValue]] forKey:@"noOfVegChildren"];
            
        }
        
        //need to work on it...written by Srinivasulu  on  12/01/2018...
        
        //        if ([[details allKeys] containsObject:kTableNo] && ![[details valueForKey:kTableNo] isKindOfClass:[NSNull class]]) {
        //            if (isOfflineService) {
        //                NSString *level = @"";
        //                RestBookingServices *services = [[RestBookingServices alloc] init];
        //                level = [services getTheLevelInfoOf:[details valueForKey:kTableNo]];
        //                NSDictionary *temp = [NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:level,[details valueForKey:kTableNo],presentLocation,@"Billed", nil] forKeys:[NSArray arrayWithObjects:kLevel,kAllotedTableNo,@"location",STATUS, nil]];
        //
        //                NSMutableArray  *selectedTablesArr = [NSMutableArray arrayWithObject:temp];
        //
        //                [orderDetails setObject:selectedTablesArr forKey:kListOfTables];
        //
        //            }
        //            else {
        //
        //
        //                [orderDetails setObject:[details valueForKey:kTableNo] forKey:kTableNo];
        //            }
        //        }
        
        //upto here on 12/01/2019
        //        for (int i=0; i < [cartItem count]; i++) {
        //
        //            NSArray *arr = [[cartItem objectAtIndex:i] componentsSeparatedByString:@"#"];
        //
        //            [temp setObject:[arr objectAtIndex:0] forKey:@"itemDescription"];
        //            [temp setObject:[arr objectAtIndex:4] forKey:@"price"];
        //            [temp setObject:[arr objectAtIndex:3] forKey:@"quantity"];
        //            [temp setObject:[arr objectAtIndex:0] forKey:@"itemCode"];
        //            [temp setObject:[arr objectAtIndex:0] forKey:@"skuId"];
        //            [temp setObject:[NSString stringWithFormat:@"%0.2f",[[arr objectAtIndex:3] intValue]*[[arr objectAtIndex:4]floatValue]] forKey:@"total"];
        //
        //
        //            [temp1 setObject:temp forKey:[NSString stringWithFormat:@"%d",i]];
        //
        //            [temparr addObject:[temp1 valueForKey:[NSString stringWithFormat:@"%d",i]]];
        //
        //        }
        
        NSString *getBillData = [self saveBill];
        
        NSMutableArray *itemArray = [WebServiceUtility getBillingItemsFrom:getBillData itemDiscountArr:itemDiscountArr itemDiscountDescArr:itemDiscountDescArr offerPriceArray:onlineOfferDiscountPriceArr dealPriceArray:onlineDealDiscountPriceArr itemScanCode:itemScanCode turnOverOffer:turnoverofferDiscount totalPriceBeforeTurnOver:totalBeforeTurnOver salesPersonInfo:employeeDic manufacturedItems:manufacturedItemsArr packagedItemsArr:isPackagedItem productInfoArr:productInfoArr otherDiscountValue:otherDiscountValue];
        
        
        
        [orderDetails setObject:[NSNumber numberWithBool:YES] forKey:@"isItemsChange"];
        [orderDetails setObject:itemArray forKey:@"itemDetails"];
        
        [orderDetails setObject:[NSNumber numberWithFloat:[netPayLblVal.text floatValue]] forKey:@"grandTotal"];
        
        [orderDetails setObject:[NSNumber numberWithFloat:0.00] forKey:@"tax"];
        [orderDetails setObject:[NSNumber numberWithFloat:[subtotalTxt.text floatValue]] forKey:@"subTotal"];
        
        [orderDetails setObject:presentLocation forKey:@"location"];
        [orderDetails setObject:presentLocation forKey:@"store_location"];
        
        
        NSError * err;
        NSData * jsonData = [NSJSONSerialization dataWithJSONObject:orderDetails options:0 error:&err];
        NSString * updateBookingJsonStr = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        
        
        WebServiceController *controller = [[WebServiceController alloc] init];
        [controller setRestaurantBookingServiceDelegate:self];
        [controller updateRestBooking:updateBookingJsonStr];
    } @catch (NSException *exception) {
        
        NSLog(@"----exception in UpdateFBOrderDetails-------------%@", exception);
    } @finally {
        
    }
}

-(void)updateBookingSuccess:(NSDictionary*)successDictionary{
    
}
-(void)updateBookingFailure:(NSString *)failureString{
    
}


-(void) createOrUpdateCustomerWallet{
    
    
    NSMutableDictionary * customerWalletDic = [[NSMutableDictionary alloc] init];
    
    
    NSString * customerNumbStr = custmerPhNum.text;
    
    if([custmerPhNum.text length] == 0 || [custmerPhNum.text length] < 10){
        customerNumbStr = phoneNumberText.text;
    }
    
    [customerWalletDic setValue:[RequestHeader getRequestHeader] forKey:REQUEST_HEADER];
    [customerWalletDic setValue:customerNumbStr forKey:@"phoneNumber"];
    [customerWalletDic setValue:firstName forKey:@"userName"];
    [customerWalletDic setValue:roleName forKey:@"roleName"];
    [customerWalletDic setValue:@"Customer" forKey:@"txnSource"];
    
//    [customerWalletDic setValue:NULL forKey:@"updatedDate"];
//    [customerWalletDic setValue:NULL forKey:@"createdDate"];
//    [customerWalletDic setValue:NULL forKey:@"customerId"];
//    [customerWalletDic setValue:NULL forKey:@"remarks"];
//    [customerWalletDic setValue:NULL forKey:@"responseHeader"];

    [customerWalletDic setValue:[NSNumber numberWithFloat:0] forKey:@"amountBalance"];
    [customerWalletDic setValue:[NSNumber numberWithFloat:0] forKey:@"amountDebited"];
    [customerWalletDic setValue:[NSNumber numberWithFloat:0] forKey:@"amountCredited"];
    
    // here we are checking for credit or debit and sending keyValues accordingly
    if(walletCreditAmt > 0){
        [customerWalletDic setValue: [NSNumber numberWithFloat:walletCreditAmt] forKey:@"amountCredited"];
        [customerWalletDic setValue:@"Sign Up" forKey:@"txnType"];
    }
    if(walletDebitAmt > 0){
        [customerWalletDic setValue: [NSNumber numberWithFloat:walletDebitAmt] forKey:@"amountDebited"];
        [customerWalletDic setValue:@"POS Order" forKey:@"txnType"];
    }
    
    NSError * err;
    NSData * jsonData = [NSJSONSerialization dataWithJSONObject:customerWalletDic options:0 error:&err];
    NSString * getcustomerWalletDicJsonStr   = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
    
    NSLog(@"%@--json CUstomer create Wallet String--",getcustomerWalletDicJsonStr);
    
    WebServiceController * services = [[WebServiceController alloc]init];
    services.customerLedgerService =  self;
    [services createOrUpdateCustomerWalletServices:getcustomerWalletDicJsonStr];
}


- (void)createCustomerWalletSuccessResponse:(NSDictionary *)successDictionary{
    
    @try {
        
        NSLog(@"Customer Wallet created Successfully:%@",successDictionary);
        
    } @catch (NSException *exception) {
        
    } @finally {
        
        [HUD setHidden:YES];
    }
}
- (void)createCustomerWalletErrorResponse:(NSString *)failureString{
    
    @try {
        NSLog(@"Customer Wallet error:%@",failureString);
   } @catch (NSException *exception) {
        
    } @finally {
        
        [HUD setHidden:YES];
    }
}



// added by roja on 03/12/2019..

- (void)issueGiftVoucherToCustomerSuccessResponse:(NSDictionary *)successDictionary{
    
    @try {
        
    } @catch (NSException *exception) {
        
    } @finally {
        [HUD setHidden:YES];
    }
    
}


- (void)issueGiftVoucherToCustomerFailureResponse:(NSString *)failureString{
    
    @try {
           
       } @catch (NSException *exception) {
           
       } @finally {
           [HUD setHidden:YES];

       }
    
}
//upto here added by roja on 03/12/2019..



@end

