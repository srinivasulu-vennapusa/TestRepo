/*
	SDZLoginService.m
	The implementation classes and methods for the LoginService web service.
	Generated by SudzC.com
*/

#import "SDZLoginService.h"
				
#import "Soap.h"
#import "Global.h"
#import "sqlite3.h"
#import "Global.h"

static sqlite3 *database = nil;
static sqlite3_stmt *selectStmt = nil;

/* Implementation of the service */
				
@implementation SDZLoginService

	- (id) init
	{
        [self loadDbpath];
        if(self = [super init])
		{
            
            NSString *fisrtURL = @"http://";
            NSString *domain = host_name;
            NSString *column = @":";  
            NSString *portnum = port_no;
            NSString *secondURL = @"/OmniRetailerServices/services/Login";
            
            if(host_name != NULL && port_no!= NULL )
            {
 
                @try {
                    if ([domain rangeOfString:@"."].location == NSNotFound) {
                        
                        domain = @"49.204.0.37";
                        portnum = @"8080";
                        
                        self.serviceUrl = [NSString stringWithFormat:@"%@%@%@%@%@",fisrtURL,domain,column,portnum,secondURL];
                        self.namespace1 = @"http://impl.login.mobileservices.tlabs.com";
                        self.headers = nil;
                        self.logging = NO;
                    }
                    else{
                        //self.serviceUrl = [NSString stringWithFormat:@"%@%@%@", fisrtURL,domain,secondURL];
                        self.serviceUrl = [NSString stringWithFormat:@"%@%@%@%@%@",fisrtURL,domain,column,portnum,secondURL];
                        self.namespace1 = @"http://impl.login.mobileservices.tlabs.com";
                        self.headers = nil;
                        self.logging = NO;
                    }
                }
                @catch (NSException *exception) {
                    UIAlertView *check = [[UIAlertView alloc] initWithTitle:@"Login Failed" message:@"Please try again" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [check show];
                    [check release];
                }
               
            }
            else
            {
                //write allert statement
                host_name = @"49.204.0.37";
                port_no = @"8080";
                
                self.serviceUrl = [NSString stringWithFormat:@"%@%@%@%@%@",fisrtURL,host_name,column,port_no,secondURL];
                self.namespace1 = @"http://impl.login.mobileservices.tlabs.com";
                self.headers = nil;
                self.logging = NO;
                
            }
            
		}
		return self;
	}

- (void) loadDbpath {
    
    NSString *domainText = NULL;
    NSString *portNumber = NULL;
    
    //Get data from database
    // getting the present value's from database ..
    
    NSString* dbPath = [self getDBPath];
    
    NSFileManager *fileManager = [NSFileManager defaultManager];
    
    NSString *databasePathFromApp = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:@"RetailerConfigDataBase.sqlite"];
    
    [fileManager copyItemAtPath:databasePathFromApp toPath:dbPath error:nil];
    
    [fileManager release];
    
    if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK) {
        
        const char *sqlStatement = "select * from ServiceCredentials";
        
        if(sqlite3_prepare_v2(database, sqlStatement, -1, &selectStmt, NULL) == SQLITE_OK) {
            while (sqlite3_step(selectStmt) == SQLITE_ROW) {
                
                domainText = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 0)];
                portNumber = [NSString stringWithUTF8String:(char *)sqlite3_column_text(selectStmt, 1)];
            }
            sqlite3_finalize(selectStmt);
        }
    }
    
    selectStmt = nil;
    sqlite3_close(database);
    // setting the gloable variables for domain and port number
    // changed by saradhi on 5-12-12 ..
    host_name = [domainText copy];
    port_no   = [portNumber copy];
    
}

- (NSString *) getDBPath {
    
    //Search for standard documents using NSSearchPathForDirectoriesInDomains
    //First Param = Searching the documents directory
    //Second Param = Searching the Users directory and not the System
    //Expand any tildes and identify home directories.
    NSString* databaseName = @"RetailerConfigDataBase.sqlite";
    
    NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsDir = [documentPaths objectAtIndex:0];
    NSString* databasePath = [documentsDir stringByAppendingPathComponent:databaseName];
    return databasePath;
    
}


	
	- (id) initWithUsername: (NSString*) username andPassword: (NSString*) password {
		if(self = [super initWithUsername:username andPassword:password]) {
		}
		return self;
	}
	
	+ (SDZLoginService*) service {
		return [SDZLoginService serviceWithUsername:nil andPassword:nil];
	}
	
	+ (SDZLoginService*) serviceWithUsername: (NSString*) username andPassword: (NSString*) password {
		return [[[SDZLoginService alloc] initWithUsername:username andPassword:password] autorelease];
	}

		
	/* Returns NSString*.  */
	- (SoapRequest*) createMember: (id <SoapDelegate>) handler userID: (NSString*) userID emailId: (NSString*) emailId password: (NSString*) password firstName: (NSString*) firstName lastName: (NSString*) lastName imei: (NSString*) imei country: (NSString*) country
	{
		return [self createMember: handler action: nil userID: userID emailId: emailId password: password firstName: firstName lastName: lastName imei: imei country: country];
	}

	- (SoapRequest*) createMember: (id) _target action: (SEL) _action userID: (NSString*) userID emailId: (NSString*) emailId password: (NSString*) password firstName: (NSString*) firstName lastName: (NSString*) lastName imei: (NSString*) imei country: (NSString*) country
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: userID forName: @"userID"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: emailId forName: @"emailId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: password forName: @"password"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: firstName forName: @"firstName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: lastName forName: @"lastName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: imei forName: @"imei"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: country forName: @"country"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"createMember" forNamespace: self.namespace1 withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns BOOL.  */
	- (SoapRequest*) cancelMember: (id <SoapDelegate>) handler userID: (NSString*) userID
	{
		return [self cancelMember: handler action: nil userID: userID];
	}

	- (SoapRequest*) cancelMember: (id) _target action: (SEL) _action userID: (NSString*) userID
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: userID forName: @"userID"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"cancelMember" forNamespace: self.namespace1 withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns BOOL.  */
	- (SoapRequest*) updateMemberDetails: (id <SoapDelegate>) handler userID: (NSString*) userID password: (NSString*) password imei: (NSString*) imei
	{
		return [self updateMemberDetails: handler action: nil userID: userID password: password imei: imei];
	}

	- (SoapRequest*) updateMemberDetails: (id) _target action: (SEL) _action userID: (NSString*) userID password: (NSString*) password imei: (NSString*) imei
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: userID forName: @"userID"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: password forName: @"password"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: imei forName: @"imei"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"updateMemberDetails" forNamespace: self.namespace1 withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) authenticateUser: (id <SoapDelegate>) handler userID: (NSString*) userID password: (NSString*) password imei: (NSString*) imei
	{
		return [self authenticateUser: handler action: nil userID: userID password: password imei: imei];
	}

	- (SoapRequest*) authenticateUser: (id) _target action: (SEL) _action userID: (NSString*) userID password: (NSString*) password imei: (NSString*) imei
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: userID forName: @"userID"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: password forName: @"password"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: imei forName: @"imei"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"authenticateUser" forNamespace: self.namespace1 withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns BOOL.  */
	- (SoapRequest*) forgetPassword: (id <SoapDelegate>) handler emailId: (NSString*) emailId
	{
		return [self forgetPassword: handler action: nil emailId: emailId];
	}

	- (SoapRequest*) forgetPassword: (id) _target action: (SEL) _action emailId: (NSString*) emailId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: emailId forName: @"emailId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"forgetPassword" forNamespace: self.namespace1 withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}


@end
	